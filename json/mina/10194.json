[{"authorTime":"2013-06-06 21:45:47","codes":[{"authorDate":"2013-07-29 21:43:55","commitOrder":11,"curCode":"    public static void main(final String[] args) {\n        LOG.info(\"starting echo server\");\n\n        final NioTcpServer server = new NioTcpServer();\n        final MetricRegistry metrics = new MetricRegistry();\n        final JmxReporter reporter = JmxReporter.forRegistry(metrics).build();\n        reporter.start();\n        server.getSessionConfig().setIdleTimeInMillis(IdleStatus.READ_IDLE, 60*600*1000);\n        server.getSessionConfig().setIdleTimeInMillis(IdleStatus.WRITE_IDLE, 60*600*1000);\n\n        \r\n        server.setFilters(new MonitoringFilter(metrics), new LoggingFilter(\"LoggingFilter1\"), new IoFilter() {\n\n            @Override\n            public void sessionOpened(final IoSession session) {\n                LOG.info(\"session {} open\", session);\n            }\n\n            @Override\n            public void sessionIdle(final IoSession session, final IdleStatus status) {\n                LOG.info(\"session {} idle\", session);\n            }\n\n            @Override\n            public void sessionClosed(final IoSession session) {\n                LOG.info(\"session {} open\", session);\n            }\n\n            @Override\n            public void messageWriting(final IoSession session, WriteRequest message,\n                                       final WriteFilterChainController controller) {\n                \r\n                controller.callWriteNextFilter(message);\n            }\n\n            @Override\n            public void messageReceived(final IoSession session, final Object message,\n                                        final ReadFilterChainController controller) {\n\n                if (message instanceof ByteBuffer) {\n                    LOG.info(\"echoing\");\n                    session.write(message);\n                }\n            }\n\n            @Override\n            public void messageSent(final IoSession session, final Object message) {\n                LOG.info(\"message {} sent\", message);\n            }\n        });\n        server.setIoHandler(new AbstractIoHandler() {\n            @Override\n            public void sessionOpened(final IoSession session) {\n                LOG.info(\"session opened {}\", session);\n\n                final String welcomeStr = \"welcome\\n\";\n                final ByteBuffer bf = ByteBuffer.allocate(welcomeStr.length());\n                bf.put(welcomeStr.getBytes());\n                bf.flip();\n                session.write(bf);\n\n            }\n\n            @Override\n            public void exceptionCaught(IoSession session, Exception cause) {\n                cause.printStackTrace();\n            }\n        });\n\n        try {\n            final SocketAddress address = new InetSocketAddress(51000);\n            server.bind(address);\n            LOG.debug(\"Running the server for 25 sec\");\n            Thread.sleep(25000 * 1000);\n            LOG.debug(\"Unbinding the UDP port\");\n            server.unbind();\n        } catch (final InterruptedException e) {\n            LOG.error(\"Interrupted exception\", e);\n        } finally {\n            reporter.stop();\n        }\n    }\n","date":"2013-07-29 21:43:55","endLine":129,"groupId":"2078","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mina-10-0.7/blobInfo/CC_OUT/blobs/6b/9c431dd5a4c010a596feda6c074641de7106d2.src","preCode":"    public static void main(final String[] args) {\n        LOG.info(\"starting echo server\");\n\n        final NioTcpServer server = new NioTcpServer();\n        final MetricRegistry metrics = new MetricRegistry();\n        final JmxReporter reporter = JmxReporter.forRegistry(metrics).build();\n        reporter.start();\n        server.getSessionConfig().setIdleTimeInMillis(IdleStatus.READ_IDLE, 60*600*1000);\n        server.getSessionConfig().setIdleTimeInMillis(IdleStatus.WRITE_IDLE, 60*600*1000);\n\n        \r\n        server.setFilters(new MonitoringFilter(metrics), new LoggingFilter(\"LoggingFilter1\"), new IoFilter() {\n\n            @Override\n            public void sessionOpened(final IoSession session) {\n                LOG.info(\"session {} open\", session);\n            }\n\n            @Override\n            public void sessionIdle(final IoSession session, final IdleStatus status) {\n                LOG.info(\"session {} idle\", session);\n            }\n\n            @Override\n            public void sessionClosed(final IoSession session) {\n                LOG.info(\"session {} open\", session);\n            }\n\n            @Override\n            public void messageWriting(final IoSession session, WriteRequest message,\n                                       final WriteFilterChainController controller) {\n                \r\n                controller.callWriteNextFilter(message);\n            }\n\n            @Override\n            public void messageReceived(final IoSession session, final Object message,\n                                        final ReadFilterChainController controller) {\n\n                if (message instanceof ByteBuffer) {\n                    LOG.info(\"echoing\");\n                    session.write(message);\n                }\n            }\n\n            @Override\n            public void messageSent(final IoSession session, final Object message) {\n                LOG.info(\"message {} sent\", message);\n            }\n        });\n        server.setIoHandler(new AbstractIoHandler() {\n            @Override\n            public void sessionOpened(final IoSession session) {\n                LOG.info(\"session opened {}\", session);\n\n                final String welcomeStr = \"welcome\\n\";\n                final ByteBuffer bf = ByteBuffer.allocate(welcomeStr.length());\n                bf.put(welcomeStr.getBytes());\n                bf.flip();\n                session.write(bf);\n\n            }\n\n            @Override\n            public void exceptionCaught(IoSession session, Exception cause) {\n                cause.printStackTrace();\n            }\n        });\n\n        try {\n            final SocketAddress address = new InetSocketAddress(51000);\n            server.bind(address);\n            LOG.debug(\"Running the server for 25 sec\");\n            Thread.sleep(25000 * 1000);\n            LOG.debug(\"Unbinding the UDP port\");\n            server.unbind();\n        } catch (final InterruptedException e) {\n            LOG.error(\"Interrupted exception\", e);\n        } finally {\n            reporter.stop();\n        }\n    }\n","realPath":"monitoring/src/test/java/org/apache/mina/monitoring/NioTcpEchoServerWithMonitoring.java","repoName":"mina","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2013-06-06 21:45:47","commitOrder":11,"curCode":"    public static void main(final String[] args) {\n        LOG.info(\"starting echo server\");\n\n        final NioUdpServer server = new NioUdpServer();\n\n        \r\n        server.setFilters(new LoggingFilter(\"LoggingFilter1\"), new IoFilter() {\n\n            @Override\n            public void sessionOpened(final IoSession session) {\n                LOG.info(\"session {} open\", session);\n            }\n\n            @Override\n            public void sessionIdle(final IoSession session, final IdleStatus status) {\n                LOG.info(\"session {} idle\", session);\n            }\n\n            @Override\n            public void sessionClosed(final IoSession session) {\n                LOG.info(\"session {} open\", session);\n            }\n\n            @Override\n            public void messageWriting(final IoSession session, WriteRequest message,\n                    final WriteFilterChainController controller) {\n                \r\n                controller.callWriteNextFilter(message);\n            }\n\n            @Override\n            public void messageReceived(final IoSession session, final Object message,\n                    final ReadFilterChainController controller) {\n\n                if (message instanceof ByteBuffer) {\n                    LOG.info(\"echoing\");\n                    session.write(message);\n                }\n            }\n\n            @Override\n            public void messageSent(final IoSession session, final Object message) {\n                LOG.info(\"message {} sent\", message);\n            }\n        });\n\n        server.setIoHandler(new AbstractIoHandler() {\n            @Override\n            public void sessionOpened(final IoSession session) {\n                LOG.info(\"session opened {}\", session);\n\n                final String welcomeStr = \"welcome\\n\";\n                final ByteBuffer bf = ByteBuffer.allocate(welcomeStr.length());\n                bf.put(welcomeStr.getBytes());\n                bf.flip();\n                session.write(bf);\n\n            }\n        });\n\n        try {\n            final SocketAddress address = new InetSocketAddress(9999);\n            server.bind(address);\n            LOG.debug(\"Running the server for 25 sec\");\n            Thread.sleep(25000);\n            LOG.debug(\"Unbinding the UDP port\");\n            server.unbind();\n        } catch (final InterruptedException e) {\n            LOG.error(\"Interrupted exception\", e);\n        }\n    }\n","date":"2013-06-06 21:45:47","endLine":116,"groupId":"2078","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mina-10-0.7/blobInfo/CC_OUT/blobs/14/5a8009b8c5a6172190afa43355ef36ecec1dd7.src","preCode":"    public static void main(final String[] args) {\n        LOG.info(\"starting echo server\");\n\n        final NioUdpServer server = new NioUdpServer();\n\n        \r\n        server.setFilters(new LoggingFilter(\"LoggingFilter1\"), new IoFilter() {\n\n            @Override\n            public void sessionOpened(final IoSession session) {\n                LOG.info(\"session {} open\", session);\n            }\n\n            @Override\n            public void sessionIdle(final IoSession session, final IdleStatus status) {\n                LOG.info(\"session {} idle\", session);\n            }\n\n            @Override\n            public void sessionClosed(final IoSession session) {\n                LOG.info(\"session {} open\", session);\n            }\n\n            @Override\n            public void messageWriting(final IoSession session, WriteRequest message,\n                    final WriteFilterChainController controller) {\n                \r\n                controller.callWriteNextFilter(message);\n            }\n\n            @Override\n            public void messageReceived(final IoSession session, final Object message,\n                    final ReadFilterChainController controller) {\n\n                if (message instanceof ByteBuffer) {\n                    LOG.info(\"echoing\");\n                    session.write(message);\n                }\n            }\n\n            @Override\n            public void messageSent(final IoSession session, final Object message) {\n                LOG.info(\"message {} sent\", message);\n            }\n        });\n\n        server.setIoHandler(new AbstractIoHandler() {\n            @Override\n            public void sessionOpened(final IoSession session) {\n                LOG.info(\"session opened {}\", session);\n\n                final String welcomeStr = \"welcome\\n\";\n                final ByteBuffer bf = ByteBuffer.allocate(welcomeStr.length());\n                bf.put(welcomeStr.getBytes());\n                bf.flip();\n                session.write(bf);\n\n            }\n        });\n\n        try {\n            final SocketAddress address = new InetSocketAddress(9999);\n            server.bind(address);\n            LOG.debug(\"Running the server for 25 sec\");\n            Thread.sleep(25000);\n            LOG.debug(\"Unbinding the UDP port\");\n            server.unbind();\n        } catch (final InterruptedException e) {\n            LOG.error(\"Interrupted exception\", e);\n        }\n    }\n","realPath":"examples/src/main/java/org/apache/mina/examples/udpecho/NioUdpEchoServer.java","repoName":"mina","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"NB"}],"commitId":"44f87608fe356594445221b163f171a18e84d3dc","commitMessage":"@@@initial draft of monitoring\n","date":"2013-07-29 21:43:55","modifiedFileCount":"0","status":"M","submitter":"paliwalashish"},{"authorTime":"2014-10-13 18:22:15","codes":[{"authorDate":"2014-10-13 18:22:15","commitOrder":12,"curCode":"    public static void main(String[] args) {\n        LOG.info(\"starting echo server\");\n\n        NioTcpServer server = new NioTcpServer();\n        MetricRegistry metrics = new MetricRegistry();\n        JmxReporter reporter = JmxReporter.forRegistry(metrics).build();\n        reporter.start();\n        server.getSessionConfig().setIdleTimeInMillis(IdleStatus.READ_IDLE, 60 * 600 * 1000);\n        server.getSessionConfig().setIdleTimeInMillis(IdleStatus.WRITE_IDLE, 60 * 600 * 1000);\n\n        \r\n        server.setFilters(new MonitoringFilter(metrics), new LoggingFilter(\"LoggingFilter1\"),\n                ((NioTcpEchoServerWithMonitoring) server).new TcpEchoFilter());\n        server.setIoHandler(new AbstractIoHandler() {\n            @Override\n            public void sessionOpened(final IoSession session) {\n                LOG.info(\"session opened {}\", session);\n\n                final String welcomeStr = \"welcome\\n\";\n                final ByteBuffer bf = ByteBuffer.allocate(welcomeStr.length());\n                bf.put(welcomeStr.getBytes());\n                bf.flip();\n                session.write(bf);\n\n            }\n\n            @Override\n            public void exceptionCaught(IoSession session, Exception cause) {\n                cause.printStackTrace();\n            }\n        });\n\n        try {\n            final SocketAddress address = new InetSocketAddress(51000);\n            server.bind(address);\n            LOG.debug(\"Running the server for 25 sec\");\n            Thread.sleep(25000 * 1000);\n            LOG.debug(\"Unbinding the UDP port\");\n            server.unbind();\n        } catch (final InterruptedException e) {\n            LOG.error(\"Interrupted exception\", e);\n        } finally {\n            reporter.stop();\n        }\n    }\n","date":"2014-10-13 18:22:15","endLine":136,"groupId":"10194","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mina-10-0.7/blobInfo/CC_OUT/blobs/d9/87bcb1c163cdba8cca9582fa24149202f41599.src","preCode":"    public static void main(final String[] args) {\n        LOG.info(\"starting echo server\");\n\n        final NioTcpServer server = new NioTcpServer();\n        final MetricRegistry metrics = new MetricRegistry();\n        final JmxReporter reporter = JmxReporter.forRegistry(metrics).build();\n        reporter.start();\n        server.getSessionConfig().setIdleTimeInMillis(IdleStatus.READ_IDLE, 60*600*1000);\n        server.getSessionConfig().setIdleTimeInMillis(IdleStatus.WRITE_IDLE, 60*600*1000);\n\n        \r\n        server.setFilters(new MonitoringFilter(metrics), new LoggingFilter(\"LoggingFilter1\"), new IoFilter() {\n\n            @Override\n            public void sessionOpened(final IoSession session) {\n                LOG.info(\"session {} open\", session);\n            }\n\n            @Override\n            public void sessionIdle(final IoSession session, final IdleStatus status) {\n                LOG.info(\"session {} idle\", session);\n            }\n\n            @Override\n            public void sessionClosed(final IoSession session) {\n                LOG.info(\"session {} open\", session);\n            }\n\n            @Override\n            public void messageWriting(final IoSession session, WriteRequest message,\n                                       final WriteFilterChainController controller) {\n                \r\n                controller.callWriteNextFilter(message);\n            }\n\n            @Override\n            public void messageReceived(final IoSession session, final Object message,\n                                        final ReadFilterChainController controller) {\n\n                if (message instanceof ByteBuffer) {\n                    LOG.info(\"echoing\");\n                    session.write(message);\n                }\n            }\n\n            @Override\n            public void messageSent(final IoSession session, final Object message) {\n                LOG.info(\"message {} sent\", message);\n            }\n        });\n        server.setIoHandler(new AbstractIoHandler() {\n            @Override\n            public void sessionOpened(final IoSession session) {\n                LOG.info(\"session opened {}\", session);\n\n                final String welcomeStr = \"welcome\\n\";\n                final ByteBuffer bf = ByteBuffer.allocate(welcomeStr.length());\n                bf.put(welcomeStr.getBytes());\n                bf.flip();\n                session.write(bf);\n\n            }\n\n            @Override\n            public void exceptionCaught(IoSession session, Exception cause) {\n                cause.printStackTrace();\n            }\n        });\n\n        try {\n            final SocketAddress address = new InetSocketAddress(51000);\n            server.bind(address);\n            LOG.debug(\"Running the server for 25 sec\");\n            Thread.sleep(25000 * 1000);\n            LOG.debug(\"Unbinding the UDP port\");\n            server.unbind();\n        } catch (final InterruptedException e) {\n            LOG.error(\"Interrupted exception\", e);\n        } finally {\n            reporter.stop();\n        }\n    }\n","realPath":"monitoring/src/test/java/org/apache/mina/monitoring/NioTcpEchoServerWithMonitoring.java","repoName":"mina","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2014-10-13 18:22:15","commitOrder":12,"curCode":"    public static void main(final String[] args) {\n        LOG.info(\"starting echo server\");\n\n        final NioUdpServer server = new NioUdpEchoServer();\n\n        \r\n        server.setFilters(new LoggingFilter(\"LoggingFilter1\"), ((NioUdpEchoServer) server).new UdpEchoFilter());\n\n        server.setIoHandler(new AbstractIoHandler() {\n            @Override\n            public void sessionOpened(final IoSession session) {\n                LOG.info(\"session opened {}\", session);\n\n                final String welcomeStr = \"welcome\\n\";\n                final ByteBuffer bf = ByteBuffer.allocate(welcomeStr.length());\n                bf.put(welcomeStr.getBytes());\n                bf.flip();\n                session.write(bf);\n\n            }\n        });\n\n        try {\n            final SocketAddress address = new InetSocketAddress(9999);\n            server.bind(address);\n            LOG.debug(\"Running the server for 25 sec\");\n            Thread.sleep(25000);\n            LOG.debug(\"Unbinding the UDP port\");\n            server.unbind();\n        } catch (final InterruptedException e) {\n            LOG.error(\"Interrupted exception\", e);\n        }\n    }\n","date":"2014-10-13 18:22:15","endLine":121,"groupId":"10194","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mina-10-0.7/blobInfo/CC_OUT/blobs/38/4b643ac9917ff7062b4ba8e5ee893f63d7eb34.src","preCode":"    public static void main(final String[] args) {\n        LOG.info(\"starting echo server\");\n\n        final NioUdpServer server = new NioUdpServer();\n\n        \r\n        server.setFilters(new LoggingFilter(\"LoggingFilter1\"), new IoFilter() {\n\n            @Override\n            public void sessionOpened(final IoSession session) {\n                LOG.info(\"session {} open\", session);\n            }\n\n            @Override\n            public void sessionIdle(final IoSession session, final IdleStatus status) {\n                LOG.info(\"session {} idle\", session);\n            }\n\n            @Override\n            public void sessionClosed(final IoSession session) {\n                LOG.info(\"session {} open\", session);\n            }\n\n            @Override\n            public void messageWriting(final IoSession session, WriteRequest message,\n                    final WriteFilterChainController controller) {\n                \r\n                controller.callWriteNextFilter(message);\n            }\n\n            @Override\n            public void messageReceived(final IoSession session, final Object message,\n                    final ReadFilterChainController controller) {\n\n                if (message instanceof ByteBuffer) {\n                    LOG.info(\"echoing\");\n                    session.write(message);\n                }\n            }\n\n            @Override\n            public void messageSent(final IoSession session, final Object message) {\n                LOG.info(\"message {} sent\", message);\n            }\n        });\n\n        server.setIoHandler(new AbstractIoHandler() {\n            @Override\n            public void sessionOpened(final IoSession session) {\n                LOG.info(\"session opened {}\", session);\n\n                final String welcomeStr = \"welcome\\n\";\n                final ByteBuffer bf = ByteBuffer.allocate(welcomeStr.length());\n                bf.put(welcomeStr.getBytes());\n                bf.flip();\n                session.write(bf);\n\n            }\n        });\n\n        try {\n            final SocketAddress address = new InetSocketAddress(9999);\n            server.bind(address);\n            LOG.debug(\"Running the server for 25 sec\");\n            Thread.sleep(25000);\n            LOG.debug(\"Unbinding the UDP port\");\n            server.unbind();\n        } catch (final InterruptedException e) {\n            LOG.error(\"Interrupted exception\", e);\n        }\n    }\n","realPath":"examples/src/main/java/org/apache/mina/examples/udpecho/NioUdpEchoServer.java","repoName":"mina","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"8b7c37d37b15193984e2f7751b4d0dad0bca517e","commitMessage":"@@@Made the logging filters private classes that inherit from AbstractIoFilter\n","date":"2014-10-13 18:22:15","modifiedFileCount":"2","status":"M","submitter":"Emmanuel L?charny"}]
