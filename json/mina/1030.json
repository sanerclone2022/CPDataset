[{"authorTime":"2013-04-25 19:45:17","codes":[{"authorDate":"2013-04-25 19:45:17","commitOrder":1,"curCode":"    public void testAddHeapBuffers() {\n        ByteBuffer bb1 = ByteBuffer.allocate(5);\n        bb1.put(\"012\".getBytes());\n        bb1.flip();\n\n        ByteBuffer bb2 = ByteBuffer.allocate(5);\n        bb2.put(\"345\".getBytes());\n        bb2.flip();\n\n        ByteBuffer bb3 = ByteBuffer.allocate(5);\n        bb3.put(\"6789\".getBytes());\n        bb3.flip();\n\n        IoBuffer ioBuffer = new IoBuffer();\n        ioBuffer.add(bb1, bb2).add(bb3);\n\n        assertEquals(0, ioBuffer.position());\n        assertEquals(10, ioBuffer.limit());\n        assertEquals(10, ioBuffer.capacity());\n        assertTrue(ioBuffer.hasRemaining());\n\n        for (int i = 0; i < 10; i++) {\n            assertTrue(ioBuffer.hasRemaining());\n            assertEquals(\"0123456789\".charAt(i), ioBuffer.get());\n        }\n\n        try {\n            assertFalse(ioBuffer.hasRemaining());\n            ioBuffer.get();\n            fail();\n        } catch (BufferUnderflowException bufe) {\n            assertTrue(true);\n        }\n    }\n","date":"2013-04-25 19:45:17","endLine":77,"groupId":"1793","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddHeapBuffers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mina-10-0.7/blobInfo/CC_OUT/blobs/73/49eb80bcdd04f041bca660388e14914097259a.src","preCode":"    public void testAddHeapBuffers() {\n        ByteBuffer bb1 = ByteBuffer.allocate(5);\n        bb1.put(\"012\".getBytes());\n        bb1.flip();\n\n        ByteBuffer bb2 = ByteBuffer.allocate(5);\n        bb2.put(\"345\".getBytes());\n        bb2.flip();\n\n        ByteBuffer bb3 = ByteBuffer.allocate(5);\n        bb3.put(\"6789\".getBytes());\n        bb3.flip();\n\n        IoBuffer ioBuffer = new IoBuffer();\n        ioBuffer.add(bb1, bb2).add(bb3);\n\n        assertEquals(0, ioBuffer.position());\n        assertEquals(10, ioBuffer.limit());\n        assertEquals(10, ioBuffer.capacity());\n        assertTrue(ioBuffer.hasRemaining());\n\n        for (int i = 0; i < 10; i++) {\n            assertTrue(ioBuffer.hasRemaining());\n            assertEquals(\"0123456789\".charAt(i), ioBuffer.get());\n        }\n\n        try {\n            assertFalse(ioBuffer.hasRemaining());\n            ioBuffer.get();\n            fail();\n        } catch (BufferUnderflowException bufe) {\n            assertTrue(true);\n        }\n    }\n","realPath":"codec/src/test/java/org/apache/mina/codec/IoBufferTest.java","repoName":"mina","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"B"},{"authorDate":"2013-04-25 19:45:17","commitOrder":1,"curCode":"    public void testAddHeapBuffersOneEmpty() {\n        ByteBuffer bb1 = ByteBuffer.allocate(5);\n        bb1.put(\"012\".getBytes());\n        bb1.flip();\n\n        ByteBuffer bb2 = ByteBuffer.allocate(0);\n\n        ByteBuffer bb3 = ByteBuffer.allocate(5);\n        bb3.put(\"3456\".getBytes());\n        bb3.flip();\n\n        IoBuffer ioBuffer = new IoBuffer();\n        ioBuffer.add(bb1, bb2).add(bb3);\n\n        assertEquals(0, ioBuffer.position());\n        assertEquals(7, ioBuffer.limit());\n        assertEquals(7, ioBuffer.capacity());\n\n        for (int i = 0; i < 7; i++) {\n            assertTrue(ioBuffer.hasRemaining());\n            assertEquals(\"0123456\".charAt(i), ioBuffer.get());\n        }\n\n        try {\n            ioBuffer.get();\n            fail();\n        } catch (BufferUnderflowException bufe) {\n            assertTrue(true);\n        }\n    }\n","date":"2013-04-25 19:45:17","endLine":112,"groupId":"1794","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddHeapBuffersOneEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mina-10-0.7/blobInfo/CC_OUT/blobs/73/49eb80bcdd04f041bca660388e14914097259a.src","preCode":"    public void testAddHeapBuffersOneEmpty() {\n        ByteBuffer bb1 = ByteBuffer.allocate(5);\n        bb1.put(\"012\".getBytes());\n        bb1.flip();\n\n        ByteBuffer bb2 = ByteBuffer.allocate(0);\n\n        ByteBuffer bb3 = ByteBuffer.allocate(5);\n        bb3.put(\"3456\".getBytes());\n        bb3.flip();\n\n        IoBuffer ioBuffer = new IoBuffer();\n        ioBuffer.add(bb1, bb2).add(bb3);\n\n        assertEquals(0, ioBuffer.position());\n        assertEquals(7, ioBuffer.limit());\n        assertEquals(7, ioBuffer.capacity());\n\n        for (int i = 0; i < 7; i++) {\n            assertTrue(ioBuffer.hasRemaining());\n            assertEquals(\"0123456\".charAt(i), ioBuffer.get());\n        }\n\n        try {\n            ioBuffer.get();\n            fail();\n        } catch (BufferUnderflowException bufe) {\n            assertTrue(true);\n        }\n    }\n","realPath":"codec/src/test/java/org/apache/mina/codec/IoBufferTest.java","repoName":"mina","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"809673918572c3c5e0674385fed0773341521e89","commitMessage":"@@@moved IoBuffer to codec project because it's usefull only for decoder implementation\n","date":"2013-04-25 19:45:17","modifiedFileCount":"0","status":"B","submitter":"jvermillard"},{"authorTime":"2013-06-30 17:01:41","codes":[{"authorDate":"2013-06-30 17:01:41","commitOrder":2,"curCode":"    public void testAddHeapBuffers() {\n        ByteBuffer bb1 = ByteBuffer.allocate(5);\n        bb1.put(\"012\".getBytes());\n        bb1.flip();\n\n        ByteBuffer bb2 = ByteBuffer.allocate(5);\n        bb2.put(\"345\".getBytes());\n        bb2.flip();\n\n        ByteBuffer bb3 = ByteBuffer.allocate(5);\n        bb3.put(\"6789\".getBytes());\n        bb3.flip();\n\n        IoBuffer ioBuffer = IoBuffer.newInstance();\n        ioBuffer.add(bb1, bb2).add(bb3);\n\n        assertEquals(0, ioBuffer.position());\n        assertEquals(10, ioBuffer.limit());\n        assertEquals(10, ioBuffer.capacity());\n        assertTrue(ioBuffer.hasRemaining());\n\n        for (int i = 0; i < 10; i++) {\n            assertTrue(ioBuffer.hasRemaining());\n            assertEquals(\"0123456789\".charAt(i), ioBuffer.get());\n        }\n\n        try {\n            assertFalse(ioBuffer.hasRemaining());\n            ioBuffer.get();\n            fail();\n        } catch (BufferUnderflowException bufe) {\n            assertTrue(true);\n        }\n    }\n","date":"2013-06-30 17:03:48","endLine":76,"groupId":"1030","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddHeapBuffers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mina-10-0.7/blobInfo/CC_OUT/blobs/3c/92f662e468b428ca0cb64ec3708bb8a6343f21.src","preCode":"    public void testAddHeapBuffers() {\n        ByteBuffer bb1 = ByteBuffer.allocate(5);\n        bb1.put(\"012\".getBytes());\n        bb1.flip();\n\n        ByteBuffer bb2 = ByteBuffer.allocate(5);\n        bb2.put(\"345\".getBytes());\n        bb2.flip();\n\n        ByteBuffer bb3 = ByteBuffer.allocate(5);\n        bb3.put(\"6789\".getBytes());\n        bb3.flip();\n\n        IoBuffer ioBuffer = new IoBuffer();\n        ioBuffer.add(bb1, bb2).add(bb3);\n\n        assertEquals(0, ioBuffer.position());\n        assertEquals(10, ioBuffer.limit());\n        assertEquals(10, ioBuffer.capacity());\n        assertTrue(ioBuffer.hasRemaining());\n\n        for (int i = 0; i < 10; i++) {\n            assertTrue(ioBuffer.hasRemaining());\n            assertEquals(\"0123456789\".charAt(i), ioBuffer.get());\n        }\n\n        try {\n            assertFalse(ioBuffer.hasRemaining());\n            ioBuffer.get();\n            fail();\n        } catch (BufferUnderflowException bufe) {\n            assertTrue(true);\n        }\n    }\n","realPath":"codec/src/test/java/org/apache/mina/codec/IoBufferTest.java","repoName":"mina","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2013-06-30 17:01:41","commitOrder":2,"curCode":"    public void testAddHeapBuffersOneEmpty() {\n        ByteBuffer bb1 = ByteBuffer.allocate(5);\n        bb1.put(\"012\".getBytes());\n        bb1.flip();\n\n        ByteBuffer bb2 = ByteBuffer.allocate(0);\n\n        ByteBuffer bb3 = ByteBuffer.allocate(5);\n        bb3.put(\"3456\".getBytes());\n        bb3.flip();\n\n        IoBuffer ioBuffer = IoBuffer.newInstance();\n        ioBuffer.add(bb1, bb2).add(bb3);\n\n        assertEquals(0, ioBuffer.position());\n        assertEquals(7, ioBuffer.limit());\n        assertEquals(7, ioBuffer.capacity());\n\n        for (int i = 0; i < 7; i++) {\n            assertTrue(ioBuffer.hasRemaining());\n            assertEquals(\"0123456\".charAt(i), ioBuffer.get());\n        }\n\n        try {\n            ioBuffer.get();\n            fail();\n        } catch (BufferUnderflowException bufe) {\n            assertTrue(true);\n        }\n    }\n","date":"2013-06-30 17:03:48","endLine":111,"groupId":"1030","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddHeapBuffersOneEmpty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-mina-10-0.7/blobInfo/CC_OUT/blobs/3c/92f662e468b428ca0cb64ec3708bb8a6343f21.src","preCode":"    public void testAddHeapBuffersOneEmpty() {\n        ByteBuffer bb1 = ByteBuffer.allocate(5);\n        bb1.put(\"012\".getBytes());\n        bb1.flip();\n\n        ByteBuffer bb2 = ByteBuffer.allocate(0);\n\n        ByteBuffer bb3 = ByteBuffer.allocate(5);\n        bb3.put(\"3456\".getBytes());\n        bb3.flip();\n\n        IoBuffer ioBuffer = new IoBuffer();\n        ioBuffer.add(bb1, bb2).add(bb3);\n\n        assertEquals(0, ioBuffer.position());\n        assertEquals(7, ioBuffer.limit());\n        assertEquals(7, ioBuffer.capacity());\n\n        for (int i = 0; i < 7; i++) {\n            assertTrue(ioBuffer.hasRemaining());\n            assertEquals(\"0123456\".charAt(i), ioBuffer.get());\n        }\n\n        try {\n            ioBuffer.get();\n            fail();\n        } catch (BufferUnderflowException bufe) {\n            assertTrue(true);\n        }\n    }\n","realPath":"codec/src/test/java/org/apache/mina/codec/IoBufferTest.java","repoName":"mina","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"fb03fe6818487455b38ac4fcf9688bbf94d16170","commitMessage":"@@@removed direct access to constructors\n","date":"2013-06-30 17:03:48","modifiedFileCount":"2","status":"M","submitter":"Rapha?l P. Barazzutti"}]
