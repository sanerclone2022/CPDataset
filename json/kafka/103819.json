[{"authorTime":"2018-06-04 17:23:05","codes":[{"authorDate":"2018-06-04 17:23:05","commitOrder":1,"curCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        mockClient.setNodeApiVersions(NodeApiVersions.create());\n        mockClient.setNode(cluster.nodes().get(0));\n\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient, Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    new  MetadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2018-06-04 17:23:05","endLine":260,"groupId":"1645","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectionFailureOnMetadataUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c4/af2c7bcd6ac36e03c487ffa6261c790853c2bb.src","preCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        mockClient.setNodeApiVersions(NodeApiVersions.create());\n        mockClient.setNode(cluster.nodes().get(0));\n\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient, Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    new  MetadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"},{"authorDate":"2018-06-04 17:23:05","commitOrder":1,"curCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        mockClient.setNodeApiVersions(NodeApiVersions.create());\n        mockClient.setNode(cluster.nodes().get(0));\n        mockClient.setUnreachable(cluster.nodes().get(0), 200);\n\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient, Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    new  MetadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2018-06-04 17:23:05","endLine":287,"groupId":"9292","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnreachableBootstrapServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c4/af2c7bcd6ac36e03c487ffa6261c790853c2bb.src","preCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        mockClient.setNodeApiVersions(NodeApiVersions.create());\n        mockClient.setNode(cluster.nodes().get(0));\n        mockClient.setUnreachable(cluster.nodes().get(0), 200);\n\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient, Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    new  MetadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"B"}],"commitId":"d02f02130eb36cdc4375eb40bdbe4a1f9b58fc60","commitMessage":"@@@MINOR: Fix bug in AdminClient node reassignment following connection failure (#5112)\n\nWe added logic to reassign nodes in callToSend after a connection failure.  but we do not handle the case when there is no node currently available to reassign the request to. This can happen when using MetadataUpdateNodeIdProvider if all of the known nodes are blacked out awaiting the retry backoff. To fix this.  we need to ensure that the call is added to pendingCalls if a new node cannot be found.","date":"2018-06-04 17:23:05","modifiedFileCount":"10","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2018-10-31 04:20:13","codes":[{"authorDate":"2018-10-31 04:20:13","commitOrder":2,"curCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    new MetadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2018-10-31 04:20:13","endLine":249,"groupId":"9292","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectionFailureOnMetadataUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/62d39a9633195bdb334503a671756008a437c1.src","preCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        mockClient.setNodeApiVersions(NodeApiVersions.create());\n        mockClient.setNode(cluster.nodes().get(0));\n\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient, Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    new  MetadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"},{"authorDate":"2018-10-31 04:20:13","commitOrder":2,"curCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setUnreachable(cluster.nodes().get(0), 200);\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    new  MetadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2018-10-31 04:20:13","endLine":273,"groupId":"9292","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnreachableBootstrapServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/62d39a9633195bdb334503a671756008a437c1.src","preCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        mockClient.setNodeApiVersions(NodeApiVersions.create());\n        mockClient.setNode(cluster.nodes().get(0));\n        mockClient.setUnreachable(cluster.nodes().get(0), 200);\n\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient, Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    new  MetadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"d71cb54672e63d2f0f4b999668336642a9a63a1d","commitMessage":"@@@KAFKA-7567; Clean up internal metadata usage for consistency and extensibility (#5813)\n\nThis patch makes two improvements to internal metadata handling logic and testing:\n\n1. It reduce dependence on the public object `Cluster` for internal metadata propagation since it is not easy to evolve. As an example.  we need to propagate leader epochs from the metadata response to `Metadata`.  but it is not straightforward to do this without exposing it in `PartitionInfo` since that is what `Cluster` uses internally. By doing this change.  we are able to remove some redundant `Cluster` building logic. \n2. We want to make the metadata handling in `MockClient` simpler and more consistent. Currently we have mix of metadata update mechanisms which are internally inconsistent with each other and do not match the implementation in `NetworkClient`.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>","date":"2018-10-31 04:20:13","modifiedFileCount":"29","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2019-02-05 02:39:43","codes":[{"authorDate":"2019-02-05 02:39:43","commitOrder":3,"curCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    new MetadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2019-02-05 02:39:43","endLine":263,"groupId":"9292","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectionFailureOnMetadataUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/bb3a8bca4c4d7448f788aedc6a48be0f5aed78.src","preCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    new MetadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2019-02-05 02:39:43","commitOrder":3,"curCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setUnreachable(cluster.nodes().get(0), 200);\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    new  MetadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2019-02-05 02:39:43","endLine":287,"groupId":"9292","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnreachableBootstrapServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/bb3a8bca4c4d7448f788aedc6a48be0f5aed78.src","preCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setUnreachable(cluster.nodes().get(0), 200);\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    new  MetadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"}],"commitId":"e2e8bdbd8cb6ca2ac962c72147d21a9e8b9ba2c0","commitMessage":"@@@KAFKA-7832: Use automatic RPC generation in CreateTopics (#5972)\n\nReviewers: Jun Rao <junrao@gmail.com>.  Tom Bentley <tbentley@redhat.com>.  Boyang Chen <bchen11@outlook.com>","date":"2019-02-05 02:39:43","modifiedFileCount":"11","status":"M","submitter":"Colin Patrick McCabe"},{"authorTime":"2019-03-10 20:00:16","codes":[{"authorDate":"2019-03-10 20:00:16","commitOrder":4,"curCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2019-03-10 20:00:16","endLine":264,"groupId":"9292","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectionFailureOnMetadataUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9e/2503478b955916797a43a2837462283d80a710.src","preCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    new MetadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"},{"authorDate":"2019-03-10 20:00:16","commitOrder":4,"curCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setUnreachable(cluster.nodes().get(0), 200);\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2019-03-10 20:00:16","endLine":288,"groupId":"9292","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnreachableBootstrapServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9e/2503478b955916797a43a2837462283d80a710.src","preCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setUnreachable(cluster.nodes().get(0), 200);\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    new  MetadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"}],"commitId":"a42f16f980cba86a8889be8b7499437ecbc2cd42","commitMessage":"@@@KAFKA-7922: Return authorized operations in Metadata request response (KIP-430 Part-2)\n\n-  Use automatic RPC generation in Metadata Request/Response classes\n-  https://cwiki.apache.org/confluence/display/KAFKA/KIP-430+-+Return+Authorized+Operations+in+Describe+Responses\n\nAuthor: Manikumar Reddy <manikumar.reddy@gmail.com>\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>\n\nCloses #6352 from omkreddy/KIP-430-METADATA\n","date":"2019-03-10 20:00:16","modifiedFileCount":"27","status":"M","submitter":"Manikumar Reddy"},{"authorTime":"2019-05-17 21:20:04","codes":[{"authorDate":"2019-03-10 20:00:16","commitOrder":5,"curCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2019-03-10 20:00:16","endLine":264,"groupId":"9292","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectionFailureOnMetadataUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9e/2503478b955916797a43a2837462283d80a710.src","preCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"N"},{"authorDate":"2019-05-17 21:20:04","commitOrder":5,"curCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        Map<Node, Long> unreachableNodes = Collections.singletonMap(cluster.nodes().get(0), 200L);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                AdminClientUnitTestEnv.clientConfigs(), unreachableNodes)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2019-05-17 21:20:04","endLine":306,"groupId":"9292","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnreachableBootstrapServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6a/aa75b8e84377d0d084f339b20eff2a391cb74e.src","preCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setUnreachable(cluster.nodes().get(0), 200);\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"}],"commitId":"8de7d3772443a63e46649ab651260db277efafec","commitMessage":"@@@KAFKA-8379; Fix KafkaAdminClientTest.testUnreachableBootstrapServer (#6753)\n\nInitiate `unreachable server` scenario before starting admin client to avoid timing issues if node is disconnected from the test thread while admin client network thread is processing a metadata request.\n\nReviewers: Ismael Juma <ismael@juma.me.uk>","date":"2019-05-17 21:20:04","modifiedFileCount":"2","status":"M","submitter":"Rajini Sivaram"},{"authorTime":"2019-09-10 04:06:47","codes":[{"authorDate":"2019-03-10 20:00:16","commitOrder":6,"curCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2019-03-10 20:00:16","endLine":264,"groupId":"9292","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectionFailureOnMetadataUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9e/2503478b955916797a43a2837462283d80a710.src","preCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"N"},{"authorDate":"2019-09-10 04:06:47","commitOrder":6,"curCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        Map<Node, Long> unreachableNodes = Collections.singletonMap(cluster.nodes().get(0), 200L);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                AdminClientUnitTestEnv.clientConfigs(), unreachableNodes)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2019-09-10 04:06:47","endLine":327,"groupId":"9292","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnreachableBootstrapServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5d/4d84b2d47c9d2abfd9a84ca44f644b086dcd0c.src","preCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(Collections.singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        Map<Node, Long> unreachableNodes = Collections.singletonMap(cluster.nodes().get(0), 200L);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                AdminClientUnitTestEnv.clientConfigs(), unreachableNodes)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"}],"commitId":"e59e4caadc48ee3ba3325d98cbc1fc714ced2b8e","commitMessage":"@@@KAFKA-8222 & KIP-345 part 5: admin request to batch remove members (#7122)\n\nThis PR adds supporting features for static membership. It could batch remove consumers from the group with provided group.instance.id list.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2019-09-10 04:06:47","modifiedFileCount":"5","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-12-18 14:08:53","codes":[{"authorDate":"2019-12-18 14:08:53","commitOrder":7,"curCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(3, 0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2019-12-18 14:08:53","endLine":374,"groupId":"9292","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectionFailureOnMetadataUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/4c717102730e3e5f8e9150482fe11941af0b75.src","preCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"M"},{"authorDate":"2019-12-18 14:08:53","commitOrder":7,"curCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        Map<Node, Long> unreachableNodes = Collections.singletonMap(cluster.nodes().get(0), 200L);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                AdminClientUnitTestEnv.clientConfigs(), unreachableNodes)) {\n            Cluster discoveredCluster = mockCluster(3, 0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2019-12-18 14:08:53","endLine":399,"groupId":"4060","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnreachableBootstrapServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/4c717102730e3e5f8e9150482fe11941af0b75.src","preCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        Map<Node, Long> unreachableNodes = Collections.singletonMap(cluster.nodes().get(0), 200L);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                AdminClientUnitTestEnv.clientConfigs(), unreachableNodes)) {\n            Cluster discoveredCluster = mockCluster(0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":377,"status":"M"}],"commitId":"75a68341da423d8b041ac8824fbebe99f9bd15ff","commitMessage":"@@@MINOR; Refactor KafkaAdminClientTest to reduce the boilerplate code (#7842)\n\n`KafkaAdminClientTest` contains many code repetitions which could be removed. This PR removes most of the boiler plate code.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-12-18 14:08:53","modifiedFileCount":"1","status":"M","submitter":"David Jacot"},{"authorTime":"2020-12-08 07:39:57","codes":[{"authorDate":"2020-12-08 07:39:57","commitOrder":8,"curCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(3, 0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    TestUtils.metadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2020-12-08 07:39:57","endLine":575,"groupId":"3607","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectionFailureOnMetadataUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/1120e94015b24af564b3f9622b4710a9266ac8.src","preCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(3, 0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":554,"status":"M"},{"authorDate":"2020-12-08 07:39:57","commitOrder":8,"curCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        Map<Node, Long> unreachableNodes = Collections.singletonMap(cluster.nodes().get(0), 200L);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                AdminClientUnitTestEnv.clientConfigs(), unreachableNodes)) {\n            Cluster discoveredCluster = mockCluster(3, 0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    TestUtils.metadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2020-12-08 07:39:57","endLine":600,"groupId":"9292","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnreachableBootstrapServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/1120e94015b24af564b3f9622b4710a9266ac8.src","preCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        Map<Node, Long> unreachableNodes = Collections.singletonMap(cluster.nodes().get(0), 200L);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                AdminClientUnitTestEnv.clientConfigs(), unreachableNodes)) {\n            Cluster discoveredCluster = mockCluster(3, 0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    MetadataResponse.prepareResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"M"}],"commitId":"6f27bb02da0dec63a16c0c6aa456b47ba416eb19","commitMessage":"@@@KAFKA-10818: Skip conversion to `Struct` when serializing generated requests/responses (#7409)\n\nGenerated request/response classes have code to serialize/deserialize directly to\n`ByteBuffer` so the intermediate conversion to `Struct` can be skipped for them.\nWe have recently completed the transition to generated request/response classes. \nso we can also remove the `Struct` based fallbacks.\n\nAdditional noteworthy changes:\n* `AbstractRequest.parseRequest` has a more efficient computation of request size that\nrelies on the received buffer instead of the parsed `Struct`.\n* Use `SendBuilder` for `AbstractRequest/Response` `toSend`.  made the superclass\nimplementation final and removed the overrides that are no longer necessary.\n* Removed request/response constructors that assume latest version as they are unsafe\noutside of tests.\n* Removed redundant version fields in requests/responses.\n* Removed unnecessary work in `OffsetFetchResponse`'s constructor when version >= 2.\n* Made `AbstractResponse.throttleTimeMs()` abstract.\n* Using `toSend` in `SaslClientAuthenticator` instead of `serialize`.\n* Various changes in Request/Response classes to make them more consistent and to\nrely on the Data classes as much as possible when it comes to their state.\n* Remove the version argument from `AbstractResponse.toString`.\n* Fix `getErrorResponse` for `ProduceRequest` and `DescribeClientQuotasRequest` to\nuse `ApiError` which processes the error message sent back to the clients. This was\nuncovered by an accidental fix to a `RequestResponseTest` test (it was calling\n`AbstractResponse.toString` instead of `AbstractResponse.toString(short)`).\n\nRely on existing protocol tests to ensure this refactoring does not change \nobserved behavior (aside from improved performance).\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2020-12-08 07:39:57","modifiedFileCount":"174","status":"M","submitter":"Ismael Juma"},{"authorTime":"2020-12-10 03:15:58","codes":[{"authorDate":"2020-12-10 03:15:58","commitOrder":9,"curCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(3, 0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    RequestTestUtils.metadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2020-12-10 03:15:58","endLine":576,"groupId":"3607","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectionFailureOnMetadataUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/89/80289824e3fa3e9ded3cf2c557c9bb3562d23d.src","preCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(3, 0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    TestUtils.metadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":555,"status":"M"},{"authorDate":"2020-12-10 03:15:58","commitOrder":9,"curCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        Map<Node, Long> unreachableNodes = Collections.singletonMap(cluster.nodes().get(0), 200L);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                AdminClientUnitTestEnv.clientConfigs(), unreachableNodes)) {\n            Cluster discoveredCluster = mockCluster(3, 0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    RequestTestUtils.metadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2020-12-10 03:15:58","endLine":601,"groupId":"9292","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnreachableBootstrapServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/89/80289824e3fa3e9ded3cf2c557c9bb3562d23d.src","preCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        Map<Node, Long> unreachableNodes = Collections.singletonMap(cluster.nodes().get(0), 200L);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                AdminClientUnitTestEnv.clientConfigs(), unreachableNodes)) {\n            Cluster discoveredCluster = mockCluster(3, 0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    TestUtils.metadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":579,"status":"M"}],"commitId":"1f98112e993bc4ae098936b1b0661fdb2c4b1880","commitMessage":"@@@MINOR: Remove connection id from Send and consolidate request/message utils (#9714)\n\nConnection id is now only present in `NetworkSend`.  which is now\nthe class used by `Selector`/`NetworkClient`/`KafkaChannel` (which\nworks well since `NetworkReceive` is the class used for\nreceived data).\n\nThe previous `NetworkSend` was also responsible for adding a size\nprefix. This logic is already present in `SendBuilder`.  but for the\nminority of cases where `SendBuilder` is not used (including\na number of tests).  we now have `ByteBufferSend.sizePrefixed()`.\n\nWith regards to the request/message utilities:\n* Renamed `toByteBuffer`/`toBytes` in `MessageUtil` to\n`toVersionPrefixedByteBuffer`/`toVersionPrefixedBytes` for clarity.\n* Introduced new `MessageUtil.toByteBuffer` that does not include\nthe version as the prefix.\n* Renamed `serializeBody` in `AbstractRequest/Response` to\n`serialize` for symmetry with `parse`.\n* Introduced `RequestTestUtils` and moved relevant methods from\n`TestUtils`.\n* Moved `serializeWithHeader` methods that were only used in\ntests to `RequestTestUtils`.\n* Deleted `MessageTestUtil`.\n\nFinally.  a couple of changes to simplify coding patterns:\n* Added `flip()` and `buffer()` to `ByteBufferAccessor`.\n* Added `MessageSizeAccumulator.sizeExcludingZeroCopy`.\n* Used lambdas instead of `TestCondition`.\n* Used `Arrays.copyOf` instead of `System.arraycopy` in `MessageUtil`.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2020-12-10 03:15:58","modifiedFileCount":"80","status":"M","submitter":"Ismael Juma"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2021-01-14 08:17:45","commitOrder":10,"curCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(3, 0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    RequestTestUtils.metadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2021-01-14 08:17:45","endLine":575,"groupId":"103819","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectionFailureOnMetadataUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/cc9f1cd04326662520255628602b4fd114e430.src","preCode":"    public void testConnectionFailureOnMetadataUpdate() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = mockBootstrapCluster();\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster)) {\n            Cluster discoveredCluster = mockCluster(3, 0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest, null, true);\n            env.kafkaClient().prepareResponse(request -> request instanceof MetadataRequest,\n                    RequestTestUtils.metadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                    prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":554,"status":"M"},{"authorDate":"2021-01-14 08:17:45","commitOrder":10,"curCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        Map<Node, Long> unreachableNodes = Collections.singletonMap(cluster.nodes().get(0), 200L);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                AdminClientUnitTestEnv.clientConfigs(), unreachableNodes)) {\n            Cluster discoveredCluster = mockCluster(3, 0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    RequestTestUtils.metadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","date":"2021-01-14 08:17:45","endLine":600,"groupId":"103819","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnreachableBootstrapServer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/cc9f1cd04326662520255628602b4fd114e430.src","preCode":"    public void testUnreachableBootstrapServer() throws Exception {\n        \r\n        \r\n\n        Cluster cluster = Cluster.bootstrap(singletonList(new InetSocketAddress(\"localhost\", 8121)));\n        Map<Node, Long> unreachableNodes = Collections.singletonMap(cluster.nodes().get(0), 200L);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                AdminClientUnitTestEnv.clientConfigs(), unreachableNodes)) {\n            Cluster discoveredCluster = mockCluster(3, 0);\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(body -> body instanceof MetadataRequest,\n                    RequestTestUtils.metadataResponse(discoveredCluster.nodes(), discoveredCluster.clusterResource().clusterId(),\n                            1, Collections.emptyList()));\n            env.kafkaClient().prepareResponse(body -> body instanceof CreateTopicsRequest,\n                prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(10000)).all();\n\n            future.get();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"}]
