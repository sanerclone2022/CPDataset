[{"authorTime":"2020-02-05 13:06:39","codes":[{"authorDate":"2020-02-05 13:06:39","commitOrder":1,"curCode":"    public void shouldThrowIfPositionFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public long position(final TopicPartition partition) {\n                throw kaboom;\n            }\n\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                return partitions.stream().collect(Collectors.toMap(Function.identity(), partition -> 10L));\n            }\n        };\n\n        final StoreChangelogReader changelogReader = new StoreChangelogReader(config, logContext, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(StreamsException.class, changelogReader::restore);\n        assertEquals(kaboom, thrown.getCause());\n    }\n","date":"2020-02-05 13:06:39","endLine":449,"groupId":"6996","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowIfPositionFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/577aa7365fa9c989b665a592f9d75594db8f45.src","preCode":"    public void shouldThrowIfPositionFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public long position(final TopicPartition partition) {\n                throw kaboom;\n            }\n\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                return partitions.stream().collect(Collectors.toMap(Function.identity(), partition -> 10L));\n            }\n        };\n\n        final StoreChangelogReader changelogReader = new StoreChangelogReader(config, logContext, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(StreamsException.class, changelogReader::restore);\n        assertEquals(kaboom, thrown.getCause());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"B"},{"authorDate":"2020-02-05 13:06:39","commitOrder":1,"curCode":"    public void shouldThrowIfEndOffsetsFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                throw kaboom;\n            }\n        };\n\n        final StoreChangelogReader changelogReader = new StoreChangelogReader(config, logContext, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(StreamsException.class, changelogReader::restore);\n        assertEquals(kaboom, thrown.getCause());\n    }\n","date":"2020-02-05 13:06:39","endLine":510,"groupId":"17919","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowIfEndOffsetsFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/577aa7365fa9c989b665a592f9d75594db8f45.src","preCode":"    public void shouldThrowIfEndOffsetsFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                throw kaboom;\n            }\n        };\n\n        final StoreChangelogReader changelogReader = new StoreChangelogReader(config, logContext, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(StreamsException.class, changelogReader::restore);\n        assertEquals(kaboom, thrown.getCause());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":493,"status":"B"}],"commitId":"4090f9a2b0a95e4da127e4786007542276d97520","commitMessage":"@@@KAFKA-9113: Clean up task management and state management (#7997)\n\nThis PR is collaborated by Guozhang Wang and John Roesler. It is a significant tech debt cleanup on task management and state management.  and is broken down by several sub-tasks listed below:\n\nExtract embedded clients (producer and consumer) into RecordCollector from StreamTask.\nguozhangwang#2\nguozhangwang#5\n\nConsolidate the standby updating and active restoring logic into ChangelogReader and extract out of StreamThread.\nguozhangwang#3\nguozhangwang#4\n\nIntroduce Task state life cycle (created.  restoring.  running.  suspended.  closing).  and refactor the task operations based on the current state.\nguozhangwang#6\nguozhangwang#7\n\nConsolidate AssignedTasks into TaskManager and simplify the logic of changelog management and task management (since they are already moved in step 2) and 3)).\nguozhangwang#8\nguozhangwang#9\n\nAlso simplified the StreamThread logic a bit as the embedded clients / changelog restoration logic has been moved into step 1) and 2).\nguozhangwang#10\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-02-05 13:06:39","modifiedFileCount":"76","status":"B","submitter":"Guozhang Wang"},{"authorTime":"2020-02-07 07:28:19","codes":[{"authorDate":"2020-02-07 07:28:19","commitOrder":2,"curCode":"    public void shouldThrowIfPositionFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public long position(final TopicPartition partition) {\n                throw kaboom;\n            }\n\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                return partitions.stream().collect(Collectors.toMap(Function.identity(), partition -> 10L));\n            }\n        };\n\n        final StoreChangelogReader changelogReader = new StoreChangelogReader(time, config, logContext, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(StreamsException.class, changelogReader::restore);\n        assertEquals(kaboom, thrown.getCause());\n    }\n","date":"2020-02-07 07:28:18","endLine":445,"groupId":"6996","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowIfPositionFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/784eaea10b016f54a00eb7c39e9048025f805a.src","preCode":"    public void shouldThrowIfPositionFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public long position(final TopicPartition partition) {\n                throw kaboom;\n            }\n\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                return partitions.stream().collect(Collectors.toMap(Function.identity(), partition -> 10L));\n            }\n        };\n\n        final StoreChangelogReader changelogReader = new StoreChangelogReader(config, logContext, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(StreamsException.class, changelogReader::restore);\n        assertEquals(kaboom, thrown.getCause());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"M"},{"authorDate":"2020-02-07 07:28:19","commitOrder":2,"curCode":"    public void shouldThrowIfEndOffsetsFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                throw kaboom;\n            }\n        };\n\n        final StoreChangelogReader changelogReader = new StoreChangelogReader(time, config, logContext, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(StreamsException.class, changelogReader::restore);\n        assertEquals(kaboom, thrown.getCause());\n    }\n","date":"2020-02-07 07:28:18","endLine":504,"groupId":"17919","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowIfEndOffsetsFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/784eaea10b016f54a00eb7c39e9048025f805a.src","preCode":"    public void shouldThrowIfEndOffsetsFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                throw kaboom;\n            }\n        };\n\n        final StoreChangelogReader changelogReader = new StoreChangelogReader(config, logContext, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(StreamsException.class, changelogReader::restore);\n        assertEquals(kaboom, thrown.getCause());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"M"}],"commitId":"5380938f8bb0cc2dcaab187e381f369361dcbf79","commitMessage":"@@@MINOR: Add timer for update limit offsets (#8047)\n\nInstead of always try to update committed offset limits as long as there are buffered records for standby tasks.  we leverage on the commit interval to reduce our consumer.committed frequency.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  John Roesler <john@confluent.io>","date":"2020-02-07 07:28:18","modifiedFileCount":"8","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-06-19 02:28:49","codes":[{"authorDate":"2020-06-19 02:28:49","commitOrder":3,"curCode":"    public void shouldThrowIfPositionFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public long position(final TopicPartition partition) {\n                throw kaboom;\n            }\n        };\n\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 10L));\n\n        final StoreChangelogReader changelogReader =\n            new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(StreamsException.class, changelogReader::restore);\n        assertEquals(kaboom, thrown.getCause());\n    }\n","date":"2020-06-19 02:28:49","endLine":470,"groupId":"9359","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowIfPositionFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ad/16cff17a20591e8f46036ce58b7cb82ae5669b.src","preCode":"    public void shouldThrowIfPositionFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public long position(final TopicPartition partition) {\n                throw kaboom;\n            }\n\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                return partitions.stream().collect(Collectors.toMap(Function.identity(), partition -> 10L));\n            }\n        };\n\n        final StoreChangelogReader changelogReader =\n            new StoreChangelogReader(time, config, logContext, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(StreamsException.class, changelogReader::restore);\n        assertEquals(kaboom, thrown.getCause());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"M"},{"authorDate":"2020-06-19 02:28:49","commitOrder":3,"curCode":"    public void shouldThrowIfEndOffsetsFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockAdminClient adminClient = new MockAdminClient() {\n            @Override\n            public ListOffsetsResult listOffsets(final Map<TopicPartition, OffsetSpec> topicPartitionOffsets,\n                                                 final ListOffsetsOptions options) {\n                throw kaboom;\n            }\n        };\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 0L));\n\n        final StoreChangelogReader changelogReader =\n            new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(StreamsException.class, changelogReader::restore);\n        assertEquals(kaboom, thrown.getCause());\n    }\n","date":"2020-06-19 02:28:49","endLine":538,"groupId":"16150","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowIfEndOffsetsFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ad/16cff17a20591e8f46036ce58b7cb82ae5669b.src","preCode":"    public void shouldThrowIfEndOffsetsFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                throw kaboom;\n            }\n        };\n\n        final StoreChangelogReader changelogReader =\n            new StoreChangelogReader(time, config, logContext, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(StreamsException.class, changelogReader::restore);\n        assertEquals(kaboom, thrown.getCause());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"M"}],"commitId":"d8cc6fe8e36329c647736773d9d66de89c447409","commitMessage":"@@@KAFKA-10167: use the admin client to read end-offset (#8876)\n\nSince admin client allows use to use flexible offset-spec.  we can always set to use read-uncommitted regardless of the EOS config.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-06-19 02:28:49","modifiedFileCount":"11","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-10-20 02:07:56","codes":[{"authorDate":"2020-10-20 02:07:56","commitOrder":4,"curCode":"    public void shouldThrowIfPositionFail() {\n        final TaskId taskId = new TaskId(0, 0);\n        EasyMock.expect(activeStateManager.taskId()).andReturn(taskId);\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public long position(final TopicPartition partition) {\n                throw kaboom;\n            }\n        };\n\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 10L));\n\n        final StoreChangelogReader changelogReader =\n            new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(\n            StreamsException.class,\n            () -> changelogReader.restore(Collections.singletonMap(taskId, mock(Task.class)))\n        );\n        assertEquals(kaboom, thrown.getCause());\n    }\n","date":"2020-10-20 02:07:56","endLine":544,"groupId":"102478","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowIfPositionFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/98/5526d07d3d5bdddf588ebe7f5140fa5ec37688.src","preCode":"    public void shouldThrowIfPositionFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public long position(final TopicPartition partition) {\n                throw kaboom;\n            }\n        };\n\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 10L));\n\n        final StoreChangelogReader changelogReader =\n            new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(StreamsException.class, changelogReader::restore);\n        assertEquals(kaboom, thrown.getCause());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":519,"status":"M"},{"authorDate":"2020-10-20 02:07:56","commitOrder":4,"curCode":"    public void shouldThrowIfEndOffsetsFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockAdminClient adminClient = new MockAdminClient() {\n            @Override\n            public ListOffsetsResult listOffsets(final Map<TopicPartition, OffsetSpec> topicPartitionOffsets,\n                                                 final ListOffsetsOptions options) {\n                throw kaboom;\n            }\n        };\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 0L));\n\n        final StoreChangelogReader changelogReader =\n            new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(\n            StreamsException.class,\n            () -> changelogReader.restore(Collections.emptyMap())\n        );\n        assertEquals(kaboom, thrown.getCause());\n    }\n","date":"2020-10-20 02:07:56","endLine":629,"groupId":"102478","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowIfEndOffsetsFail","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/98/5526d07d3d5bdddf588ebe7f5140fa5ec37688.src","preCode":"    public void shouldThrowIfEndOffsetsFail() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(10L).anyTimes();\n        EasyMock.replay(activeStateManager, storeMetadata, store);\n\n        final MockAdminClient adminClient = new MockAdminClient() {\n            @Override\n            public ListOffsetsResult listOffsets(final Map<TopicPartition, OffsetSpec> topicPartitionOffsets,\n                                                 final ListOffsetsOptions options) {\n                throw kaboom;\n            }\n        };\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 0L));\n\n        final StoreChangelogReader changelogReader =\n            new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, activeStateManager);\n\n        final StreamsException thrown = assertThrows(StreamsException.class, changelogReader::restore);\n        assertEquals(kaboom, thrown.getCause());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"M"}],"commitId":"aef6cd6e9995b42db2cefa7d715321d0edee5628","commitMessage":"@@@KAFKA-9274: Add timeout handling for state restore and StandbyTasks (#9368)\n\n* Part of KIP-572\n* If a TimeoutException happens during restore of active tasks.  or updating standby tasks.  we need to trigger task.timeout.ms timeout.\n\nReviewers: John Roesler <john@confluent.io>","date":"2020-10-20 02:07:56","modifiedFileCount":"15","status":"M","submitter":"Matthias J. Sax"}]
