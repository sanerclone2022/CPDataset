[{"authorTime":"2019-04-27 00:30:20","codes":[{"authorDate":"2019-04-27 00:30:20","commitOrder":7,"curCode":"    public KStream<K, V> through(final String topic, final Produced<K, V> produced) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(produced, \"Produced can't be null\");\n        final ProducedInternal<K, V> producedInternal = new ProducedInternal<>(produced);\n        if (producedInternal.keySerde() == null) {\n            producedInternal.withKeySerde(keySerde);\n        }\n        if (producedInternal.valueSerde() == null) {\n            producedInternal.withValueSerde(valSerde);\n        }\n        to(topic, producedInternal);\n        return builder.stream(\n            Collections.singleton(topic),\n            new ConsumedInternal<>(\n                producedInternal.keySerde(),\n                producedInternal.valueSerde(),\n                new FailOnInvalidTimestamp(),\n                null\n            )\n        );\n    }\n","date":"2019-04-27 00:30:20","endLine":411,"groupId":"22037","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"through","params":"(finalStringtopic@finalProduced<K@V>produced)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/67/729eceaa51f50f61f346450b6c4a75386ef3cb.src","preCode":"    public KStream<K, V> through(final String topic, final Produced<K, V> produced) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(produced, \"Produced can't be null\");\n        final ProducedInternal<K, V> producedInternal = new ProducedInternal<>(produced);\n        if (producedInternal.keySerde() == null) {\n            producedInternal.withKeySerde(keySerde);\n        }\n        if (producedInternal.valueSerde() == null) {\n            producedInternal.withValueSerde(valSerde);\n        }\n        to(topic, producedInternal);\n        return builder.stream(\n            Collections.singleton(topic),\n            new ConsumedInternal<>(\n                producedInternal.keySerde(),\n                producedInternal.valueSerde(),\n                new FailOnInvalidTimestamp(),\n                null\n            )\n        );\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":391,"status":"MB"},{"authorDate":"2019-04-27 00:30:20","commitOrder":7,"curCode":"    public void to(final TopicNameExtractor<K, V> topicExtractor, final Produced<K, V> produced) {\n        Objects.requireNonNull(topicExtractor, \"topic extractor can't be null\");\n        Objects.requireNonNull(produced, \"Produced can't be null\");\n        final ProducedInternal<K, V> producedInternal = new ProducedInternal<>(produced);\n        if (producedInternal.keySerde() == null) {\n            producedInternal.withKeySerde(keySerde);\n        }\n        if (producedInternal.valueSerde() == null) {\n            producedInternal.withValueSerde(valSerde);\n        }\n        to(topicExtractor, producedInternal);\n    }\n","date":"2019-04-27 00:30:20","endLine":449,"groupId":"22037","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"to","params":"(finalTopicNameExtractor<K@V>topicExtractor@finalProduced<K@V>produced)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/67/729eceaa51f50f61f346450b6c4a75386ef3cb.src","preCode":"    public void to(final TopicNameExtractor<K, V> topicExtractor, final Produced<K, V> produced) {\n        Objects.requireNonNull(topicExtractor, \"topic extractor can't be null\");\n        Objects.requireNonNull(produced, \"Produced can't be null\");\n        final ProducedInternal<K, V> producedInternal = new ProducedInternal<>(produced);\n        if (producedInternal.keySerde() == null) {\n            producedInternal.withKeySerde(keySerde);\n        }\n        if (producedInternal.valueSerde() == null) {\n            producedInternal.withValueSerde(valSerde);\n        }\n        to(topicExtractor, producedInternal);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"B"}],"commitId":"eecb403bae80b82b6fb7a27bebb5b53d6c8f3115","commitMessage":"@@@KAFKA-8254: Pass Changelog as Topic in Suppress Serdes (#6602)\n\nReviewers:  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-04-27 00:30:20","modifiedFileCount":"15","status":"M","submitter":"John Roesler"},{"authorTime":"2020-01-10 07:38:09","codes":[{"authorDate":"2020-01-10 07:38:09","commitOrder":8,"curCode":"    public KStream<K, V> through(final String topic,\n                                 final Produced<K, V> produced) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(produced, \"produced can't be null\");\n\n        final ProducedInternal<K, V> producedInternal = new ProducedInternal<>(produced);\n        if (producedInternal.keySerde() == null) {\n            producedInternal.withKeySerde(keySerde);\n        }\n        if (producedInternal.valueSerde() == null) {\n            producedInternal.withValueSerde(valSerde);\n        }\n        to(topic, producedInternal);\n\n        return builder.stream(\n            Collections.singleton(topic),\n            new ConsumedInternal<>(\n                producedInternal.keySerde(),\n                producedInternal.valueSerde(),\n                new FailOnInvalidTimestamp(),\n                null\n            )\n        );\n    }\n","date":"2020-01-10 07:38:09","endLine":547,"groupId":"22037","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"through","params":"(finalStringtopic@finalProduced<K@V>produced)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/fba3a8f7d3eafdeda036d0e2e7ea9091fdeeac.src","preCode":"    public KStream<K, V> through(final String topic, final Produced<K, V> produced) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(produced, \"Produced can't be null\");\n        final ProducedInternal<K, V> producedInternal = new ProducedInternal<>(produced);\n        if (producedInternal.keySerde() == null) {\n            producedInternal.withKeySerde(keySerde);\n        }\n        if (producedInternal.valueSerde() == null) {\n            producedInternal.withValueSerde(valSerde);\n        }\n        to(topic, producedInternal);\n        return builder.stream(\n            Collections.singleton(topic),\n            new ConsumedInternal<>(\n                producedInternal.keySerde(),\n                producedInternal.valueSerde(),\n                new FailOnInvalidTimestamp(),\n                null\n            )\n        );\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":524,"status":"M"},{"authorDate":"2020-01-10 07:38:09","commitOrder":8,"curCode":"    public void to(final TopicNameExtractor<K, V> topicExtractor,\n                   final Produced<K, V> produced) {\n        Objects.requireNonNull(topicExtractor, \"topicExtractor can't be null\");\n        Objects.requireNonNull(produced, \"produced can't be null\");\n\n        final ProducedInternal<K, V> producedInternal = new ProducedInternal<>(produced);\n        if (producedInternal.keySerde() == null) {\n            producedInternal.withKeySerde(keySerde);\n        }\n        if (producedInternal.valueSerde() == null) {\n            producedInternal.withValueSerde(valSerde);\n        }\n        to(topicExtractor, producedInternal);\n    }\n","date":"2020-01-10 07:38:09","endLine":589,"groupId":"22037","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"to","params":"(finalTopicNameExtractor<K@V>topicExtractor@finalProduced<K@V>produced)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/fba3a8f7d3eafdeda036d0e2e7ea9091fdeeac.src","preCode":"    public void to(final TopicNameExtractor<K, V> topicExtractor, final Produced<K, V> produced) {\n        Objects.requireNonNull(topicExtractor, \"topic extractor can't be null\");\n        Objects.requireNonNull(produced, \"Produced can't be null\");\n        final ProducedInternal<K, V> producedInternal = new ProducedInternal<>(produced);\n        if (producedInternal.keySerde() == null) {\n            producedInternal.withKeySerde(keySerde);\n        }\n        if (producedInternal.valueSerde() == null) {\n            producedInternal.withValueSerde(valSerde);\n        }\n        to(topicExtractor, producedInternal);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"M"}],"commitId":"e94f5dcc802f8e786e84a58754c800c0fbad5ab4","commitMessage":"@@@KAFKA-9294: Add tests for Named parameter (#7874)\n\nPart 1 -- tests for stateless KStream operators only\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2020-01-10 07:38:09","modifiedFileCount":"5","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-06-20 05:50:22","codes":[{"authorDate":"2020-06-20 05:50:22","commitOrder":9,"curCode":"    public KStream<K, V> through(final String topic,\n                                 final Produced<K, V> produced) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(produced, \"produced can't be null\");\n\n        final ProducedInternal<K, V> producedInternal = new ProducedInternal<>(produced);\n        if (producedInternal.keySerde() == null) {\n            producedInternal.withKeySerde(keySerde);\n        }\n        if (producedInternal.valueSerde() == null) {\n            producedInternal.withValueSerde(valueSerde);\n        }\n        to(topic, producedInternal);\n\n        return builder.stream(\n            Collections.singleton(topic),\n            new ConsumedInternal<>(\n                producedInternal.keySerde(),\n                producedInternal.valueSerde(),\n                new FailOnInvalidTimestamp(),\n                null\n            )\n        );\n    }\n","date":"2020-06-20 05:50:22","endLine":568,"groupId":"123005","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"through","params":"(finalStringtopic@finalProduced<K@V>produced)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3d/00f220f99e90170f1f0ed2eac31109a8ccc266.src","preCode":"    public KStream<K, V> through(final String topic,\n                                 final Produced<K, V> produced) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(produced, \"produced can't be null\");\n\n        final ProducedInternal<K, V> producedInternal = new ProducedInternal<>(produced);\n        if (producedInternal.keySerde() == null) {\n            producedInternal.withKeySerde(keySerde);\n        }\n        if (producedInternal.valueSerde() == null) {\n            producedInternal.withValueSerde(valSerde);\n        }\n        to(topic, producedInternal);\n\n        return builder.stream(\n            Collections.singleton(topic),\n            new ConsumedInternal<>(\n                producedInternal.keySerde(),\n                producedInternal.valueSerde(),\n                new FailOnInvalidTimestamp(),\n                null\n            )\n        );\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"M"},{"authorDate":"2020-06-20 05:50:22","commitOrder":9,"curCode":"    public void to(final TopicNameExtractor<K, V> topicExtractor,\n                   final Produced<K, V> produced) {\n        Objects.requireNonNull(topicExtractor, \"topicExtractor can't be null\");\n        Objects.requireNonNull(produced, \"produced can't be null\");\n\n        final ProducedInternal<K, V> producedInternal = new ProducedInternal<>(produced);\n        if (producedInternal.keySerde() == null) {\n            producedInternal.withKeySerde(keySerde);\n        }\n        if (producedInternal.valueSerde() == null) {\n            producedInternal.withValueSerde(valueSerde);\n        }\n        to(topicExtractor, producedInternal);\n    }\n","date":"2020-06-20 05:50:22","endLine":663,"groupId":"123005","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"to","params":"(finalTopicNameExtractor<K@V>topicExtractor@finalProduced<K@V>produced)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3d/00f220f99e90170f1f0ed2eac31109a8ccc266.src","preCode":"    public void to(final TopicNameExtractor<K, V> topicExtractor,\n                   final Produced<K, V> produced) {\n        Objects.requireNonNull(topicExtractor, \"topicExtractor can't be null\");\n        Objects.requireNonNull(produced, \"produced can't be null\");\n\n        final ProducedInternal<K, V> producedInternal = new ProducedInternal<>(produced);\n        if (producedInternal.keySerde() == null) {\n            producedInternal.withKeySerde(keySerde);\n        }\n        if (producedInternal.valueSerde() == null) {\n            producedInternal.withValueSerde(valSerde);\n        }\n        to(topicExtractor, producedInternal);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":650,"status":"M"}],"commitId":"965877c11c221640b6fda3cdb55e78da7551e525","commitMessage":"@@@MINOR: code cleanup for inconsistent naming (#8871)\n\nReviewer: Matthias J. Sax <matthias@confluent.io>","date":"2020-06-20 05:50:22","modifiedFileCount":"12","status":"M","submitter":"Vito Jeng"}]
