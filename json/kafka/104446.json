[{"authorTime":"2020-11-03 07:06:58","codes":[{"authorDate":"2020-11-03 07:06:58","commitOrder":1,"curCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2020-11-03 07:06:58","endLine":1892,"groupId":"16620","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInVotedState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/b13822b0b684451055221e8df0af2fe584d750.src","preCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1854,"status":"B"},{"authorDate":"2020-11-03 07:06:58","commitOrder":1,"curCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 9L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.client.poll();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2020-11-03 07:06:58","endLine":1938,"groupId":"8533","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInCandidateState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/b13822b0b684451055221e8df0af2fe584d750.src","preCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 9L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.client.poll();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1895,"status":"B"}],"commitId":"21a65e10436fc81cac0518dd4babb9612eeaf667","commitMessage":"@@@KAFKA-10632; Raft client should push all committed data to state machines (#9482)\n\nIn #9418.  we add a listener to the `RaftClient` interface. In that patch.  we used it only to send commit notifications for writes from the leader. In this PR.  we extend the `handleCommit` API to accept all committed data and we remove the pull-based `read` API. Additionally.  we add two new callbacks to the listener interface in order to notify the state machine when the raft client has claimed or resigned leadership.\n\nFinally.  this patch allows the `RaftClient` to support multiple listeners. This is necessary for KIP-500 because we will have one listener for the controller role and one for the broker role.\n\nReviewers: Jos? Armando Garc?a Sancio <jsancio@users.noreply.github.com>.  Boyang Chen <boyang@confluent.io>","date":"2020-11-03 07:06:58","modifiedFileCount":"24","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2020-12-22 10:15:15","codes":[{"authorDate":"2020-12-22 10:15:15","commitOrder":2,"curCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2020-12-22 10:15:15","endLine":2139,"groupId":"16620","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInVotedState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/43/fb2301414f9a5bbd0df37c965940dcacb20804.src","preCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2101,"status":"M"},{"authorDate":"2020-12-22 10:15:15","commitOrder":2,"curCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 9L, epoch, 500));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n        context.assertSentFetchResponse(Errors.NONE, epoch, OptionalInt.of(context.localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2020-12-22 10:15:15","endLine":2186,"groupId":"9288","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInCandidateState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/43/fb2301414f9a5bbd0df37c965940dcacb20804.src","preCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 9L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.client.poll();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2142,"status":"M"}],"commitId":"eb9fe411bbbfca1baf5e0900ee9cfb9147e5099e","commitMessage":"@@@KAFKA-10842; Use `InterBrokerSendThread` for raft's outbound network channel (#9732)\n\nThis patch contains the following improvements:\n\n- Separate inbound/outbound request flows so that we can open the door for concurrent inbound request handling\n- Rewrite `KafkaNetworkChannel` to use `InterBrokerSendThread` which fixes a number of bugs/shortcomings\n- Get rid of a lot of boilerplate conversions in `KafkaNetworkChannel` \n- Improve validation of inbound responses in `KafkaRaftClient` by checking correlationId. This fixes a bug which could cause an out of order Fetch to be applied incorrectly.\n\nReviewers: David Arthur <mumrah@gmail.com>","date":"2020-12-22 10:15:15","modifiedFileCount":"15","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2021-01-16 06:10:17","codes":[{"authorDate":"2020-12-22 10:15:15","commitOrder":3,"curCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2020-12-22 10:15:15","endLine":2139,"groupId":"16620","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInVotedState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/43/fb2301414f9a5bbd0df37c965940dcacb20804.src","preCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2101,"status":"N"},{"authorDate":"2021-01-16 06:10:17","commitOrder":3,"curCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 9L, epoch, 500));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n        context.assertSentFetchResponse(Errors.NONE, epoch, OptionalInt.of(localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2021-01-16 06:10:17","endLine":2183,"groupId":"10364","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInCandidateState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a9/c37814ae2ec7e6dafe686b22c6d9a2a6e9c380.src","preCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 9L, epoch, 500));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n        context.assertSentFetchResponse(Errors.NONE, epoch, OptionalInt.of(context.localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2139,"status":"M"}],"commitId":"7ac06065f1e25158688fc3be316ce9571dc51335","commitMessage":"@@@KAFKA-12161; Support raft observers with optional id (#9871)\n\nWe would like to be able to use `KafkaRaftClient` for tooling/debugging use cases. For this.  we need the localId to be optional so that the client can be used more like a consumer. This is already supported in the `Fetch` protocol by setting `replicaId=-1`.  which the Raft implementation checks for. We just need to alter `QuorumState` so that the `localId` is optional. The main benefit of doing this is that it saves tools the need to generate an arbitrary id (which might cause conflicts given limited Int32 space) and it lets the leader avoid any local state for these observers (such as `ReplicaState` inside `LeaderState`).\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Boyang Chen <boyang@confluent.io>","date":"2021-01-16 06:10:17","modifiedFileCount":"9","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2021-01-30 06:06:01","codes":[{"authorDate":"2020-12-22 10:15:15","commitOrder":4,"curCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2020-12-22 10:15:15","endLine":2139,"groupId":"16620","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInVotedState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/43/fb2301414f9a5bbd0df37c965940dcacb20804.src","preCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2101,"status":"N"},{"authorDate":"2021-01-30 06:06:01","commitOrder":4,"curCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 9L, epoch, 500));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n        context.assertSentFetchResponse(Errors.NONE, epoch, OptionalInt.of(localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs() * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2021-01-30 06:06:01","endLine":2183,"groupId":"10364","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInCandidateState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b2/9f1efaf2ee4c96f59cea2d03224d090fd4fc75.src","preCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 9L, epoch, 500));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n        context.assertSentFetchResponse(Errors.NONE, epoch, OptionalInt.of(localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2139,"status":"M"}],"commitId":"5b3351e10b339f5ef43fa4ec9e23544acad298c3","commitMessage":"@@@KAFKA-10761; Kafka Raft update log start offset (#9816)\n\nAdds support for nonzero log start offsets.\n\nChanges to `Log`:\n1. Add a new \"reason\" for increasing the log start offset. This is used by `KafkaMetadataLog` when a snapshot is generated.\n2. `LogAppendInfo` should return if it was rolled because of an records append. A log is rolled when a new segment is created. This is used by `KafkaMetadataLog` to in some cases delete the created segment based on the log start offset.\n\nChanges to `KafkaMetadataLog`:\n1. Update both append functions to delete old segments based on the log start offset whenever the log is rolled.\n2. Update `lastFetchedEpoch` to return the epoch of the latest snapshot whenever the log is empty.\n3. Add a function that empties the log whenever the latest snapshot is greater than the replicated log. This is used when first loading the `KafkaMetadataLog` and whenever the `KafkaRaftClient` downloads a snapshot from the leader.\n\nChanges to `KafkaRaftClient`:\n1. Improve `validateFetchOffsetAndEpoch` so that it can handle fetch offset and last fetched epoch that are smaller than the log start offset. This is in addition to the existing code that check for a diverging log. This is used by the raft client to determine if the Fetch response should include a diverging epoch or a snapshot id. \n2. When a follower finishes fetching a snapshot from the leader fully truncate the local log.\n3. When polling the current state the raft client should check if the state machine has generated a new snapshot and update the log start offset accordingly.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2021-01-30 06:06:01","modifiedFileCount":"11","status":"M","submitter":"Jos? Armando Garc?a Sancio"},{"authorTime":"2021-02-19 08:44:40","codes":[{"authorDate":"2021-02-19 08:44:40","commitOrder":5,"curCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2021-02-19 08:44:40","endLine":2138,"groupId":"16620","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInVotedState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fb/188f1eacd3fa4c989e09b7efa108d92e592f82.src","preCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2100,"status":"M"},{"authorDate":"2021-02-19 08:44:40","commitOrder":5,"curCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 9L, epoch, 500));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n        context.assertSentFetchResponse(Errors.NONE, epoch, OptionalInt.of(localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs() * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2021-02-19 08:44:40","endLine":2185,"groupId":"10364","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInCandidateState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fb/188f1eacd3fa4c989e09b7efa108d92e592f82.src","preCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(0L, 2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(3L, 4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(6L, 4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 9L, epoch, 500));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n        context.assertSentFetchResponse(Errors.NONE, epoch, OptionalInt.of(localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs() * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2141,"status":"M"}],"commitId":"e29f7a36dbbd316ae03008140a1a0d282a26b82d","commitMessage":"@@@KAFKA-12331: Use LEO for the base offset of LeaderChangeMessage batch (#10138)\n\nThe `KafkaMetadataLog` implementation of `ReplicatedLog` validates that batches appended using `appendAsLeader` and `appendAsFollower` have an offset that matches the LEO. This is enforced by `KafkaRaftClient` and `BatchAccumulator`. When creating control batches for the `LeaderChangeMessage` the default base offset of `0` was being used instead of using the LEO. This is fixed by:\n\n1. Changing the implementation for `MockLog` to validate against this and throw an `RuntimeException` if this invariant is violated.\n2. Always create a batch for `LeaderChangeMessage` with an offset equal to the LEO.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2021-02-19 08:44:40","modifiedFileCount":"9","status":"M","submitter":"Jos? Armando Garc?a Sancio"},{"authorTime":"2021-02-20 06:43:14","codes":[{"authorDate":"2021-02-19 08:44:40","commitOrder":6,"curCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2021-02-19 08:44:40","endLine":2138,"groupId":"16620","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInVotedState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fb/188f1eacd3fa4c989e09b7efa108d92e592f82.src","preCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2100,"status":"N"},{"authorDate":"2021-02-20 06:43:14","commitOrder":6,"curCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 9L, epoch, 500));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n        context.assertSentFetchPartitionResponse(Errors.NONE, epoch, OptionalInt.of(localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs() * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2021-02-20 06:43:14","endLine":2213,"groupId":"10364","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInCandidateState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/93c1f2bacc862c14bfbc148105f5bdeed6bf46.src","preCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 9L, epoch, 500));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n        context.assertSentFetchResponse(Errors.NONE, epoch, OptionalInt.of(localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs() * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2169,"status":"M"}],"commitId":"bbf145b1b163bada0b20cea42b29d91443161170","commitMessage":"@@@KAFKA-10817; Add clusterId validation to raft Fetch handling (#10129)\n\nThis patch adds clusterId validation in the `Fetch` API as documented in KIP-595. A new error code `INCONSISTENT_CLUSTER_ID` is returned if the request clusterId does not match the value on the server. If no clusterId is provided.  the request is treated as valid.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2021-02-20 06:43:14","modifiedFileCount":"6","status":"M","submitter":"David Jacot"},{"authorTime":"2021-04-09 01:42:30","codes":[{"authorDate":"2021-02-19 08:44:40","commitOrder":7,"curCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2021-02-19 08:44:40","endLine":2138,"groupId":"16620","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInVotedState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fb/188f1eacd3fa4c989e09b7efa108d92e592f82.src","preCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2100,"status":"N"},{"authorDate":"2021-04-09 01:42:30","commitOrder":7,"curCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        assertEquals(10L, context.log.endOffset().offset);\n\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 0));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n        context.assertSentFetchPartitionResponse(Errors.NONE, epoch, OptionalInt.of(localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs() * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2021-04-09 01:42:30","endLine":2336,"groupId":"9469","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInCandidateState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/c38ddd3ef12663732173e7d20e5107ba06c8d7.src","preCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 9L, epoch, 500));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n        context.assertSentFetchPartitionResponse(Errors.NONE, epoch, OptionalInt.of(localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(9L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs() * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2290,"status":"M"}],"commitId":"d2c06c9c3c35803b9f5f0b6060b242789657f008","commitMessage":"@@@KAFKA-12619; Raft leader should expose hw only after committing LeaderChange (#10481)\n\nKIP-595 describes an extra condition on commitment here: https://cwiki.apache.org/confluence/display/KAFKA/KIP-595%3A+A+Raft+Protocol+for+the+Metadata+Quorum#KIP595:ARaftProtocolfortheMetadataQuorum-Fetch. In order to ensure that a newly elected leader's committed entries cannot get lost.  it must commit one record from its own epoch. This guarantees that its latest entry is larger (in terms of epoch/offset) than any previously written record which ensures that any future leader must also include it. This is the purpose of the `LeaderChange` record which is written to the log as soon as the leader gets elected.\n\nAlthough we had this check implemented.  it was off by one. We only ensured that replication reached the epoch start offset.  which does not reflect the appended `LeaderChange` record. This patch fixes the check and clarifies the point of the check. The rest of the patch is just fixing up test cases.\n\nReviewers: dengziming <swzmdeng@163.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-04-09 01:42:30","modifiedFileCount":"4","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2021-05-02 01:05:45","codes":[{"authorDate":"2021-05-02 01:05:45","commitOrder":8,"curCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        context.pollUntil(() -> secondListener.lastCommitOffset().equals(OptionalLong.of(8L)));\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2021-05-02 01:05:45","endLine":2439,"groupId":"16620","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInVotedState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/25/9957a07112512fdea5d0ab994b4b7f7f46695b.src","preCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2400,"status":"M"},{"authorDate":"2021-05-02 01:05:45","commitOrder":8,"curCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        assertEquals(10L, context.log.endOffset().offset);\n\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 0));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n        context.assertSentFetchPartitionResponse(Errors.NONE, epoch, OptionalInt.of(localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs() * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        context.pollUntil(() -> secondListener.lastCommitOffset().equals(OptionalLong.of(8L)));\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2021-05-02 01:05:45","endLine":2489,"groupId":"9469","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInCandidateState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/25/9957a07112512fdea5d0ab994b4b7f7f46695b.src","preCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        assertEquals(10L, context.log.endOffset().offset);\n\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 0));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n        context.assertSentFetchPartitionResponse(Errors.NONE, epoch, OptionalInt.of(localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs() * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2442,"status":"M"}],"commitId":"6203bf8b94c7c340671c1729f4a8e4fcc302605e","commitMessage":"@@@KAFKA-12154; Raft Snapshot Loading API (#10085)\n\nImplement Raft Snapshot loading API.\n\n1. Adds a new method `handleSnapshot` to `raft.Listener` which is called whenever the `RaftClient` determines that the `Listener` needs to load a new snapshot before reading the log. This happens when the `Listener`'s next offset is less than the log start offset also known as the earliest snapshot.\n\n2.  Adds a new type `SnapshotReader<T>` which provides a `Iterator<Batch<T>>` interface and de-serializes records in the `RawSnapshotReader` into `T`s\n\n3.  Adds a new type `RecordsIterator<T>` that implements an `Iterator<Batch<T>>` by scanning a `Records` object and deserializes the batches and records into `Batch<T>`. This type is used by both `SnapshotReader<T>` and `RecordsBatchReader<T>` internally to implement the `Iterator` interface that they expose. \n\n4. Changes the `MockLog` implementation to read one or two batches at a time. The previous implementation always read from the given offset to the high-watermark. This made it impossible to test interesting snapshot loading scenarios.\n\n5. Removed `throws IOException` from some methods. Some of types were inconsistently throwing `IOException` in some cases and throwing `RuntimeException(....  new IOException(...))` in others. This PR improves the consistent by wrapping `IOException` in `RuntimeException` in a few more places and replacing `Closeable` with `AutoCloseable`.\n\n6. Updated the Kafka Raft simulation test to take into account snapshot. `ReplicatedCounter` was updated to generate snapshot after 10 records get committed. This means that the `ConsistentCommittedData` validation was extended to take snapshots into account. Also added a new invariant to ensure that the log start offset is consistently set with the earliest snapshot.\n\nReviewers: dengziming <swzmdeng@163.com>.  David Arthur <mumrah@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2021-05-02 01:05:45","modifiedFileCount":"25","status":"M","submitter":"Jos? Armando Garc?a Sancio"},{"authorTime":"2021-05-21 06:39:46","codes":[{"authorDate":"2021-05-21 06:39:46","commitOrder":9,"curCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener(OptionalInt.of(localId));\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        context.pollUntil(() -> secondListener.lastCommitOffset().equals(OptionalLong.of(8L)));\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2021-05-21 06:39:46","endLine":2439,"groupId":"104446","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInVotedState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b0/00764f08a3f649251b35f2b0199f44e7e09cee.src","preCode":"    public void testHandleCommitCallbackFiresInVotedState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 500));\n        context.client.poll();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 1;\n        context.deliverRequest(context.voteRequest(candidateEpoch, otherNodeId, epoch, 10L));\n        context.pollUntilResponse();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, otherNodeId);\n\n        \r\n        context.pollUntil(() -> secondListener.lastCommitOffset().equals(OptionalLong.of(8L)));\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2400,"status":"M"},{"authorDate":"2021-05-21 06:39:46","commitOrder":9,"curCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        assertEquals(10L, context.log.endOffset().offset);\n\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 0));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n        context.assertSentFetchPartitionResponse(Errors.NONE, epoch, OptionalInt.of(localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs() * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener(OptionalInt.of(localId));\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        context.pollUntil(() -> secondListener.lastCommitOffset().equals(OptionalLong.of(8L)));\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","date":"2021-05-21 06:39:46","endLine":2489,"groupId":"104446","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testHandleCommitCallbackFiresInCandidateState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b0/00764f08a3f649251b35f2b0199f44e7e09cee.src","preCode":"    public void testHandleCommitCallbackFiresInCandidateState() throws Exception {\n        \r\n        \r\n\n        int localId = 0;\n        int otherNodeId = 1;\n        int epoch = 7;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .appendToLog(2, Arrays.asList(\"a\", \"b\", \"c\"))\n            .appendToLog(4, Arrays.asList(\"d\", \"e\", \"f\"))\n            .appendToLog(4, Arrays.asList(\"g\", \"h\", \"i\"))\n            .withUnknownLeader(epoch - 1)\n            .build();\n\n        \r\n        context.becomeLeader();\n        assertEquals(10L, context.log.endOffset().offset);\n\n        context.deliverRequest(context.fetchRequest(epoch, otherNodeId, 10L, epoch, 0));\n        context.pollUntilResponse();\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n        context.assertSentFetchPartitionResponse(Errors.NONE, epoch, OptionalInt.of(localId));\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, otherNodeId, epoch, 9L));\n        context.pollUntilResponse();\n        context.assertUnknownLeader(epoch + 1);\n        assertEquals(OptionalLong.of(10L), context.client.highWatermark());\n\n        \r\n        int candidateEpoch = epoch + 2;\n        context.time.sleep(context.electionTimeoutMs() * 2);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        RaftClientTestContext.MockListener secondListener = new RaftClientTestContext.MockListener();\n        context.client.register(secondListener);\n        context.client.poll();\n        context.assertVotedCandidate(candidateEpoch, localId);\n\n        \r\n        context.pollUntil(() -> secondListener.lastCommitOffset().equals(OptionalLong.of(8L)));\n        assertEquals(OptionalLong.of(8L), secondListener.lastCommitOffset());\n        assertEquals(OptionalInt.empty(), secondListener.currentClaimedEpoch());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2442,"status":"M"}],"commitId":"f50f13d781fa60b7915b687e075e523aa9ba5bfc","commitMessage":"@@@KAFKA-12342: Remove MetaLogShim and use RaftClient directly (#10705)\n\nThis patch removes the temporary shim layer we added to bridge the interface\ndifferences between MetaLogManager and RaftClient. Instead.  we now use the\nRaftClient directly from the metadata module.  This also means that the\nmetadata gradle module now depends on raft.  rather than the other way around.\nFinally.  this PR also consolidates the handleResign and handleNewLeader APIs\ninto a single handleLeaderChange API.\n\nCo-authored-by: Jason Gustafson <jason@confluent.io>","date":"2021-05-21 06:39:46","modifiedFileCount":"20","status":"M","submitter":"Jos? Armando Garc?a Sancio"}]
