[{"authorTime":"2019-10-03 11:32:18","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":2,"curCode":"    private void runJoin(final StreamJoined<String, Integer, Integer> streamJoined,\n                         final JoinWindows joinWindows) {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final MockProcessorSupplier<String, Integer> supplier = new MockProcessorSupplier<>();\n        final KStream<String, Integer> joinedStream;\n\n        joinedStream = left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined);\n\n        joinedStream.process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, Integer> inputTopicLeft =\n                    driver.createInputTopic(\"left\", new StringSerializer(), new IntegerSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<String, Integer> inputTopicRight =\n                    driver.createInputTopic(\"right\", new StringSerializer(), new IntegerSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<String, Integer> processor = supplier.theCapturedProcessor();\n\n            inputTopicLeft.pipeInput(\"A\", 1, 1L);\n            inputTopicLeft.pipeInput(\"B\", 1, 2L);\n\n            inputTopicRight.pipeInput(\"A\", 1, 1L);\n            inputTopicRight.pipeInput(\"B\", 2, 2L);\n\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(\"A\", 2, 1L),\n                new KeyValueTimestamp<>(\"B\", 3, 2L));\n        }\n    }\n","date":"2019-10-07 16:01:58","endLine":253,"groupId":"8264","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"runJoin","params":"(finalStreamJoined<String@Integer@Integer>streamJoined@finalJoinWindowsjoinWindows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d7/ce37e8bce2934b70e0c6581ecf1d199ddf73a0.src","preCode":"    private void runJoin(final StreamJoined<String, Integer, Integer> streamJoined,\n                         final JoinWindows joinWindows) {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final MockProcessorSupplier<String, Integer> supplier = new MockProcessorSupplier<>();\n        final KStream<String, Integer> joinedStream;\n\n        joinedStream = left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined);\n\n        joinedStream.process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, Integer> inputTopicLeft =\n                    driver.createInputTopic(\"left\", new StringSerializer(), new IntegerSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<String, Integer> inputTopicRight =\n                    driver.createInputTopic(\"right\", new StringSerializer(), new IntegerSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<String, Integer> processor = supplier.theCapturedProcessor();\n\n            inputTopicLeft.pipeInput(\"A\", 1, 1L);\n            inputTopicLeft.pipeInput(\"B\", 1, 2L);\n\n            inputTopicRight.pipeInput(\"A\", 1, 1L);\n            inputTopicRight.pipeInput(\"B\", 2, 2L);\n\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(\"A\", 2, 1L),\n                new KeyValueTimestamp<>(\"B\", 3, 2L));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"MB"},{"authorDate":"2019-10-03 11:32:18","commitOrder":2,"curCode":"    private void buildStreamsJoinThatShouldThrow(final StreamJoined<String, Integer, Integer> streamJoined,\n                                                 final JoinWindows joinWindows,\n                                                 final String expectedExceptionMessagePrefix) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        final StreamsException streamsException = assertThrows(StreamsException.class, () -> left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined));\n\n        assertTrue(streamsException.getMessage().startsWith(expectedExceptionMessagePrefix));\n    }\n","date":"2019-10-03 11:32:18","endLine":1503,"groupId":"16531","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildStreamsJoinThatShouldThrow","params":"(finalStreamJoined<String@Integer@Integer>streamJoined@finalJoinWindowsjoinWindows@finalStringexpectedExceptionMessagePrefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/6abd32c219ef798beb517463f728168d5dc2c8.src","preCode":"    private void buildStreamsJoinThatShouldThrow(final StreamJoined<String, Integer, Integer> streamJoined,\n                                                 final JoinWindows joinWindows,\n                                                 final String expectedExceptionMessagePrefix) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        final StreamsException streamsException = assertThrows(StreamsException.class, () -> left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined));\n\n        assertTrue(streamsException.getMessage().startsWith(expectedExceptionMessagePrefix));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1488,"status":"NB"}],"commitId":"a5a6938c69f4310f7ec519036f0df77d8022326a","commitMessage":"@@@KAFKA-8233: TopologyTestDriver test input and output usability improvements (#7378)\n\nImplements KIP-470\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-07 16:01:58","modifiedFileCount":"47","status":"M","submitter":"Jukka Karvanen"},{"authorTime":"2019-10-03 11:32:18","codes":[{"authorDate":"2020-04-22 00:25:45","commitOrder":3,"curCode":"    private void runJoin(final StreamJoined<String, Integer, Integer> streamJoined,\n                         final JoinWindows joinWindows) {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final MockProcessorSupplier<String, Integer> supplier = new MockProcessorSupplier<>();\n        final KStream<String, Integer> joinedStream;\n\n        joinedStream = left.join(\n            right,\n            Integer::sum,\n            joinWindows,\n            streamJoined);\n\n        joinedStream.process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, Integer> inputTopicLeft =\n                    driver.createInputTopic(\"left\", new StringSerializer(), new IntegerSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<String, Integer> inputTopicRight =\n                    driver.createInputTopic(\"right\", new StringSerializer(), new IntegerSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<String, Integer> processor = supplier.theCapturedProcessor();\n\n            inputTopicLeft.pipeInput(\"A\", 1, 1L);\n            inputTopicLeft.pipeInput(\"B\", 1, 2L);\n\n            inputTopicRight.pipeInput(\"A\", 1, 1L);\n            inputTopicRight.pipeInput(\"B\", 2, 2L);\n\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(\"A\", 2, 1L),\n                new KeyValueTimestamp<>(\"B\", 3, 2L));\n        }\n    }\n","date":"2020-04-22 00:25:45","endLine":275,"groupId":"18668","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"runJoin","params":"(finalStreamJoined<String@Integer@Integer>streamJoined@finalJoinWindowsjoinWindows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/b4d8af89a98b213f9031946d679a86718f624c.src","preCode":"    private void runJoin(final StreamJoined<String, Integer, Integer> streamJoined,\n                         final JoinWindows joinWindows) {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final MockProcessorSupplier<String, Integer> supplier = new MockProcessorSupplier<>();\n        final KStream<String, Integer> joinedStream;\n\n        joinedStream = left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined);\n\n        joinedStream.process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, Integer> inputTopicLeft =\n                    driver.createInputTopic(\"left\", new StringSerializer(), new IntegerSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<String, Integer> inputTopicRight =\n                    driver.createInputTopic(\"right\", new StringSerializer(), new IntegerSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<String, Integer> processor = supplier.theCapturedProcessor();\n\n            inputTopicLeft.pipeInput(\"A\", 1, 1L);\n            inputTopicLeft.pipeInput(\"B\", 1, 2L);\n\n            inputTopicRight.pipeInput(\"A\", 1, 1L);\n            inputTopicRight.pipeInput(\"B\", 2, 2L);\n\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(\"A\", 2, 1L),\n                new KeyValueTimestamp<>(\"B\", 3, 2L));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"},{"authorDate":"2019-10-03 11:32:18","commitOrder":3,"curCode":"    private void buildStreamsJoinThatShouldThrow(final StreamJoined<String, Integer, Integer> streamJoined,\n                                                 final JoinWindows joinWindows,\n                                                 final String expectedExceptionMessagePrefix) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        final StreamsException streamsException = assertThrows(StreamsException.class, () -> left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined));\n\n        assertTrue(streamsException.getMessage().startsWith(expectedExceptionMessagePrefix));\n    }\n","date":"2019-10-03 11:32:18","endLine":1503,"groupId":"16531","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildStreamsJoinThatShouldThrow","params":"(finalStreamJoined<String@Integer@Integer>streamJoined@finalJoinWindowsjoinWindows@finalStringexpectedExceptionMessagePrefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/6abd32c219ef798beb517463f728168d5dc2c8.src","preCode":"    private void buildStreamsJoinThatShouldThrow(final StreamJoined<String, Integer, Integer> streamJoined,\n                                                 final JoinWindows joinWindows,\n                                                 final String expectedExceptionMessagePrefix) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        final StreamsException streamsException = assertThrows(StreamsException.class, () -> left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined));\n\n        assertTrue(streamsException.getMessage().startsWith(expectedExceptionMessagePrefix));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1488,"status":"N"}],"commitId":"11d8ef76ff5348a48eb1c37cddf244e399666d59","commitMessage":"@@@MINOR: Improve usage of LogCaptureAppender (#8508)\n\nReviewers: Ismael Juma <ismael@confluent.io>.  John Roesler <john@confluent.io>","date":"2020-04-22 00:25:45","modifiedFileCount":"40","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-06-17 00:25:16","codes":[{"authorDate":"2020-04-22 00:25:45","commitOrder":4,"curCode":"    private void runJoin(final StreamJoined<String, Integer, Integer> streamJoined,\n                         final JoinWindows joinWindows) {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final MockProcessorSupplier<String, Integer> supplier = new MockProcessorSupplier<>();\n        final KStream<String, Integer> joinedStream;\n\n        joinedStream = left.join(\n            right,\n            Integer::sum,\n            joinWindows,\n            streamJoined);\n\n        joinedStream.process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, Integer> inputTopicLeft =\n                    driver.createInputTopic(\"left\", new StringSerializer(), new IntegerSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<String, Integer> inputTopicRight =\n                    driver.createInputTopic(\"right\", new StringSerializer(), new IntegerSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<String, Integer> processor = supplier.theCapturedProcessor();\n\n            inputTopicLeft.pipeInput(\"A\", 1, 1L);\n            inputTopicLeft.pipeInput(\"B\", 1, 2L);\n\n            inputTopicRight.pipeInput(\"A\", 1, 1L);\n            inputTopicRight.pipeInput(\"B\", 2, 2L);\n\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(\"A\", 2, 1L),\n                new KeyValueTimestamp<>(\"B\", 3, 2L));\n        }\n    }\n","date":"2020-04-22 00:25:45","endLine":275,"groupId":"101824","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"runJoin","params":"(finalStreamJoined<String@Integer@Integer>streamJoined@finalJoinWindowsjoinWindows)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/b4d8af89a98b213f9031946d679a86718f624c.src","preCode":"    private void runJoin(final StreamJoined<String, Integer, Integer> streamJoined,\n                         final JoinWindows joinWindows) {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final MockProcessorSupplier<String, Integer> supplier = new MockProcessorSupplier<>();\n        final KStream<String, Integer> joinedStream;\n\n        joinedStream = left.join(\n            right,\n            Integer::sum,\n            joinWindows,\n            streamJoined);\n\n        joinedStream.process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, Integer> inputTopicLeft =\n                    driver.createInputTopic(\"left\", new StringSerializer(), new IntegerSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<String, Integer> inputTopicRight =\n                    driver.createInputTopic(\"right\", new StringSerializer(), new IntegerSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<String, Integer> processor = supplier.theCapturedProcessor();\n\n            inputTopicLeft.pipeInput(\"A\", 1, 1L);\n            inputTopicLeft.pipeInput(\"B\", 1, 2L);\n\n            inputTopicRight.pipeInput(\"A\", 1, 1L);\n            inputTopicRight.pipeInput(\"B\", 2, 2L);\n\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(\"A\", 2, 1L),\n                new KeyValueTimestamp<>(\"B\", 3, 2L));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"N"},{"authorDate":"2021-06-17 00:25:16","commitOrder":4,"curCode":"    private void buildStreamsJoinThatShouldThrow(final StreamJoined<String, Integer, Integer> streamJoined,\n                                                 final JoinWindows joinWindows,\n                                                 final String expectedExceptionMessagePrefix) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        final StreamsException streamsException = assertThrows(\n            StreamsException.class,\n            () -> left.join(\n                right,\n                Integer::sum,\n                joinWindows,\n                streamJoined\n            )\n        );\n\n        assertTrue(streamsException.getMessage().startsWith(expectedExceptionMessagePrefix));\n    }\n","date":"2021-06-17 00:25:16","endLine":1739,"groupId":"101824","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildStreamsJoinThatShouldThrow","params":"(finalStreamJoined<String@Integer@Integer>streamJoined@finalJoinWindowsjoinWindows@finalStringexpectedExceptionMessagePrefix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ee/501add2512c45574539e0d0910e8c183a40b81.src","preCode":"    private void buildStreamsJoinThatShouldThrow(final StreamJoined<String, Integer, Integer> streamJoined,\n                                                 final JoinWindows joinWindows,\n                                                 final String expectedExceptionMessagePrefix) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, Integer> left = builder.stream(\"left\", Consumed.with(Serdes.String(), Serdes.Integer()));\n        final KStream<String, Integer> right = builder.stream(\"right\", Consumed.with(Serdes.String(), Serdes.Integer()));\n\n        final StreamsException streamsException = assertThrows(StreamsException.class, () -> left.join(\n            right,\n            (value1, value2) -> value1 + value2,\n            joinWindows,\n            streamJoined));\n\n        assertTrue(streamsException.getMessage().startsWith(expectedExceptionMessagePrefix));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1720,"status":"M"}],"commitId":"96767a60db4117f257e911871d139572b84be65d","commitMessage":"@@@KAFKA-12909: disable spurious left/outer stream-stream join fix for old JoinWindows API (#10861)\n\nWe changed the behavior of left/outer stream-stream join via KAFKA-10847.\nTo avoid a breaking change during an upgrade.  we need to disable this\nfix by default.\n\nWe only enable the fix if users opt-in expliclity by changing their\ncode. We leverage KIP-633 (KAFKA-8613) that offers a new JoinWindows\nAPI with mandatory grace-period to enable the fix.\n\nReviewers: Sergio Pe?a <sergio@confluent.io>.  Israel Ekpo <israelekpo@gmail.com>.  Guozhang Wang <guozhang@confluent.io>","date":"2021-06-17 00:25:16","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"}]
