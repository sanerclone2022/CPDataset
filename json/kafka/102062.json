[{"authorTime":"2020-08-12 11:21:41","codes":[{"authorDate":"2020-08-12 11:21:41","commitOrder":2,"curCode":"    public void shouldSkipCheckpointingSuspendedCreatedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().andThrow(new AssertionError(\"Should not have tried to checkpoint\"));\n        EasyMock.replay(stateManager);\n\n        task = createStatefulTask(createConfig(false, \"100\"), true);\n        task.suspend();\n        task.postCommit(true);\n    }\n","date":"2020-08-12 11:21:41","endLine":1510,"groupId":"11804","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSkipCheckpointingSuspendedCreatedTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/4fa234888eda5e4dcdafaea518f24786462f03.src","preCode":"    public void shouldSkipCheckpointingSuspendedCreatedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().andThrow(new AssertionError(\"Should not have tried to checkpoint\"));\n        EasyMock.replay(stateManager);\n\n        task = createStatefulTask(createConfig(false, \"100\"), true);\n        task.suspend();\n        task.postCommit(true);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1502,"status":"MB"},{"authorDate":"2020-08-12 11:21:41","commitOrder":2,"curCode":"    public void shouldCheckpointForSuspendedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(partition1, 1L));\n        EasyMock.replay(stateManager);\n\n        task = createStatefulTask(createConfig(false, \"100\"), true);\n        task.initializeIfNeeded();\n        task.suspend();\n        task.postCommit(true);\n        EasyMock.verify(stateManager);\n    }\n","date":"2020-08-12 11:21:41","endLine":1525,"groupId":"22479","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCheckpointForSuspendedTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/4fa234888eda5e4dcdafaea518f24786462f03.src","preCode":"    public void shouldCheckpointForSuspendedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(partition1, 1L));\n        EasyMock.replay(stateManager);\n\n        task = createStatefulTask(createConfig(false, \"100\"), true);\n        task.initializeIfNeeded();\n        task.suspend();\n        task.postCommit(true);\n        EasyMock.verify(stateManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1513,"status":"B"}],"commitId":"7915d5e5f826a71c11e1c9183c84702410f7209a","commitMessage":"@@@KAFKA-9450: Decouple flushing state from commiting (#8964)\n\nIn Kafka Streams the source-of-truth of a state store is in its changelog.  therefore when committing a state store we only need to make sure its changelog records are all flushed and committed.  but we do not actually need to make sure that the materialized state have to be flushed and persisted since they can always be restored from changelog when necessary.\n\nOn the other hand.  flushing a state store too frequently may have side effects.  e.g. rocksDB flushing would gets the memtable into an L0 sstable.  leaving many small L0 files to be compacted later.  which introduces larger overhead.\n\nTherefore this PR decouples flushing from committing.  such that we do not always flush the state store upon committing.  but only when sufficient data has been written since last time flushed. The checkpoint file would then also be overwritten only along with flushing the state store indicating its current known snapshot. This is okay since: a) if EOS is not enabled.  then it is fine if the local persisted state is actually ahead of the checkpoint.  b) if EOS is enabled.  then we would never write a checkpoint file until close.\n\nHere's a more detailed change list of this PR:\n\n1. Do not always flush state stores when calling pre-commit; move stateMgr.flush into post-commit to couple together with checkpointing.\n\n2. In post-commit.  we checkpoint when: a) The state store's snapshot has progressed much further compared to the previous checkpoint.  b) When the task is being closed.  in which case we enforce checkpointing.\n\n3. There are some tricky obstacles that I'd have to work around in a bit hacky way: for cache / suppression buffer.  we still need to flush them in pre-commit to make sure all records sent via producers.  while the underlying state store should not be flushed. I've decided to introduce a new API in CachingStateStore to be triggered in pre-commit.\n\nI've also made some minor changes piggy-backed in this PR:\n\n4. Do not delete checkpoint file upon loading it.  and as a result simplify the checkpointNeeded logic.  initializing the snapshotLastFlush to the loaded offsets.\n\n5. In closing.  also follow the commit -> suspend -> close ordering as in revocation / assignment.\n\n6. If enforceCheckpoint == true during RUNNING.  still calls maybeCheckpoint even with EOS since that is the case for suspending / closing.\n\nReviewers: John Roesler <john@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-08-12 11:21:41","modifiedFileCount":"24","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2021-01-07 06:01:02","codes":[{"authorDate":"2021-01-07 06:01:02","commitOrder":3,"curCode":"    public void shouldSkipCheckpointingSuspendedCreatedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().andThrow(new AssertionError(\"Should not have tried to checkpoint\"));\n        EasyMock.replay(stateManager);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n        task.suspend();\n        task.postCommit(true);\n    }\n","date":"2021-01-07 06:01:02","endLine":1649,"groupId":"1574","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSkipCheckpointingSuspendedCreatedTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void shouldSkipCheckpointingSuspendedCreatedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().andThrow(new AssertionError(\"Should not have tried to checkpoint\"));\n        EasyMock.replay(stateManager);\n\n        task = createStatefulTask(createConfig(false, \"100\"), true);\n        task.suspend();\n        task.postCommit(true);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1641,"status":"M"},{"authorDate":"2021-01-07 06:01:02","commitOrder":3,"curCode":"    public void shouldCheckpointForSuspendedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(partition1, 1L));\n        EasyMock.replay(stateManager);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n        task.initializeIfNeeded();\n        task.suspend();\n        task.postCommit(true);\n        EasyMock.verify(stateManager);\n    }\n","date":"2021-01-07 06:01:02","endLine":1664,"groupId":"22479","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCheckpointForSuspendedTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void shouldCheckpointForSuspendedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(partition1, 1L));\n        EasyMock.replay(stateManager);\n\n        task = createStatefulTask(createConfig(false, \"100\"), true);\n        task.initializeIfNeeded();\n        task.suspend();\n        task.postCommit(true);\n        EasyMock.verify(stateManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1652,"status":"M"}],"commitId":"22e8e71156762b40ac93e2cbd42eacba00dbfb0c","commitMessage":"@@@KAFKA-9274: Fix commit-TimeoutException handling for EOS (#9800)\n\nIf EOS is enabled and the TX commit fails with a timeout. \nwe should not process more messages (what is ok for non-EOS)\nbecause we don't really know the status of the TX.\nIf the commit was indeed successful.  we won't have an open TX\ncan calling send() would fail with an fatal error.\n\nInstead.  we should retry the (idempotent) commit of the TX. \nand start a new TX afterwards.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  John Roesler <john@confluent.io>","date":"2021-01-07 06:01:02","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-01-28 11:57:20","codes":[{"authorDate":"2021-01-07 06:01:02","commitOrder":4,"curCode":"    public void shouldSkipCheckpointingSuspendedCreatedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().andThrow(new AssertionError(\"Should not have tried to checkpoint\"));\n        EasyMock.replay(stateManager);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n        task.suspend();\n        task.postCommit(true);\n    }\n","date":"2021-01-07 06:01:02","endLine":1649,"groupId":"1574","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSkipCheckpointingSuspendedCreatedTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void shouldSkipCheckpointingSuspendedCreatedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().andThrow(new AssertionError(\"Should not have tried to checkpoint\"));\n        EasyMock.replay(stateManager);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n        task.suspend();\n        task.postCommit(true);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1641,"status":"N"},{"authorDate":"2021-01-28 11:57:20","commitOrder":4,"curCode":"    public void shouldCheckpointForSuspendedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(singletonMap(partition1, 1L));\n        EasyMock.replay(stateManager);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n        task.initializeIfNeeded();\n        task.suspend();\n        task.postCommit(true);\n        EasyMock.verify(stateManager);\n    }\n","date":"2021-01-28 11:57:20","endLine":1590,"groupId":"22479","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCheckpointForSuspendedTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/d0bdc3e8b56c31b405cebd384297e58af121c3.src","preCode":"    public void shouldCheckpointForSuspendedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(partition1, 1L));\n        EasyMock.replay(stateManager);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n        task.initializeIfNeeded();\n        task.suspend();\n        task.postCommit(true);\n        EasyMock.verify(stateManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1578,"status":"M"}],"commitId":"4d28391480fd8c547a63af119bba67fceb5d2ede","commitMessage":"@@@KAFKA-10867: Improved task idling (#9840)\n\nUse the new ConsumerRecords.metadata() API to implement\nimproved task idling as described in KIP-695\n\nReviewers: Guozhang Wang <guozhang@apache.org>","date":"2021-01-28 11:57:20","modifiedFileCount":"18","status":"M","submitter":"John Roesler"},{"authorTime":"2021-09-14 05:15:22","codes":[{"authorDate":"2021-09-14 05:15:22","commitOrder":5,"curCode":"    public void shouldSkipCheckpointingSuspendedCreatedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().andThrow(new AssertionError(\"Should not have tried to checkpoint\"));\n        EasyMock.expect(recordCollector.offsets()).andReturn(emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n        task.suspend();\n        task.postCommit(true);\n    }\n","date":"2021-09-14 05:15:22","endLine":1668,"groupId":"102062","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldSkipCheckpointingSuspendedCreatedTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/7d921a0eb057b1c1a6d03dfa10d92d9a29defa.src","preCode":"    public void shouldSkipCheckpointingSuspendedCreatedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().andThrow(new AssertionError(\"Should not have tried to checkpoint\"));\n        EasyMock.replay(stateManager);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n        task.suspend();\n        task.postCommit(true);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1659,"status":"M"},{"authorDate":"2021-09-14 05:15:22","commitOrder":5,"curCode":"    public void shouldCheckpointForSuspendedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(singletonMap(partition1, 1L));\n        EasyMock.expect(recordCollector.offsets()).andReturn(emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n        task.initializeIfNeeded();\n        task.suspend();\n        task.postCommit(true);\n        EasyMock.verify(stateManager);\n    }\n","date":"2021-09-14 05:15:22","endLine":1684,"groupId":"102062","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldCheckpointForSuspendedTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/7d921a0eb057b1c1a6d03dfa10d92d9a29defa.src","preCode":"    public void shouldCheckpointForSuspendedTask() {\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(singletonMap(partition1, 1L));\n        EasyMock.replay(stateManager);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n        task.initializeIfNeeded();\n        task.suspend();\n        task.postCommit(true);\n        EasyMock.verify(stateManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1671,"status":"M"}],"commitId":"a03bda61e068d72823af47e5f25ffd12c3319541","commitMessage":"@@@KAFKA-13249: Always update changelog offsets before writing the checkpoint file (#11283)\n\nWhen using EOS checkpointed offsets are not updated to the latest offsets from the changelog because the maybeWriteCheckpoint method is only ever called when commitNeeded=false. This change will force the update if enforceCheckpoint=true .\n\nI have also added a test which verifies that both the state store and the checkpoint file are completely up to date with the changelog after the app has shutdown.\n\nReviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-09-14 05:15:22","modifiedFileCount":"3","status":"M","submitter":"Oliver Hutchison"}]
