[{"authorTime":"2017-01-28 08:48:44","codes":[{"authorDate":"2017-01-28 08:48:44","commitOrder":9,"curCode":"    private Map<String, Object> getCommonConsumerConfigs() throws ConfigException {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        \r\n        \r\n        if (clientProvidedProps.containsKey(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG)) {\n            throw new ConfigException(\"Unexpected user-specified consumer config \" + ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG\n                + \", as the streams client will always turn off auto committing.\");\n        }\n\n        final Map<String, Object> consumerProps = new HashMap<>(CONSUMER_DEFAULT_OVERRIDES);\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        consumerProps.remove(ZOOKEEPER_CONNECT_CONFIG);\n\n        return consumerProps;\n    }\n","date":"2017-01-28 08:48:44","endLine":474,"groupId":"13941","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommonConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/db027e83ea0f2a39da7867855e8567ce295ece.src","preCode":"    private Map<String, Object> getCommonConsumerConfigs() throws ConfigException {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        \r\n        \r\n        if (clientProvidedProps.containsKey(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG)) {\n            throw new ConfigException(\"Unexpected user-specified consumer config \" + ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG\n                + \", as the streams client will always turn off auto committing.\");\n        }\n\n        final Map<String, Object> consumerProps = new HashMap<>(CONSUMER_DEFAULT_OVERRIDES);\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        consumerProps.remove(ZOOKEEPER_CONNECT_CONFIG);\n\n        return consumerProps;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":455,"status":"B"},{"authorDate":"2017-01-28 08:48:44","commitOrder":9,"curCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        \r\n        final Map<String, Object> props = new HashMap<>(PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames()));\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId + \"-producer\");\n\n        return props;\n    }\n","date":"2017-01-28 08:48:44","endLine":549,"groupId":"13942","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getProducerConfigs","params":"(finalStringclientId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/db027e83ea0f2a39da7867855e8567ce295ece.src","preCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        \r\n        final Map<String, Object> props = new HashMap<>(PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames()));\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId + \"-producer\");\n\n        return props;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"MB"}],"commitId":"4c42654b1eecebae272dfe5ce018b85ad4db7709","commitMessage":"@@@MINOR: update JavaDocs for Kafka Streams DSL helpers\n\n - also deprecate ZK config for Streams\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Ismael Juma.  Guozhang Wang\n\nCloses #2459 from mjsax/javaDocImprovements8\n","date":"2017-01-28 08:48:44","modifiedFileCount":"12","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-05-17 08:23:11","codes":[{"authorDate":"2017-05-17 08:23:11","commitOrder":10,"curCode":"    private Map<String, Object> getCommonConsumerConfigs() throws ConfigException {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        \r\n        \r\n        if (clientProvidedProps.containsKey(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG)) {\n            throw new ConfigException(\"Unexpected user-specified consumer config \" + ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG\n                + \", as the streams client will always turn off auto committing.\");\n        }\n        if (eosEnabled) {\n            if (clientProvidedProps.containsKey(ConsumerConfig.ISOLATION_LEVEL_CONFIG)) {\n                throw new ConfigException(\"Unexpected user-specified consumer config \" + ConsumerConfig.ISOLATION_LEVEL_CONFIG\n                    + \"; because \" + PROCESSING_GUARANTEE_CONFIG + \" is set to '\" + EXACTLY_ONCE + \"' consumers will always read committed data only.\");\n            }\n        }\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        consumerProps.remove(ZOOKEEPER_CONNECT_CONFIG);\n\n        return consumerProps;\n    }\n","date":"2017-05-17 08:23:11","endLine":591,"groupId":"3289","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommonConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/af/9b8e71c8f537d938a0173b4dc32514dfc33666.src","preCode":"    private Map<String, Object> getCommonConsumerConfigs() throws ConfigException {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        \r\n        \r\n        if (clientProvidedProps.containsKey(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG)) {\n            throw new ConfigException(\"Unexpected user-specified consumer config \" + ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG\n                + \", as the streams client will always turn off auto committing.\");\n        }\n\n        final Map<String, Object> consumerProps = new HashMap<>(CONSUMER_DEFAULT_OVERRIDES);\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        consumerProps.remove(ZOOKEEPER_CONNECT_CONFIG);\n\n        return consumerProps;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"M"},{"authorDate":"2017-05-17 08:23:11","commitOrder":10,"curCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        if (eosEnabled) {\n            if (clientProvidedProps.containsKey(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG)) {\n                throw new ConfigException(\"Unexpected user-specified consumer config \" + ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG\n                    + \"; because \" + PROCESSING_GUARANTEE_CONFIG + \" is set to '\" + EXACTLY_ONCE + \"' producer will always have idempotency enabled.\");\n            }\n\n            if (clientProvidedProps.containsKey(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION)) {\n                throw new ConfigException(\"Unexpected user-specified consumer config \" + ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION\n                    + \"; because \" + PROCESSING_GUARANTEE_CONFIG + \" is set to '\" + EXACTLY_ONCE + \"' producer will always have only one in-flight request per connection.\");\n            }\n        }\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(clientProvidedProps);\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId + \"-producer\");\n\n        return props;\n    }\n","date":"2017-05-17 08:23:11","endLine":680,"groupId":"5921","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getProducerConfigs","params":"(finalStringclientId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/af/9b8e71c8f537d938a0173b4dc32514dfc33666.src","preCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        \r\n        final Map<String, Object> props = new HashMap<>(PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames()));\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId + \"-producer\");\n\n        return props;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":656,"status":"M"}],"commitId":"ebc7f7caaeb47c9588d79a2f3ed496daa0bd39e5","commitMessage":"@@@KAFKA-4923: Add Exactly-Once Semantics to Streams\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Apurva Metha.  Ismael Juma.  Damian Guy.  Eno Thereska.  Guozhang Wang\n\nCloses #2945 from mjsax/kafka-4923-add-eos-to-streams\n","date":"2017-05-17 08:23:11","modifiedFileCount":"25","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-08-02 21:11:23","codes":[{"authorDate":"2017-08-02 21:11:23","commitOrder":11,"curCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n        \n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        consumerProps.remove(ZOOKEEPER_CONNECT_CONFIG);\n\n        return consumerProps;\n    }\n","date":"2017-08-02 21:11:23","endLine":654,"groupId":"20756","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommonConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/0e24595cee5e580d0acdfd7f8d5792b185f92f.src","preCode":"    private Map<String, Object> getCommonConsumerConfigs() throws ConfigException {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        \r\n        \r\n        if (clientProvidedProps.containsKey(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG)) {\n            throw new ConfigException(\"Unexpected user-specified consumer config \" + ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG\n                + \", as the streams client will always turn off auto committing.\");\n        }\n        if (eosEnabled) {\n            if (clientProvidedProps.containsKey(ConsumerConfig.ISOLATION_LEVEL_CONFIG)) {\n                throw new ConfigException(\"Unexpected user-specified consumer config \" + ConsumerConfig.ISOLATION_LEVEL_CONFIG\n                    + \"; because \" + PROCESSING_GUARANTEE_CONFIG + \" is set to '\" + EXACTLY_ONCE + \"' consumers will always read committed data only.\");\n            }\n        }\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        consumerProps.remove(ZOOKEEPER_CONNECT_CONFIG);\n\n        return consumerProps;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":639,"status":"M"},{"authorDate":"2017-08-02 21:11:23","commitOrder":11,"curCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(clientProvidedProps);\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId + \"-producer\");\n\n        return props;\n    }\n","date":"2017-08-02 21:11:23","endLine":767,"groupId":"5921","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getProducerConfigs","params":"(finalStringclientId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/0e24595cee5e580d0acdfd7f8d5792b185f92f.src","preCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        if (eosEnabled) {\n            if (clientProvidedProps.containsKey(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG)) {\n                throw new ConfigException(\"Unexpected user-specified consumer config \" + ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG\n                    + \"; because \" + PROCESSING_GUARANTEE_CONFIG + \" is set to '\" + EXACTLY_ONCE + \"' producer will always have idempotency enabled.\");\n            }\n\n            if (clientProvidedProps.containsKey(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION)) {\n                throw new ConfigException(\"Unexpected user-specified consumer config \" + ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION\n                    + \"; because \" + PROCESSING_GUARANTEE_CONFIG + \" is set to '\" + EXACTLY_ONCE + \"' producer will always have only one in-flight request per connection.\");\n            }\n        }\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(clientProvidedProps);\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId + \"-producer\");\n\n        return props;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":753,"status":"M"}],"commitId":"b7684b47b80a2a7d604632bb325fde49e570480f","commitMessage":"@@@KAFKA-5096; Log invalid user configs and use defaults\n\nKafka Streams does not allow users to modify some consumer configurations.\nCurrently.  it does not allow modifying the value of 'enable.auto.commit'.\nIf the user modifies this property.  currently an exception is thrown.\nThe following changes were made in this patch:\n- Defined a new array 'NON_CONFIGURABLE_CONSUMER_CONFIGS' to hold the names\n  of the configuration parameters that is not allowed to be modified\n- Defined a new method 'checkIfUnexpectedUserSpecifiedConsumerConfig' to\n  check if user overwrote the values of any of the non configurable configuration\n  parameters. If so.  then log a warning message and reset the default values\n- Updated the javadoc to include the configuration parameters that cannot be\n  modified by users.\n- Updated the corresponding tests in StreamsConfigTest.java to reflect the changes\n  made in StreamsConfig.java\n\nAuthor: Mariam John <mariamj@us.ibm.com>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Eno Thereska <eno.thereska@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>.  Damian Guy <damian.guy@gmail.com>\n\nCloses #2990 from johnma14/bug/kafka-5096\n","date":"2017-08-02 21:11:23","modifiedFileCount":"2","status":"M","submitter":"Mariam John"},{"authorTime":"2018-01-31 02:18:51","codes":[{"authorDate":"2018-01-31 02:18:51","commitOrder":12,"curCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        consumerProps.remove(ZOOKEEPER_CONNECT_CONFIG);\n\n        return consumerProps;\n    }\n","date":"2018-01-31 02:18:51","endLine":705,"groupId":"11281","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommonConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/93223ec23f91645e5e25afd5e894f6efd6896d.src","preCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        consumerProps.remove(ZOOKEEPER_CONNECT_CONFIG);\n\n        return consumerProps;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":689,"status":"M"},{"authorDate":"2018-01-31 02:18:51","commitOrder":12,"curCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId + \"-producer\");\n\n        return props;\n    }\n","date":"2018-01-31 02:18:51","endLine":844,"groupId":"11282","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getProducerConfigs","params":"(finalStringclientId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/93223ec23f91645e5e25afd5e894f6efd6896d.src","preCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(clientProvidedProps);\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId + \"-producer\");\n\n        return props;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":829,"status":"M"}],"commitId":"cb93d764613d801a1185989f09ce2d6b76009020","commitMessage":"@@@KAFKA-6166: Streams configuration requires consumer. and producer. in order to be read (#4434)\n\n* Implement method to get custom properties\n* Add custom properties to getConsumerConfigs and getProducerConfigs\n* Add tests\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-01-31 02:18:51","modifiedFileCount":"2","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-01-31 02:18:51","codes":[{"authorDate":"2018-04-27 04:16:51","commitOrder":13,"curCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","date":"2018-04-27 04:16:51","endLine":723,"groupId":"11281","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommonConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/23/e69c5cbc733fdd84594430d144fa7dc9b206b1.src","preCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        consumerProps.remove(ZOOKEEPER_CONNECT_CONFIG);\n\n        return consumerProps;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":709,"status":"M"},{"authorDate":"2018-01-31 02:18:51","commitOrder":13,"curCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId + \"-producer\");\n\n        return props;\n    }\n","date":"2018-01-31 02:18:51","endLine":844,"groupId":"11282","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getProducerConfigs","params":"(finalStringclientId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/93223ec23f91645e5e25afd5e894f6efd6896d.src","preCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId + \"-producer\");\n\n        return props;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":829,"status":"N"}],"commitId":"8725e3604b31d0bf822959fc6d870512411c7a05","commitMessage":"@@@MINOR: Remove deprecated streams config (#4906)\n\nRemoved the following: \"zookeeper.connect\".  \"key.serde\".  \"value.serde\".  \"timestamp.extractor\"\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Jason Gustafson <jason@confluent.io>","date":"2018-04-27 04:16:51","modifiedFileCount":"2","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-02-02 13:29:00","codes":[{"authorDate":"2018-04-27 04:16:51","commitOrder":14,"curCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","date":"2018-04-27 04:16:51","endLine":723,"groupId":"11281","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommonConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/23/e69c5cbc733fdd84594430d144fa7dc9b206b1.src","preCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":709,"status":"N"},{"authorDate":"2019-02-02 13:29:00","commitOrder":14,"curCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        return props;\n    }\n","date":"2019-02-02 13:29:00","endLine":1119,"groupId":"11282","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getProducerConfigs","params":"(finalStringclientId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/56ba2d7f6bd7bfce7fd20e8947c0b4913771f6.src","preCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId + \"-producer\");\n\n        return props;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1104,"status":"M"}],"commitId":"9dc76f8872b862ca008562cdcf8cf50524e2eaa3","commitMessage":"@@@KAFKA-7798: Expose embedded clientIds (#6107)\n\nReviewers: Damian Guy <damian@confluent.io>.  John Roesler <john@confluent.io>.  Boyang Chen <bchen11@outlook.com>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2019-02-02 13:29:00","modifiedFileCount":"7","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-02-02 13:29:00","codes":[{"authorDate":"2020-03-31 06:21:27","commitOrder":15,"curCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        if (StreamThread.eosBetaEnabled(this)) {\n            consumerProps.put(\"internal.throw.on.fetch.stable.offset.unsupported\", true);\n        }\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","date":"2020-03-31 06:21:27","endLine":1020,"groupId":"15760","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommonConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/98/961ffbba7e468a72733a8e0cfe73d7c1a0e9ec.src","preCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1003,"status":"M"},{"authorDate":"2019-02-02 13:29:00","commitOrder":15,"curCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        return props;\n    }\n","date":"2019-02-02 13:29:00","endLine":1119,"groupId":"11282","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getProducerConfigs","params":"(finalStringclientId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/56ba2d7f6bd7bfce7fd20e8947c0b4913771f6.src","preCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        return props;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1104,"status":"N"}],"commitId":"6ad540735037bcc668dd94c65d4203d0e2f63dba","commitMessage":"@@@KAFKA-9719: Streams with EOS-beta should fail fast for older brokers (#8367)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-03-31 06:21:27","modifiedFileCount":"5","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-04-03 10:53:14","codes":[{"authorDate":"2020-03-31 06:21:27","commitOrder":16,"curCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        if (StreamThread.eosBetaEnabled(this)) {\n            consumerProps.put(\"internal.throw.on.fetch.stable.offset.unsupported\", true);\n        }\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","date":"2020-03-31 06:21:27","endLine":1020,"groupId":"15760","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommonConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/98/961ffbba7e468a72733a8e0cfe73d7c1a0e9ec.src","preCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        if (StreamThread.eosBetaEnabled(this)) {\n            consumerProps.put(\"internal.throw.on.fetch.stable.offset.unsupported\", true);\n        }\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1003,"status":"N"},{"authorDate":"2020-04-03 10:53:14","commitOrder":16,"curCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        \r\n        props.put(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG, 10000);\n\n        return props;\n    }\n","date":"2020-04-03 10:53:14","endLine":1278,"groupId":"11282","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getProducerConfigs","params":"(finalStringclientId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/471900624b1df33495b9ca8e3520cfe91b28ec.src","preCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        return props;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1260,"status":"M"}],"commitId":"6ddbf4d800403de33e08273e92fb0e7159bd9f22","commitMessage":"@@@KAFKA-9809: Shrink transaction timeout for streams (#8407)\n\nAs documented in the KIP:\n\nWe shall set `transaction.timout.ms` default to 10000 ms (10 seconds) on Kafka Streams. \n\nReviewer: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-04-03 10:53:14","modifiedFileCount":"2","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-04-03 12:48:37","codes":[{"authorDate":"2020-03-31 06:21:27","commitOrder":17,"curCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        if (StreamThread.eosBetaEnabled(this)) {\n            consumerProps.put(\"internal.throw.on.fetch.stable.offset.unsupported\", true);\n        }\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","date":"2020-03-31 06:21:27","endLine":1020,"groupId":"15760","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommonConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/98/961ffbba7e468a72733a8e0cfe73d7c1a0e9ec.src","preCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        if (StreamThread.eosBetaEnabled(this)) {\n            consumerProps.put(\"internal.throw.on.fetch.stable.offset.unsupported\", true);\n        }\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1003,"status":"N"},{"authorDate":"2020-04-03 12:48:37","commitOrder":17,"curCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        \r\n        if (StreamThread.eosAlphaEnabled(this)) {\n            props.put(\"internal.auto.downgrade.txn.commit\", true);\n        }\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        \r\n        props.put(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG, 10000);\n\n        return props;\n    }\n","date":"2020-04-03 12:48:37","endLine":1283,"groupId":"3013","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"getProducerConfigs","params":"(finalStringclientId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9c/8044389155f345aef109286e53d6a0fc1a0b7a.src","preCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        \r\n        props.put(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG, 10000);\n\n        return props;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1260,"status":"M"}],"commitId":"7f640f13b4d486477035c3edb28466734f053beb","commitMessage":"@@@KAFKA-9776: Downgrade TxnCommit API v3 when broker doesn't support (#8375)\n\nRevert the decision for the sendOffsetsToTransaction(groupMetadata) API to fail with old version of brokers for the sake of making the application easier to adapt between versions. This PR silently downgrade the TxnOffsetCommit API when the build version is small than 3.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-04-03 12:48:37","modifiedFileCount":"12","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-04-03 12:48:37","codes":[{"authorDate":"2020-04-04 10:17:57","commitOrder":18,"curCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        if (StreamThread.processingMode(this) == StreamThread.ProcessingMode.EXACTLY_ONCE_BETA) {\n            consumerProps.put(\"internal.throw.on.fetch.stable.offset.unsupported\", true);\n        }\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","date":"2020-04-04 10:17:57","endLine":1020,"groupId":"5985","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommonConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/06/8fcb869de1018ea8bcd35598f0e0b1f7a5f554.src","preCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        if (StreamThread.eosBetaEnabled(this)) {\n            consumerProps.put(\"internal.throw.on.fetch.stable.offset.unsupported\", true);\n        }\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1003,"status":"M"},{"authorDate":"2020-04-03 12:48:37","commitOrder":18,"curCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        \r\n        if (StreamThread.eosAlphaEnabled(this)) {\n            props.put(\"internal.auto.downgrade.txn.commit\", true);\n        }\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        \r\n        props.put(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG, 10000);\n\n        return props;\n    }\n","date":"2020-04-03 12:48:37","endLine":1283,"groupId":"3013","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"getProducerConfigs","params":"(finalStringclientId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9c/8044389155f345aef109286e53d6a0fc1a0b7a.src","preCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        \r\n        if (StreamThread.eosAlphaEnabled(this)) {\n            props.put(\"internal.auto.downgrade.txn.commit\", true);\n        }\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        \r\n        props.put(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG, 10000);\n\n        return props;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1260,"status":"N"}],"commitId":"ab5e4f52ecb072df55c7f5cd8941122a135cdf79","commitMessage":"@@@MINOR: Refactor StreamsProducer (#8380)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Andrew Choi <a24choi@edu.uwaterloo.ca>","date":"2020-04-04 10:17:57","modifiedFileCount":"15","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-04-05 02:12:05","codes":[{"authorDate":"2020-04-04 10:17:57","commitOrder":19,"curCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        if (StreamThread.processingMode(this) == StreamThread.ProcessingMode.EXACTLY_ONCE_BETA) {\n            consumerProps.put(\"internal.throw.on.fetch.stable.offset.unsupported\", true);\n        }\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","date":"2020-04-04 10:17:57","endLine":1020,"groupId":"5985","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommonConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/06/8fcb869de1018ea8bcd35598f0e0b1f7a5f554.src","preCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        if (StreamThread.processingMode(this) == StreamThread.ProcessingMode.EXACTLY_ONCE_BETA) {\n            consumerProps.put(\"internal.throw.on.fetch.stable.offset.unsupported\", true);\n        }\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1003,"status":"N"},{"authorDate":"2020-04-05 02:12:05","commitOrder":19,"curCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        \r\n        if (StreamThread.processingMode(this) == StreamThread.ProcessingMode.EXACTLY_ONCE_ALPHA) {\n            props.put(\"internal.auto.downgrade.txn.commit\", true);\n        }\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        \r\n        props.put(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG, 10000);\n\n        return props;\n    }\n","date":"2020-04-05 02:12:05","endLine":1283,"groupId":"14276","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"getProducerConfigs","params":"(finalStringclientId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e1/d6315a72574f52452d7ec8c5230646dbac2349.src","preCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        \r\n        if (StreamThread.eosAlphaEnabled(this)) {\n            props.put(\"internal.auto.downgrade.txn.commit\", true);\n        }\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        \r\n        props.put(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG, 10000);\n\n        return props;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1260,"status":"M"}],"commitId":"0eab92012bdba3f4b8b3afafc41fbea751179671","commitMessage":"@@@HOTFIX: fix compilation error (#8424)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Chia-Ping Tsai <chia7712@gmail.com>.  Guozhang Wang <guozhang@confluent.io","date":"2020-04-05 02:12:05","modifiedFileCount":"1","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-05-05 13:45:54","codes":[{"authorDate":"2020-04-04 10:17:57","commitOrder":20,"curCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        if (StreamThread.processingMode(this) == StreamThread.ProcessingMode.EXACTLY_ONCE_BETA) {\n            consumerProps.put(\"internal.throw.on.fetch.stable.offset.unsupported\", true);\n        }\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","date":"2020-04-04 10:17:57","endLine":1020,"groupId":"5985","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommonConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/06/8fcb869de1018ea8bcd35598f0e0b1f7a5f554.src","preCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        if (StreamThread.processingMode(this) == StreamThread.ProcessingMode.EXACTLY_ONCE_BETA) {\n            consumerProps.put(\"internal.throw.on.fetch.stable.offset.unsupported\", true);\n        }\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1003,"status":"N"},{"authorDate":"2020-05-05 13:45:54","commitOrder":20,"curCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        \r\n        if (StreamThread.processingMode(this) == StreamThread.ProcessingMode.EXACTLY_ONCE_ALPHA) {\n            props.put(\"internal.auto.downgrade.txn.commit\", true);\n        }\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        return props;\n    }\n","date":"2020-05-05 13:45:54","endLine":1279,"groupId":"14276","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"getProducerConfigs","params":"(finalStringclientId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/209131b0dda8e0aa60f504e3bb31ca89bd6898.src","preCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        \r\n        if (StreamThread.processingMode(this) == StreamThread.ProcessingMode.EXACTLY_ONCE_ALPHA) {\n            props.put(\"internal.auto.downgrade.txn.commit\", true);\n        }\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        \r\n        props.put(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG, 10000);\n\n        return props;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1259,"status":"M"}],"commitId":"1daa8f638bfc8034d8499525d569660a050194f8","commitMessage":"@@@KAFKA-9748: Add Streams eos-beta integration test (#8496)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-05-05 13:45:54","modifiedFileCount":"3","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-05-05 13:45:54","codes":[{"authorDate":"2021-04-29 04:22:15","commitOrder":21,"curCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        if (StreamThread.processingMode(this) == StreamThread.ProcessingMode.EXACTLY_ONCE_V2) {\n            consumerProps.put(\"internal.throw.on.fetch.stable.offset.unsupported\", true);\n        }\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","date":"2021-04-29 04:22:15","endLine":1077,"groupId":"103127","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"getCommonConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/19b1f6db34071d558f1c265fc039834a488ac9.src","preCode":"    private Map<String, Object> getCommonConsumerConfigs() {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(CONSUMER_PREFIX, ConsumerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_DEFAULT_CONFIGS);\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_CONSUMER_EOS_CONFIGS);\n\n        final Map<String, Object> consumerProps = new HashMap<>(eosEnabled ? CONSUMER_EOS_OVERRIDES : CONSUMER_DEFAULT_OVERRIDES);\n        if (StreamThread.processingMode(this) == StreamThread.ProcessingMode.EXACTLY_ONCE_BETA) {\n            consumerProps.put(\"internal.throw.on.fetch.stable.offset.unsupported\", true);\n        }\n        consumerProps.putAll(getClientCustomProps());\n        consumerProps.putAll(clientProvidedProps);\n\n        \r\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n\n        return consumerProps;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1060,"status":"M"},{"authorDate":"2020-05-05 13:45:54","commitOrder":21,"curCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        \r\n        if (StreamThread.processingMode(this) == StreamThread.ProcessingMode.EXACTLY_ONCE_ALPHA) {\n            props.put(\"internal.auto.downgrade.txn.commit\", true);\n        }\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        return props;\n    }\n","date":"2020-05-05 13:45:54","endLine":1279,"groupId":"103127","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"getProducerConfigs","params":"(finalStringclientId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/209131b0dda8e0aa60f504e3bb31ca89bd6898.src","preCode":"    public Map<String, Object> getProducerConfigs(final String clientId) {\n        final Map<String, Object> clientProvidedProps = getClientPropsWithPrefix(PRODUCER_PREFIX, ProducerConfig.configNames());\n\n        checkIfUnexpectedUserSpecifiedConsumerConfig(clientProvidedProps, NON_CONFIGURABLE_PRODUCER_EOS_CONFIGS);\n\n        \r\n        final Map<String, Object> props = new HashMap<>(eosEnabled ? PRODUCER_EOS_OVERRIDES : PRODUCER_DEFAULT_OVERRIDES);\n        props.putAll(getClientCustomProps());\n        props.putAll(clientProvidedProps);\n\n        \r\n        if (StreamThread.processingMode(this) == StreamThread.ProcessingMode.EXACTLY_ONCE_ALPHA) {\n            props.put(\"internal.auto.downgrade.txn.commit\", true);\n        }\n\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, originals().get(BOOTSTRAP_SERVERS_CONFIG));\n        \r\n        props.put(CommonClientConfigs.CLIENT_ID_CONFIG, clientId);\n\n        return props;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1259,"status":"N"}],"commitId":"3805f3706f8f3ebba81b80915c9259590525fb05","commitMessage":"@@@KAFKA-12574: KIP-732.  Deprecate eos-alpha and replace eos-beta with eos-v2 (#10573)\n\nDeprecates the following \n\n1. StreamsConfig.EXACTLY_ONCE\n2. StreamsConfig.EXACTLY_ONCE_BETA\n3. Producer#sendOffsetsToTransaction(Map offsets.  String consumerGroupId)\n\nAnd introduces a new StreamsConfig.EXACTLY_ONCE_V2 config. Additionally.  this PR replaces usages of the term \"eos-beta\" throughout the code with the term \"eos-v2\"\n\nReviewers: Matthias J. Sax <mjsax@confluent.io>","date":"2021-04-29 04:22:15","modifiedFileCount":"32","status":"M","submitter":"A. Sophie Blee-Goldman"}]
