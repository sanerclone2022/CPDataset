[{"authorTime":"2019-03-01 01:33:53","codes":[{"authorDate":"2019-03-02 07:39:23","commitOrder":3,"curCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-metrics,client-id=%s,task-id=%s,%s-id=%s\",\n                \"scope\", \"test\", taskId.toString(), \"scope\", \"metered\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-metrics,client-id=%s,task-id=%s,%s-id=%s\",\n                \"scope\", \"test\", taskId.toString(), \"scope\", \"all\")));\n    }\n","date":"2019-03-02 07:39:23","endLine":114,"groupId":"17038","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0f/60d249476162562d423193731f538b8f4851ab.src","preCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-metrics,client-id=%s,task-id=%s,%s-id=%s\",\n                \"scope\", \"test\", taskId.toString(), \"scope\", \"metered\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-metrics,client-id=%s,task-id=%s,%s-id=%s\",\n                \"scope\", \"test\", taskId.toString(), \"scope\", \"all\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2019-03-01 01:33:53","commitOrder":3,"curCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-metrics,client-id=%s,task-id=%s,%s-id=%s\",\n                \"scope\", \"test\", context.taskId().toString(), \"scope\", \"mocked-store\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-metrics,client-id=%s,task-id=%s,%s-id=%s\",\n                \"scope\", \"test\", context.taskId().toString(), \"scope\", \"all\")));\n    }\n","date":"2019-03-01 01:33:53","endLine":101,"groupId":"20583","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b4/ddb9fddf11a36786cb3c07d732768bf3a3652b.src","preCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-metrics,client-id=%s,task-id=%s,%s-id=%s\",\n                \"scope\", \"test\", context.taskId().toString(), \"scope\", \"mocked-store\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-metrics,client-id=%s,task-id=%s,%s-id=%s\",\n                \"scope\", \"test\", context.taskId().toString(), \"scope\", \"all\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"NB"}],"commitId":"33ba2820f4fbb459172022a83d761a7c674a8fdd","commitMessage":"@@@KAFKA-3522: Add TimestampedKeyValueStore builder/runtime classes (#6152)\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-03-02 07:39:23","modifiedFileCount":"15","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-08-30 21:46:07","codes":[{"authorDate":"2019-08-30 21:46:07","commitOrder":4,"curCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", \"test\", taskId.toString(), \"scope\", \"metered\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", \"test\", taskId.toString(), \"scope\", \"all\")));\n    }\n","date":"2019-08-30 21:46:07","endLine":117,"groupId":"17038","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/47/a49455cb3c039b7018660c7ced37e25d03339a.src","preCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-metrics,client-id=%s,task-id=%s,%s-id=%s\",\n                \"scope\", \"test\", taskId.toString(), \"scope\", \"metered\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-metrics,client-id=%s,task-id=%s,%s-id=%s\",\n                \"scope\", \"test\", taskId.toString(), \"scope\", \"all\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2019-08-30 21:46:07","commitOrder":4,"curCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", \"test\", context.taskId().toString(), \"scope\", \"mocked-store\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", \"test\", context.taskId().toString(), \"scope\", \"all\")));\n    }\n","date":"2019-08-30 21:46:07","endLine":101,"groupId":"20583","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bd/5bce1632f179465690d3cf674b017538362476.src","preCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-metrics,client-id=%s,task-id=%s,%s-id=%s\",\n                \"scope\", \"test\", context.taskId().toString(), \"scope\", \"mocked-store\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-metrics,client-id=%s,task-id=%s,%s-id=%s\",\n                \"scope\", \"test\", context.taskId().toString(), \"scope\", \"all\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"d18d6b033e09515adff19225f8ec6845ca34c23b","commitMessage":"@@@MINOR: Refactor tag key for store level metrics (#7257)\n\nThe tag key for store level metrics specified in StreamsMetricsImpl\nis unified with the tag keys on thread and task level.\n\nReviewers: Sophie Blee-Goldman <sophie@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-08-30 21:46:07","modifiedFileCount":"16","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-10-05 08:07:30","codes":[{"authorDate":"2019-10-05 08:07:30","commitOrder":5,"curCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, taskId.toString(), \"scope\", \"metered\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, taskId.toString(), \"scope\", \"all\")));\n    }\n","date":"2019-10-05 08:07:30","endLine":118,"groupId":"17038","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/7cc21009ad2c81175d89968f72b117706b432a.src","preCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", \"test\", taskId.toString(), \"scope\", \"metered\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", \"test\", taskId.toString(), \"scope\", \"all\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2019-10-05 08:07:30","commitOrder":5,"curCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        final String threadId = Thread.currentThread().getName();\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, context.taskId().toString(), \"scope\", \"mocked-store\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, context.taskId().toString(), \"scope\", \"all\")));\n    }\n","date":"2019-10-05 08:07:30","endLine":103,"groupId":"2158","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/58/8307ff37b230cf48a12db04aa3868421327b24.src","preCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", \"test\", context.taskId().toString(), \"scope\", \"mocked-store\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", \"test\", context.taskId().toString(), \"scope\", \"all\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"52007e878aaac3f48d0d949dbe428a2ae5e56f57","commitMessage":"@@@KAFKA-8934: Introduce instance-level metrics for streams applications (#7416)\n\n1. Moves StreamsMetricsImpl from StreamThread to KafkaStreams\n2. Adds instance-level metrics as specified in KIP-444.  i.e.:\n-- version\n-- commit-id\n-- application-id\n-- topology-description\n-- state\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <john@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-10-05 08:07:30","modifiedFileCount":"65","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-10-09 06:24:31","codes":[{"authorDate":"2019-10-09 06:24:31","commitOrder":6,"curCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, taskId.toString(), \"scope\", \"metered\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, taskId.toString(), \"scope\", \"all\")));\n    }\n","date":"2019-10-09 06:24:31","endLine":118,"groupId":"17038","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/36495fe103fbae1c4cadf11fe3d08e361622ed.src","preCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, taskId.toString(), \"scope\", \"metered\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, taskId.toString(), \"scope\", \"all\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2019-10-09 06:24:31","commitOrder":6,"curCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        final String threadId = Thread.currentThread().getName();\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, context.taskId().toString(), \"scope\", \"mocked-store\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, context.taskId().toString(), \"scope\", \"all\")));\n    }\n","date":"2019-10-09 06:24:31","endLine":103,"groupId":"2158","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/97bd274baabe6a203ee85c3ad6cb7bd19873ef.src","preCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        final String threadId = Thread.currentThread().getName();\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, context.taskId().toString(), \"scope\", \"mocked-store\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,client-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, context.taskId().toString(), \"scope\", \"all\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"e3c2148b207a6ca98c89211d12cb47abdfaa70b3","commitMessage":"@@@KAFKA-8964: Rename tag client-id for thread-level metrics and below (#7429)\n\n* Renamed tag client-id to thread-id for thread-level metrics and below\n* Corrected metrics tag keys for state store that had suffix \"-id\" instead of \"state-id\"\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-10-09 06:24:31","modifiedFileCount":"23","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-10-31 00:24:59","codes":[{"authorDate":"2019-10-31 00:24:59","commitOrder":7,"curCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            taskId.toString(),\n            STORE_TYPE,\n            \"metered\"\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                taskId.toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","date":"2019-10-31 00:24:59","endLine":170,"groupId":"4355","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0f/1795c51d7c381a67bab623989fe1637d754735.src","preCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, taskId.toString(), \"scope\", \"metered\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, taskId.toString(), \"scope\", \"all\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2019-10-31 00:24:59","commitOrder":7,"curCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            context.taskId().toString(),\n            STORE_TYPE,\n            STORE_NAME\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                context.taskId().toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","date":"2019-10-31 00:24:59","endLine":152,"groupId":"4355","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/59/eb34973bc63fcc60cb1ef6cae5852d8e454223.src","preCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        final String threadId = Thread.currentThread().getName();\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, context.taskId().toString(), \"scope\", \"mocked-store\")));\n        assertTrue(reporter.containsMbean(String.format(\"kafka.streams:type=stream-%s-state-metrics,thread-id=%s,task-id=%s,%s-state-id=%s\",\n                \"scope\", threadId, context.taskId().toString(), \"scope\", \"all\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"fc0f82372e1e456cbd43490b9eba957c4a0d3eb5","commitMessage":"@@@KAFKA-8980: Refactor state-store-level streams metrics (#7584)\n\nRefactors metrics according to KIP-444\nIntroduces StateStoreMetrics as a central provider for state store metrics\nAdds metric scope (a.k.a. store type) to the in-memory suppression buffer\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   Bill Bejeck <bbejeck@gmail.com>","date":"2019-10-31 00:24:59","modifiedFileCount":"26","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-05-28 09:18:36","codes":[{"authorDate":"2020-05-28 09:18:36","commitOrder":8,"curCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter();\n        final MetricsContext metricsContext = new KafkaMetricsContext(\"kafka.streams\");\n        reporter.contextChange(metricsContext);\n\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            taskId.toString(),\n            STORE_TYPE,\n            \"metered\"\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                taskId.toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","date":"2020-05-28 09:18:36","endLine":177,"groupId":"4355","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/22855671ad704d215d0d45289277068e68f05d.src","preCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            taskId.toString(),\n            STORE_TYPE,\n            \"metered\"\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                taskId.toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2020-05-28 09:18:36","commitOrder":8,"curCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter();\n        final MetricsContext metricsContext = new KafkaMetricsContext(\"kafka.streams\");\n        reporter.contextChange(metricsContext);\n\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            context.taskId().toString(),\n            STORE_TYPE,\n            STORE_NAME\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                context.taskId().toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","date":"2020-05-28 09:18:36","endLine":171,"groupId":"4355","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/1fb12ec4806c6b16cf0b580f7ff5db85377c25.src","preCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter(\"kafka.streams\");\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            context.taskId().toString(),\n            STORE_TYPE,\n            STORE_NAME\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                context.taskId().toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"9c833f665f349e5c292228f75188f5521282835d","commitMessage":"@@@KAFKA-9960: implement KIP-606 to add metadata context to MetricsReporter (#8691)\n\nImplemented KIP-606 to add metadata context to MetricsReporter.\n\nAuthor: Xiaodong Du <xdu@confluent.io>\nReviewers: David Arthur <mumrah@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Xavier L?aut? <xavier@confluent.io>.  Ryan Pridgeon <ryan.n.pridgeon@gmail.com>","date":"2020-05-28 09:18:36","modifiedFileCount":"35","status":"M","submitter":"xiaodongdu"},{"authorTime":"2020-05-28 09:18:36","codes":[{"authorDate":"2020-07-10 02:50:31","commitOrder":9,"curCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter();\n        final MetricsContext metricsContext = new KafkaMetricsContext(\"kafka.streams\");\n        reporter.contextChange(metricsContext);\n\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            taskId.toString(),\n            STORE_TYPE,\n            STORE_NAME\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                taskId.toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","date":"2020-07-10 02:50:31","endLine":231,"groupId":"4355","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/5504a14e67d97cf4762b7f45662a4edc1e772d.src","preCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter();\n        final MetricsContext metricsContext = new KafkaMetricsContext(\"kafka.streams\");\n        reporter.contextChange(metricsContext);\n\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            taskId.toString(),\n            STORE_TYPE,\n            \"metered\"\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                taskId.toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"},{"authorDate":"2020-05-28 09:18:36","commitOrder":9,"curCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter();\n        final MetricsContext metricsContext = new KafkaMetricsContext(\"kafka.streams\");\n        reporter.contextChange(metricsContext);\n\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            context.taskId().toString(),\n            STORE_TYPE,\n            STORE_NAME\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                context.taskId().toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","date":"2020-05-28 09:18:36","endLine":171,"groupId":"4355","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/1fb12ec4806c6b16cf0b580f7ff5db85377c25.src","preCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter();\n        final MetricsContext metricsContext = new KafkaMetricsContext(\"kafka.streams\");\n        reporter.contextChange(metricsContext);\n\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            context.taskId().toString(),\n            STORE_TYPE,\n            STORE_NAME\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                context.taskId().toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"}],"commitId":"813f92c21ad4bd7ffdd8acc66c20d31927e7a67f","commitMessage":"@@@KAFKA-10179: Pass correct changelog topic to state serdes (#8902)\n\nUntil now we always passed the default changelog topic name\nto the state serdes. However.  for optimized source tables\nand global tables the changelog topic is the source topic.\n\nMost serdes do not use the topic name passed to them.\nHowever.  if the serdes actually use the topic name for\n(de)serialization a\norg.apache.kafka.common.errors.SerializationException is thrown.\n\nThis commits passed the correct changelog topic to the state\nserdes of the metered state stores.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-07-10 02:50:31","modifiedFileCount":"30","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-10-03 07:49:12","codes":[{"authorDate":"2020-07-10 02:50:31","commitOrder":10,"curCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter();\n        final MetricsContext metricsContext = new KafkaMetricsContext(\"kafka.streams\");\n        reporter.contextChange(metricsContext);\n\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            taskId.toString(),\n            STORE_TYPE,\n            STORE_NAME\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                taskId.toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","date":"2020-07-10 02:50:31","endLine":231,"groupId":"4355","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/5504a14e67d97cf4762b7f45662a4edc1e772d.src","preCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter();\n        final MetricsContext metricsContext = new KafkaMetricsContext(\"kafka.streams\");\n        reporter.contextChange(metricsContext);\n\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            taskId.toString(),\n            STORE_TYPE,\n            STORE_NAME\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                taskId.toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"N"},{"authorDate":"2020-10-03 07:49:12","commitOrder":10,"curCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init((StateStoreContext) context, store);\n        final JmxReporter reporter = new JmxReporter();\n        final MetricsContext metricsContext = new KafkaMetricsContext(\"kafka.streams\");\n        reporter.contextChange(metricsContext);\n\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            context.taskId().toString(),\n            STORE_TYPE,\n            STORE_NAME\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                context.taskId().toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","date":"2020-10-03 07:49:12","endLine":225,"groupId":"4355","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/0169476f3403154f62b6a95917630b44046bff.src","preCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init(context, store);\n        final JmxReporter reporter = new JmxReporter();\n        final MetricsContext metricsContext = new KafkaMetricsContext(\"kafka.streams\");\n        reporter.contextChange(metricsContext);\n\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            context.taskId().toString(),\n            STORE_TYPE,\n            STORE_NAME\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                context.taskId().toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"69790a1463bafc1f63e3c288a6636b3f4586c1b4","commitMessage":"@@@KAFKA-10535: Split ProcessorContext into Processor/StateStore/Record Contexts (#9361)\n\nMigrate different components of the old ProcessorContext interface\ninto separate interfaces that are more appropriate for their usages.\nSee KIP-478 for the details.\n\nReviewers: Guozhang Wang <guozhang@apache.org>.  Paul Whalen <pgwhalen@gmail.com>","date":"2020-10-03 07:49:12","modifiedFileCount":"71","status":"M","submitter":"John Roesler"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":11,"curCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter();\n        final MetricsContext metricsContext = new KafkaMetricsContext(\"kafka.streams\");\n        reporter.contextChange(metricsContext);\n\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            STORE_LEVEL_GROUP,\n            THREAD_ID_TAG_KEY,\n            threadId,\n            taskId.toString(),\n            STORE_TYPE,\n            STORE_NAME\n        )));\n    }\n","date":"2021-06-01 20:05:08","endLine":241,"groupId":"10928","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/eb/48e0c5fc2fa5f655e8c58aed3b27e6c161bce9.src","preCode":"    public void testMetrics() {\n        init();\n        final JmxReporter reporter = new JmxReporter();\n        final MetricsContext metricsContext = new KafkaMetricsContext(\"kafka.streams\");\n        reporter.contextChange(metricsContext);\n\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            taskId.toString(),\n            STORE_TYPE,\n            STORE_NAME\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                taskId.toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":11,"curCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init((StateStoreContext) context, store);\n        final JmxReporter reporter = new JmxReporter();\n        final MetricsContext metricsContext = new KafkaMetricsContext(\"kafka.streams\");\n        reporter.contextChange(metricsContext);\n\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            STORE_LEVEL_GROUP,\n            THREAD_ID_TAG_KEY,\n            threadId,\n            context.taskId().toString(),\n            STORE_TYPE,\n            STORE_NAME\n        )));\n    }\n","date":"2021-06-01 20:05:08","endLine":226,"groupId":"10928","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetrics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/46/1c50c617a5aa6d01591a5ac369538f10fae55b.src","preCode":"    public void testMetrics() {\n        replay(innerStoreMock);\n        store.init((StateStoreContext) context, store);\n        final JmxReporter reporter = new JmxReporter();\n        final MetricsContext metricsContext = new KafkaMetricsContext(\"kafka.streams\");\n        reporter.contextChange(metricsContext);\n\n        metrics.addReporter(reporter);\n        assertTrue(reporter.containsMbean(String.format(\n            \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n            storeLevelGroup,\n            threadIdTagKey,\n            threadId,\n            context.taskId().toString(),\n            STORE_TYPE,\n            STORE_NAME\n        )));\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertTrue(reporter.containsMbean(String.format(\n                \"kafka.streams:type=%s,%s=%s,task-id=%s,%s-state-id=%s\",\n                storeLevelGroup,\n                threadIdTagKey,\n                threadId,\n                context.taskId().toString(),\n                STORE_TYPE,\n                ROLLUP_VALUE\n            )));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"}]
