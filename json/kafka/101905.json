[{"authorTime":"2020-02-22 13:40:28","codes":[{"authorDate":"2020-02-22 13:40:28","commitOrder":1,"curCode":"    public void shouldThrowTaskMigrateExceptionOnEosBeginTxnError() {\n        eosMockProducer.beginTransactionException = new KafkaException(\"KABOOM!\");\n\n        \r\n        final StreamsException thrown = assertThrows(\n            StreamsException.class,\n            () -> eosStreamsProducer.send(null, null));\n\n        assertEquals(eosMockProducer.beginTransactionException, thrown.getCause());\n        assertThat(thrown.getMessage(), equalTo(\"Producer encounter unexpected error trying to begin a new transaction for task 0_0\"));\n    }\n","date":"2020-02-22 13:40:28","endLine":448,"groupId":"15640","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowTaskMigrateExceptionOnEosBeginTxnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d3/c81c7a834c4e5469172547882d4d5fd8b11daa.src","preCode":"    public void shouldThrowTaskMigrateExceptionOnEosBeginTxnError() {\n        eosMockProducer.beginTransactionException = new KafkaException(\"KABOOM!\");\n\n        \r\n        final StreamsException thrown = assertThrows(\n            StreamsException.class,\n            () -> eosStreamsProducer.send(null, null));\n\n        assertEquals(eosMockProducer.beginTransactionException, thrown.getCause());\n        assertThat(thrown.getMessage(), equalTo(\"Producer encounter unexpected error trying to begin a new transaction for task 0_0\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"B"},{"authorDate":"2020-02-22 13:40:28","commitOrder":1,"curCode":"    public void shouldFailOnEosCommitTxFatal() {\n        eosMockProducer.commitTransactionException = new RuntimeException(\"KABOOM!\");\n\n        final RuntimeException thrown = assertThrows(\n            RuntimeException.class,\n            () -> eosStreamsProducer.commitTransaction(offsetsAndMetadata)\n        );\n\n        assertTrue(eosMockProducer.sentOffsets());\n        assertThat(thrown.getMessage(), equalTo(\"KABOOM!\"));\n    }\n","date":"2020-02-22 13:40:28","endLine":593,"groupId":"15645","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFailOnEosCommitTxFatal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d3/c81c7a834c4e5469172547882d4d5fd8b11daa.src","preCode":"    public void shouldFailOnEosCommitTxFatal() {\n        eosMockProducer.commitTransactionException = new RuntimeException(\"KABOOM!\");\n\n        final RuntimeException thrown = assertThrows(\n            RuntimeException.class,\n            () -> eosStreamsProducer.commitTransaction(offsetsAndMetadata)\n        );\n\n        assertTrue(eosMockProducer.sentOffsets());\n        assertThat(thrown.getMessage(), equalTo(\"KABOOM!\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":583,"status":"B"}],"commitId":"97d107a270d3e9b795b42d209f838f2f81009ce8","commitMessage":"@@@KAFKA-9441: Add internal TransactionManager (#8105)\n\nUpfront refactoring for KIP-447.\n\nIntroduces `StreamsProducer` that allows to share a producer over multiple tasks and track the TX status.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-02-22 13:40:28","modifiedFileCount":"19","status":"B","submitter":"Matthias J. Sax"},{"authorTime":"2020-03-06 04:20:46","codes":[{"authorDate":"2020-03-06 04:20:46","commitOrder":2,"curCode":"    public void shouldThrowTaskMigrateExceptionOnEosBeginTxnError() {\n        eosMockProducer.beginTransactionException = new KafkaException(\"KABOOM!\");\n\n        \r\n        final StreamsException thrown = assertThrows(\n            StreamsException.class,\n            () -> eosStreamsProducer.send(null, null));\n\n        assertThat(thrown.getCause(), is(eosMockProducer.beginTransactionException));\n        assertThat(\n            thrown.getMessage(),\n            is(\"Producer encounter unexpected error trying to begin a new transaction [test, eos]\")\n        );\n    }\n","date":"2020-03-06 04:20:46","endLine":407,"groupId":"5149","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowTaskMigrateExceptionOnEosBeginTxnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/05198ce2ff97b4961f894dd854c93f6804fe89.src","preCode":"    public void shouldThrowTaskMigrateExceptionOnEosBeginTxnError() {\n        eosMockProducer.beginTransactionException = new KafkaException(\"KABOOM!\");\n\n        \r\n        final StreamsException thrown = assertThrows(\n            StreamsException.class,\n            () -> eosStreamsProducer.send(null, null));\n\n        assertEquals(eosMockProducer.beginTransactionException, thrown.getCause());\n        assertThat(thrown.getMessage(), equalTo(\"Producer encounter unexpected error trying to begin a new transaction for task 0_0\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"M"},{"authorDate":"2020-03-06 04:20:46","commitOrder":2,"curCode":"    public void shouldFailOnEosCommitTxFatal() {\n        eosMockProducer.commitTransactionException = new RuntimeException(\"KABOOM!\");\n\n        final RuntimeException thrown = assertThrows(\n            RuntimeException.class,\n            () -> eosStreamsProducer.commitTransaction(offsetsAndMetadata)\n        );\n\n        assertThat(eosMockProducer.sentOffsets(), is(true));\n        assertThat(thrown.getMessage(), is(\"KABOOM!\"));\n    }\n","date":"2020-03-06 04:20:46","endLine":574,"groupId":"2172","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFailOnEosCommitTxFatal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/05198ce2ff97b4961f894dd854c93f6804fe89.src","preCode":"    public void shouldFailOnEosCommitTxFatal() {\n        eosMockProducer.commitTransactionException = new RuntimeException(\"KABOOM!\");\n\n        final RuntimeException thrown = assertThrows(\n            RuntimeException.class,\n            () -> eosStreamsProducer.commitTransaction(offsetsAndMetadata)\n        );\n\n        assertTrue(eosMockProducer.sentOffsets());\n        assertThat(thrown.getMessage(), equalTo(\"KABOOM!\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":564,"status":"M"}],"commitId":"78374a15492cfb6df49353bd166d8c45ac9abdb2","commitMessage":"@@@KAFKA-9615: Clean up task/producer create and close (#8213)\n\n* Consolidate task/producer management. Now.  exactly one component manages\n  the creation and destruction of Producers.  whether they are per-thread or per-task.\n* Add missing test coverage on TaskManagerTest\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Boyang Chen <boyang@confluent.io>","date":"2020-03-06 04:20:46","modifiedFileCount":"12","status":"M","submitter":"John Roesler"},{"authorTime":"2020-03-06 04:20:46","codes":[{"authorDate":"2020-03-20 02:31:51","commitOrder":3,"curCode":"    public void shouldThrowTaskMigrateExceptionOnEosBeginTxnError() {\n        eosMockProducer.beginTransactionException = new KafkaException(\"KABOOM!\");\n\n        \r\n        final StreamsException thrown = assertThrows(\n            StreamsException.class,\n            () -> eosStreamsProducer.send(null, null));\n\n        assertThat(thrown.getCause(), is(eosMockProducer.beginTransactionException));\n        assertThat(\n            thrown.getMessage(),\n            is(\"Error encountered trying to begin a new transaction [test]\")\n        );\n    }\n","date":"2020-03-20 02:31:51","endLine":440,"groupId":"5149","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowTaskMigrateExceptionOnEosBeginTxnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/90/dedab38d91861ed1c6ba1b9d6b66ac2e30db9f.src","preCode":"    public void shouldThrowTaskMigrateExceptionOnEosBeginTxnError() {\n        eosMockProducer.beginTransactionException = new KafkaException(\"KABOOM!\");\n\n        \r\n        final StreamsException thrown = assertThrows(\n            StreamsException.class,\n            () -> eosStreamsProducer.send(null, null));\n\n        assertThat(thrown.getCause(), is(eosMockProducer.beginTransactionException));\n        assertThat(\n            thrown.getMessage(),\n            is(\"Producer encounter unexpected error trying to begin a new transaction [test, eos]\")\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"M"},{"authorDate":"2020-03-06 04:20:46","commitOrder":3,"curCode":"    public void shouldFailOnEosCommitTxFatal() {\n        eosMockProducer.commitTransactionException = new RuntimeException(\"KABOOM!\");\n\n        final RuntimeException thrown = assertThrows(\n            RuntimeException.class,\n            () -> eosStreamsProducer.commitTransaction(offsetsAndMetadata)\n        );\n\n        assertThat(eosMockProducer.sentOffsets(), is(true));\n        assertThat(thrown.getMessage(), is(\"KABOOM!\"));\n    }\n","date":"2020-03-06 04:20:46","endLine":574,"groupId":"2172","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFailOnEosCommitTxFatal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/05198ce2ff97b4961f894dd854c93f6804fe89.src","preCode":"    public void shouldFailOnEosCommitTxFatal() {\n        eosMockProducer.commitTransactionException = new RuntimeException(\"KABOOM!\");\n\n        final RuntimeException thrown = assertThrows(\n            RuntimeException.class,\n            () -> eosStreamsProducer.commitTransaction(offsetsAndMetadata)\n        );\n\n        assertThat(eosMockProducer.sentOffsets(), is(true));\n        assertThat(thrown.getMessage(), is(\"KABOOM!\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":564,"status":"N"}],"commitId":"89cd2f2a0b21368297323437fd15ba6341e4707b","commitMessage":"@@@KAFKA-9441: Unify committing within TaskManager (#8218)\n\n - part of KIP-447\n - commit all tasks at once using non-eos (and eos-beta in follow up work)\n - unified commit logic into TaskManager\n - split existing methods of Task interface in pre/post parts\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-03-20 02:31:51","modifiedFileCount":"21","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-03-23 04:50:07","codes":[{"authorDate":"2020-03-20 02:31:51","commitOrder":4,"curCode":"    public void shouldThrowTaskMigrateExceptionOnEosBeginTxnError() {\n        eosMockProducer.beginTransactionException = new KafkaException(\"KABOOM!\");\n\n        \r\n        final StreamsException thrown = assertThrows(\n            StreamsException.class,\n            () -> eosStreamsProducer.send(null, null));\n\n        assertThat(thrown.getCause(), is(eosMockProducer.beginTransactionException));\n        assertThat(\n            thrown.getMessage(),\n            is(\"Error encountered trying to begin a new transaction [test]\")\n        );\n    }\n","date":"2020-03-20 02:31:51","endLine":440,"groupId":"5149","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowTaskMigrateExceptionOnEosBeginTxnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/90/dedab38d91861ed1c6ba1b9d6b66ac2e30db9f.src","preCode":"    public void shouldThrowTaskMigrateExceptionOnEosBeginTxnError() {\n        eosMockProducer.beginTransactionException = new KafkaException(\"KABOOM!\");\n\n        \r\n        final StreamsException thrown = assertThrows(\n            StreamsException.class,\n            () -> eosStreamsProducer.send(null, null));\n\n        assertThat(thrown.getCause(), is(eosMockProducer.beginTransactionException));\n        assertThat(\n            thrown.getMessage(),\n            is(\"Error encountered trying to begin a new transaction [test]\")\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"N"},{"authorDate":"2020-03-23 04:50:07","commitOrder":4,"curCode":"    public void shouldFailOnEosCommitTxFatal() {\n        eosMockProducer.commitTransactionException = new RuntimeException(\"KABOOM!\");\n\n        final RuntimeException thrown = assertThrows(\n            RuntimeException.class,\n            () -> eosStreamsProducer.commitTransaction(offsetsAndMetadata, new ConsumerGroupMetadata(\"appId\"))\n        );\n\n        assertThat(eosMockProducer.sentOffsets(), is(true));\n        assertThat(thrown.getMessage(), is(\"KABOOM!\"));\n    }\n","date":"2020-03-23 04:50:07","endLine":650,"groupId":"7262","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFailOnEosCommitTxFatal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/f209c587ae0e01fba587e71ff2462af97e0284.src","preCode":"    public void shouldFailOnEosCommitTxFatal() {\n        eosMockProducer.commitTransactionException = new RuntimeException(\"KABOOM!\");\n\n        final RuntimeException thrown = assertThrows(\n            RuntimeException.class,\n            () -> eosStreamsProducer.commitTransaction(offsetsAndMetadata)\n        );\n\n        assertThat(eosMockProducer.sentOffsets(), is(true));\n        assertThat(thrown.getMessage(), is(\"KABOOM!\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":640,"status":"M"}],"commitId":"1ad5f346cb88072c419142c86c3d897aad2de996","commitMessage":"@@@KAFKA-9451: Enable producer per thread for Streams EOS (#8318)\n\n- KIP-447\n- add new configs to enable producer per thread EOS\n- updates TaskManager to use single shared producer for eos-beta\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-03-23 04:50:07","modifiedFileCount":"17","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-04-02 04:20:27","codes":[{"authorDate":"2020-04-02 04:20:27","commitOrder":5,"curCode":"    public void shouldThrowTaskMigrateExceptionOnEosBeginTxnError() {\n        eosAlphaMockProducer.beginTransactionException = new KafkaException(\"KABOOM!\");\n\n        \r\n        final StreamsException thrown = assertThrows(\n            StreamsException.class,\n            () -> eosAlphaStreamsProducer.send(null, null));\n\n        assertThat(thrown.getCause(), is(eosAlphaMockProducer.beginTransactionException));\n        assertThat(\n            thrown.getMessage(),\n            is(\"Error encountered trying to begin a new transaction [test]\")\n        );\n    }\n","date":"2020-04-02 04:20:27","endLine":586,"groupId":"101905","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowTaskMigrateExceptionOnEosBeginTxnError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/09/eb038bfaba06ea5b977ed6d9c9b3256b6a9349.src","preCode":"    public void shouldThrowTaskMigrateExceptionOnEosBeginTxnError() {\n        eosMockProducer.beginTransactionException = new KafkaException(\"KABOOM!\");\n\n        \r\n        final StreamsException thrown = assertThrows(\n            StreamsException.class,\n            () -> eosStreamsProducer.send(null, null));\n\n        assertThat(thrown.getCause(), is(eosMockProducer.beginTransactionException));\n        assertThat(\n            thrown.getMessage(),\n            is(\"Error encountered trying to begin a new transaction [test]\")\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":573,"status":"M"},{"authorDate":"2020-04-02 04:20:27","commitOrder":5,"curCode":"    public void shouldFailOnEosCommitTxFatal() {\n        eosAlphaMockProducer.commitTransactionException = new RuntimeException(\"KABOOM!\");\n\n        final RuntimeException thrown = assertThrows(\n            RuntimeException.class,\n            () -> eosAlphaStreamsProducer.commitTransaction(offsetsAndMetadata, new ConsumerGroupMetadata(\"appId\"))\n        );\n\n        assertThat(eosAlphaMockProducer.sentOffsets(), is(true));\n        assertThat(thrown.getMessage(), is(\"KABOOM!\"));\n    }\n","date":"2020-04-02 04:20:27","endLine":753,"groupId":"101905","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFailOnEosCommitTxFatal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/09/eb038bfaba06ea5b977ed6d9c9b3256b6a9349.src","preCode":"    public void shouldFailOnEosCommitTxFatal() {\n        eosMockProducer.commitTransactionException = new RuntimeException(\"KABOOM!\");\n\n        final RuntimeException thrown = assertThrows(\n            RuntimeException.class,\n            () -> eosStreamsProducer.commitTransaction(offsetsAndMetadata, new ConsumerGroupMetadata(\"appId\"))\n        );\n\n        assertThat(eosMockProducer.sentOffsets(), is(true));\n        assertThat(thrown.getMessage(), is(\"KABOOM!\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"M"}],"commitId":"cc59150f408de6ffea277267ec7d2e3920fbe6b5","commitMessage":"@@@KAFKA-9748: extend EosIntegrationTest for EOS-beta (#8331)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-04-02 04:20:27","modifiedFileCount":"13","status":"M","submitter":"Matthias J. Sax"}]
