[{"authorTime":"2020-04-16 04:13:23","codes":[{"authorDate":"2020-03-20 02:31:51","commitOrder":6,"curCode":"    public void shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andReturn(singletonList(task00)).anyTimes();\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(emptyMap(), emptyMap());\n        assertThat(task00.state(), is(Task.State.CLOSED));\n        assertThat(taskManager.activeTaskMap(), Matchers.anEmptyMap());\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n    }\n","date":"2020-03-20 02:31:51","endLine":568,"groupId":"9657","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d8/bca5e6f35cf58a939f83619f8f81ae6d586f6f.src","preCode":"    public void shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andReturn(singletonList(task00)).anyTimes();\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(emptyMap(), emptyMap());\n        assertThat(task00.state(), is(Task.State.CLOSED));\n        assertThat(taskManager.activeTaskMap(), Matchers.anEmptyMap());\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":551,"status":"NB"},{"authorDate":"2020-04-16 04:13:23","commitOrder":6,"curCode":"    public void shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment)))\n            .andReturn(singletonList(task00)).anyTimes();\n        expectLastCall();\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(Collections.emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        task00.setCommitNeeded();\n\n        assertThat(taskManager.commitAll(), equalTo(1));\n        assertThat(task00.commitNeeded, is(false));\n    }\n","date":"2020-04-16 04:13:23","endLine":1659,"groupId":"1057","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/4b7ca21cb8cd09895df8764d3c86b24beeb37a.src","preCode":"    public void shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment)))\n            .andReturn(singletonList(task00)).anyTimes();\n        expectLastCall();\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(Collections.emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        task00.setCommitNeeded();\n\n        assertThat(taskManager.commitAll(), equalTo(1));\n        assertThat(task00.commitNeeded, is(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1640,"status":"B"}],"commitId":"17f98792617a6de39cbd0d651a03fc40a06e0ff6","commitMessage":"@@@KAFKA-9832: extend Kafka Streams EOS system test (#8440)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-04-16 04:13:23","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-10-20 02:07:56","codes":[{"authorDate":"2020-10-20 02:07:56","commitOrder":7,"curCode":"    public void shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andReturn(singletonList(task00)).anyTimes();\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(emptyMap(), emptyMap());\n        assertThat(task00.state(), is(Task.State.CLOSED));\n        assertThat(taskManager.activeTaskMap(), Matchers.anEmptyMap());\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n    }\n","date":"2020-10-20 02:07:56","endLine":786,"groupId":"9657","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/5e148d7adfac58b89f87a980544d1d0dd371d2.src","preCode":"    public void shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andReturn(singletonList(task00)).anyTimes();\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(emptyMap(), emptyMap());\n        assertThat(task00.state(), is(Task.State.CLOSED));\n        assertThat(taskManager.activeTaskMap(), Matchers.anEmptyMap());\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":769,"status":"M"},{"authorDate":"2020-10-20 02:07:56","commitOrder":7,"curCode":"    public void shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment)))\n            .andReturn(singletonList(task00)).anyTimes();\n        expectLastCall();\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(Collections.emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        task00.setCommitNeeded();\n\n        assertThat(taskManager.commitAll(), equalTo(1));\n        assertThat(task00.commitNeeded, is(false));\n    }\n","date":"2020-10-20 02:07:56","endLine":1756,"groupId":"1057","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/5e148d7adfac58b89f87a980544d1d0dd371d2.src","preCode":"    public void shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment)))\n            .andReturn(singletonList(task00)).anyTimes();\n        expectLastCall();\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(Collections.emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        task00.setCommitNeeded();\n\n        assertThat(taskManager.commitAll(), equalTo(1));\n        assertThat(task00.commitNeeded, is(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1737,"status":"M"}],"commitId":"aef6cd6e9995b42db2cefa7d715321d0edee5628","commitMessage":"@@@KAFKA-9274: Add timeout handling for state restore and StandbyTasks (#9368)\n\n* Part of KIP-572\n* If a TimeoutException happens during restore of active tasks.  or updating standby tasks.  we need to trigger task.timeout.ms timeout.\n\nReviewers: John Roesler <john@confluent.io>","date":"2020-10-20 02:07:56","modifiedFileCount":"15","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-01-22 00:52:34","codes":[{"authorDate":"2021-01-22 00:52:34","commitOrder":8,"curCode":"    public void shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andStubReturn(singletonList(task00));\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(emptyMap(), emptyMap());\n        assertThat(task00.state(), is(Task.State.CLOSED));\n        assertThat(taskManager.activeTaskMap(), Matchers.anEmptyMap());\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n    }\n","date":"2021-01-22 00:52:34","endLine":849,"groupId":"9657","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/a1151510f36176da74cab4e2af690ba566a41a.src","preCode":"    public void shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andReturn(singletonList(task00)).anyTimes();\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(emptyMap(), emptyMap());\n        assertThat(task00.state(), is(Task.State.CLOSED));\n        assertThat(taskManager.activeTaskMap(), Matchers.anEmptyMap());\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":832,"status":"M"},{"authorDate":"2021-01-22 00:52:34","commitOrder":8,"curCode":"    public void shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment)))\n            .andStubReturn(singletonList(task00));\n        expectLastCall();\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(Collections.emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        task00.setCommitNeeded();\n\n        assertThat(taskManager.commitAll(), equalTo(1));\n        assertThat(task00.commitNeeded, is(false));\n    }\n","date":"2021-01-22 00:52:34","endLine":1817,"groupId":"1057","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/a1151510f36176da74cab4e2af690ba566a41a.src","preCode":"    public void shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment)))\n            .andReturn(singletonList(task00)).anyTimes();\n        expectLastCall();\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(Collections.emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        task00.setCommitNeeded();\n\n        assertThat(taskManager.commitAll(), equalTo(1));\n        assertThat(task00.commitNeeded, is(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1798,"status":"M"}],"commitId":"92e72f7bf96841d7991f1d71f440c2da06dd89cf","commitMessage":"@@@KAFKA-12185: fix ConcurrentModificationException in newly added Tasks container class (#9940)\n\nReviewers: Guozhang Wang <guozhand@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2021-01-22 00:52:34","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-02-06 09:25:50","codes":[{"authorDate":"2021-02-06 09:25:50","commitOrder":9,"curCode":"    public void shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andStubReturn(singletonList(task00));\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(emptyMap(), emptyMap());\n        assertThat(task00.state(), is(Task.State.CLOSED));\n        assertThat(taskManager.activeTaskMap(), Matchers.anEmptyMap());\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n    }\n","date":"2021-02-06 09:25:50","endLine":827,"groupId":"9657","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/3a8c92c30322fe86e22b4a1174900049e5d642.src","preCode":"    public void shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andStubReturn(singletonList(task00));\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(emptyMap(), emptyMap());\n        assertThat(task00.state(), is(Task.State.CLOSED));\n        assertThat(taskManager.activeTaskMap(), Matchers.anEmptyMap());\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":810,"status":"M"},{"authorDate":"2021-02-06 09:25:50","commitOrder":9,"curCode":"    public void shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment)))\n            .andStubReturn(singletonList(task00));\n        expectLastCall();\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(Collections.emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        task00.setCommitNeeded();\n\n        assertThat(taskManager.commitAll(), equalTo(1));\n        assertThat(task00.commitNeeded, is(false));\n    }\n","date":"2021-02-06 09:25:50","endLine":1795,"groupId":"1057","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/3a8c92c30322fe86e22b4a1174900049e5d642.src","preCode":"    public void shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment)))\n            .andStubReturn(singletonList(task00));\n        expectLastCall();\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(Collections.emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        task00.setCommitNeeded();\n\n        assertThat(taskManager.commitAll(), equalTo(1));\n        assertThat(task00.commitNeeded, is(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1776,"status":"M"}],"commitId":"0bc394cc1d19f1e41dd6646e9ac0e09b91fb1398","commitMessage":"@@@KAFKA-9274: handle TimeoutException on task reset (#10000)\n\nPart of KIP-572: We move the offset reset for the internal \"main consumer\" when we revive a corrupted task.  from the \"task cleanup\" code path.  to the \"task init\" code path. For this case.  we have already logic in place to handle TimeoutException that might be thrown by consumer#committed() method call.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>\n","date":"2021-02-06 09:25:50","modifiedFileCount":"10","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-02-07 05:04:30","codes":[{"authorDate":"2021-02-07 05:04:30","commitOrder":10,"curCode":"    public void shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andStubReturn(singletonList(task00));\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(emptyMap(), emptyMap());\n        assertThat(task00.state(), is(Task.State.CLOSED));\n        assertThat(taskManager.activeTaskMap(), Matchers.anEmptyMap());\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n    }\n","date":"2021-02-07 05:04:30","endLine":851,"groupId":"9657","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/224e0cd5c002edd02d0ef2ee8e1586fa832b3d.src","preCode":"    public void shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andStubReturn(singletonList(task00));\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(emptyMap(), emptyMap());\n        assertThat(task00.state(), is(Task.State.CLOSED));\n        assertThat(taskManager.activeTaskMap(), Matchers.anEmptyMap());\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":834,"status":"M"},{"authorDate":"2021-02-07 05:04:30","commitOrder":10,"curCode":"    public void shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment)))\n            .andStubReturn(singletonList(task00));\n        expectLastCall();\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(Collections.emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        task00.setCommitNeeded();\n\n        assertThat(taskManager.commitAll(), equalTo(1));\n        assertThat(task00.commitNeeded, is(false));\n    }\n","date":"2021-02-07 05:04:30","endLine":1819,"groupId":"1057","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/224e0cd5c002edd02d0ef2ee8e1586fa832b3d.src","preCode":"    public void shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment)))\n            .andStubReturn(singletonList(task00));\n        expectLastCall();\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(Collections.emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        task00.setCommitNeeded();\n\n        assertThat(taskManager.commitAll(), equalTo(1));\n        assertThat(task00.commitNeeded, is(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1800,"status":"M"}],"commitId":"d2cb2dc45d536ae124e3da25d6d5a4e932a23a27","commitMessage":"@@@KAFKA-9751: Forward CreateTopicsRequest for FindCoordinator/Metadata when topic creation is needed (#9579)\n\nConsolidate auto topic creation logic to either forward a CreateTopicRequest or handling the creation directly as AutoTopicCreationManager.  when handling FindCoordinator/Metadata request.\n\nCo-authored-by: Jason Gustafson <jason@confluent.io>\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2021-02-07 05:04:30","modifiedFileCount":"15","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-03-23 04:39:29","codes":[{"authorDate":"2021-03-23 04:39:29","commitOrder":11,"curCode":"    public void shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andStubReturn(singletonList(task00));\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(emptyMap(), emptyMap());\n        assertThat(task00.state(), is(Task.State.CLOSED));\n        assertThat(taskManager.activeTaskMap(), Matchers.anEmptyMap());\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n    }\n","date":"2021-03-23 04:39:29","endLine":837,"groupId":"101970","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/ee261715837dd2363bd8ef051c1d1588778d92.src","preCode":"    public void shouldCloseStandbyUnassignedTasksWhenCreatingNewTasks() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment))).andStubReturn(singletonList(task00));\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(emptyMap(), emptyMap());\n        assertThat(task00.state(), is(Task.State.CLOSED));\n        assertThat(taskManager.activeTaskMap(), Matchers.anEmptyMap());\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":820,"status":"M"},{"authorDate":"2021-03-23 04:39:29","commitOrder":11,"curCode":"    public void shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment)))\n            .andStubReturn(singletonList(task00));\n        expectLastCall();\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(Collections.emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        task00.setCommitNeeded();\n\n        assertThat(taskManager.commitAll(), equalTo(1));\n        assertThat(task00.commitNeeded, is(false));\n    }\n","date":"2021-03-23 04:39:29","endLine":1814,"groupId":"101970","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/ee261715837dd2363bd8ef051c1d1588778d92.src","preCode":"    public void shouldNotCommitOffsetsIfOnlyStandbyTasksAssigned() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, false);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(standbyTaskCreator.createTasks(eq(taskId00Assignment)))\n            .andStubReturn(singletonList(task00));\n        expectLastCall();\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(Collections.emptyMap(), taskId00Assignment);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        task00.setCommitNeeded();\n\n        assertThat(taskManager.commitAll(), equalTo(1));\n        assertThat(task00.commitNeeded, is(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1795,"status":"M"}],"commitId":"80f373d34f7716a54fa9ec1e37a27c65cbbae0f2","commitMessage":"@@@(Cherry-pick) KAFKA-9274: handle TimeoutException on task reset (#10000) (#10372)\n\nThis PR was removed by accident in trunk and 2.8.  bringing it back.\n\nCo-authored-by: Matthias J. Sax <matthias@confluent.io>\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-03-23 04:39:29","modifiedFileCount":"10","status":"M","submitter":"Boyang Chen"}]
