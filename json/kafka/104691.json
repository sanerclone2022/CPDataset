[{"authorTime":"2016-01-05 04:01:58","codes":[{"authorDate":"2016-01-05 04:01:58","commitOrder":2,"curCode":"    public void testAddConnectorByAlias() throws Exception {\n        offsetBackingStore.configure(EasyMock.anyObject(Map.class));\n        EasyMock.expectLastCall();\n        offsetBackingStore.start();\n        EasyMock.expectLastCall();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStatic(Worker.class);\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(ConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        connector.initialize(ctx);\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        offsetBackingStore.stop();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n\n        worker = new Worker(new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.addConnector(config, ctx);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-01-05 04:01:58","endLine":188,"groupId":"19837","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/5e0ce7e7477ce06b5533de78b7c86c44488d37.src","preCode":"    public void testAddConnectorByAlias() throws Exception {\n        offsetBackingStore.configure(EasyMock.anyObject(Map.class));\n        EasyMock.expectLastCall();\n        offsetBackingStore.start();\n        EasyMock.expectLastCall();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStatic(Worker.class);\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(ConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        connector.initialize(ctx);\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        offsetBackingStore.stop();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n\n        worker = new Worker(new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.addConnector(config, ctx);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"},{"authorDate":"2016-01-05 04:01:58","commitOrder":2,"curCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        offsetBackingStore.configure(EasyMock.anyObject(Map.class));\n        EasyMock.expectLastCall();\n        offsetBackingStore.start();\n        EasyMock.expectLastCall();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStatic(Worker.class);\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(ConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        connector.initialize(ctx);\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        offsetBackingStore.stop();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.addConnector(config, ctx);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.addConnector(config, ctx);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-01-05 04:01:58","endLine":325,"groupId":"13131","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/5e0ce7e7477ce06b5533de78b7c86c44488d37.src","preCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        offsetBackingStore.configure(EasyMock.anyObject(Map.class));\n        EasyMock.expectLastCall();\n        offsetBackingStore.start();\n        EasyMock.expectLastCall();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStatic(Worker.class);\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(ConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        connector.initialize(ctx);\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        offsetBackingStore.stop();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.addConnector(config, ctx);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.addConnector(config, ctx);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"MB"}],"commitId":"b93f48f7494e1db4d564b6c28772712ee7681620","commitMessage":"@@@KAFKA-2422: Allow copycat connector plugins to be aliased to simpler names\n\n?names\n\nAuthor: Gwen Shapira <cshapi@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #687 from gwenshap/KAFKA-2422\n","date":"2016-01-05 04:01:58","modifiedFileCount":"5","status":"M","submitter":"Gwen Shapira"},{"authorTime":"2016-02-24 14:47:31","codes":[{"authorDate":"2016-02-24 14:47:31","commitOrder":3,"curCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStaticPartial(Worker.class, \"instantiateConnector\");\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(ConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        connector.initialize(ctx);\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(config, ctx, connectorStatusListener);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-02-24 14:47:31","endLine":194,"groupId":"22121","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/a405e567d2d1eff278e6a62e1c105f49ca03ef.src","preCode":"    public void testAddConnectorByAlias() throws Exception {\n        offsetBackingStore.configure(EasyMock.anyObject(Map.class));\n        EasyMock.expectLastCall();\n        offsetBackingStore.start();\n        EasyMock.expectLastCall();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStatic(Worker.class);\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(ConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        connector.initialize(ctx);\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        offsetBackingStore.stop();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n\n        worker = new Worker(new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.addConnector(config, ctx);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2016-02-24 14:47:31","commitOrder":3,"curCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStaticPartial(Worker.class, \"instantiateConnector\");\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(ConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        connector.initialize(ctx);\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(config, ctx, connectorStatusListener);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(config, ctx, connectorStatusListener);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-02-24 14:47:31","endLine":332,"groupId":"22122","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/a405e567d2d1eff278e6a62e1c105f49ca03ef.src","preCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        offsetBackingStore.configure(EasyMock.anyObject(Map.class));\n        EasyMock.expectLastCall();\n        offsetBackingStore.start();\n        EasyMock.expectLastCall();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStatic(Worker.class);\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(ConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        connector.initialize(ctx);\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        offsetBackingStore.stop();\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.addConnector(config, ctx);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.addConnector(config, ctx);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"}],"commitId":"f7d019ed408fa988129be9af3689bfa4878bc627","commitMessage":"@@@KAFKA-3093: Add Connect status tracking API\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #920 from hachikuji/KAFKA-3093\n","date":"2016-02-24 14:47:31","modifiedFileCount":"28","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-04-21 05:09:59","codes":[{"authorDate":"2016-04-21 05:09:59","commitOrder":4,"curCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStaticPartial(Worker.class, \"instantiateConnector\");\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(ConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(config, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-04-21 05:09:59","endLine":196,"groupId":"4293","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/04c993a2c6eb5172903fb8171f7bc85f14b96b.src","preCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStaticPartial(Worker.class, \"instantiateConnector\");\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(ConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        connector.initialize(ctx);\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(config, ctx, connectorStatusListener);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2016-04-21 05:09:59","commitOrder":4,"curCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStaticPartial(Worker.class, \"instantiateConnector\");\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(ConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(config, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(config, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-04-21 05:09:59","endLine":334,"groupId":"4291","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/04c993a2c6eb5172903fb8171f7bc85f14b96b.src","preCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStaticPartial(Worker.class, \"instantiateConnector\");\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(ConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        connector.initialize(ctx);\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(config, ctx, connectorStatusListener);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(config, ctx, connectorStatusListener);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"}],"commitId":"c9485b78a6e43747daf1314ae9532839fb7bc810","commitMessage":"@@@KAFKA-2370: kafka connect pause/resume API\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Liquan Pei <liquanpei@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1087 from hachikuji/KAFKA-2370\n","date":"2016-04-21 05:09:59","modifiedFileCount":"29","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-05-09 13:26:26","codes":[{"authorDate":"2016-05-09 13:26:26","commitOrder":5,"curCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStaticPartial(Worker.class, \"instantiateConnector\");\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(config, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-05-09 13:26:26","endLine":196,"groupId":"4293","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/4f0253c1e303c512d5b8f94de95d11eb501df6.src","preCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStaticPartial(Worker.class, \"instantiateConnector\");\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(ConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(config, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2016-05-09 13:26:26","commitOrder":5,"curCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStaticPartial(Worker.class, \"instantiateConnector\");\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(config, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(config, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-05-09 13:26:26","endLine":334,"groupId":"4291","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/4f0253c1e303c512d5b8f94de95d11eb501df6.src","preCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStaticPartial(Worker.class, \"instantiateConnector\");\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(ConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(config, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(config, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"}],"commitId":"d1bb2b9df105169c47f16d057c887acb7f8fe818","commitMessage":"@@@KAFKA 3671: Move topics to SinkConnectorConfig\n\nAuthor: Liquan Pei <liquanpei@gmail.com>\n\nReviewers: Dan Norwood <norwood@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1335 from Ishiihara/sink-connector-config\n","date":"2016-05-09 13:26:26","modifiedFileCount":"7","status":"M","submitter":"Liquan Pei"},{"authorTime":"2016-08-27 05:00:16","codes":[{"authorDate":"2016-08-27 05:00:16","commitOrder":6,"curCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(connectorFactory.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), connectorFactory, config, offsetBackingStore);\n        worker.start();\n\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-08-27 05:00:42","endLine":221,"groupId":"6168","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/e29be6499766278af9bb6080ef57edcfa87055.src","preCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStaticPartial(Worker.class, \"instantiateConnector\");\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(config, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2016-08-27 05:00:16","commitOrder":6,"curCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(connectorFactory.newConnector(WorkerTestConnector.class.getName())).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), connectorFactory, config, offsetBackingStore);\n        worker.start();\n\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-08-27 05:00:42","endLine":354,"groupId":"4291","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/e29be6499766278af9bb6080ef57edcfa87055.src","preCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        PowerMock.mockStaticPartial(Worker.class, \"instantiateConnector\");\n        PowerMock.expectPrivate(Worker.class, \"instantiateConnector\", new Object[]{WorkerTestConnector.class}).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), config, offsetBackingStore);\n        worker.start();\n\n        ConnectorConfig config = new ConnectorConfig(props);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(config, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(config, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"}],"commitId":"71f7e7c3a29e8f7339430837065126256907bd2a","commitMessage":"@@@KAFKA-4042: Contain connector & task start/stop failures within the Worker\n\nInvoke the statusListener.onFailure() callback on start failures so that the statusBackingStore is updated. This involved a fix to the putSafe() functionality which prevented any update that was not preceded by a (non-safe) put() from completing.  so here when a connector or task is transitioning directly to FAILED.\n\nWorker start methods can still throw if the same connector name or task ID is already registered with the worker.  as this condition should not happen.\n\nAuthor: Shikhar Bhushan <shikhar@confluent.io>\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1778 from shikhar/distherder-stayup-take4\n","date":"2016-08-27 05:00:42","modifiedFileCount":"11","status":"M","submitter":"Shikhar Bhushan"},{"authorTime":"2017-05-19 01:39:15","codes":[{"authorDate":"2017-05-19 01:39:15","commitOrder":7,"curCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-05-19 01:39:15","endLine":265,"groupId":"10516","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cc/c7e15a4e8db6a3a529425dc3bdd4b91dfb0cf0.src","preCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(connectorFactory.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), connectorFactory, config, offsetBackingStore);\n        worker.start();\n\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"},{"authorDate":"2017-05-19 01:39:15","commitOrder":7,"curCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-05-19 01:39:15","endLine":418,"groupId":"6376","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cc/c7e15a4e8db6a3a529425dc3bdd4b91dfb0cf0.src","preCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(connectorFactory.newConnector(WorkerTestConnector.class.getName())).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), connectorFactory, config, offsetBackingStore);\n        worker.start();\n\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"M"}],"commitId":"45f2261763eac5caaebf860daab32ef5337c9293","commitMessage":"@@@KAFKA-3487: Support classloading isolation in Connect (KIP-146)\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3028 from kkonstantine/KAFKA-3487-Support-classloading-isolation-in-Connect\n","date":"2017-05-19 01:39:15","modifiedFileCount":"26","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2017-10-06 02:23:11","codes":[{"authorDate":"2017-10-06 02:23:11","commitOrder":8,"curCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":297,"groupId":"14448","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/c65df7ff4fa66761652de4c0aaa85b5e3e155f.src","preCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"},{"authorDate":"2017-10-06 02:23:11","commitOrder":8,"curCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":465,"groupId":"435","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/c65df7ff4fa66761652de4c0aaa85b5e3e155f.src","preCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        worker.stopConnector(CONNECTOR_ID);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"}],"commitId":"a47bfbcae050659d32f777ed2f4b26dda5fbdbbd","commitMessage":"@@@KAFKA-5903: Added Connect metrics to the worker and distributed herder (KIP-196)\n\nAdded metrics to the Connect worker and rebalancing metrics to the distributed herder.\n\nThis is built on top of #3987.  and I can rebase this PR once that is merged.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4011 from rhauch/kafka-5903\n","date":"2017-10-06 02:23:11","modifiedFileCount":"13","status":"M","submitter":"Randall Hauch"},{"authorTime":"2017-11-22 08:01:16","codes":[{"authorDate":"2017-10-06 02:23:11","commitOrder":9,"curCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":297,"groupId":"14448","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/c65df7ff4fa66761652de4c0aaa85b5e3e155f.src","preCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"N"},{"authorDate":"2017-11-22 08:01:16","commitOrder":9,"curCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-11-22 08:01:16","endLine":468,"groupId":"435","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/8ccc8f8c76052e0ade345a84e8f28c7bb26e15.src","preCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, 2, Arrays.asList(\"foo\", \"bar\"));\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"}],"commitId":"049342e440a5ca045771f3eb5b4c72d3e52ffac6","commitMessage":"@@@KAFKA-3073: Add topic regex support for Connect sinks\n\nThere are more methods that had to be touched than I anticipated when writing [the KIP](https://cwiki.apache.org/confluence/display/KAFKA/KIP-215%3A+Add+topic+regex+support+for+Connect+sinks).\n\nThe implementation here is now complete and includes a test that verifies that there's a call to `consumer.subscribe(Pattern.  RebalanceHandler)` when `topics.regex` is provided.\n\nAuthor: Jeff Klukas <jeff@klukas.net>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4151 from jklukas/connect-topics.regex\n","date":"2017-11-22 08:01:16","modifiedFileCount":"10","status":"M","submitter":"Jeff Klukas"},{"authorTime":"2018-02-01 02:40:24","codes":[{"authorDate":"2018-02-01 02:40:24","commitOrder":10,"curCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-02-01 02:40:24","endLine":296,"groupId":"14448","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2c/04b88c6d2e717f653733699f86bcbc6508dc4a.src","preCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"},{"authorDate":"2018-02-01 02:40:24","commitOrder":10,"curCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-02-01 02:40:24","endLine":459,"groupId":"435","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2c/04b88c6d2e717f653733699f86bcbc6508dc4a.src","preCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        Connector connector = PowerMock.createMock(Connector.class);\n        ConnectorContext ctx = PowerMock.createMock(ConnectorContext.class);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"M"}],"commitId":"4c48942f9d9e1428e21f934746cb7ce22b3df746","commitMessage":"@@@KAFKA-5142: Add Connect support for message headers (KIP-145)\n\n**[KIP-145](https://cwiki.apache.org/confluence/display/KAFKA/KIP-145+-+Expose+Record+Headers+in+Kafka+Connect) has been accepted.  and this PR implements KIP-145 except without the SMTs.**\n\nChanged the Connect API and runtime to support message headers as described in [KIP-145](https://cwiki.apache.org/confluence/display/KAFKA/KIP-145+-+Expose+Record+Headers+in+Kafka+Connect).\n\nThe new `Header` interface defines an immutable representation of a Kafka header (key-value pair) with support for the Connect value types and schemas. This interface provides methods for easily converting between many of the built-in primitive.  structured.  and logical data types.\n\nThe new `Headers` interface defines an ordered collection of headers and is used to track all headers associated with a `ConnectRecord` (and thus `SourceRecord` and `SinkRecord`). This does allow multiple headers with the same key. The `Headers` contains methods for adding.  removing.  finding.  and modifying headers. Convenience methods allow connectors and transforms to easily use and modify the headers for a record.\n\nA new `HeaderConverter` interface is also defined to enable the Connect runtime framework to be able to serialize and deserialize headers between the in-memory representation and Kafka?s byte[] representation. A new `SimpleHeaderConverter` implementation has been added.  and this serializes to strings and deserializes by inferring the schemas (`Struct` header values are serialized without the schemas.  so they can only be deserialized as `Map` instances without a schema.) The `StringConverter`.  `JsonConverter`.  and `ByteArrayConverter` have all been extended to also be `HeaderConverter` implementations. Each connector can be configured with a different header converter.  although by default the `SimpleHeaderConverter` is used to serialize header values as strings without schemas.\n\nUnit and integration tests are added for `ConnectHeader` and `ConnectHeaders`.  the two implementation classes for headers. Additional test methods are added for the methods added to the `Converter` implementations. Finally.  the `ConnectRecord` object is already used heavily.  so only limited tests need to be added while quite a few of the existing tests already cover the changes.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Arjun Satish <arjun@confluent.io>.  Ted Yu <yuzhihong@gmail.com>.  Magesh Nandakumar <magesh.n.kumar@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4319 from rhauch/kafka-5142-b\n","date":"2018-02-01 02:40:24","modifiedFileCount":"21","status":"M","submitter":"Randall Hauch"},{"authorTime":"2018-02-10 07:44:55","codes":[{"authorDate":"2018-02-10 07:44:55","commitOrder":11,"curCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-02-10 07:47:44","endLine":306,"groupId":"14448","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f0/62436f0e01d90fe39df1a2eb81c811ec28a66b.src","preCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2018-02-10 07:44:55","commitOrder":11,"curCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-02-10 07:47:44","endLine":469,"groupId":"435","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f0/62436f0e01d90fe39df1a2eb81c811ec28a66b.src","preCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(EasyMock.anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":385,"status":"M"}],"commitId":"976a3b0cc858d4a13cf8b34b325aefc8d706be9e","commitMessage":"@@@KAFKA-6513: Corrected how Converters and HeaderConverters are instantiated and configured\n\nThe commits for KIP-145 (KAFKA-5142) changed how the Connect workers instantiate and configure the Converters.  and also added the ability to do the same for the new HeaderConverters. However.  the last few commits removed the default value for the `converter.type` property for Converters and HeaderConverters.  and this broke how the internal converters were being created.\n\nThis change corrects the behavior so that the `converter.type` property is always set by the worker (or by the Plugins class).  which means the existing Converter implementations will not have to do this. The built-in JsonConverter.  ByteArrayConverter.  and StringConverter also implement HeaderConverter which implements Configurable.  but the Worker and Plugins methods do not yet use the `Configurable.configure(Map)` method and instead still use the `Converter.configure(Map. boolean)`.\n\nSeveral tests were modified.  and a new PluginsTest was added to verify the new behavior in Plugins for instantiating and configuring the Converter and HeaderConverter instances.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4512 from rhauch/kafka-6513\n","date":"2018-02-10 07:47:44","modifiedFileCount":"6","status":"M","submitter":"Randall Hauch"},{"authorTime":"2018-11-08 00:23:19","codes":[{"authorDate":"2018-11-08 00:23:19","commitOrder":12,"curCode":"    public void testAddConnectorByAlias() {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-11-08 00:23:19","endLine":309,"groupId":"14448","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4d/d560a63e1be7bc27c3b3f3db942195231bb4b7.src","preCode":"    public void testAddConnectorByAlias() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"},{"authorDate":"2018-11-08 00:23:19","commitOrder":12,"curCode":"    public void testReconfigureConnectorTasks() {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-11-08 00:23:19","endLine":472,"groupId":"435","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4d/d560a63e1be7bc27c3b3f3db942195231bb4b7.src","preCode":"    public void testReconfigureConnectorTasks() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"M"}],"commitId":"8abbf33b5978b93354ae35c5e21c474816c9cc76","commitMessage":"@@@KAFKA-7431: Clean up connect unit tests\n\n[KAFKA-7431](https://issues.apache.org/jira/browse/KAFKA-7431)\n\nChanges made to improve the code readability:\n - Removed `throws Exception` from the place where there won't be an\n exception\n - Removed type arguments where those can be inferred explicitly by compiler\n - Rewritten Anonymous classes to Java 8 with lambdas\n\nAuthor: Srinivas Reddy <mrsrinivas@users.noreply.github.com>\nAuthor: Srinivas Reddy <srinivas96alluri@gmail.com>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ismael Juma <ismael@juma.me.uk>.  Ryanne Dolan <ryannedolan@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #5681 from mrsrinivas/cleanup-connect-uts\n","date":"2018-11-08 00:23:19","modifiedFileCount":"17","status":"M","submitter":"Srinivas Reddy"},{"authorTime":"2019-05-17 16:37:32","codes":[{"authorDate":"2019-05-17 16:37:32","commitOrder":13,"curCode":"    public void testAddConnectorByAlias() {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-05-17 16:37:32","endLine":341,"groupId":"14448","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9c/b83eb5e87714874f25ed2b293e47e6b790a02f.src","preCode":"    public void testAddConnectorByAlias() {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"},{"authorDate":"2019-05-17 16:37:32","commitOrder":13,"curCode":"    public void testReconfigureConnectorTasks() {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-05-17 16:37:32","endLine":504,"groupId":"2231","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9c/b83eb5e87714874f25ed2b293e47e6b790a02f.src","preCode":"    public void testReconfigureConnectorTasks() {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":420,"status":"M"}],"commitId":"2e91a310d7bf9e7d4d46b0bc0ca0c11cb4531e10","commitMessage":"@@@KAFKA-8265: Initial implementation for ConnectorClientConfigPolicy to enable overrides (KIP-458) (#6624)\n\nImplementation to enable policy for Connector Client config overrides. This is\nimplemented per the KIP-458.\n\nReviewers: Randall Hauch <rhauch@gmail.com>","date":"2019-05-17 16:37:32","modifiedFileCount":"22","status":"M","submitter":"Magesh Nandakumar"},{"authorTime":"2020-01-30 13:54:21","codes":[{"authorDate":"2020-01-30 13:54:21","commitOrder":14,"curCode":"    public void testAddConnectorByAlias() {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-01-30 13:54:21","endLine":351,"groupId":"14448","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/16/a0a765ac9fa7e29dd8ec161b0f9b59668c460f.src","preCode":"    public void testAddConnectorByAlias() {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"},{"authorDate":"2020-01-30 13:54:21","commitOrder":14,"curCode":"    public void testReconfigureConnectorTasks() {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-01-30 13:54:21","endLine":517,"groupId":"2231","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/16/a0a765ac9fa7e29dd8ec161b0f9b59668c460f.src","preCode":"    public void testReconfigureConnectorTasks() {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"}],"commitId":"7746301c2643e0037bff3bcb84c41d512937e4c9","commitMessage":"@@@KAFKA-9422: Track the set of topics a connector is using (KIP-558) (#8017)\n\nThis feature corresponds to KIP-558 and extends how the internal status topic (set via `status.storage.topic` distributed worker config) is used to include information that allows Kafka Connect to keep track which topics a connector is using.\n\nThe set of topics a connector is actively using.  is exposed via a new endpoint that is added to the REST API of Connect workers.\n* A `GET /connectors/{name}/topics` request will return the set of topics that have been recorded as active since a connector started or since the set of topics was reset for this connector.\n\nAn additional endpoints allows users to reset the set of active topics for a connector via the second endpoint that this feature is adding:\n* A `PUT /connectors/{name}/topics/reset` request clears the set of active topics. An operator may enable or disable this feature by setting `topic.tracking.enable` (true by default).\n\nThe `topic.tracking.enable` worker config property (true by default) allows an operator to enable/disable the entire feature. Or if the feature is enabled.  the `topic.tracking.allow.reset` worker config property (true by default) allows an operator to control whether reset requests submitted to the Connect REST API are allowed.\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\nReviewer: Randall Hauch <rhauch@gmail.com>","date":"2020-01-30 13:54:21","modifiedFileCount":"17","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2020-05-01 01:33:10","codes":[{"authorDate":"2020-05-01 01:33:10","commitOrder":15,"curCode":"    public void testAddConnectorByAlias() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-01 01:33:10","endLine":373,"groupId":"14448","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/8c0bccaffd3155860b183e57fb194c0ae41592.src","preCode":"    public void testAddConnectorByAlias() {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"},{"authorDate":"2020-05-01 01:33:10","commitOrder":15,"curCode":"    public void testReconfigureConnectorTasks() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-01 01:33:10","endLine":542,"groupId":"2231","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/8c0bccaffd3155860b183e57fb194c0ae41592.src","preCode":"    public void testReconfigureConnectorTasks() {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":456,"status":"M"}],"commitId":"f92cc85c9f018f353da69a24d950bc281f721781","commitMessage":"@@@KAFKA-9633: Ensure ConfigProviders are closed (#8204)\n\nConfigProvider extends Closeable.  but were not closed in the following contexts:\n* AbstractConfig\n* WorkerConfigTransformer\n* Worker\n\nThis commit ensures that ConfigProviders are close in the above contexts. \n\nIt also adds MockFileConfigProvider.assertClosed()\nGradle executes test classes concurrently.  so MockFileConfigProvider\ncan't simply use a static field to hold its closure state.\nInstead use a protocol whereby the MockFileConfigProvider is configured\nwith some unique ket identifying the test which also used when calling\nassertClosed().\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>","date":"2020-05-01 01:33:10","modifiedFileCount":"6","status":"M","submitter":"Tom Bentley"},{"authorTime":"2020-05-25 09:09:54","codes":[{"authorDate":"2020-05-25 09:09:54","commitOrder":16,"curCode":"    public void testAddConnectorByAlias() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(sinkConnector);\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(sinkConnector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        sinkConnector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        sinkConnector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        sinkConnector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-25 09:09:54","endLine":375,"groupId":"14448","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/fb6758f57f6da979f195d09612dd7b0b749c66.src","preCode":"    public void testAddConnectorByAlias() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"},{"authorDate":"2020-05-25 09:09:54","commitOrder":16,"curCode":"    public void testReconfigureConnectorTasks() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(sinkConnector);\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(sinkConnector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        sinkConnector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        sinkConnector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(sinkConnector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(sinkConnector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        sinkConnector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-25 09:09:54","endLine":544,"groupId":"2231","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/fb6758f57f6da979f195d09612dd7b0b749c66.src","preCode":"    public void testReconfigureConnectorTasks() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(connector);\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(connector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(connector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        connector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        connector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(connector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(connector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        connector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":458,"status":"M"}],"commitId":"3818770d7fcd6ccdd373cdcd3aa6952ea08c901c","commitMessage":"@@@KAFKA-4794: Add access to OffsetStorageReader from SourceConnector (#2604)\n\nAdded access to OffsetStorageReader from SourceConnector per KIP-131. \n\nAdded two interfaces SinkConnectorContext/SourceConnectContext that extend ConnectorContext in order to expose an OffsetStorageReader instance.\n\nAdded unit tests for Connector.  SinkConnector and SourceConnector default methods\n\nAuthor: Florian Hussonnois <florian.hussonnois@gmail.com>.  Randall Hauch <rhauch@gmail.com>\nReviewers: Randall Hauch <rhauch@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>","date":"2020-05-25 09:09:54","modifiedFileCount":"7","status":"M","submitter":"Florian Hussonnois"},{"authorTime":"2020-05-27 13:07:34","codes":[{"authorDate":"2020-05-27 13:07:34","commitOrder":17,"curCode":"    public void testAddConnectorByAlias() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(sourceConnector);\n        EasyMock.expect(sourceConnector.version()).andReturn(\"1.0\");\n\n        connectorProps.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(sourceConnector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(sourceConnector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        sourceConnector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        sourceConnector.start(connectorProps);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        sourceConnector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-27 13:07:34","endLine":372,"groupId":"14448","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e3/2fcb0d9cefb7b57f4b49865ecaf1d4ed5393bc.src","preCode":"    public void testAddConnectorByAlias() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(sinkConnector);\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(sinkConnector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        sinkConnector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        sinkConnector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        sinkConnector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"M"},{"authorDate":"2020-05-27 13:07:34","commitOrder":17,"curCode":"    public void testReconfigureConnectorTasks() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(sinkConnector);\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n\n        connectorProps.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        connectorProps.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(sinkConnector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        sinkConnector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        sinkConnector.start(connectorProps);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(sinkConnector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(sinkConnector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        sinkConnector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(connectorProps);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-27 13:07:34","endLine":534,"groupId":"2231","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e3/2fcb0d9cefb7b57f4b49865ecaf1d4ed5393bc.src","preCode":"    public void testReconfigureConnectorTasks() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(sinkConnector);\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n\n        Map<String, String> props = new HashMap<>();\n        props.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        props.put(ConnectorConfig.TASKS_MAX_CONFIG, \"1\");\n        props.put(ConnectorConfig.NAME_CONFIG, CONNECTOR_ID);\n        props.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(sinkConnector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        sinkConnector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        sinkConnector.start(props);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(sinkConnector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(sinkConnector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        sinkConnector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, props, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(props);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"}],"commitId":"371f14c3c12d2e341ac96bd52393b43a10acfa84","commitMessage":"@@@KAFKA-5295: Allow source connectors to specify topic-specific settings for new topics (KIP-158) (#8722)\n\nKafka Connect workers have been able to create Connect's internal topics using the new admin client for some time now (see KAFKA-4667 for details). However.  tasks of source connectors are still relying upon the broker to auto-create topics with default config settings if they don't exist.  or expect these topics to exist before the connector is deployed.  if their configuration needs to be specialized. \n\nWith the implementation of KIP-158 here.  if `topic.creation.enable=true`.  Kafka Connect will supply the source tasks of connectors that are configured to create topics with an admin client that will allow them to create new topics on-the-fly before writing the first source records to a new topic. Additionally.  each source connector has the opportunity to customize the topic-specific settings of these new topics by defining groups of topic configurations. \n\nThis feature is tested here via unit tests (old tests that have been adjusted and new ones) as well as integration tests.\n\nReviewers: Randall Hauch <rhauch@gmail.com>","date":"2020-05-27 13:07:34","modifiedFileCount":"23","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2020-05-28 09:18:36","codes":[{"authorDate":"2020-05-28 09:18:36","commitOrder":18,"curCode":"    public void testAddConnectorByAlias() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(sourceConnector);\n        EasyMock.expect(sourceConnector.version()).andReturn(\"1.0\");\n\n        connectorProps.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(sourceConnector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(sourceConnector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        sourceConnector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        sourceConnector.start(connectorProps);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        sourceConnector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n        expectClusterId();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-28 09:18:36","endLine":386,"groupId":"14448","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/ab58f11c3e1da38f9598cd20e229fb716da953.src","preCode":"    public void testAddConnectorByAlias() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(sourceConnector);\n        EasyMock.expect(sourceConnector.version()).andReturn(\"1.0\");\n\n        connectorProps.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(sourceConnector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(sourceConnector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        sourceConnector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        sourceConnector.start(connectorProps);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        sourceConnector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"},{"authorDate":"2020-05-28 09:18:36","commitOrder":18,"curCode":"    public void testReconfigureConnectorTasks() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(sinkConnector);\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n\n        connectorProps.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        connectorProps.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(sinkConnector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        sinkConnector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        sinkConnector.start(connectorProps);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(sinkConnector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(sinkConnector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        sinkConnector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n        expectClusterId();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(connectorProps);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-28 09:18:36","endLine":551,"groupId":"2231","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/ab58f11c3e1da38f9598cd20e229fb716da953.src","preCode":"    public void testReconfigureConnectorTasks() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(sinkConnector);\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n\n        connectorProps.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        connectorProps.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(sinkConnector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        sinkConnector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        sinkConnector.start(connectorProps);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(sinkConnector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(sinkConnector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        sinkConnector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(connectorProps);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":467,"status":"M"}],"commitId":"9c833f665f349e5c292228f75188f5521282835d","commitMessage":"@@@KAFKA-9960: implement KIP-606 to add metadata context to MetricsReporter (#8691)\n\nImplemented KIP-606 to add metadata context to MetricsReporter.\n\nAuthor: Xiaodong Du <xdu@confluent.io>\nReviewers: David Arthur <mumrah@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Xavier L?aut? <xavier@confluent.io>.  Ryan Pridgeon <ryan.n.pridgeon@gmail.com>","date":"2020-05-28 09:18:36","modifiedFileCount":"35","status":"M","submitter":"xiaodongdu"},{"authorTime":"2020-06-11 16:29:23","codes":[{"authorDate":"2020-06-11 16:29:23","commitOrder":19,"curCode":"    public void testAddConnectorByAlias() throws Throwable {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        final String connectorAlias = \"WorkerTestConnector\";\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(connectorAlias)).andReturn(pluginLoader);\n        EasyMock.expect(plugins.newConnector(connectorAlias)).andReturn(sinkConnector);\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n\n        connectorProps.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, connectorAlias);\n        connectorProps.put(SinkConnectorConfig.TOPICS_CONFIG, \"gfieyls, wfru\");\n\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader))\n                .andReturn(delegatingLoader)\n                .times(3);\n        sinkConnector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        sinkConnector.start(connectorProps);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        sinkConnector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        ctx.close();\n        expectLastCall();\n\n        expectStopStorage();\n        expectClusterId();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        FutureCallback<TargetState> onStart = new FutureCallback<>();\n        worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED, onStart);\n        \r\n        assertEquals(TargetState.STARTED, onStart.get(1000, TimeUnit.MILLISECONDS));\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopAndAwaitConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-11 16:29:23","endLine":423,"groupId":"104691","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddConnectorByAlias","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/933a7c3c9c2cacdcc9b5d16aab0b987b91a487.src","preCode":"    public void testAddConnectorByAlias() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        EasyMock.expect(plugins.newConnector(\"WorkerTestConnector\")).andReturn(sourceConnector);\n        EasyMock.expect(sourceConnector.version()).andReturn(\"1.0\");\n\n        connectorProps.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, \"WorkerTestConnector\");\n\n        EasyMock.expect(sourceConnector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(sourceConnector))\n                .andReturn(delegatingLoader)\n                .times(2);\n        sourceConnector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        sourceConnector.start(connectorProps);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(2);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        sourceConnector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n        expectClusterId();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"M"},{"authorDate":"2020-06-11 16:29:23","commitOrder":19,"curCode":"    public void testReconfigureConnectorTasks() throws Throwable {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        final String connectorClass = WorkerTestConnector.class.getName();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader).times(1);\n        EasyMock.expect(delegatingLoader.connectorLoader(connectorClass)).andReturn(pluginLoader);\n        EasyMock.expect(plugins.newConnector(connectorClass))\n                .andReturn(sinkConnector);\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n\n        connectorProps.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        connectorProps.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, connectorClass);\n\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader))\n                .andReturn(delegatingLoader)\n                .times(4);\n        sinkConnector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        sinkConnector.start(connectorProps);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(4);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(sinkConnector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(sinkConnector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        sinkConnector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        ctx.close();\n        expectLastCall();\n\n        expectStopStorage();\n        expectClusterId();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        FutureCallback<TargetState> onFirstStart = new FutureCallback<>();\n        worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED, onFirstStart);\n        \r\n        assertEquals(TargetState.STARTED, onFirstStart.get(1000, TimeUnit.MILLISECONDS));\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n\n        FutureCallback<TargetState> onSecondStart = new FutureCallback<>();\n        worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED, onSecondStart);\n        try {\n            onSecondStart.get(0, TimeUnit.MILLISECONDS);\n            fail(\"Should have failed while trying to start second connector with same name\");\n        } catch (ExecutionException e) {\n            assertThat(e.getCause(), instanceOf(ConnectException.class));\n        }\n\n        Map<String, String> connProps = new HashMap<>(connectorProps);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopAndAwaitConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-11 16:29:23","endLine":613,"groupId":"104691","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigureConnectorTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/933a7c3c9c2cacdcc9b5d16aab0b987b91a487.src","preCode":"    public void testReconfigureConnectorTasks() {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(3);\n        EasyMock.expect(plugins.newConnector(WorkerTestConnector.class.getName()))\n                .andReturn(sinkConnector);\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n\n        connectorProps.put(SinkConnectorConfig.TOPICS_CONFIG, \"foo,bar\");\n        connectorProps.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG, WorkerTestConnector.class.getName());\n\n        EasyMock.expect(sinkConnector.version()).andReturn(\"1.0\");\n        EasyMock.expect(plugins.compareAndSwapLoaders(sinkConnector))\n                .andReturn(delegatingLoader)\n                .times(3);\n        sinkConnector.initialize(anyObject(ConnectorContext.class));\n        EasyMock.expectLastCall();\n        sinkConnector.start(connectorProps);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader))\n                .andReturn(pluginLoader)\n                .times(3);\n\n        connectorStatusListener.onStartup(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        \r\n        EasyMock.<Class<? extends Task>>expect(sinkConnector.taskClass()).andReturn(TestSourceTask.class);\n        Map<String, String> taskProps = new HashMap<>();\n        taskProps.put(\"foo\", \"bar\");\n        EasyMock.expect(sinkConnector.taskConfigs(2)).andReturn(Arrays.asList(taskProps, taskProps));\n\n        \r\n        sinkConnector.stop();\n        EasyMock.expectLastCall();\n\n        connectorStatusListener.onShutdown(CONNECTOR_ID);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n        expectClusterId();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 1, 0);\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_ID)), worker.connectorNames());\n        try {\n            worker.startConnector(CONNECTOR_ID, connectorProps, ctx, connectorStatusListener, TargetState.STARTED);\n            fail(\"Should have thrown exception when trying to add connector with same name.\");\n        } catch (ConnectException e) {\n            \r\n        }\n        Map<String, String> connProps = new HashMap<>(connectorProps);\n        connProps.put(ConnectorConfig.TASKS_MAX_CONFIG, \"2\");\n        ConnectorConfig connConfig = new SinkConnectorConfig(plugins, connProps);\n        List<Map<String, String>> taskConfigs = worker.connectorTaskConfigs(CONNECTOR_ID, connConfig);\n        Map<String, String> expectedTaskProps = new HashMap<>();\n        expectedTaskProps.put(\"foo\", \"bar\");\n        expectedTaskProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        expectedTaskProps.put(SinkTask.TOPICS_CONFIG, \"foo,bar\");\n        assertEquals(2, taskConfigs.size());\n        assertEquals(expectedTaskProps, taskConfigs.get(0));\n        assertEquals(expectedTaskProps, taskConfigs.get(1));\n        assertStatistics(worker, 1, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        worker.stopConnector(CONNECTOR_ID);\n        assertStatistics(worker, 0, 0);\n        assertStartupStatistics(worker, 1, 0, 0, 0);\n        assertEquals(Collections.emptySet(), worker.connectorNames());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"M"}],"commitId":"7f4fc76e968a6b2cf4a73364c93bfdea03f81af3","commitMessage":"@@@KAFKA-9374: Make connector interactions asynchronous (#8069)\n\nThese changes allow herders to continue to function even when a connector they are running hangs in its start.  stop.  initialize.  validate.  and/or config methods.\n\nThe main idea is to make these connector interactions asynchronous and accept a callback that can be invoked upon the completion (successful or otherwise) of these interactions. The distributed herder handles any follow-up logic by adding a new herder request to its queue in that callback.  which helps preserve some synchronization and ordering guarantees provided by the current tick model.\n\nIf any connector refuses to shut down within a graceful timeout period.  the framework will abandon it and potentially start a new connector in its place (in cases such as connector restart or reconfiguration).\n\nExisting unit tests for the distributed herder and worker have been modified to reflect these changes.  and a new integration test named `BlockingConnectorTest` has been added to ensure that they work in practice.\n\nReviewers: Greg Harris <gregh@confluent.io>.  Nigel Liang <nigel@nigelliang.com>.  Randall Hauch <rhauch@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>","date":"2020-06-11 16:29:23","modifiedFileCount":"18","status":"M","submitter":"Chris Egerton"}]
