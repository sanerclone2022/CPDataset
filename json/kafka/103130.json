[{"authorTime":"2019-10-17 13:29:33","codes":[{"authorDate":"2019-10-17 13:29:33","commitOrder":1,"curCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 3) {\n            System.err.println(\"StreamsUpgradeTest requires three argument (kafka-url, zookeeper-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] + \" \" : \"\")\n                + (args.length > 1 ? args[1] : \"\"));\n        }\n        final String zookeeper = args[1];\n        final String propFileName = args.length > 2 ? args[2] : null;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final Properties config = new Properties();\n\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v0.10.1)\");\n        System.out.println(\"zookeeper=\" + zookeeper);\n        System.out.println(\"props=\" + config);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.setProperty(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG, zookeeper);\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = config.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = config.getProperty(\"sink.topic\", \"sink\");\n        final int reportInterval = Integer.parseInt(config.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = config.getProperty(\"upgrade.phase\",  \"\");\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final KStream<String, String> upgradeStream = builder.stream(sourceTopic);\n        upgradeStream.foreach(new ForeachAction<String, String>() {\n            int recordCounter = 0;\n\n            @Override\n            public void apply(final String key, final String value) {\n                if (recordCounter++ % reportInterval == 0) {\n                    System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                    System.out.flush();\n                }\n            }\n        }\n        );\n        upgradeStream.to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder, config);\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","date":"2019-10-17 13:29:33","endLine":88,"groupId":"15146","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/70/ad666362979322df80e5d6375611117bf8e629.src","preCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 3) {\n            System.err.println(\"StreamsUpgradeTest requires three argument (kafka-url, zookeeper-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] + \" \" : \"\")\n                + (args.length > 1 ? args[1] : \"\"));\n        }\n        final String zookeeper = args[1];\n        final String propFileName = args.length > 2 ? args[2] : null;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final Properties config = new Properties();\n\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v0.10.1)\");\n        System.out.println(\"zookeeper=\" + zookeeper);\n        System.out.println(\"props=\" + config);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.setProperty(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG, zookeeper);\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = config.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = config.getProperty(\"sink.topic\", \"sink\");\n        final int reportInterval = Integer.parseInt(config.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = config.getProperty(\"upgrade.phase\",  \"\");\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final KStream<String, String> upgradeStream = builder.stream(sourceTopic);\n        upgradeStream.foreach(new ForeachAction<String, String>() {\n            int recordCounter = 0;\n\n            @Override\n            public void apply(final String key, final String value) {\n                if (recordCounter++ % reportInterval == 0) {\n                    System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                    System.out.flush();\n                }\n            }\n        }\n        );\n        upgradeStream.to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder, config);\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","realPath":"streams/upgrade-system-tests-0101/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"},{"authorDate":"2019-10-17 13:29:33","commitOrder":1,"curCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 3) {\n            System.err.println(\"StreamsUpgradeTest requires three argument (kafka-url, zookeeper-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] + \" \" : \"\")\n                + (args.length > 1 ? args[1] : \"\"));\n        }\n\n        final String zookeeper = args[1];\n        final String propFileName = args.length > 2 ? args[2] : null;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final Properties config = new Properties();\n\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v0.10.0)\");\n        System.out.println(\"zookeeper=\" + zookeeper);\n        System.out.println(\"props=\" + config);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.setProperty(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG, zookeeper);\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = config.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = config.getProperty(\"sink.topic\", \"sink\");\n        final int reportInterval = Integer.parseInt(config.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = config.getProperty(\"upgrade.phase\",  \"\");\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final KStream<String, String> upgradeStream = builder.stream(sourceTopic);\n        upgradeStream.foreach(new ForeachAction<String, String>() {\n            int recordCounter = 0;\n\n            @Override\n            public void apply(final String key, final String value) {\n                if (recordCounter++ % reportInterval == 0) {\n                    System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                    System.out.flush();\n                }\n            }\n        }\n        );\n        upgradeStream.to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder, config);\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","date":"2019-10-17 13:29:33","endLine":89,"groupId":"15146","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/da/63d9a61ad2df713cd7e1929b41a97faabf2c2b.src","preCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 3) {\n            System.err.println(\"StreamsUpgradeTest requires three argument (kafka-url, zookeeper-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] + \" \" : \"\")\n                + (args.length > 1 ? args[1] : \"\"));\n        }\n\n        final String zookeeper = args[1];\n        final String propFileName = args.length > 2 ? args[2] : null;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final Properties config = new Properties();\n\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v0.10.0)\");\n        System.out.println(\"zookeeper=\" + zookeeper);\n        System.out.println(\"props=\" + config);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.setProperty(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG, zookeeper);\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = config.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = config.getProperty(\"sink.topic\", \"sink\");\n        final int reportInterval = Integer.parseInt(config.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = config.getProperty(\"upgrade.phase\",  \"\");\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final KStream<String, String> upgradeStream = builder.stream(sourceTopic);\n        upgradeStream.foreach(new ForeachAction<String, String>() {\n            int recordCounter = 0;\n\n            @Override\n            public void apply(final String key, final String value) {\n                if (recordCounter++ % reportInterval == 0) {\n                    System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                    System.out.flush();\n                }\n            }\n        }\n        );\n        upgradeStream.to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder, config);\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","realPath":"streams/upgrade-system-tests-0100/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"B"}],"commitId":"b62f2a1123612af30d29140efa6d3e89091f87dc","commitMessage":"@@@KAFKA-8496: System test for KIP-429 upgrades and compatibility (#7529)\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-10-17 13:29:33","modifiedFileCount":"1","status":"B","submitter":"Bill Bejeck"},{"authorTime":"2019-10-21 22:51:15","codes":[{"authorDate":"2019-10-21 22:51:15","commitOrder":2,"curCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires two arguments (zookeeper-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] : \"\"));\n        }\n        final String zookeeper = args[0];\n        final String propFileName = args[1];\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final Properties config = new Properties();\n\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v0.10.1)\");\n        System.out.println(\"zookeeper=\" + zookeeper);\n        System.out.println(\"props=\" + config);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.setProperty(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG, zookeeper);\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = config.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = config.getProperty(\"sink.topic\", \"sink\");\n        final int reportInterval = Integer.parseInt(config.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = config.getProperty(\"upgrade.phase\",  \"\");\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final KStream<String, String> upgradeStream = builder.stream(sourceTopic);\n        upgradeStream.foreach(new ForeachAction<String, String>() {\n            int recordCounter = 0;\n\n            @Override\n            public void apply(final String key, final String value) {\n                if (recordCounter++ % reportInterval == 0) {\n                    System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                    System.out.flush();\n                }\n            }\n        }\n        );\n        upgradeStream.to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder, config);\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","date":"2019-10-21 22:51:15","endLine":87,"groupId":"15146","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/2c84fa8e462f0b18a13d4ee3c840852a3d1a6a.src","preCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 3) {\n            System.err.println(\"StreamsUpgradeTest requires three argument (kafka-url, zookeeper-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] + \" \" : \"\")\n                + (args.length > 1 ? args[1] : \"\"));\n        }\n        final String zookeeper = args[1];\n        final String propFileName = args.length > 2 ? args[2] : null;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final Properties config = new Properties();\n\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v0.10.1)\");\n        System.out.println(\"zookeeper=\" + zookeeper);\n        System.out.println(\"props=\" + config);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.setProperty(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG, zookeeper);\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = config.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = config.getProperty(\"sink.topic\", \"sink\");\n        final int reportInterval = Integer.parseInt(config.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = config.getProperty(\"upgrade.phase\",  \"\");\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final KStream<String, String> upgradeStream = builder.stream(sourceTopic);\n        upgradeStream.foreach(new ForeachAction<String, String>() {\n            int recordCounter = 0;\n\n            @Override\n            public void apply(final String key, final String value) {\n                if (recordCounter++ % reportInterval == 0) {\n                    System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                    System.out.flush();\n                }\n            }\n        }\n        );\n        upgradeStream.to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder, config);\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","realPath":"streams/upgrade-system-tests-0101/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2019-10-21 22:51:15","commitOrder":2,"curCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires two arguments (zookeeper-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] : \"\"));\n        }\n\n        final String zookeeper = args[0];\n        final String propFileName = args[1];\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final Properties config = new Properties();\n\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v0.10.0)\");\n        System.out.println(\"zookeeper=\" + zookeeper);\n        System.out.println(\"props=\" + config);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.setProperty(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG, zookeeper);\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = config.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = config.getProperty(\"sink.topic\", \"sink\");\n        final int reportInterval = Integer.parseInt(config.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = config.getProperty(\"upgrade.phase\",  \"\");\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final KStream<String, String> upgradeStream = builder.stream(sourceTopic);\n        upgradeStream.foreach(new ForeachAction<String, String>() {\n            int recordCounter = 0;\n\n            @Override\n            public void apply(final String key, final String value) {\n                if (recordCounter++ % reportInterval == 0) {\n                    System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                    System.out.flush();\n                }\n            }\n        }\n        );\n        upgradeStream.to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder, config);\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","date":"2019-10-21 22:51:15","endLine":88,"groupId":"15146","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/f9ac19dd06af3d22027ad754737cf2464a2522.src","preCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 3) {\n            System.err.println(\"StreamsUpgradeTest requires three argument (kafka-url, zookeeper-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] + \" \" : \"\")\n                + (args.length > 1 ? args[1] : \"\"));\n        }\n\n        final String zookeeper = args[1];\n        final String propFileName = args.length > 2 ? args[2] : null;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final Properties config = new Properties();\n\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v0.10.0)\");\n        System.out.println(\"zookeeper=\" + zookeeper);\n        System.out.println(\"props=\" + config);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.setProperty(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG, zookeeper);\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = config.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = config.getProperty(\"sink.topic\", \"sink\");\n        final int reportInterval = Integer.parseInt(config.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = config.getProperty(\"upgrade.phase\",  \"\");\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final KStream<String, String> upgradeStream = builder.stream(sourceTopic);\n        upgradeStream.foreach(new ForeachAction<String, String>() {\n            int recordCounter = 0;\n\n            @Override\n            public void apply(final String key, final String value) {\n                if (recordCounter++ % reportInterval == 0) {\n                    System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                    System.out.flush();\n                }\n            }\n        }\n        );\n        upgradeStream.to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder, config);\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","realPath":"streams/upgrade-system-tests-0100/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"}],"commitId":"6afe05fe896af3b646d79ff6ec3056e04656d2e7","commitMessage":"@@@MINOR: system test clean up (#7552)\n\nGuozhang Wang <wangguoz@gmail.com>.  Sophie Blee-Goldman <sophie@confluent.io>. ","date":"2019-10-21 22:51:15","modifiedFileCount":"10","status":"M","submitter":"Bill Bejeck"},{"authorTime":"2021-05-22 06:05:39","codes":[{"authorDate":"2021-05-22 06:05:39","commitOrder":3,"curCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires two arguments (zookeeper-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] : \"\"));\n        }\n        final String zookeeper = args[0];\n        final String propFileName = args[1];\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final Properties config = new Properties();\n\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v0.10.1)\");\n        System.out.println(\"zookeeper=\" + zookeeper);\n        System.out.println(\"props=\" + config);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.setProperty(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG, zookeeper);\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000L);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = config.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = config.getProperty(\"sink.topic\", \"sink\");\n        final int reportInterval = Integer.parseInt(config.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = config.getProperty(\"upgrade.phase\",  \"\");\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final KStream<String, String> upgradeStream = builder.stream(sourceTopic);\n        upgradeStream.foreach(new ForeachAction<String, String>() {\n            int recordCounter = 0;\n\n            @Override\n            public void apply(final String key, final String value) {\n                if (recordCounter++ % reportInterval == 0) {\n                    System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                    System.out.flush();\n                }\n            }\n        }\n        );\n        upgradeStream.to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder, config);\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","date":"2021-05-22 06:05:39","endLine":87,"groupId":"103130","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/339b64f404ab758bf8d9856804719a25ff90ac.src","preCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires two arguments (zookeeper-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] : \"\"));\n        }\n        final String zookeeper = args[0];\n        final String propFileName = args[1];\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final Properties config = new Properties();\n\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v0.10.1)\");\n        System.out.println(\"zookeeper=\" + zookeeper);\n        System.out.println(\"props=\" + config);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.setProperty(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG, zookeeper);\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = config.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = config.getProperty(\"sink.topic\", \"sink\");\n        final int reportInterval = Integer.parseInt(config.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = config.getProperty(\"upgrade.phase\",  \"\");\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final KStream<String, String> upgradeStream = builder.stream(sourceTopic);\n        upgradeStream.foreach(new ForeachAction<String, String>() {\n            int recordCounter = 0;\n\n            @Override\n            public void apply(final String key, final String value) {\n                if (recordCounter++ % reportInterval == 0) {\n                    System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                    System.out.flush();\n                }\n            }\n        }\n        );\n        upgradeStream.to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder, config);\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","realPath":"streams/upgrade-system-tests-0101/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2021-05-22 06:05:39","commitOrder":3,"curCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires two arguments (zookeeper-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] : \"\"));\n        }\n\n        final String zookeeper = args[0];\n        final String propFileName = args[1];\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final Properties config = new Properties();\n\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v0.10.0)\");\n        System.out.println(\"zookeeper=\" + zookeeper);\n        System.out.println(\"props=\" + config);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.setProperty(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG, zookeeper);\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000L);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = config.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = config.getProperty(\"sink.topic\", \"sink\");\n        final int reportInterval = Integer.parseInt(config.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = config.getProperty(\"upgrade.phase\",  \"\");\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final KStream<String, String> upgradeStream = builder.stream(sourceTopic);\n        upgradeStream.foreach(new ForeachAction<String, String>() {\n            int recordCounter = 0;\n\n            @Override\n            public void apply(final String key, final String value) {\n                if (recordCounter++ % reportInterval == 0) {\n                    System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                    System.out.flush();\n                }\n            }\n        }\n        );\n        upgradeStream.to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder, config);\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","date":"2021-05-22 06:05:39","endLine":88,"groupId":"103130","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ee/15b1dfbc44883163b07fdc3b1e0da9c6e8c582.src","preCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires two arguments (zookeeper-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] : \"\"));\n        }\n\n        final String zookeeper = args[0];\n        final String propFileName = args[1];\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final Properties config = new Properties();\n\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v0.10.0)\");\n        System.out.println(\"zookeeper=\" + zookeeper);\n        System.out.println(\"props=\" + config);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.setProperty(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG, zookeeper);\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = config.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = config.getProperty(\"sink.topic\", \"sink\");\n        final int reportInterval = Integer.parseInt(config.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = config.getProperty(\"upgrade.phase\",  \"\");\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final KStream<String, String> upgradeStream = builder.stream(sourceTopic);\n        upgradeStream.foreach(new ForeachAction<String, String>() {\n            int recordCounter = 0;\n\n            @Override\n            public void apply(final String key, final String value) {\n                if (recordCounter++ % reportInterval == 0) {\n                    System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                    System.out.flush();\n                }\n            }\n        }\n        );\n        upgradeStream.to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder, config);\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","realPath":"streams/upgrade-system-tests-0100/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"}],"commitId":"ae8b7845374b6bb01e1ae9ca27f6ab967561e011","commitMessage":"@@@KAFKA-12499: add transaction timeout verification (#10482)\n\nThis PR tries to add the check for transaction timeout for a comparison against commit interval of streams. If transaction timeout is smaller than commit interval.  stream should crash and inform user to update their commit interval to be larger or equal to the given transaction timeout.  or vise versa.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2021-05-22 06:05:39","modifiedFileCount":"65","status":"M","submitter":"Boyang Chen"}]
