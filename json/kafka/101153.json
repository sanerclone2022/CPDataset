[{"authorTime":"2017-03-14 03:05:47","codes":[{"authorDate":"2017-03-14 03:05:47","commitOrder":1,"curCode":"    public void emptyIteratorAlwaysReturnsFalse() throws Exception {\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(new\n                StateStoreProviderStub(false), QueryableStoreTypes.windowStore(), \"foo\");\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", 1, 10);\n\n        Assert.assertFalse(windowStoreIterator.hasNext());\n    }\n","date":"2017-03-14 03:05:47","endLine":143,"groupId":"5102","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"emptyIteratorAlwaysReturnsFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6f/4ff07f8212f12e0bd1e452451f54994c2dfce5.src","preCode":"    public void emptyIteratorAlwaysReturnsFalse() throws Exception {\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(new\n                StateStoreProviderStub(false), QueryableStoreTypes.windowStore(), \"foo\");\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", 1, 10);\n\n        Assert.assertFalse(windowStoreIterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"},{"authorDate":"2017-03-14 03:05:47","commitOrder":1,"curCode":"    public void emptyIteratorNextShouldThrowNoSuchElementException() throws Exception {\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(new\n                StateStoreProviderStub(false), QueryableStoreTypes.windowStore(), \"foo\");\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", 1, 10);\n\n        windowStoreIteratorException.expect(NoSuchElementException.class);\n        windowStoreIterator.next();\n    }\n","date":"2017-03-14 03:05:47","endLine":163,"groupId":"5102","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"emptyIteratorNextShouldThrowNoSuchElementException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6f/4ff07f8212f12e0bd1e452451f54994c2dfce5.src","preCode":"    public void emptyIteratorNextShouldThrowNoSuchElementException() throws Exception {\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(new\n                StateStoreProviderStub(false), QueryableStoreTypes.windowStore(), \"foo\");\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", 1, 10);\n\n        windowStoreIteratorException.expect(NoSuchElementException.class);\n        windowStoreIterator.next();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"}],"commitId":"85e7a0a2b0d56891c13c15fc88a3011877f9c9e9","commitMessage":"@@@KAFKA-4657: Improve test coverage of CompositeReadOnlyWindowStore\n\nThis commmit brings improved test coverage for window store fetch method\nand WindowStoreIterator\n\nAuthor: Andrey Dyachkov <andrey.dyachkov@zalando.de>\n\nReviewers: Damian Guy.  Guozhang Wang\n\nCloses #2672 from adyach/trunk\n","date":"2017-03-14 03:05:47","modifiedFileCount":"1","status":"B","submitter":"Andrey Dyachkov"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2017-09-11 16:42:10","commitOrder":2,"curCode":"    public void emptyIteratorAlwaysReturnsFalse() {\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(new\n                StateStoreProviderStub(false), QueryableStoreTypes.windowStore(), \"foo\");\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", 1, 10);\n\n        Assert.assertFalse(windowStoreIterator.hasNext());\n    }\n","date":"2017-09-11 16:42:10","endLine":147,"groupId":"5102","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"emptyIteratorAlwaysReturnsFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ae/0679c6edae9d23ecaea3a3edf08f23ddf1b442.src","preCode":"    public void emptyIteratorAlwaysReturnsFalse() throws Exception {\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(new\n                StateStoreProviderStub(false), QueryableStoreTypes.windowStore(), \"foo\");\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", 1, 10);\n\n        Assert.assertFalse(windowStoreIterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":2,"curCode":"    public void emptyIteratorNextShouldThrowNoSuchElementException() {\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(new\n                StateStoreProviderStub(false), QueryableStoreTypes.windowStore(), \"foo\");\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", 1, 10);\n\n        windowStoreIteratorException.expect(NoSuchElementException.class);\n        windowStoreIterator.next();\n    }\n","date":"2017-09-11 16:42:10","endLine":167,"groupId":"5102","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"emptyIteratorNextShouldThrowNoSuchElementException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ae/0679c6edae9d23ecaea3a3edf08f23ddf1b442.src","preCode":"    public void emptyIteratorNextShouldThrowNoSuchElementException() throws Exception {\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(new\n                StateStoreProviderStub(false), QueryableStoreTypes.windowStore(), \"foo\");\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", 1, 10);\n\n        windowStoreIteratorException.expect(NoSuchElementException.class);\n        windowStoreIterator.next();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"c5464edbb7a6821e0a91a3712b1fe2fd92a22d68","commitMessage":"@@@KAFKA-5531; throw concrete exceptions in streams tests\n\n1. Now instead of just generic `Exception` methods declare more concrete\nexceptions throwing or don't declare any throwing at all.  if not needed.\n2. `SimpleBenchmark.run()` throws `RuntimeException`\n3. `SimpleBenchmark.produce()` throws `IllegalArgumentException`\n4. Expect `ProcessorStateException` in\n`StandbyTaskTest.testUpdateNonPersistentStore()`\n\n/cc enothereska\n\nAuthor: Evgeny Veretennikov <evg.veretennikov@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>\n\nCloses #3485 from evis/5531-throw-concrete-exceptions\n","date":"2017-09-11 16:42:10","modifiedFileCount":"106","status":"M","submitter":"Evgeny Veretennikov"},{"authorTime":"2018-10-05 04:51:39","codes":[{"authorDate":"2018-10-05 04:51:39","commitOrder":3,"curCode":"    public void emptyIteratorAlwaysReturnsFalse() {\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(new\n                StateStoreProviderStub(false), QueryableStoreTypes.windowStore(), \"foo\");\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", ofEpochMilli(1), ofEpochMilli(10));\n\n        Assert.assertFalse(windowStoreIterator.hasNext());\n    }\n","date":"2018-10-05 04:51:39","endLine":149,"groupId":"5102","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"emptyIteratorAlwaysReturnsFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/79/afb7855c38ef19d6609865c257b6355c27bea6.src","preCode":"    public void emptyIteratorAlwaysReturnsFalse() {\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(new\n                StateStoreProviderStub(false), QueryableStoreTypes.windowStore(), \"foo\");\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", 1, 10);\n\n        Assert.assertFalse(windowStoreIterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2018-10-05 04:51:39","commitOrder":3,"curCode":"    public void emptyIteratorNextShouldThrowNoSuchElementException() {\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(new\n                StateStoreProviderStub(false), QueryableStoreTypes.windowStore(), \"foo\");\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", ofEpochMilli(1), ofEpochMilli(10));\n\n        windowStoreIteratorException.expect(NoSuchElementException.class);\n        windowStoreIterator.next();\n    }\n","date":"2018-10-05 04:51:39","endLine":169,"groupId":"5102","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"emptyIteratorNextShouldThrowNoSuchElementException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/79/afb7855c38ef19d6609865c257b6355c27bea6.src","preCode":"    public void emptyIteratorNextShouldThrowNoSuchElementException() {\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(new\n                StateStoreProviderStub(false), QueryableStoreTypes.windowStore(), \"foo\");\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", 1, 10);\n\n        windowStoreIteratorException.expect(NoSuchElementException.class);\n        windowStoreIterator.next();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"ca641b3e2e48c14ff308181c775775408f5f35f7","commitMessage":"@@@KAFKA-7277: Migrate Streams API to Duration instead of longMs times (#5682)\n\nReviewers: Johne Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-10-05 04:51:39","modifiedFileCount":"97","status":"M","submitter":"Nikolay"},{"authorTime":"2020-01-15 06:10:19","codes":[{"authorDate":"2020-01-15 06:10:19","commitOrder":4,"curCode":"    public void emptyIteratorAlwaysReturnsFalse() {\n        final StateStoreProvider storeProvider = EasyMock.createNiceMock(StateStoreProvider.class);\n        EasyMock.expect(storeProvider.stores(anyString(), anyObject())).andReturn(emptyList());\n        EasyMock.replay(storeProvider);\n\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(\n            storeProvider,\n            QueryableStoreTypes.windowStore(),\n            \"foo\"\n        );\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", ofEpochMilli(1), ofEpochMilli(10));\n\n        Assert.assertFalse(windowStoreIterator.hasNext());\n    }\n","date":"2020-01-16 03:47:40","endLine":170,"groupId":"17318","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"emptyIteratorAlwaysReturnsFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/64/95d8070916dd1f5c149df16bb7bb3380ad46de.src","preCode":"    public void emptyIteratorAlwaysReturnsFalse() {\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(new\n                StateStoreProviderStub(false), QueryableStoreTypes.windowStore(), \"foo\");\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", ofEpochMilli(1), ofEpochMilli(10));\n\n        Assert.assertFalse(windowStoreIterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2020-01-15 06:10:19","commitOrder":4,"curCode":"    public void emptyIteratorNextShouldThrowNoSuchElementException() {\n        final StateStoreProvider storeProvider = EasyMock.createNiceMock(StateStoreProvider.class);\n        EasyMock.expect(storeProvider.stores(anyString(), anyObject())).andReturn(emptyList());\n        EasyMock.replay(storeProvider);\n\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(\n            storeProvider,\n            QueryableStoreTypes.windowStore(),\n            \"foo\"\n        );\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", ofEpochMilli(1), ofEpochMilli(10));\n        assertThrows(NoSuchElementException.class, windowStoreIterator::next);\n    }\n","date":"2020-01-16 03:47:40","endLine":200,"groupId":"17318","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"emptyIteratorNextShouldThrowNoSuchElementException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/64/95d8070916dd1f5c149df16bb7bb3380ad46de.src","preCode":"    public void emptyIteratorNextShouldThrowNoSuchElementException() {\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(new\n                StateStoreProviderStub(false), QueryableStoreTypes.windowStore(), \"foo\");\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", ofEpochMilli(1), ofEpochMilli(10));\n\n        windowStoreIteratorException.expect(NoSuchElementException.class);\n        windowStoreIterator.next();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"0c76fbbbedb5d342080dcaf0207602c158d3116d","commitMessage":"@@@KAFKA-6144: IQ option to query standbys (#7962)\n\nAdd a new overload of KafkaStreams#store that allows users\nto query standby and restoring stores in addition to active ones.\n\nCloses: #7962\nImplements: KIP-535\nCo-authored-by: Navinder Pal Singh Brar <navinder_brar@yahoo.com>\nReviewed-by: John Roesler <vvcephei@apache.org>\n","date":"2020-01-16 03:47:40","modifiedFileCount":"15","status":"M","submitter":"vinoth chandar"},{"authorTime":"2021-07-27 07:26:02","codes":[{"authorDate":"2021-07-27 07:26:02","commitOrder":5,"curCode":"    public void emptyIteratorAlwaysReturnsFalse() {\n        final StateStoreProvider storeProvider = EasyMock.createNiceMock(StateStoreProvider.class);\n        EasyMock.expect(storeProvider.stores(anyString(), anyObject())).andReturn(emptyList());\n        EasyMock.replay(storeProvider);\n\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(\n            storeProvider,\n            QueryableStoreTypes.windowStore(),\n            \"foo\"\n        );\n        try (final WindowStoreIterator<Object> windowStoreIterator =\n                 store.fetch(\"key\", ofEpochMilli(1), ofEpochMilli(10))) {\n\n            Assert.assertFalse(windowStoreIterator.hasNext());\n        }\n    }\n","date":"2021-07-27 07:26:02","endLine":281,"groupId":"101153","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"emptyIteratorAlwaysReturnsFalse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/486c34fd60f3e2e3f381d15d9f83c37c243ae5.src","preCode":"    public void emptyIteratorAlwaysReturnsFalse() {\n        final StateStoreProvider storeProvider = EasyMock.createNiceMock(StateStoreProvider.class);\n        EasyMock.expect(storeProvider.stores(anyString(), anyObject())).andReturn(emptyList());\n        EasyMock.replay(storeProvider);\n\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(\n            storeProvider,\n            QueryableStoreTypes.windowStore(),\n            \"foo\"\n        );\n        final WindowStoreIterator<Object> windowStoreIterator =\n            store.fetch(\"key\", ofEpochMilli(1), ofEpochMilli(10));\n\n        Assert.assertFalse(windowStoreIterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2021-07-27 07:26:02","commitOrder":5,"curCode":"    public void emptyIteratorNextShouldThrowNoSuchElementException() {\n        final StateStoreProvider storeProvider = EasyMock.createNiceMock(StateStoreProvider.class);\n        EasyMock.expect(storeProvider.stores(anyString(), anyObject())).andReturn(emptyList());\n        EasyMock.replay(storeProvider);\n\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(\n            storeProvider,\n            QueryableStoreTypes.windowStore(),\n            \"foo\"\n        );\n        try (final WindowStoreIterator<Object> windowStoreIterator =\n                 store.fetch(\"key\", ofEpochMilli(1), ofEpochMilli(10))) {\n            assertThrows(NoSuchElementException.class, windowStoreIterator::next);\n        }\n    }\n","date":"2021-07-27 07:26:02","endLine":332,"groupId":"101153","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"emptyIteratorNextShouldThrowNoSuchElementException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/486c34fd60f3e2e3f381d15d9f83c37c243ae5.src","preCode":"    public void emptyIteratorNextShouldThrowNoSuchElementException() {\n        final StateStoreProvider storeProvider = EasyMock.createNiceMock(StateStoreProvider.class);\n        EasyMock.expect(storeProvider.stores(anyString(), anyObject())).andReturn(emptyList());\n        EasyMock.replay(storeProvider);\n\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(\n            storeProvider,\n            QueryableStoreTypes.windowStore(),\n            \"foo\"\n        );\n        final WindowStoreIterator<Object> windowStoreIterator =\n            store.fetch(\"key\", ofEpochMilli(1), ofEpochMilli(10));\n        assertThrows(NoSuchElementException.class, windowStoreIterator::next);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"818cbfba6ddf8252b7da314bbaac74201951dfb3","commitMessage":"@@@KAFKA-13125: close KeyValueIterator instances in internals tests (part 2) (#11107)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-07-27 07:26:02","modifiedFileCount":"8","status":"M","submitter":"Luke Chen"}]
