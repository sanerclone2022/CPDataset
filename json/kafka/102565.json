[{"authorTime":"2019-10-03 11:32:18","codes":[{"authorDate":"2019-10-03 11:32:18","commitOrder":1,"curCode":"    public void shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.leftJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), Joined.as(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n        assertNamesForStateStore(topology.stateStores(),\n            \"KSTREAM-JOINTHIS-0000000004-store\",\n            \"KSTREAM-OUTEROTHER-0000000005-store\"\n        );\n        assertNamesForOperation(topology,\n            \"KSTREAM-SOURCE-0000000000\",\n            \"KSTREAM-SOURCE-0000000001\",\n            STREAM_OPERATION_NAME + \"-this-windowed\",\n            STREAM_OPERATION_NAME + \"-other-windowed\",\n            STREAM_OPERATION_NAME + \"-this-join\",\n            STREAM_OPERATION_NAME + \"-outer-other-join\",\n            STREAM_OPERATION_NAME + \"-merge\");\n    }\n","date":"2019-10-03 11:32:18","endLine":642,"groupId":"7005","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/35/36c016c45db47843df9a7e905d91d9ff792606.src","preCode":"    public void shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.leftJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), Joined.as(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n        assertNamesForStateStore(topology.stateStores(),\n            \"KSTREAM-JOINTHIS-0000000004-store\",\n            \"KSTREAM-OUTEROTHER-0000000005-store\"\n        );\n        assertNamesForOperation(topology,\n            \"KSTREAM-SOURCE-0000000000\",\n            \"KSTREAM-SOURCE-0000000001\",\n            STREAM_OPERATION_NAME + \"-this-windowed\",\n            STREAM_OPERATION_NAME + \"-other-windowed\",\n            STREAM_OPERATION_NAME + \"-this-join\",\n            STREAM_OPERATION_NAME + \"-outer-other-join\",\n            STREAM_OPERATION_NAME + \"-merge\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":622,"status":"B"},{"authorDate":"2019-10-03 11:32:18","commitOrder":1,"curCode":"    public void shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.outerJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), Joined.as(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n        assertNamesForStateStore(topology.stateStores(),\n            \"KSTREAM-OUTERTHIS-0000000004-store\",\n            \"KSTREAM-OUTEROTHER-0000000005-store\"\n        );\n        assertNamesForOperation(topology,\n            \"KSTREAM-SOURCE-0000000000\",\n            \"KSTREAM-SOURCE-0000000001\",\n            STREAM_OPERATION_NAME + \"-this-windowed\",\n            STREAM_OPERATION_NAME + \"-other-windowed\",\n            STREAM_OPERATION_NAME + \"-outer-this-join\",\n            STREAM_OPERATION_NAME + \"-outer-other-join\",\n            STREAM_OPERATION_NAME + \"-merge\");\n    }\n","date":"2019-10-03 11:32:18","endLine":735,"groupId":"7005","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/35/36c016c45db47843df9a7e905d91d9ff792606.src","preCode":"    public void shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.outerJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), Joined.as(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n        assertNamesForStateStore(topology.stateStores(),\n            \"KSTREAM-OUTERTHIS-0000000004-store\",\n            \"KSTREAM-OUTEROTHER-0000000005-store\"\n        );\n        assertNamesForOperation(topology,\n            \"KSTREAM-SOURCE-0000000000\",\n            \"KSTREAM-SOURCE-0000000001\",\n            STREAM_OPERATION_NAME + \"-this-windowed\",\n            STREAM_OPERATION_NAME + \"-other-windowed\",\n            STREAM_OPERATION_NAME + \"-outer-this-join\",\n            STREAM_OPERATION_NAME + \"-outer-other-join\",\n            STREAM_OPERATION_NAME + \"-merge\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":715,"status":"B"}],"commitId":"6925775e63fd33e6a44bbda671b2de7db41d150e","commitMessage":"@@@KAFKA-8558:  Add StreamJoined config object to join (#7285)\n\nReviewer: John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-03 11:32:18","modifiedFileCount":"11","status":"B","submitter":"Bill Bejeck"},{"authorTime":"2020-02-26 07:28:01","codes":[{"authorDate":"2020-02-26 07:28:01","commitOrder":2,"curCode":"    public void shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.leftJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), Joined.as(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n        assertNamesForStateStore(topology.stateStores(),\n            \"KSTREAM-JOINTHIS-0000000004-store\",\n            \"KSTREAM-OUTEROTHER-0000000005-store\"\n        );\n        assertNamesForOperation(topology,\n            \"KSTREAM-SOURCE-0000000000\",\n            \"KSTREAM-SOURCE-0000000001\",\n            STREAM_OPERATION_NAME + \"-this-windowed\",\n            STREAM_OPERATION_NAME + \"-other-windowed\",\n            STREAM_OPERATION_NAME + \"-this-join\",\n            STREAM_OPERATION_NAME + \"-outer-other-join\",\n            STREAM_OPERATION_NAME + \"-merge\");\n    }\n","date":"2020-02-26 07:28:01","endLine":640,"groupId":"9663","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bf/848299f2be953a52bb3b6d437fc665b316e0d2.src","preCode":"    public void shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.leftJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), Joined.as(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n        assertNamesForStateStore(topology.stateStores(),\n            \"KSTREAM-JOINTHIS-0000000004-store\",\n            \"KSTREAM-OUTEROTHER-0000000005-store\"\n        );\n        assertNamesForOperation(topology,\n            \"KSTREAM-SOURCE-0000000000\",\n            \"KSTREAM-SOURCE-0000000001\",\n            STREAM_OPERATION_NAME + \"-this-windowed\",\n            STREAM_OPERATION_NAME + \"-other-windowed\",\n            STREAM_OPERATION_NAME + \"-this-join\",\n            STREAM_OPERATION_NAME + \"-outer-other-join\",\n            STREAM_OPERATION_NAME + \"-merge\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":620,"status":"M"},{"authorDate":"2020-02-26 07:28:01","commitOrder":2,"curCode":"    public void shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.outerJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), Joined.as(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n        assertNamesForStateStore(topology.stateStores(),\n            \"KSTREAM-OUTERTHIS-0000000004-store\",\n            \"KSTREAM-OUTEROTHER-0000000005-store\"\n        );\n        assertNamesForOperation(topology,\n            \"KSTREAM-SOURCE-0000000000\",\n            \"KSTREAM-SOURCE-0000000001\",\n            STREAM_OPERATION_NAME + \"-this-windowed\",\n            STREAM_OPERATION_NAME + \"-other-windowed\",\n            STREAM_OPERATION_NAME + \"-outer-this-join\",\n            STREAM_OPERATION_NAME + \"-outer-other-join\",\n            STREAM_OPERATION_NAME + \"-merge\");\n    }\n","date":"2020-02-26 07:28:01","endLine":733,"groupId":"9663","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bf/848299f2be953a52bb3b6d437fc665b316e0d2.src","preCode":"    public void shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.outerJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), Joined.as(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n        assertNamesForStateStore(topology.stateStores(),\n            \"KSTREAM-OUTERTHIS-0000000004-store\",\n            \"KSTREAM-OUTEROTHER-0000000005-store\"\n        );\n        assertNamesForOperation(topology,\n            \"KSTREAM-SOURCE-0000000000\",\n            \"KSTREAM-SOURCE-0000000001\",\n            STREAM_OPERATION_NAME + \"-this-windowed\",\n            STREAM_OPERATION_NAME + \"-other-windowed\",\n            STREAM_OPERATION_NAME + \"-outer-this-join\",\n            STREAM_OPERATION_NAME + \"-outer-other-join\",\n            STREAM_OPERATION_NAME + \"-merge\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":713,"status":"M"}],"commitId":"a28447a06582bf8e6de427f047f3d3ba4e2219a1","commitMessage":"@@@MINOR: don't assign standby tasks with no logged state (#8147)\n\nRight now the task assignor just blindly assigns N standby tasks per active task (where N = num.standbys) and attempts to distribute them evenly across all instances/threads. But only standby tasks that are stateful.  and whose stores are changelog-enabled.  will ever actually be created.\n\nThis can result in a less-balanced assignment.  and should be cleaned up in particular before implementing KIP-441 to remove the noise of ghost standbys.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-02-26 07:28:01","modifiedFileCount":"16","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2021-04-08 08:38:43","codes":[{"authorDate":"2021-04-08 08:38:43","commitOrder":3,"curCode":"    public void shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.leftJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), StreamJoined.with(Serdes.String(), Serdes.String(), Serdes.String()).withName(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n        assertNamesForStateStore(topology.stateStores(),\n                                 \"KSTREAM-JOINTHIS-0000000004-store\",\n                                 \"KSTREAM-OUTEROTHER-0000000005-store\"\n        );\n        assertNamesForOperation(topology,\n                                \"KSTREAM-SOURCE-0000000000\",\n                                \"KSTREAM-SOURCE-0000000001\",\n                                STREAM_OPERATION_NAME + \"-this-windowed\",\n                                STREAM_OPERATION_NAME + \"-other-windowed\",\n                                STREAM_OPERATION_NAME + \"-this-join\",\n                                STREAM_OPERATION_NAME + \"-outer-other-join\",\n                                STREAM_OPERATION_NAME + \"-merge\");\n    }\n","date":"2021-04-08 08:38:43","endLine":748,"groupId":"12603","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d8/f3bf4f650eaea3b10a21f9bee1ddb2ce52ba6a.src","preCode":"    public void shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.leftJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), Joined.as(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n        assertNamesForStateStore(topology.stateStores(),\n                                 \"KSTREAM-JOINTHIS-0000000004-store\",\n                                 \"KSTREAM-OUTEROTHER-0000000005-store\"\n        );\n        assertNamesForOperation(topology,\n                                \"KSTREAM-SOURCE-0000000000\",\n                                \"KSTREAM-SOURCE-0000000001\",\n                                STREAM_OPERATION_NAME + \"-this-windowed\",\n                                STREAM_OPERATION_NAME + \"-other-windowed\",\n                                STREAM_OPERATION_NAME + \"-this-join\",\n                                STREAM_OPERATION_NAME + \"-outer-other-join\",\n                                STREAM_OPERATION_NAME + \"-merge\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":728,"status":"M"},{"authorDate":"2021-04-08 08:38:43","commitOrder":3,"curCode":"    public void shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.outerJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), StreamJoined.with(Serdes.String(), Serdes.String(), Serdes.String()).withName(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n        assertNamesForStateStore(topology.stateStores(),\n                                 \"KSTREAM-OUTERTHIS-0000000004-store\",\n                                 \"KSTREAM-OUTEROTHER-0000000005-store\"\n        );\n        assertNamesForOperation(topology,\n                                \"KSTREAM-SOURCE-0000000000\",\n                                \"KSTREAM-SOURCE-0000000001\",\n                                STREAM_OPERATION_NAME + \"-this-windowed\",\n                                STREAM_OPERATION_NAME + \"-other-windowed\",\n                                STREAM_OPERATION_NAME + \"-outer-this-join\",\n                                STREAM_OPERATION_NAME + \"-outer-other-join\",\n                                STREAM_OPERATION_NAME + \"-merge\");\n    }\n","date":"2021-04-08 08:38:43","endLine":839,"groupId":"12603","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d8/f3bf4f650eaea3b10a21f9bee1ddb2ce52ba6a.src","preCode":"    public void shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.outerJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), Joined.as(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n        assertNamesForStateStore(topology.stateStores(),\n                                 \"KSTREAM-OUTERTHIS-0000000004-store\",\n                                 \"KSTREAM-OUTEROTHER-0000000005-store\"\n        );\n        assertNamesForOperation(topology,\n                                \"KSTREAM-SOURCE-0000000000\",\n                                \"KSTREAM-SOURCE-0000000001\",\n                                STREAM_OPERATION_NAME + \"-this-windowed\",\n                                STREAM_OPERATION_NAME + \"-other-windowed\",\n                                STREAM_OPERATION_NAME + \"-outer-this-join\",\n                                STREAM_OPERATION_NAME + \"-outer-other-join\",\n                                STREAM_OPERATION_NAME + \"-merge\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":819,"status":"M"}],"commitId":"3ca5a3bb78ec2324391c026d3dd1b6773cf9c772","commitMessage":"@@@KAFKA-12568: Remove deprecated APIs in KStream.  KTable and Joined (#10421)\n\nThis is related to KIP-307 / KIP-372 / KIP-479.\n\nReviewers: John Roesler <vvcephei@apache.org>","date":"2021-04-08 08:38:43","modifiedFileCount":"10","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2021-04-29 08:57:28","codes":[{"authorDate":"2021-04-29 08:57:28","commitOrder":4,"curCode":"    public void shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.leftJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), StreamJoined.with(Serdes.String(), Serdes.String(), Serdes.String()).withName(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n        assertNamesForStateStore(topology.stateStores(),\n                                 \"KSTREAM-JOINTHIS-0000000004-store\",\n                                 \"KSTREAM-OUTEROTHER-0000000005-store\",\n                                 \"KSTREAM-OUTERSHARED-0000000004-store\"\n        );\n        assertNamesForOperation(topology,\n                                \"KSTREAM-SOURCE-0000000000\",\n                                \"KSTREAM-SOURCE-0000000001\",\n                                STREAM_OPERATION_NAME + \"-this-windowed\",\n                                STREAM_OPERATION_NAME + \"-other-windowed\",\n                                STREAM_OPERATION_NAME + \"-this-join\",\n                                STREAM_OPERATION_NAME + \"-outer-other-join\",\n                                STREAM_OPERATION_NAME + \"-merge\");\n    }\n","date":"2021-04-29 08:57:28","endLine":751,"groupId":"12603","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/ec9e84b7cc94e940f1394c5cdb5fa32b376ed9.src","preCode":"    public void shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.leftJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), StreamJoined.with(Serdes.String(), Serdes.String(), Serdes.String()).withName(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n        assertNamesForStateStore(topology.stateStores(),\n                                 \"KSTREAM-JOINTHIS-0000000004-store\",\n                                 \"KSTREAM-OUTEROTHER-0000000005-store\"\n        );\n        assertNamesForOperation(topology,\n                                \"KSTREAM-SOURCE-0000000000\",\n                                \"KSTREAM-SOURCE-0000000001\",\n                                STREAM_OPERATION_NAME + \"-this-windowed\",\n                                STREAM_OPERATION_NAME + \"-other-windowed\",\n                                STREAM_OPERATION_NAME + \"-this-join\",\n                                STREAM_OPERATION_NAME + \"-outer-other-join\",\n                                STREAM_OPERATION_NAME + \"-merge\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":730,"status":"M"},{"authorDate":"2021-04-29 08:57:28","commitOrder":4,"curCode":"    public void shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.outerJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), StreamJoined.with(Serdes.String(), Serdes.String(), Serdes.String()).withName(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n        assertNamesForStateStore(topology.stateStores(),\n                                 \"KSTREAM-OUTERTHIS-0000000004-store\",\n                                 \"KSTREAM-OUTEROTHER-0000000005-store\",\n                                 \"KSTREAM-OUTERSHARED-0000000004-store\"\n        );\n        assertNamesForOperation(topology,\n                                \"KSTREAM-SOURCE-0000000000\",\n                                \"KSTREAM-SOURCE-0000000001\",\n                                STREAM_OPERATION_NAME + \"-this-windowed\",\n                                STREAM_OPERATION_NAME + \"-other-windowed\",\n                                STREAM_OPERATION_NAME + \"-outer-this-join\",\n                                STREAM_OPERATION_NAME + \"-outer-other-join\",\n                                STREAM_OPERATION_NAME + \"-merge\");\n    }\n","date":"2021-04-29 08:57:28","endLine":844,"groupId":"12603","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/ec9e84b7cc94e940f1394c5cdb5fa32b376ed9.src","preCode":"    public void shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.outerJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), StreamJoined.with(Serdes.String(), Serdes.String(), Serdes.String()).withName(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n        assertNamesForStateStore(topology.stateStores(),\n                                 \"KSTREAM-OUTERTHIS-0000000004-store\",\n                                 \"KSTREAM-OUTEROTHER-0000000005-store\"\n        );\n        assertNamesForOperation(topology,\n                                \"KSTREAM-SOURCE-0000000000\",\n                                \"KSTREAM-SOURCE-0000000001\",\n                                STREAM_OPERATION_NAME + \"-this-windowed\",\n                                STREAM_OPERATION_NAME + \"-other-windowed\",\n                                STREAM_OPERATION_NAME + \"-outer-this-join\",\n                                STREAM_OPERATION_NAME + \"-outer-other-join\",\n                                STREAM_OPERATION_NAME + \"-merge\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":823,"status":"M"}],"commitId":"bf359f8e2924ee03b34a6f7e7eaf80bef55f9d98","commitMessage":"@@@KAFKA-10847: Fix spurious results on left/outer stream-stream joins (#10462)\n\nFixes the issue with https://issues.apache.org/jira/browse/KAFKA-10847.\n\nTo fix the above problem.  the left/outer stream-stream join processor uses a buffer to hold non-joined records for some time until the window closes.  so they are not processed if a join is found during the join window time. If the window of a record closes and a join was not found.  then this should be emitted and processed by the consequent topology processor.\n\nA new time-ordered window store is used to temporary hold records that do not have a join and keep the records keys ordered by time. The KStreamStreamJoin has a reference to this new store . For every non-joined record seen.  the processor writes it to this new state store without processing it. When a joined record is seen.  the processor deletes the joined record from the new state store to prevent further processing.\n\nRecords that were never joined at the end of the window + grace period are emitted to the next topology processor. I use the stream time to check for the expiry time for determinism results . The KStreamStreamJoin checks for expired records and emit them every time a new record is processed in the join processor.\n\nThe new state store is shared with the left and right join nodes. The new store needs to serialize the record keys using a combined key of <joinSide-recordKey>. This key combination helps to delete the records from the other join if a joined record is found. Two new serdes are created for this.  KeyAndJoinSideSerde which serializes a boolean value that specifies the side where the key is found.  and ValueOrOtherValueSerde that serializes either V1 or V2 based on where the key was found.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-04-29 08:57:28","modifiedFileCount":"11","status":"M","submitter":"Sergio Pe?a"},{"authorTime":"2021-06-17 00:25:16","codes":[{"authorDate":"2021-06-17 00:25:16","commitOrder":5,"curCode":"    public void shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.leftJoin(\n            streamTwo,\n            (value1, value2) -> value1,\n            JoinWindows.ofTimeDifferenceWithNoGrace(Duration.ofHours(1)),\n            StreamJoined.with(Serdes.String(), Serdes.String(), Serdes.String())\n                .withName(STREAM_OPERATION_NAME)\n        );\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n        assertNamesForStateStore(topology.stateStores(),\n                                 \"KSTREAM-JOINTHIS-0000000004-store\",\n                                 \"KSTREAM-OUTEROTHER-0000000005-store\",\n                                 \"KSTREAM-OUTERSHARED-0000000004-store\"\n        );\n        assertNamesForOperation(topology,\n                                \"KSTREAM-SOURCE-0000000000\",\n                                \"KSTREAM-SOURCE-0000000001\",\n                                STREAM_OPERATION_NAME + \"-this-windowed\",\n                                STREAM_OPERATION_NAME + \"-other-windowed\",\n                                STREAM_OPERATION_NAME + \"-this-join\",\n                                STREAM_OPERATION_NAME + \"-outer-other-join\",\n                                STREAM_OPERATION_NAME + \"-merge\");\n    }\n","date":"2021-06-17 00:25:16","endLine":817,"groupId":"102565","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/32/c35760ec06bcafae85934e25e96ce07ca9ef1e.src","preCode":"    public void shouldUseGeneratedStoreNamesForLeftJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.leftJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), StreamJoined.with(Serdes.String(), Serdes.String(), Serdes.String()).withName(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n        assertNamesForStateStore(topology.stateStores(),\n                                 \"KSTREAM-JOINTHIS-0000000004-store\",\n                                 \"KSTREAM-OUTEROTHER-0000000005-store\",\n                                 \"KSTREAM-OUTERSHARED-0000000004-store\"\n        );\n        assertNamesForOperation(topology,\n                                \"KSTREAM-SOURCE-0000000000\",\n                                \"KSTREAM-SOURCE-0000000001\",\n                                STREAM_OPERATION_NAME + \"-this-windowed\",\n                                STREAM_OPERATION_NAME + \"-other-windowed\",\n                                STREAM_OPERATION_NAME + \"-this-join\",\n                                STREAM_OPERATION_NAME + \"-outer-other-join\",\n                                STREAM_OPERATION_NAME + \"-merge\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":790,"status":"M"},{"authorDate":"2021-06-17 00:25:16","commitOrder":5,"curCode":"    public void shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.outerJoin(\n            streamTwo,\n            (value1, value2) -> value1,\n            JoinWindows.ofTimeDifferenceWithNoGrace(Duration.ofHours(1)),\n            StreamJoined.with(Serdes.String(), Serdes.String(), Serdes.String())\n                .withName(STREAM_OPERATION_NAME)\n        );\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n        assertNamesForStateStore(topology.stateStores(),\n                                 \"KSTREAM-OUTERTHIS-0000000004-store\",\n                                 \"KSTREAM-OUTEROTHER-0000000005-store\",\n                                 \"KSTREAM-OUTERSHARED-0000000004-store\"\n        );\n        assertNamesForOperation(topology,\n                                \"KSTREAM-SOURCE-0000000000\",\n                                \"KSTREAM-SOURCE-0000000001\",\n                                STREAM_OPERATION_NAME + \"-this-windowed\",\n                                STREAM_OPERATION_NAME + \"-other-windowed\",\n                                STREAM_OPERATION_NAME + \"-outer-this-join\",\n                                STREAM_OPERATION_NAME + \"-outer-other-join\",\n                                STREAM_OPERATION_NAME + \"-merge\");\n    }\n","date":"2021-06-17 00:25:16","endLine":922,"groupId":"102565","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/32/c35760ec06bcafae85934e25e96ce07ca9ef1e.src","preCode":"    public void shouldUseGeneratedStoreNamesForOuterJoinOperationBetweenKStreamAndKStream() {\n        final KStream<String, String> streamOne = builder.stream(STREAM_TOPIC);\n        final KStream<String, String> streamTwo = builder.stream(STREAM_TOPIC_TWO);\n\n        streamOne.outerJoin(streamTwo, (value1, value2) -> value1, JoinWindows.of(Duration.ofHours(1)), StreamJoined.with(Serdes.String(), Serdes.String(), Serdes.String()).withName(STREAM_OPERATION_NAME));\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n        assertNamesForStateStore(topology.stateStores(),\n                                 \"KSTREAM-OUTERTHIS-0000000004-store\",\n                                 \"KSTREAM-OUTEROTHER-0000000005-store\",\n                                 \"KSTREAM-OUTERSHARED-0000000004-store\"\n        );\n        assertNamesForOperation(topology,\n                                \"KSTREAM-SOURCE-0000000000\",\n                                \"KSTREAM-SOURCE-0000000001\",\n                                STREAM_OPERATION_NAME + \"-this-windowed\",\n                                STREAM_OPERATION_NAME + \"-other-windowed\",\n                                STREAM_OPERATION_NAME + \"-outer-this-join\",\n                                STREAM_OPERATION_NAME + \"-outer-other-join\",\n                                STREAM_OPERATION_NAME + \"-merge\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":895,"status":"M"}],"commitId":"96767a60db4117f257e911871d139572b84be65d","commitMessage":"@@@KAFKA-12909: disable spurious left/outer stream-stream join fix for old JoinWindows API (#10861)\n\nWe changed the behavior of left/outer stream-stream join via KAFKA-10847.\nTo avoid a breaking change during an upgrade.  we need to disable this\nfix by default.\n\nWe only enable the fix if users opt-in expliclity by changing their\ncode. We leverage KIP-633 (KAFKA-8613) that offers a new JoinWindows\nAPI with mandatory grace-period to enable the fix.\n\nReviewers: Sergio Pe?a <sergio@confluent.io>.  Israel Ekpo <israelekpo@gmail.com>.  Guozhang Wang <guozhang@confluent.io>","date":"2021-06-17 00:25:16","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"}]
