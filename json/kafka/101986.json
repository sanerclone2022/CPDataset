[{"authorTime":"2020-03-06 04:20:46","codes":[{"authorDate":"2020-02-21 05:24:38","commitOrder":3,"curCode":"    public void shouldPassUpIfExceptionDuringSuspend() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void suspend() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment))).andReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(RuntimeException.class, () -> taskManager.handleRevocation(taskId00Partitions));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n    }\n","date":"2020-02-21 05:24:38","endLine":295,"groupId":"6581","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPassUpIfExceptionDuringSuspend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/df/d29c63fd3106b31582b07b7bfc3fd3a9e2a6ee.src","preCode":"    public void shouldPassUpIfExceptionDuringSuspend() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void suspend() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment))).andReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(RuntimeException.class, () -> taskManager.handleRevocation(taskId00Partitions));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"NB"},{"authorDate":"2020-03-06 04:20:46","commitOrder":3,"curCode":"    public void shouldPropagateKafkaExceptionsInPunctuateActiveTasks() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public boolean maybePunctuateStreamTime() {\n                throw new KafkaException(\"oops\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment)))\n            .andReturn(singletonList(task00)).anyTimes();\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(KafkaException.class, () -> taskManager.punctuate());\n    }\n","date":"2020-03-06 04:20:46","endLine":1231,"groupId":"6581","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPropagateKafkaExceptionsInPunctuateActiveTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/b8782772af8b9404edb58526a6e4cb675cade7.src","preCode":"    public void shouldPropagateKafkaExceptionsInPunctuateActiveTasks() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public boolean maybePunctuateStreamTime() {\n                throw new KafkaException(\"oops\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment)))\n            .andReturn(singletonList(task00)).anyTimes();\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(KafkaException.class, () -> taskManager.punctuate());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1211,"status":"B"}],"commitId":"78374a15492cfb6df49353bd166d8c45ac9abdb2","commitMessage":"@@@KAFKA-9615: Clean up task/producer create and close (#8213)\n\n* Consolidate task/producer management. Now.  exactly one component manages\n  the creation and destruction of Producers.  whether they are per-thread or per-task.\n* Add missing test coverage on TaskManagerTest\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Boyang Chen <boyang@confluent.io>","date":"2020-03-06 04:20:46","modifiedFileCount":"12","status":"M","submitter":"John Roesler"},{"authorTime":"2020-03-06 04:20:46","codes":[{"authorDate":"2020-06-11 08:53:43","commitOrder":4,"curCode":"    public void shouldPassUpIfExceptionDuringSuspend() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void suspend() {\n                super.suspend();\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment))).andReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(RuntimeException.class, () -> taskManager.handleRevocation(taskId00Partitions));\n        assertThat(task00.state(), is(Task.State.SUSPENDED));\n\n        verify(consumer);\n    }\n","date":"2020-06-11 08:53:43","endLine":1094,"groupId":"6581","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPassUpIfExceptionDuringSuspend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/e3c21a33e656628f2a4df06e57fd31c043baef.src","preCode":"    public void shouldPassUpIfExceptionDuringSuspend() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void suspend() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment))).andReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(RuntimeException.class, () -> taskManager.handleRevocation(taskId00Partitions));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1073,"status":"M"},{"authorDate":"2020-03-06 04:20:46","commitOrder":4,"curCode":"    public void shouldPropagateKafkaExceptionsInPunctuateActiveTasks() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public boolean maybePunctuateStreamTime() {\n                throw new KafkaException(\"oops\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment)))\n            .andReturn(singletonList(task00)).anyTimes();\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(KafkaException.class, () -> taskManager.punctuate());\n    }\n","date":"2020-03-06 04:20:46","endLine":1231,"groupId":"6581","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPropagateKafkaExceptionsInPunctuateActiveTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/b8782772af8b9404edb58526a6e4cb675cade7.src","preCode":"    public void shouldPropagateKafkaExceptionsInPunctuateActiveTasks() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public boolean maybePunctuateStreamTime() {\n                throw new KafkaException(\"oops\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment)))\n            .andReturn(singletonList(task00)).anyTimes();\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(KafkaException.class, () -> taskManager.punctuate());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1211,"status":"N"}],"commitId":"8e083e1b8879e732522bb9a560c82ff84b176cc9","commitMessage":"@@@KAFKA-9441: remove prepareClose() to simplify task management (#8833)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2020-06-11 08:53:43","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-10-20 02:07:56","codes":[{"authorDate":"2020-10-20 02:07:56","commitOrder":5,"curCode":"    public void shouldPassUpIfExceptionDuringSuspend() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void suspend() {\n                super.suspend();\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment))).andReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(RuntimeException.class, () -> taskManager.handleRevocation(taskId00Partitions));\n        assertThat(task00.state(), is(Task.State.SUSPENDED));\n\n        verify(consumer);\n    }\n","date":"2020-10-20 02:07:56","endLine":1197,"groupId":"6581","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPassUpIfExceptionDuringSuspend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/5e148d7adfac58b89f87a980544d1d0dd371d2.src","preCode":"    public void shouldPassUpIfExceptionDuringSuspend() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void suspend() {\n                super.suspend();\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment))).andReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(RuntimeException.class, () -> taskManager.handleRevocation(taskId00Partitions));\n        assertThat(task00.state(), is(Task.State.SUSPENDED));\n\n        verify(consumer);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1176,"status":"M"},{"authorDate":"2020-10-20 02:07:56","commitOrder":5,"curCode":"    public void shouldPropagateKafkaExceptionsInPunctuateActiveTasks() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public boolean maybePunctuateStreamTime() {\n                throw new KafkaException(\"oops\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment)))\n            .andReturn(singletonList(task00)).anyTimes();\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(KafkaException.class, () -> taskManager.punctuate());\n    }\n","date":"2020-10-20 02:07:56","endLine":2240,"groupId":"6581","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPropagateKafkaExceptionsInPunctuateActiveTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/5e148d7adfac58b89f87a980544d1d0dd371d2.src","preCode":"    public void shouldPropagateKafkaExceptionsInPunctuateActiveTasks() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public boolean maybePunctuateStreamTime() {\n                throw new KafkaException(\"oops\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment)))\n            .andReturn(singletonList(task00)).anyTimes();\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(KafkaException.class, () -> taskManager.punctuate());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2220,"status":"M"}],"commitId":"aef6cd6e9995b42db2cefa7d715321d0edee5628","commitMessage":"@@@KAFKA-9274: Add timeout handling for state restore and StandbyTasks (#9368)\n\n* Part of KIP-572\n* If a TimeoutException happens during restore of active tasks.  or updating standby tasks.  we need to trigger task.timeout.ms timeout.\n\nReviewers: John Roesler <john@confluent.io>","date":"2020-10-20 02:07:56","modifiedFileCount":"15","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-01-22 00:52:34","codes":[{"authorDate":"2020-10-20 02:07:56","commitOrder":6,"curCode":"    public void shouldPassUpIfExceptionDuringSuspend() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void suspend() {\n                super.suspend();\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment))).andReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(RuntimeException.class, () -> taskManager.handleRevocation(taskId00Partitions));\n        assertThat(task00.state(), is(Task.State.SUSPENDED));\n\n        verify(consumer);\n    }\n","date":"2020-10-20 02:07:56","endLine":1197,"groupId":"6581","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPassUpIfExceptionDuringSuspend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/5e148d7adfac58b89f87a980544d1d0dd371d2.src","preCode":"    public void shouldPassUpIfExceptionDuringSuspend() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void suspend() {\n                super.suspend();\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment))).andReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(RuntimeException.class, () -> taskManager.handleRevocation(taskId00Partitions));\n        assertThat(task00.state(), is(Task.State.SUSPENDED));\n\n        verify(consumer);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1176,"status":"N"},{"authorDate":"2021-01-22 00:52:34","commitOrder":6,"curCode":"    public void shouldPropagateKafkaExceptionsInPunctuateActiveTasks() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public boolean maybePunctuateStreamTime() {\n                throw new KafkaException(\"oops\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment)))\n            .andStubReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(KafkaException.class, () -> taskManager.punctuate());\n    }\n","date":"2021-01-22 00:52:34","endLine":2302,"groupId":"6581","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPropagateKafkaExceptionsInPunctuateActiveTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/a1151510f36176da74cab4e2af690ba566a41a.src","preCode":"    public void shouldPropagateKafkaExceptionsInPunctuateActiveTasks() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public boolean maybePunctuateStreamTime() {\n                throw new KafkaException(\"oops\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment)))\n            .andReturn(singletonList(task00)).anyTimes();\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(KafkaException.class, () -> taskManager.punctuate());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2282,"status":"M"}],"commitId":"92e72f7bf96841d7991f1d71f440c2da06dd89cf","commitMessage":"@@@KAFKA-12185: fix ConcurrentModificationException in newly added Tasks container class (#9940)\n\nReviewers: Guozhang Wang <guozhand@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2021-01-22 00:52:34","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-02-06 09:25:50","codes":[{"authorDate":"2021-02-06 09:25:50","commitOrder":7,"curCode":"    public void shouldPassUpIfExceptionDuringSuspend() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void suspend() {\n                super.suspend();\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment))).andReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(RuntimeException.class, () -> taskManager.handleRevocation(taskId00Partitions));\n        assertThat(task00.state(), is(Task.State.SUSPENDED));\n\n        verify(consumer);\n    }\n","date":"2021-02-06 09:25:50","endLine":1238,"groupId":"6581","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPassUpIfExceptionDuringSuspend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/3a8c92c30322fe86e22b4a1174900049e5d642.src","preCode":"    public void shouldPassUpIfExceptionDuringSuspend() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void suspend() {\n                super.suspend();\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment))).andReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(RuntimeException.class, () -> taskManager.handleRevocation(taskId00Partitions));\n        assertThat(task00.state(), is(Task.State.SUSPENDED));\n\n        verify(consumer);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1217,"status":"M"},{"authorDate":"2021-02-06 09:25:50","commitOrder":7,"curCode":"    public void shouldPropagateKafkaExceptionsInPunctuateActiveTasks() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public boolean maybePunctuateStreamTime() {\n                throw new KafkaException(\"oops\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment)))\n            .andStubReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(KafkaException.class, () -> taskManager.punctuate());\n    }\n","date":"2021-02-06 09:25:50","endLine":2343,"groupId":"6581","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPropagateKafkaExceptionsInPunctuateActiveTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/3a8c92c30322fe86e22b4a1174900049e5d642.src","preCode":"    public void shouldPropagateKafkaExceptionsInPunctuateActiveTasks() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public boolean maybePunctuateStreamTime() {\n                throw new KafkaException(\"oops\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment)))\n            .andStubReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(KafkaException.class, () -> taskManager.punctuate());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2323,"status":"M"}],"commitId":"0bc394cc1d19f1e41dd6646e9ac0e09b91fb1398","commitMessage":"@@@KAFKA-9274: handle TimeoutException on task reset (#10000)\n\nPart of KIP-572: We move the offset reset for the internal \"main consumer\" when we revive a corrupted task.  from the \"task cleanup\" code path.  to the \"task init\" code path. For this case.  we have already logic in place to handle TimeoutException that might be thrown by consumer#committed() method call.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>\n","date":"2021-02-06 09:25:50","modifiedFileCount":"10","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-02-07 05:04:30","codes":[{"authorDate":"2021-02-07 05:04:30","commitOrder":8,"curCode":"    public void shouldPassUpIfExceptionDuringSuspend() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void suspend() {\n                super.suspend();\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment))).andReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(RuntimeException.class, () -> taskManager.handleRevocation(taskId00Partitions));\n        assertThat(task00.state(), is(Task.State.SUSPENDED));\n\n        verify(consumer);\n    }\n","date":"2021-02-07 05:04:30","endLine":1262,"groupId":"6581","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPassUpIfExceptionDuringSuspend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/224e0cd5c002edd02d0ef2ee8e1586fa832b3d.src","preCode":"    public void shouldPassUpIfExceptionDuringSuspend() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void suspend() {\n                super.suspend();\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment))).andReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(RuntimeException.class, () -> taskManager.handleRevocation(taskId00Partitions));\n        assertThat(task00.state(), is(Task.State.SUSPENDED));\n\n        verify(consumer);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1241,"status":"M"},{"authorDate":"2021-02-07 05:04:30","commitOrder":8,"curCode":"    public void shouldPropagateKafkaExceptionsInPunctuateActiveTasks() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public boolean maybePunctuateStreamTime() {\n                throw new KafkaException(\"oops\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment)))\n            .andStubReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(KafkaException.class, () -> taskManager.punctuate());\n    }\n","date":"2021-02-07 05:04:30","endLine":2367,"groupId":"6581","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPropagateKafkaExceptionsInPunctuateActiveTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/224e0cd5c002edd02d0ef2ee8e1586fa832b3d.src","preCode":"    public void shouldPropagateKafkaExceptionsInPunctuateActiveTasks() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public boolean maybePunctuateStreamTime() {\n                throw new KafkaException(\"oops\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment)))\n            .andStubReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(KafkaException.class, () -> taskManager.punctuate());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2347,"status":"M"}],"commitId":"d2cb2dc45d536ae124e3da25d6d5a4e932a23a27","commitMessage":"@@@KAFKA-9751: Forward CreateTopicsRequest for FindCoordinator/Metadata when topic creation is needed (#9579)\n\nConsolidate auto topic creation logic to either forward a CreateTopicRequest or handling the creation directly as AutoTopicCreationManager.  when handling FindCoordinator/Metadata request.\n\nCo-authored-by: Jason Gustafson <jason@confluent.io>\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2021-02-07 05:04:30","modifiedFileCount":"15","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-03-23 04:39:29","codes":[{"authorDate":"2021-03-23 04:39:29","commitOrder":9,"curCode":"    public void shouldPassUpIfExceptionDuringSuspend() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void suspend() {\n                super.suspend();\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment))).andReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(RuntimeException.class, () -> taskManager.handleRevocation(taskId00Partitions));\n        assertThat(task00.state(), is(Task.State.SUSPENDED));\n\n        verify(consumer);\n    }\n","date":"2021-03-23 04:39:29","endLine":1257,"groupId":"101986","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPassUpIfExceptionDuringSuspend","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/ee261715837dd2363bd8ef051c1d1588778d92.src","preCode":"    public void shouldPassUpIfExceptionDuringSuspend() {\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void suspend() {\n                super.suspend();\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment))).andReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(RuntimeException.class, () -> taskManager.handleRevocation(taskId00Partitions));\n        assertThat(task00.state(), is(Task.State.SUSPENDED));\n\n        verify(consumer);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1236,"status":"M"},{"authorDate":"2021-03-23 04:39:29","commitOrder":9,"curCode":"    public void shouldPropagateKafkaExceptionsInPunctuateActiveTasks() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public boolean maybePunctuateStreamTime() {\n                throw new KafkaException(\"oops\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment)))\n            .andStubReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(KafkaException.class, () -> taskManager.punctuate());\n    }\n","date":"2021-03-23 04:39:29","endLine":2362,"groupId":"101986","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPropagateKafkaExceptionsInPunctuateActiveTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/ee261715837dd2363bd8ef051c1d1588778d92.src","preCode":"    public void shouldPropagateKafkaExceptionsInPunctuateActiveTasks() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public boolean maybePunctuateStreamTime() {\n                throw new KafkaException(\"oops\");\n            }\n        };\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n        expect(activeTaskCreator.createTasks(anyObject(), eq(taskId00Assignment)))\n            .andStubReturn(singletonList(task00));\n\n        replay(activeTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(taskId00Assignment, emptyMap());\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n\n        assertThat(task00.state(), is(Task.State.RUNNING));\n\n        assertThrows(KafkaException.class, () -> taskManager.punctuate());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2342,"status":"M"}],"commitId":"80f373d34f7716a54fa9ec1e37a27c65cbbae0f2","commitMessage":"@@@(Cherry-pick) KAFKA-9274: handle TimeoutException on task reset (#10000) (#10372)\n\nThis PR was removed by accident in trunk and 2.8.  bringing it back.\n\nCo-authored-by: Matthias J. Sax <matthias@confluent.io>\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-03-23 04:39:29","modifiedFileCount":"10","status":"M","submitter":"Boyang Chen"}]
