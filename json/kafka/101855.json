[{"authorTime":"2017-07-29 07:46:34","codes":[{"authorDate":"2017-07-29 07:46:34","commitOrder":1,"curCode":"    public void singleSourceWithListOfTopicsShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", \"topic1\", \"topic2\", \"topic3\");\n\n        expectedDescription.addSubtopology(\n            new InternalTopologyBuilder.Subtopology(0,\n                Collections.<TopologyDescription.Node>singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo((TopologyDescription) expectedDescription));\n    }\n","date":"2017-07-29 07:46:34","endLine":329,"groupId":"2805","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"singleSourceWithListOfTopicsShouldHaveSingleSubtopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/639355c73e12910ebf52c9ef90881dd497f27c.src","preCode":"    public void singleSourceWithListOfTopicsShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", \"topic1\", \"topic2\", \"topic3\");\n\n        expectedDescription.addSubtopology(\n            new InternalTopologyBuilder.Subtopology(0,\n                Collections.<TopologyDescription.Node>singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo((TopologyDescription) expectedDescription));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/TopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"B"},{"authorDate":"2017-07-29 07:46:34","commitOrder":1,"curCode":"    public void singleSourcePatternShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", Pattern.compile(\"topic[0-9]\"));\n\n        expectedDescription.addSubtopology(\n            new InternalTopologyBuilder.Subtopology(0,\n                Collections.<TopologyDescription.Node>singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo((TopologyDescription) expectedDescription));\n    }\n","date":"2017-07-29 07:46:34","endLine":340,"groupId":"2805","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"singleSourcePatternShouldHaveSingleSubtopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/639355c73e12910ebf52c9ef90881dd497f27c.src","preCode":"    public void singleSourcePatternShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", Pattern.compile(\"topic[0-9]\"));\n\n        expectedDescription.addSubtopology(\n            new InternalTopologyBuilder.Subtopology(0,\n                Collections.<TopologyDescription.Node>singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo((TopologyDescription) expectedDescription));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/TopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"B"}],"commitId":"1844bf2b2f4cdf5a8209d7ceccb6701fc7dcf768","commitMessage":"@@@KAFKA-5670: (KIP-120) Add Topology and deprecate TopologyBuilder\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3590 from mjsax/kafka-3856-replace-topology-builder-by-topology\n","date":"2017-07-29 07:46:34","modifiedFileCount":"20","status":"B","submitter":"Matthias J. Sax"},{"authorTime":"2018-06-05 06:33:53","codes":[{"authorDate":"2018-06-05 06:33:53","commitOrder":2,"curCode":"    public void singleSourceWithListOfTopicsShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", \"topic1\", \"topic2\", \"topic3\");\n\n        expectedDescription.addSubtopology(\n            new InternalTopologyBuilder.Subtopology(0,\n                Collections.singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo(expectedDescription));\n    }\n","date":"2018-06-05 06:33:53","endLine":350,"groupId":"2805","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"singleSourceWithListOfTopicsShouldHaveSingleSubtopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/f9c7d68a5380f2484261974e28274f6df670a4.src","preCode":"    public void singleSourceWithListOfTopicsShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", \"topic1\", \"topic2\", \"topic3\");\n\n        expectedDescription.addSubtopology(\n            new InternalTopologyBuilder.Subtopology(0,\n                Collections.<TopologyDescription.Node>singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo((TopologyDescription) expectedDescription));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/TopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2018-06-05 06:33:53","commitOrder":2,"curCode":"    public void singleSourcePatternShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", Pattern.compile(\"topic[0-9]\"));\n\n        expectedDescription.addSubtopology(\n            new InternalTopologyBuilder.Subtopology(0,\n                Collections.singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo(expectedDescription));\n    }\n","date":"2018-06-05 06:33:53","endLine":361,"groupId":"2805","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"singleSourcePatternShouldHaveSingleSubtopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/f9c7d68a5380f2484261974e28274f6df670a4.src","preCode":"    public void singleSourcePatternShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", Pattern.compile(\"topic[0-9]\"));\n\n        expectedDescription.addSubtopology(\n            new InternalTopologyBuilder.Subtopology(0,\n                Collections.<TopologyDescription.Node>singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo((TopologyDescription) expectedDescription));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/TopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"M"}],"commitId":"6f9f3655731ea1d46bd1f0ed0957579d831e2692","commitMessage":"@@@KAFKA-6813: return to double-counting for count topology names (#5075)\n\n#4919 unintentionally changed the topology naming scheme. This change returns to the prior scheme.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-06-05 06:33:53","modifiedFileCount":"13","status":"M","submitter":"John Roesler"},{"authorTime":"2020-04-16 06:50:39","codes":[{"authorDate":"2020-04-16 06:50:39","commitOrder":3,"curCode":"    public void singleSourceWithListOfTopicsShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", \"topic1\", \"topic2\", \"topic3\");\n\n        expectedDescription.addSubtopology(\n            new InternalTopologyBuilder.Subtopology(0,\n                Collections.singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo(expectedDescription));\n        assertThat(topology.describe().hashCode(), equalTo(expectedDescription.hashCode()));\n    }\n","date":"2020-04-16 06:50:39","endLine":414,"groupId":"2805","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"singleSourceWithListOfTopicsShouldHaveSingleSubtopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7e/324f3c4e43cd6d7a3e0877342a62b9ec8c8c2e.src","preCode":"    public void singleSourceWithListOfTopicsShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", \"topic1\", \"topic2\", \"topic3\");\n\n        expectedDescription.addSubtopology(\n            new InternalTopologyBuilder.Subtopology(0,\n                Collections.singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo(expectedDescription));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/TopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":405,"status":"M"},{"authorDate":"2020-04-16 06:50:39","commitOrder":3,"curCode":"    public void singleSourcePatternShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", Pattern.compile(\"topic[0-9]\"));\n\n        expectedDescription.addSubtopology(\n            new InternalTopologyBuilder.Subtopology(0,\n                Collections.singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo(expectedDescription));\n        assertThat(topology.describe().hashCode(), equalTo(expectedDescription.hashCode()));\n    }\n","date":"2020-04-16 06:50:39","endLine":426,"groupId":"2805","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"singleSourcePatternShouldHaveSingleSubtopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7e/324f3c4e43cd6d7a3e0877342a62b9ec8c8c2e.src","preCode":"    public void singleSourcePatternShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", Pattern.compile(\"topic[0-9]\"));\n\n        expectedDescription.addSubtopology(\n            new InternalTopologyBuilder.Subtopology(0,\n                Collections.singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo(expectedDescription));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/TopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"M"}],"commitId":"f7d2b1baf7745b0f505edd186e1731cc5c9f382c","commitMessage":"@@@KAFKA-7885: TopologyDescription violates equals-hashCode contract. (#6210)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2020-04-16 06:50:39","modifiedFileCount":"2","status":"M","submitter":"Piotr Fras"},{"authorTime":"2021-05-14 02:25:18","codes":[{"authorDate":"2021-05-14 02:25:18","commitOrder":4,"curCode":"    public void singleSourceWithListOfTopicsShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", \"topic1\", \"topic2\", \"topic3\");\n\n        expectedDescription.addSubtopology(\n            new SubtopologyDescription(0,\n                                       Collections.singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo(expectedDescription));\n        assertThat(topology.describe().hashCode(), equalTo(expectedDescription.hashCode()));\n    }\n","date":"2021-05-14 02:25:18","endLine":448,"groupId":"101855","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"singleSourceWithListOfTopicsShouldHaveSingleSubtopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/68c4839eec40b435dfbf3d644f91a85a2a7ca5.src","preCode":"    public void singleSourceWithListOfTopicsShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", \"topic1\", \"topic2\", \"topic3\");\n\n        expectedDescription.addSubtopology(\n            new InternalTopologyBuilder.Subtopology(0,\n                Collections.singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo(expectedDescription));\n        assertThat(topology.describe().hashCode(), equalTo(expectedDescription.hashCode()));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/TopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":439,"status":"M"},{"authorDate":"2021-05-14 02:25:18","commitOrder":4,"curCode":"    public void singleSourcePatternShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", Pattern.compile(\"topic[0-9]\"));\n\n        expectedDescription.addSubtopology(\n            new SubtopologyDescription(0,\n                                       Collections.singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo(expectedDescription));\n        assertThat(topology.describe().hashCode(), equalTo(expectedDescription.hashCode()));\n    }\n","date":"2021-05-14 02:25:18","endLine":460,"groupId":"101855","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"singleSourcePatternShouldHaveSingleSubtopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/68c4839eec40b435dfbf3d644f91a85a2a7ca5.src","preCode":"    public void singleSourcePatternShouldHaveSingleSubtopology() {\n        final TopologyDescription.Source expectedSourceNode = addSource(\"source\", Pattern.compile(\"topic[0-9]\"));\n\n        expectedDescription.addSubtopology(\n            new InternalTopologyBuilder.Subtopology(0,\n                Collections.singleton(expectedSourceNode)));\n\n        assertThat(topology.describe(), equalTo(expectedDescription));\n        assertThat(topology.describe().hashCode(), equalTo(expectedDescription.hashCode()));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/TopologyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"}],"commitId":"4b2736570c9d5f4b6e501ab8cd5efe696a5142b7","commitMessage":"@@@KAFKA-12648: MINOR - Add TopologyMetadata.Subtopology class for subtopology metadata (#10676)\n\nIntroduce a Subtopology class to wrap the topicGroupId and namedTopology metadata.\n\nReviewers: Walker Carlson <wcarlson@confluent.io>","date":"2021-05-14 02:25:18","modifiedFileCount":"17","status":"M","submitter":"A. Sophie Blee-Goldman"}]
