[{"authorTime":"2021-07-14 09:29:31","codes":[{"authorDate":"2021-07-14 09:29:31","commitOrder":1,"curCode":"    public void testOwnedPartitionsAreInvalidatedForConsumerWithStaleGeneration() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 3);\n        partitionsPerTopic.put(topic2, 3);\n\n        int currentGeneration = 10;\n\n        subscriptions.put(consumer1, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), currentGeneration));\n        subscriptions.put(consumer2, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), currentGeneration - 1));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(new HashSet<>(partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1))), new HashSet<>(assignment.get(consumer1)));\n        assertEquals(new HashSet<>(partitions(tp(topic, 1), tp(topic2, 0), tp(topic2, 2))), new HashSet<>(assignment.get(consumer2)));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2021-07-14 09:29:31","endLine":830,"groupId":"18034","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOwnedPartitionsAreInvalidatedForConsumerWithStaleGeneration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/9e6f753b98feb02ab3086046fc77d760bff83b.src","preCode":"    public void testOwnedPartitionsAreInvalidatedForConsumerWithStaleGeneration() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 3);\n        partitionsPerTopic.put(topic2, 3);\n\n        int currentGeneration = 10;\n\n        subscriptions.put(consumer1, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), currentGeneration));\n        subscriptions.put(consumer2, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), currentGeneration - 1));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(new HashSet<>(partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1))), new HashSet<>(assignment.get(consumer1)));\n        assertEquals(new HashSet<>(partitions(tp(topic, 1), tp(topic2, 0), tp(topic2, 2))), new HashSet<>(assignment.get(consumer2)));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":814,"status":"B"},{"authorDate":"2021-07-14 09:29:31","commitOrder":1,"curCode":"    public void testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 3);\n        partitionsPerTopic.put(topic2, 3);\n\n        int currentGeneration = 10;\n\n        subscriptions.put(consumer1, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), currentGeneration));\n        subscriptions.put(consumer2, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), DEFAULT_GENERATION));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(new HashSet<>(partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1))), new HashSet<>(assignment.get(consumer1)));\n        assertEquals(new HashSet<>(partitions(tp(topic, 1), tp(topic2, 0), tp(topic2, 2))), new HashSet<>(assignment.get(consumer2)));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2021-07-14 09:29:31","endLine":849,"groupId":"18034","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/9e6f753b98feb02ab3086046fc77d760bff83b.src","preCode":"    public void testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 3);\n        partitionsPerTopic.put(topic2, 3);\n\n        int currentGeneration = 10;\n\n        subscriptions.put(consumer1, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), currentGeneration));\n        subscriptions.put(consumer2, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), DEFAULT_GENERATION));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(new HashSet<>(partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1))), new HashSet<>(assignment.get(consumer1)));\n        assertEquals(new HashSet<>(partitions(tp(topic, 1), tp(topic2, 0), tp(topic2, 2))), new HashSet<>(assignment.get(consumer2)));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":833,"status":"B"}],"commitId":"37d086fa2aa3aea07053304fe9758e104e6abb1a","commitMessage":"@@@KAFKA-12984: make AbstractStickyAssignor resilient to invalid input.  utilize generation in cooperative.  and fix assignment bug (#10985)\n\n1) Bring the generation field back to the CooperativeStickyAssignor so we don't need to rely so heavily on the ConsumerCoordinator properly updating its SubscriptionState after eg falling out of the group. The plain StickyAssignor always used the generation since it had to.  so we just make sure the CooperativeStickyAssignor has this tool as well\n2) In case of unforeseen problems or further bugs that slip past the generation field safety net.  the assignor will now explicitly look out for partitions that are being claimed by multiple consumers as owned in the same generation. Such a case should never occur.  but if it does.  we have to invalidate this partition from the ownedPartitions of both consumers.  since we can't tell who.  if anyone.  has the valid claim to this partition.\n3) Fix a subtle bug that I discovered while writing tests for the above two fixes: in the constrained algorithm.  we compute the exact number of partitions each consumer should end up with.  and keep track of the \"unfilled\" members who must -- or might -- require more partitions to hit their quota. The problem was that members at the minQuota were being considered as \"unfilled\" even after we had already hit the maximum number of consumers allowed to go up to the maxQuota.  meaning those minQuota members could/should not accept any more partitions beyond that. I believe this was introduced in #10509.  so it shouldn't be in any released versions and does not need to be backported.\n\nReviewers: Guozhang Wang <guozhang@apache.org>.  Luke Chen <showuon@gmail.com>","date":"2021-07-14 09:29:31","modifiedFileCount":"5","status":"B","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2021-08-06 04:26:18","codes":[{"authorDate":"2021-08-06 04:26:18","commitOrder":2,"curCode":"    public void testOwnedPartitionsAreInvalidatedForConsumerWithStaleGeneration() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 3);\n        partitionsPerTopic.put(topic2, 3);\n\n        int currentGeneration = 10;\n\n        subscriptions.put(consumer1, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), currentGeneration));\n        subscriptions.put(consumer2, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), currentGeneration - 1));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(new HashSet<>(partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1))), new HashSet<>(assignment.get(consumer1)));\n        assertEquals(new HashSet<>(partitions(tp(topic, 1), tp(topic2, 0), tp(topic2, 2))), new HashSet<>(assignment.get(consumer2)));\n        assertTrue(assignor.partitionsTransferringOwnership.isEmpty());\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2021-08-06 04:26:18","endLine":870,"groupId":"104085","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testOwnedPartitionsAreInvalidatedForConsumerWithStaleGeneration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/b4351f5fe46cc1e2682ee93bda870f66992965.src","preCode":"    public void testOwnedPartitionsAreInvalidatedForConsumerWithStaleGeneration() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 3);\n        partitionsPerTopic.put(topic2, 3);\n\n        int currentGeneration = 10;\n\n        subscriptions.put(consumer1, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), currentGeneration));\n        subscriptions.put(consumer2, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), currentGeneration - 1));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(new HashSet<>(partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1))), new HashSet<>(assignment.get(consumer1)));\n        assertEquals(new HashSet<>(partitions(tp(topic, 1), tp(topic2, 0), tp(topic2, 2))), new HashSet<>(assignment.get(consumer2)));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":853,"status":"M"},{"authorDate":"2021-08-06 04:26:18","commitOrder":2,"curCode":"    public void testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 3);\n        partitionsPerTopic.put(topic2, 3);\n\n        int currentGeneration = 10;\n\n        subscriptions.put(consumer1, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), currentGeneration));\n        subscriptions.put(consumer2, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), DEFAULT_GENERATION));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(new HashSet<>(partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1))), new HashSet<>(assignment.get(consumer1)));\n        assertEquals(new HashSet<>(partitions(tp(topic, 1), tp(topic2, 0), tp(topic2, 2))), new HashSet<>(assignment.get(consumer2)));\n        assertTrue(assignor.partitionsTransferringOwnership.isEmpty());\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2021-08-06 04:26:18","endLine":890,"groupId":"104085","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/b4351f5fe46cc1e2682ee93bda870f66992965.src","preCode":"    public void testOwnedPartitionsAreInvalidatedForConsumerWithNoGeneration() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 3);\n        partitionsPerTopic.put(topic2, 3);\n\n        int currentGeneration = 10;\n\n        subscriptions.put(consumer1, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), currentGeneration));\n        subscriptions.put(consumer2, buildSubscriptionWithGeneration(topics(topic, topic2), partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1)), DEFAULT_GENERATION));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(new HashSet<>(partitions(tp(topic, 0), tp(topic, 2), tp(topic2, 1))), new HashSet<>(assignment.get(consumer1)));\n        assertEquals(new HashSet<>(partitions(tp(topic, 1), tp(topic2, 0), tp(topic2, 2))), new HashSet<>(assignment.get(consumer2)));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":873,"status":"M"}],"commitId":"001afa8ebec2a1b5fd05319b02f7d3eb6410ab8e","commitMessage":"@@@KAFKA-13046: add test coverage for AbstractStickyAssignorTest (#11156)\n\n1) Add tests for partitionsTransferringOwnership\n  a. it should include revoked partitions and partitions claimed by multiple consumers.\n  b. for non-equal assignment case (general case).  it should be null so that the cooperative assignor knows to compute it from scratch\n\n2) Small optimization for allPreviousPartitionsToOwner check.\n\nReviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>","date":"2021-08-06 04:26:18","modifiedFileCount":"2","status":"M","submitter":"Luke Chen"}]
