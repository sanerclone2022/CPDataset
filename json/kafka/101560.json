[{"authorTime":"2017-09-18 18:54:14","codes":[{"authorDate":"2017-09-18 18:54:14","commitOrder":1,"curCode":"    public void shouldReduceAndMaterializeResults() {\n        groupedStream.reduce(MockReducer.STRING_ADDER,\n                             Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"reduce\")\n                                    .withKeySerde(Serdes.String())\n                                    .withValueSerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, String> reduced = (KeyValueStore<String, String>) driver.allStateStores().get(\"reduce\");\n\n        assertThat(reduced.get(\"1\"), equalTo(\"A+C+D\"));\n        assertThat(reduced.get(\"2\"), equalTo(\"B\"));\n        assertThat(reduced.get(\"3\"), equalTo(\"E+F\"));\n    }\n","date":"2017-09-18 18:54:14","endLine":542,"groupId":"9261","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReduceAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ef/a027ca52c6292393d3cb2dfa2290f5936c9d87.src","preCode":"    public void shouldReduceAndMaterializeResults() {\n        groupedStream.reduce(MockReducer.STRING_ADDER,\n                             Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"reduce\")\n                                    .withKeySerde(Serdes.String())\n                                    .withValueSerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, String> reduced = (KeyValueStore<String, String>) driver.allStateStores().get(\"reduce\");\n\n        assertThat(reduced.get(\"1\"), equalTo(\"A+C+D\"));\n        assertThat(reduced.get(\"2\"), equalTo(\"B\"));\n        assertThat(reduced.get(\"3\"), equalTo(\"E+F\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":529,"status":"B"},{"authorDate":"2017-09-18 18:54:14","commitOrder":1,"curCode":"    public void shouldAggregateAndMaterializeResults() {\n        groupedStream.aggregate(MockInitializer.STRING_INIT,\n                                MockAggregator.TOSTRING_ADDER,\n                                Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"aggregate\")\n                                        .withKeySerde(Serdes.String())\n                                        .withValueSerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, String> aggregate = (KeyValueStore<String, String>) driver.allStateStores().get(\"aggregate\");\n\n        assertThat(aggregate.get(\"1\"), equalTo(\"0+A+C+D\"));\n        assertThat(aggregate.get(\"2\"), equalTo(\"0+B\"));\n        assertThat(aggregate.get(\"3\"), equalTo(\"0+E+F\"));\n    }\n","date":"2017-09-18 18:54:14","endLine":560,"groupId":"15380","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAggregateAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ef/a027ca52c6292393d3cb2dfa2290f5936c9d87.src","preCode":"    public void shouldAggregateAndMaterializeResults() {\n        groupedStream.aggregate(MockInitializer.STRING_INIT,\n                                MockAggregator.TOSTRING_ADDER,\n                                Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"aggregate\")\n                                        .withKeySerde(Serdes.String())\n                                        .withValueSerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, String> aggregate = (KeyValueStore<String, String>) driver.allStateStores().get(\"aggregate\");\n\n        assertThat(aggregate.get(\"1\"), equalTo(\"0+A+C+D\"));\n        assertThat(aggregate.get(\"2\"), equalTo(\"0+B\"));\n        assertThat(aggregate.get(\"3\"), equalTo(\"0+E+F\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":546,"status":"B"}],"commitId":"d83252ebaeeca5bf19584908d95b424beb31b12e","commitMessage":"@@@KAFKA-5654; add materialized count.  reduce.  aggregate to KGroupedStream\n\nAdd overloads of `count`.  `reduce`.  and `aggregate` that are `Materialized` to `KGroupedStream`.\nRefactor common parts between `KGroupedStream` and `WindowedKStream`\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3827 from dguy/kafka-5654\n","date":"2017-09-18 18:54:14","modifiedFileCount":"6","status":"B","submitter":"Damian Guy"},{"authorTime":"2018-04-27 02:30:42","codes":[{"authorDate":"2018-04-27 02:30:42","commitOrder":2,"curCode":"    public void shouldReduceAndMaterializeResults() {\n        groupedStream.reduce(\n            MockReducer.STRING_ADDER,\n            Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"reduce\")\n                .withKeySerde(Serdes.String())\n                .withValueSerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, String> reduced = driver.getKeyValueStore(\"reduce\");\n\n        assertThat(reduced.get(\"1\"), equalTo(\"A+C+D\"));\n        assertThat(reduced.get(\"2\"), equalTo(\"B\"));\n        assertThat(reduced.get(\"3\"), equalTo(\"E+F\"));\n    }\n","date":"2018-04-27 02:30:42","endLine":596,"groupId":"9261","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReduceAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/ca30f48cc39ae5d081ec634791659b31ada1a9.src","preCode":"    public void shouldReduceAndMaterializeResults() {\n        groupedStream.reduce(\n            MockReducer.STRING_ADDER,\n            Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"reduce\")\n                .withKeySerde(Serdes.String())\n                .withValueSerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, String> reduced = (KeyValueStore<String, String>) driver.allStateStores().get(\"reduce\");\n\n        assertThat(reduced.get(\"1\"), equalTo(\"A+C+D\"));\n        assertThat(reduced.get(\"2\"), equalTo(\"B\"));\n        assertThat(reduced.get(\"3\"), equalTo(\"E+F\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":582,"status":"M"},{"authorDate":"2018-04-27 02:30:42","commitOrder":2,"curCode":"    public void shouldAggregateAndMaterializeResults() {\n        groupedStream.aggregate(\n            MockInitializer.STRING_INIT,\n            MockAggregator.TOSTRING_ADDER,\n            Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"aggregate\")\n                .withKeySerde(Serdes.String())\n                .withValueSerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, String> aggregate = driver.getKeyValueStore(\"aggregate\");\n\n        assertThat(aggregate.get(\"1\"), equalTo(\"0+A+C+D\"));\n        assertThat(aggregate.get(\"2\"), equalTo(\"0+B\"));\n        assertThat(aggregate.get(\"3\"), equalTo(\"0+E+F\"));\n    }\n","date":"2018-04-27 02:30:42","endLine":635,"groupId":"15380","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAggregateAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/ca30f48cc39ae5d081ec634791659b31ada1a9.src","preCode":"    public void shouldAggregateAndMaterializeResults() {\n        groupedStream.aggregate(\n            MockInitializer.STRING_INIT,\n            MockAggregator.TOSTRING_ADDER,\n            Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"aggregate\")\n                .withKeySerde(Serdes.String())\n                .withValueSerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, String> aggregate = (KeyValueStore<String, String>) driver.allStateStores().get(\"aggregate\");\n\n        assertThat(aggregate.get(\"1\"), equalTo(\"0+A+C+D\"));\n        assertThat(aggregate.get(\"2\"), equalTo(\"0+B\"));\n        assertThat(aggregate.get(\"3\"), equalTo(\"0+E+F\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":620,"status":"M"}],"commitId":"885abbfcd40aab57acec278d976956f07be15090","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [partial] (#4832)\n\n* Remove ProcessorTopologyTestDriver from TopologyTest\n* Fix ProcessorTopologyTest\n* Remove ProcessorTopologyTestDriver and InternalTopologyAccessor\n* Partially refactored StreamsBuilderTest but missing one test\n* Refactor KStreamBuilderTest\n* Refactor AbstractStreamTest\n* Further cleanup of AbstractStreamTest\n* Refactor GlobalKTableJoinsTest\n* Refactor InternalStreamsBuilderTest\n* Fix circular dependency in build.gradle\n* Refactor KGroupedStreamImplTest\n* Partial modifications to KGroupedTableImplTest\n* Refactor KGroupedTableImplTest\n* Refactor KStreamBranchTest\n* Refactor KStreamFilterTest\n* Refactor KStreamFlatMapTest KStreamFlatMapValuesTest\n* Refactor KStreamForeachTest\n* Refactor KStreamGlobalKTableJoinTest\n* Refactor KStreamGlobalKTableLeftJoinTest\n* Refactor KStreamImplTest\n* Refactor KStreamImplTest\n* Refactor KStreamKStreamJoinTest\n* Refactor KStreamKStreamLeftJoinTest\n* Refactor KStreamKTableJoinTest\n* Refactor KStreamKTableLeftJoinTest\n* Refactor KStreamMapTest and KStreamMapValuesTest\n* Refactor KStreamPeekTest and KStreamTransformTest\n* Refactor KStreamSelectKeyTest\n* Refactor KStreamTransformValuesTest\n* Refactor KStreamWindowAggregateTest\n* Add Depercation anotation to KStreamTestDriver and rollback failing tests in StreamsBuilderTest and KTableAggregateTest\n* Refactor KTableFilterTest\n* Refactor KTableForeachTest\n* Add getter for ProcessorTopology.  and simplify tests in StreamsBuilderTest\n* Refactor KTableImplTest\n* Remove unused imports\n* Refactor KTableAggregateTest\n* Fix style errors\n* Fix gradle build\n* Address reviewer comments:\n  - Remove properties new instance\n  - Remove extraneous line\n  - Remove unnecessary TopologyTestDriver instances from StreamsBuilderTest\n  - Move props.clear() to @After\n  - Clarify use of timestamp in KStreamFlatMapValuesTest\n  - Keep test using old Punctuator in KStreamTransformTest\n  - Add comment to clarify clock advances in KStreamTransformTest\n  - Add TopologyTestDriverWrapper class to access the protected constructor of TopologyTestDriver\n  - Revert KTableImplTest.testRepartition to KStreamTestDriver to avoid exposing the TopologyTestDriver processor topology\n  - Revert partially migrated classes: KTableAggregateTest.  KTableFilterTest.  and KTableImplTest\n* Rebase on current trunk an fix conflicts\n\nReviewers: Matthias J Sax <matthias@confluentio>.  Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2018-04-27 02:30:42","modifiedFileCount":"33","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-05-08 00:21:20","codes":[{"authorDate":"2018-05-08 00:21:20","commitOrder":3,"curCode":"    public void shouldReduceAndMaterializeResults() {\n        groupedStream.reduce(\n            MockReducer.STRING_ADDER,\n            Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"reduce\")\n                .withKeySerde(Serdes.String())\n                .withValueSerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            final KeyValueStore<String, String> reduced = driver.getKeyValueStore(\"reduce\");\n\n            assertThat(reduced.get(\"1\"), equalTo(\"A+C+D\"));\n            assertThat(reduced.get(\"2\"), equalTo(\"B\"));\n            assertThat(reduced.get(\"3\"), equalTo(\"E+F\"));\n        }\n    }\n","date":"2018-05-08 00:21:20","endLine":588,"groupId":"16957","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReduceAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/a9226d89bb717e8cce7b108aa8f69161cdd8b0.src","preCode":"    public void shouldReduceAndMaterializeResults() {\n        groupedStream.reduce(\n            MockReducer.STRING_ADDER,\n            Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"reduce\")\n                .withKeySerde(Serdes.String())\n                .withValueSerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, String> reduced = driver.getKeyValueStore(\"reduce\");\n\n        assertThat(reduced.get(\"1\"), equalTo(\"A+C+D\"));\n        assertThat(reduced.get(\"2\"), equalTo(\"B\"));\n        assertThat(reduced.get(\"3\"), equalTo(\"E+F\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"M"},{"authorDate":"2018-05-08 00:21:20","commitOrder":3,"curCode":"    public void shouldAggregateAndMaterializeResults() {\n        groupedStream.aggregate(\n            MockInitializer.STRING_INIT,\n            MockAggregator.TOSTRING_ADDER,\n            Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"aggregate\")\n                .withKeySerde(Serdes.String())\n                .withValueSerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            final KeyValueStore<String, String> aggregate = driver.getKeyValueStore(\"aggregate\");\n\n            assertThat(aggregate.get(\"1\"), equalTo(\"0+A+C+D\"));\n            assertThat(aggregate.get(\"2\"), equalTo(\"0+B\"));\n            assertThat(aggregate.get(\"3\"), equalTo(\"0+E+F\"));\n        }\n    }\n","date":"2018-05-08 00:21:20","endLine":631,"groupId":"16959","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAggregateAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/a9226d89bb717e8cce7b108aa8f69161cdd8b0.src","preCode":"    public void shouldAggregateAndMaterializeResults() {\n        groupedStream.aggregate(\n            MockInitializer.STRING_INIT,\n            MockAggregator.TOSTRING_ADDER,\n            Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"aggregate\")\n                .withKeySerde(Serdes.String())\n                .withValueSerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, String> aggregate = driver.getKeyValueStore(\"aggregate\");\n\n        assertThat(aggregate.get(\"1\"), equalTo(\"0+A+C+D\"));\n        assertThat(aggregate.get(\"2\"), equalTo(\"0+B\"));\n        assertThat(aggregate.get(\"3\"), equalTo(\"0+E+F\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":614,"status":"M"}],"commitId":"6f641fef6a88036ab4dacb59ab21bc8b21ef9bcf","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [cleanup] (#4939)\n\n* Add method to create test properties to StreamsTestUtils\n* Make TopologyTestDriver protected constructor package-private\n* Add comment suggesting the use of TopologyTestDriver to KStreamTestDriver\n* Cleanup:\n    - GlobalKTableJoinsTest\n    - KGroupedStreamImplTest\n    - KGroupedTableImplTest\n    - KStreamBranchTest\n    - KStreamFilterTest\n    - KStreamFlatMapTest\n    - KStreamFlatMapValuesTest\n    - KStreamForeachTest\n    - KStreamGlobalKTableJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamImplTest\n    - KStreamKStreamJoinTest\n    - KStreamKStreamLeftJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamKTableJoinTest\n    - KStreamKTableLeftJoinTest\n    - KStreamMapTest\n    - KStreamMapValuesTest\n    - KStreamPeekTest\n    - StreamsBuilderTest\n    - KStreamSelectKeyTest\n    - KStreamTransformTest\n    - KStreamTransformValuesTest\n    - KStreamWindowAggregateTest\n    - KTableForeachTest\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-05-08 00:21:20","modifiedFileCount":"27","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2019-05-18 07:48:07","codes":[{"authorDate":"2019-05-18 07:48:07","commitOrder":4,"curCode":"    public void shouldReduceAndMaterializeResults() {\n        groupedStream.reduce(\n            MockReducer.STRING_ADDER,\n            Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"reduce\")\n                .withKeySerde(Serdes.String())\n                .withValueSerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            {\n                final KeyValueStore<String, String> reduced = driver.getKeyValueStore(\"reduce\");\n\n                assertThat(reduced.get(\"1\"), equalTo(\"A+C+D\"));\n                assertThat(reduced.get(\"2\"), equalTo(\"B\"));\n                assertThat(reduced.get(\"3\"), equalTo(\"E+F\"));\n            }\n            {\n                final KeyValueStore<String, ValueAndTimestamp<String>> reduced = driver.getTimestampedKeyValueStore(\"reduce\");\n\n                assertThat(reduced.get(\"1\"), equalTo(ValueAndTimestamp.make(\"A+C+D\", 10L)));\n                assertThat(reduced.get(\"2\"), equalTo(ValueAndTimestamp.make(\"B\", 1L)));\n                assertThat(reduced.get(\"3\"), equalTo(ValueAndTimestamp.make(\"E+F\", 9L)));\n            }\n        }\n    }\n","date":"2019-05-18 07:48:07","endLine":475,"groupId":"101560","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReduceAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/850e711b26946a1034adbdfb70c78f93d49355.src","preCode":"    public void shouldReduceAndMaterializeResults() {\n        groupedStream.reduce(\n            MockReducer.STRING_ADDER,\n            Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"reduce\")\n                .withKeySerde(Serdes.String())\n                .withValueSerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            final KeyValueStore<String, String> reduced = driver.getKeyValueStore(\"reduce\");\n\n            assertThat(reduced.get(\"1\"), equalTo(\"A+C+D\"));\n            assertThat(reduced.get(\"2\"), equalTo(\"B\"));\n            assertThat(reduced.get(\"3\"), equalTo(\"E+F\"));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"M"},{"authorDate":"2019-05-18 07:48:07","commitOrder":4,"curCode":"    public void shouldAggregateAndMaterializeResults() {\n        groupedStream.aggregate(\n            MockInitializer.STRING_INIT,\n            MockAggregator.TOSTRING_ADDER,\n            Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"aggregate\")\n                .withKeySerde(Serdes.String())\n                .withValueSerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            {\n                final KeyValueStore<String, String> aggregate = driver.getKeyValueStore(\"aggregate\");\n\n                assertThat(aggregate.get(\"1\"), equalTo(\"0+A+C+D\"));\n                assertThat(aggregate.get(\"2\"), equalTo(\"0+B\"));\n                assertThat(aggregate.get(\"3\"), equalTo(\"0+E+F\"));\n            }\n            {\n                final KeyValueStore<String, ValueAndTimestamp<String>> aggregate = driver.getTimestampedKeyValueStore(\"aggregate\");\n\n                assertThat(aggregate.get(\"1\"), equalTo(ValueAndTimestamp.make(\"0+A+C+D\", 10L)));\n                assertThat(aggregate.get(\"2\"), equalTo(ValueAndTimestamp.make(\"0+B\", 1L)));\n                assertThat(aggregate.get(\"3\"), equalTo(ValueAndTimestamp.make(\"0+E+F\", 9L)));\n            }\n        }\n    }\n","date":"2019-05-18 07:48:07","endLine":527,"groupId":"101560","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAggregateAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/850e711b26946a1034adbdfb70c78f93d49355.src","preCode":"    public void shouldAggregateAndMaterializeResults() {\n        groupedStream.aggregate(\n            MockInitializer.STRING_INIT,\n            MockAggregator.TOSTRING_ADDER,\n            Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"aggregate\")\n                .withKeySerde(Serdes.String())\n                .withValueSerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            final KeyValueStore<String, String> aggregate = driver.getKeyValueStore(\"aggregate\");\n\n            assertThat(aggregate.get(\"1\"), equalTo(\"0+A+C+D\"));\n            assertThat(aggregate.get(\"2\"), equalTo(\"0+B\"));\n            assertThat(aggregate.get(\"3\"), equalTo(\"0+E+F\"));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":501,"status":"M"}],"commitId":"6a2749faa63397caa93dae7bfdc3f1d0573a2ff4","commitMessage":"@@@KAFKA-6455: Improve DSL operator timestamp semantics (#6725)\n\nBasic idea:\nKTable-KTable join: set max(left-ts. right-ts) for result\n#agg(...) (stream/table windowed/non-windowed): set max(ts1.  ts2.  ts3. ...) of all input records that contribute to the aggregation result\nfor all stateless transformation: input-ts -> output-ts\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   John Roesler <john@confluent.io>.  Andy Coates <andy@confluent.io>.   Bill Bejeck <bbejeck@gmail.com","date":"2019-05-18 07:48:07","modifiedFileCount":"61","status":"M","submitter":"Matthias J. Sax"}]
