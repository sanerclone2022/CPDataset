[{"authorTime":"2019-10-07 16:27:54","codes":[{"authorDate":"2019-10-07 16:27:54","commitOrder":1,"curCode":"    Map<String, Object> targetAdminConfig() {\n        Map<String, Object> props = new HashMap<>();\n        props.putAll(originalsWithPrefix(TARGET_CLUSTER_PREFIX));\n        props.keySet().retainAll(MirrorClientConfig.CLIENT_CONFIG_DEF.names());\n        props.putAll(originalsWithPrefix(ADMIN_CLIENT_PREFIX));\n        props.putAll(originalsWithPrefix(TARGET_ADMIN_CLIENT_PREFIX));\n        return props;\n    }\n","date":"2019-10-07 16:27:54","endLine":259,"groupId":"13308","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"targetAdminConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d9/22eade5f372c24cb121e27b1ce13f50fbcee58.src","preCode":"    Map<String, Object> targetAdminConfig() {\n        Map<String, Object> props = new HashMap<>();\n        props.putAll(originalsWithPrefix(TARGET_CLUSTER_PREFIX));\n        props.keySet().retainAll(MirrorClientConfig.CLIENT_CONFIG_DEF.names());\n        props.putAll(originalsWithPrefix(ADMIN_CLIENT_PREFIX));\n        props.putAll(originalsWithPrefix(TARGET_ADMIN_CLIENT_PREFIX));\n        return props;\n    }\n","realPath":"connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorConnectorConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"B"},{"authorDate":"2019-10-07 16:27:54","commitOrder":1,"curCode":"    Map<String, Object> sourceAdminConfig() {\n        Map<String, Object> props = new HashMap<>();\n        props.putAll(originalsWithPrefix(SOURCE_CLUSTER_PREFIX));\n        props.keySet().retainAll(MirrorClientConfig.CLIENT_CONFIG_DEF.names());\n        props.putAll(originalsWithPrefix(ADMIN_CLIENT_PREFIX));\n        props.putAll(originalsWithPrefix(SOURCE_ADMIN_CLIENT_PREFIX));\n        return props;\n    }\n","date":"2019-10-07 16:27:54","endLine":268,"groupId":"13308","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"sourceAdminConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d9/22eade5f372c24cb121e27b1ce13f50fbcee58.src","preCode":"    Map<String, Object> sourceAdminConfig() {\n        Map<String, Object> props = new HashMap<>();\n        props.putAll(originalsWithPrefix(SOURCE_CLUSTER_PREFIX));\n        props.keySet().retainAll(MirrorClientConfig.CLIENT_CONFIG_DEF.names());\n        props.putAll(originalsWithPrefix(ADMIN_CLIENT_PREFIX));\n        props.putAll(originalsWithPrefix(SOURCE_ADMIN_CLIENT_PREFIX));\n        return props;\n    }\n","realPath":"connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorConnectorConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"B"}],"commitId":"4ac892ca783acab8e574b9b24d17e767eedb3d5f","commitMessage":"@@@KAFKA-7500: MirrorMaker 2.0 (KIP-382)\n\nImplementation of [KIP-382 \"MirrorMaker 2.0\"](https://cwiki.apache.org/confluence/display/KAFKA/KIP-382%3A+MirrorMaker+2.0)\n\nAuthor: Ryanne Dolan <ryannedolan@gmail.com>\nAuthor: Arun Mathew <arunmathew88@gmail.com>\nAuthor: In Park <inpark@cloudera.com>\nAuthor: Andre Price <obsoleted@users.noreply.github.com>\nAuthor: christian.hagel@rio.cloud <christian.hagel@rio.cloud>\n\nReviewers: Eno Thereska <eno.thereska@gmail.com>.  William Hammond <william.t.hammond@gmail.com>.  Viktor Somogyi <viktorsomogyi@gmail.com>.  Jakub Korzeniowski.  Tim Carey-Smith.  Kamal Chandraprakash <kamal.chandraprakash@gmail.com>.  Arun Mathew.  Jeremy-l-ford.  vpernin.  Oleg Kasian <oleg.kasian@gmail.com>.  Mickael Maison <mickael.maison@gmail.com>.  Qihong Chen.  Sriharsha Chintalapani <sriharsha@apache.org>.  Jun Rao <junrao@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Manikumar Reddy <manikumar.reddy@gmail.com>.  Ismael Juma <ismael@juma.me.uk>\n\nCloses #6295 from ryannedolan/KIP-382\n","date":"2019-10-07 16:27:54","modifiedFileCount":"7","status":"B","submitter":"Ryanne Dolan"},{"authorTime":"2020-10-17 00:17:03","codes":[{"authorDate":"2020-10-17 00:17:03","commitOrder":2,"curCode":"    Map<String, Object> targetAdminConfig() {\n        Map<String, Object> props = new HashMap<>();\n        props.putAll(originalsWithPrefix(TARGET_CLUSTER_PREFIX));\n        props.keySet().retainAll(MirrorClientConfig.CLIENT_CONFIG_DEF.names());\n        props.putAll(originalsWithPrefix(ADMIN_CLIENT_PREFIX));\n        props.putAll(originalsWithPrefix(TARGET_PREFIX + ADMIN_CLIENT_PREFIX));\n        return props;\n    }\n","date":"2020-10-17 00:17:03","endLine":274,"groupId":"104637","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"targetAdminConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/aa/15cb1db93703bd3cdc90d8a85087b768e44268.src","preCode":"    Map<String, Object> targetAdminConfig() {\n        Map<String, Object> props = new HashMap<>();\n        props.putAll(originalsWithPrefix(TARGET_CLUSTER_PREFIX));\n        props.keySet().retainAll(MirrorClientConfig.CLIENT_CONFIG_DEF.names());\n        props.putAll(originalsWithPrefix(ADMIN_CLIENT_PREFIX));\n        props.putAll(originalsWithPrefix(TARGET_ADMIN_CLIENT_PREFIX));\n        return props;\n    }\n","realPath":"connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorConnectorConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"},{"authorDate":"2020-10-17 00:17:03","commitOrder":2,"curCode":"    Map<String, Object> sourceAdminConfig() {\n        Map<String, Object> props = new HashMap<>();\n        props.putAll(originalsWithPrefix(SOURCE_CLUSTER_PREFIX));\n        props.keySet().retainAll(MirrorClientConfig.CLIENT_CONFIG_DEF.names());\n        props.putAll(originalsWithPrefix(ADMIN_CLIENT_PREFIX));\n        props.putAll(originalsWithPrefix(SOURCE_PREFIX + ADMIN_CLIENT_PREFIX));\n        return props;\n    }\n","date":"2020-10-17 00:17:03","endLine":283,"groupId":"104637","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"sourceAdminConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/aa/15cb1db93703bd3cdc90d8a85087b768e44268.src","preCode":"    Map<String, Object> sourceAdminConfig() {\n        Map<String, Object> props = new HashMap<>();\n        props.putAll(originalsWithPrefix(SOURCE_CLUSTER_PREFIX));\n        props.keySet().retainAll(MirrorClientConfig.CLIENT_CONFIG_DEF.names());\n        props.putAll(originalsWithPrefix(ADMIN_CLIENT_PREFIX));\n        props.putAll(originalsWithPrefix(SOURCE_ADMIN_CLIENT_PREFIX));\n        return props;\n    }\n","realPath":"connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorConnectorConfig.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"}],"commitId":"cf202cb6acf38c64a3e8b9e541673a12ee55eaaa","commitMessage":"@@@MINOR: Fix consumer/producer properties override (#9313)\n\n\nReviewers: Mickael Maison <mickael.maison@gmail.com>.  Ryanne Dolan <ryannedolan@gmail.com>","date":"2020-10-17 00:17:03","modifiedFileCount":"3","status":"M","submitter":"Samuel Cantero"}]
