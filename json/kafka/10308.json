[{"authorTime":"2019-10-17 13:29:33","codes":[{"authorDate":"2019-10-17 13:29:33","commitOrder":1,"curCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires two argument (kafka-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] : \"\"));\n        }\n        System.out.println(\"Args are \" + Arrays.toString(args));\n        final String propFileName = args[1];\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n\n        final Properties config = new Properties();\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v2.2)\");\n        System.out.println(\"props=\" + streamsProperties);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = streamsProperties.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = streamsProperties.getProperty(\"sink.topic\", \"sink\");\n        final String taskDelimiter = streamsProperties.getProperty(\"task.delimiter\", \"#\");\n        final int reportInterval = Integer.parseInt(streamsProperties.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = streamsProperties.getProperty(\"upgrade.phase\",  \"\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        builder.<String, String>stream(sourceTopic)\n            .peek(new ForeachAction<String, String>() {\n                int recordCounter = 0;\n\n                @Override\n                public void apply(final String key, final String value) {\n                    if (recordCounter++ % reportInterval == 0) {\n                        System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                        System.out.flush();\n                    }\n                }\n            }\n            ).to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), config);\n\n        streams.setStateListener((newState, oldState) -> {\n            if (newState == State.RUNNING && oldState == State.REBALANCING) {\n                System.out.println(String.format(\"%sSTREAMS in a RUNNING State\", upgradePhase));\n                final Set<ThreadMetadata> allThreadMetadata = streams.localThreadsMetadata();\n                final StringBuilder taskReportBuilder = new StringBuilder();\n                final List<String> activeTasks = new ArrayList<>();\n                final List<String> standbyTasks = new ArrayList<>();\n                for (final ThreadMetadata threadMetadata : allThreadMetadata) {\n                    getTasks(threadMetadata.activeTasks(), activeTasks);\n                    if (!threadMetadata.standbyTasks().isEmpty()) {\n                        getTasks(threadMetadata.standbyTasks(), standbyTasks);\n                    }\n                }\n                addTasksToBuilder(activeTasks, taskReportBuilder);\n                taskReportBuilder.append(taskDelimiter);\n                if (!standbyTasks.isEmpty()) {\n                    addTasksToBuilder(standbyTasks, taskReportBuilder);\n                }\n                System.out.println(\"TASK-ASSIGNMENTS:\" + taskReportBuilder);\n            }\n\n            if (newState == State.REBALANCING) {\n                System.out.println(String.format(\"%sStarting a REBALANCE\", upgradePhase));\n            }\n        });\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","date":"2019-10-17 13:29:33","endLine":117,"groupId":"9841","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/17/4c34f58ede6f35a0ba24992227d3528ece60f8.src","preCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires two argument (kafka-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] : \"\"));\n        }\n        System.out.println(\"Args are \" + Arrays.toString(args));\n        final String propFileName = args[1];\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n\n        final Properties config = new Properties();\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v2.2)\");\n        System.out.println(\"props=\" + streamsProperties);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = streamsProperties.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = streamsProperties.getProperty(\"sink.topic\", \"sink\");\n        final String taskDelimiter = streamsProperties.getProperty(\"task.delimiter\", \"#\");\n        final int reportInterval = Integer.parseInt(streamsProperties.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = streamsProperties.getProperty(\"upgrade.phase\",  \"\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        builder.<String, String>stream(sourceTopic)\n            .peek(new ForeachAction<String, String>() {\n                int recordCounter = 0;\n\n                @Override\n                public void apply(final String key, final String value) {\n                    if (recordCounter++ % reportInterval == 0) {\n                        System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                        System.out.flush();\n                    }\n                }\n            }\n            ).to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), config);\n\n        streams.setStateListener((newState, oldState) -> {\n            if (newState == State.RUNNING && oldState == State.REBALANCING) {\n                System.out.println(String.format(\"%sSTREAMS in a RUNNING State\", upgradePhase));\n                final Set<ThreadMetadata> allThreadMetadata = streams.localThreadsMetadata();\n                final StringBuilder taskReportBuilder = new StringBuilder();\n                final List<String> activeTasks = new ArrayList<>();\n                final List<String> standbyTasks = new ArrayList<>();\n                for (final ThreadMetadata threadMetadata : allThreadMetadata) {\n                    getTasks(threadMetadata.activeTasks(), activeTasks);\n                    if (!threadMetadata.standbyTasks().isEmpty()) {\n                        getTasks(threadMetadata.standbyTasks(), standbyTasks);\n                    }\n                }\n                addTasksToBuilder(activeTasks, taskReportBuilder);\n                taskReportBuilder.append(taskDelimiter);\n                if (!standbyTasks.isEmpty()) {\n                    addTasksToBuilder(standbyTasks, taskReportBuilder);\n                }\n                System.out.println(\"TASK-ASSIGNMENTS:\" + taskReportBuilder);\n            }\n\n            if (newState == State.REBALANCING) {\n                System.out.println(String.format(\"%sStarting a REBALANCE\", upgradePhase));\n            }\n        });\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","realPath":"streams/upgrade-system-tests-21/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"},{"authorDate":"2019-10-17 13:29:33","commitOrder":1,"curCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires two argument (kafka-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] : \"\"));\n        }\n        System.out.println(\"Args are \" + Arrays.toString(args));\n        final String propFileName = args[1];\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n\n        final Properties config = new Properties();\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v1.0)\");\n        System.out.println(\"props=\" + streamsProperties);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = streamsProperties.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = streamsProperties.getProperty(\"sink.topic\", \"sink\");\n        final String taskDelimiter = streamsProperties.getProperty(\"task.delimiter\", \"#\");\n        final int reportInterval = Integer.parseInt(streamsProperties.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = streamsProperties.getProperty(\"upgrade.phase\",  \"\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        builder.<String, String>stream(sourceTopic)\n            .peek(new ForeachAction<String, String>() {\n                int recordCounter = 0;\n\n                @Override\n                public void apply(final String key, final String value) {\n                    if (recordCounter++ % reportInterval == 0) {\n                        System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                        System.out.flush();\n                    }\n                }\n            }\n            ).to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), config);\n\n        streams.setStateListener((newState, oldState) -> {\n            if (newState == State.RUNNING && oldState == State.REBALANCING) {\n                System.out.println(String.format(\"%sSTREAMS in a RUNNING State\", upgradePhase));\n                final Set<ThreadMetadata> allThreadMetadata = streams.localThreadsMetadata();\n                final StringBuilder taskReportBuilder = new StringBuilder();\n                final List<String> activeTasks = new ArrayList<>();\n                final List<String> standbyTasks = new ArrayList<>();\n                for (final ThreadMetadata threadMetadata : allThreadMetadata) {\n                    getTasks(threadMetadata.activeTasks(), activeTasks);\n                    if (!threadMetadata.standbyTasks().isEmpty()) {\n                        getTasks(threadMetadata.standbyTasks(), standbyTasks);\n                    }\n                }\n                addTasksToBuilder(activeTasks, taskReportBuilder);\n                taskReportBuilder.append(taskDelimiter);\n                if (!standbyTasks.isEmpty()) {\n                    addTasksToBuilder(standbyTasks, taskReportBuilder);\n                }\n                System.out.println(\"TASK-ASSIGNMENTS:\" + taskReportBuilder);\n            }\n\n            if (newState == State.REBALANCING) {\n                System.out.println(String.format(\"%sStarting a REBALANCE\", upgradePhase));\n            }\n        });\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","date":"2019-10-17 13:29:33","endLine":117,"groupId":"9841","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/09/e8458e0f4eeedd6dc3c1b5db86ce714f2802b3.src","preCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires two argument (kafka-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] : \"\"));\n        }\n        System.out.println(\"Args are \" + Arrays.toString(args));\n        final String propFileName = args[1];\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n\n        final Properties config = new Properties();\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v1.0)\");\n        System.out.println(\"props=\" + streamsProperties);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = streamsProperties.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = streamsProperties.getProperty(\"sink.topic\", \"sink\");\n        final String taskDelimiter = streamsProperties.getProperty(\"task.delimiter\", \"#\");\n        final int reportInterval = Integer.parseInt(streamsProperties.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = streamsProperties.getProperty(\"upgrade.phase\",  \"\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        builder.<String, String>stream(sourceTopic)\n            .peek(new ForeachAction<String, String>() {\n                int recordCounter = 0;\n\n                @Override\n                public void apply(final String key, final String value) {\n                    if (recordCounter++ % reportInterval == 0) {\n                        System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                        System.out.flush();\n                    }\n                }\n            }\n            ).to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), config);\n\n        streams.setStateListener((newState, oldState) -> {\n            if (newState == State.RUNNING && oldState == State.REBALANCING) {\n                System.out.println(String.format(\"%sSTREAMS in a RUNNING State\", upgradePhase));\n                final Set<ThreadMetadata> allThreadMetadata = streams.localThreadsMetadata();\n                final StringBuilder taskReportBuilder = new StringBuilder();\n                final List<String> activeTasks = new ArrayList<>();\n                final List<String> standbyTasks = new ArrayList<>();\n                for (final ThreadMetadata threadMetadata : allThreadMetadata) {\n                    getTasks(threadMetadata.activeTasks(), activeTasks);\n                    if (!threadMetadata.standbyTasks().isEmpty()) {\n                        getTasks(threadMetadata.standbyTasks(), standbyTasks);\n                    }\n                }\n                addTasksToBuilder(activeTasks, taskReportBuilder);\n                taskReportBuilder.append(taskDelimiter);\n                if (!standbyTasks.isEmpty()) {\n                    addTasksToBuilder(standbyTasks, taskReportBuilder);\n                }\n                System.out.println(\"TASK-ASSIGNMENTS:\" + taskReportBuilder);\n            }\n\n            if (newState == State.REBALANCING) {\n                System.out.println(String.format(\"%sStarting a REBALANCE\", upgradePhase));\n            }\n        });\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","realPath":"streams/upgrade-system-tests-10/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"}],"commitId":"b62f2a1123612af30d29140efa6d3e89091f87dc","commitMessage":"@@@KAFKA-8496: System test for KIP-429 upgrades and compatibility (#7529)\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-10-17 13:29:33","modifiedFileCount":"1","status":"B","submitter":"Bill Bejeck"},{"authorTime":"2019-10-21 22:51:15","codes":[{"authorDate":"2019-10-21 22:51:15","commitOrder":2,"curCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 1) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires one argument (properties-file) but none provided\");\n        }\n        System.out.println(\"Args are \" + Arrays.toString(args));\n        final String propFileName = args[0];\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n\n        final Properties config = new Properties();\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v2.2)\");\n        System.out.println(\"props=\" + streamsProperties);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = streamsProperties.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = streamsProperties.getProperty(\"sink.topic\", \"sink\");\n        final String taskDelimiter = streamsProperties.getProperty(\"task.delimiter\", \"#\");\n        final int reportInterval = Integer.parseInt(streamsProperties.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = streamsProperties.getProperty(\"upgrade.phase\",  \"\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        builder.<String, String>stream(sourceTopic)\n            .peek(new ForeachAction<String, String>() {\n                int recordCounter = 0;\n\n                @Override\n                public void apply(final String key, final String value) {\n                    if (recordCounter++ % reportInterval == 0) {\n                        System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                        System.out.flush();\n                    }\n                }\n            }\n            ).to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), config);\n\n        streams.setStateListener((newState, oldState) -> {\n            if (newState == State.RUNNING && oldState == State.REBALANCING) {\n                System.out.println(String.format(\"%sSTREAMS in a RUNNING State\", upgradePhase));\n                final Set<ThreadMetadata> allThreadMetadata = streams.localThreadsMetadata();\n                final StringBuilder taskReportBuilder = new StringBuilder();\n                final List<String> activeTasks = new ArrayList<>();\n                final List<String> standbyTasks = new ArrayList<>();\n                for (final ThreadMetadata threadMetadata : allThreadMetadata) {\n                    getTasks(threadMetadata.activeTasks(), activeTasks);\n                    if (!threadMetadata.standbyTasks().isEmpty()) {\n                        getTasks(threadMetadata.standbyTasks(), standbyTasks);\n                    }\n                }\n                addTasksToBuilder(activeTasks, taskReportBuilder);\n                taskReportBuilder.append(taskDelimiter);\n                if (!standbyTasks.isEmpty()) {\n                    addTasksToBuilder(standbyTasks, taskReportBuilder);\n                }\n                System.out.println(\"TASK-ASSIGNMENTS:\" + taskReportBuilder);\n            }\n\n            if (newState == State.REBALANCING) {\n                System.out.println(String.format(\"%sStarting a REBALANCE\", upgradePhase));\n            }\n        });\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","date":"2019-10-21 22:51:15","endLine":116,"groupId":"9841","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7f/15003c2bd5216de565c064cd168b2e65bf9e96.src","preCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires two argument (kafka-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] : \"\"));\n        }\n        System.out.println(\"Args are \" + Arrays.toString(args));\n        final String propFileName = args[1];\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n\n        final Properties config = new Properties();\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v2.2)\");\n        System.out.println(\"props=\" + streamsProperties);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = streamsProperties.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = streamsProperties.getProperty(\"sink.topic\", \"sink\");\n        final String taskDelimiter = streamsProperties.getProperty(\"task.delimiter\", \"#\");\n        final int reportInterval = Integer.parseInt(streamsProperties.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = streamsProperties.getProperty(\"upgrade.phase\",  \"\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        builder.<String, String>stream(sourceTopic)\n            .peek(new ForeachAction<String, String>() {\n                int recordCounter = 0;\n\n                @Override\n                public void apply(final String key, final String value) {\n                    if (recordCounter++ % reportInterval == 0) {\n                        System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                        System.out.flush();\n                    }\n                }\n            }\n            ).to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), config);\n\n        streams.setStateListener((newState, oldState) -> {\n            if (newState == State.RUNNING && oldState == State.REBALANCING) {\n                System.out.println(String.format(\"%sSTREAMS in a RUNNING State\", upgradePhase));\n                final Set<ThreadMetadata> allThreadMetadata = streams.localThreadsMetadata();\n                final StringBuilder taskReportBuilder = new StringBuilder();\n                final List<String> activeTasks = new ArrayList<>();\n                final List<String> standbyTasks = new ArrayList<>();\n                for (final ThreadMetadata threadMetadata : allThreadMetadata) {\n                    getTasks(threadMetadata.activeTasks(), activeTasks);\n                    if (!threadMetadata.standbyTasks().isEmpty()) {\n                        getTasks(threadMetadata.standbyTasks(), standbyTasks);\n                    }\n                }\n                addTasksToBuilder(activeTasks, taskReportBuilder);\n                taskReportBuilder.append(taskDelimiter);\n                if (!standbyTasks.isEmpty()) {\n                    addTasksToBuilder(standbyTasks, taskReportBuilder);\n                }\n                System.out.println(\"TASK-ASSIGNMENTS:\" + taskReportBuilder);\n            }\n\n            if (newState == State.REBALANCING) {\n                System.out.println(String.format(\"%sStarting a REBALANCE\", upgradePhase));\n            }\n        });\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","realPath":"streams/upgrade-system-tests-21/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2019-10-21 22:51:15","commitOrder":2,"curCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 1) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires one argument (properties-file) but none provided\");\n        }\n        System.out.println(\"Args are \" + Arrays.toString(args));\n        final String propFileName = args[0];\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n\n        final Properties config = new Properties();\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v1.0)\");\n        System.out.println(\"props=\" + streamsProperties);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = streamsProperties.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = streamsProperties.getProperty(\"sink.topic\", \"sink\");\n        final String taskDelimiter = streamsProperties.getProperty(\"task.delimiter\", \"#\");\n        final int reportInterval = Integer.parseInt(streamsProperties.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = streamsProperties.getProperty(\"upgrade.phase\",  \"\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        builder.<String, String>stream(sourceTopic)\n            .peek(new ForeachAction<String, String>() {\n                int recordCounter = 0;\n\n                @Override\n                public void apply(final String key, final String value) {\n                    if (recordCounter++ % reportInterval == 0) {\n                        System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                        System.out.flush();\n                    }\n                }\n            }\n            ).to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), config);\n\n        streams.setStateListener((newState, oldState) -> {\n            if (newState == State.RUNNING && oldState == State.REBALANCING) {\n                System.out.println(String.format(\"%sSTREAMS in a RUNNING State\", upgradePhase));\n                final Set<ThreadMetadata> allThreadMetadata = streams.localThreadsMetadata();\n                final StringBuilder taskReportBuilder = new StringBuilder();\n                final List<String> activeTasks = new ArrayList<>();\n                final List<String> standbyTasks = new ArrayList<>();\n                for (final ThreadMetadata threadMetadata : allThreadMetadata) {\n                    getTasks(threadMetadata.activeTasks(), activeTasks);\n                    if (!threadMetadata.standbyTasks().isEmpty()) {\n                        getTasks(threadMetadata.standbyTasks(), standbyTasks);\n                    }\n                }\n                addTasksToBuilder(activeTasks, taskReportBuilder);\n                taskReportBuilder.append(taskDelimiter);\n                if (!standbyTasks.isEmpty()) {\n                    addTasksToBuilder(standbyTasks, taskReportBuilder);\n                }\n                System.out.println(\"TASK-ASSIGNMENTS:\" + taskReportBuilder);\n            }\n\n            if (newState == State.REBALANCING) {\n                System.out.println(String.format(\"%sStarting a REBALANCE\", upgradePhase));\n            }\n        });\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","date":"2019-10-21 22:51:15","endLine":116,"groupId":"9841","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b0/f46dfd0b9f60ea5ad81e3ac58f97951f52d533.src","preCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires two argument (kafka-url, properties-file) but only \" + args.length + \" provided: \"\n                + (args.length > 0 ? args[0] : \"\"));\n        }\n        System.out.println(\"Args are \" + Arrays.toString(args));\n        final String propFileName = args[1];\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n\n        final Properties config = new Properties();\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v1.0)\");\n        System.out.println(\"props=\" + streamsProperties);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = streamsProperties.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = streamsProperties.getProperty(\"sink.topic\", \"sink\");\n        final String taskDelimiter = streamsProperties.getProperty(\"task.delimiter\", \"#\");\n        final int reportInterval = Integer.parseInt(streamsProperties.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = streamsProperties.getProperty(\"upgrade.phase\",  \"\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        builder.<String, String>stream(sourceTopic)\n            .peek(new ForeachAction<String, String>() {\n                int recordCounter = 0;\n\n                @Override\n                public void apply(final String key, final String value) {\n                    if (recordCounter++ % reportInterval == 0) {\n                        System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                        System.out.flush();\n                    }\n                }\n            }\n            ).to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), config);\n\n        streams.setStateListener((newState, oldState) -> {\n            if (newState == State.RUNNING && oldState == State.REBALANCING) {\n                System.out.println(String.format(\"%sSTREAMS in a RUNNING State\", upgradePhase));\n                final Set<ThreadMetadata> allThreadMetadata = streams.localThreadsMetadata();\n                final StringBuilder taskReportBuilder = new StringBuilder();\n                final List<String> activeTasks = new ArrayList<>();\n                final List<String> standbyTasks = new ArrayList<>();\n                for (final ThreadMetadata threadMetadata : allThreadMetadata) {\n                    getTasks(threadMetadata.activeTasks(), activeTasks);\n                    if (!threadMetadata.standbyTasks().isEmpty()) {\n                        getTasks(threadMetadata.standbyTasks(), standbyTasks);\n                    }\n                }\n                addTasksToBuilder(activeTasks, taskReportBuilder);\n                taskReportBuilder.append(taskDelimiter);\n                if (!standbyTasks.isEmpty()) {\n                    addTasksToBuilder(standbyTasks, taskReportBuilder);\n                }\n                System.out.println(\"TASK-ASSIGNMENTS:\" + taskReportBuilder);\n            }\n\n            if (newState == State.REBALANCING) {\n                System.out.println(String.format(\"%sStarting a REBALANCE\", upgradePhase));\n            }\n        });\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","realPath":"streams/upgrade-system-tests-10/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"6afe05fe896af3b646d79ff6ec3056e04656d2e7","commitMessage":"@@@MINOR: system test clean up (#7552)\n\nGuozhang Wang <wangguoz@gmail.com>.  Sophie Blee-Goldman <sophie@confluent.io>. ","date":"2019-10-21 22:51:15","modifiedFileCount":"10","status":"M","submitter":"Bill Bejeck"},{"authorTime":"2021-05-22 06:05:39","codes":[{"authorDate":"2021-05-22 06:05:39","commitOrder":3,"curCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 1) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires one argument (properties-file) but none provided\");\n        }\n        System.out.println(\"Args are \" + Arrays.toString(args));\n        final String propFileName = args[0];\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n\n        final Properties config = new Properties();\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v2.2)\");\n        System.out.println(\"props=\" + streamsProperties);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000L);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = streamsProperties.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = streamsProperties.getProperty(\"sink.topic\", \"sink\");\n        final String taskDelimiter = streamsProperties.getProperty(\"task.delimiter\", \"#\");\n        final int reportInterval = Integer.parseInt(streamsProperties.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = streamsProperties.getProperty(\"upgrade.phase\",  \"\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        builder.<String, String>stream(sourceTopic)\n            .peek(new ForeachAction<String, String>() {\n                int recordCounter = 0;\n\n                @Override\n                public void apply(final String key, final String value) {\n                    if (recordCounter++ % reportInterval == 0) {\n                        System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                        System.out.flush();\n                    }\n                }\n            }\n            ).to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), config);\n\n        streams.setStateListener((newState, oldState) -> {\n            if (newState == State.RUNNING && oldState == State.REBALANCING) {\n                System.out.println(String.format(\"%sSTREAMS in a RUNNING State\", upgradePhase));\n                final Set<ThreadMetadata> allThreadMetadata = streams.localThreadsMetadata();\n                final StringBuilder taskReportBuilder = new StringBuilder();\n                final List<String> activeTasks = new ArrayList<>();\n                final List<String> standbyTasks = new ArrayList<>();\n                for (final ThreadMetadata threadMetadata : allThreadMetadata) {\n                    getTasks(threadMetadata.activeTasks(), activeTasks);\n                    if (!threadMetadata.standbyTasks().isEmpty()) {\n                        getTasks(threadMetadata.standbyTasks(), standbyTasks);\n                    }\n                }\n                addTasksToBuilder(activeTasks, taskReportBuilder);\n                taskReportBuilder.append(taskDelimiter);\n                if (!standbyTasks.isEmpty()) {\n                    addTasksToBuilder(standbyTasks, taskReportBuilder);\n                }\n                System.out.println(\"TASK-ASSIGNMENTS:\" + taskReportBuilder);\n            }\n\n            if (newState == State.REBALANCING) {\n                System.out.println(String.format(\"%sStarting a REBALANCE\", upgradePhase));\n            }\n        });\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","date":"2021-05-22 06:05:39","endLine":116,"groupId":"10308","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/29/9fffacaaf7cf015db2477b4a498d585ff7509c.src","preCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 1) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires one argument (properties-file) but none provided\");\n        }\n        System.out.println(\"Args are \" + Arrays.toString(args));\n        final String propFileName = args[0];\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n\n        final Properties config = new Properties();\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v2.2)\");\n        System.out.println(\"props=\" + streamsProperties);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = streamsProperties.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = streamsProperties.getProperty(\"sink.topic\", \"sink\");\n        final String taskDelimiter = streamsProperties.getProperty(\"task.delimiter\", \"#\");\n        final int reportInterval = Integer.parseInt(streamsProperties.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = streamsProperties.getProperty(\"upgrade.phase\",  \"\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        builder.<String, String>stream(sourceTopic)\n            .peek(new ForeachAction<String, String>() {\n                int recordCounter = 0;\n\n                @Override\n                public void apply(final String key, final String value) {\n                    if (recordCounter++ % reportInterval == 0) {\n                        System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                        System.out.flush();\n                    }\n                }\n            }\n            ).to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), config);\n\n        streams.setStateListener((newState, oldState) -> {\n            if (newState == State.RUNNING && oldState == State.REBALANCING) {\n                System.out.println(String.format(\"%sSTREAMS in a RUNNING State\", upgradePhase));\n                final Set<ThreadMetadata> allThreadMetadata = streams.localThreadsMetadata();\n                final StringBuilder taskReportBuilder = new StringBuilder();\n                final List<String> activeTasks = new ArrayList<>();\n                final List<String> standbyTasks = new ArrayList<>();\n                for (final ThreadMetadata threadMetadata : allThreadMetadata) {\n                    getTasks(threadMetadata.activeTasks(), activeTasks);\n                    if (!threadMetadata.standbyTasks().isEmpty()) {\n                        getTasks(threadMetadata.standbyTasks(), standbyTasks);\n                    }\n                }\n                addTasksToBuilder(activeTasks, taskReportBuilder);\n                taskReportBuilder.append(taskDelimiter);\n                if (!standbyTasks.isEmpty()) {\n                    addTasksToBuilder(standbyTasks, taskReportBuilder);\n                }\n                System.out.println(\"TASK-ASSIGNMENTS:\" + taskReportBuilder);\n            }\n\n            if (newState == State.REBALANCING) {\n                System.out.println(String.format(\"%sStarting a REBALANCE\", upgradePhase));\n            }\n        });\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","realPath":"streams/upgrade-system-tests-21/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2021-05-22 06:05:39","commitOrder":3,"curCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 1) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires one argument (properties-file) but none provided\");\n        }\n        System.out.println(\"Args are \" + Arrays.toString(args));\n        final String propFileName = args[0];\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n\n        final Properties config = new Properties();\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v1.0)\");\n        System.out.println(\"props=\" + streamsProperties);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000L);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = streamsProperties.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = streamsProperties.getProperty(\"sink.topic\", \"sink\");\n        final String taskDelimiter = streamsProperties.getProperty(\"task.delimiter\", \"#\");\n        final int reportInterval = Integer.parseInt(streamsProperties.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = streamsProperties.getProperty(\"upgrade.phase\",  \"\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        builder.<String, String>stream(sourceTopic)\n            .peek(new ForeachAction<String, String>() {\n                int recordCounter = 0;\n\n                @Override\n                public void apply(final String key, final String value) {\n                    if (recordCounter++ % reportInterval == 0) {\n                        System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                        System.out.flush();\n                    }\n                }\n            }\n            ).to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), config);\n\n        streams.setStateListener((newState, oldState) -> {\n            if (newState == State.RUNNING && oldState == State.REBALANCING) {\n                System.out.println(String.format(\"%sSTREAMS in a RUNNING State\", upgradePhase));\n                final Set<ThreadMetadata> allThreadMetadata = streams.localThreadsMetadata();\n                final StringBuilder taskReportBuilder = new StringBuilder();\n                final List<String> activeTasks = new ArrayList<>();\n                final List<String> standbyTasks = new ArrayList<>();\n                for (final ThreadMetadata threadMetadata : allThreadMetadata) {\n                    getTasks(threadMetadata.activeTasks(), activeTasks);\n                    if (!threadMetadata.standbyTasks().isEmpty()) {\n                        getTasks(threadMetadata.standbyTasks(), standbyTasks);\n                    }\n                }\n                addTasksToBuilder(activeTasks, taskReportBuilder);\n                taskReportBuilder.append(taskDelimiter);\n                if (!standbyTasks.isEmpty()) {\n                    addTasksToBuilder(standbyTasks, taskReportBuilder);\n                }\n                System.out.println(\"TASK-ASSIGNMENTS:\" + taskReportBuilder);\n            }\n\n            if (newState == State.REBALANCING) {\n                System.out.println(String.format(\"%sStarting a REBALANCE\", upgradePhase));\n            }\n        });\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","date":"2021-05-22 06:05:39","endLine":116,"groupId":"10308","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bd/a6ac458336f879bba76cc9aff91ed54b227aee.src","preCode":"    public static void main(final String[] args) throws Exception {\n        if (args.length < 1) {\n            System.err.println(\"StreamsUpgradeToCooperativeRebalanceTest requires one argument (properties-file) but none provided\");\n        }\n        System.out.println(\"Args are \" + Arrays.toString(args));\n        final String propFileName = args[0];\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n\n        final Properties config = new Properties();\n        System.out.println(\"StreamsTest instance started (StreamsUpgradeToCooperativeRebalanceTest v1.0)\");\n        System.out.println(\"props=\" + streamsProperties);\n\n        config.put(StreamsConfig.APPLICATION_ID_CONFIG, \"cooperative-rebalance-upgrade\");\n        config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        config.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        config.putAll(streamsProperties);\n\n        final String sourceTopic = streamsProperties.getProperty(\"source.topic\", \"source\");\n        final String sinkTopic = streamsProperties.getProperty(\"sink.topic\", \"sink\");\n        final String taskDelimiter = streamsProperties.getProperty(\"task.delimiter\", \"#\");\n        final int reportInterval = Integer.parseInt(streamsProperties.getProperty(\"report.interval\", \"100\"));\n        final String upgradePhase = streamsProperties.getProperty(\"upgrade.phase\",  \"\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        builder.<String, String>stream(sourceTopic)\n            .peek(new ForeachAction<String, String>() {\n                int recordCounter = 0;\n\n                @Override\n                public void apply(final String key, final String value) {\n                    if (recordCounter++ % reportInterval == 0) {\n                        System.out.println(String.format(\"%sProcessed %d records so far\", upgradePhase, recordCounter));\n                        System.out.flush();\n                    }\n                }\n            }\n            ).to(sinkTopic);\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), config);\n\n        streams.setStateListener((newState, oldState) -> {\n            if (newState == State.RUNNING && oldState == State.REBALANCING) {\n                System.out.println(String.format(\"%sSTREAMS in a RUNNING State\", upgradePhase));\n                final Set<ThreadMetadata> allThreadMetadata = streams.localThreadsMetadata();\n                final StringBuilder taskReportBuilder = new StringBuilder();\n                final List<String> activeTasks = new ArrayList<>();\n                final List<String> standbyTasks = new ArrayList<>();\n                for (final ThreadMetadata threadMetadata : allThreadMetadata) {\n                    getTasks(threadMetadata.activeTasks(), activeTasks);\n                    if (!threadMetadata.standbyTasks().isEmpty()) {\n                        getTasks(threadMetadata.standbyTasks(), standbyTasks);\n                    }\n                }\n                addTasksToBuilder(activeTasks, taskReportBuilder);\n                taskReportBuilder.append(taskDelimiter);\n                if (!standbyTasks.isEmpty()) {\n                    addTasksToBuilder(standbyTasks, taskReportBuilder);\n                }\n                System.out.println(\"TASK-ASSIGNMENTS:\" + taskReportBuilder);\n            }\n\n            if (newState == State.REBALANCING) {\n                System.out.println(String.format(\"%sStarting a REBALANCE\", upgradePhase));\n            }\n        });\n\n\n        streams.start();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            streams.close();\n            System.out.println(String.format(\"%sCOOPERATIVE-REBALANCE-TEST-CLIENT-CLOSED\", upgradePhase));\n            System.out.flush();\n        }));\n    }\n","realPath":"streams/upgrade-system-tests-10/src/test/java/org/apache/kafka/streams/tests/StreamsUpgradeToCooperativeRebalanceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"}],"commitId":"ae8b7845374b6bb01e1ae9ca27f6ab967561e011","commitMessage":"@@@KAFKA-12499: add transaction timeout verification (#10482)\n\nThis PR tries to add the check for transaction timeout for a comparison against commit interval of streams. If transaction timeout is smaller than commit interval.  stream should crash and inform user to update their commit interval to be larger or equal to the given transaction timeout.  or vise versa.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2021-05-22 06:05:39","modifiedFileCount":"65","status":"M","submitter":"Boyang Chen"}]
