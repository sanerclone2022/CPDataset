[{"authorTime":"2017-09-18 16:53:27","codes":[{"authorDate":"2017-09-22 07:33:50","commitOrder":6,"curCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockStateStoreSupplier.MockStateStore stateStore = new MockStateStoreSupplier.MockStateStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, false, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","date":"2017-09-22 07:33:50","endLine":517,"groupId":"10457","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/135d581012f936867eaa4792c5d07f4b2da966.src","preCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockStateStoreSupplier.MockStateStore stateStore = new MockStateStoreSupplier.MockStateStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, false, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":491,"status":"B"},{"authorDate":"2017-09-18 16:53:27","commitOrder":6,"curCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n                logContext);\n\n        final MockStateStoreSupplier.MockStateStore stateStore = new MockStateStoreSupplier.MockStateStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, false, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","date":"2017-09-18 16:53:27","endLine":516,"groupId":"10459","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1d/b2200a59d32137f68f282e70216983996b1368.src","preCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n                logContext);\n\n        final MockStateStoreSupplier.MockStateStore stateStore = new MockStateStoreSupplier.MockStateStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, false, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":490,"status":"NB"}],"commitId":"402aa093db243965d2b6c04118ac7ee6d196fd45","commitMessage":"@@@KAFKA-5937: Improve ProcessorStateManager exception handling\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Ted Yu <yuzhihong@gmail.com>.  Damian Guy <damian.guy@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3913 from mjsax/kafka-5937-exceptions-processor-state-manager\n","date":"2017-09-22 07:33:50","modifiedFileCount":"3","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-09-28 18:00:31","codes":[{"authorDate":"2017-09-28 18:00:31","commitOrder":7,"curCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockStateStoreSupplier.MockStateStore stateStore = new MockStateStoreSupplier.MockStateStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","date":"2017-09-28 18:00:31","endLine":517,"groupId":"10457","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ed/e6dd4377a948238c890f24a1534a232050b77b.src","preCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockStateStoreSupplier.MockStateStore stateStore = new MockStateStoreSupplier.MockStateStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, false, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":491,"status":"M"},{"authorDate":"2017-09-28 18:00:31","commitOrder":7,"curCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n                logContext);\n\n        final MockStateStoreSupplier.MockStateStore stateStore = new MockStateStoreSupplier.MockStateStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","date":"2017-09-28 18:00:31","endLine":546,"groupId":"10459","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ed/e6dd4377a948238c890f24a1534a232050b77b.src","preCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n                logContext);\n\n        final MockStateStoreSupplier.MockStateStore stateStore = new MockStateStoreSupplier.MockStateStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, false, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":520,"status":"M"}],"commitId":"e5f2471c548fc490a42dd0321bcf7fcdd4ddc52d","commitMessage":"@@@KAFKA-5949; User Callback Exceptions need to be handled properly\n\n - catch user exception in user callback (TimestampExtractor.  DeserializationHandler.  StateRestoreListener) and wrap with StreamsException\n\nAdditional cleanup:\n - rename globalRestoreListener to userRestoreListener\n - remove unnecessary interface -> collapse SourceNodeRecordDeserializer and RecordDeserializer\n - removed unused parameter loggingEnabled from ProcessorContext#register\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>.  Damian Guy <damian.guy@gmail.com>\n\nCloses #3939 from mjsax/kafka-5949-exceptions-user-callbacks\n","date":"2017-09-28 18:00:31","modifiedFileCount":"46","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-12-05 02:21:42","codes":[{"authorDate":"2017-12-05 02:21:42","commitOrder":8,"curCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockStateStore stateStore = new MockStateStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","date":"2017-12-05 02:21:42","endLine":525,"groupId":"19521","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6e/d224512d09000b8a2faf2638497e714818d462.src","preCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockStateStoreSupplier.MockStateStore stateStore = new MockStateStoreSupplier.MockStateStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":499,"status":"M"},{"authorDate":"2017-12-05 02:21:42","commitOrder":8,"curCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockStateStore stateStore = new MockStateStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","date":"2017-12-05 02:21:42","endLine":554,"groupId":"19521","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6e/d224512d09000b8a2faf2638497e714818d462.src","preCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockStateStoreSupplier.MockStateStore stateStore = new MockStateStoreSupplier.MockStateStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":528,"status":"M"}],"commitId":"4b8a29f12a142d02be0b64eac71975b6a129d04a","commitMessage":"@@@KAFKA-6150: KIP-204 part III; Purge repartition topics with the admin client\n\n1. Add the repartition topics information into ProcessorTopology: personally I do not like leaking this information into the topology but it seems not other simple way around.\n2. StreamTask: added one more function to expose the consumed offsets from repartition topics only.\n3. TaskManager: use the AdminClient to send the gathered offsets to delete only if a) previous call has completed and client intentionally ignore-and-log any errors.  or b) no requests have ever called before.\n\nNOTE that this code depends on the assumption that purge is only called right after the commit has succeeded.  hence we presume all consumed offsets are committed.\n\n4. MINOR: Added a few more constructor for ProcessorTopology for cleaner unit tests.\n5. MINOR: Extracted MockStateStore out of the deprecated class.\n6. MINOR: Made a pass over some unit test classes for clean ups.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Damian Guy <damian.guy@gmail.com>\n\nCloses #4270 from guozhangwang/K6150-purge-repartition-topics\n","date":"2017-12-05 02:21:42","modifiedFileCount":"20","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-06-14 06:13:55","codes":[{"authorDate":"2017-12-05 02:21:42","commitOrder":9,"curCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockStateStore stateStore = new MockStateStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","date":"2017-12-05 02:21:42","endLine":525,"groupId":"19521","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6e/d224512d09000b8a2faf2638497e714818d462.src","preCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockStateStore stateStore = new MockStateStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":499,"status":"N"},{"authorDate":"2018-06-14 06:13:55","commitOrder":9,"curCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockStateStore stateStore = new MockStateStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(Collections.emptyMap());\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","date":"2018-06-14 06:13:55","endLine":558,"groupId":"19521","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/03cd4f2949aa600b52fe7267291b9b689ebf0a.src","preCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockStateStore stateStore = new MockStateStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":532,"status":"M"}],"commitId":"ff96d574371811c75f4f454847f67508d1de98c0","commitMessage":"@@@KAFKA-6860: Fix NPE in Kafka Streams with EOS enabled (#5187)\n\nReviewers: John Roesler <john@confluent.io>.  Ko Byoung Kwon.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-06-14 06:13:55","modifiedFileCount":"4","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-09-14 04:04:09","codes":[{"authorDate":"2018-09-14 04:04:09","commitOrder":10,"curCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockKeyValueStore stateStore = new MockKeyValueStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","date":"2018-09-14 04:04:09","endLine":536,"groupId":"19521","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/95a688d6f65143b3db88329d19f3cd59c462e9.src","preCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockStateStore stateStore = new MockStateStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"M"},{"authorDate":"2018-09-14 04:04:09","commitOrder":10,"curCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockKeyValueStore stateStore = new MockKeyValueStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(Collections.emptyMap());\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","date":"2018-09-14 04:04:09","endLine":565,"groupId":"19521","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/95a688d6f65143b3db88329d19f3cd59c462e9.src","preCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockStateStore stateStore = new MockStateStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(Collections.emptyMap());\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"M"}],"commitId":"466d89306ea23d1f17be0914416944618ceb9f86","commitMessage":"@@@MINOR: Insure that KafkaStreams client is closed if test fails (#5618)\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  John Roessler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Eno Thereska <enother@amazon.com>\n","date":"2018-09-14 04:04:09","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-02-23 13:49:28","codes":[{"authorDate":"2018-09-14 04:04:09","commitOrder":11,"curCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockKeyValueStore stateStore = new MockKeyValueStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","date":"2018-09-14 04:04:09","endLine":536,"groupId":"19521","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/95a688d6f65143b3db88329d19f3cd59c462e9.src","preCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockKeyValueStore stateStore = new MockKeyValueStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"N"},{"authorDate":"2019-02-23 13:49:28","commitOrder":11,"curCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockKeyValueStore stateStore = new MockKeyValueStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(true);\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","date":"2019-02-23 13:49:28","endLine":592,"groupId":"19521","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7d/8298296a69eddd3f9f695382d86d3f239821dc.src","preCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockKeyValueStore stateStore = new MockKeyValueStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(Collections.emptyMap());\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"M"}],"commitId":"1f9aa01a5b3b59d90499a059d719af03483d5130","commitMessage":"@@@ KAFKA-7672 : force write checkpoint during StreamTask #suspend (#6115)\n\nThis fix is aiming for #2 issue pointed out within https://issues.apache.org/jira/browse/KAFKA-7672\nIn the current setup.  we do offset checkpoint file write when EOS is turned on during #suspend.  which introduces the potential race condition during StateManager #closeSuspend call. To mitigate the problem.  we attempt to always write checkpoint file in #suspend call.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Matthias J. Sax <mjsax@apache.org>.   John Roesler <john@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-02-23 13:49:28","modifiedFileCount":"15","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-04-23 05:53:51","codes":[{"authorDate":"2019-04-23 05:53:51","commitOrder":12,"curCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockKeyValueStore stateStore = new MockKeyValueStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","date":"2019-04-23 05:53:51","endLine":600,"groupId":"19521","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5c/26dd27b2cc8f47e8e87069a97ca6ab1b0943d4.src","preCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockKeyValueStore stateStore = new MockKeyValueStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"M"},{"authorDate":"2019-04-23 05:53:51","commitOrder":12,"curCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockKeyValueStore stateStore = new MockKeyValueStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(true);\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","date":"2019-04-23 05:53:51","endLine":629,"groupId":"19521","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5c/26dd27b2cc8f47e8e87069a97ca6ab1b0943d4.src","preCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            Collections.singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockKeyValueStore stateStore = new MockKeyValueStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(true);\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":603,"status":"M"}],"commitId":"58d6043d4c88892f6718e31799503c3482000ea2","commitMessage":"@@@KAFKA-8204: fix Streams store flush order (#6555)\n\nStreams previously flushed stores in the order of their registration.  which is arbitrary. Because stores may forward values upon flush (as in cached state stores).  we must flush stores in topological order.\n\nReviewers: Bill Bejeck <bbejeck@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-04-23 05:53:51","modifiedFileCount":"12","status":"M","submitter":"John Roesler"},{"authorTime":"2020-02-05 13:06:39","codes":[{"authorDate":"2020-02-05 13:06:39","commitOrder":13,"curCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() {\n        final RuntimeException exception = new RuntimeException(\"KABOOM!\");\n        final ProcessorStateManager stateManager = getStateManager(Task.TaskType.ACTIVE);\n        final MockKeyValueStore stateStore = new MockKeyValueStore(persistentStoreName, true) {\n            @Override\n            public void flush() {\n                throw exception;\n            }\n        };\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n\n        final ProcessorStateException thrown = assertThrows(ProcessorStateException.class, stateManager::flush);\n        assertEquals(exception, thrown.getCause());\n    }\n","date":"2020-02-05 13:06:39","endLine":529,"groupId":"4131","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/3f166a0fad092d05eefc688977f13cabff80f9.src","preCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockKeyValueStore stateStore = new MockKeyValueStore(storeName, true) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.flush();\n            fail(\"Should throw ProcessorStateException if store flush throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"M"},{"authorDate":"2020-02-05 13:06:39","commitOrder":13,"curCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() {\n        final RuntimeException exception = new RuntimeException(\"KABOOM!\");\n        final ProcessorStateManager stateManager = getStateManager(Task.TaskType.ACTIVE);\n        final MockKeyValueStore stateStore = new MockKeyValueStore(persistentStoreName, true) {\n            @Override\n            public void close() {\n                throw exception;\n            }\n        };\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n\n        final ProcessorStateException thrown = assertThrows(ProcessorStateException.class, () -> stateManager.close());\n        assertEquals(exception, thrown.getCause());\n    }\n","date":"2020-02-05 13:06:39","endLine":561,"groupId":"4131","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/3f166a0fad092d05eefc688977f13cabff80f9.src","preCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() throws IOException {\n\n        final ProcessorStateManager stateManager = new ProcessorStateManager(\n            taskId,\n            Collections.singleton(changelogTopicPartition),\n            false,\n            stateDirectory,\n            singletonMap(storeName, changelogTopic),\n            changelogReader,\n            false,\n            logContext);\n\n        final MockKeyValueStore stateStore = new MockKeyValueStore(storeName, true) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        };\n        stateManager.register(stateStore, stateStore.stateRestoreCallback);\n\n        try {\n            stateManager.close(true);\n            fail(\"Should throw ProcessorStateException if store close throws exception\");\n        } catch (final ProcessorStateException e) {\n            \r\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":548,"status":"M"}],"commitId":"4090f9a2b0a95e4da127e4786007542276d97520","commitMessage":"@@@KAFKA-9113: Clean up task management and state management (#7997)\n\nThis PR is collaborated by Guozhang Wang and John Roesler. It is a significant tech debt cleanup on task management and state management.  and is broken down by several sub-tasks listed below:\n\nExtract embedded clients (producer and consumer) into RecordCollector from StreamTask.\nguozhangwang#2\nguozhangwang#5\n\nConsolidate the standby updating and active restoring logic into ChangelogReader and extract out of StreamThread.\nguozhangwang#3\nguozhangwang#4\n\nIntroduce Task state life cycle (created.  restoring.  running.  suspended.  closing).  and refactor the task operations based on the current state.\nguozhangwang#6\nguozhangwang#7\n\nConsolidate AssignedTasks into TaskManager and simplify the logic of changelog management and task management (since they are already moved in step 2) and 3)).\nguozhangwang#8\nguozhangwang#9\n\nAlso simplified the StreamThread logic a bit as the embedded clients / changelog restoration logic has been moved into step 1) and 2).\nguozhangwang#10\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-02-05 13:06:39","modifiedFileCount":"76","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-02-22 13:40:28","codes":[{"authorDate":"2020-02-05 13:06:39","commitOrder":14,"curCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() {\n        final RuntimeException exception = new RuntimeException(\"KABOOM!\");\n        final ProcessorStateManager stateManager = getStateManager(Task.TaskType.ACTIVE);\n        final MockKeyValueStore stateStore = new MockKeyValueStore(persistentStoreName, true) {\n            @Override\n            public void flush() {\n                throw exception;\n            }\n        };\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n\n        final ProcessorStateException thrown = assertThrows(ProcessorStateException.class, stateManager::flush);\n        assertEquals(exception, thrown.getCause());\n    }\n","date":"2020-02-05 13:06:39","endLine":529,"groupId":"102465","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/3f166a0fad092d05eefc688977f13cabff80f9.src","preCode":"    public void shouldThrowProcessorStateExceptionOnFlushIfStoreThrowsAnException() {\n        final RuntimeException exception = new RuntimeException(\"KABOOM!\");\n        final ProcessorStateManager stateManager = getStateManager(Task.TaskType.ACTIVE);\n        final MockKeyValueStore stateStore = new MockKeyValueStore(persistentStoreName, true) {\n            @Override\n            public void flush() {\n                throw exception;\n            }\n        };\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n\n        final ProcessorStateException thrown = assertThrows(ProcessorStateException.class, stateManager::flush);\n        assertEquals(exception, thrown.getCause());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"N"},{"authorDate":"2020-02-22 13:40:28","commitOrder":14,"curCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() {\n        final RuntimeException exception = new RuntimeException(\"KABOOM!\");\n        final ProcessorStateManager stateManager = getStateManager(Task.TaskType.ACTIVE);\n        final MockKeyValueStore stateStore = new MockKeyValueStore(persistentStoreName, true) {\n            @Override\n            public void close() {\n                throw exception;\n            }\n        };\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n\n        final ProcessorStateException thrown = assertThrows(ProcessorStateException.class, stateManager::close);\n        assertEquals(exception, thrown.getCause());\n    }\n","date":"2020-02-22 13:40:28","endLine":561,"groupId":"102465","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/4f9dc3c8be2ca0841b81e1307c1ba803bb67e8.src","preCode":"    public void shouldThrowProcessorStateExceptionOnCloseIfStoreThrowsAnException() {\n        final RuntimeException exception = new RuntimeException(\"KABOOM!\");\n        final ProcessorStateManager stateManager = getStateManager(Task.TaskType.ACTIVE);\n        final MockKeyValueStore stateStore = new MockKeyValueStore(persistentStoreName, true) {\n            @Override\n            public void close() {\n                throw exception;\n            }\n        };\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n\n        final ProcessorStateException thrown = assertThrows(ProcessorStateException.class, () -> stateManager.close());\n        assertEquals(exception, thrown.getCause());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":548,"status":"M"}],"commitId":"97d107a270d3e9b795b42d209f838f2f81009ce8","commitMessage":"@@@KAFKA-9441: Add internal TransactionManager (#8105)\n\nUpfront refactoring for KIP-447.\n\nIntroduces `StreamsProducer` that allows to share a producer over multiple tasks and track the TX status.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-02-22 13:40:28","modifiedFileCount":"19","status":"M","submitter":"Matthias J. Sax"}]
