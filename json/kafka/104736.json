[{"authorTime":"2016-04-21 05:09:59","codes":[{"authorDate":"2016-06-20 06:31:04","commitOrder":4,"curCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        expectInitializeTask();\n        expectPollInitialAssignment();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.flush(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.poll(Long.MAX_VALUE); \r\n        workerTask.poll(Long.MAX_VALUE); \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-06-20 06:31:04","endLine":349,"groupId":"13388","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWakeupInCommitSyncCausesRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6a/1407489403ad7a150e81fcd9585e3168a103d1.src","preCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        expectInitializeTask();\n        expectPollInitialAssignment();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.flush(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.poll(Long.MAX_VALUE); \r\n        workerTask.poll(Long.MAX_VALUE); \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"B"},{"authorDate":"2016-04-21 05:09:59","commitOrder":4,"curCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.flush(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2016-04-21 05:09:59","endLine":351,"groupId":"16974","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"expectRebalanceAssignmentError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/5e30f2e5994bf70cda90a5a70ca7d78eaf52b0.src","preCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.flush(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"NB"}],"commitId":"2c9796114d0a9638be79b4165d0096c7a63babe7","commitMessage":"@@@KAFKA-3850: WorkerSinkTask commit prior to rebalance should be retried on wakeup\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Liquan Pei <liquanpei@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1511 from hachikuji/retry-commit-on-wakeup-in-sinks\n","date":"2016-06-20 06:31:04","modifiedFileCount":"2","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-04-21 05:09:59","codes":[{"authorDate":"2016-09-27 05:54:01","commitOrder":5,"curCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        expectInitializeTask();\n        expectPollInitialAssignment();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.flush(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-09-27 05:54:01","endLine":350,"groupId":"13388","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWakeupInCommitSyncCausesRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ca/218c37c1ca72964c0195d7bd4e4f3f971b3e50.src","preCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        expectInitializeTask();\n        expectPollInitialAssignment();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.flush(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.poll(Long.MAX_VALUE); \r\n        workerTask.poll(Long.MAX_VALUE); \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"},{"authorDate":"2016-04-21 05:09:59","commitOrder":5,"curCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.flush(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2016-04-21 05:09:59","endLine":351,"groupId":"16974","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"expectRebalanceAssignmentError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/5e30f2e5994bf70cda90a5a70ca7d78eaf52b0.src","preCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.flush(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"N"}],"commitId":"b75245cfbbefc712103b9329da0f27a205baa6aa","commitMessage":"@@@MINOR: Wakeups propagated from commitOffsets in WorkerSinkTask should be caught\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1907 from hachikuji/catch-wakeup-worker-sink-task\n","date":"2016-09-27 05:54:01","modifiedFileCount":"2","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-12-02 07:01:09","codes":[{"authorDate":"2016-12-02 07:01:09","commitOrder":6,"curCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConvertMessages(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-12-02 07:01:09","endLine":365,"groupId":"13388","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWakeupInCommitSyncCausesRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/9e56b689704374baa27e4f69b551ecdc04378d.src","preCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        expectInitializeTask();\n        expectPollInitialAssignment();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.flush(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"},{"authorDate":"2016-12-02 07:01:09","commitOrder":6,"curCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2016-12-02 07:01:09","endLine":630,"groupId":"20533","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"expectRebalanceAssignmentError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/9e56b689704374baa27e4f69b551ecdc04378d.src","preCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.flush(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"M"}],"commitId":"b45a67ede9021985c8df87c633b225231092c0c9","commitMessage":"@@@KAFKA-4161: KIP-89: Allow sink connectors to decouple flush and offset commit\n\nAuthor: Shikhar Bhushan <shikhar@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #2139 from shikhar/kafka-4161-deux\n","date":"2016-12-02 07:01:09","modifiedFileCount":"6","status":"M","submitter":"Shikhar Bhushan"},{"authorTime":"2016-12-02 07:01:09","codes":[{"authorDate":"2016-12-25 06:25:01","commitOrder":7,"curCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConvertMessages(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-12-25 06:25:01","endLine":370,"groupId":"13388","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testWakeupInCommitSyncCausesRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d4/427d1100466bc981eb1aa16acf9306a6762fc9.src","preCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConvertMessages(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"},{"authorDate":"2016-12-02 07:01:09","commitOrder":7,"curCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2016-12-02 07:01:09","endLine":630,"groupId":"20533","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"expectRebalanceAssignmentError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/9e56b689704374baa27e4f69b551ecdc04378d.src","preCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"N"}],"commitId":"d092146247f3b3de061ecdb4ddfeac9321d8cf73","commitMessage":"@@@KAFKA-4527: task status was being updated before actual pause/resume\n\nh/t ewencp for pointing out the issue\n\nAuthor: Shikhar Bhushan <shikhar@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #2277 from shikhar/kafka-4527\n","date":"2016-12-25 06:25:01","modifiedFileCount":"5","status":"M","submitter":"Shikhar Bhushan"},{"authorTime":"2016-12-02 07:01:09","codes":[{"authorDate":"2017-01-13 08:14:53","commitOrder":8,"curCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-01-13 08:14:53","endLine":372,"groupId":"13388","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testWakeupInCommitSyncCausesRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f9/3e3859d016807d8f5bc353dddbcf1613f0b340.src","preCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConvertMessages(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"},{"authorDate":"2016-12-02 07:01:09","commitOrder":8,"curCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2016-12-02 07:01:09","endLine":630,"groupId":"20533","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"expectRebalanceAssignmentError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/9e56b689704374baa27e4f69b551ecdc04378d.src","preCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"N"}],"commitId":"2f904883237c476fd82a202f7ddda93fe56eef36","commitMessage":"@@@KAFKA-3209: KIP-66: single message transforms\n\nBesides API and runtime changes.  this PR also includes 2 data transformations (`InsertField`.  `HoistToStruct`) and 1 routing transformation (`TimestampRouter`).\n\nThere is some gnarliness in `ConnectorConfig` / `ConfigDef` around creating.  parsing and validating a dynamic `ConfigDef`.\n\nAuthor: Shikhar Bhushan <shikhar@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #2299 from shikhar/smt-2017\n","date":"2017-01-13 08:14:53","modifiedFileCount":"16","status":"M","submitter":"Shikhar Bhushan"},{"authorTime":"2016-12-02 07:01:09","codes":[{"authorDate":"2017-09-27 13:23:37","commitOrder":9,"curCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-27 13:23:37","endLine":403,"groupId":"13388","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testWakeupInCommitSyncCausesRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/4c02219e2ea151234deadc90ebb7815828f1d9.src","preCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"},{"authorDate":"2016-12-02 07:01:09","commitOrder":9,"curCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2016-12-02 07:01:09","endLine":630,"groupId":"20533","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"expectRebalanceAssignmentError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/9e56b689704374baa27e4f69b551ecdc04378d.src","preCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"N"}],"commitId":"73cc416664dbc8e1442f70cb3c4cd8f4d365ea50","commitMessage":"@@@KAFKA-5900: Add task metrics common to both sink and source tasks\n\nAdded metrics that are common to both sink and source tasks.\n\nMarked as \"**WIP**\" since this PR is built upon #3864.  and will need to be rebased once that has been merged into `trunk`. However.  I would still appreciate initial reviews since this PR is largely additive.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3911 from rhauch/kafka-5900\n","date":"2017-09-27 13:23:37","modifiedFileCount":"16","status":"M","submitter":"Randall Hauch"},{"authorTime":"2016-12-02 07:01:09","codes":[{"authorDate":"2017-10-04 02:52:14","commitOrder":10,"curCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        time.sleep(30000L);\n        workerTask.initializeAndStart();\n        time.sleep(30000L);\n\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.33333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-skip-total\", 0.0);\n        assertTaskMetricValue(\"status-running\", 1.0);\n        assertTaskMetricValue(\"status-paused\", 0.0);\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 1.0);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-04 02:52:14","endLine":507,"groupId":"13388","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testWakeupInCommitSyncCausesRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/29/0cdd0626ac9ab371b7d8770cbdca0c9442858f.src","preCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":415,"status":"M"},{"authorDate":"2016-12-02 07:01:09","commitOrder":10,"curCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2016-12-02 07:01:09","endLine":630,"groupId":"20533","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"expectRebalanceAssignmentError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/9e56b689704374baa27e4f69b551ecdc04378d.src","preCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"N"}],"commitId":"05357b7030c784a6548453f533d3c00e19548ba2","commitMessage":"@@@KAFKA-5902: Added sink task metrics (KIP-196)\n\nAdded Connect metrics specific to source tasks.  and builds upon #3864 and #3911 that have already been merged into `trunk`.  and #3959 that has yet to be merged.\n\nI'll rebase this PR when the latter is merged.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3975 from rhauch/kafka-5902\n","date":"2017-10-04 02:52:14","modifiedFileCount":"6","status":"M","submitter":"Randall Hauch"},{"authorTime":"2016-12-02 07:01:09","codes":[{"authorDate":"2017-10-05 02:05:50","commitOrder":11,"curCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        time.sleep(30000L);\n        workerTask.initializeAndStart();\n        time.sleep(30000L);\n\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.33333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status-running\", 1.0);\n        assertTaskMetricValue(\"status-paused\", 0.0);\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 1.0);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-05 02:05:50","endLine":507,"groupId":"13388","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testWakeupInCommitSyncCausesRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/2d66b2ec4d24d2f27c7ea8af06d699587ef667.src","preCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        time.sleep(30000L);\n        workerTask.initializeAndStart();\n        time.sleep(30000L);\n\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.33333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-skip-total\", 0.0);\n        assertTaskMetricValue(\"status-running\", 1.0);\n        assertTaskMetricValue(\"status-paused\", 0.0);\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 1.0);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":415,"status":"M"},{"authorDate":"2016-12-02 07:01:09","commitOrder":11,"curCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2016-12-02 07:01:09","endLine":630,"groupId":"20533","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"expectRebalanceAssignmentError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/9e56b689704374baa27e4f69b551ecdc04378d.src","preCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"N"}],"commitId":"11afff09908035166febf9b75c410112693ff98c","commitMessage":"@@@KAFKA-5990: Enable generation of metrics docs for Connect (KIP-196)\n\nA new mechanism was added recently to the Metrics framework to make it easier to generate the documentation. It uses a registry with a MetricsNameTemplate for each metric.  and then those templates are used when creating the actual metrics. The metrics framework provides utilities that can generate the HTML documentation from the registry of templates.\n\nThis change moves the recently-added Connect metrics over to use these templates and to then generate the metric documentation for Connect.\n\nThis PR is based upon #3975 and can be rebased once that has been merged.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3987 from rhauch/kafka-5990\n","date":"2017-10-05 02:05:50","modifiedFileCount":"9","status":"M","submitter":"Randall Hauch"},{"authorTime":"2016-12-02 07:01:09","codes":[{"authorDate":"2017-10-06 02:23:11","commitOrder":12,"curCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        time.sleep(30000L);\n        workerTask.initializeAndStart();\n        time.sleep(30000L);\n\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.33333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 1.0);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":501,"groupId":"13388","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testWakeupInCommitSyncCausesRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/50/b091de6930621deb04d96d39f3b6f5ba124959.src","preCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        time.sleep(30000L);\n        workerTask.initializeAndStart();\n        time.sleep(30000L);\n\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.33333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status-running\", 1.0);\n        assertTaskMetricValue(\"status-paused\", 0.0);\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 1.0);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"M"},{"authorDate":"2016-12-02 07:01:09","commitOrder":12,"curCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2016-12-02 07:01:09","endLine":630,"groupId":"20533","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"expectRebalanceAssignmentError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/9e56b689704374baa27e4f69b551ecdc04378d.src","preCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"N"}],"commitId":"a47bfbcae050659d32f777ed2f4b26dda5fbdbbd","commitMessage":"@@@KAFKA-5903: Added Connect metrics to the worker and distributed herder (KIP-196)\n\nAdded metrics to the Connect worker and rebalancing metrics to the distributed herder.\n\nThis is built on top of #3987.  and I can rebase this PR once that is merged.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4011 from rhauch/kafka-5903\n","date":"2017-10-06 02:23:11","modifiedFileCount":"13","status":"M","submitter":"Randall Hauch"},{"authorTime":"2018-08-11 13:51:17","codes":[{"authorDate":"2018-08-11 13:51:17","commitOrder":13,"curCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        time.sleep(30000L);\n        workerTask.initializeAndStart();\n        time.sleep(30000L);\n\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.33333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 1.0);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-08-11 13:51:17","endLine":516,"groupId":"2731","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testWakeupInCommitSyncCausesRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/ab2ef06e083c5132a6599afe01ebd145f58f29.src","preCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        time.sleep(30000L);\n        workerTask.initializeAndStart();\n        time.sleep(30000L);\n\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.33333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 1.0);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":425,"status":"M"},{"authorDate":"2018-08-11 13:51:17","commitOrder":13,"curCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2018-08-11 13:51:17","endLine":1311,"groupId":"20533","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"expectRebalanceAssignmentError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/ab2ef06e083c5132a6599afe01ebd145f58f29.src","preCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1287,"status":"M"}],"commitId":"8a78d76466bacd8a2a3487cc84890d29c9bc4a3d","commitMessage":"@@@KAFKA-7140; Remove deprecated poll usages (#5319)\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Jason Gustafson <jason@confluent.io>","date":"2018-08-11 13:51:17","modifiedFileCount":"11","status":"M","submitter":"Viktor Somogyi"},{"authorTime":"2018-08-11 13:51:17","codes":[{"authorDate":"2020-01-30 13:54:21","commitOrder":14,"curCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        time.sleep(30000L);\n        workerTask.initializeAndStart();\n        time.sleep(30000L);\n\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.33333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 1.0);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-01-30 13:54:21","endLine":535,"groupId":"2731","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testWakeupInCommitSyncCausesRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/28/5cbbe50b5a80bd8844468b98ac55b43174c402.src","preCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        time.sleep(30000L);\n        workerTask.initializeAndStart();\n        time.sleep(30000L);\n\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.33333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 1.0);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":444,"status":"M"},{"authorDate":"2018-08-11 13:51:17","commitOrder":14,"curCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2018-08-11 13:51:17","endLine":1311,"groupId":"20533","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"expectRebalanceAssignmentError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/ab2ef06e083c5132a6599afe01ebd145f58f29.src","preCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1287,"status":"N"}],"commitId":"7746301c2643e0037bff3bcb84c41d512937e4c9","commitMessage":"@@@KAFKA-9422: Track the set of topics a connector is using (KIP-558) (#8017)\n\nThis feature corresponds to KIP-558 and extends how the internal status topic (set via `status.storage.topic` distributed worker config) is used to include information that allows Kafka Connect to keep track which topics a connector is using.\n\nThe set of topics a connector is actively using.  is exposed via a new endpoint that is added to the REST API of Connect workers.\n* A `GET /connectors/{name}/topics` request will return the set of topics that have been recorded as active since a connector started or since the set of topics was reset for this connector.\n\nAn additional endpoints allows users to reset the set of active topics for a connector via the second endpoint that this feature is adding:\n* A `PUT /connectors/{name}/topics/reset` request clears the set of active topics. An operator may enable or disable this feature by setting `topic.tracking.enable` (true by default).\n\nThe `topic.tracking.enable` worker config property (true by default) allows an operator to enable/disable the entire feature. Or if the feature is enabled.  the `topic.tracking.allow.reset` worker config property (true by default) allows an operator to control whether reset requests submitted to the Connect REST API are allowed.\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\nReviewer: Randall Hauch <rhauch@gmail.com>","date":"2020-01-30 13:54:21","modifiedFileCount":"17","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2021-02-05 01:15:49","codes":[{"authorDate":"2021-02-05 01:15:49","commitOrder":15,"curCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n            () -> {\n                rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        time.sleep(30000L);\n        workerTask.initializeAndStart();\n        time.sleep(30000L);\n\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.33333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 1.0);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 01:15:49","endLine":580,"groupId":"2731","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testWakeupInCommitSyncCausesRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ac/b51383de4f794359bad73f0d9fcebb86d1aacd.src","preCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        time.sleep(30000L);\n        workerTask.initializeAndStart();\n        time.sleep(30000L);\n\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.33333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 1.0);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":492,"status":"M"},{"authorDate":"2021-02-05 01:15:49","commitOrder":15,"curCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n            () -> {\n                rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            });\n    }\n","date":"2021-02-05 01:15:49","endLine":1575,"groupId":"20533","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"expectRebalanceAssignmentError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ac/b51383de4f794359bad73f0d9fcebb86d1aacd.src","preCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1554,"status":"M"}],"commitId":"c19a35d1b740c85559a7ff4e882fc95b4737808d","commitMessage":"@@@KAFKA-10835: Replace Runnable and Callable overrides with lambdas in Connect (#9867)\n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 01:15:49","modifiedFileCount":"50","status":"M","submitter":"Lev Zemlyanov"},{"authorTime":"2021-02-05 09:08:56","codes":[{"authorDate":"2021-02-05 09:08:56","commitOrder":16,"curCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n            () -> {\n                rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        time.sleep(30000L);\n        workerTask.initializeAndStart();\n        time.sleep(30000L);\n\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.33333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 1.0);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 09:08:56","endLine":580,"groupId":"104736","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testWakeupInCommitSyncCausesRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a7/d68a61520a213f7c399dae8550a4eb246f1ca6.src","preCode":"    public void testWakeupInCommitSyncCausesRetry() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n        expectPollInitialAssignment();\n\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        final Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n        offsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        offsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n        sinkTask.preCommit(offsets);\n        EasyMock.expectLastCall().andReturn(offsets);\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andThrow(new WakeupException());\n\n        \r\n        consumer.commitSync(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall();\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n            () -> {\n                rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            });\n\n        EasyMock.expect(consumer.assignment()).andReturn(new HashSet<>(partitions));\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION));\n        EasyMock.expectLastCall();\n\n        consumer.resume(Collections.singleton(TOPIC_PARTITION2));\n        EasyMock.expectLastCall();\n\n        statusListener.onResume(taskId);\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        time.sleep(30000L);\n        workerTask.initializeAndStart();\n        time.sleep(30000L);\n\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n        workerTask.iteration(); \r\n        workerTask.iteration(); \r\n        time.sleep(30000L);\n\n        assertSinkMetricValue(\"partition-count\", 2);\n        assertSinkMetricValue(\"sink-record-read-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-send-total\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count\", 0.0);\n        assertSinkMetricValue(\"sink-record-active-count-max\", 1.0);\n        assertSinkMetricValue(\"sink-record-active-count-avg\", 0.33333);\n        assertSinkMetricValue(\"offset-commit-seq-no\", 1.0);\n        assertSinkMetricValue(\"offset-commit-completion-total\", 1.0);\n        assertSinkMetricValue(\"offset-commit-skip-total\", 0.0);\n        assertTaskMetricValue(\"status\", \"running\");\n        assertTaskMetricValue(\"running-ratio\", 1.0);\n        assertTaskMetricValue(\"pause-ratio\", 0.0);\n        assertTaskMetricValue(\"batch-size-max\", 1.0);\n        assertTaskMetricValue(\"batch-size-avg\", 1.0);\n        assertTaskMetricValue(\"offset-commit-max-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-avg-time-ms\", 0.0);\n        assertTaskMetricValue(\"offset-commit-failure-percentage\", 0.0);\n        assertTaskMetricValue(\"offset-commit-success-percentage\", 1.0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":492,"status":"M"},{"authorDate":"2021-02-05 09:08:56","commitOrder":16,"curCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n            () -> {\n                rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            });\n    }\n","date":"2021-02-05 09:08:56","endLine":1575,"groupId":"104736","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"expectRebalanceAssignmentError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a7/d68a61520a213f7c399dae8550a4eb246f1ca6.src","preCode":"    private void expectRebalanceAssignmentError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall();\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n            () -> {\n                rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1554,"status":"M"}],"commitId":"07843cfbf4e3e7a2d26d63904bbf0da0fcd07ca2","commitMessage":"@@@KAFKA-10834: Remove redundant type casts in Connect (#10053)\n\nCleanup up to remove redundant type casts in Connect and use the diamond operator when needed \n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 09:08:56","modifiedFileCount":"41","status":"M","submitter":"Lev Zemlyanov"}]
