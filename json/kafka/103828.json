[{"authorTime":"2020-07-23 02:12:26","codes":[{"authorDate":"2020-07-23 02:12:26","commitOrder":1,"curCode":"    public void testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic1\", Errors.NONE),\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    deletableTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic2\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            DeleteTopicsResult result = env.adminClient().deleteTopics(\n                asList(\"topic1\", \"topic2\", \"topic3\"),\n                new DeleteTopicsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting DeleteTopics requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next DeleteTopics request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            TestUtils.assertFutureThrows(result.values().get(\"topic2\"), TimeoutException.class);\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n        }\n    }\n","date":"2020-07-23 02:12:26","endLine":893,"groupId":"5626","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/a6efad63cab7f2e42e0f4f570bea79a4adf0a3.src","preCode":"    public void testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic1\", Errors.NONE),\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    deletableTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic2\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            DeleteTopicsResult result = env.adminClient().deleteTopics(\n                asList(\"topic1\", \"topic2\", \"topic3\"),\n                new DeleteTopicsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting DeleteTopics requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next DeleteTopics request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            TestUtils.assertFutureThrows(result.values().get(\"topic2\"), TimeoutException.class);\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":853,"status":"B"},{"authorDate":"2020-07-23 02:12:26","commitOrder":1,"curCode":"    public void testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic1\", Errors.NONE),\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    createPartitionsTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic2\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            Map<String, NewPartitions> counts = new HashMap<>();\n            counts.put(\"topic1\", NewPartitions.increaseTo(1));\n            counts.put(\"topic2\", NewPartitions.increaseTo(2));\n            counts.put(\"topic3\", NewPartitions.increaseTo(3));\n\n            CreatePartitionsResult result = env.adminClient().createPartitions(\n                counts, new CreatePartitionsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting CreatePartitions requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next CreatePartitions request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            TestUtils.assertFutureThrows(result.values().get(\"topic2\"), TimeoutException.class);\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n        }\n    }\n","date":"2020-07-23 02:12:26","endLine":1468,"groupId":"13715","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/a6efad63cab7f2e42e0f4f570bea79a4adf0a3.src","preCode":"    public void testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic1\", Errors.NONE),\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    createPartitionsTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic2\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            Map<String, NewPartitions> counts = new HashMap<>();\n            counts.put(\"topic1\", NewPartitions.increaseTo(1));\n            counts.put(\"topic2\", NewPartitions.increaseTo(2));\n            counts.put(\"topic3\", NewPartitions.increaseTo(3));\n\n            CreatePartitionsResult result = env.adminClient().createPartitions(\n                counts, new CreatePartitionsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting CreatePartitions requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next CreatePartitions request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            TestUtils.assertFutureThrows(result.values().get(\"topic2\"), TimeoutException.class);\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1424,"status":"B"}],"commitId":"d9168970dd9cfd815b72db176baa62a9849fcb47","commitMessage":"@@@KAFKA-10164; Throttle Create Topic.  Create Partition and Delete Topic Operations (KIP-599.  Part II.  Admin Changes) (#8968)\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>","date":"2020-07-23 02:12:26","modifiedFileCount":"7","status":"B","submitter":"David Jacot"},{"authorTime":"2020-09-29 22:17:37","codes":[{"authorDate":"2020-09-29 22:17:37","commitOrder":2,"curCode":"    public void testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic1\", Errors.NONE),\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    deletableTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic2\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            DeleteTopicsResult result = env.adminClient().deleteTopics(\n                asList(\"topic1\", \"topic2\", \"topic3\"),\n                new DeleteTopicsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting DeleteTopics requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next DeleteTopics request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),\n                ThrottlingQuotaExceededException.class);\n            assertEquals(0, e.throttleTimeMs());\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n        }\n    }\n","date":"2020-09-29 22:17:37","endLine":905,"groupId":"5626","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a4/ae6f41da1d049cfc7df4ed861e506dccf61b49.src","preCode":"    public void testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic1\", Errors.NONE),\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    deletableTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic2\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            DeleteTopicsResult result = env.adminClient().deleteTopics(\n                asList(\"topic1\", \"topic2\", \"topic3\"),\n                new DeleteTopicsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting DeleteTopics requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next DeleteTopics request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            TestUtils.assertFutureThrows(result.values().get(\"topic2\"), TimeoutException.class);\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":863,"status":"M"},{"authorDate":"2020-09-29 22:17:37","commitOrder":2,"curCode":"    public void testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic1\", Errors.NONE),\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    createPartitionsTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic2\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            Map<String, NewPartitions> counts = new HashMap<>();\n            counts.put(\"topic1\", NewPartitions.increaseTo(1));\n            counts.put(\"topic2\", NewPartitions.increaseTo(2));\n            counts.put(\"topic3\", NewPartitions.increaseTo(3));\n\n            CreatePartitionsResult result = env.adminClient().createPartitions(\n                counts, new CreatePartitionsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting CreatePartitions requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next CreatePartitions request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),\n                ThrottlingQuotaExceededException.class);\n            assertEquals(0, e.throttleTimeMs());\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n        }\n    }\n","date":"2020-09-29 22:17:37","endLine":1739,"groupId":"13715","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a4/ae6f41da1d049cfc7df4ed861e506dccf61b49.src","preCode":"    public void testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic1\", Errors.NONE),\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    createPartitionsTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic2\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            Map<String, NewPartitions> counts = new HashMap<>();\n            counts.put(\"topic1\", NewPartitions.increaseTo(1));\n            counts.put(\"topic2\", NewPartitions.increaseTo(2));\n            counts.put(\"topic3\", NewPartitions.increaseTo(3));\n\n            CreatePartitionsResult result = env.adminClient().createPartitions(\n                counts, new CreatePartitionsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting CreatePartitions requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next CreatePartitions request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            TestUtils.assertFutureThrows(result.values().get(\"topic2\"), TimeoutException.class);\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1693,"status":"M"}],"commitId":"a0fec75d3cee3d23bd517fe0acc65270a6cb0f88","commitMessage":"@@@MINOR; Preserve ThrottlingQuotaExceededException when request timeouts after being retried due to a quota violation (KIP-599) (#9344)\n\nThis PR adds the logic to preserve the ThrottlingQuotaExceededException when topics are retried. The throttleTimeMs is also adjusted accordingly as the request could remain pending or in-flight for quite a long time.\n\nHave run various tests on clusters with enabled quotas and I.  indeed.  find it better to preserve the exception. Otherwise.  the caller does not really understand what is going on. This allows the caller to take the appropriate measure and also to take the throttleTimeMs into consideration.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>","date":"2020-09-29 22:17:37","modifiedFileCount":"2","status":"M","submitter":"David Jacot"},{"authorTime":"2020-09-29 22:17:37","codes":[{"authorDate":"2021-01-30 03:40:16","commitOrder":3,"curCode":"    public void testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic1\", Errors.NONE),\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    deletableTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic2\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            DeleteTopicsResult result = env.adminClient().deleteTopics(\n                asList(\"topic1\", \"topic2\", \"topic3\"),\n                new DeleteTopicsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting DeleteTopics requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next DeleteTopics request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),\n                ThrottlingQuotaExceededException.class);\n            assertEquals(0, e.throttleTimeMs());\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n            \n            \r\n            Uuid topicId1 = Uuid.randomUuid();\n            Uuid topicId2 = Uuid.randomUuid();\n            Uuid topicId3 = Uuid.randomUuid();\n            env.kafkaClient().prepareResponse(\n                    expectDeleteTopicsRequestWithTopicIds(topicId1, topicId2, topicId3),\n                    prepareDeleteTopicsResponse(1000,\n                            deletableTopicResultWithId(topicId1, Errors.NONE),\n                            deletableTopicResultWithId(topicId2, Errors.THROTTLING_QUOTA_EXCEEDED),\n                            deletableTopicResultWithId(topicId3, Errors.UNKNOWN_TOPIC_ID)));\n\n            env.kafkaClient().prepareResponse(\n                    expectDeleteTopicsRequestWithTopicIds(topicId2),\n                    prepareDeleteTopicsResponse(1000,\n                            deletableTopicResultWithId(topicId2, Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            DeleteTopicsWithIdsResult resultIds = env.adminClient().deleteTopicsWithIds(\n                    asList(topicId1, topicId2, topicId3),\n                    new DeleteTopicsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                    \"Failed awaiting DeleteTopics requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                    \"Failed awaiting next DeleteTopics request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(resultIds.values().get(topicId1).get());\n            e = TestUtils.assertFutureThrows(resultIds.values().get(topicId2),\n                    ThrottlingQuotaExceededException.class);\n            assertEquals(0, e.throttleTimeMs());\n            TestUtils.assertFutureThrows(resultIds.values().get(topicId3), UnknownTopicIdException.class);\n        }\n    }\n","date":"2021-01-30 03:40:16","endLine":1089,"groupId":"5626","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b4/681154c69554d763dd7e3bfb438536663fa38a.src","preCode":"    public void testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic1\", Errors.NONE),\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    deletableTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic2\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            DeleteTopicsResult result = env.adminClient().deleteTopics(\n                asList(\"topic1\", \"topic2\", \"topic3\"),\n                new DeleteTopicsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting DeleteTopics requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next DeleteTopics request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),\n                ThrottlingQuotaExceededException.class);\n            assertEquals(0, e.throttleTimeMs());\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1010,"status":"M"},{"authorDate":"2020-09-29 22:17:37","commitOrder":3,"curCode":"    public void testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic1\", Errors.NONE),\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    createPartitionsTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic2\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            Map<String, NewPartitions> counts = new HashMap<>();\n            counts.put(\"topic1\", NewPartitions.increaseTo(1));\n            counts.put(\"topic2\", NewPartitions.increaseTo(2));\n            counts.put(\"topic3\", NewPartitions.increaseTo(3));\n\n            CreatePartitionsResult result = env.adminClient().createPartitions(\n                counts, new CreatePartitionsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting CreatePartitions requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next CreatePartitions request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),\n                ThrottlingQuotaExceededException.class);\n            assertEquals(0, e.throttleTimeMs());\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n        }\n    }\n","date":"2020-09-29 22:17:37","endLine":1739,"groupId":"13715","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a4/ae6f41da1d049cfc7df4ed861e506dccf61b49.src","preCode":"    public void testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic1\", Errors.NONE),\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    createPartitionsTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic2\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            Map<String, NewPartitions> counts = new HashMap<>();\n            counts.put(\"topic1\", NewPartitions.increaseTo(1));\n            counts.put(\"topic2\", NewPartitions.increaseTo(2));\n            counts.put(\"topic3\", NewPartitions.increaseTo(3));\n\n            CreatePartitionsResult result = env.adminClient().createPartitions(\n                counts, new CreatePartitionsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting CreatePartitions requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next CreatePartitions request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),\n                ThrottlingQuotaExceededException.class);\n            assertEquals(0, e.throttleTimeMs());\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1693,"status":"N"}],"commitId":"4f588f7ca2a1c5e8dd845863da81425ac69bac92","commitMessage":"@@@KAFKA-10764: Add support for returning topic IDs on create.  supplying topic IDs for delete (#9684)\n\nUpdated CreateTopicResponse.  DeleteTopicsRequest/Response and added some new AdminClient methods and classes. Now the newly created topic ID will be returned in CreateTopicsResult and found in TopicAndMetadataConfig.  and topics can be deleted by supplying topic IDs through deleteTopicsWithIds which will return DeleteTopicsWithIdsResult.\n\nReviewers: dengziming <dengziming1993@gmail.com>.  Rajini Sivaram <rajinisivaram@googlemail.com>","date":"2021-01-30 03:40:16","modifiedFileCount":"7","status":"M","submitter":"Justine Olshan"},{"authorTime":"2020-09-29 22:17:37","codes":[{"authorDate":"2021-07-01 14:20:21","commitOrder":4,"curCode":"    public void testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic1\", Errors.NONE),\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    deletableTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic2\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            DeleteTopicsResult result = env.adminClient().deleteTopics(\n                asList(\"topic1\", \"topic2\", \"topic3\"),\n                new DeleteTopicsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting DeleteTopics requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next DeleteTopics request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.topicNameValues().get(\"topic1\").get());\n            ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.topicNameValues().get(\"topic2\"),\n                ThrottlingQuotaExceededException.class);\n            assertEquals(0, e.throttleTimeMs());\n            TestUtils.assertFutureThrows(result.topicNameValues().get(\"topic3\"), TopicExistsException.class);\n            \n            \r\n            Uuid topicId1 = Uuid.randomUuid();\n            Uuid topicId2 = Uuid.randomUuid();\n            Uuid topicId3 = Uuid.randomUuid();\n            env.kafkaClient().prepareResponse(\n                    expectDeleteTopicsRequestWithTopicIds(topicId1, topicId2, topicId3),\n                    prepareDeleteTopicsResponse(1000,\n                            deletableTopicResultWithId(topicId1, Errors.NONE),\n                            deletableTopicResultWithId(topicId2, Errors.THROTTLING_QUOTA_EXCEEDED),\n                            deletableTopicResultWithId(topicId3, Errors.UNKNOWN_TOPIC_ID)));\n\n            env.kafkaClient().prepareResponse(\n                    expectDeleteTopicsRequestWithTopicIds(topicId2),\n                    prepareDeleteTopicsResponse(1000,\n                            deletableTopicResultWithId(topicId2, Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            DeleteTopicsResult resultIds = env.adminClient().deleteTopics(\n                    TopicCollection.ofTopicIds(asList(topicId1, topicId2, topicId3)),\n                    new DeleteTopicsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                    \"Failed awaiting DeleteTopics requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                    \"Failed awaiting next DeleteTopics request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(resultIds.topicIdValues().get(topicId1).get());\n            e = TestUtils.assertFutureThrows(resultIds.topicIdValues().get(topicId2),\n                    ThrottlingQuotaExceededException.class);\n            assertEquals(0, e.throttleTimeMs());\n            TestUtils.assertFutureThrows(resultIds.topicIdValues().get(topicId3), UnknownTopicIdException.class);\n        }\n    }\n","date":"2021-07-01 14:20:21","endLine":1120,"groupId":"103828","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/60/ac275c01757eaf8308dcf2e5cd924222bdadc2.src","preCode":"    public void testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic1\", Errors.NONE),\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    deletableTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectDeleteTopicsRequestWithTopics(\"topic2\"),\n                prepareDeleteTopicsResponse(1000,\n                    deletableTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            DeleteTopicsResult result = env.adminClient().deleteTopics(\n                asList(\"topic1\", \"topic2\", \"topic3\"),\n                new DeleteTopicsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting DeleteTopics requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next DeleteTopics request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),\n                ThrottlingQuotaExceededException.class);\n            assertEquals(0, e.throttleTimeMs());\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n            \n            \r\n            Uuid topicId1 = Uuid.randomUuid();\n            Uuid topicId2 = Uuid.randomUuid();\n            Uuid topicId3 = Uuid.randomUuid();\n            env.kafkaClient().prepareResponse(\n                    expectDeleteTopicsRequestWithTopicIds(topicId1, topicId2, topicId3),\n                    prepareDeleteTopicsResponse(1000,\n                            deletableTopicResultWithId(topicId1, Errors.NONE),\n                            deletableTopicResultWithId(topicId2, Errors.THROTTLING_QUOTA_EXCEEDED),\n                            deletableTopicResultWithId(topicId3, Errors.UNKNOWN_TOPIC_ID)));\n\n            env.kafkaClient().prepareResponse(\n                    expectDeleteTopicsRequestWithTopicIds(topicId2),\n                    prepareDeleteTopicsResponse(1000,\n                            deletableTopicResultWithId(topicId2, Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            DeleteTopicsWithIdsResult resultIds = env.adminClient().deleteTopicsWithIds(\n                    asList(topicId1, topicId2, topicId3),\n                    new DeleteTopicsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                    \"Failed awaiting DeleteTopics requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                    \"Failed awaiting next DeleteTopics request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(resultIds.values().get(topicId1).get());\n            e = TestUtils.assertFutureThrows(resultIds.values().get(topicId2),\n                    ThrottlingQuotaExceededException.class);\n            assertEquals(0, e.throttleTimeMs());\n            TestUtils.assertFutureThrows(resultIds.values().get(topicId3), UnknownTopicIdException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1041,"status":"M"},{"authorDate":"2020-09-29 22:17:37","commitOrder":4,"curCode":"    public void testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic1\", Errors.NONE),\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    createPartitionsTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic2\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            Map<String, NewPartitions> counts = new HashMap<>();\n            counts.put(\"topic1\", NewPartitions.increaseTo(1));\n            counts.put(\"topic2\", NewPartitions.increaseTo(2));\n            counts.put(\"topic3\", NewPartitions.increaseTo(3));\n\n            CreatePartitionsResult result = env.adminClient().createPartitions(\n                counts, new CreatePartitionsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting CreatePartitions requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next CreatePartitions request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),\n                ThrottlingQuotaExceededException.class);\n            assertEquals(0, e.throttleTimeMs());\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n        }\n    }\n","date":"2020-09-29 22:17:37","endLine":1739,"groupId":"103828","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a4/ae6f41da1d049cfc7df4ed861e506dccf61b49.src","preCode":"    public void testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut() throws Exception {\n        long defaultApiTimeout = 60000;\n        MockTime time = new MockTime();\n\n        try (AdminClientUnitTestEnv env = mockClientEnv(time,\n            AdminClientConfig.DEFAULT_API_TIMEOUT_MS_CONFIG, String.valueOf(defaultApiTimeout))) {\n\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic1\", \"topic2\", \"topic3\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic1\", Errors.NONE),\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED),\n                    createPartitionsTopicResult(\"topic3\", Errors.TOPIC_ALREADY_EXISTS)));\n\n            env.kafkaClient().prepareResponse(\n                expectCreatePartitionsRequestWithTopics(\"topic2\"),\n                prepareCreatePartitionsResponse(1000,\n                    createPartitionsTopicResult(\"topic2\", Errors.THROTTLING_QUOTA_EXCEEDED)));\n\n            Map<String, NewPartitions> counts = new HashMap<>();\n            counts.put(\"topic1\", NewPartitions.increaseTo(1));\n            counts.put(\"topic2\", NewPartitions.increaseTo(2));\n            counts.put(\"topic3\", NewPartitions.increaseTo(3));\n\n            CreatePartitionsResult result = env.adminClient().createPartitions(\n                counts, new CreatePartitionsOptions().retryOnQuotaViolation(true));\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().numAwaitingResponses() == 0,\n                \"Failed awaiting CreatePartitions requests\");\n\n            \r\n            TestUtils.waitForCondition(() -> env.kafkaClient().inFlightRequestCount() == 1,\n                \"Failed awaiting next CreatePartitions request\");\n\n            \r\n            time.sleep(defaultApiTimeout + 1);\n\n            assertNull(result.values().get(\"topic1\").get());\n            ThrottlingQuotaExceededException e = TestUtils.assertFutureThrows(result.values().get(\"topic2\"),\n                ThrottlingQuotaExceededException.class);\n            assertEquals(0, e.throttleTimeMs());\n            TestUtils.assertFutureThrows(result.values().get(\"topic3\"), TopicExistsException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1693,"status":"N"}],"commitId":"cee2e975d124da0a2bdc0065a3172ce31e036fa0","commitMessage":"@@@KAFKA-13011; Update deleteTopics Admin API  (#10892)\n\nThis patch adds two new apis to support topic deletion using topic IDs or names. It uses a new class `TopicCollection` to keep a collection of topics defined either by names or IDs. Finally.  it modifies `DeleteTopicsResult` to support both names and IDs and deprecates the old methods which have become ambiguous. Eventually we will want to deprecate the old `deleteTopics` apis as well.  but this patch does not do so.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2021-07-01 14:20:21","modifiedFileCount":"8","status":"M","submitter":"Justine Olshan"}]
