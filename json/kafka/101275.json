[{"authorTime":"2020-10-08 21:08:24","codes":[{"authorDate":"2020-10-08 21:08:24","commitOrder":1,"curCode":"    public void shouldIterateBackwardAcrossWindows() {\n        cachingStore.put(bytesKey(\"1\"), bytesValue(\"a\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"1\"), bytesValue(\"b\"), DEFAULT_TIMESTAMP + WINDOW_SIZE);\n\n        final WindowStoreIterator<byte[]> fetch =\n            cachingStore.backwardFetch(bytesKey(\"1\"), ofEpochMilli(DEFAULT_TIMESTAMP), ofEpochMilli(DEFAULT_TIMESTAMP + WINDOW_SIZE));\n        verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP + WINDOW_SIZE, \"b\");\n        verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP, \"a\");\n        assertFalse(fetch.hasNext());\n    }\n","date":"2020-10-08 21:08:24","endLine":557,"groupId":"15391","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldIterateBackwardAcrossWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/86/ee164b07ac9b2d7817d24e9bc69314dd4cc1c9.src","preCode":"    public void shouldIterateBackwardAcrossWindows() {\n        cachingStore.put(bytesKey(\"1\"), bytesValue(\"a\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"1\"), bytesValue(\"b\"), DEFAULT_TIMESTAMP + WINDOW_SIZE);\n\n        final WindowStoreIterator<byte[]> fetch =\n            cachingStore.backwardFetch(bytesKey(\"1\"), ofEpochMilli(DEFAULT_TIMESTAMP), ofEpochMilli(DEFAULT_TIMESTAMP + WINDOW_SIZE));\n        verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP + WINDOW_SIZE, \"b\");\n        verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP, \"a\");\n        assertFalse(fetch.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":548,"status":"B"},{"authorDate":"2020-10-08 21:08:24","commitOrder":1,"curCode":"    public void shouldIterateCacheAndStore() {\n        final Bytes key = Bytes.wrap(\"1\".getBytes());\n        bytesStore.put(WindowKeySchema.toStoreKeyBinary(key, DEFAULT_TIMESTAMP, 0), \"a\".getBytes());\n        cachingStore.put(key, bytesValue(\"b\"), DEFAULT_TIMESTAMP + WINDOW_SIZE);\n        final WindowStoreIterator<byte[]> fetch =\n            cachingStore.fetch(bytesKey(\"1\"), ofEpochMilli(DEFAULT_TIMESTAMP), ofEpochMilli(DEFAULT_TIMESTAMP + WINDOW_SIZE));\n        verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP, \"a\");\n        verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP + WINDOW_SIZE, \"b\");\n        assertFalse(fetch.hasNext());\n    }\n","date":"2020-10-08 21:08:24","endLine":569,"groupId":"15391","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldIterateCacheAndStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/86/ee164b07ac9b2d7817d24e9bc69314dd4cc1c9.src","preCode":"    public void shouldIterateCacheAndStore() {\n        final Bytes key = Bytes.wrap(\"1\".getBytes());\n        bytesStore.put(WindowKeySchema.toStoreKeyBinary(key, DEFAULT_TIMESTAMP, 0), \"a\".getBytes());\n        cachingStore.put(key, bytesValue(\"b\"), DEFAULT_TIMESTAMP + WINDOW_SIZE);\n        final WindowStoreIterator<byte[]> fetch =\n            cachingStore.fetch(bytesKey(\"1\"), ofEpochMilli(DEFAULT_TIMESTAMP), ofEpochMilli(DEFAULT_TIMESTAMP + WINDOW_SIZE));\n        verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP, \"a\");\n        verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP + WINDOW_SIZE, \"b\");\n        assertFalse(fetch.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":560,"status":"B"}],"commitId":"d0e6943bdd048aa6e0a4dbbdad3c8da460db16dc","commitMessage":"@@@KAFKA-9929: Support backward iterator on SessionStore (#9139)\n\nImplements KIP-617 for `SessionStore`\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-10-08 21:08:24","modifiedFileCount":"14","status":"B","submitter":"Jorge Esteban Quilcate Otoya"},{"authorTime":"2021-07-27 07:26:02","codes":[{"authorDate":"2021-07-27 07:26:02","commitOrder":2,"curCode":"    public void shouldIterateBackwardAcrossWindows() {\n        cachingStore.put(bytesKey(\"1\"), bytesValue(\"a\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"1\"), bytesValue(\"b\"), DEFAULT_TIMESTAMP + WINDOW_SIZE);\n\n        try (final WindowStoreIterator<byte[]> fetch =\n                 cachingStore.backwardFetch(bytesKey(\"1\"), ofEpochMilli(DEFAULT_TIMESTAMP), ofEpochMilli(DEFAULT_TIMESTAMP + WINDOW_SIZE))) {\n            verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP + WINDOW_SIZE, \"b\");\n            verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP, \"a\");\n            assertFalse(fetch.hasNext());\n        }\n    }\n","date":"2021-07-27 07:26:02","endLine":563,"groupId":"101275","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldIterateBackwardAcrossWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/3d69a6a9f4d4c9cd689931ddd344dd6baa68bc.src","preCode":"    public void shouldIterateBackwardAcrossWindows() {\n        cachingStore.put(bytesKey(\"1\"), bytesValue(\"a\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"1\"), bytesValue(\"b\"), DEFAULT_TIMESTAMP + WINDOW_SIZE);\n\n        final WindowStoreIterator<byte[]> fetch =\n            cachingStore.backwardFetch(bytesKey(\"1\"), ofEpochMilli(DEFAULT_TIMESTAMP), ofEpochMilli(DEFAULT_TIMESTAMP + WINDOW_SIZE));\n        verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP + WINDOW_SIZE, \"b\");\n        verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP, \"a\");\n        assertFalse(fetch.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"M"},{"authorDate":"2021-07-27 07:26:02","commitOrder":2,"curCode":"    public void shouldIterateCacheAndStore() {\n        final Bytes key = Bytes.wrap(\"1\".getBytes());\n        bytesStore.put(WindowKeySchema.toStoreKeyBinary(key, DEFAULT_TIMESTAMP, 0), \"a\".getBytes());\n        cachingStore.put(key, bytesValue(\"b\"), DEFAULT_TIMESTAMP + WINDOW_SIZE);\n        try (final WindowStoreIterator<byte[]> fetch =\n                 cachingStore.fetch(bytesKey(\"1\"), ofEpochMilli(DEFAULT_TIMESTAMP), ofEpochMilli(DEFAULT_TIMESTAMP + WINDOW_SIZE))) {\n            verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP, \"a\");\n            verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP + WINDOW_SIZE, \"b\");\n            assertFalse(fetch.hasNext());\n        }\n    }\n","date":"2021-07-27 07:26:02","endLine":576,"groupId":"101275","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldIterateCacheAndStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/3d69a6a9f4d4c9cd689931ddd344dd6baa68bc.src","preCode":"    public void shouldIterateCacheAndStore() {\n        final Bytes key = Bytes.wrap(\"1\".getBytes());\n        bytesStore.put(WindowKeySchema.toStoreKeyBinary(key, DEFAULT_TIMESTAMP, 0), \"a\".getBytes());\n        cachingStore.put(key, bytesValue(\"b\"), DEFAULT_TIMESTAMP + WINDOW_SIZE);\n        final WindowStoreIterator<byte[]> fetch =\n            cachingStore.fetch(bytesKey(\"1\"), ofEpochMilli(DEFAULT_TIMESTAMP), ofEpochMilli(DEFAULT_TIMESTAMP + WINDOW_SIZE));\n        verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP, \"a\");\n        verifyKeyValue(fetch.next(), DEFAULT_TIMESTAMP + WINDOW_SIZE, \"b\");\n        assertFalse(fetch.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"M"}],"commitId":"818cbfba6ddf8252b7da314bbaac74201951dfb3","commitMessage":"@@@KAFKA-13125: close KeyValueIterator instances in internals tests (part 2) (#11107)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-07-27 07:26:02","modifiedFileCount":"8","status":"M","submitter":"Luke Chen"}]
