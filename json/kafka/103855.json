[{"authorTime":"2019-10-20 12:30:50","codes":[{"authorDate":"2019-10-20 12:30:50","commitOrder":2,"curCode":"    public void testDeleteConsumerGroupOffsetsRetriableErrors() throws Exception {\n        \r\n\n        final Map<Integer, Node> nodes = new HashMap<>();\n        nodes.put(0, new Node(0, \"localhost\", 8121));\n\n        final Cluster cluster =\n            new Cluster(\n                \"mockClusterId\",\n                nodes.values(),\n                Collections.<PartitionInfo>emptyList(),\n                Collections.<String>emptySet(),\n                Collections.<String>emptySet(), nodes.get(0));\n\n        final String groupId = \"group-0\";\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(cluster)) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_NOT_AVAILABLE));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS));\n\n            \r\n\r\n\r\n\r\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.NOT_COORDINATOR));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(\"foo\", 0, Errors.NONE));\n\n            final DeleteConsumerGroupOffsetsResult errorResult1 = env.adminClient()\n                .deleteConsumerGroupOffsets(groupId, Stream.of(tp1).collect(Collectors.toSet()));\n\n            assertNull(errorResult1.all().get());\n            assertNull(errorResult1.partitionResult(tp1).get());\n        }\n    }\n","date":"2019-10-20 12:30:50","endLine":1769,"groupId":"8354","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteConsumerGroupOffsetsRetriableErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4d/677bfc2760ab08e45590eba378b88eed02b0a4.src","preCode":"    public void testDeleteConsumerGroupOffsetsRetriableErrors() throws Exception {\n        \r\n\n        final Map<Integer, Node> nodes = new HashMap<>();\n        nodes.put(0, new Node(0, \"localhost\", 8121));\n\n        final Cluster cluster =\n            new Cluster(\n                \"mockClusterId\",\n                nodes.values(),\n                Collections.<PartitionInfo>emptyList(),\n                Collections.<String>emptySet(),\n                Collections.<String>emptySet(), nodes.get(0));\n\n        final String groupId = \"group-0\";\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(cluster)) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_NOT_AVAILABLE));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS));\n\n            \r\n\r\n\r\n\r\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.NOT_COORDINATOR));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(\"foo\", 0, Errors.NONE));\n\n            final DeleteConsumerGroupOffsetsResult errorResult1 = env.adminClient()\n                .deleteConsumerGroupOffsets(groupId, Stream.of(tp1).collect(Collectors.toSet()));\n\n            assertNull(errorResult1.all().get());\n            assertNull(errorResult1.partitionResult(tp1).get());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1720,"status":"MB"},{"authorDate":"2019-10-20 12:30:50","commitOrder":2,"curCode":"    public void testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors() throws Exception {\n        \r\n\n        final Map<Integer, Node> nodes = new HashMap<>();\n        nodes.put(0, new Node(0, \"localhost\", 8121));\n\n        final Cluster cluster =\n            new Cluster(\n                \"mockClusterId\",\n                nodes.values(),\n                Collections.<PartitionInfo>emptyList(),\n                Collections.<String>emptySet(),\n                Collections.<String>emptySet(), nodes.get(0));\n\n        final String groupId = \"group-0\";\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(cluster)) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_NOT_AVAILABLE,  Node.noNode()));\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS, Node.noNode()));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetCommitResponse(tp1, Errors.NONE));\n\n            Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n            offsets.put(tp1,  new OffsetAndMetadata(123L));\n            final AlterConsumerGroupOffsetsResult result = env.adminClient()\n                .alterConsumerGroupOffsets(groupId, offsets);\n\n            assertNull(result.all().get());\n            assertNull(result.partitionResult(tp1).get());\n        }\n    }\n","date":"2019-10-20 12:30:50","endLine":2430,"groupId":"9299","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4d/677bfc2760ab08e45590eba378b88eed02b0a4.src","preCode":"    public void testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors() throws Exception {\n        \r\n\n        final Map<Integer, Node> nodes = new HashMap<>();\n        nodes.put(0, new Node(0, \"localhost\", 8121));\n\n        final Cluster cluster =\n            new Cluster(\n                \"mockClusterId\",\n                nodes.values(),\n                Collections.<PartitionInfo>emptyList(),\n                Collections.<String>emptySet(),\n                Collections.<String>emptySet(), nodes.get(0));\n\n        final String groupId = \"group-0\";\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(cluster)) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_NOT_AVAILABLE,  Node.noNode()));\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS, Node.noNode()));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetCommitResponse(tp1, Errors.NONE));\n\n            Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n            offsets.put(tp1,  new OffsetAndMetadata(123L));\n            final AlterConsumerGroupOffsetsResult result = env.adminClient()\n                .alterConsumerGroupOffsets(groupId, offsets);\n\n            assertNull(result.all().get());\n            assertNull(result.partitionResult(tp1).get());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2391,"status":"B"}],"commitId":"99a4068c5ca61951d70b9e647ead3b08a2af4309","commitMessage":"@@@KAFKA-7689; Add AlterConsumerGroup/List Offsets to AdminClient [KIP-396] (#7296)\n\nThis patch implements new AdminClient APIs to list offsets and alter consumer group offsets as documented in KIP-396: https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=97551484.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2019-10-20 12:30:50","modifiedFileCount":"20","status":"M","submitter":"Mickael Maison"},{"authorTime":"2019-12-18 14:08:53","codes":[{"authorDate":"2019-12-18 14:08:53","commitOrder":3,"curCode":"    public void testDeleteConsumerGroupOffsetsRetriableErrors() throws Exception {\n        \r\n\n        final String groupId = \"group-0\";\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockCluster(1, 0))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_NOT_AVAILABLE));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS));\n\n            \r\n\r\n\r\n\r\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.NOT_COORDINATOR));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(\"foo\", 0, Errors.NONE));\n\n            final DeleteConsumerGroupOffsetsResult errorResult1 = env.adminClient()\n                .deleteConsumerGroupOffsets(groupId, Stream.of(tp1).collect(Collectors.toSet()));\n\n            assertNull(errorResult1.all().get());\n            assertNull(errorResult1.partitionResult(tp1).get());\n        }\n    }\n","date":"2019-12-18 14:08:53","endLine":1668,"groupId":"8354","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteConsumerGroupOffsetsRetriableErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/4c717102730e3e5f8e9150482fe11941af0b75.src","preCode":"    public void testDeleteConsumerGroupOffsetsRetriableErrors() throws Exception {\n        \r\n\n        final Map<Integer, Node> nodes = new HashMap<>();\n        nodes.put(0, new Node(0, \"localhost\", 8121));\n\n        final Cluster cluster =\n            new Cluster(\n                \"mockClusterId\",\n                nodes.values(),\n                Collections.<PartitionInfo>emptyList(),\n                Collections.<String>emptySet(),\n                Collections.<String>emptySet(), nodes.get(0));\n\n        final String groupId = \"group-0\";\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(cluster)) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_NOT_AVAILABLE));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS));\n\n            \r\n\r\n\r\n\r\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.NOT_COORDINATOR));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(\"foo\", 0, Errors.NONE));\n\n            final DeleteConsumerGroupOffsetsResult errorResult1 = env.adminClient()\n                .deleteConsumerGroupOffsets(groupId, Stream.of(tp1).collect(Collectors.toSet()));\n\n            assertNull(errorResult1.all().get());\n            assertNull(errorResult1.partitionResult(tp1).get());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1630,"status":"M"},{"authorDate":"2019-12-18 14:08:53","commitOrder":3,"curCode":"    public void testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors() throws Exception {\n        \r\n\n        final String groupId = \"group-0\";\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockCluster(1, 0))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_NOT_AVAILABLE,  Node.noNode()));\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS, Node.noNode()));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetCommitResponse(tp1, Errors.NONE));\n\n            Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n            offsets.put(tp1,  new OffsetAndMetadata(123L));\n            final AlterConsumerGroupOffsetsResult result = env.adminClient()\n                .alterConsumerGroupOffsets(groupId, offsets);\n\n            assertNull(result.all().get());\n            assertNull(result.partitionResult(tp1).get());\n        }\n    }\n","date":"2019-12-18 14:08:53","endLine":2239,"groupId":"9299","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/4c717102730e3e5f8e9150482fe11941af0b75.src","preCode":"    public void testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors() throws Exception {\n        \r\n\n        final Map<Integer, Node> nodes = new HashMap<>();\n        nodes.put(0, new Node(0, \"localhost\", 8121));\n\n        final Cluster cluster =\n            new Cluster(\n                \"mockClusterId\",\n                nodes.values(),\n                Collections.<PartitionInfo>emptyList(),\n                Collections.<String>emptySet(),\n                Collections.<String>emptySet(), nodes.get(0));\n\n        final String groupId = \"group-0\";\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(cluster)) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_NOT_AVAILABLE,  Node.noNode()));\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS, Node.noNode()));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetCommitResponse(tp1, Errors.NONE));\n\n            Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n            offsets.put(tp1,  new OffsetAndMetadata(123L));\n            final AlterConsumerGroupOffsetsResult result = env.adminClient()\n                .alterConsumerGroupOffsets(groupId, offsets);\n\n            assertNull(result.all().get());\n            assertNull(result.partitionResult(tp1).get());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2211,"status":"M"}],"commitId":"75a68341da423d8b041ac8824fbebe99f9bd15ff","commitMessage":"@@@MINOR; Refactor KafkaAdminClientTest to reduce the boilerplate code (#7842)\n\n`KafkaAdminClientTest` contains many code repetitions which could be removed. This PR removes most of the boiler plate code.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-12-18 14:08:53","modifiedFileCount":"1","status":"M","submitter":"David Jacot"},{"authorTime":"2021-07-02 05:05:03","codes":[{"authorDate":"2021-07-02 05:05:03","commitOrder":4,"curCode":"    public void testDeleteConsumerGroupOffsetsRetriableErrors() throws Exception {\n        \r\n\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockCluster(1, 0))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_NOT_AVAILABLE));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS));\n\n            \r\n\r\n\r\n\r\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.NOT_COORDINATOR));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(\"foo\", 0, Errors.NONE));\n\n            final DeleteConsumerGroupOffsetsResult errorResult1 = env.adminClient()\n                .deleteConsumerGroupOffsets(GROUP_ID, Stream.of(tp1).collect(Collectors.toSet()));\n\n            assertNull(errorResult1.all().get());\n            assertNull(errorResult1.partitionResult(tp1).get());\n        }\n    }\n","date":"2021-07-02 05:05:03","endLine":3388,"groupId":"8354","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteConsumerGroupOffsetsRetriableErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/6e22d17ff9336e8bcef276360419e86393b15b.src","preCode":"    public void testDeleteConsumerGroupOffsetsRetriableErrors() throws Exception {\n        \r\n\n        final String groupId = \"group-0\";\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockCluster(1, 0))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_NOT_AVAILABLE));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS));\n\n            \r\n\r\n\r\n\r\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.NOT_COORDINATOR));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(\"foo\", 0, Errors.NONE));\n\n            final DeleteConsumerGroupOffsetsResult errorResult1 = env.adminClient()\n                .deleteConsumerGroupOffsets(groupId, Stream.of(tp1).collect(Collectors.toSet()));\n\n            assertNull(errorResult1.all().get());\n            assertNull(errorResult1.partitionResult(tp1).get());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3351,"status":"M"},{"authorDate":"2021-07-02 05:05:03","commitOrder":4,"curCode":"    public void testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors() throws Exception {\n        \r\n\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockCluster(1, 0))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_NOT_AVAILABLE, Node.noNode()));\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS, Node.noNode()));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetCommitResponse(tp1, Errors.NONE));\n\n            Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n            offsets.put(tp1,  new OffsetAndMetadata(123L));\n            final AlterConsumerGroupOffsetsResult result = env.adminClient()\n                .alterConsumerGroupOffsets(GROUP_ID, offsets);\n\n            assertNull(result.all().get());\n            assertNull(result.partitionResult(tp1).get());\n        }\n    }\n","date":"2021-07-02 05:05:03","endLine":4148,"groupId":"9299","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/6e22d17ff9336e8bcef276360419e86393b15b.src","preCode":"    public void testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors() throws Exception {\n        \r\n\n        final String groupId = \"group-0\";\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockCluster(1, 0))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_NOT_AVAILABLE,  Node.noNode()));\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS, Node.noNode()));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetCommitResponse(tp1, Errors.NONE));\n\n            Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n            offsets.put(tp1,  new OffsetAndMetadata(123L));\n            final AlterConsumerGroupOffsetsResult result = env.adminClient()\n                .alterConsumerGroupOffsets(groupId, offsets);\n\n            assertNull(result.all().get());\n            assertNull(result.partitionResult(tp1).get());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":4121,"status":"M"}],"commitId":"f5d5f654db359af077088685e29fbe5ea69616cf","commitMessage":"@@@KAFKA-12663: Update FindCoordinator to support batch lookups (KIP-699) (#10743)\n\nThis implements KIP-699: https://cwiki.apache.org/confluence/display/KAFKA/KIP-699%3A+Update+FindCoordinator+to+resolve+multiple+Coordinators+at+a+time\n\nIt updates FindCoordinator request and response to support resolving multiple coordinators at a time. If a broker does not support the new FindCoordinator version.  clients can revert to the previous behaviour and use a request for each coordinator.\n\nReviewers: David Jacot <djacot@confluent.io>.  Tom Bentley <tbentley@redhat.com>.  Sanjana Kaundinya <skaundinya@gmail.com>","date":"2021-07-02 05:05:03","modifiedFileCount":"33","status":"M","submitter":"Mickael Maison"},{"authorTime":"2021-07-02 05:05:03","codes":[{"authorDate":"2021-07-15 20:18:03","commitOrder":5,"curCode":"    public void testDeleteConsumerGroupOffsetsRetriableErrors() throws Exception {\n        \r\n\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockCluster(1, 0))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS));\n\n            \r\n\r\n\r\n\r\n\r\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.NOT_COORDINATOR));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_NOT_AVAILABLE));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(\"foo\", 0, Errors.NONE));\n\n            final DeleteConsumerGroupOffsetsResult errorResult1 = env.adminClient()\n                .deleteConsumerGroupOffsets(GROUP_ID, Stream.of(tp1).collect(Collectors.toSet()));\n\n            assertNull(errorResult1.all().get());\n            assertNull(errorResult1.partitionResult(tp1).get());\n        }\n    }\n","date":"2021-07-15 20:18:03","endLine":3436,"groupId":"103855","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDeleteConsumerGroupOffsetsRetriableErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/9890ff8b87e8735c8cd06a60d7d4f80ff80f15.src","preCode":"    public void testDeleteConsumerGroupOffsetsRetriableErrors() throws Exception {\n        \r\n\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockCluster(1, 0))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_NOT_AVAILABLE));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS));\n\n            \r\n\r\n\r\n\r\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(Errors.NOT_COORDINATOR));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetDeleteResponse(\"foo\", 0, Errors.NONE));\n\n            final DeleteConsumerGroupOffsetsResult errorResult1 = env.adminClient()\n                .deleteConsumerGroupOffsets(GROUP_ID, Stream.of(tp1).collect(Collectors.toSet()));\n\n            assertNull(errorResult1.all().get());\n            assertNull(errorResult1.partitionResult(tp1).get());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3394,"status":"M"},{"authorDate":"2021-07-02 05:05:03","commitOrder":5,"curCode":"    public void testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors() throws Exception {\n        \r\n\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockCluster(1, 0))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_NOT_AVAILABLE, Node.noNode()));\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS, Node.noNode()));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetCommitResponse(tp1, Errors.NONE));\n\n            Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n            offsets.put(tp1,  new OffsetAndMetadata(123L));\n            final AlterConsumerGroupOffsetsResult result = env.adminClient()\n                .alterConsumerGroupOffsets(GROUP_ID, offsets);\n\n            assertNull(result.all().get());\n            assertNull(result.partitionResult(tp1).get());\n        }\n    }\n","date":"2021-07-02 05:05:03","endLine":4148,"groupId":"103855","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/6e22d17ff9336e8bcef276360419e86393b15b.src","preCode":"    public void testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors() throws Exception {\n        \r\n\n        final TopicPartition tp1 = new TopicPartition(\"foo\", 0);\n\n        try (AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockCluster(1, 0))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_NOT_AVAILABLE, Node.noNode()));\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS, Node.noNode()));\n\n            env.kafkaClient().prepareResponse(\n                prepareFindCoordinatorResponse(Errors.NONE, env.cluster().controller()));\n\n            env.kafkaClient().prepareResponse(\n                prepareOffsetCommitResponse(tp1, Errors.NONE));\n\n            Map<TopicPartition, OffsetAndMetadata> offsets = new HashMap<>();\n            offsets.put(tp1,  new OffsetAndMetadata(123L));\n            final AlterConsumerGroupOffsetsResult result = env.adminClient()\n                .alterConsumerGroupOffsets(GROUP_ID, offsets);\n\n            assertNull(result.all().get());\n            assertNull(result.partitionResult(tp1).get());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":4121,"status":"N"}],"commitId":"46c91f471259357bc63dd627b54113453c206eb9","commitMessage":"@@@KAFKA-13059: Make DeleteConsumerGroupOffsetsHandler unmap for COORDINATOR_NOT_AVAILABLE error (#11019)\n\nThis patch improves the error handling in `DeleteConsumerGroupOffsetsHandler`. `COORDINATOR_NOT_AVAILABLE` is not unmapped to trigger a new find coordinator request to be sent out.\n\nReviewers: David Jacot <djacot@confluent.io>","date":"2021-07-15 20:18:03","modifiedFileCount":"3","status":"M","submitter":"Luke Chen"}]
