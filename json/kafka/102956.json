[{"authorTime":"2021-05-20 05:58:46","codes":[{"authorDate":"2021-05-20 05:58:46","commitOrder":6,"curCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(\n                Thread.currentThread().getName(),\n                context.taskId().toString(),\n                (StreamsMetricsImpl) context.metrics()\n            );\n            valueGetter.init(context);\n        }\n","date":"2021-05-20 05:58:46","endLine":83,"groupId":"5544","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"(finalProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/9ab914335227bde86b5fb2483f2925997467c0.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(\n                Thread.currentThread().getName(),\n                context.taskId().toString(),\n                (StreamsMetricsImpl) context.metrics()\n            );\n            valueGetter.init(context);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoin.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2021-05-20 05:58:46","commitOrder":6,"curCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(\n                Thread.currentThread().getName(),\n                context.taskId().toString(),\n                (StreamsMetricsImpl) context.metrics());\n            store =  context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                store,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","date":"2021-05-20 05:58:46","endLine":79,"groupId":"5544","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"(finalProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/c197361db34bc80d3e65cc50b2a414ea42c13c.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(\n                Thread.currentThread().getName(),\n                context.taskId().toString(),\n                (StreamsMetricsImpl) context.metrics());\n            store =  context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                store,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamAggregate.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"MB"}],"commitId":"476eccb968322879b1843dfa837b63ce386d192c","commitMessage":"@@@KAFKA-12815: Preserve context for KTable.transformValues when getting value from upstream state store (#10720)\n\nReviewers: Victoria Xia <victoria.xia@confluent.io>.  John Roesler <john@confluent.io>","date":"2021-05-20 05:58:46","modifiedFileCount":"17","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":7,"curCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            droppedRecordsSensor = droppedRecordsSensor(\n                Thread.currentThread().getName(),\n                context.taskId().toString(),\n                (StreamsMetricsImpl) context.metrics()\n            );\n            valueGetter.init(context);\n        }\n","date":"2021-06-01 20:05:08","endLine":83,"groupId":"5544","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"(finalProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4e/aee6b4758201f7cf30cff7f4661b5c0830bdd4.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(\n                Thread.currentThread().getName(),\n                context.taskId().toString(),\n                (StreamsMetricsImpl) context.metrics()\n            );\n            valueGetter.init(context);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoin.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":7,"curCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            droppedRecordsSensor = droppedRecordsSensor(\n                Thread.currentThread().getName(),\n                context.taskId().toString(),\n                (StreamsMetricsImpl) context.metrics());\n            store =  context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                store,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","date":"2021-06-01 20:05:08","endLine":79,"groupId":"5544","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"(finalProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/43/97fbc429d5597a2803d787cabe3f63720bef89.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(\n                Thread.currentThread().getName(),\n                context.taskId().toString(),\n                (StreamsMetricsImpl) context.metrics());\n            store =  context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                store,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamAggregate.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-22 22:17:11","codes":[{"authorDate":"2021-06-22 22:17:11","commitOrder":8,"curCode":"        public void init(final org.apache.kafka.streams.processor.ProcessorContext context) {\n            super.init(context);\n            droppedRecordsSensor = droppedRecordsSensor(\n                Thread.currentThread().getName(),\n                context.taskId().toString(),\n                (StreamsMetricsImpl) context.metrics()\n            );\n            valueGetter.init(context);\n        }\n","date":"2021-06-22 22:17:11","endLine":81,"groupId":"102956","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"init","params":"(finalorg.apache.kafka.streams.processor.ProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/2017a4396552e19089fe0473882c409375ebb8.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            droppedRecordsSensor = droppedRecordsSensor(\n                Thread.currentThread().getName(),\n                context.taskId().toString(),\n                (StreamsMetricsImpl) context.metrics()\n            );\n            valueGetter.init(context);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoin.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2021-06-22 22:17:11","commitOrder":8,"curCode":"        public void init(final org.apache.kafka.streams.processor.ProcessorContext context) {\n            super.init(context);\n            droppedRecordsSensor = droppedRecordsSensor(\n                Thread.currentThread().getName(),\n                context.taskId().toString(),\n                (StreamsMetricsImpl) context.metrics());\n            store =  context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                store,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","date":"2021-06-22 22:17:11","endLine":77,"groupId":"102956","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"init","params":"(finalorg.apache.kafka.streams.processor.ProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0f/83849e376212324be55eb79cf4a9ec365799f1.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            droppedRecordsSensor = droppedRecordsSensor(\n                Thread.currentThread().getName(),\n                context.taskId().toString(),\n                (StreamsMetricsImpl) context.metrics());\n            store =  context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                store,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamAggregate.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"c3475081c5e8228e9bd3a45022a93d61e542f72e","commitMessage":"@@@KAFKA-10546: Deprecate old PAPI (#10869)\n\n* Deprecate the old Processor API\n* Suppress warnings on all internal usages of the old API\n  (which will be migrated in other child tickets of KAFKA-8410)\n* Add new KStream#process methods.  since KAFKA-10603 has not seen any action.\n","date":"2021-06-22 22:17:11","modifiedFileCount":"124","status":"M","submitter":"John Roesler"}]
