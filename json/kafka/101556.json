[{"authorTime":"2017-05-04 07:15:54","codes":[{"authorDate":"2017-05-04 07:15:54","commitOrder":1,"curCode":"    private void doAggregateSessionWindows(final Map<Windowed<String>, Integer> results) throws Exception {\n        driver = new KStreamTestDriver(builder, TestUtils.tempDirectory());\n        driver.setTime(10);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(15);\n        driver.process(TOPIC, \"2\", \"2\");\n        driver.setTime(30);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(70);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(90);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(100);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.flushState();\n        assertEquals(Integer.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Integer.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Integer.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","date":"2017-05-04 07:15:54","endLine":200,"groupId":"5186","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doAggregateSessionWindows","params":"(finalMap<Windowed<String>@Integer>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f2/1c7d357583cb27d1f642299f3626198dd4c2e3.src","preCode":"    private void doAggregateSessionWindows(final Map<Windowed<String>, Integer> results) throws Exception {\n        driver = new KStreamTestDriver(builder, TestUtils.tempDirectory());\n        driver.setTime(10);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(15);\n        driver.process(TOPIC, \"2\", \"2\");\n        driver.setTime(30);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(70);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(90);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(100);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.flushState();\n        assertEquals(Integer.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Integer.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Integer.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"B"},{"authorDate":"2017-05-04 07:15:54","commitOrder":1,"curCode":"    private void doCountSessionWindows(final Map<Windowed<String>, Long> results) throws Exception {\n        driver = new KStreamTestDriver(builder, TestUtils.tempDirectory());\n        driver.setTime(10);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(15);\n        driver.process(TOPIC, \"2\", \"2\");\n        driver.setTime(30);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(70);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(90);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(100);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.flushState();\n        assertEquals(Long.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Long.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Long.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","date":"2017-05-04 07:15:54","endLine":280,"groupId":"5186","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doCountSessionWindows","params":"(finalMap<Windowed<String>@Long>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f2/1c7d357583cb27d1f642299f3626198dd4c2e3.src","preCode":"    private void doCountSessionWindows(final Map<Windowed<String>, Long> results) throws Exception {\n        driver = new KStreamTestDriver(builder, TestUtils.tempDirectory());\n        driver.setTime(10);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(15);\n        driver.process(TOPIC, \"2\", \"2\");\n        driver.setTime(30);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(70);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(90);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(100);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.flushState();\n        assertEquals(Long.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Long.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Long.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"B"}],"commitId":"ec9e4eafa406fec897713310bafdedf6bbb3c0c5","commitMessage":"@@@KAFKA-5045: Clarify on KTable APIs for queryable stores\n\nThis is the implementation of KIP-114: KTable state stores and improved semantics:\n- Allow for decoupling between querying and materialisation\n- consistent APIs.  overloads with queryableName and without\n- depreciated several KTable calls\n- new unit and integration tests\n\nIn this implementation.  state stores are materialized if the user desires them to be queryable. In subsequent versions we can offer a second option.  to have a view-like state store. The tradeoff then would be between storage space (materialize) and re-computation (view). That tradeoff can be exploited by later query optimizers.\n\nAuthor: Eno Thereska <eno.thereska@gmail.com>\n\nReviewers: Damian Guy.  Matthias J. Sax.  Guozhang Wang\n\nCloses #2832 from enothereska/KAFKA-5045-ktable\n","date":"2017-05-04 07:15:54","modifiedFileCount":"26","status":"B","submitter":"Eno Thereska"},{"authorTime":"2017-08-02 07:16:34","codes":[{"authorDate":"2017-08-02 07:16:34","commitOrder":2,"curCode":"    private void doAggregateSessionWindows(final Map<Windowed<String>, Integer> results) throws Exception {\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(10);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(15);\n        driver.process(TOPIC, \"2\", \"2\");\n        driver.setTime(30);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(70);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(90);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(100);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.flushState();\n        assertEquals(Integer.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Integer.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Integer.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","date":"2017-08-02 07:16:34","endLine":193,"groupId":"5186","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doAggregateSessionWindows","params":"(finalMap<Windowed<String>@Integer>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e8/f2a016f2280660606621fce150c5024d8ae33d.src","preCode":"    private void doAggregateSessionWindows(final Map<Windowed<String>, Integer> results) throws Exception {\n        driver = new KStreamTestDriver(builder, TestUtils.tempDirectory());\n        driver.setTime(10);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(15);\n        driver.process(TOPIC, \"2\", \"2\");\n        driver.setTime(30);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(70);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(90);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(100);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.flushState();\n        assertEquals(Integer.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Integer.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Integer.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2017-08-02 07:16:34","commitOrder":2,"curCode":"    private void doCountSessionWindows(final Map<Windowed<String>, Long> results) throws Exception {\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(10);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(15);\n        driver.process(TOPIC, \"2\", \"2\");\n        driver.setTime(30);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(70);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(90);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(100);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.flushState();\n        assertEquals(Long.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Long.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Long.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","date":"2017-08-02 07:16:34","endLine":273,"groupId":"5186","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doCountSessionWindows","params":"(finalMap<Windowed<String>@Long>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e8/f2a016f2280660606621fce150c5024d8ae33d.src","preCode":"    private void doCountSessionWindows(final Map<Windowed<String>, Long> results) throws Exception {\n        driver = new KStreamTestDriver(builder, TestUtils.tempDirectory());\n        driver.setTime(10);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(15);\n        driver.process(TOPIC, \"2\", \"2\");\n        driver.setTime(30);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(70);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(90);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(100);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.flushState();\n        assertEquals(Long.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Long.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Long.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"}],"commitId":"edcefccfd7bd83110746fa81669e0d69ece5bb4b","commitMessage":"@@@KAFKA-3623: KStreamTestDriver extends ExternalResource\n\nIn the streams project.  there are a number of unit tests that has duplicate\ncode with respect to the tearDown() method.  in which it tries to close the\nKStreamTestDriver connection. The goal of this changeset is to eliminate\nthis duplication by converting the KStreamTestDriver class to an ExternalResource\nclass which is the base class of JUnit Rule.\n\nIn every unit tests that calls KStreamTestDriver.  we annotate the KStreamTestDriver\nusing Rule annotation. In the KStreamTestDriver class.  we override the after()\nmethod. This after() method in turn calls the close() method which was previously\ncalled in the tearDown() method in the unit tests. By annotating the KStreamTestDriver\nas a Rule.  the after() method will be called automatically after every testcase.\n\nAuthor: johnma14 <mariamj@us.ibm.com>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3589 from johnma14/bug/KAFKA-3623\n","date":"2017-08-02 07:16:34","modifiedFileCount":"34","status":"M","submitter":"Mariam John"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2017-09-11 16:42:10","commitOrder":3,"curCode":"    private void doAggregateSessionWindows(final Map<Windowed<String>, Integer> results) {\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(10);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(15);\n        driver.process(TOPIC, \"2\", \"2\");\n        driver.setTime(30);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(70);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(90);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(100);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.flushState();\n        assertEquals(Integer.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Integer.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Integer.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","date":"2017-09-11 16:42:10","endLine":199,"groupId":"5186","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doAggregateSessionWindows","params":"(finalMap<Windowed<String>@Integer>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bc/65e094d2ce3d84199bd2a63eba3c18e3197861.src","preCode":"    private void doAggregateSessionWindows(final Map<Windowed<String>, Integer> results) throws Exception {\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(10);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(15);\n        driver.process(TOPIC, \"2\", \"2\");\n        driver.setTime(30);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(70);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(90);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(100);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.flushState();\n        assertEquals(Integer.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Integer.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Integer.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":3,"curCode":"    private void doCountSessionWindows(final Map<Windowed<String>, Long> results) {\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(10);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(15);\n        driver.process(TOPIC, \"2\", \"2\");\n        driver.setTime(30);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(70);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(90);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(100);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.flushState();\n        assertEquals(Long.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Long.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Long.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","date":"2017-09-11 16:42:10","endLine":279,"groupId":"5186","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doCountSessionWindows","params":"(finalMap<Windowed<String>@Long>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bc/65e094d2ce3d84199bd2a63eba3c18e3197861.src","preCode":"    private void doCountSessionWindows(final Map<Windowed<String>, Long> results) throws Exception {\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(10);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(15);\n        driver.process(TOPIC, \"2\", \"2\");\n        driver.setTime(30);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(70);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(90);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(100);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.flushState();\n        assertEquals(Long.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Long.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Long.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"c5464edbb7a6821e0a91a3712b1fe2fd92a22d68","commitMessage":"@@@KAFKA-5531; throw concrete exceptions in streams tests\n\n1. Now instead of just generic `Exception` methods declare more concrete\nexceptions throwing or don't declare any throwing at all.  if not needed.\n2. `SimpleBenchmark.run()` throws `RuntimeException`\n3. `SimpleBenchmark.produce()` throws `IllegalArgumentException`\n4. Expect `ProcessorStateException` in\n`StandbyTaskTest.testUpdateNonPersistentStore()`\n\n/cc enothereska\n\nAuthor: Evgeny Veretennikov <evg.veretennikov@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>\n\nCloses #3485 from evis/5531-throw-concrete-exceptions\n","date":"2017-09-11 16:42:10","modifiedFileCount":"106","status":"M","submitter":"Evgeny Veretennikov"},{"authorTime":"2018-04-27 02:30:42","codes":[{"authorDate":"2018-04-27 02:30:42","commitOrder":4,"curCode":"    private void doAggregateSessionWindows(final Map<Windowed<String>, Integer> results) {\n        driver = new TopologyTestDriver(builder.build(), props);\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 10));\n        driver.pipeInput(recordFactory.create(TOPIC, \"2\", \"2\", 15));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 30));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 70));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 90));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 100));\n        assertEquals(Integer.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Integer.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Integer.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","date":"2018-04-27 02:30:42","endLine":237,"groupId":"15629","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doAggregateSessionWindows","params":"(finalMap<Windowed<String>@Integer>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/ca30f48cc39ae5d081ec634791659b31ada1a9.src","preCode":"    private void doAggregateSessionWindows(final Map<Windowed<String>, Integer> results) {\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(10);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(15);\n        driver.process(TOPIC, \"2\", \"2\");\n        driver.setTime(30);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(70);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(90);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(100);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.flushState();\n        assertEquals(Integer.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Integer.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Integer.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":226,"status":"M"},{"authorDate":"2018-04-27 02:30:42","commitOrder":4,"curCode":"    private void doCountSessionWindows(final Map<Windowed<String>, Long> results) {\n        driver = new TopologyTestDriver(builder.build(), props);\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 10));\n        driver.pipeInput(recordFactory.create(TOPIC, \"2\", \"2\", 15));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 30));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 70));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 90));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 100));\n        assertEquals(Long.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Long.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Long.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","date":"2018-04-27 02:30:42","endLine":311,"groupId":"19607","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doCountSessionWindows","params":"(finalMap<Windowed<String>@Long>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/ca30f48cc39ae5d081ec634791659b31ada1a9.src","preCode":"    private void doCountSessionWindows(final Map<Windowed<String>, Long> results) {\n        driver.setUp(builder, TestUtils.tempDirectory());\n        driver.setTime(10);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(15);\n        driver.process(TOPIC, \"2\", \"2\");\n        driver.setTime(30);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(70);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(90);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.setTime(100);\n        driver.process(TOPIC, \"1\", \"1\");\n        driver.flushState();\n        assertEquals(Long.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Long.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Long.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"}],"commitId":"885abbfcd40aab57acec278d976956f07be15090","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [partial] (#4832)\n\n* Remove ProcessorTopologyTestDriver from TopologyTest\n* Fix ProcessorTopologyTest\n* Remove ProcessorTopologyTestDriver and InternalTopologyAccessor\n* Partially refactored StreamsBuilderTest but missing one test\n* Refactor KStreamBuilderTest\n* Refactor AbstractStreamTest\n* Further cleanup of AbstractStreamTest\n* Refactor GlobalKTableJoinsTest\n* Refactor InternalStreamsBuilderTest\n* Fix circular dependency in build.gradle\n* Refactor KGroupedStreamImplTest\n* Partial modifications to KGroupedTableImplTest\n* Refactor KGroupedTableImplTest\n* Refactor KStreamBranchTest\n* Refactor KStreamFilterTest\n* Refactor KStreamFlatMapTest KStreamFlatMapValuesTest\n* Refactor KStreamForeachTest\n* Refactor KStreamGlobalKTableJoinTest\n* Refactor KStreamGlobalKTableLeftJoinTest\n* Refactor KStreamImplTest\n* Refactor KStreamImplTest\n* Refactor KStreamKStreamJoinTest\n* Refactor KStreamKStreamLeftJoinTest\n* Refactor KStreamKTableJoinTest\n* Refactor KStreamKTableLeftJoinTest\n* Refactor KStreamMapTest and KStreamMapValuesTest\n* Refactor KStreamPeekTest and KStreamTransformTest\n* Refactor KStreamSelectKeyTest\n* Refactor KStreamTransformValuesTest\n* Refactor KStreamWindowAggregateTest\n* Add Depercation anotation to KStreamTestDriver and rollback failing tests in StreamsBuilderTest and KTableAggregateTest\n* Refactor KTableFilterTest\n* Refactor KTableForeachTest\n* Add getter for ProcessorTopology.  and simplify tests in StreamsBuilderTest\n* Refactor KTableImplTest\n* Remove unused imports\n* Refactor KTableAggregateTest\n* Fix style errors\n* Fix gradle build\n* Address reviewer comments:\n  - Remove properties new instance\n  - Remove extraneous line\n  - Remove unnecessary TopologyTestDriver instances from StreamsBuilderTest\n  - Move props.clear() to @After\n  - Clarify use of timestamp in KStreamFlatMapValuesTest\n  - Keep test using old Punctuator in KStreamTransformTest\n  - Add comment to clarify clock advances in KStreamTransformTest\n  - Add TopologyTestDriverWrapper class to access the protected constructor of TopologyTestDriver\n  - Revert KTableImplTest.testRepartition to KStreamTestDriver to avoid exposing the TopologyTestDriver processor topology\n  - Revert partially migrated classes: KTableAggregateTest.  KTableFilterTest.  and KTableImplTest\n* Rebase on current trunk an fix conflicts\n\nReviewers: Matthias J Sax <matthias@confluentio>.  Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2018-04-27 02:30:42","modifiedFileCount":"33","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-05-08 00:21:20","codes":[{"authorDate":"2018-05-08 00:21:20","commitOrder":5,"curCode":"    private void doAggregateSessionWindows(final Map<Windowed<String>, Integer> results) {\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 10));\n            driver.pipeInput(recordFactory.create(TOPIC, \"2\", \"2\", 15));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 30));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 70));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 90));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 100));\n        }\n        assertEquals(Integer.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Integer.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Integer.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","date":"2018-05-08 00:21:20","endLine":221,"groupId":"15629","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doAggregateSessionWindows","params":"(finalMap<Windowed<String>@Integer>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/a9226d89bb717e8cce7b108aa8f69161cdd8b0.src","preCode":"    private void doAggregateSessionWindows(final Map<Windowed<String>, Integer> results) {\n        driver = new TopologyTestDriver(builder.build(), props);\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 10));\n        driver.pipeInput(recordFactory.create(TOPIC, \"2\", \"2\", 15));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 30));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 70));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 90));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 100));\n        assertEquals(Integer.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Integer.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Integer.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"},{"authorDate":"2018-05-08 00:21:20","commitOrder":5,"curCode":"    private void doCountSessionWindows(final Map<Windowed<String>, Long> results) {\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 10));\n            driver.pipeInput(recordFactory.create(TOPIC, \"2\", \"2\", 15));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 30));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 70));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 90));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 100));\n        }\n        assertEquals(Long.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Long.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Long.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","date":"2018-05-08 00:21:20","endLine":296,"groupId":"19607","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doCountSessionWindows","params":"(finalMap<Windowed<String>@Long>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/a9226d89bb717e8cce7b108aa8f69161cdd8b0.src","preCode":"    private void doCountSessionWindows(final Map<Windowed<String>, Long> results) {\n        driver = new TopologyTestDriver(builder.build(), props);\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 10));\n        driver.pipeInput(recordFactory.create(TOPIC, \"2\", \"2\", 15));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 30));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 70));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 90));\n        driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 100));\n        assertEquals(Long.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Long.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Long.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":284,"status":"M"}],"commitId":"6f641fef6a88036ab4dacb59ab21bc8b21ef9bcf","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [cleanup] (#4939)\n\n* Add method to create test properties to StreamsTestUtils\n* Make TopologyTestDriver protected constructor package-private\n* Add comment suggesting the use of TopologyTestDriver to KStreamTestDriver\n* Cleanup:\n    - GlobalKTableJoinsTest\n    - KGroupedStreamImplTest\n    - KGroupedTableImplTest\n    - KStreamBranchTest\n    - KStreamFilterTest\n    - KStreamFlatMapTest\n    - KStreamFlatMapValuesTest\n    - KStreamForeachTest\n    - KStreamGlobalKTableJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamImplTest\n    - KStreamKStreamJoinTest\n    - KStreamKStreamLeftJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamKTableJoinTest\n    - KStreamKTableLeftJoinTest\n    - KStreamMapTest\n    - KStreamMapValuesTest\n    - KStreamPeekTest\n    - StreamsBuilderTest\n    - KStreamSelectKeyTest\n    - KStreamTransformTest\n    - KStreamTransformValuesTest\n    - KStreamWindowAggregateTest\n    - KTableForeachTest\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-05-08 00:21:20","modifiedFileCount":"27","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2019-05-13 06:31:44","codes":[{"authorDate":"2019-05-13 06:31:44","commitOrder":6,"curCode":"    private void doAggregateSessionWindows(final MockProcessorSupplier<Windowed<String>, Integer> supplier) {\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 10));\n            driver.pipeInput(recordFactory.create(TOPIC, \"2\", \"2\", 15));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 30));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 70));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 100));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 90));\n        }\n        final Map<Windowed<String>, ValueAndTimestamp<Integer>> result\n            = supplier.theCapturedProcessor().lastValueAndTimestampPerKey;\n        assertEquals(\n            ValueAndTimestamp.make(2, 30L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 30L))));\n        assertEquals(\n            ValueAndTimestamp.make(1, 15L),\n            result.get(new Windowed<>(\"2\", new SessionWindow(15L, 15L))));\n        assertEquals(\n            ValueAndTimestamp.make(3, 100L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(70L, 100L))));\n    }\n","date":"2019-05-13 06:31:44","endLine":178,"groupId":"9180","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doAggregateSessionWindows","params":"(finalMockProcessorSupplier<Windowed<String>@Integer>supplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/d15665ff58b8621a15306b3e30124bed83f28c.src","preCode":"    private void doAggregateSessionWindows(final Map<Windowed<String>, Integer> results) {\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 10));\n            driver.pipeInput(recordFactory.create(TOPIC, \"2\", \"2\", 15));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 30));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 70));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 90));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 100));\n        }\n        assertEquals(Integer.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Integer.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Integer.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2019-05-13 06:31:44","commitOrder":6,"curCode":"    private void doCountSessionWindows(final MockProcessorSupplier<Windowed<String>, Long> supplier) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 10));\n            driver.pipeInput(recordFactory.create(TOPIC, \"2\", \"2\", 15));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 30));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 70));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 100));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 90));\n        }\n        final Map<Windowed<String>, ValueAndTimestamp<Long>> result =\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey;\n        assertEquals(\n            ValueAndTimestamp.make(2L, 30L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 30L))));\n        assertEquals(\n            ValueAndTimestamp.make(1L, 15L),\n            result.get(new Windowed<>(\"2\", new SessionWindow(15L, 15L))));\n        assertEquals(\n            ValueAndTimestamp.make(3L, 100L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(70L, 100L))));\n    }\n","date":"2019-05-13 06:31:44","endLine":234,"groupId":"9183","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"doCountSessionWindows","params":"(finalMockProcessorSupplier<Windowed<String>@Long>supplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/d15665ff58b8621a15306b3e30124bed83f28c.src","preCode":"    private void doCountSessionWindows(final Map<Windowed<String>, Long> results) {\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 10));\n            driver.pipeInput(recordFactory.create(TOPIC, \"2\", \"2\", 15));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 30));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 70));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 90));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 100));\n        }\n        assertEquals(Long.valueOf(2), results.get(new Windowed<>(\"1\", new SessionWindow(10, 30))));\n        assertEquals(Long.valueOf(1), results.get(new Windowed<>(\"2\", new SessionWindow(15, 15))));\n        assertEquals(Long.valueOf(3), results.get(new Windowed<>(\"1\", new SessionWindow(70, 100))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"8a237f599afa539868a138b5a2534dbf884cb4ec","commitMessage":"@@@KAFKA-6455: Session Aggregation should use window-end-time as record timestamp (#6645)\n\nFor session-windows.  the result record should have the window-end timestamp as record timestamp.\n\nRebased to resolve merge conflicts. Removed unused classes TupleForwarder and ForwardingCacheFlushListener (replace with TimestampedTupleForwarder.  SessionTupleForwarder.  TimestampedCacheFlushListerner.  and SessionCacheFlushListener)\n\nReviewers: John Roesler <john@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-13 06:31:44","modifiedFileCount":"14","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-10-07 16:01:58","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":7,"curCode":"    private void doAggregateSessionWindows(final MockProcessorSupplier<Windowed<String>, Integer> supplier) {\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                    driver.createInputTopic(TOPIC, new StringSerializer(), new StringSerializer());\n            inputTopic.pipeInput(\"1\", \"1\", 10);\n            inputTopic.pipeInput(\"2\", \"2\", 15);\n            inputTopic.pipeInput(\"1\", \"1\", 30);\n            inputTopic.pipeInput(\"1\", \"1\", 70);\n            inputTopic.pipeInput(\"1\", \"1\", 100);\n            inputTopic.pipeInput(\"1\", \"1\", 90);\n        }\n        final Map<Windowed<String>, ValueAndTimestamp<Integer>> result\n            = supplier.theCapturedProcessor().lastValueAndTimestampPerKey;\n        assertEquals(\n            ValueAndTimestamp.make(2, 30L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 30L))));\n        assertEquals(\n            ValueAndTimestamp.make(1, 15L),\n            result.get(new Windowed<>(\"2\", new SessionWindow(15L, 15L))));\n        assertEquals(\n            ValueAndTimestamp.make(3, 100L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(70L, 100L))));\n    }\n","date":"2019-10-07 16:01:58","endLine":178,"groupId":"20273","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"doAggregateSessionWindows","params":"(finalMockProcessorSupplier<Windowed<String>@Integer>supplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ab/2eb113bf8d01100dfbacc022818c3226c7fbc5.src","preCode":"    private void doAggregateSessionWindows(final MockProcessorSupplier<Windowed<String>, Integer> supplier) {\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 10));\n            driver.pipeInput(recordFactory.create(TOPIC, \"2\", \"2\", 15));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 30));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 70));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 100));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 90));\n        }\n        final Map<Windowed<String>, ValueAndTimestamp<Integer>> result\n            = supplier.theCapturedProcessor().lastValueAndTimestampPerKey;\n        assertEquals(\n            ValueAndTimestamp.make(2, 30L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 30L))));\n        assertEquals(\n            ValueAndTimestamp.make(1, 15L),\n            result.get(new Windowed<>(\"2\", new SessionWindow(15L, 15L))));\n        assertEquals(\n            ValueAndTimestamp.make(3, 100L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(70L, 100L))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2019-10-07 16:01:58","commitOrder":7,"curCode":"    private void doCountSessionWindows(final MockProcessorSupplier<Windowed<String>, Long> supplier) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                    driver.createInputTopic(TOPIC, new StringSerializer(), new StringSerializer());\n            inputTopic.pipeInput(\"1\", \"1\", 10);\n            inputTopic.pipeInput(\"2\", \"2\", 15);\n            inputTopic.pipeInput(\"1\", \"1\", 30);\n            inputTopic.pipeInput(\"1\", \"1\", 70);\n            inputTopic.pipeInput(\"1\", \"1\", 100);\n            inputTopic.pipeInput(\"1\", \"1\", 90);\n        }\n        final Map<Windowed<String>, ValueAndTimestamp<Long>> result =\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey;\n        assertEquals(\n            ValueAndTimestamp.make(2L, 30L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 30L))));\n        assertEquals(\n            ValueAndTimestamp.make(1L, 15L),\n            result.get(new Windowed<>(\"2\", new SessionWindow(15L, 15L))));\n        assertEquals(\n            ValueAndTimestamp.make(3L, 100L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(70L, 100L))));\n    }\n","date":"2019-10-07 16:01:58","endLine":236,"groupId":"20275","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"doCountSessionWindows","params":"(finalMockProcessorSupplier<Windowed<String>@Long>supplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ab/2eb113bf8d01100dfbacc022818c3226c7fbc5.src","preCode":"    private void doCountSessionWindows(final MockProcessorSupplier<Windowed<String>, Long> supplier) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 10));\n            driver.pipeInput(recordFactory.create(TOPIC, \"2\", \"2\", 15));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 30));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 70));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 100));\n            driver.pipeInput(recordFactory.create(TOPIC, \"1\", \"1\", 90));\n        }\n        final Map<Windowed<String>, ValueAndTimestamp<Long>> result =\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey;\n        assertEquals(\n            ValueAndTimestamp.make(2L, 30L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 30L))));\n        assertEquals(\n            ValueAndTimestamp.make(1L, 15L),\n            result.get(new Windowed<>(\"2\", new SessionWindow(15L, 15L))));\n        assertEquals(\n            ValueAndTimestamp.make(3L, 100L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(70L, 100L))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"a5a6938c69f4310f7ec519036f0df77d8022326a","commitMessage":"@@@KAFKA-8233: TopologyTestDriver test input and output usability improvements (#7378)\n\nImplements KIP-470\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-07 16:01:58","modifiedFileCount":"47","status":"M","submitter":"Jukka Karvanen"},{"authorTime":"2020-08-21 03:06:16","codes":[{"authorDate":"2020-08-21 03:06:16","commitOrder":8,"curCode":"    private void doAggregateSessionWindows(final MockProcessorSupplier<Windowed<String>, Integer> supplier) {\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                    driver.createInputTopic(TOPIC, new StringSerializer(), new StringSerializer());\n            inputTopic.pipeInput(\"1\", \"1\", 10);\n            inputTopic.pipeInput(\"2\", \"2\", 15);\n            inputTopic.pipeInput(\"1\", \"1\", 30);\n            inputTopic.pipeInput(\"1\", \"1\", 70);\n            inputTopic.pipeInput(\"1\", \"1\", 100);\n            inputTopic.pipeInput(\"1\", \"1\", 90);\n        }\n        final Map<Windowed<String>, ValueAndTimestamp<Integer>> result\n            = supplier.theCapturedProcessor().lastValueAndTimestampPerKey();\n        assertEquals(\n            ValueAndTimestamp.make(2, 30L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 30L))));\n        assertEquals(\n            ValueAndTimestamp.make(1, 15L),\n            result.get(new Windowed<>(\"2\", new SessionWindow(15L, 15L))));\n        assertEquals(\n            ValueAndTimestamp.make(3, 100L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(70L, 100L))));\n    }\n","date":"2020-08-21 03:06:16","endLine":180,"groupId":"101556","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"doAggregateSessionWindows","params":"(finalMockProcessorSupplier<Windowed<String>@Integer>supplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/34/de30cfac696193a02f72b9f48bf5aafd625281.src","preCode":"    private void doAggregateSessionWindows(final MockProcessorSupplier<Windowed<String>, Integer> supplier) {\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                    driver.createInputTopic(TOPIC, new StringSerializer(), new StringSerializer());\n            inputTopic.pipeInput(\"1\", \"1\", 10);\n            inputTopic.pipeInput(\"2\", \"2\", 15);\n            inputTopic.pipeInput(\"1\", \"1\", 30);\n            inputTopic.pipeInput(\"1\", \"1\", 70);\n            inputTopic.pipeInput(\"1\", \"1\", 100);\n            inputTopic.pipeInput(\"1\", \"1\", 90);\n        }\n        final Map<Windowed<String>, ValueAndTimestamp<Integer>> result\n            = supplier.theCapturedProcessor().lastValueAndTimestampPerKey;\n        assertEquals(\n            ValueAndTimestamp.make(2, 30L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 30L))));\n        assertEquals(\n            ValueAndTimestamp.make(1, 15L),\n            result.get(new Windowed<>(\"2\", new SessionWindow(15L, 15L))));\n        assertEquals(\n            ValueAndTimestamp.make(3, 100L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(70L, 100L))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"},{"authorDate":"2020-08-21 03:06:16","commitOrder":8,"curCode":"    private void doCountSessionWindows(final MockProcessorSupplier<Windowed<String>, Long> supplier) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                    driver.createInputTopic(TOPIC, new StringSerializer(), new StringSerializer());\n            inputTopic.pipeInput(\"1\", \"1\", 10);\n            inputTopic.pipeInput(\"2\", \"2\", 15);\n            inputTopic.pipeInput(\"1\", \"1\", 30);\n            inputTopic.pipeInput(\"1\", \"1\", 70);\n            inputTopic.pipeInput(\"1\", \"1\", 100);\n            inputTopic.pipeInput(\"1\", \"1\", 90);\n        }\n        final Map<Windowed<String>, ValueAndTimestamp<Long>> result =\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey();\n        assertEquals(\n            ValueAndTimestamp.make(2L, 30L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 30L))));\n        assertEquals(\n            ValueAndTimestamp.make(1L, 15L),\n            result.get(new Windowed<>(\"2\", new SessionWindow(15L, 15L))));\n        assertEquals(\n            ValueAndTimestamp.make(3L, 100L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(70L, 100L))));\n    }\n","date":"2020-08-21 03:06:16","endLine":238,"groupId":"101556","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"doCountSessionWindows","params":"(finalMockProcessorSupplier<Windowed<String>@Long>supplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/34/de30cfac696193a02f72b9f48bf5aafd625281.src","preCode":"    private void doCountSessionWindows(final MockProcessorSupplier<Windowed<String>, Long> supplier) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                    driver.createInputTopic(TOPIC, new StringSerializer(), new StringSerializer());\n            inputTopic.pipeInput(\"1\", \"1\", 10);\n            inputTopic.pipeInput(\"2\", \"2\", 15);\n            inputTopic.pipeInput(\"1\", \"1\", 30);\n            inputTopic.pipeInput(\"1\", \"1\", 70);\n            inputTopic.pipeInput(\"1\", \"1\", 100);\n            inputTopic.pipeInput(\"1\", \"1\", 90);\n        }\n        final Map<Windowed<String>, ValueAndTimestamp<Long>> result =\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey;\n        assertEquals(\n            ValueAndTimestamp.make(2L, 30L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 30L))));\n        assertEquals(\n            ValueAndTimestamp.make(1L, 15L),\n            result.get(new Windowed<>(\"2\", new SessionWindow(15L, 15L))));\n        assertEquals(\n            ValueAndTimestamp.make(3L, 100L),\n            result.get(new Windowed<>(\"1\", new SessionWindow(70L, 100L))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"88d4bc4641064d21a481ba3b8562a4c97703d64d","commitMessage":"@@@KAFKA-10379: Implement the KIP-478 StreamBuilder#addGlobalStore() (#9148)\n\nFrom KIP-478.  implement the new StreamBuilder#addGlobalStore() overload\nthat takes a stateUpdateSupplier fully typed Processor<KIn.  VIn.  Void.  Void>.\n\nWhere necessary.  use the adapters to make the old APIs defer to the new ones. \nas well as limiting the scope of this change set.\n\nReviewers: Boyang Chen <boyang@apache.org>","date":"2020-08-21 03:06:16","modifiedFileCount":"41","status":"M","submitter":"John Roesler"}]
