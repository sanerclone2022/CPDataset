[{"authorTime":"2018-01-13 07:40:59","codes":[{"authorDate":"2018-01-13 07:40:59","commitOrder":1,"curCode":"    public void testLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-left\");\n\n        final List<List<String>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(\"A-null\"),\n            Collections.singletonList(\"A-a\"),\n            Collections.singletonList(\"B-a\"),\n            Arrays.asList(\"A-b\", \"B-b\"),\n            null,\n            null,\n            Arrays.asList(\"C-a\", \"C-b\"),\n            Arrays.asList(\"A-c\", \"B-c\", \"C-c\"),\n            null,\n            null,\n            null,\n            Arrays.asList(\"A-d\", \"B-d\", \"C-d\"),\n            Arrays.asList(\"D-a\", \"D-b\", \"D-c\", \"D-d\")\n        );\n\n        leftStream.leftJoin(rightStream, valueJoiner, JoinWindows.of(10000)).to(OUTPUT_TOPIC);\n\n        runTest(expectedResult);\n    }\n","date":"2018-01-13 07:40:59","endLine":142,"groupId":"22703","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/1dc058d8cad10973bd3cd0be78b0f9a20eb303.src","preCode":"    public void testLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-left\");\n\n        final List<List<String>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(\"A-null\"),\n            Collections.singletonList(\"A-a\"),\n            Collections.singletonList(\"B-a\"),\n            Arrays.asList(\"A-b\", \"B-b\"),\n            null,\n            null,\n            Arrays.asList(\"C-a\", \"C-b\"),\n            Arrays.asList(\"A-c\", \"B-c\", \"C-c\"),\n            null,\n            null,\n            null,\n            Arrays.asList(\"A-d\", \"B-d\", \"C-d\"),\n            Arrays.asList(\"D-a\", \"D-b\", \"D-c\", \"D-d\")\n        );\n\n        leftStream.leftJoin(rightStream, valueJoiner, JoinWindows.of(10000)).to(OUTPUT_TOPIC);\n\n        runTest(expectedResult);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"B"},{"authorDate":"2018-01-13 07:40:59","commitOrder":1,"curCode":"    public void testOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-outer\");\n\n        final List<List<String>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(\"A-null\"),\n            Collections.singletonList(\"A-a\"),\n            Collections.singletonList(\"B-a\"),\n            Arrays.asList(\"A-b\", \"B-b\"),\n            null,\n            null,\n            Arrays.asList(\"C-a\", \"C-b\"),\n            Arrays.asList(\"A-c\", \"B-c\", \"C-c\"),\n            null,\n            null,\n            null,\n            Arrays.asList(\"A-d\", \"B-d\", \"C-d\"),\n            Arrays.asList(\"D-a\", \"D-b\", \"D-c\", \"D-d\")\n        );\n\n        leftStream.outerJoin(rightStream, valueJoiner, JoinWindows.of(10000)).to(OUTPUT_TOPIC);\n\n        runTest(expectedResult);\n    }\n","date":"2018-01-13 07:40:59","endLine":199,"groupId":"22703","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/1dc058d8cad10973bd3cd0be78b0f9a20eb303.src","preCode":"    public void testOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-outer\");\n\n        final List<List<String>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(\"A-null\"),\n            Collections.singletonList(\"A-a\"),\n            Collections.singletonList(\"B-a\"),\n            Arrays.asList(\"A-b\", \"B-b\"),\n            null,\n            null,\n            Arrays.asList(\"C-a\", \"C-b\"),\n            Arrays.asList(\"A-c\", \"B-c\", \"C-c\"),\n            null,\n            null,\n            null,\n            Arrays.asList(\"A-d\", \"B-d\", \"C-d\"),\n            Arrays.asList(\"D-a\", \"D-b\", \"D-c\", \"D-d\")\n        );\n\n        leftStream.outerJoin(rightStream, valueJoiner, JoinWindows.of(10000)).to(OUTPUT_TOPIC);\n\n        runTest(expectedResult);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"B"}],"commitId":"3e21e17a7d3613bfab8c34555c0f598a07cf0675","commitMessage":"@@@MINOR: Improve Join integration test coverage.  PART I\n\n0. Rename `JoinIntegrationTest` to `StreamStreamJoinIntegrationTest`.  which is only for KStream-KStream joins.\n1. Extract the `AbstractJoinIntegrationTest` which is going to be used for all the join integration test classes.  parameterized with and without caching.\n2. Merge `KStreamRepartitionJoinTest.java` into `StreamStreamJoinIntegrationTest.java` with augmented stream-stream join.\n3. Add `TableTableJoinIntegrationTest` with detailed per-step expected results and removed `KTableKTableJoinIntegrationTest`.\n\nFindings of the integration test:\n\n1. Confirmed KAFKA-4309 with caching turned on.\n2. Found bug KAFKA-6398.\n3. Found bug KAFKA-6443.\n4. Found a bug that in CachingKeyValueStore.  we would flush before putting the record into the underlying store.  when the store is going to be used in the downstream processors with flushing it would result in incorrect results.  fixed the issue along with this PR.\n5. Consider a new optimization described in KAFKA-6286.\n\nFuture works including stream-table joins will be in other PRs.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Bill Bejeck <bill@confluent.io>\n\nCloses #4331 from guozhangwang/KMinor-join-integration-tests\n","date":"2018-01-13 07:40:59","modifiedFileCount":"2","status":"B","submitter":"Guozhang Wang"},{"authorTime":"2018-10-05 04:51:39","codes":[{"authorDate":"2018-10-05 04:51:39","commitOrder":2,"curCode":"    public void testLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-left\");\n\n        final List<List<String>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(\"A-null\"),\n            Collections.singletonList(\"A-a\"),\n            Collections.singletonList(\"B-a\"),\n            Arrays.asList(\"A-b\", \"B-b\"),\n            null,\n            null,\n            Arrays.asList(\"C-a\", \"C-b\"),\n            Arrays.asList(\"A-c\", \"B-c\", \"C-c\"),\n            null,\n            null,\n            null,\n            Arrays.asList(\"A-d\", \"B-d\", \"C-d\"),\n            Arrays.asList(\"D-a\", \"D-b\", \"D-c\", \"D-d\")\n        );\n\n        leftStream.leftJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTest(expectedResult);\n    }\n","date":"2018-10-05 04:51:39","endLine":143,"groupId":"22703","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/64/6185ebb93c6c92c5257e69c5f31aa1c473bdc4.src","preCode":"    public void testLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-left\");\n\n        final List<List<String>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(\"A-null\"),\n            Collections.singletonList(\"A-a\"),\n            Collections.singletonList(\"B-a\"),\n            Arrays.asList(\"A-b\", \"B-b\"),\n            null,\n            null,\n            Arrays.asList(\"C-a\", \"C-b\"),\n            Arrays.asList(\"A-c\", \"B-c\", \"C-c\"),\n            null,\n            null,\n            null,\n            Arrays.asList(\"A-d\", \"B-d\", \"C-d\"),\n            Arrays.asList(\"D-a\", \"D-b\", \"D-c\", \"D-d\")\n        );\n\n        leftStream.leftJoin(rightStream, valueJoiner, JoinWindows.of(10000)).to(OUTPUT_TOPIC);\n\n        runTest(expectedResult);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2018-10-05 04:51:39","commitOrder":2,"curCode":"    public void testOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-outer\");\n\n        final List<List<String>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(\"A-null\"),\n            Collections.singletonList(\"A-a\"),\n            Collections.singletonList(\"B-a\"),\n            Arrays.asList(\"A-b\", \"B-b\"),\n            null,\n            null,\n            Arrays.asList(\"C-a\", \"C-b\"),\n            Arrays.asList(\"A-c\", \"B-c\", \"C-c\"),\n            null,\n            null,\n            null,\n            Arrays.asList(\"A-d\", \"B-d\", \"C-d\"),\n            Arrays.asList(\"D-a\", \"D-b\", \"D-c\", \"D-d\")\n        );\n\n        leftStream.outerJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTest(expectedResult);\n    }\n","date":"2018-10-05 04:51:39","endLine":200,"groupId":"22703","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/64/6185ebb93c6c92c5257e69c5f31aa1c473bdc4.src","preCode":"    public void testOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-outer\");\n\n        final List<List<String>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(\"A-null\"),\n            Collections.singletonList(\"A-a\"),\n            Collections.singletonList(\"B-a\"),\n            Arrays.asList(\"A-b\", \"B-b\"),\n            null,\n            null,\n            Arrays.asList(\"C-a\", \"C-b\"),\n            Arrays.asList(\"A-c\", \"B-c\", \"C-c\"),\n            null,\n            null,\n            null,\n            Arrays.asList(\"A-d\", \"B-d\", \"C-d\"),\n            Arrays.asList(\"D-a\", \"D-b\", \"D-c\", \"D-d\")\n        );\n\n        leftStream.outerJoin(rightStream, valueJoiner, JoinWindows.of(10000)).to(OUTPUT_TOPIC);\n\n        runTest(expectedResult);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"}],"commitId":"ca641b3e2e48c14ff308181c775775408f5f35f7","commitMessage":"@@@KAFKA-7277: Migrate Streams API to Duration instead of longMs times (#5682)\n\nReviewers: Johne Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-10-05 04:51:39","modifiedFileCount":"97","status":"M","submitter":"Nikolay"},{"authorTime":"2019-05-31 00:46:12","codes":[{"authorDate":"2019-05-31 00:46:12","commitOrder":3,"curCode":"    public void testLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-left\");\n\n        final List<List<KeyValueTimestamp<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-null\", 3L)),\n            Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-a\", 4L)),\n            Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-a\", 5L)),\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-b\", 6L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-b\", 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-a\", 9L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-b\", 9L)),\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-c\", 10L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-c\", 10L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-c\", 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-d\", 14L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-d\", 14L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-d\", 14L)),\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-a\", 15L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-b\", 15L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-c\", 15L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-d\", 15L))\n        );\n\n        leftStream.leftJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTest(expectedResult);\n    }\n","date":"2019-05-31 00:46:12","endLine":186,"groupId":"2304","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4b/e14c22a98f64eb31834f5369249a8291ceb938.src","preCode":"    public void testLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-left\");\n\n        final List<List<String>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(\"A-null\"),\n            Collections.singletonList(\"A-a\"),\n            Collections.singletonList(\"B-a\"),\n            Arrays.asList(\"A-b\", \"B-b\"),\n            null,\n            null,\n            Arrays.asList(\"C-a\", \"C-b\"),\n            Arrays.asList(\"A-c\", \"B-c\", \"C-c\"),\n            null,\n            null,\n            null,\n            Arrays.asList(\"A-d\", \"B-d\", \"C-d\"),\n            Arrays.asList(\"D-a\", \"D-b\", \"D-c\", \"D-d\")\n        );\n\n        leftStream.leftJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTest(expectedResult);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2019-05-31 00:46:12","commitOrder":3,"curCode":"    public void testOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-outer\");\n\n        final List<List<KeyValueTimestamp<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-null\", 3L)),\n            Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-a\", 4L)),\n            Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-a\", 5L)),\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-b\", 6L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-b\", 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-a\", 9L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-b\", 9L)),\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-c\", 10L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-c\", 10L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-c\", 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-d\", 14L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-d\", 14L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-d\", 14L)),\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-a\", 15L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-b\", 15L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-c\", 15L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-d\", 15L))\n        );\n\n        leftStream.outerJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTest(expectedResult);\n    }\n","date":"2019-05-31 00:46:12","endLine":271,"groupId":"2304","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4b/e14c22a98f64eb31834f5369249a8291ceb938.src","preCode":"    public void testOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-outer\");\n\n        final List<List<String>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(\"A-null\"),\n            Collections.singletonList(\"A-a\"),\n            Collections.singletonList(\"B-a\"),\n            Arrays.asList(\"A-b\", \"B-b\"),\n            null,\n            null,\n            Arrays.asList(\"C-a\", \"C-b\"),\n            Arrays.asList(\"A-c\", \"B-c\", \"C-c\"),\n            null,\n            null,\n            null,\n            Arrays.asList(\"A-d\", \"B-d\", \"C-d\"),\n            Arrays.asList(\"D-a\", \"D-b\", \"D-c\", \"D-d\")\n        );\n\n        leftStream.outerJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTest(expectedResult);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"}],"commitId":"77e6e8ec054608a30626271b4952b63294a93c3b","commitMessage":"@@@KAFKA-6455: Update integration tests to verify result timestamps (#6751)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2019-05-31 00:46:12","modifiedFileCount":"12","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-11-28 05:32:38","codes":[{"authorDate":"2019-11-28 05:32:38","commitOrder":4,"curCode":"    public void testLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-left\");\n\n        final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-null\", null, 3L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-a\", null, 4L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a\", null, 5L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-b\", null, 6L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-b\", null, 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-a\", null, 9L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-b\", null, 9L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-c\", null, 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-d\", null, 14L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-a\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-b\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-c\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-d\", null, 15L))\n        );\n\n        leftStream.leftJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTestWithDriver(expectedResult);\n    }\n","date":"2019-11-28 05:32:38","endLine":224,"groupId":"5528","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/94fde1cce2b64b5f769692499c8df20775d39b.src","preCode":"    public void testLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-left\");\n\n        final List<List<KeyValueTimestamp<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-null\", 3L)),\n            Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-a\", 4L)),\n            Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-a\", 5L)),\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-b\", 6L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-b\", 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-a\", 9L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-b\", 9L)),\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-c\", 10L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-c\", 10L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-c\", 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-d\", 14L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-d\", 14L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-d\", 14L)),\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-a\", 15L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-b\", 15L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-c\", 15L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-d\", 15L))\n        );\n\n        leftStream.leftJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTest(expectedResult);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2019-11-28 05:32:38","commitOrder":4,"curCode":"    public void testOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-outer\");\n\n        final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-null\", null, 3L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-a\", null, 4L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a\", null, 5L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-b\", null, 6L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-b\", null, 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-a\", null, 9L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-b\", null, 9L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-c\", null, 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-d\", null, 14L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-a\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-b\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-c\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-d\", null, 15L))\n        );\n\n        leftStream.outerJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTestWithDriver(expectedResult);\n    }\n","date":"2019-11-28 05:32:38","endLine":309,"groupId":"5528","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/94fde1cce2b64b5f769692499c8df20775d39b.src","preCode":"    public void testOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-outer\");\n\n        final List<List<KeyValueTimestamp<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-null\", 3L)),\n            Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-a\", 4L)),\n            Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-a\", 5L)),\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-b\", 6L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-b\", 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-a\", 9L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-b\", 9L)),\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-c\", 10L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-c\", 10L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-c\", 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-d\", 14L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-d\", 14L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-d\", 14L)),\n            Arrays.asList(\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-a\", 15L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-b\", 15L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-c\", 15L),\n                new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-d\", 15L))\n        );\n\n        leftStream.outerJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTest(expectedResult);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"}],"commitId":"a50b7c497db5a2ef2326072c95d45b982346fc56","commitMessage":"@@@MINOR: Convert Stream-StreamJoin Integration Test to TTD (#7752)\n\nConvert StreamStreamJoinIntegrationTest to TTD for more stable testing.\n\nReviewers: Matthias J. Sax <mjsax@apache.org>","date":"2019-11-28 05:32:38","modifiedFileCount":"1","status":"M","submitter":"Bill Bejeck"},{"authorTime":"2020-02-05 13:06:39","codes":[{"authorDate":"2020-02-05 13:06:39","commitOrder":5,"curCode":"    public void testLeft() {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-left\");\n\n        final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-null\", null, 3L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-a\", null, 4L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a\", null, 5L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-b\", null, 6L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-b\", null, 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-a\", null, 9L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-b\", null, 9L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-c\", null, 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-d\", null, 14L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-a\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-b\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-c\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-d\", null, 15L))\n        );\n\n        leftStream.leftJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTestWithDriver(expectedResult);\n    }\n","date":"2020-02-05 13:06:39","endLine":225,"groupId":"5528","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/a5fefe56f954e391f690bd22b4e128b6bb9030.src","preCode":"    public void testLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-left\");\n\n        final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-null\", null, 3L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-a\", null, 4L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a\", null, 5L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-b\", null, 6L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-b\", null, 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-a\", null, 9L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-b\", null, 9L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-c\", null, 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-d\", null, 14L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-a\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-b\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-c\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-d\", null, 15L))\n        );\n\n        leftStream.leftJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTestWithDriver(expectedResult);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"},{"authorDate":"2020-02-05 13:06:39","commitOrder":5,"curCode":"    public void testOuter() {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-outer\");\n\n        final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-null\", null, 3L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-a\", null, 4L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a\", null, 5L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-b\", null, 6L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-b\", null, 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-a\", null, 9L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-b\", null, 9L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-c\", null, 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-d\", null, 14L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-a\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-b\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-c\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-d\", null, 15L))\n        );\n\n        leftStream.outerJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTestWithDriver(expectedResult);\n    }\n","date":"2020-02-05 13:06:39","endLine":310,"groupId":"5528","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/a5fefe56f954e391f690bd22b4e128b6bb9030.src","preCode":"    public void testOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-outer\");\n\n        final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-null\", null, 3L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-a\", null, 4L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a\", null, 5L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-b\", null, 6L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-b\", null, 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-a\", null, 9L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-b\", null, 9L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-c\", null, 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-d\", null, 14L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-a\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-b\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-c\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-d\", null, 15L))\n        );\n\n        leftStream.outerJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTestWithDriver(expectedResult);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"}],"commitId":"4090f9a2b0a95e4da127e4786007542276d97520","commitMessage":"@@@KAFKA-9113: Clean up task management and state management (#7997)\n\nThis PR is collaborated by Guozhang Wang and John Roesler. It is a significant tech debt cleanup on task management and state management.  and is broken down by several sub-tasks listed below:\n\nExtract embedded clients (producer and consumer) into RecordCollector from StreamTask.\nguozhangwang#2\nguozhangwang#5\n\nConsolidate the standby updating and active restoring logic into ChangelogReader and extract out of StreamThread.\nguozhangwang#3\nguozhangwang#4\n\nIntroduce Task state life cycle (created.  restoring.  running.  suspended.  closing).  and refactor the task operations based on the current state.\nguozhangwang#6\nguozhangwang#7\n\nConsolidate AssignedTasks into TaskManager and simplify the logic of changelog management and task management (since they are already moved in step 2) and 3)).\nguozhangwang#8\nguozhangwang#9\n\nAlso simplified the StreamThread logic a bit as the embedded clients / changelog restoration logic has been moved into step 1) and 2).\nguozhangwang#10\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-02-05 13:06:39","modifiedFileCount":"76","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2021-04-29 08:57:28","codes":[{"authorDate":"2021-04-29 08:57:28","commitOrder":6,"curCode":"    public void testLeft() {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-left\");\n\n        final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            null,\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-a\", null, 4L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a\", null, 5L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-b\", null, 6L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-b\", null, 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-a\", null, 9L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-b\", null, 9L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-c\", null, 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-d\", null, 14L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-a\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-b\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-c\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-d\", null, 15L))\n        );\n\n        leftStream.leftJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTestWithDriver(expectedResult);\n    }\n","date":"2021-04-29 08:57:28","endLine":187,"groupId":"5528","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c5/a4fef976b5233af66fa2422ee61eeb63fe0752.src","preCode":"    public void testLeft() {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-left\");\n\n        final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-null\", null, 3L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-a\", null, 4L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a\", null, 5L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-b\", null, 6L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-b\", null, 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-a\", null, 9L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-b\", null, 9L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-c\", null, 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-d\", null, 14L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-a\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-b\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-c\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-d\", null, 15L))\n        );\n\n        leftStream.leftJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTestWithDriver(expectedResult);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2021-04-29 08:57:28","commitOrder":6,"curCode":"    public void testOuter() {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-outer\");\n\n        final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            null,\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-a\", null, 4L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a\", null, 5L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-b\", null, 6L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-b\", null, 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-a\", null, 9L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-b\", null, 9L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-c\", null, 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-d\", null, 14L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-a\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-b\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-c\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-d\", null, 15L))\n        );\n\n        leftStream.outerJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTestWithDriver(expectedResult);\n    }\n","date":"2021-04-29 08:57:28","endLine":272,"groupId":"5528","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c5/a4fef976b5233af66fa2422ee61eeb63fe0752.src","preCode":"    public void testOuter() {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-outer\");\n\n        final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-null\", null, 3L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-a\", null, 4L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a\", null, 5L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-b\", null, 6L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-b\", null, 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-a\", null, 9L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-b\", null, 9L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-c\", null, 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-d\", null, 14L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-a\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-b\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-c\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-d\", null, 15L))\n        );\n\n        leftStream.outerJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTestWithDriver(expectedResult);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"}],"commitId":"bf359f8e2924ee03b34a6f7e7eaf80bef55f9d98","commitMessage":"@@@KAFKA-10847: Fix spurious results on left/outer stream-stream joins (#10462)\n\nFixes the issue with https://issues.apache.org/jira/browse/KAFKA-10847.\n\nTo fix the above problem.  the left/outer stream-stream join processor uses a buffer to hold non-joined records for some time until the window closes.  so they are not processed if a join is found during the join window time. If the window of a record closes and a join was not found.  then this should be emitted and processed by the consequent topology processor.\n\nA new time-ordered window store is used to temporary hold records that do not have a join and keep the records keys ordered by time. The KStreamStreamJoin has a reference to this new store . For every non-joined record seen.  the processor writes it to this new state store without processing it. When a joined record is seen.  the processor deletes the joined record from the new state store to prevent further processing.\n\nRecords that were never joined at the end of the window + grace period are emitted to the next topology processor. I use the stream time to check for the expiry time for determinism results . The KStreamStreamJoin checks for expired records and emit them every time a new record is processed in the join processor.\n\nThe new state store is shared with the left and right join nodes. The new store needs to serialize the record keys using a combined key of <joinSide-recordKey>. This key combination helps to delete the records from the other join if a joined record is found. Two new serdes are created for this.  KeyAndJoinSideSerde which serializes a boolean value that specifies the side where the key is found.  and ValueOrOtherValueSerde that serializes either V1 or V2 based on where the key was found.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-04-29 08:57:28","modifiedFileCount":"11","status":"M","submitter":"Sergio Pe?a"},{"authorTime":"2021-06-17 00:25:16","codes":[{"authorDate":"2021-06-17 00:25:16","commitOrder":7,"curCode":"    public void testLeft() {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-left\");\n\n        final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            null,\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-a\", null, 4L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a\", null, 5L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-b\", null, 6L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-b\", null, 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-a\", null, 9L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-b\", null, 9L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-c\", null, 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-d\", null, 14L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-a\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-b\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-c\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-d\", null, 15L))\n        );\n\n        leftStream.leftJoin(\n            rightStream,\n            valueJoiner,\n            JoinWindows.ofTimeDifferenceAndGrace(ofSeconds(10), ofHours(24))\n        ).to(OUTPUT_TOPIC);\n\n        runTestWithDriver(expectedResult);\n    }\n","date":"2021-06-17 00:25:16","endLine":199,"groupId":"102589","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"testLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/2bd1e221c8b7a38077c31913c70daf3c316d6e.src","preCode":"    public void testLeft() {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-left\");\n\n        final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            null,\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-a\", null, 4L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a\", null, 5L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-b\", null, 6L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-b\", null, 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-a\", null, 9L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-b\", null, 9L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-c\", null, 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-d\", null, 14L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-a\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-b\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-c\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-d\", null, 15L))\n        );\n\n        leftStream.leftJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTestWithDriver(expectedResult);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2021-06-17 00:25:16","commitOrder":7,"curCode":"    public void testOuter() {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-outer\");\n\n        final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            null,\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-a\", null, 4L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a\", null, 5L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-b\", null, 6L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-b\", null, 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-a\", null, 9L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-b\", null, 9L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-c\", null, 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-d\", null, 14L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-a\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-b\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-c\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-d\", null, 15L))\n        );\n\n        leftStream.outerJoin(\n            rightStream,\n            valueJoiner,\n            JoinWindows.ofTimeDifferenceAndGrace(ofSeconds(10), ofHours(24))\n        ).to(OUTPUT_TOPIC);\n\n        runTestWithDriver(expectedResult);\n    }\n","date":"2021-06-17 00:25:16","endLine":291,"groupId":"102589","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"testOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/2bd1e221c8b7a38077c31913c70daf3c316d6e.src","preCode":"    public void testOuter() {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-outer\");\n\n        final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n            null,\n            null,\n            null,\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"A-a\", null, 4L)),\n            Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a\", null, 5L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-b\", null, 6L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-b\", null, 6L)),\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-a\", null, 9L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-b\", null, 9L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-c\", null, 10L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-c\", null, 10L)),\n            null,\n            null,\n            null,\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"A-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"B-d\", null, 14L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"C-d\", null, 14L)),\n            Arrays.asList(\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-a\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-b\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-c\", null, 15L),\n                new TestRecord<>(ANY_UNIQUE_KEY, \"D-d\", null, 15L))\n        );\n\n        leftStream.outerJoin(rightStream, valueJoiner, JoinWindows.of(ofSeconds(10))).to(OUTPUT_TOPIC);\n\n        runTestWithDriver(expectedResult);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StreamStreamJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"}],"commitId":"96767a60db4117f257e911871d139572b84be65d","commitMessage":"@@@KAFKA-12909: disable spurious left/outer stream-stream join fix for old JoinWindows API (#10861)\n\nWe changed the behavior of left/outer stream-stream join via KAFKA-10847.\nTo avoid a breaking change during an upgrade.  we need to disable this\nfix by default.\n\nWe only enable the fix if users opt-in expliclity by changing their\ncode. We leverage KIP-633 (KAFKA-8613) that offers a new JoinWindows\nAPI with mandatory grace-period to enable the fix.\n\nReviewers: Sergio Pe?a <sergio@confluent.io>.  Israel Ekpo <israelekpo@gmail.com>.  Guozhang Wang <guozhang@confluent.io>","date":"2021-06-17 00:25:16","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"}]
