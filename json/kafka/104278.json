[{"authorTime":"2018-04-12 01:48:04","codes":[{"authorDate":"2018-04-12 01:48:04","commitOrder":1,"curCode":"    public CreateDelegationTokenResult createDelegationToken(final CreateDelegationTokenOptions options) {\n        final KafkaFutureImpl<DelegationToken> delegationTokenFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        runnable.call(new Call(\"createDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            AbstractRequest.Builder createRequest(int timeoutMs) {\n                return new CreateDelegationTokenRequest.Builder(options.renewers(), options.maxlifeTimeMs());\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                CreateDelegationTokenResponse response = (CreateDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    delegationTokenFuture.completeExceptionally(response.error().exception());\n                } else {\n                    TokenInformation tokenInfo =  new TokenInformation(response.tokenId(), response.owner(),\n                        options.renewers(), response.issueTimestamp(), response.maxTimestamp(), response.expiryTimestamp());\n                    DelegationToken token = new DelegationToken(tokenInfo, response.hmacBytes());\n                    delegationTokenFuture.complete(token);\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                delegationTokenFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new CreateDelegationTokenResult(delegationTokenFuture);\n    }\n","date":"2018-04-12 01:48:04","endLine":2118,"groupId":"6898","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDelegationToken","params":"(finalCreateDelegationTokenOptionsoptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3a/c0e285622d9cf8899d936bbf7561178993b45d.src","preCode":"    public CreateDelegationTokenResult createDelegationToken(final CreateDelegationTokenOptions options) {\n        final KafkaFutureImpl<DelegationToken> delegationTokenFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        runnable.call(new Call(\"createDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            AbstractRequest.Builder createRequest(int timeoutMs) {\n                return new CreateDelegationTokenRequest.Builder(options.renewers(), options.maxlifeTimeMs());\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                CreateDelegationTokenResponse response = (CreateDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    delegationTokenFuture.completeExceptionally(response.error().exception());\n                } else {\n                    TokenInformation tokenInfo =  new TokenInformation(response.tokenId(), response.owner(),\n                        options.renewers(), response.issueTimestamp(), response.maxTimestamp(), response.expiryTimestamp());\n                    DelegationToken token = new DelegationToken(tokenInfo, response.hmacBytes());\n                    delegationTokenFuture.complete(token);\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                delegationTokenFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new CreateDelegationTokenResult(delegationTokenFuture);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2087,"status":"B"},{"authorDate":"2018-04-12 01:48:04","commitOrder":1,"curCode":"    public ExpireDelegationTokenResult expireDelegationToken(final byte[] hmac, final ExpireDelegationTokenOptions options) {\n        final KafkaFutureImpl<Long>  expiryTimeFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        runnable.call(new Call(\"expireDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            AbstractRequest.Builder createRequest(int timeoutMs) {\n                return new ExpireDelegationTokenRequest.Builder(hmac, options.expiryTimePeriodMs());\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                ExpireDelegationTokenResponse response = (ExpireDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    expiryTimeFuture.completeExceptionally(response.error().exception());\n                } else {\n                    expiryTimeFuture.complete(response.expiryTimestamp());\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                expiryTimeFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new ExpireDelegationTokenResult(expiryTimeFuture);\n    }\n","date":"2018-04-12 01:48:04","endLine":2180,"groupId":"6898","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"expireDelegationToken","params":"(finalbyte[]hmac@finalExpireDelegationTokenOptionsoptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3a/c0e285622d9cf8899d936bbf7561178993b45d.src","preCode":"    public ExpireDelegationTokenResult expireDelegationToken(final byte[] hmac, final ExpireDelegationTokenOptions options) {\n        final KafkaFutureImpl<Long>  expiryTimeFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        runnable.call(new Call(\"expireDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            AbstractRequest.Builder createRequest(int timeoutMs) {\n                return new ExpireDelegationTokenRequest.Builder(hmac, options.expiryTimePeriodMs());\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                ExpireDelegationTokenResponse response = (ExpireDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    expiryTimeFuture.completeExceptionally(response.error().exception());\n                } else {\n                    expiryTimeFuture.complete(response.expiryTimestamp());\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                expiryTimeFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new ExpireDelegationTokenResult(expiryTimeFuture);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2152,"status":"B"}],"commitId":"47918f2d79e907f6a6da599ab82a97c169722229","commitMessage":"@@@KAFKA-6447: Add Delegation Token Operations to KafkaAdminClient (KIP-249) (#4427)\n\nReviewers: Jun Rao <junrao@gmail.com>\n","date":"2018-04-12 01:48:04","modifiedFileCount":"17","status":"B","submitter":"Manikumar Reddy O"},{"authorTime":"2018-04-12 01:48:04","codes":[{"authorDate":"2019-06-25 21:01:11","commitOrder":2,"curCode":"    public CreateDelegationTokenResult createDelegationToken(final CreateDelegationTokenOptions options) {\n        final KafkaFutureImpl<DelegationToken> delegationTokenFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        List<CreatableRenewers> renewers = new ArrayList<>();\n        for (KafkaPrincipal principal : options.renewers()) {\n            renewers.add(new CreatableRenewers()\n                    .setPrincipalName(principal.getName())\n                    .setPrincipalType(principal.getPrincipalType()));\n        }\n        runnable.call(new Call(\"createDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            AbstractRequest.Builder<CreateDelegationTokenRequest> createRequest(int timeoutMs) {\n                return new CreateDelegationTokenRequest.Builder(\n                        new CreateDelegationTokenRequestData()\n                            .setRenewers(renewers)\n                            .setMaxLifetimeMs(options.maxlifeTimeMs()));\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                CreateDelegationTokenResponse response = (CreateDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    delegationTokenFuture.completeExceptionally(response.error().exception());\n                } else {\n                    CreateDelegationTokenResponseData data = response.data();\n                    TokenInformation tokenInfo =  new TokenInformation(data.tokenId(), new KafkaPrincipal(data.principalType(), data.principalName()),\n                        options.renewers(), data.issueTimestampMs(), data.maxTimestampMs(), data.expiryTimestampMs());\n                    DelegationToken token = new DelegationToken(tokenInfo, data.hmac());\n                    delegationTokenFuture.complete(token);\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                delegationTokenFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new CreateDelegationTokenResult(delegationTokenFuture);\n    }\n","date":"2019-06-25 21:01:11","endLine":2434,"groupId":"549","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDelegationToken","params":"(finalCreateDelegationTokenOptionsoptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3f/de51dea1daf37ea42e1e483114c957e580cb20.src","preCode":"    public CreateDelegationTokenResult createDelegationToken(final CreateDelegationTokenOptions options) {\n        final KafkaFutureImpl<DelegationToken> delegationTokenFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        runnable.call(new Call(\"createDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            AbstractRequest.Builder createRequest(int timeoutMs) {\n                return new CreateDelegationTokenRequest.Builder(options.renewers(), options.maxlifeTimeMs());\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                CreateDelegationTokenResponse response = (CreateDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    delegationTokenFuture.completeExceptionally(response.error().exception());\n                } else {\n                    TokenInformation tokenInfo =  new TokenInformation(response.tokenId(), response.owner(),\n                        options.renewers(), response.issueTimestamp(), response.maxTimestamp(), response.expiryTimestamp());\n                    DelegationToken token = new DelegationToken(tokenInfo, response.hmacBytes());\n                    delegationTokenFuture.complete(token);\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                delegationTokenFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new CreateDelegationTokenResult(delegationTokenFuture);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2393,"status":"M"},{"authorDate":"2018-04-12 01:48:04","commitOrder":2,"curCode":"    public ExpireDelegationTokenResult expireDelegationToken(final byte[] hmac, final ExpireDelegationTokenOptions options) {\n        final KafkaFutureImpl<Long>  expiryTimeFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        runnable.call(new Call(\"expireDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            AbstractRequest.Builder createRequest(int timeoutMs) {\n                return new ExpireDelegationTokenRequest.Builder(hmac, options.expiryTimePeriodMs());\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                ExpireDelegationTokenResponse response = (ExpireDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    expiryTimeFuture.completeExceptionally(response.error().exception());\n                } else {\n                    expiryTimeFuture.complete(response.expiryTimestamp());\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                expiryTimeFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new ExpireDelegationTokenResult(expiryTimeFuture);\n    }\n","date":"2018-04-12 01:48:04","endLine":2180,"groupId":"6898","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"expireDelegationToken","params":"(finalbyte[]hmac@finalExpireDelegationTokenOptionsoptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3a/c0e285622d9cf8899d936bbf7561178993b45d.src","preCode":"    public ExpireDelegationTokenResult expireDelegationToken(final byte[] hmac, final ExpireDelegationTokenOptions options) {\n        final KafkaFutureImpl<Long>  expiryTimeFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        runnable.call(new Call(\"expireDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            AbstractRequest.Builder createRequest(int timeoutMs) {\n                return new ExpireDelegationTokenRequest.Builder(hmac, options.expiryTimePeriodMs());\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                ExpireDelegationTokenResponse response = (ExpireDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    expiryTimeFuture.completeExceptionally(response.error().exception());\n                } else {\n                    expiryTimeFuture.complete(response.expiryTimestamp());\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                expiryTimeFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new ExpireDelegationTokenResult(expiryTimeFuture);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2152,"status":"N"}],"commitId":"14d854936e1d2fed2e69a7c6367becf360f88833","commitMessage":"@@@KAFKA-8390: Use automatic RPC generation in CreateDelegationToken (#6828)\n\nReviewers: Manikumar Reddy <manikumar.reddy@gmail.com>","date":"2019-06-25 21:01:11","modifiedFileCount":"6","status":"M","submitter":"Mickael Maison"},{"authorTime":"2019-08-07 16:02:26","codes":[{"authorDate":"2019-06-25 21:01:11","commitOrder":3,"curCode":"    public CreateDelegationTokenResult createDelegationToken(final CreateDelegationTokenOptions options) {\n        final KafkaFutureImpl<DelegationToken> delegationTokenFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        List<CreatableRenewers> renewers = new ArrayList<>();\n        for (KafkaPrincipal principal : options.renewers()) {\n            renewers.add(new CreatableRenewers()\n                    .setPrincipalName(principal.getName())\n                    .setPrincipalType(principal.getPrincipalType()));\n        }\n        runnable.call(new Call(\"createDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            AbstractRequest.Builder<CreateDelegationTokenRequest> createRequest(int timeoutMs) {\n                return new CreateDelegationTokenRequest.Builder(\n                        new CreateDelegationTokenRequestData()\n                            .setRenewers(renewers)\n                            .setMaxLifetimeMs(options.maxlifeTimeMs()));\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                CreateDelegationTokenResponse response = (CreateDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    delegationTokenFuture.completeExceptionally(response.error().exception());\n                } else {\n                    CreateDelegationTokenResponseData data = response.data();\n                    TokenInformation tokenInfo =  new TokenInformation(data.tokenId(), new KafkaPrincipal(data.principalType(), data.principalName()),\n                        options.renewers(), data.issueTimestampMs(), data.maxTimestampMs(), data.expiryTimestampMs());\n                    DelegationToken token = new DelegationToken(tokenInfo, data.hmac());\n                    delegationTokenFuture.complete(token);\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                delegationTokenFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new CreateDelegationTokenResult(delegationTokenFuture);\n    }\n","date":"2019-06-25 21:01:11","endLine":2434,"groupId":"549","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createDelegationToken","params":"(finalCreateDelegationTokenOptionsoptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3f/de51dea1daf37ea42e1e483114c957e580cb20.src","preCode":"    public CreateDelegationTokenResult createDelegationToken(final CreateDelegationTokenOptions options) {\n        final KafkaFutureImpl<DelegationToken> delegationTokenFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        List<CreatableRenewers> renewers = new ArrayList<>();\n        for (KafkaPrincipal principal : options.renewers()) {\n            renewers.add(new CreatableRenewers()\n                    .setPrincipalName(principal.getName())\n                    .setPrincipalType(principal.getPrincipalType()));\n        }\n        runnable.call(new Call(\"createDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            AbstractRequest.Builder<CreateDelegationTokenRequest> createRequest(int timeoutMs) {\n                return new CreateDelegationTokenRequest.Builder(\n                        new CreateDelegationTokenRequestData()\n                            .setRenewers(renewers)\n                            .setMaxLifetimeMs(options.maxlifeTimeMs()));\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                CreateDelegationTokenResponse response = (CreateDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    delegationTokenFuture.completeExceptionally(response.error().exception());\n                } else {\n                    CreateDelegationTokenResponseData data = response.data();\n                    TokenInformation tokenInfo =  new TokenInformation(data.tokenId(), new KafkaPrincipal(data.principalType(), data.principalName()),\n                        options.renewers(), data.issueTimestampMs(), data.maxTimestampMs(), data.expiryTimestampMs());\n                    DelegationToken token = new DelegationToken(tokenInfo, data.hmac());\n                    delegationTokenFuture.complete(token);\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                delegationTokenFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new CreateDelegationTokenResult(delegationTokenFuture);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2393,"status":"N"},{"authorDate":"2019-08-07 16:02:26","commitOrder":3,"curCode":"    public ExpireDelegationTokenResult expireDelegationToken(final byte[] hmac, final ExpireDelegationTokenOptions options) {\n        final KafkaFutureImpl<Long>  expiryTimeFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        runnable.call(new Call(\"expireDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            AbstractRequest.Builder<ExpireDelegationTokenRequest> createRequest(int timeoutMs) {\n                return new ExpireDelegationTokenRequest.Builder(\n                        new ExpireDelegationTokenRequestData()\n                            .setHmac(hmac)\n                            .setExpiryTimePeriodMs(options.expiryTimePeriodMs()));\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                ExpireDelegationTokenResponse response = (ExpireDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    expiryTimeFuture.completeExceptionally(response.error().exception());\n                } else {\n                    expiryTimeFuture.complete(response.expiryTimestamp());\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                expiryTimeFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new ExpireDelegationTokenResult(expiryTimeFuture);\n    }\n","date":"2019-08-07 16:02:26","endLine":2501,"groupId":"6897","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"expireDelegationToken","params":"(finalbyte[]hmac@finalExpireDelegationTokenOptionsoptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/56e368891caa65c6e915c63231fda7cd15b0bc.src","preCode":"    public ExpireDelegationTokenResult expireDelegationToken(final byte[] hmac, final ExpireDelegationTokenOptions options) {\n        final KafkaFutureImpl<Long>  expiryTimeFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        runnable.call(new Call(\"expireDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            AbstractRequest.Builder createRequest(int timeoutMs) {\n                return new ExpireDelegationTokenRequest.Builder(hmac, options.expiryTimePeriodMs());\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                ExpireDelegationTokenResponse response = (ExpireDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    expiryTimeFuture.completeExceptionally(response.error().exception());\n                } else {\n                    expiryTimeFuture.complete(response.expiryTimestamp());\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                expiryTimeFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new ExpireDelegationTokenResult(expiryTimeFuture);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2470,"status":"M"}],"commitId":"926fb35d9dcefd45c1e1d276ee7252b15875f23e","commitMessage":"@@@KAFKA-8599: Use automatic RPC generation in ExpireDelegationToken\n\nAuthor: Mickael Maison <mickael.maison@gmail.com>\n\nReviewers: Manikumar Reddy <manikumar.reddy@gmail.com>.  Viktor Somogyi <viktorsomogyi@gmail.com>\n\nCloses #7098 from mimaison/KAFKA-8599\n","date":"2019-08-07 16:02:26","modifiedFileCount":"7","status":"M","submitter":"Mickael Maison"},{"authorTime":"2019-10-20 12:30:50","codes":[{"authorDate":"2019-10-20 12:30:50","commitOrder":4,"curCode":"    public CreateDelegationTokenResult createDelegationToken(final CreateDelegationTokenOptions options) {\n        final KafkaFutureImpl<DelegationToken> delegationTokenFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        List<CreatableRenewers> renewers = new ArrayList<>();\n        for (KafkaPrincipal principal : options.renewers()) {\n            renewers.add(new CreatableRenewers()\n                    .setPrincipalName(principal.getName())\n                    .setPrincipalType(principal.getPrincipalType()));\n        }\n        runnable.call(new Call(\"createDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            CreateDelegationTokenRequest.Builder createRequest(int timeoutMs) {\n                return new CreateDelegationTokenRequest.Builder(\n                        new CreateDelegationTokenRequestData()\n                            .setRenewers(renewers)\n                            .setMaxLifetimeMs(options.maxlifeTimeMs()));\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                CreateDelegationTokenResponse response = (CreateDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    delegationTokenFuture.completeExceptionally(response.error().exception());\n                } else {\n                    CreateDelegationTokenResponseData data = response.data();\n                    TokenInformation tokenInfo =  new TokenInformation(data.tokenId(), new KafkaPrincipal(data.principalType(), data.principalName()),\n                        options.renewers(), data.issueTimestampMs(), data.maxTimestampMs(), data.expiryTimestampMs());\n                    DelegationToken token = new DelegationToken(tokenInfo, data.hmac());\n                    delegationTokenFuture.complete(token);\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                delegationTokenFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new CreateDelegationTokenResult(delegationTokenFuture);\n    }\n","date":"2019-10-20 12:30:50","endLine":2502,"groupId":"104278","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createDelegationToken","params":"(finalCreateDelegationTokenOptionsoptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/98/4e863f723e7cdb78922cc343e968f0bb13c175.src","preCode":"    public CreateDelegationTokenResult createDelegationToken(final CreateDelegationTokenOptions options) {\n        final KafkaFutureImpl<DelegationToken> delegationTokenFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        List<CreatableRenewers> renewers = new ArrayList<>();\n        for (KafkaPrincipal principal : options.renewers()) {\n            renewers.add(new CreatableRenewers()\n                    .setPrincipalName(principal.getName())\n                    .setPrincipalType(principal.getPrincipalType()));\n        }\n        runnable.call(new Call(\"createDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            AbstractRequest.Builder<CreateDelegationTokenRequest> createRequest(int timeoutMs) {\n                return new CreateDelegationTokenRequest.Builder(\n                        new CreateDelegationTokenRequestData()\n                            .setRenewers(renewers)\n                            .setMaxLifetimeMs(options.maxlifeTimeMs()));\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                CreateDelegationTokenResponse response = (CreateDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    delegationTokenFuture.completeExceptionally(response.error().exception());\n                } else {\n                    CreateDelegationTokenResponseData data = response.data();\n                    TokenInformation tokenInfo =  new TokenInformation(data.tokenId(), new KafkaPrincipal(data.principalType(), data.principalName()),\n                        options.renewers(), data.issueTimestampMs(), data.maxTimestampMs(), data.expiryTimestampMs());\n                    DelegationToken token = new DelegationToken(tokenInfo, data.hmac());\n                    delegationTokenFuture.complete(token);\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                delegationTokenFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new CreateDelegationTokenResult(delegationTokenFuture);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2461,"status":"M"},{"authorDate":"2019-10-20 12:30:50","commitOrder":4,"curCode":"    public ExpireDelegationTokenResult expireDelegationToken(final byte[] hmac, final ExpireDelegationTokenOptions options) {\n        final KafkaFutureImpl<Long>  expiryTimeFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        runnable.call(new Call(\"expireDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            ExpireDelegationTokenRequest.Builder createRequest(int timeoutMs) {\n                return new ExpireDelegationTokenRequest.Builder(\n                        new ExpireDelegationTokenRequestData()\n                            .setHmac(hmac)\n                            .setExpiryTimePeriodMs(options.expiryTimePeriodMs()));\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                ExpireDelegationTokenResponse response = (ExpireDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    expiryTimeFuture.completeExceptionally(response.error().exception());\n                } else {\n                    expiryTimeFuture.complete(response.expiryTimestamp());\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                expiryTimeFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new ExpireDelegationTokenResult(expiryTimeFuture);\n    }\n","date":"2019-10-20 12:30:50","endLine":2570,"groupId":"104278","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"expireDelegationToken","params":"(finalbyte[]hmac@finalExpireDelegationTokenOptionsoptions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/98/4e863f723e7cdb78922cc343e968f0bb13c175.src","preCode":"    public ExpireDelegationTokenResult expireDelegationToken(final byte[] hmac, final ExpireDelegationTokenOptions options) {\n        final KafkaFutureImpl<Long>  expiryTimeFuture = new KafkaFutureImpl<>();\n        final long now = time.milliseconds();\n        runnable.call(new Call(\"expireDelegationToken\", calcDeadlineMs(now, options.timeoutMs()),\n            new LeastLoadedNodeProvider()) {\n\n            @Override\n            AbstractRequest.Builder<ExpireDelegationTokenRequest> createRequest(int timeoutMs) {\n                return new ExpireDelegationTokenRequest.Builder(\n                        new ExpireDelegationTokenRequestData()\n                            .setHmac(hmac)\n                            .setExpiryTimePeriodMs(options.expiryTimePeriodMs()));\n            }\n\n            @Override\n            void handleResponse(AbstractResponse abstractResponse) {\n                ExpireDelegationTokenResponse response = (ExpireDelegationTokenResponse) abstractResponse;\n                if (response.hasError()) {\n                    expiryTimeFuture.completeExceptionally(response.error().exception());\n                } else {\n                    expiryTimeFuture.complete(response.expiryTimestamp());\n                }\n            }\n\n            @Override\n            void handleFailure(Throwable throwable) {\n                expiryTimeFuture.completeExceptionally(throwable);\n            }\n        }, now);\n\n        return new ExpireDelegationTokenResult(expiryTimeFuture);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2539,"status":"M"}],"commitId":"99a4068c5ca61951d70b9e647ead3b08a2af4309","commitMessage":"@@@KAFKA-7689; Add AlterConsumerGroup/List Offsets to AdminClient [KIP-396] (#7296)\n\nThis patch implements new AdminClient APIs to list offsets and alter consumer group offsets as documented in KIP-396: https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=97551484.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2019-10-20 12:30:50","modifiedFileCount":"20","status":"M","submitter":"Mickael Maison"}]
