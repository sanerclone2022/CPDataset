[{"authorTime":"2018-05-19 01:39:34","codes":[{"authorDate":"2018-05-19 01:39:34","commitOrder":1,"curCode":"    protected void close() {\n        \r\n        \r\n        try {\n            task.stop();\n        } catch (Throwable t) {\n            log.warn(\"Could not stop task\", t);\n        }\n        if (consumer != null) {\n            try {\n                consumer.close();\n            } catch (Throwable t) {\n                log.warn(\"Could not close consumer\", t);\n            }\n        }\n        try {\n            transformationChain.close();\n        } catch (Throwable t) {\n            log.warn(\"Could not close transformation chain\", t);\n        }\n    }\n","date":"2018-05-19 01:39:34","endLine":168,"groupId":"4681","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6e/dcfd418864389ae7b992128766afa1797356f2.src","preCode":"    protected void close() {\n        \r\n        \r\n        try {\n            task.stop();\n        } catch (Throwable t) {\n            log.warn(\"Could not stop task\", t);\n        }\n        if (consumer != null) {\n            try {\n                consumer.close();\n            } catch (Throwable t) {\n                log.warn(\"Could not close consumer\", t);\n            }\n        }\n        try {\n            transformationChain.close();\n        } catch (Throwable t) {\n            log.warn(\"Could not close transformation chain\", t);\n        }\n    }\n","realPath":"connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"B"},{"authorDate":"2018-05-19 01:39:34","commitOrder":1,"curCode":"    protected void close() {\n        if (!shouldPause()) {\n            tryStop();\n        }\n        if (producer != null) {\n            try {\n                producer.close(30, TimeUnit.SECONDS);\n            } catch (Throwable t) {\n                log.warn(\"Could not close producer\", t);\n            }\n        }\n        try {\n            transformationChain.close();\n        } catch (Throwable t) {\n            log.warn(\"Could not close transformation chain\", t);\n        }\n    }\n","date":"2018-05-19 01:39:34","endLine":156,"groupId":"9009","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f1/7475dacfc9388ec65783b160aef86bdffaf771.src","preCode":"    protected void close() {\n        if (!shouldPause()) {\n            tryStop();\n        }\n        if (producer != null) {\n            try {\n                producer.close(30, TimeUnit.SECONDS);\n            } catch (Throwable t) {\n                log.warn(\"Could not close producer\", t);\n            }\n        }\n        try {\n            transformationChain.close();\n        } catch (Throwable t) {\n            log.warn(\"Could not close transformation chain\", t);\n        }\n    }\n","realPath":"connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"B"}],"commitId":"ee8abb2f7053575bd2abec8152907e0642b1d713","commitMessage":"@@@KAFKA-6566: Improve Connect Resource Cleanup\n\nThis is a change to improve resource cleanup for sink tasks and source tasks.  Now `Task.stop()` is called from both `WorkerSinkTask.close()` and `WorkerSourceTask.close()`.\n\nIt is called from `WorkerXXXTask.close()` since this method is called in the `finally` block of `WorkerTask.run()`.  and Connect developers use `stop()` to clean up resources.\n\nAuthor: Robert Yokota <rayokota@gmail.com>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #5020 from rayokota/K6566-improve-connect-resource-cleanup\n","date":"2018-05-19 01:39:34","modifiedFileCount":"2","status":"B","submitter":"Robert Yokota"},{"authorTime":"2019-01-16 00:48:32","codes":[{"authorDate":"2018-05-19 01:39:34","commitOrder":2,"curCode":"    protected void close() {\n        \r\n        \r\n        try {\n            task.stop();\n        } catch (Throwable t) {\n            log.warn(\"Could not stop task\", t);\n        }\n        if (consumer != null) {\n            try {\n                consumer.close();\n            } catch (Throwable t) {\n                log.warn(\"Could not close consumer\", t);\n            }\n        }\n        try {\n            transformationChain.close();\n        } catch (Throwable t) {\n            log.warn(\"Could not close transformation chain\", t);\n        }\n    }\n","date":"2018-05-19 01:39:34","endLine":168,"groupId":"4681","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6e/dcfd418864389ae7b992128766afa1797356f2.src","preCode":"    protected void close() {\n        \r\n        \r\n        try {\n            task.stop();\n        } catch (Throwable t) {\n            log.warn(\"Could not stop task\", t);\n        }\n        if (consumer != null) {\n            try {\n                consumer.close();\n            } catch (Throwable t) {\n                log.warn(\"Could not close consumer\", t);\n            }\n        }\n        try {\n            transformationChain.close();\n        } catch (Throwable t) {\n            log.warn(\"Could not close transformation chain\", t);\n        }\n    }\n","realPath":"connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"N"},{"authorDate":"2019-01-16 00:48:32","commitOrder":2,"curCode":"    protected void close() {\n        if (!shouldPause()) {\n            tryStop();\n        }\n        if (producer != null) {\n            try {\n                producer.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Could not close producer\", t);\n            }\n        }\n        try {\n            transformationChain.close();\n        } catch (Throwable t) {\n            log.warn(\"Could not close transformation chain\", t);\n        }\n    }\n","date":"2019-01-16 00:48:32","endLine":165,"groupId":"17644","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/e026c7176868aefe0bd249a70f21df2511e7a8.src","preCode":"    protected void close() {\n        if (!shouldPause()) {\n            tryStop();\n        }\n        if (producer != null) {\n            try {\n                producer.close(30, TimeUnit.SECONDS);\n            } catch (Throwable t) {\n                log.warn(\"Could not close producer\", t);\n            }\n        }\n        try {\n            transformationChain.close();\n        } catch (Throwable t) {\n            log.warn(\"Could not close transformation chain\", t);\n        }\n    }\n","realPath":"connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"af634a4a98eaa2457752e3f2841720020e0e9ad0","commitMessage":"@@@KAFKA-7391; Introduce close(Duration) to Producer and AdminClient instead of close(long.  TimeUnit) (#5667)\n\nSee KIP-367: https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=89070496.\n\nReviewers: Viktor Somogyi <viktorsomogyi@gmail.com>.  Manikumar Reddy <manikumar.reddy@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2019-01-16 00:48:32","modifiedFileCount":"11","status":"M","submitter":"Chia-Ping Tsai"},{"authorTime":"2020-04-30 08:07:01","codes":[{"authorDate":"2020-04-30 08:07:01","commitOrder":3,"curCode":"    protected void close() {\n        \r\n        \r\n        try {\n            task.stop();\n        } catch (Throwable t) {\n            log.warn(\"Could not stop task\", t);\n        }\n        if (consumer != null) {\n            try {\n                consumer.close();\n            } catch (Throwable t) {\n                log.warn(\"Could not close consumer\", t);\n            }\n        }\n        try {\n            transformationChain.close();\n        } catch (Throwable t) {\n            log.warn(\"Could not close transformation chain\", t);\n        }\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","date":"2020-04-30 08:07:01","endLine":180,"groupId":"4681","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/65/9dadfd87348392418098aabf4d62c4c684ddd2.src","preCode":"    protected void close() {\n        \r\n        \r\n        try {\n            task.stop();\n        } catch (Throwable t) {\n            log.warn(\"Could not stop task\", t);\n        }\n        if (consumer != null) {\n            try {\n                consumer.close();\n            } catch (Throwable t) {\n                log.warn(\"Could not close consumer\", t);\n            }\n        }\n        try {\n            transformationChain.close();\n        } catch (Throwable t) {\n            log.warn(\"Could not close transformation chain\", t);\n        }\n    }\n","realPath":"connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2020-04-30 08:07:01","commitOrder":3,"curCode":"    protected void close() {\n        if (!shouldPause()) {\n            tryStop();\n        }\n        if (producer != null) {\n            try {\n                producer.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Could not close producer\", t);\n            }\n        }\n        try {\n            transformationChain.close();\n        } catch (Throwable t) {\n            log.warn(\"Could not close transformation chain\", t);\n        }\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","date":"2020-04-30 08:07:01","endLine":175,"groupId":"17644","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dc/7474766a03463d7d1fcf3fe6b8029b5e3c697d.src","preCode":"    protected void close() {\n        if (!shouldPause()) {\n            tryStop();\n        }\n        if (producer != null) {\n            try {\n                producer.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Could not close producer\", t);\n            }\n        }\n        try {\n            transformationChain.close();\n        } catch (Throwable t) {\n            log.warn(\"Could not close transformation chain\", t);\n        }\n    }\n","realPath":"connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"0ee19e87d2b1e5e94323ca8bcac5089bf4b3f1af","commitMessage":"@@@KAFKA-9830: Implement AutoCloseable in ErrorReporter and subclasses (#8442)\n\n* The DeadLetterQueueReporter has a KafkaProducer that it must close to clean up resources\n* Currently.  the producer and its threads are leaked every time a task is stopped\n* Responsibility for cleaning up ErrorReporters is transitively assigned to the\n    ProcessingContext.  RetryWithToleranceOperator.  and WorkerSinkTask/WorkerSinkTask classes\n* One new unit test in ErrorReporterTest asserts that the producer is closed by the dlq reporter\n\nReviewers: Arjun Satish <arjun@confluent.io>.  Chris Egerton <chrise@confluent.io>.  Chia-Ping Tsai <chia7712@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>","date":"2020-04-30 08:07:01","modifiedFileCount":"8","status":"M","submitter":"Greg Harris"},{"authorTime":"2020-05-27 13:07:34","codes":[{"authorDate":"2020-05-27 13:07:34","commitOrder":4,"curCode":"    protected void close() {\n        \r\n        \r\n        try {\n            task.stop();\n        } catch (Throwable t) {\n            log.warn(\"Could not stop task\", t);\n        }\n        Utils.closeQuietly(consumer, \"consumer\");\n        Utils.closeQuietly(transformationChain, \"transformation chain\");\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","date":"2020-05-27 13:07:34","endLine":171,"groupId":"8934","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3d/f94511d9c70d8deadcf98538fd44a4a5412d86.src","preCode":"    protected void close() {\n        \r\n        \r\n        try {\n            task.stop();\n        } catch (Throwable t) {\n            log.warn(\"Could not stop task\", t);\n        }\n        if (consumer != null) {\n            try {\n                consumer.close();\n            } catch (Throwable t) {\n                log.warn(\"Could not close consumer\", t);\n            }\n        }\n        try {\n            transformationChain.close();\n        } catch (Throwable t) {\n            log.warn(\"Could not close transformation chain\", t);\n        }\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","realPath":"connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2020-05-27 13:07:34","commitOrder":4,"curCode":"    protected void close() {\n        if (!shouldPause()) {\n            tryStop();\n        }\n        if (producer != null) {\n            try {\n                producer.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Could not close producer\", t);\n            }\n        }\n        if (admin != null) {\n            try {\n                admin.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Failed to close admin client on time\", t);\n            }\n        }\n        Utils.closeQuietly(transformationChain, \"transformation chain\");\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","date":"2020-05-27 13:07:34","endLine":188,"groupId":"8859","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e4/4d93a718bf04f9374a3c587e9ba9c10fa0162f.src","preCode":"    protected void close() {\n        if (!shouldPause()) {\n            tryStop();\n        }\n        if (producer != null) {\n            try {\n                producer.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Could not close producer\", t);\n            }\n        }\n        try {\n            transformationChain.close();\n        } catch (Throwable t) {\n            log.warn(\"Could not close transformation chain\", t);\n        }\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","realPath":"connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"371f14c3c12d2e341ac96bd52393b43a10acfa84","commitMessage":"@@@KAFKA-5295: Allow source connectors to specify topic-specific settings for new topics (KIP-158) (#8722)\n\nKafka Connect workers have been able to create Connect's internal topics using the new admin client for some time now (see KAFKA-4667 for details). However.  tasks of source connectors are still relying upon the broker to auto-create topics with default config settings if they don't exist.  or expect these topics to exist before the connector is deployed.  if their configuration needs to be specialized. \n\nWith the implementation of KIP-158 here.  if `topic.creation.enable=true`.  Kafka Connect will supply the source tasks of connectors that are configured to create topics with an admin client that will allow them to create new topics on-the-fly before writing the first source records to a new topic. Additionally.  each source connector has the opportunity to customize the topic-specific settings of these new topics by defining groups of topic configurations. \n\nThis feature is tested here via unit tests (old tests that have been adjusted and new ones) as well as integration tests.\n\nReviewers: Randall Hauch <rhauch@gmail.com>","date":"2020-05-27 13:07:34","modifiedFileCount":"23","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2020-05-27 13:07:34","codes":[{"authorDate":"2020-10-07 02:18:54","commitOrder":5,"curCode":"    protected void close() {\n        \r\n        \r\n        try {\n            task.stop();\n        } catch (Throwable t) {\n            log.warn(\"Could not stop task\", t);\n        }\n        taskStopped = true;\n        Utils.closeQuietly(consumer, \"consumer\");\n        Utils.closeQuietly(transformationChain, \"transformation chain\");\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","date":"2020-10-07 02:18:54","endLine":177,"groupId":"20151","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/b2cd939c00b0759a826c51ce6a0b9d845b2e15.src","preCode":"    protected void close() {\n        \r\n        \r\n        try {\n            task.stop();\n        } catch (Throwable t) {\n            log.warn(\"Could not stop task\", t);\n        }\n        Utils.closeQuietly(consumer, \"consumer\");\n        Utils.closeQuietly(transformationChain, \"transformation chain\");\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","realPath":"connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2020-05-27 13:07:34","commitOrder":5,"curCode":"    protected void close() {\n        if (!shouldPause()) {\n            tryStop();\n        }\n        if (producer != null) {\n            try {\n                producer.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Could not close producer\", t);\n            }\n        }\n        if (admin != null) {\n            try {\n                admin.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Failed to close admin client on time\", t);\n            }\n        }\n        Utils.closeQuietly(transformationChain, \"transformation chain\");\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","date":"2020-05-27 13:07:34","endLine":188,"groupId":"8859","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e4/4d93a718bf04f9374a3c587e9ba9c10fa0162f.src","preCode":"    protected void close() {\n        if (!shouldPause()) {\n            tryStop();\n        }\n        if (producer != null) {\n            try {\n                producer.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Could not close producer\", t);\n            }\n        }\n        if (admin != null) {\n            try {\n                admin.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Failed to close admin client on time\", t);\n            }\n        }\n        Utils.closeQuietly(transformationChain, \"transformation chain\");\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","realPath":"connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"N"}],"commitId":"4c6b96296db0d5fea2e7cf85ac14c9cc783b8d54","commitMessage":"@@@KAFKA-10188: Prevent SinkTask::preCommit from being called after SinkTask::stop (#8910)\n\n","date":"2020-10-07 02:18:54","modifiedFileCount":"2","status":"M","submitter":"Chris Egerton"},{"authorTime":"2020-12-05 01:48:23","codes":[{"authorDate":"2020-10-07 02:18:54","commitOrder":6,"curCode":"    protected void close() {\n        \r\n        \r\n        try {\n            task.stop();\n        } catch (Throwable t) {\n            log.warn(\"Could not stop task\", t);\n        }\n        taskStopped = true;\n        Utils.closeQuietly(consumer, \"consumer\");\n        Utils.closeQuietly(transformationChain, \"transformation chain\");\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","date":"2020-10-07 02:18:54","endLine":177,"groupId":"20151","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/b2cd939c00b0759a826c51ce6a0b9d845b2e15.src","preCode":"    protected void close() {\n        \r\n        \r\n        try {\n            task.stop();\n        } catch (Throwable t) {\n            log.warn(\"Could not stop task\", t);\n        }\n        taskStopped = true;\n        Utils.closeQuietly(consumer, \"consumer\");\n        Utils.closeQuietly(transformationChain, \"transformation chain\");\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","realPath":"connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"N"},{"authorDate":"2020-12-05 01:48:23","commitOrder":6,"curCode":"    protected void close() {\n        if (started) {\n            try {\n                task.stop();\n            } catch (Throwable t) {\n                log.warn(\"Could not stop task\", t);\n            }\n        }\n        if (producer != null) {\n            try {\n                producer.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Could not close producer\", t);\n            }\n        }\n        if (admin != null) {\n            try {\n                admin.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Failed to close admin client on time\", t);\n            }\n        }\n        Utils.closeQuietly(transformationChain, \"transformation chain\");\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","date":"2020-12-05 01:48:23","endLine":190,"groupId":"8859","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bc/7df97476b302f6dec24dc590bf3ce3a84f94b5.src","preCode":"    protected void close() {\n        if (!shouldPause()) {\n            tryStop();\n        }\n        if (producer != null) {\n            try {\n                producer.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Could not close producer\", t);\n            }\n        }\n        if (admin != null) {\n            try {\n                admin.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Failed to close admin client on time\", t);\n            }\n        }\n        Utils.closeQuietly(transformationChain, \"transformation chain\");\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","realPath":"connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"4f2f08eb006cdf3dc848b34b4b17cf27a023e9da","commitMessage":"@@@KAFKA-10792: Prevent source task shutdown from blocking herder thread (#9669)\n\nChanges the `WorkerSourceTask` class to only call `SourceTask::stop` from the task thread when the task is actually stopped (via `Source:task::close` just before `WorkerTask::run` completes).  and only if an attempt has been made to start the task (which will not be the case if it was created in the paused state and then shut down before being started). This prevents `SourceTask::stop` from being indirectly invoked on the herder's thread.  which can have adverse effects if the task is unable to shut down promptly.\n\nUnit tests are tweaked where necessary to account for this new logic.  which covers some edge cases mentioned in PR #5020 that were unaddressed up until now.\n\nThe existing integration tests for blocking connectors are expanded to also include cases for blocking source and sink tasks. Full coverage of every source/sink task method is intentionally omitted from these expanded tests in order to avoid inflating test runtime (each one adds an extra 5 seconds at minimum) and because the tests that are added here were sufficient to reproduce the bug with source task shutdown.\n\nAuthor: Chris Egerton <chrise@confluent.io>\nReviewers: Nigel Liang <nigel@nigelliang.com>.  Tom Bentley <tbentley@redhat.com>.  Randall Hauch <rhauch@gmail.com>","date":"2020-12-05 01:48:23","modifiedFileCount":"4","status":"M","submitter":"Chris Egerton"},{"authorTime":"2021-03-02 00:03:34","codes":[{"authorDate":"2020-10-07 02:18:54","commitOrder":7,"curCode":"    protected void close() {\n        \r\n        \r\n        try {\n            task.stop();\n        } catch (Throwable t) {\n            log.warn(\"Could not stop task\", t);\n        }\n        taskStopped = true;\n        Utils.closeQuietly(consumer, \"consumer\");\n        Utils.closeQuietly(transformationChain, \"transformation chain\");\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","date":"2020-10-07 02:18:54","endLine":177,"groupId":"105212","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/b2cd939c00b0759a826c51ce6a0b9d845b2e15.src","preCode":"    protected void close() {\n        \r\n        \r\n        try {\n            task.stop();\n        } catch (Throwable t) {\n            log.warn(\"Could not stop task\", t);\n        }\n        taskStopped = true;\n        Utils.closeQuietly(consumer, \"consumer\");\n        Utils.closeQuietly(transformationChain, \"transformation chain\");\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","realPath":"connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSinkTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"N"},{"authorDate":"2021-03-02 00:03:34","commitOrder":7,"curCode":"    protected void close() {\n        if (started) {\n            try {\n                task.stop();\n            } catch (Throwable t) {\n                log.warn(\"Could not stop task\", t);\n            }\n        }\n\n        closeProducer(Duration.ofSeconds(30));\n\n        if (admin != null) {\n            try {\n                admin.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Failed to close admin client on time\", t);\n            }\n        }\n        Utils.closeQuietly(transformationChain, \"transformation chain\");\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","date":"2021-03-02 00:03:34","endLine":190,"groupId":"105212","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"close","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/660f3b332333a80f3547c4540282313afb0b6c.src","preCode":"    protected void close() {\n        if (started) {\n            try {\n                task.stop();\n            } catch (Throwable t) {\n                log.warn(\"Could not stop task\", t);\n            }\n        }\n        if (producer != null) {\n            try {\n                producer.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Could not close producer\", t);\n            }\n        }\n        if (admin != null) {\n            try {\n                admin.close(Duration.ofSeconds(30));\n            } catch (Throwable t) {\n                log.warn(\"Failed to close admin client on time\", t);\n            }\n        }\n        Utils.closeQuietly(transformationChain, \"transformation chain\");\n        Utils.closeQuietly(retryWithToleranceOperator, \"retry operator\");\n    }\n","realPath":"connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerSourceTask.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"a63e5be4195e97e5b825b5912291144d2d0283a3","commitMessage":"@@@KAFKA-10340: Proactively close producer when cancelling source tasks (#10016)\n\nClose the producer in `WorkerSourceTask` when the latter is cancelled. If the broker do not autocreate the topic.  and the connector is not configured to create topics written by the source connector.  then the `WorkerSourceTask` main thread will block forever until the topic is created.  and will not stop if cancelled or scheduled for shutdown by the worker.\n\nExpanded an existing unit test for the WorkerSourceTask class to ensure that the producer is closed when the task is abandoned.  and added a new integration test that guarantees that tasks are still shut down even when their producers are trying to write to topics that do not exist.\n\nAuthor: Chris Egerton <chrise@confluent.io>\nReviewed: Greg Harris <gregh@confluent.io>.  Randall Hauch <rhauch@gmail.com>","date":"2021-03-02 00:03:34","modifiedFileCount":"12","status":"M","submitter":"Chris Egerton"}]
