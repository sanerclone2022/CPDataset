[{"authorTime":"2018-04-18 04:13:15","codes":[{"authorDate":"2018-04-18 04:13:15","commitOrder":17,"curCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(100),\n            Joined.with(intSerde, stringSerde, stringSerde));\n        joined.process(processor);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        driver.setUp(builder, stateDir);\n\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        setRecordContext(time, topic1);\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        setRecordContext(time, topic2);\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n        \r\n        time = 1000L;\n        setRecordContext(time, topic1);\n        for (int i = 0; i < expectedKeys.length; i++) {\n            setRecordContext(time + i, topic1);\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n\n        time = 1000 + 100L;\n        setRecordContext(time, topic2);\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n\n        time = 1000L - 100L - 1L;\n        setRecordContext(time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        \r\n        time = 2000L;\n        for (int i = 0; i < expectedKeys.length; i++) {\n            setRecordContext(time + i, topic2);\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n\n        time = 2000L + 100L;\n        setRecordContext(time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n\n        time = 2000L - 100L - 1L;\n        setRecordContext(time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n    }\n","date":"2018-04-18 04:13:15","endLine":496,"groupId":"13242","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/fee9b5b38b8fb5bb5b67fdcdc7486d5b6b0931.src","preCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(100),\n            Joined.with(intSerde, stringSerde, stringSerde));\n        joined.process(processor);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        driver.setUp(builder, stateDir);\n\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        setRecordContext(time, topic1);\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        setRecordContext(time, topic2);\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n        \r\n        time = 1000L;\n        setRecordContext(time, topic1);\n        for (int i = 0; i < expectedKeys.length; i++) {\n            setRecordContext(time + i, topic1);\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n\n        time = 1000 + 100L;\n        setRecordContext(time, topic2);\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n\n        time = 1000L - 100L - 1L;\n        setRecordContext(time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        \r\n        time = 2000L;\n        for (int i = 0; i < expectedKeys.length; i++) {\n            setRecordContext(time + i, topic2);\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n\n        time = 2000L + 100L;\n        setRecordContext(time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n\n        time = 2000L - 100L - 1L;\n        setRecordContext(time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"MB"},{"authorDate":"2018-04-18 04:13:15","commitOrder":17,"curCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(0).before(100),\n            Joined.with(intSerde, stringSerde, stringSerde));\n        joined.process(processor);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        driver.setUp(builder, stateDir);\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            setRecordContext(time + i, topic1);\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        processor.checkAndClearProcessResult();\n\n\n        time = 1000L - 100L - 1L;\n\n        setRecordContext(time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n        time = 1000L;\n\n        setRecordContext(time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n    }\n","date":"2018-04-18 04:13:15","endLine":723,"groupId":"17003","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsymmetricWindowingBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/fee9b5b38b8fb5bb5b67fdcdc7486d5b6b0931.src","preCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(0).before(100),\n            Joined.with(intSerde, stringSerde, stringSerde));\n        joined.process(processor);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        driver.setUp(builder, stateDir);\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            setRecordContext(time + i, topic1);\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        processor.checkAndClearProcessResult();\n\n\n        time = 1000L - 100L - 1L;\n\n        setRecordContext(time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n        time = 1000L;\n\n        setRecordContext(time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":614,"status":"B"}],"commitId":"ac9c3ed0b43ee848e6e555a01c55ea2eee78540a","commitMessage":"@@@KAFKA-6376: preliminary cleanup (#4872)\n\nGeneral cleanup of Streams code.  mostly resolving compiler warnings and re-formatting.\n\nThe regular testing suite should be sufficient.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-04-18 04:13:15","modifiedFileCount":"57","status":"M","submitter":"John Roesler"},{"authorTime":"2018-04-27 02:30:42","codes":[{"authorDate":"2018-04-27 02:30:42","commitOrder":18,"curCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(100),\n            Joined.with(intSerde, stringSerde, stringSerde));\n        joined.process(processor);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        driver = new TopologyTestDriver(builder.build(), props, time);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        for (int i = 0; i < 2; i++) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n        \r\n        time = 1000L;\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n        }\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n\n        time += 100L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n\n        time = 1000L - 100L - 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n        time += 1;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n        time += 1;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        \r\n        time = 2000L;\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time + i));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n\n        time = 2000L + 100L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n\n        time = 2000L - 100L - 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n    }\n","date":"2018-04-27 02:30:42","endLine":533,"groupId":"12576","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/a040acd5e1b8d6ccaac40770ef95e70d1946ee.src","preCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(100),\n            Joined.with(intSerde, stringSerde, stringSerde));\n        joined.process(processor);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        driver.setUp(builder, stateDir);\n\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        setRecordContext(time, topic1);\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        setRecordContext(time, topic2);\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n        \r\n        time = 1000L;\n        setRecordContext(time, topic1);\n        for (int i = 0; i < expectedKeys.length; i++) {\n            setRecordContext(time + i, topic1);\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n\n        time = 1000 + 100L;\n        setRecordContext(time, topic2);\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n\n        time = 1000L - 100L - 1L;\n        setRecordContext(time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        \r\n        time = 2000L;\n        for (int i = 0; i < expectedKeys.length; i++) {\n            setRecordContext(time + i, topic2);\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n\n        time = 2000L + 100L;\n        setRecordContext(time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n\n        time = 2000L - 100L - 1L;\n        setRecordContext(time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n        setRecordContext(++time, topic1);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"},{"authorDate":"2018-04-27 02:30:42","commitOrder":18,"curCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(0).before(100),\n            Joined.with(intSerde, stringSerde, stringSerde));\n        joined.process(processor);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        driver = new TopologyTestDriver(builder.build(), props, time);\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n        }\n        processor.checkAndClearProcessResult();\n\n\n        time = 1000L - 100L - 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time = 1000L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n    }\n","date":"2018-04-27 02:30:42","endLine":751,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsymmetricWindowingBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/a040acd5e1b8d6ccaac40770ef95e70d1946ee.src","preCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(0).before(100),\n            Joined.with(intSerde, stringSerde, stringSerde));\n        joined.process(processor);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        driver.setUp(builder, stateDir);\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            setRecordContext(time + i, topic1);\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        processor.checkAndClearProcessResult();\n\n\n        time = 1000L - 100L - 1L;\n\n        setRecordContext(time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n        time = 1000L;\n\n        setRecordContext(time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n        setRecordContext(++time, topic2);\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n\n        processor.checkAndClearProcessResult();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":646,"status":"M"}],"commitId":"885abbfcd40aab57acec278d976956f07be15090","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [partial] (#4832)\n\n* Remove ProcessorTopologyTestDriver from TopologyTest\n* Fix ProcessorTopologyTest\n* Remove ProcessorTopologyTestDriver and InternalTopologyAccessor\n* Partially refactored StreamsBuilderTest but missing one test\n* Refactor KStreamBuilderTest\n* Refactor AbstractStreamTest\n* Further cleanup of AbstractStreamTest\n* Refactor GlobalKTableJoinsTest\n* Refactor InternalStreamsBuilderTest\n* Fix circular dependency in build.gradle\n* Refactor KGroupedStreamImplTest\n* Partial modifications to KGroupedTableImplTest\n* Refactor KGroupedTableImplTest\n* Refactor KStreamBranchTest\n* Refactor KStreamFilterTest\n* Refactor KStreamFlatMapTest KStreamFlatMapValuesTest\n* Refactor KStreamForeachTest\n* Refactor KStreamGlobalKTableJoinTest\n* Refactor KStreamGlobalKTableLeftJoinTest\n* Refactor KStreamImplTest\n* Refactor KStreamImplTest\n* Refactor KStreamKStreamJoinTest\n* Refactor KStreamKStreamLeftJoinTest\n* Refactor KStreamKTableJoinTest\n* Refactor KStreamKTableLeftJoinTest\n* Refactor KStreamMapTest and KStreamMapValuesTest\n* Refactor KStreamPeekTest and KStreamTransformTest\n* Refactor KStreamSelectKeyTest\n* Refactor KStreamTransformValuesTest\n* Refactor KStreamWindowAggregateTest\n* Add Depercation anotation to KStreamTestDriver and rollback failing tests in StreamsBuilderTest and KTableAggregateTest\n* Refactor KTableFilterTest\n* Refactor KTableForeachTest\n* Add getter for ProcessorTopology.  and simplify tests in StreamsBuilderTest\n* Refactor KTableImplTest\n* Remove unused imports\n* Refactor KTableAggregateTest\n* Fix style errors\n* Fix gradle build\n* Address reviewer comments:\n  - Remove properties new instance\n  - Remove extraneous line\n  - Remove unnecessary TopologyTestDriver instances from StreamsBuilderTest\n  - Move props.clear() to @After\n  - Clarify use of timestamp in KStreamFlatMapValuesTest\n  - Keep test using old Punctuator in KStreamTransformTest\n  - Add comment to clarify clock advances in KStreamTransformTest\n  - Add TopologyTestDriverWrapper class to access the protected constructor of TopologyTestDriver\n  - Revert KTableImplTest.testRepartition to KStreamTestDriver to avoid exposing the TopologyTestDriver processor topology\n  - Revert partially migrated classes: KTableAggregateTest.  KTableFilterTest.  and KTableImplTest\n* Rebase on current trunk an fix conflicts\n\nReviewers: Matthias J Sax <matthias@confluentio>.  Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2018-04-27 02:30:42","modifiedFileCount":"33","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-05-04 23:42:01","codes":[{"authorDate":"2018-05-04 23:42:01","commitOrder":19,"curCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(100),\n            Joined.with(intSerde, stringSerde, stringSerde));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        driver = new TopologyTestDriver(builder.build(), props, time);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        for (int i = 0; i < 2; i++) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time));\n        }\n\n        final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n        \r\n        time = 1000L;\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n        }\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n\n        time += 100L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n\n        time = 1000L - 100L - 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n        time += 1;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n        time += 1;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        \r\n        time = 2000L;\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time + i));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n\n        time = 2000L + 100L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n\n        time = 2000L - 100L - 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n    }\n","date":"2018-05-04 23:42:01","endLine":534,"groupId":"12576","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5d/849eee5d401fe7801abd6520a7f2a1b8d1d5a0.src","preCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(100),\n            Joined.with(intSerde, stringSerde, stringSerde));\n        joined.process(processor);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        driver = new TopologyTestDriver(builder.build(), props, time);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        for (int i = 0; i < 2; i++) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n        \r\n        time = 1000L;\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n        }\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n\n        time += 100L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n\n        time = 1000L - 100L - 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n        time += 1;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n        time += 1;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        \r\n        time = 2000L;\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time + i));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n\n        time = 2000L + 100L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n\n        time = 2000L - 100L - 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"M"},{"authorDate":"2018-05-04 23:42:01","commitOrder":19,"curCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(0).before(100),\n            Joined.with(intSerde, stringSerde, stringSerde));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        driver = new TopologyTestDriver(builder.build(), props, time);\n\n        final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n        }\n        processor.checkAndClearProcessResult();\n\n\n        time = 1000L - 100L - 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time = 1000L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n    }\n","date":"2018-05-04 23:42:01","endLine":753,"groupId":"12577","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsymmetricWindowingBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5d/849eee5d401fe7801abd6520a7f2a1b8d1d5a0.src","preCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(0).before(100),\n            Joined.with(intSerde, stringSerde, stringSerde));\n        joined.process(processor);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        driver = new TopologyTestDriver(builder.build(), props, time);\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n        }\n        processor.checkAndClearProcessResult();\n\n\n        time = 1000L - 100L - 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time = 1000L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":647,"status":"M"}],"commitId":"af983267be7a2d0f81527f5a348af377f30caee4","commitMessage":"@@@MINOR: Removed deprecated schedule function (#4908)\n\nWhile working on this.  I also refactored the MockProcessor out of the MockProcessorSupplier to cleanup the unit test paths.\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-05-04 23:42:01","modifiedFileCount":"62","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-05-08 00:21:20","codes":[{"authorDate":"2018-05-08 00:21:20","commitOrder":20,"curCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(100),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time));\n            }\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time += 100L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 1000L - 100L - 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time + i));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time = 2000L + 100L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 2000L - 100L - 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n        }\n    }\n","date":"2018-05-08 00:21:20","endLine":512,"groupId":"12576","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/3446c1a083ec482906c80f776bb4140d11865b.src","preCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(100),\n            Joined.with(intSerde, stringSerde, stringSerde));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        driver = new TopologyTestDriver(builder.build(), props, time);\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        for (int i = 0; i < 2; i++) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time));\n        }\n\n        final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n        \r\n        time = 1000L;\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n        }\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n\n        time += 100L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n\n        time = 1000L - 100L - 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n        time += 1;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n        time += 1;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        \r\n        time = 2000L;\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time + i));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n        \r\n\n        time = 2000L + 100L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        \r\n\n        time = 2000L - 100L - 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"},{"authorDate":"2018-05-08 00:21:20","commitOrder":20,"curCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(0).before(100),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            time = 1000L - 100L - 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time = 1000L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n        }\n    }\n","date":"2018-05-08 00:21:20","endLine":731,"groupId":"12577","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsymmetricWindowingBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/3446c1a083ec482906c80f776bb4140d11865b.src","preCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(0).before(100),\n            Joined.with(intSerde, stringSerde, stringSerde));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        driver = new TopologyTestDriver(builder.build(), props, time);\n\n        final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n        }\n        processor.checkAndClearProcessResult();\n\n\n        time = 1000L - 100L - 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time = 1000L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n        time += 1L;\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n        }\n\n        processor.checkAndClearProcessResult();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":625,"status":"M"}],"commitId":"6f641fef6a88036ab4dacb59ab21bc8b21ef9bcf","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [cleanup] (#4939)\n\n* Add method to create test properties to StreamsTestUtils\n* Make TopologyTestDriver protected constructor package-private\n* Add comment suggesting the use of TopologyTestDriver to KStreamTestDriver\n* Cleanup:\n    - GlobalKTableJoinsTest\n    - KGroupedStreamImplTest\n    - KGroupedTableImplTest\n    - KStreamBranchTest\n    - KStreamFilterTest\n    - KStreamFlatMapTest\n    - KStreamFlatMapValuesTest\n    - KStreamForeachTest\n    - KStreamGlobalKTableJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamImplTest\n    - KStreamKStreamJoinTest\n    - KStreamKStreamLeftJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamKTableJoinTest\n    - KStreamKTableLeftJoinTest\n    - KStreamMapTest\n    - KStreamMapValuesTest\n    - KStreamPeekTest\n    - StreamsBuilderTest\n    - KStreamSelectKeyTest\n    - KStreamTransformTest\n    - KStreamTransformValuesTest\n    - KStreamWindowAggregateTest\n    - KTableForeachTest\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-05-08 00:21:20","modifiedFileCount":"27","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-05-18 02:28:45","codes":[{"authorDate":"2018-05-18 02:28:45","commitOrder":21,"curCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(100),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time));\n            }\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time += 100L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 1000L - 100L - 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time + i));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time = 2000L + 100L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 2000L - 100L - 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n        }\n    }\n","date":"2018-05-18 02:28:45","endLine":512,"groupId":"12576","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/59/f09530ca75c125804bbfcba92bdc11ce829591.src","preCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(100),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time));\n            }\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time += 100L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 1000L - 100L - 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time + i));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time = 2000L + 100L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 2000L - 100L - 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"},{"authorDate":"2018-05-18 02:28:45","commitOrder":21,"curCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(0).before(100),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            time = 1000L - 100L - 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time = 1000L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n        }\n    }\n","date":"2018-05-18 02:28:45","endLine":731,"groupId":"12577","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsymmetricWindowingBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/59/f09530ca75c125804bbfcba92bdc11ce829591.src","preCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(0).before(100),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = StreamsBuilderTest.getCopartitionedGroups(builder);\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            time = 1000L - 100L - 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time = 1000L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":625,"status":"M"}],"commitId":"1a324d784cfc53288730b7c1b5c1bde0685e4686","commitMessage":"@@@KAFKA-6729: Reuse source topics for source KTable's materialized store's changelog (#5017)\n\n1. In InternalTopologyBuilder#topicGroups.  which is used in StreamsPartitionAssignor.  look for book-kept storeToChangelogTopic map before creating a new internal changelog topics. In this way if the source KTable is created.  its source topic stored in storeToChangelogTopic will be used.\n\n2. Added unit test (confirmed that without 1) it will fail).\n\n3. MINOR: removed TODOs that are related to removed KStreamBuilder.\n\n4. MINOR: removed TODOs in StreamsBuilderTest util functions and replaced with TopologyWrapper.\n\n5. MINOR: removed StreamsBuilderTest#testFrom as it is already covered by TopologyTest#shouldNotAllowToAddSourcesWithSameName.  plus it requires KStreamImpl.SOURCE_NAME which should be a package private field of the KStreamImpl.\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Matthias\n J. Sax <matthias@confluent.io>","date":"2018-05-18 02:28:45","modifiedFileCount":"17","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2018-08-04 04:19:46","commitOrder":22,"curCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(100),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time));\n            }\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time + i));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n        }\n    }\n","date":"2018-08-04 04:19:46","endLine":512,"groupId":"12576","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/3b681472b37d40e64fdc1107c08d435ac6c607.src","preCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(100),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time));\n            }\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time += 100L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 1000L - 100L - 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time + i));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time = 2000L + 100L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 2000L - 100L - 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":294,"status":"M"},{"authorDate":"2018-08-04 04:19:46","commitOrder":22,"curCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(0).before(100),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n        }\n    }\n","date":"2018-08-04 04:19:46","endLine":731,"groupId":"12577","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsymmetricWindowingBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/3b681472b37d40e64fdc1107c08d435ac6c607.src","preCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(0).before(100),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            time = 1000L - 100L - 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time = 1000L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":625,"status":"M"}],"commitId":"3637b2c374d48e99e0a7be37605d3c79f2661007","commitMessage":"@@@MINOR: Require final variables in Streams (#5452)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-08-04 04:19:46","modifiedFileCount":"212","status":"M","submitter":"John Roesler"},{"authorTime":"2018-10-05 04:51:39","codes":[{"authorDate":"2018-10-05 04:51:39","commitOrder":23,"curCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time));\n            }\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time + i));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n        }\n    }\n","date":"2018-10-05 04:51:39","endLine":513,"groupId":"12576","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f2/e3cc9b3982117450b3071fb7993b3f636c2736.src","preCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(100),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time));\n            }\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time + i));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"M"},{"authorDate":"2018-10-05 04:51:39","commitOrder":23,"curCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n        }\n    }\n","date":"2018-10-05 04:51:39","endLine":732,"groupId":"12577","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsymmetricWindowingBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f2/e3cc9b3982117450b3071fb7993b3f636c2736.src","preCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(0).before(100),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups = TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":626,"status":"M"}],"commitId":"ca641b3e2e48c14ff308181c775775408f5f35f7","commitMessage":"@@@KAFKA-7277: Migrate Streams API to Duration instead of longMs times (#5682)\n\nReviewers: Johne Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-10-05 04:51:39","modifiedFileCount":"97","status":"M","submitter":"Nikolay"},{"authorTime":"2019-03-20 08:27:32","codes":[{"authorDate":"2019-03-20 08:27:32","commitOrder":24,"curCode":"    public void testWindowing() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 0L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+Y0 (ts: 0)\", \"1:X1+Y1 (ts: 0)\");\n\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 1100)\", \"1:X1+YY1 (ts: 1100)\", \"2:X2+YY2 (ts: 1100)\", \"3:X3+YY3 (ts: 1100)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:X1+YY1 (ts: 1101)\", \"2:X2+YY2 (ts: 1101)\", \"3:X3+YY3 (ts: 1101)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:X2+YY2 (ts: 1102)\", \"3:X3+YY3 (ts: 1102)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:X3+YY3 (ts: 1103)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 900)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 901)\", \"1:X1+YY1 (ts: 901)\");\n\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 902)\", \"1:X1+YY1 (ts: 902)\", \"2:X2+YY2 (ts: 902)\");\n\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 903)\", \"1:X1+YY1 (ts: 903)\", \"2:X2+YY2 (ts: 903)\", \"3:X3+YY3 (ts: 903)\");\n\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:XX0+Y0 (ts: 2100)\", \"1:XX1+Y1 (ts: 2100)\", \"2:XX2+Y2 (ts: 2100)\", \"3:XX3+Y3 (ts: 2100)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:XX1+Y1 (ts: 2101)\", \"2:XX2+Y2 (ts: 2101)\", \"3:XX3+Y3 (ts: 2101)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:XX2+Y2 (ts: 2102)\", \"3:XX3+Y3 (ts: 2102)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:XX3+Y3 (ts: 2103)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:XX0+Y0 (ts: 1900)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:XX0+Y0 (ts: 1901)\", \"1:XX1+Y1 (ts: 1901)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:XX0+Y0 (ts: 1902)\", \"1:XX1+Y1 (ts: 1902)\", \"2:XX2+Y2 (ts: 1902)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:XX0+Y0 (ts: 1903)\", \"1:XX1+Y1 (ts: 1903)\", \"2:XX2+Y2 (ts: 1903)\", \"3:XX3+Y3 (ts: 1903)\");\n        }\n    }\n","date":"2019-03-20 08:27:32","endLine":456,"groupId":"16161","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ba/ac74e6c3eb767a433176a58ca51aeb3f7567e7.src","preCode":"    public void testWindowing() {\n        long time = 0L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time));\n            }\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+Y0\", \"1:X1+Y1\");\n\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time + i));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:XX2+Y2\", \"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:XX3+Y3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            \r\n\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:XX0+Y0\", \"1:XX1+Y1\", \"2:XX2+Y2\", \"3:XX3+Y3\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2019-03-20 08:27:32","commitOrder":24,"curCode":"    public void testAsymmetricWindowingBefore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 1000L;\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 900)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 901)\", \"1:X1+YY1 (ts: 901)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 902)\", \"1:X1+YY1 (ts: 902)\", \"2:X2+YY2 (ts: 902)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 903)\", \"1:X1+YY1 (ts: 903)\", \"2:X2+YY2 (ts: 903)\", \"3:X3+YY3 (ts: 903)\");\n\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 1000)\", \"1:X1+YY1 (ts: 1000)\", \"2:X2+YY2 (ts: 1000)\", \"3:X3+YY3 (ts: 1000)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:X1+YY1 (ts: 1001)\", \"2:X2+YY2 (ts: 1001)\", \"3:X3+YY3 (ts: 1001)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:X2+YY2 (ts: 1002)\", \"3:X3+YY3 (ts: 1002)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:X3+YY3 (ts: 1003)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n        }\n    }\n","date":"2019-03-20 08:27:32","endLine":653,"groupId":"16163","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsymmetricWindowingBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ba/ac74e6c3eb767a433176a58ca51aeb3f7567e7.src","preCode":"    public void testAsymmetricWindowingBefore() {\n        long time = 1000L;\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, time)) {\n\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"0:X0+YY0\", \"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"1:X1+YY1\", \"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"2:X2+YY2\", \"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult(\"3:X3+YY3\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n\n            processor.checkAndClearProcessResult();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":558,"status":"M"}],"commitId":"b5ce093a24d0fe212b5d1374330fc720b4913bee","commitMessage":"@@@MINOR: capture result timestamps in Kafka Streams DSL tests (#6447)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2019-03-20 08:27:32","modifiedFileCount":"29","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-04-18 00:07:25","codes":[{"authorDate":"2019-04-18 00:07:25","commitOrder":25,"curCode":"    public void testWindowing() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 0L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"a\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+a0 (ts: 0)\", \"1:A1+a1 (ts: 0)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"B\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+b0 (ts: 1100)\", \"1:B1+b1 (ts: 1100)\", \"2:B2+b2 (ts: 1100)\", \"3:B3+b3 (ts: 1100)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:B1+c1 (ts: 1101)\", \"2:B2+c2 (ts: 1101)\", \"3:B3+c3 (ts: 1101)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:B2+d2 (ts: 1102)\", \"3:B3+d3 (ts: 1102)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:B3+e3 (ts: 1103)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+h0 (ts: 1000)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+i0 (ts: 1000)\", \"1:B1+i1 (ts: 1001)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+j0 (ts: 1000)\", \"1:B1+j1 (ts: 1001)\", \"2:B2+j2 (ts: 1002)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"k\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+k0 (ts: 1000)\", \"1:B1+k1 (ts: 1001)\", \"2:B2+k2 (ts: 1002)\", \"3:B3+k3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"l\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"C\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:C0+l0 (ts: 2100)\", \"1:C1+l1 (ts: 2100)\", \"2:C2+l2 (ts: 2100)\", \"3:C3+l3 (ts: 2100)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"D\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:D1+l1 (ts: 2101)\", \"2:D2+l2 (ts: 2101)\", \"3:D3+l3 (ts: 2101)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"E\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:E2+l2 (ts: 2102)\", \"3:E3+l3 (ts: 2102)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"F\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:F3+l3 (ts: 2103)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"G\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"H\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"I\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:I0+l0 (ts: 2000)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"J\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:J0+l0 (ts: 2000)\", \"1:J1+l1 (ts: 2001)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"K\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:K0+l0 (ts: 2000)\", \"1:K1+l1 (ts: 2001)\", \"2:K2+l2 (ts: 2002)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"L\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:L0+l0 (ts: 2000)\", \"1:L1+l1 (ts: 2001)\", \"2:L2+l2 (ts: 2002)\", \"3:L3+l3 (ts: 2003)\");\n        }\n    }\n","date":"2019-04-18 00:07:25","endLine":762,"groupId":"18067","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fb/d27506777ee41c1b7e5e21e4a5c36bdb1bed52.src","preCode":"    public void testWindowing() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 0L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+Y0 (ts: 0)\", \"1:X1+Y1 (ts: 0)\");\n\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 1100)\", \"1:X1+YY1 (ts: 1100)\", \"2:X2+YY2 (ts: 1100)\", \"3:X3+YY3 (ts: 1100)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:X1+YY1 (ts: 1101)\", \"2:X2+YY2 (ts: 1101)\", \"3:X3+YY3 (ts: 1101)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:X2+YY2 (ts: 1102)\", \"3:X3+YY3 (ts: 1102)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:X3+YY3 (ts: 1103)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 900)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 901)\", \"1:X1+YY1 (ts: 901)\");\n\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 902)\", \"1:X1+YY1 (ts: 902)\", \"2:X2+YY2 (ts: 902)\");\n\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 903)\", \"1:X1+YY1 (ts: 903)\", \"2:X2+YY2 (ts: 903)\", \"3:X3+YY3 (ts: 903)\");\n\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:XX0+Y0 (ts: 2100)\", \"1:XX1+Y1 (ts: 2100)\", \"2:XX2+Y2 (ts: 2100)\", \"3:XX3+Y3 (ts: 2100)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:XX1+Y1 (ts: 2101)\", \"2:XX2+Y2 (ts: 2101)\", \"3:XX3+Y3 (ts: 2101)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:XX2+Y2 (ts: 2102)\", \"3:XX3+Y3 (ts: 2102)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:XX3+Y3 (ts: 2103)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:XX0+Y0 (ts: 1900)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:XX0+Y0 (ts: 1901)\", \"1:XX1+Y1 (ts: 1901)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:XX0+Y0 (ts: 1902)\", \"1:XX1+Y1 (ts: 1902)\", \"2:XX2+Y2 (ts: 1902)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:XX0+Y0 (ts: 1903)\", \"1:XX1+Y1 (ts: 1903)\", \"2:XX2+Y2 (ts: 1903)\", \"3:XX3+Y3 (ts: 1903)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2019-04-18 00:07:25","commitOrder":25,"curCode":"    public void testAsymmetricWindowingBefore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 1000L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"a\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+b0 (ts: 1000)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+c0 (ts: 1000)\", \"1:A1+c1 (ts: 1001)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+d0 (ts: 1000)\", \"1:A1+d1 (ts: 1001)\", \"2:A2+d2 (ts: 1002)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+e0 (ts: 1000)\", \"1:A1+e1 (ts: 1001)\", \"2:A2+e2 (ts: 1002)\", \"3:A3+e3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+f0 (ts: 1000)\", \"1:A1+f1 (ts: 1001)\", \"2:A2+f2 (ts: 1002)\", \"3:A3+f3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:A1+g1 (ts: 1001)\", \"2:A2+g2 (ts: 1002)\", \"3:A3+g3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:A2+h2 (ts: 1002)\", \"3:A3+h3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:A3+i3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n        }\n    }\n","date":"2019-04-18 00:07:25","endLine":1231,"groupId":"5443","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsymmetricWindowingBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fb/d27506777ee41c1b7e5e21e4a5c36bdb1bed52.src","preCode":"    public void testAsymmetricWindowingBefore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 1000L;\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 900)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 901)\", \"1:X1+YY1 (ts: 901)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 902)\", \"1:X1+YY1 (ts: 902)\", \"2:X2+YY2 (ts: 902)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 903)\", \"1:X1+YY1 (ts: 903)\", \"2:X2+YY2 (ts: 903)\", \"3:X3+YY3 (ts: 903)\");\n\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:X0+YY0 (ts: 1000)\", \"1:X1+YY1 (ts: 1000)\", \"2:X2+YY2 (ts: 1000)\", \"3:X3+YY3 (ts: 1000)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:X1+YY1 (ts: 1001)\", \"2:X2+YY2 (ts: 1001)\", \"3:X3+YY3 (ts: 1001)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:X2+YY2 (ts: 1002)\", \"3:X3+YY3 (ts: 1002)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:X3+YY3 (ts: 1003)\");\n\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1000,"status":"M"}],"commitId":"0e08358da4b114834140c720b98125a2a3a84caa","commitMessage":"@@@KAFKA-6455: KStream-KStream join should set max timestamp for result record (#6565)\n\nReviewers: John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-04-18 00:07:25","modifiedFileCount":"3","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-05-18 07:48:07","codes":[{"authorDate":"2019-05-18 07:48:07","commitOrder":26,"curCode":"    public void testWindowing() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 0L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"a\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+a0 (ts: 0)\", \"1:A1+a1 (ts: 0)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"B\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+b0 (ts: 1100)\", \"1:B1+b1 (ts: 1100)\", \"2:B2+b2 (ts: 1100)\", \"3:B3+b3 (ts: 1100)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:B1+c1 (ts: 1101)\", \"2:B2+c2 (ts: 1101)\", \"3:B3+c3 (ts: 1101)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:B2+d2 (ts: 1102)\", \"3:B3+d3 (ts: 1102)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:B3+e3 (ts: 1103)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+h0 (ts: 1000)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+i0 (ts: 1000)\", \"1:B1+i1 (ts: 1001)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+j0 (ts: 1000)\", \"1:B1+j1 (ts: 1001)\", \"2:B2+j2 (ts: 1002)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"k\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+k0 (ts: 1000)\", \"1:B1+k1 (ts: 1001)\", \"2:B2+k2 (ts: 1002)\", \"3:B3+k3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"l\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"C\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:C0+l0 (ts: 2100)\", \"1:C1+l1 (ts: 2100)\", \"2:C2+l2 (ts: 2100)\", \"3:C3+l3 (ts: 2100)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"D\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:D1+l1 (ts: 2101)\", \"2:D2+l2 (ts: 2101)\", \"3:D3+l3 (ts: 2101)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"E\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:E2+l2 (ts: 2102)\", \"3:E3+l3 (ts: 2102)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"F\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:F3+l3 (ts: 2103)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"G\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"H\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"I\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:I0+l0 (ts: 2000)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"J\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:J0+l0 (ts: 2000)\", \"1:J1+l1 (ts: 2001)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"K\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:K0+l0 (ts: 2000)\", \"1:K1+l1 (ts: 2001)\", \"2:K2+l2 (ts: 2002)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"L\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:L0+l0 (ts: 2000)\", \"1:L1+l1 (ts: 2001)\", \"2:L2+l2 (ts: 2002)\", \"3:L3+l3 (ts: 2003)\");\n        }\n    }\n","date":"2019-05-18 07:48:07","endLine":763,"groupId":"18067","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/d601a3294d9254cadf475bf5dacbb981275a37.src","preCode":"    public void testWindowing() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 0L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"a\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+a0 (ts: 0)\", \"1:A1+a1 (ts: 0)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"B\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+b0 (ts: 1100)\", \"1:B1+b1 (ts: 1100)\", \"2:B2+b2 (ts: 1100)\", \"3:B3+b3 (ts: 1100)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:B1+c1 (ts: 1101)\", \"2:B2+c2 (ts: 1101)\", \"3:B3+c3 (ts: 1101)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:B2+d2 (ts: 1102)\", \"3:B3+d3 (ts: 1102)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:B3+e3 (ts: 1103)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+h0 (ts: 1000)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+i0 (ts: 1000)\", \"1:B1+i1 (ts: 1001)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+j0 (ts: 1000)\", \"1:B1+j1 (ts: 1001)\", \"2:B2+j2 (ts: 1002)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"k\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+k0 (ts: 1000)\", \"1:B1+k1 (ts: 1001)\", \"2:B2+k2 (ts: 1002)\", \"3:B3+k3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"l\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"C\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:C0+l0 (ts: 2100)\", \"1:C1+l1 (ts: 2100)\", \"2:C2+l2 (ts: 2100)\", \"3:C3+l3 (ts: 2100)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"D\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:D1+l1 (ts: 2101)\", \"2:D2+l2 (ts: 2101)\", \"3:D3+l3 (ts: 2101)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"E\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:E2+l2 (ts: 2102)\", \"3:E3+l3 (ts: 2102)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"F\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:F3+l3 (ts: 2103)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"G\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"H\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"I\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:I0+l0 (ts: 2000)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"J\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:J0+l0 (ts: 2000)\", \"1:J1+l1 (ts: 2001)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"K\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:K0+l0 (ts: 2000)\", \"1:K1+l1 (ts: 2001)\", \"2:K2+l2 (ts: 2002)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"L\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:L0+l0 (ts: 2000)\", \"1:L1+l1 (ts: 2001)\", \"2:L2+l2 (ts: 2002)\", \"3:L3+l3 (ts: 2003)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"},{"authorDate":"2019-05-18 07:48:07","commitOrder":26,"curCode":"    public void testAsymmetricWindowingBefore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 1000L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"a\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+b0 (ts: 1000)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+c0 (ts: 1000)\", \"1:A1+c1 (ts: 1001)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+d0 (ts: 1000)\", \"1:A1+d1 (ts: 1001)\", \"2:A2+d2 (ts: 1002)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+e0 (ts: 1000)\", \"1:A1+e1 (ts: 1001)\", \"2:A2+e2 (ts: 1002)\", \"3:A3+e3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+f0 (ts: 1000)\", \"1:A1+f1 (ts: 1001)\", \"2:A2+f2 (ts: 1002)\", \"3:A3+f3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:A1+g1 (ts: 1001)\", \"2:A2+g2 (ts: 1002)\", \"3:A3+g3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:A2+h2 (ts: 1002)\", \"3:A3+h3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:A3+i3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n        }\n    }\n","date":"2019-05-18 07:48:07","endLine":1232,"groupId":"0","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsymmetricWindowingBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/d601a3294d9254cadf475bf5dacbb981275a37.src","preCode":"    public void testAsymmetricWindowingBefore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 1000L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"a\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+b0 (ts: 1000)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+c0 (ts: 1000)\", \"1:A1+c1 (ts: 1001)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+d0 (ts: 1000)\", \"1:A1+d1 (ts: 1001)\", \"2:A2+d2 (ts: 1002)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+e0 (ts: 1000)\", \"1:A1+e1 (ts: 1001)\", \"2:A2+e2 (ts: 1002)\", \"3:A3+e3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+f0 (ts: 1000)\", \"1:A1+f1 (ts: 1001)\", \"2:A2+f2 (ts: 1002)\", \"3:A3+f3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:A1+g1 (ts: 1001)\", \"2:A2+g2 (ts: 1002)\", \"3:A3+g3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:A2+h2 (ts: 1002)\", \"3:A3+h3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:A3+i3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1001,"status":"M"}],"commitId":"6a2749faa63397caa93dae7bfdc3f1d0573a2ff4","commitMessage":"@@@KAFKA-6455: Improve DSL operator timestamp semantics (#6725)\n\nBasic idea:\nKTable-KTable join: set max(left-ts. right-ts) for result\n#agg(...) (stream/table windowed/non-windowed): set max(ts1.  ts2.  ts3. ...) of all input records that contribute to the aggregation result\nfor all stateless transformation: input-ts -> output-ts\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   John Roesler <john@confluent.io>.  Andy Coates <andy@confluent.io>.   Bill Bejeck <bbejeck@gmail.com","date":"2019-05-18 07:48:07","modifiedFileCount":"61","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-07-16 22:16:15","codes":[{"authorDate":"2019-07-16 22:16:15","commitOrder":27,"curCode":"    public void testWindowing() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 0L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"a\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+a0\", 0),\n                new KeyValueTimestamp<>(1, \"A1+a1\", 0));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"B\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+b0\", 1100),\n                new KeyValueTimestamp<>(1, \"B1+b1\", 1100),\n                new KeyValueTimestamp<>(2, \"B2+b2\", 1100),\n                new KeyValueTimestamp<>(3, \"B3+b3\", 1100));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"B1+c1\", 1101),\n                new KeyValueTimestamp<>(2, \"B2+c2\", 1101),\n                new KeyValueTimestamp<>(3, \"B3+c3\", 1101));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"B2+d2\", 1102),\n                new KeyValueTimestamp<>(3, \"B3+d3\", 1102));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"B3+e3\", 1103));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+h0\", 1000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+i0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+i1\", 1001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+j0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+j1\", 1001),\n                new KeyValueTimestamp<>(2, \"B2+j2\", 1002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"k\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+k0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+k1\", 1001),\n                new KeyValueTimestamp<>(2, \"B2+k2\", 1002),\n                new KeyValueTimestamp<>(3, \"B3+k3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"l\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"C\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"C0+l0\", 2100),\n                new KeyValueTimestamp<>(1, \"C1+l1\", 2100),\n                new KeyValueTimestamp<>(2, \"C2+l2\", 2100),\n                new KeyValueTimestamp<>(3, \"C3+l3\", 2100));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"D\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"D1+l1\", 2101),\n                new KeyValueTimestamp<>(2, \"D2+l2\", 2101),\n                new KeyValueTimestamp<>(3, \"D3+l3\", 2101));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"E\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"E2+l2\", 2102),\n                new KeyValueTimestamp<>(3, \"E3+l3\", 2102));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"F\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"F3+l3\", 2103));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"G\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"H\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"I\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"I0+l0\", 2000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"J\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"J0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"J1+l1\", 2001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"K\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"K0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"K1+l1\", 2001),\n                new KeyValueTimestamp<>(2, \"K2+l2\", 2002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"L\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"L0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"L1+l1\", 2001),\n                new KeyValueTimestamp<>(2, \"L2+l2\", 2002),\n                new KeyValueTimestamp<>(3, \"L3+l3\", 2003));\n        }\n    }\n","date":"2019-07-16 22:16:15","endLine":826,"groupId":"18067","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/69/25eba99144c906a7c50fa5b7e145a3e5fd09fd.src","preCode":"    public void testWindowing() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 0L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"a\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+a0 (ts: 0)\", \"1:A1+a1 (ts: 0)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"B\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+b0 (ts: 1100)\", \"1:B1+b1 (ts: 1100)\", \"2:B2+b2 (ts: 1100)\", \"3:B3+b3 (ts: 1100)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:B1+c1 (ts: 1101)\", \"2:B2+c2 (ts: 1101)\", \"3:B3+c3 (ts: 1101)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:B2+d2 (ts: 1102)\", \"3:B3+d3 (ts: 1102)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:B3+e3 (ts: 1103)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+h0 (ts: 1000)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+i0 (ts: 1000)\", \"1:B1+i1 (ts: 1001)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+j0 (ts: 1000)\", \"1:B1+j1 (ts: 1001)\", \"2:B2+j2 (ts: 1002)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"k\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:B0+k0 (ts: 1000)\", \"1:B1+k1 (ts: 1001)\", \"2:B2+k2 (ts: 1002)\", \"3:B3+k3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"l\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"C\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:C0+l0 (ts: 2100)\", \"1:C1+l1 (ts: 2100)\", \"2:C2+l2 (ts: 2100)\", \"3:C3+l3 (ts: 2100)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"D\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:D1+l1 (ts: 2101)\", \"2:D2+l2 (ts: 2101)\", \"3:D3+l3 (ts: 2101)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"E\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:E2+l2 (ts: 2102)\", \"3:E3+l3 (ts: 2102)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"F\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:F3+l3 (ts: 2103)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"G\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"H\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"I\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:I0+l0 (ts: 2000)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"J\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:J0+l0 (ts: 2000)\", \"1:J1+l1 (ts: 2001)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"K\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:K0+l0 (ts: 2000)\", \"1:K1+l1 (ts: 2001)\", \"2:K2+l2 (ts: 2002)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"L\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:L0+l0 (ts: 2000)\", \"1:L1+l1 (ts: 2001)\", \"2:L2+l2 (ts: 2002)\", \"3:L3+l3 (ts: 2003)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"},{"authorDate":"2019-07-16 22:16:15","commitOrder":27,"curCode":"    public void testAsymmetricWindowingBefore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 1000L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"a\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+b0\", 1000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+c0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+c1\", 1001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+d0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+d1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+d2\", 1002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+e0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+e1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+e2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+e3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+f0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+f1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+f2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+f3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"A1+g1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+g2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+g3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"A2+h2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+h3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"A3+i3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n        }\n    }\n","date":"2019-07-16 22:16:15","endLine":1319,"groupId":"17840","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsymmetricWindowingBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/69/25eba99144c906a7c50fa5b7e145a3e5fd09fd.src","preCode":"    public void testAsymmetricWindowingBefore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 1000L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"a\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+b0 (ts: 1000)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+c0 (ts: 1000)\", \"1:A1+c1 (ts: 1001)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+d0 (ts: 1000)\", \"1:A1+d1 (ts: 1001)\", \"2:A2+d2 (ts: 1002)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+e0 (ts: 1000)\", \"1:A1+e1 (ts: 1001)\", \"2:A2+e2 (ts: 1002)\", \"3:A3+e3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"0:A0+f0 (ts: 1000)\", \"1:A1+f1 (ts: 1001)\", \"2:A2+f2 (ts: 1002)\", \"3:A3+f3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"1:A1+g1 (ts: 1001)\", \"2:A2+g2 (ts: 1002)\", \"3:A3+g3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"2:A2+h2 (ts: 1002)\", \"3:A3+h3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(\"3:A3+i3 (ts: 1003)\");\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1076,"status":"M"}],"commitId":"00757cd99f6d8bf2760c3708d307347f4cde65f6","commitMessage":"@@@KAFKA-8450: Using KeyValueTimeStamp in MockProcessor (#6933)\n\nThis PR is to use KeyValueTimeStamp Object in MockProcessor Test file instead of String and change all the dependency files with broken test cases.\n\nReviewers: Kamal Chandraprakash.  Matthias J. Sax <mjsax@apache.org>.   Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-07-16 22:16:15","modifiedFileCount":"28","status":"M","submitter":"SuryaTeja Duggi"},{"authorTime":"2019-10-03 11:32:18","codes":[{"authorDate":"2019-10-03 11:32:18","commitOrder":28,"curCode":"    public void testWindowing() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100)),\n            StreamJoined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 0L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"a\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+a0\", 0),\n                new KeyValueTimestamp<>(1, \"A1+a1\", 0));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"B\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+b0\", 1100),\n                new KeyValueTimestamp<>(1, \"B1+b1\", 1100),\n                new KeyValueTimestamp<>(2, \"B2+b2\", 1100),\n                new KeyValueTimestamp<>(3, \"B3+b3\", 1100));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"B1+c1\", 1101),\n                new KeyValueTimestamp<>(2, \"B2+c2\", 1101),\n                new KeyValueTimestamp<>(3, \"B3+c3\", 1101));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"B2+d2\", 1102),\n                new KeyValueTimestamp<>(3, \"B3+d3\", 1102));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"B3+e3\", 1103));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+h0\", 1000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+i0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+i1\", 1001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+j0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+j1\", 1001),\n                new KeyValueTimestamp<>(2, \"B2+j2\", 1002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"k\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+k0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+k1\", 1001),\n                new KeyValueTimestamp<>(2, \"B2+k2\", 1002),\n                new KeyValueTimestamp<>(3, \"B3+k3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"l\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"C\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"C0+l0\", 2100),\n                new KeyValueTimestamp<>(1, \"C1+l1\", 2100),\n                new KeyValueTimestamp<>(2, \"C2+l2\", 2100),\n                new KeyValueTimestamp<>(3, \"C3+l3\", 2100));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"D\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"D1+l1\", 2101),\n                new KeyValueTimestamp<>(2, \"D2+l2\", 2101),\n                new KeyValueTimestamp<>(3, \"D3+l3\", 2101));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"E\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"E2+l2\", 2102),\n                new KeyValueTimestamp<>(3, \"E3+l3\", 2102));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"F\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"F3+l3\", 2103));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"G\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"H\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"I\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"I0+l0\", 2000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"J\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"J0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"J1+l1\", 2001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"K\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"K0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"K1+l1\", 2001),\n                new KeyValueTimestamp<>(2, \"K2+l2\", 2002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"L\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"L0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"L1+l1\", 2001),\n                new KeyValueTimestamp<>(2, \"L2+l2\", 2002),\n                new KeyValueTimestamp<>(3, \"L3+l3\", 2003));\n        }\n    }\n","date":"2019-10-03 11:32:18","endLine":993,"groupId":"18067","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/6abd32c219ef798beb517463f728168d5dc2c8.src","preCode":"    public void testWindowing() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 0L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"a\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+a0\", 0),\n                new KeyValueTimestamp<>(1, \"A1+a1\", 0));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"B\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+b0\", 1100),\n                new KeyValueTimestamp<>(1, \"B1+b1\", 1100),\n                new KeyValueTimestamp<>(2, \"B2+b2\", 1100),\n                new KeyValueTimestamp<>(3, \"B3+b3\", 1100));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"B1+c1\", 1101),\n                new KeyValueTimestamp<>(2, \"B2+c2\", 1101),\n                new KeyValueTimestamp<>(3, \"B3+c3\", 1101));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"B2+d2\", 1102),\n                new KeyValueTimestamp<>(3, \"B3+d3\", 1102));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"B3+e3\", 1103));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+h0\", 1000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+i0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+i1\", 1001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+j0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+j1\", 1001),\n                new KeyValueTimestamp<>(2, \"B2+j2\", 1002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"k\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+k0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+k1\", 1001),\n                new KeyValueTimestamp<>(2, \"B2+k2\", 1002),\n                new KeyValueTimestamp<>(3, \"B3+k3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"l\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"C\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"C0+l0\", 2100),\n                new KeyValueTimestamp<>(1, \"C1+l1\", 2100),\n                new KeyValueTimestamp<>(2, \"C2+l2\", 2100),\n                new KeyValueTimestamp<>(3, \"C3+l3\", 2100));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"D\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"D1+l1\", 2101),\n                new KeyValueTimestamp<>(2, \"D2+l2\", 2101),\n                new KeyValueTimestamp<>(3, \"D3+l3\", 2101));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"E\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"E2+l2\", 2102),\n                new KeyValueTimestamp<>(3, \"E3+l3\", 2102));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"F\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"F3+l3\", 2103));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"G\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"H\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"I\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"I0+l0\", 2000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"J\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"J0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"J1+l1\", 2001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"K\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"K0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"K1+l1\", 2001),\n                new KeyValueTimestamp<>(2, \"K2+l2\", 2002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"L\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"L0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"L1+l1\", 2001),\n                new KeyValueTimestamp<>(2, \"L2+l2\", 2002),\n                new KeyValueTimestamp<>(3, \"L3+l3\", 2003));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"M"},{"authorDate":"2019-10-03 11:32:18","commitOrder":28,"curCode":"    public void testAsymmetricWindowingBefore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            StreamJoined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 1000L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"a\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+b0\", 1000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+c0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+c1\", 1001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+d0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+d1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+d2\", 1002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+e0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+e1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+e2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+e3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+f0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+f1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+f2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+f3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"A1+g1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+g2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+g3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"A2+h2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+h3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"A3+i3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n        }\n    }\n","date":"2019-10-03 11:32:18","endLine":1486,"groupId":"17840","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsymmetricWindowingBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/6abd32c219ef798beb517463f728168d5dc2c8.src","preCode":"    public void testAsymmetricWindowingBefore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            Joined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 1000L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"a\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+b0\", 1000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+c0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+c1\", 1001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+d0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+d1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+d2\", 1002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+e0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+e1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+e2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+e3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+f0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+f1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+f2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+f3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"A1+g1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+g2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+g3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"A2+h2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+h3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"A3+i3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1243,"status":"M"}],"commitId":"6925775e63fd33e6a44bbda671b2de7db41d150e","commitMessage":"@@@KAFKA-8558:  Add StreamJoined config object to join (#7285)\n\nReviewer: John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-03 11:32:18","modifiedFileCount":"11","status":"M","submitter":"Bill Bejeck"},{"authorTime":"2019-10-07 16:01:58","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":29,"curCode":"    public void testWindowing() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100)),\n            StreamJoined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, new IntegerSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, new IntegerSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 0L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"A\" + expectedKeys[i], time);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"a\" + expectedKeys[i], time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+a0\", 0),\n                new KeyValueTimestamp<>(1, \"A1+a1\", 0));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"B\" + expectedKeys[i], time + i);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"b\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+b0\", 1100),\n                new KeyValueTimestamp<>(1, \"B1+b1\", 1100),\n                new KeyValueTimestamp<>(2, \"B2+b2\", 1100),\n                new KeyValueTimestamp<>(3, \"B3+b3\", 1100));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"c\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"B1+c1\", 1101),\n                new KeyValueTimestamp<>(2, \"B2+c2\", 1101),\n                new KeyValueTimestamp<>(3, \"B3+c3\", 1101));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"d\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"B2+d2\", 1102),\n                new KeyValueTimestamp<>(3, \"B3+d3\", 1102));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"e\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"B3+e3\", 1103));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"f\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"g\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"h\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+h0\", 1000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"i\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+i0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+i1\", 1001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"j\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+j0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+j1\", 1001),\n                new KeyValueTimestamp<>(2, \"B2+j2\", 1002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"k\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+k0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+k1\", 1001),\n                new KeyValueTimestamp<>(2, \"B2+k2\", 1002),\n                new KeyValueTimestamp<>(3, \"B3+k3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"l\" + expectedKeys[i], time + i);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"C\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"C0+l0\", 2100),\n                new KeyValueTimestamp<>(1, \"C1+l1\", 2100),\n                new KeyValueTimestamp<>(2, \"C2+l2\", 2100),\n                new KeyValueTimestamp<>(3, \"C3+l3\", 2100));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"D\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"D1+l1\", 2101),\n                new KeyValueTimestamp<>(2, \"D2+l2\", 2101),\n                new KeyValueTimestamp<>(3, \"D3+l3\", 2101));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"E\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"E2+l2\", 2102),\n                new KeyValueTimestamp<>(3, \"E3+l3\", 2102));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"F\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"F3+l3\", 2103));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"G\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"H\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"I\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"I0+l0\", 2000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"J\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"J0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"J1+l1\", 2001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"K\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"K0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"K1+l1\", 2001),\n                new KeyValueTimestamp<>(2, \"K2+l2\", 2002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"L\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"L0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"L1+l1\", 2001),\n                new KeyValueTimestamp<>(2, \"L2+l2\", 2002),\n                new KeyValueTimestamp<>(3, \"L3+l3\", 2003));\n        }\n    }\n","date":"2019-10-07 16:01:58","endLine":1006,"groupId":"654","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d7/ce37e8bce2934b70e0c6581ecf1d199ddf73a0.src","preCode":"    public void testWindowing() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100)),\n            StreamJoined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 0L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"a\" + expectedKeys[i], time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+a0\", 0),\n                new KeyValueTimestamp<>(1, \"A1+a1\", 0));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"B\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+b0\", 1100),\n                new KeyValueTimestamp<>(1, \"B1+b1\", 1100),\n                new KeyValueTimestamp<>(2, \"B2+b2\", 1100),\n                new KeyValueTimestamp<>(3, \"B3+b3\", 1100));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"B1+c1\", 1101),\n                new KeyValueTimestamp<>(2, \"B2+c2\", 1101),\n                new KeyValueTimestamp<>(3, \"B3+c3\", 1101));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"B2+d2\", 1102),\n                new KeyValueTimestamp<>(3, \"B3+d3\", 1102));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"B3+e3\", 1103));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+h0\", 1000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+i0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+i1\", 1001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+j0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+j1\", 1001),\n                new KeyValueTimestamp<>(2, \"B2+j2\", 1002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"k\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+k0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+k1\", 1001),\n                new KeyValueTimestamp<>(2, \"B2+k2\", 1002),\n                new KeyValueTimestamp<>(3, \"B3+k3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"l\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"C\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"C0+l0\", 2100),\n                new KeyValueTimestamp<>(1, \"C1+l1\", 2100),\n                new KeyValueTimestamp<>(2, \"C2+l2\", 2100),\n                new KeyValueTimestamp<>(3, \"C3+l3\", 2100));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"D\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"D1+l1\", 2101),\n                new KeyValueTimestamp<>(2, \"D2+l2\", 2101),\n                new KeyValueTimestamp<>(3, \"D3+l3\", 2101));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"E\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"E2+l2\", 2102),\n                new KeyValueTimestamp<>(3, \"E3+l3\", 2102));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"F\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"F3+l3\", 2103));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"G\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"H\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"I\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"I0+l0\", 2000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"J\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"J0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"J1+l1\", 2001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"K\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"K0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"K1+l1\", 2001),\n                new KeyValueTimestamp<>(2, \"K2+l2\", 2002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"L\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"L0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"L1+l1\", 2001),\n                new KeyValueTimestamp<>(2, \"L2+l2\", 2002),\n                new KeyValueTimestamp<>(3, \"L3+l3\", 2003));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":481,"status":"M"},{"authorDate":"2019-10-07 16:01:58","commitOrder":29,"curCode":"    public void testAsymmetricWindowingBefore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            StreamJoined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, new IntegerSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, new IntegerSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 1000L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"A\" + expectedKeys[i], time + i);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"a\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"b\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+b0\", 1000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"c\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+c0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+c1\", 1001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"d\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+d0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+d1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+d2\", 1002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"e\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+e0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+e1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+e2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+e3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"f\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+f0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+f1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+f2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+f3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"g\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"A1+g1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+g2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+g3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"h\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"A2+h2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+h3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"i\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"A3+i3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"j\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n        }\n    }\n","date":"2019-10-07 16:01:58","endLine":1507,"groupId":"16526","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsymmetricWindowingBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d7/ce37e8bce2934b70e0c6581ecf1d199ddf73a0.src","preCode":"    public void testAsymmetricWindowingBefore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            StreamJoined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 1000L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"A\" + expectedKeys[i], time + i));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"a\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"b\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+b0\", 1000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"c\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+c0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+c1\", 1001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"d\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+d0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+d1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+d2\", 1002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"e\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+e0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+e1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+e2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+e3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"f\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+f0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+f1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+f2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+f3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"g\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"A1+g1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+g2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+g3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"h\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"A2+h2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+h3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"i\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"A3+i3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"j\" + expectedKey, time));\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1260,"status":"M"}],"commitId":"a5a6938c69f4310f7ec519036f0df77d8022326a","commitMessage":"@@@KAFKA-8233: TopologyTestDriver test input and output usability improvements (#7378)\n\nImplements KIP-470\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-07 16:01:58","modifiedFileCount":"47","status":"M","submitter":"Jukka Karvanen"},{"authorTime":"2021-06-17 00:25:16","codes":[{"authorDate":"2021-06-17 00:25:16","commitOrder":30,"curCode":"    public void testWindowing() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100L)),\n            StreamJoined.with(Serdes.Integer(), Serdes.String(), Serdes.String())\n        );\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, new IntegerSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, new IntegerSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 0L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"A\" + expectedKeys[i], time);\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"a\" + expectedKeys[i], time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"A0+a0\", 0L),\n                new KeyValueTimestamp<>(1, \"A1+a1\", 0L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"B\" + expectedKeys[i], time + i);\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"b\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"B0+b0\", 1100L),\n                new KeyValueTimestamp<>(1, \"B1+b1\", 1100L),\n                new KeyValueTimestamp<>(2, \"B2+b2\", 1100L),\n                new KeyValueTimestamp<>(3, \"B3+b3\", 1100L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"c\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(1, \"B1+c1\", 1101L),\n                new KeyValueTimestamp<>(2, \"B2+c2\", 1101L),\n                new KeyValueTimestamp<>(3, \"B3+c3\", 1101L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"d\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(2, \"B2+d2\", 1102L),\n                new KeyValueTimestamp<>(3, \"B3+d3\", 1102L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"e\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(3, \"B3+e3\", 1103L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"f\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"g\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"h\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"B0+h0\", 1000L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"i\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"B0+i0\", 1000L),\n                new KeyValueTimestamp<>(1, \"B1+i1\", 1001L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"j\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"B0+j0\", 1000L),\n                new KeyValueTimestamp<>(1, \"B1+j1\", 1001L),\n                new KeyValueTimestamp<>(2, \"B2+j2\", 1002L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"k\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"B0+k0\", 1000L),\n                new KeyValueTimestamp<>(1, \"B1+k1\", 1001L),\n                new KeyValueTimestamp<>(2, \"B2+k2\", 1002L),\n                new KeyValueTimestamp<>(3, \"B3+k3\", 1003L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"l\" + expectedKeys[i], time + i);\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"C\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"C0+l0\", 2100L),\n                new KeyValueTimestamp<>(1, \"C1+l1\", 2100L),\n                new KeyValueTimestamp<>(2, \"C2+l2\", 2100L),\n                new KeyValueTimestamp<>(3, \"C3+l3\", 2100L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"D\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(1, \"D1+l1\", 2101L),\n                new KeyValueTimestamp<>(2, \"D2+l2\", 2101L),\n                new KeyValueTimestamp<>(3, \"D3+l3\", 2101L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"E\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(2, \"E2+l2\", 2102L),\n                new KeyValueTimestamp<>(3, \"E3+l3\", 2102L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"F\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(3, \"F3+l3\", 2103L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"G\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"H\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"I\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"I0+l0\", 2000L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"J\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"J0+l0\", 2000L),\n                new KeyValueTimestamp<>(1, \"J1+l1\", 2001L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"K\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"K0+l0\", 2000L),\n                new KeyValueTimestamp<>(1, \"K1+l1\", 2001L),\n                new KeyValueTimestamp<>(2, \"K2+l2\", 2002L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"L\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"L0+l0\", 2000L),\n                new KeyValueTimestamp<>(1, \"L1+l1\", 2001L),\n                new KeyValueTimestamp<>(2, \"L2+l2\", 2002L),\n                new KeyValueTimestamp<>(3, \"L3+l3\", 2003L)\n            );\n        }\n    }\n","date":"2021-06-17 00:25:16","endLine":1183,"groupId":"101839","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testWindowing","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ee/501add2512c45574539e0d0910e8c183a40b81.src","preCode":"    public void testWindowing() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(100)),\n            StreamJoined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, new IntegerSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, new IntegerSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 0L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"A\" + expectedKeys[i], time);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"a\" + expectedKeys[i], time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+a0\", 0),\n                new KeyValueTimestamp<>(1, \"A1+a1\", 0));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"B\" + expectedKeys[i], time + i);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 100L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"b\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+b0\", 1100),\n                new KeyValueTimestamp<>(1, \"B1+b1\", 1100),\n                new KeyValueTimestamp<>(2, \"B2+b2\", 1100),\n                new KeyValueTimestamp<>(3, \"B3+b3\", 1100));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"c\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"B1+c1\", 1101),\n                new KeyValueTimestamp<>(2, \"B2+c2\", 1101),\n                new KeyValueTimestamp<>(3, \"B3+c3\", 1101));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"d\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"B2+d2\", 1102),\n                new KeyValueTimestamp<>(3, \"B3+d3\", 1102));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"e\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"B3+e3\", 1103));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"f\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"g\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"h\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+h0\", 1000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"i\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+i0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+i1\", 1001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"j\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+j0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+j1\", 1001),\n                new KeyValueTimestamp<>(2, \"B2+j2\", 1002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"k\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"B0+k0\", 1000),\n                new KeyValueTimestamp<>(1, \"B1+k1\", 1001),\n                new KeyValueTimestamp<>(2, \"B2+k2\", 1002),\n                new KeyValueTimestamp<>(3, \"B3+k3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L;\n            for (int i = 0; i < expectedKeys.length; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"l\" + expectedKeys[i], time + i);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L + 100L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"C\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"C0+l0\", 2100),\n                new KeyValueTimestamp<>(1, \"C1+l1\", 2100),\n                new KeyValueTimestamp<>(2, \"C2+l2\", 2100),\n                new KeyValueTimestamp<>(3, \"C3+l3\", 2100));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"D\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"D1+l1\", 2101),\n                new KeyValueTimestamp<>(2, \"D2+l2\", 2101),\n                new KeyValueTimestamp<>(3, \"D3+l3\", 2101));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"E\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"E2+l2\", 2102),\n                new KeyValueTimestamp<>(3, \"E3+l3\", 2102));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"F\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"F3+l3\", 2103));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"G\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 2000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"H\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"I\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"I0+l0\", 2000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"J\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"J0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"J1+l1\", 2001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"K\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"K0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"K1+l1\", 2001),\n                new KeyValueTimestamp<>(2, \"K2+l2\", 2002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"L\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"L0+l0\", 2000),\n                new KeyValueTimestamp<>(1, \"L1+l1\", 2001),\n                new KeyValueTimestamp<>(2, \"L2+l2\", 2002),\n                new KeyValueTimestamp<>(3, \"L3+l3\", 2003));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"M"},{"authorDate":"2021-06-17 00:25:16","commitOrder":30,"curCode":"    public void testAsymmetricWindowingBefore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            StreamJoined.with(Serdes.Integer(), Serdes.String(), Serdes.String())\n        );\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, new IntegerSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, new IntegerSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 1000L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"A\" + expectedKeys[i], time + i);\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"a\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult();\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"b\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"A0+b0\", 1000L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"c\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"A0+c0\", 1000L),\n                new KeyValueTimestamp<>(1, \"A1+c1\", 1001L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"d\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"A0+d0\", 1000L),\n                new KeyValueTimestamp<>(1, \"A1+d1\", 1001L),\n                new KeyValueTimestamp<>(2, \"A2+d2\", 1002L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"e\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"A0+e0\", 1000L),\n                new KeyValueTimestamp<>(1, \"A1+e1\", 1001L),\n                new KeyValueTimestamp<>(2, \"A2+e2\", 1002L),\n                new KeyValueTimestamp<>(3, \"A3+e3\", 1003L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"f\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, \"A0+f0\", 1000L),\n                new KeyValueTimestamp<>(1, \"A1+f1\", 1001L),\n                new KeyValueTimestamp<>(2, \"A2+f2\", 1002L),\n                new KeyValueTimestamp<>(3, \"A3+f3\", 1003L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"g\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(1, \"A1+g1\", 1001L),\n                new KeyValueTimestamp<>(2, \"A2+g2\", 1002L),\n                new KeyValueTimestamp<>(3, \"A3+g3\", 1003L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"h\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(2, \"A2+h2\", 1002L),\n                new KeyValueTimestamp<>(3, \"A3+h3\", 1003L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"i\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(3, \"A3+i3\", 1003L)\n            );\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"j\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult();\n        }\n    }\n","date":"2021-06-17 00:25:16","endLine":1718,"groupId":"101839","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testAsymmetricWindowingBefore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ee/501add2512c45574539e0d0910e8c183a40b81.src","preCode":"    public void testAsymmetricWindowingBefore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KStream<Integer, String> stream1;\n        final KStream<Integer, String> stream2;\n        final KStream<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream1 = builder.stream(topic1, consumed);\n        stream2 = builder.stream(topic2, consumed);\n\n        joined = stream1.join(\n            stream2,\n            MockValueJoiner.TOSTRING_JOINER,\n            JoinWindows.of(ofMillis(0)).before(ofMillis(100)),\n            StreamJoined.with(Serdes.Integer(), Serdes.String(), Serdes.String()));\n        joined.process(supplier);\n\n        final Collection<Set<String>> copartitionGroups =\n            TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();\n\n        assertEquals(1, copartitionGroups.size());\n        assertEquals(new HashSet<>(Arrays.asList(topic1, topic2)), copartitionGroups.iterator().next());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, new IntegerSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, new IntegerSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<Integer, String> processor = supplier.theCapturedProcessor();\n            long time = 1000L;\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"A\" + expectedKeys[i], time + i);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L - 100L - 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"a\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"b\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+b0\", 1000));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"c\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+c0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+c1\", 1001));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"d\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+d0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+d1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+d2\", 1002));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"e\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+e0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+e1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+e2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+e3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time = 1000L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"f\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(0, \"A0+f0\", 1000),\n                new KeyValueTimestamp<>(1, \"A1+f1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+f2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+f3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"g\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(1, \"A1+g1\", 1001),\n                new KeyValueTimestamp<>(2, \"A2+g2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+g3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"h\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(2, \"A2+h2\", 1002),\n                new KeyValueTimestamp<>(3, \"A3+h3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"i\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(new KeyValueTimestamp<>(3, \"A3+i3\", 1003));\n\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            time += 1L;\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"j\" + expectedKey, time);\n            }\n            processor.checkAndClearProcessResult(EMPTY);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamKStreamJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1454,"status":"M"}],"commitId":"96767a60db4117f257e911871d139572b84be65d","commitMessage":"@@@KAFKA-12909: disable spurious left/outer stream-stream join fix for old JoinWindows API (#10861)\n\nWe changed the behavior of left/outer stream-stream join via KAFKA-10847.\nTo avoid a breaking change during an upgrade.  we need to disable this\nfix by default.\n\nWe only enable the fix if users opt-in expliclity by changing their\ncode. We leverage KIP-633 (KAFKA-8613) that offers a new JoinWindows\nAPI with mandatory grace-period to enable the fix.\n\nReviewers: Sergio Pe?a <sergio@confluent.io>.  Israel Ekpo <israelekpo@gmail.com>.  Guozhang Wang <guozhang@confluent.io>","date":"2021-06-17 00:25:16","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"}]
