[{"authorTime":"2017-02-13 08:01:20","codes":[{"authorDate":"2016-07-01 04:59:31","commitOrder":2,"curCode":"    public void testSendRecordsPropagatesTimestamp() throws Exception {\n        final Long timestamp = System.currentTimeMillis();\n\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, \"topic\", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, \"toSend\", records);\n        Whitebox.invokeMethod(workerTask, \"sendRecords\");\n        assertEquals(timestamp, sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-07-01 04:59:31","endLine":413,"groupId":"22196","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendRecordsPropagatesTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/98/54f225aa2503c9d5a62d04ccf7ec5d9fb2e64c.src","preCode":"    public void testSendRecordsPropagatesTimestamp() throws Exception {\n        final Long timestamp = System.currentTimeMillis();\n\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, \"topic\", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, \"toSend\", records);\n        Whitebox.invokeMethod(workerTask, \"sendRecords\");\n        assertEquals(timestamp, sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"NB"},{"authorDate":"2017-02-13 08:01:20","commitOrder":2,"curCode":"    public void testSendRecordsNoTimestamp() throws Exception {\n        final Long timestamp = -1L;\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, \"topic\", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, \"toSend\", records);\n        Whitebox.invokeMethod(workerTask, \"sendRecords\");\n        assertEquals(null, sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-02-13 08:06:33","endLine":480,"groupId":"22196","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSendRecordsNoTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/9d2c751c347f91958d152933c8c30038e8eadc.src","preCode":"    public void testSendRecordsNoTimestamp() throws Exception {\n        final Long timestamp = -1L;\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, \"topic\", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, \"toSend\", records);\n        Whitebox.invokeMethod(workerTask, \"sendRecords\");\n        assertEquals(null, sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":463,"status":"B"}],"commitId":"5dabca02594e4b71fb6ff275283a3851f1c62d60","commitMessage":"@@@KAFKA-4758; Connect missing checks for NO_TIMESTAMP\n\nAuthor: rnpridgeon <ryan.n.pridgeon@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <me@ewencp.org>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2533 from rnpridgeon/no_timestamp\n","date":"2017-02-13 08:06:33","modifiedFileCount":"4","status":"M","submitter":"rnpridgeon"},{"authorTime":"2020-05-27 13:07:34","codes":[{"authorDate":"2020-05-27 13:07:34","commitOrder":3,"curCode":"    public void testSendRecordsPropagatesTimestamp() throws Exception {\n        final Long timestamp = System.currentTimeMillis();\n\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, \"topic\", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        expectTopicCreation(TOPIC);\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, \"toSend\", records);\n        Whitebox.invokeMethod(workerTask, \"sendRecords\");\n        assertEquals(timestamp, sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-27 13:07:34","endLine":542,"groupId":"22196","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendRecordsPropagatesTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ff/61ea3dc7cffddb9205ee83b64deb1f420c3154.src","preCode":"    public void testSendRecordsPropagatesTimestamp() throws Exception {\n        final Long timestamp = System.currentTimeMillis();\n\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, \"topic\", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, \"toSend\", records);\n        Whitebox.invokeMethod(workerTask, \"sendRecords\");\n        assertEquals(timestamp, sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":522,"status":"M"},{"authorDate":"2020-05-27 13:07:34","commitOrder":3,"curCode":"    public void testSendRecordsNoTimestamp() throws Exception {\n        final Long timestamp = -1L;\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, \"topic\", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        expectTopicCreation(TOPIC);\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, \"toSend\", records);\n        Whitebox.invokeMethod(workerTask, \"sendRecords\");\n        assertEquals(null, sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-27 13:07:34","endLine":584,"groupId":"22196","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSendRecordsNoTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ff/61ea3dc7cffddb9205ee83b64deb1f420c3154.src","preCode":"    public void testSendRecordsNoTimestamp() throws Exception {\n        final Long timestamp = -1L;\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, \"topic\", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, \"toSend\", records);\n        Whitebox.invokeMethod(workerTask, \"sendRecords\");\n        assertEquals(null, sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":565,"status":"M"}],"commitId":"371f14c3c12d2e341ac96bd52393b43a10acfa84","commitMessage":"@@@KAFKA-5295: Allow source connectors to specify topic-specific settings for new topics (KIP-158) (#8722)\n\nKafka Connect workers have been able to create Connect's internal topics using the new admin client for some time now (see KAFKA-4667 for details). However.  tasks of source connectors are still relying upon the broker to auto-create topics with default config settings if they don't exist.  or expect these topics to exist before the connector is deployed.  if their configuration needs to be specialized. \n\nWith the implementation of KIP-158 here.  if `topic.creation.enable=true`.  Kafka Connect will supply the source tasks of connectors that are configured to create topics with an admin client that will allow them to create new topics on-the-fly before writing the first source records to a new topic. Additionally.  each source connector has the opportunity to customize the topic-specific settings of these new topics by defining groups of topic configurations. \n\nThis feature is tested here via unit tests (old tests that have been adjusted and new ones) as well as integration tests.\n\nReviewers: Randall Hauch <rhauch@gmail.com>","date":"2020-05-27 13:07:34","modifiedFileCount":"23","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2021-01-11 03:06:37","codes":[{"authorDate":"2020-05-27 13:07:34","commitOrder":4,"curCode":"    public void testSendRecordsPropagatesTimestamp() throws Exception {\n        final Long timestamp = System.currentTimeMillis();\n\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, \"topic\", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        expectTopicCreation(TOPIC);\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, \"toSend\", records);\n        Whitebox.invokeMethod(workerTask, \"sendRecords\");\n        assertEquals(timestamp, sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-27 13:07:34","endLine":542,"groupId":"104915","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSendRecordsPropagatesTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ff/61ea3dc7cffddb9205ee83b64deb1f420c3154.src","preCode":"    public void testSendRecordsPropagatesTimestamp() throws Exception {\n        final Long timestamp = System.currentTimeMillis();\n\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, \"topic\", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        expectTopicCreation(TOPIC);\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, \"toSend\", records);\n        Whitebox.invokeMethod(workerTask, \"sendRecords\");\n        assertEquals(timestamp, sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":522,"status":"N"},{"authorDate":"2021-01-11 03:06:37","commitOrder":4,"curCode":"    public void testSendRecordsNoTimestamp() throws Exception {\n        final Long timestamp = -1L;\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, \"topic\", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        expectTopicCreation(TOPIC);\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, \"toSend\", records);\n        Whitebox.invokeMethod(workerTask, \"sendRecords\");\n        assertNull(sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-01-11 03:06:37","endLine":585,"groupId":"104915","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSendRecordsNoTimestamp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ea/0d54c28edbdc338da6974922718d23a7f1ea24.src","preCode":"    public void testSendRecordsNoTimestamp() throws Exception {\n        final Long timestamp = -1L;\n        createWorkerTask();\n\n        List<SourceRecord> records = Collections.singletonList(\n                new SourceRecord(PARTITION, OFFSET, \"topic\", null, KEY_SCHEMA, KEY, RECORD_SCHEMA, RECORD, timestamp)\n        );\n\n        Capture<ProducerRecord<byte[], byte[]>> sent = expectSendRecordAnyTimes();\n\n        expectTopicCreation(TOPIC);\n\n        PowerMock.replayAll();\n\n        Whitebox.setInternalState(workerTask, \"toSend\", records);\n        Whitebox.invokeMethod(workerTask, \"sendRecords\");\n        assertEquals(null, sent.getValue().timestamp());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSourceTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"M"}],"commitId":"119a2d9127b8e0cbc2979eab42e837c2a43b8542","commitMessage":"@@@MINOR: Substitute assertEquals(null) with assertNull (#9852)\n\nReviewers: David Jacot <djacot@confluent.io>","date":"2021-01-11 03:06:37","modifiedFileCount":"26","status":"M","submitter":"dengziming"}]
