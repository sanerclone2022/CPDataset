[{"authorTime":"2016-02-04 03:28:58","codes":[{"authorDate":"2016-02-04 03:28:58","commitOrder":2,"curCode":"    private void expectRebalanceRevocationError(RuntimeException e) {\n        final List<TopicPartition> partitions = Arrays.asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2016-02-04 03:28:58","endLine":235,"groupId":"6549","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"expectRebalanceRevocationError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/04/b08b379d931eefaf74553d9e6f3732c432dc0c.src","preCode":"    private void expectRebalanceRevocationError(RuntimeException e) {\n        final List<TopicPartition> partitions = Arrays.asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"MB"},{"authorDate":"2016-02-04 03:28:58","commitOrder":2,"curCode":"    private void expectPollInitialAssignment() {\n        final List<TopicPartition> partitions = Arrays.asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n    }\n","date":"2016-02-04 03:28:58","endLine":284,"groupId":"18352","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"expectPollInitialAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/04/b08b379d931eefaf74553d9e6f3732c432dc0c.src","preCode":"    private void expectPollInitialAssignment() {\n        final List<TopicPartition> partitions = Arrays.asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"B"}],"commitId":"1d80f563bcd043cd464003782802906b60a0ade8","commitMessage":"@@@KAFKA-3092: Replace SinkTask onPartitionsAssigned/onPartitionsRevoked with open/close\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Liquan Pei <liquanpei@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #815 from hachikuji/KAFKA-3092\n","date":"2016-02-04 03:28:58","modifiedFileCount":"9","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-04-21 05:09:59","codes":[{"authorDate":"2016-04-21 05:09:59","commitOrder":3,"curCode":"    private void expectRebalanceRevocationError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2016-04-21 05:09:59","endLine":322,"groupId":"6549","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"expectRebalanceRevocationError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/5e30f2e5994bf70cda90a5a70ca7d78eaf52b0.src","preCode":"    private void expectRebalanceRevocationError(RuntimeException e) {\n        final List<TopicPartition> partitions = Arrays.asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"},{"authorDate":"2016-04-21 05:09:59","commitOrder":3,"curCode":"    private void expectPollInitialAssignment() {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n    }\n","date":"2016-04-21 05:09:59","endLine":371,"groupId":"18352","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"expectPollInitialAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/5e30f2e5994bf70cda90a5a70ca7d78eaf52b0.src","preCode":"    private void expectPollInitialAssignment() {\n        final List<TopicPartition> partitions = Arrays.asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"M"}],"commitId":"c9485b78a6e43747daf1314ae9532839fb7bc810","commitMessage":"@@@KAFKA-2370: kafka connect pause/resume API\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Liquan Pei <liquanpei@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1087 from hachikuji/KAFKA-2370\n","date":"2016-04-21 05:09:59","modifiedFileCount":"29","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-04-21 05:09:59","codes":[{"authorDate":"2017-08-16 05:16:00","commitOrder":4,"curCode":"    private void expectRebalanceRevocationError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall().andThrow(e);\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2017-08-16 05:16:00","endLine":908,"groupId":"6549","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"expectRebalanceRevocationError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3a/b6e06156764b12ef80e0a0fd963db20ec2c8c2.src","preCode":"    private void expectRebalanceRevocationError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall().andThrow(e);\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":891,"status":"M"},{"authorDate":"2016-04-21 05:09:59","commitOrder":4,"curCode":"    private void expectPollInitialAssignment() {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n    }\n","date":"2016-04-21 05:09:59","endLine":371,"groupId":"18352","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"expectPollInitialAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/5e30f2e5994bf70cda90a5a70ca7d78eaf52b0.src","preCode":"    private void expectPollInitialAssignment() {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"N"}],"commitId":"3b1cea60e909e579e54775fc479397ddbeba95eb","commitMessage":"@@@KAFKA-5731; Corrected how the sink task worker updates the last committed offsets\n\nPrior to this change.  it was possible for the synchronous consumer commit request to be handled before previously-submitted asynchronous commit requests. If that happened.  the out-of-order handlers improperly set the last committed offsets.  which then became inconsistent with the offsets the connector task is working with.\n\nThis change ensures that the last committed offsets are updated only for the most recent commit request.  even if the consumer reorders the calls to the callbacks.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Jason Gustafson <jason@confluent.io>\n\nCloses #3662 from rhauch/kafka-5731\n","date":"2017-08-16 05:16:00","modifiedFileCount":"2","status":"M","submitter":"Randall Hauch"},{"authorTime":"2018-08-11 13:51:17","codes":[{"authorDate":"2018-08-11 13:51:17","commitOrder":5,"curCode":"    private void expectRebalanceRevocationError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall().andThrow(e);\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","date":"2018-08-11 13:51:17","endLine":1285,"groupId":"6549","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"expectRebalanceRevocationError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/ab2ef06e083c5132a6599afe01ebd145f58f29.src","preCode":"    private void expectRebalanceRevocationError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall().andThrow(e);\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1268,"status":"M"},{"authorDate":"2018-08-11 13:51:17","commitOrder":5,"curCode":"    private void expectPollInitialAssignment() {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n    }\n","date":"2018-08-11 13:51:17","endLine":1331,"groupId":"18352","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"expectPollInitialAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/ab2ef06e083c5132a6599afe01ebd145f58f29.src","preCode":"    private void expectPollInitialAssignment() {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1313,"status":"M"}],"commitId":"8a78d76466bacd8a2a3487cc84890d29c9bc4a3d","commitMessage":"@@@KAFKA-7140; Remove deprecated poll usages (#5319)\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Jason Gustafson <jason@confluent.io>","date":"2018-08-11 13:51:17","modifiedFileCount":"11","status":"M","submitter":"Viktor Somogyi"},{"authorTime":"2021-02-05 01:15:49","codes":[{"authorDate":"2021-02-05 01:15:49","commitOrder":6,"curCode":"    private void expectRebalanceRevocationError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall().andThrow(e);\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n            () -> {\n                rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                return ConsumerRecords.empty();\n            });\n    }\n","date":"2021-02-05 01:15:49","endLine":1552,"groupId":"6549","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"expectRebalanceRevocationError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ac/b51383de4f794359bad73f0d9fcebb86d1aacd.src","preCode":"    private void expectRebalanceRevocationError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall().andThrow(e);\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n                new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n                    @Override\n                    public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                        rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                        return ConsumerRecords.empty();\n                    }\n                });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1538,"status":"M"},{"authorDate":"2021-02-05 01:15:49","commitOrder":6,"curCode":"    private void expectPollInitialAssignment() {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(() -> {\n            rebalanceListener.getValue().onPartitionsAssigned(partitions);\n            return ConsumerRecords.empty();\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n    }\n","date":"2021-02-05 01:15:49","endLine":1592,"groupId":"18352","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"expectPollInitialAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ac/b51383de4f794359bad73f0d9fcebb86d1aacd.src","preCode":"    private void expectPollInitialAssignment() {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(partitions);\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1577,"status":"M"}],"commitId":"c19a35d1b740c85559a7ff4e882fc95b4737808d","commitMessage":"@@@KAFKA-10835: Replace Runnable and Callable overrides with lambdas in Connect (#9867)\n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 01:15:49","modifiedFileCount":"50","status":"M","submitter":"Lev Zemlyanov"},{"authorTime":"2021-02-05 09:08:56","codes":[{"authorDate":"2021-02-05 09:08:56","commitOrder":7,"curCode":"    private void expectRebalanceRevocationError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall().andThrow(e);\n\n        sinkTask.preCommit(EasyMock.anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n            () -> {\n                rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                return ConsumerRecords.empty();\n            });\n    }\n","date":"2021-02-05 09:08:56","endLine":1552,"groupId":"104739","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"expectRebalanceRevocationError","params":"(RuntimeExceptione)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a7/d68a61520a213f7c399dae8550a4eb246f1ca6.src","preCode":"    private void expectRebalanceRevocationError(RuntimeException e) {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.close(new HashSet<>(partitions));\n        EasyMock.expectLastCall().andThrow(e);\n\n        sinkTask.preCommit(EasyMock.<Map<TopicPartition, OffsetAndMetadata>>anyObject());\n        EasyMock.expectLastCall().andReturn(Collections.emptyMap());\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(\n            () -> {\n                rebalanceListener.getValue().onPartitionsRevoked(partitions);\n                return ConsumerRecords.empty();\n            });\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1538,"status":"M"},{"authorDate":"2021-02-05 09:08:56","commitOrder":7,"curCode":"    private void expectPollInitialAssignment() {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(() -> {\n            rebalanceListener.getValue().onPartitionsAssigned(partitions);\n            return ConsumerRecords.empty();\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.put(Collections.emptyList());\n        EasyMock.expectLastCall();\n    }\n","date":"2021-02-05 09:08:56","endLine":1592,"groupId":"104739","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"expectPollInitialAssignment","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a7/d68a61520a213f7c399dae8550a4eb246f1ca6.src","preCode":"    private void expectPollInitialAssignment() {\n        final List<TopicPartition> partitions = asList(TOPIC_PARTITION, TOPIC_PARTITION2);\n\n        sinkTask.open(partitions);\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andAnswer(() -> {\n            rebalanceListener.getValue().onPartitionsAssigned(partitions);\n            return ConsumerRecords.empty();\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.put(Collections.<SinkRecord>emptyList());\n        EasyMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1577,"status":"M"}],"commitId":"07843cfbf4e3e7a2d26d63904bbf0da0fcd07ca2","commitMessage":"@@@KAFKA-10834: Remove redundant type casts in Connect (#10053)\n\nCleanup up to remove redundant type casts in Connect and use the diamond operator when needed \n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 09:08:56","modifiedFileCount":"41","status":"M","submitter":"Lev Zemlyanov"}]
