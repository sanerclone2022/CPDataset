[{"authorTime":"2017-08-26 16:08:46","codes":[{"authorDate":"2017-08-26 16:08:46","commitOrder":1,"curCode":"    public void put(final Windowed<K> sessionKey, final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        long startNs = time.nanoseconds();\n        try {\n            final Bytes key = Bytes.wrap(serdes.rawKey(sessionKey.key()));\n            this.inner.put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n        } finally {\n            this.metrics.recordLatency(this.putTime, startNs, time.nanoseconds());\n        }\n    }\n","date":"2017-08-26 16:08:46","endLine":145,"groupId":"12323","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(finalWindowed<K>sessionKey@finalVaggregate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8c/109871a608672f44478f0908604e8a00628841.src","preCode":"    public void put(final Windowed<K> sessionKey, final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        long startNs = time.nanoseconds();\n        try {\n            final Bytes key = Bytes.wrap(serdes.rawKey(sessionKey.key()));\n            this.inner.put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n        } finally {\n            this.metrics.recordLatency(this.putTime, startNs, time.nanoseconds());\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"B"},{"authorDate":"2017-08-26 16:08:46","commitOrder":1,"curCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = Bytes.wrap(serdes.rawKey(sessionKey.key()));\n            inner.remove(new Windowed<>(key, sessionKey.window()));\n        } finally {\n            this.metrics.recordLatency(removeTime, startNs, time.nanoseconds());\n        }\n    }\n","date":"2017-08-26 16:08:46","endLine":133,"groupId":"12321","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"remove","params":"(finalWindowed<K>sessionKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8c/109871a608672f44478f0908604e8a00628841.src","preCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = Bytes.wrap(serdes.rawKey(sessionKey.key()));\n            inner.remove(new Windowed<>(key, sessionKey.window()));\n        } finally {\n            this.metrics.recordLatency(removeTime, startNs, time.nanoseconds());\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"}],"commitId":"c715f6a5ab94d187eb662efde594f0f14dcd9910","commitMessage":"@@@KAFKA-5749; Add MeteredSessionStore and ChangeloggingSessionBytesStore.\n\nMake MeteredSessionStore the outermost store.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3729 from dguy/kafka-5749\n","date":"2017-08-26 16:08:46","modifiedFileCount":"11","status":"B","submitter":"Damian Guy"},{"authorTime":"2018-02-07 05:14:33","codes":[{"authorDate":"2018-02-07 05:14:33","commitOrder":2,"curCode":"    public void put(final Windowed<K> sessionKey, final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            this.inner.put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n        } finally {\n            this.metrics.recordLatency(this.putTime, startNs, time.nanoseconds());\n        }\n    }\n","date":"2018-02-07 05:14:33","endLine":146,"groupId":"19196","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(finalWindowed<K>sessionKey@finalVaggregate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1a/9ac20e3b3e4cf63fc11accb60e1519d6666808.src","preCode":"    public void put(final Windowed<K> sessionKey, final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        long startNs = time.nanoseconds();\n        try {\n            final Bytes key = Bytes.wrap(serdes.rawKey(sessionKey.key()));\n            this.inner.put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n        } finally {\n            this.metrics.recordLatency(this.putTime, startNs, time.nanoseconds());\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2018-02-07 05:14:33","commitOrder":2,"curCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            inner.remove(new Windowed<>(key, sessionKey.window()));\n        } finally {\n            this.metrics.recordLatency(removeTime, startNs, time.nanoseconds());\n        }\n    }\n","date":"2018-02-07 05:14:33","endLine":134,"groupId":"19199","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"remove","params":"(finalWindowed<K>sessionKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1a/9ac20e3b3e4cf63fc11accb60e1519d6666808.src","preCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = Bytes.wrap(serdes.rawKey(sessionKey.key()));\n            inner.remove(new Windowed<>(key, sessionKey.window()));\n        } finally {\n            this.metrics.recordLatency(removeTime, startNs, time.nanoseconds());\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"a88db9595910a1a7f249f7c9f3effb14636955c7","commitMessage":"@@@KAFKA-4750: Bypass null value and treat it as deletes (#4508)\n\nHere is the new rule for handling nulls:\n* in the interface store.  put(key.  null) are handled normally and value serde will still be applied to null.  hence needs to handle null values\n* in the inner bytes store.  null bytes after serialization will be treated as deletes.\n* in the interface store.  if null bytes get returned in get(key).  it indicate the key is not available; and hence serde will be avoided and null object will be returned.\n\nMore changes:\n* Update javadocs.  add unit tests accordingly; augment MockContext to set serdes for the newly added tests.\n* Fixed a discovered bug which is exposed by the newly added tests.\n* Use the new API to remove all old APIs in the existing state store tests.\n* Remove SerializedKeyValueIterator since it is not used any more.\n\nThis is originally contributed by @evis.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Damian Guy <damian@confluent.io>","date":"2018-02-07 05:14:33","modifiedFileCount":"30","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-06-07 11:42:41","codes":[{"authorDate":"2018-06-07 11:42:41","commitOrder":3,"curCode":"    public void put(final Windowed<K> sessionKey, final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            this.inner.put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key(), aggregate);\n            throw new ProcessorStateException(message, e);\n        } finally {\n            this.metrics.recordLatency(this.putTime, startNs, time.nanoseconds());\n        }\n    }\n","date":"2018-06-07 11:42:41","endLine":153,"groupId":"19196","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(finalWindowed<K>sessionKey@finalVaggregate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/881edc5c6f2e867cc43ad4da498ba7697cdf81.src","preCode":"    public void put(final Windowed<K> sessionKey, final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            this.inner.put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n        } finally {\n            this.metrics.recordLatency(this.putTime, startNs, time.nanoseconds());\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2018-06-07 11:42:41","commitOrder":3,"curCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            inner.remove(new Windowed<>(key, sessionKey.window()));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key());\n            throw new ProcessorStateException(message, e);\n        } finally {\n            this.metrics.recordLatency(removeTime, startNs, time.nanoseconds());\n        }\n    }\n","date":"2018-06-07 11:42:41","endLine":138,"groupId":"19199","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"remove","params":"(finalWindowed<K>sessionKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/881edc5c6f2e867cc43ad4da498ba7697cdf81.src","preCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            inner.remove(new Windowed<>(key, sessionKey.window()));\n        } finally {\n            this.metrics.recordLatency(removeTime, startNs, time.nanoseconds());\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"150967994a69b2e26f5f68efb2a54a8522ae641d","commitMessage":"@@@KAFKA-6538: Changes to enhance  ByteStore exceptions thrown from RocksDBStore with more human readable info (#5103)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-06-07 11:42:41","modifiedFileCount":"4","status":"M","submitter":"Jagadesh Adireddi"},{"authorTime":"2018-06-07 11:42:41","codes":[{"authorDate":"2018-08-04 04:19:46","commitOrder":4,"curCode":"    public void put(final Windowed<K> sessionKey, final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            this.inner.put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key(), aggregate);\n            throw new ProcessorStateException(message, e);\n        } finally {\n            this.metrics.recordLatency(this.putTime, startNs, time.nanoseconds());\n        }\n    }\n","date":"2018-08-04 04:19:46","endLine":153,"groupId":"19196","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(finalWindowed<K>sessionKey@finalVaggregate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b2/85b652987d263a8e819f20a16f23186d1412cc.src","preCode":"    public void put(final Windowed<K> sessionKey, final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            this.inner.put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key(), aggregate);\n            throw new ProcessorStateException(message, e);\n        } finally {\n            this.metrics.recordLatency(this.putTime, startNs, time.nanoseconds());\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2018-06-07 11:42:41","commitOrder":4,"curCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            inner.remove(new Windowed<>(key, sessionKey.window()));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key());\n            throw new ProcessorStateException(message, e);\n        } finally {\n            this.metrics.recordLatency(removeTime, startNs, time.nanoseconds());\n        }\n    }\n","date":"2018-06-07 11:42:41","endLine":138,"groupId":"19199","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"remove","params":"(finalWindowed<K>sessionKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/881edc5c6f2e867cc43ad4da498ba7697cdf81.src","preCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            inner.remove(new Windowed<>(key, sessionKey.window()));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key());\n            throw new ProcessorStateException(message, e);\n        } finally {\n            this.metrics.recordLatency(removeTime, startNs, time.nanoseconds());\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"N"}],"commitId":"3637b2c374d48e99e0a7be37605d3c79f2661007","commitMessage":"@@@MINOR: Require final variables in Streams (#5452)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-08-04 04:19:46","modifiedFileCount":"212","status":"M","submitter":"John Roesler"},{"authorTime":"2019-01-10 01:03:16","codes":[{"authorDate":"2019-01-10 01:03:16","commitOrder":5,"curCode":"    public void put(final Windowed<K> sessionKey,\n                    final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            inner.put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key(), aggregate);\n            throw new ProcessorStateException(message, e);\n        } finally {\n            metrics.recordLatency(putTime, startNs, time.nanoseconds());\n        }\n    }\n","date":"2019-01-10 01:03:16","endLine":175,"groupId":"12131","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(finalWindowed<K>sessionKey@finalVaggregate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/31/a039b644f614df5154f5460113369eeaab58df.src","preCode":"    public void put(final Windowed<K> sessionKey, final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            this.inner.put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key(), aggregate);\n            throw new ProcessorStateException(message, e);\n        } finally {\n            this.metrics.recordLatency(this.putTime, startNs, time.nanoseconds());\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2019-01-10 01:03:16","commitOrder":5,"curCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            inner.remove(new Windowed<>(key, sessionKey.window()));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key());\n            throw new ProcessorStateException(message, e);\n        } finally {\n            metrics.recordLatency(removeTime, startNs, time.nanoseconds());\n        }\n    }\n","date":"2019-01-10 01:03:16","endLine":159,"groupId":"19199","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"remove","params":"(finalWindowed<K>sessionKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/31/a039b644f614df5154f5460113369eeaab58df.src","preCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            inner.remove(new Windowed<>(key, sessionKey.window()));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key());\n            throw new ProcessorStateException(message, e);\n        } finally {\n            this.metrics.recordLatency(removeTime, startNs, time.nanoseconds());\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"}],"commitId":"1c7bf4e4976e2b58826f68f1abe8ffc9fd41692c","commitMessage":"@@@MINOR: code cleanup (#6053)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Ryanne Dolan <ryannedolan@gmail.com>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-01-10 01:03:16","modifiedFileCount":"29","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-02-15 00:38:01","codes":[{"authorDate":"2019-02-15 00:38:01","commitOrder":6,"curCode":"    public void put(final Windowed<K> sessionKey,\n                    final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            wrapped().put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key(), aggregate);\n            throw new ProcessorStateException(message, e);\n        } finally {\n            metrics.recordLatency(putTime, startNs, time.nanoseconds());\n        }\n    }\n","date":"2019-02-15 00:38:01","endLine":173,"groupId":"8235","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(finalWindowed<K>sessionKey@finalVaggregate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0d/b67c3bcc72ad7d435c3323e0adf4ec3c9556a2.src","preCode":"    public void put(final Windowed<K> sessionKey,\n                    final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            inner.put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key(), aggregate);\n            throw new ProcessorStateException(message, e);\n        } finally {\n            metrics.recordLatency(putTime, startNs, time.nanoseconds());\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2019-02-15 00:38:01","commitOrder":6,"curCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            wrapped().remove(new Windowed<>(key, sessionKey.window()));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key());\n            throw new ProcessorStateException(message, e);\n        } finally {\n            metrics.recordLatency(removeTime, startNs, time.nanoseconds());\n        }\n    }\n","date":"2019-02-15 00:38:01","endLine":157,"groupId":"13874","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"remove","params":"(finalWindowed<K>sessionKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0d/b67c3bcc72ad7d435c3323e0adf4ec3c9556a2.src","preCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            inner.remove(new Windowed<>(key, sessionKey.window()));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key());\n            throw new ProcessorStateException(message, e);\n        } finally {\n            metrics.recordLatency(removeTime, startNs, time.nanoseconds());\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"01f0f0af28ea05921868171c88448e299766e773","commitMessage":"@@@KAFKA-7916: Unify store wrapping code for clarity (#6255)\n\nRefactor internal store wrapping for improved maintainability.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-02-15 00:38:01","modifiedFileCount":"27","status":"M","submitter":"John Roesler"},{"authorTime":"2019-10-31 00:24:59","codes":[{"authorDate":"2019-10-31 00:24:59","commitOrder":7,"curCode":"    public void put(final Windowed<K> sessionKey,\n                    final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        try {\n            maybeMeasureLatency(\n                () -> {\n                    final Bytes key = keyBytes(sessionKey.key());\n                    wrapped().put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n                },\n                time,\n                putSensor\n            );\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key(), aggregate);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2019-10-31 00:24:59","endLine":126,"groupId":"19494","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(finalWindowed<K>sessionKey@finalVaggregate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/17/8704fb5108376a23a2365a7d745e397a16f718.src","preCode":"    public void put(final Windowed<K> sessionKey,\n                    final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            wrapped().put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key(), aggregate);\n            throw new ProcessorStateException(message, e);\n        } finally {\n            metrics.recordLatency(putTime, startNs, time.nanoseconds());\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2019-10-31 00:24:59","commitOrder":7,"curCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        try {\n            maybeMeasureLatency(\n                () -> {\n                    final Bytes key = keyBytes(sessionKey.key());\n                    wrapped().remove(new Windowed<>(key, sessionKey.window()));\n                },\n                time,\n                removeSensor\n            );\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key());\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2019-10-31 00:24:59","endLine":144,"groupId":"19494","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"remove","params":"(finalWindowed<K>sessionKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/17/8704fb5108376a23a2365a7d745e397a16f718.src","preCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        final long startNs = time.nanoseconds();\n        try {\n            final Bytes key = keyBytes(sessionKey.key());\n            wrapped().remove(new Windowed<>(key, sessionKey.window()));\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key());\n            throw new ProcessorStateException(message, e);\n        } finally {\n            metrics.recordLatency(removeTime, startNs, time.nanoseconds());\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"fc0f82372e1e456cbd43490b9eba957c4a0d3eb5","commitMessage":"@@@KAFKA-8980: Refactor state-store-level streams metrics (#7584)\n\nRefactors metrics according to KIP-444\nIntroduces StateStoreMetrics as a central provider for state store metrics\nAdds metric scope (a.k.a. store type) to the in-memory suppression buffer\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   Bill Bejeck <bbejeck@gmail.com>","date":"2019-10-31 00:24:59","modifiedFileCount":"26","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-10-31 00:24:59","codes":[{"authorDate":"2020-08-25 08:37:49","commitOrder":8,"curCode":"    public void put(final Windowed<K> sessionKey,\n                    final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        try {\n            maybeMeasureLatency(\n                () -> {\n                    final Bytes key = keyBytes(sessionKey.key());\n                    wrapped().put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n                },\n                time,\n                putSensor\n            );\n            maybeRecordE2ELatency();\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key(), aggregate);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2020-08-25 08:37:49","endLine":140,"groupId":"21287","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(finalWindowed<K>sessionKey@finalVaggregate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/22/559e86437edc7871ef0cb2e7c3ab1565c3ff1a.src","preCode":"    public void put(final Windowed<K> sessionKey,\n                    final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        try {\n            maybeMeasureLatency(\n                () -> {\n                    final Bytes key = keyBytes(sessionKey.key());\n                    wrapped().put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n                },\n                time,\n                putSensor\n            );\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key(), aggregate);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2019-10-31 00:24:59","commitOrder":8,"curCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        try {\n            maybeMeasureLatency(\n                () -> {\n                    final Bytes key = keyBytes(sessionKey.key());\n                    wrapped().remove(new Windowed<>(key, sessionKey.window()));\n                },\n                time,\n                removeSensor\n            );\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key());\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2019-10-31 00:24:59","endLine":144,"groupId":"19494","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"remove","params":"(finalWindowed<K>sessionKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/17/8704fb5108376a23a2365a7d745e397a16f718.src","preCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        try {\n            maybeMeasureLatency(\n                () -> {\n                    final Bytes key = keyBytes(sessionKey.key());\n                    wrapped().remove(new Windowed<>(key, sessionKey.window()));\n                },\n                time,\n                removeSensor\n            );\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key());\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"}],"commitId":"22bcd9fac3c988c15862d0b6c01930814b676253","commitMessage":"@@@KAFKA-10054: KIP-613.  add TRACE-level e2e latency metrics (#9094)\n\nAdds avg.  min.  and max e2e latency metrics at the new TRACE level. Also adds the missing avg task-level metric at the INFO level.\n\nI think where we left off with the KIP.  the TRACE-level metrics were still defined to be \"stateful-processor-level\". I realized this doesn't really make sense and would be pretty much impossible to define given the DFS processing approach of Streams.  and felt that store-level metrics made more sense to begin with. I haven't updated the KIP yet so I could get some initial feedback on this\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-08-25 08:37:49","modifiedFileCount":"18","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2021-04-30 10:47:26","codes":[{"authorDate":"2021-04-30 10:47:26","commitOrder":9,"curCode":"    public void put(final Windowed<K> sessionKey,\n                    final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        Objects.requireNonNull(sessionKey.key(), \"sessionKey.key() can't be null\");\n        Objects.requireNonNull(sessionKey.window(), \"sessionKey.window() can't be null\");\n\n        try {\n            maybeMeasureLatency(\n                () -> {\n                    final Bytes key = keyBytes(sessionKey.key());\n                    wrapped().put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n                },\n                time,\n                putSensor\n            );\n            maybeRecordE2ELatency();\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key(), aggregate);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2021-04-30 10:47:26","endLine":179,"groupId":"102886","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"put","params":"(finalWindowed<K>sessionKey@finalVaggregate)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7a/31b170ea4e6d7c27d4cf943ec279567df29a86.src","preCode":"    public void put(final Windowed<K> sessionKey,\n                    final V aggregate) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        try {\n            maybeMeasureLatency(\n                () -> {\n                    final Bytes key = keyBytes(sessionKey.key());\n                    wrapped().put(new Windowed<>(key, sessionKey.window()), serdes.rawValue(aggregate));\n                },\n                time,\n                putSensor\n            );\n            maybeRecordE2ELatency();\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key(), aggregate);\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2021-04-30 10:47:26","commitOrder":9,"curCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        Objects.requireNonNull(sessionKey.key(), \"sessionKey.key() can't be null\");\n        Objects.requireNonNull(sessionKey.window(), \"sessionKey.window() can't be null\");\n\n        try {\n            maybeMeasureLatency(\n                () -> {\n                    final Bytes key = keyBytes(sessionKey.key());\n                    wrapped().remove(new Windowed<>(key, sessionKey.window()));\n                },\n                time,\n                removeSensor\n            );\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key());\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","date":"2021-04-30 10:47:26","endLine":200,"groupId":"102886","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"remove","params":"(finalWindowed<K>sessionKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7a/31b170ea4e6d7c27d4cf943ec279567df29a86.src","preCode":"    public void remove(final Windowed<K> sessionKey) {\n        Objects.requireNonNull(sessionKey, \"sessionKey can't be null\");\n        try {\n            maybeMeasureLatency(\n                () -> {\n                    final Bytes key = keyBytes(sessionKey.key());\n                    wrapped().remove(new Windowed<>(key, sessionKey.window()));\n                },\n                time,\n                removeSensor\n            );\n        } catch (final ProcessorStateException e) {\n            final String message = String.format(e.getMessage(), sessionKey.key());\n            throw new ProcessorStateException(message, e);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"}],"commitId":"e454becb33faac0851b7d145452992f183cbff76","commitMessage":"@@@KAFKA-12396: added null check for state stores key (#10548)\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2021-04-30 10:47:26","modifiedFileCount":"9","status":"M","submitter":"Valery Kokorev"}]
