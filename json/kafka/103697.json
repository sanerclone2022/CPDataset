[{"authorTime":"2019-04-16 06:56:36","codes":[{"authorDate":"2019-04-16 06:56:36","commitOrder":1,"curCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, 50, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.run(time.milliseconds());\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(0, Errors.NONE));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","date":"2019-04-16 06:56:36","endLine":2232,"groupId":"8722","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionalRequestsSentOnShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/64/36bccda1d8e1a1c591b5ad26161b8e46677df6.src","preCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, 50, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.run(time.milliseconds());\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(0, Errors.NONE));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2203,"status":"B"},{"authorDate":"2019-04-16 06:56:36","commitOrder":1,"curCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, 50, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.run(time.milliseconds());\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","date":"2019-04-16 06:56:36","endLine":2297,"groupId":"8722","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceShutdownWithIncompleteTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/64/36bccda1d8e1a1c591b5ad26161b8e46677df6.src","preCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, 50, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.run(time.milliseconds());\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2266,"status":"B"}],"commitId":"7bd81628d9f6c21649e615e73ed507520fd74fd9","commitMessage":"@@@KAFKA-6635; Producer close awaits pending transactions (#5971)\n\nCurrently close() only awaits completion of pending produce requests. If there is a transaction ongoing.  it may be dropped. For example.  if one thread is calling commitTransaction() and another calls close().  then the commit may never happen even if the caller is willing to wait for it (by using a long timeout). What's more.  the thread blocking in commitTransaction() will be stuck since the result will not be completed once the producer has shutdown. \n\nThis patch ensures that 1) completing transactions are awaited.  2) ongoing transactions are aborted.  and 3) pending callbacks are completed before close() returns.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-04-16 06:56:36","modifiedFileCount":"6","status":"B","submitter":"Viktor Somogyi"},{"authorTime":"2019-05-03 00:29:22","codes":[{"authorDate":"2019-05-03 00:29:22","commitOrder":2,"curCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, 50, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(0, Errors.NONE));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","date":"2019-05-03 00:29:22","endLine":2232,"groupId":"8722","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionalRequestsSentOnShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/4e31e2697c8a67156cb44d31f1fcbe66de018a.src","preCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, 50, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.run(time.milliseconds());\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(0, Errors.NONE));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2203,"status":"M"},{"authorDate":"2019-05-03 00:29:22","commitOrder":2,"curCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, 50, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","date":"2019-05-03 00:29:22","endLine":2297,"groupId":"8722","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceShutdownWithIncompleteTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/4e31e2697c8a67156cb44d31f1fcbe66de018a.src","preCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, 50, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.run(time.milliseconds());\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2266,"status":"M"}],"commitId":"c34330c5481803c91705cbfcc499021360ff7fdc","commitMessage":"@@@KAFKA-8248; Ensure time updated before sending transactional request (#6613)\n\nThis patch fixes a bug in the sending of transactional requests. We need to call `KafkaClient.send` with an updated current time. Failing to do so can result in an `IllegalStateExcepton` which leaves the producer effectively dead since the in-flight correlation id has been set.  but no request has been sent. To avoid the same problem in the future.  we update the in flight correlationId only after sending the request.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Apurva Mehta <apurva@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-03 00:29:22","modifiedFileCount":"7","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2019-07-19 06:07:42","codes":[{"authorDate":"2019-07-19 06:07:42","commitOrder":3,"curCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(0, Errors.NONE));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","date":"2019-07-19 06:07:42","endLine":2232,"groupId":"8825","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionalRequestsSentOnShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/4176d8e2235dd1a9c8affc2b3cd7c93a351f79.src","preCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, 50, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(0, Errors.NONE));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2203,"status":"M"},{"authorDate":"2019-07-19 06:07:42","commitOrder":3,"curCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","date":"2019-07-19 06:07:42","endLine":2297,"groupId":"8825","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceShutdownWithIncompleteTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/4176d8e2235dd1a9c8affc2b3cd7c93a351f79.src","preCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, 50, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2266,"status":"M"}],"commitId":"2e26a46358d97112b9b912a7c5c29a2d6fb517cf","commitMessage":"@@@KAFKA-8635; Skip client poll in Sender loop when no request is sent (#7085)\n\nThis patch changes maybeSendTransactionalRequest to handle both sending and polling transactional requests (and renames it to maybeSendAndPollTransactionalRequest).  and skips the call to poll if no request is actually sent. It also removes the inner loop inside maybeSendAndPollTransactionalRequest and relies on the main Sender loop for retries.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-07-19 06:07:42","modifiedFileCount":"2","status":"M","submitter":"Bob Barrett"},{"authorTime":"2019-08-02 05:36:12","codes":[{"authorDate":"2019-08-02 05:36:12","commitOrder":4,"curCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(0, Errors.NONE));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","date":"2019-08-02 05:36:12","endLine":2234,"groupId":"3780","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionalRequestsSentOnShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/56/308c1e38a09448816793ead3cf4f0454be3d75.src","preCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(0, Errors.NONE));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2204,"status":"M"},{"authorDate":"2019-08-02 05:36:12","commitOrder":4,"curCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","date":"2019-08-02 05:36:12","endLine":2301,"groupId":"3780","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceShutdownWithIncompleteTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/56/308c1e38a09448816793ead3cf4f0454be3d75.src","preCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2269,"status":"M"}],"commitId":"717c55be971df862c55f55d245b9997f1d6f998c","commitMessage":"@@@KAFKA-8601: Implement KIP-480: Sticky Partitioning for keyless records (#6997)\n\nImplement KIP-480.  which specifies that the default partitioner should use a \"sticky\" partitioning strategy for records that have a null key.\n\nReviewers: Colin P. McCabe <cmccabe@apache.org>.  Lucas Bradstreet <lucasbradstreet@gmail.com>.  Stanislav Kozlovski <stanislav_kozlovski@outlook.com>.  Jun Rao <junrao@gmail.com>.  Kamal Chandraprakash  <kamal.chandraprakash@gmail.com>","date":"2019-08-02 05:36:12","modifiedFileCount":"9","status":"M","submitter":"Justine Olshan"},{"authorTime":"2019-08-02 05:36:12","codes":[{"authorDate":"2020-01-10 09:08:16","commitOrder":5,"curCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(new EndTxnResponseData()\n                                                                         .setErrorCode(Errors.NONE.code())\n                                                                         .setThrottleTimeMs(0)));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","date":"2020-01-10 09:08:16","endLine":2214,"groupId":"3780","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionalRequestsSentOnShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/f71b747d66b016eb56165aae7c2950b61454be.src","preCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(0, Errors.NONE));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2182,"status":"M"},{"authorDate":"2019-08-02 05:36:12","commitOrder":5,"curCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","date":"2019-08-02 05:36:12","endLine":2301,"groupId":"3780","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceShutdownWithIncompleteTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/56/308c1e38a09448816793ead3cf4f0454be3d75.src","preCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2269,"status":"N"}],"commitId":"63576dde57109092c6103420fe60a1a983307cf8","commitMessage":"@@@KAFKA-8617: Use automated protocol for `EndTxn` API (#7029)\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2020-01-10 09:08:16","modifiedFileCount":"8","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-02-16 14:47:10","codes":[{"authorDate":"2020-02-16 14:47:10","commitOrder":6,"curCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100, apiVersions);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(new EndTxnResponseData()\n                                                                         .setErrorCode(Errors.NONE.code())\n                                                                         .setThrottleTimeMs(0)));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","date":"2020-02-16 14:47:10","endLine":2322,"groupId":"3780","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionalRequestsSentOnShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/127e8868c80d3e250e61708ba421d3a37f6b09.src","preCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(new EndTxnResponseData()\n                                                                         .setErrorCode(Errors.NONE.code())\n                                                                         .setThrottleTimeMs(0)));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2290,"status":"M"},{"authorDate":"2020-02-16 14:47:10","commitOrder":6,"curCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100, apiVersions);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","date":"2020-02-16 14:47:10","endLine":2391,"groupId":"3780","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceShutdownWithIncompleteTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/127e8868c80d3e250e61708ba421d3a37f6b09.src","preCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2359,"status":"M"}],"commitId":"937f1f741c026767b6b71ce0b0e63ae7ebe6e936","commitMessage":"@@@KAFKA-8805; Bump producer epoch on recoverable errors (#7389)\n\nThis change is the client-side part of KIP-360. It identifies cases where it is safe to abort a transaction.  bump the producer epoch.  and allow the application to continue without closing the producer. In these cases.  when KafkaProducer.abortTransaction() is called.  the producer sends an InitProducerId following the transaction abort.  which causes the producer epoch to be bumped. The application can then start a new transaction and continue processing.\n\nFor recoverable errors in the idempotent producer.  the epoch is bumped locally. In-flight requests for partitions with an error are rewritten to reflect the new epoch.  and in-flights of all other partitions are allowed to complete using the old epoch. \n\nReviewers: Boyang Chen <boyang@confluent.io>.  Jason Gustafson <jason@confluent.io>","date":"2020-02-16 14:47:10","modifiedFileCount":"8","status":"M","submitter":"Bob Barrett"},{"authorTime":"2020-04-03 12:48:37","codes":[{"authorDate":"2020-04-03 12:48:37","commitOrder":7,"curCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100, apiVersions, false);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(new EndTxnResponseData()\n                                                                         .setErrorCode(Errors.NONE.code())\n                                                                         .setThrottleTimeMs(0)));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","date":"2020-04-03 12:48:37","endLine":2322,"groupId":"3780","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionalRequestsSentOnShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/10/3d553e39808817287c9fc81a054f5bcb0520b3.src","preCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100, apiVersions);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(new EndTxnResponseData()\n                                                                         .setErrorCode(Errors.NONE.code())\n                                                                         .setThrottleTimeMs(0)));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2290,"status":"M"},{"authorDate":"2020-04-03 12:48:37","commitOrder":7,"curCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100, apiVersions, false);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","date":"2020-04-03 12:48:37","endLine":2391,"groupId":"3780","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceShutdownWithIncompleteTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/10/3d553e39808817287c9fc81a054f5bcb0520b3.src","preCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100, apiVersions);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2359,"status":"M"}],"commitId":"7f640f13b4d486477035c3edb28466734f053beb","commitMessage":"@@@KAFKA-9776: Downgrade TxnCommit API v3 when broker doesn't support (#8375)\n\nRevert the decision for the sendOffsetsToTransaction(groupMetadata) API to fail with old version of brokers for the sake of making the application easier to adapt between versions. This PR silently downgrade the TxnOffsetCommit API when the build version is small than 3.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-04-03 12:48:37","modifiedFileCount":"12","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2021-01-14 08:17:45","commitOrder":8,"curCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100, apiVersions, false);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(new EndTxnResponseData()\n                                                                         .setErrorCode(Errors.NONE.code())\n                                                                         .setThrottleTimeMs(0)));\n            sender.run();\n            assertTrue(endTxnMatcher.matched, \"Response didn't match in test\");\n        } finally {\n            m.close();\n        }\n    }\n","date":"2021-01-14 08:17:45","endLine":2386,"groupId":"3780","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionalRequestsSentOnShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/609739d4f116f052643a59cadce82512fd960d.src","preCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100, apiVersions, false);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(new EndTxnResponseData()\n                                                                         .setErrorCode(Errors.NONE.code())\n                                                                         .setThrottleTimeMs(0)));\n            sender.run();\n            assertTrue(\"Response didn't match in test\", endTxnMatcher.matched);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2354,"status":"M"},{"authorDate":"2021-01-14 08:17:45","commitOrder":8,"curCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100, apiVersions, false);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(KafkaException.class, commitResult::await,\n                \"The test expected to throw a KafkaException for forcefully closing the sender\");\n        } finally {\n            m.close();\n        }\n    }\n","date":"2021-01-14 08:17:45","endLine":2456,"groupId":"3780","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceShutdownWithIncompleteTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/609739d4f116f052643a59cadce82512fd960d.src","preCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100, apiVersions, false);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(\"The test expected to throw a KafkaException for forcefully closing the sender\",\n                    KafkaException.class, commitResult::await);\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2424,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"},{"authorTime":"2021-05-18 01:25:35","codes":[{"authorDate":"2021-05-18 01:25:35","commitOrder":9,"curCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100, apiVersions);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(new EndTxnResponseData()\n                                                                         .setErrorCode(Errors.NONE.code())\n                                                                         .setThrottleTimeMs(0)));\n            sender.run();\n            assertTrue(endTxnMatcher.matched, \"Response didn't match in test\");\n        } finally {\n            m.close();\n        }\n    }\n","date":"2021-05-18 01:25:35","endLine":2671,"groupId":"103697","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransactionalRequestsSentOnShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/26/041ccf4694d6638630d6b077e76dedaca24e1b.src","preCode":"    public void testTransactionalRequestsSentOnShutdown() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testTransactionalRequestsSentOnShutdown\", 6000, 100, apiVersions, false);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testTransactionalRequestsSentOnShutdown\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n            sender.initiateClose();\n            txnManager.beginCommit();\n            AssertEndTxnRequestMatcher endTxnMatcher = new AssertEndTxnRequestMatcher(TransactionResult.COMMIT);\n            client.prepareResponse(endTxnMatcher, new EndTxnResponse(new EndTxnResponseData()\n                                                                         .setErrorCode(Errors.NONE.code())\n                                                                         .setThrottleTimeMs(0)));\n            sender.run();\n            assertTrue(endTxnMatcher.matched, \"Response didn't match in test\");\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2639,"status":"M"},{"authorDate":"2021-05-18 01:25:35","commitOrder":9,"curCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100, apiVersions);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(KafkaException.class, commitResult::await,\n                \"The test expected to throw a KafkaException for forcefully closing the sender\");\n        } finally {\n            m.close();\n        }\n    }\n","date":"2021-05-18 01:25:35","endLine":2741,"groupId":"103697","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testForceShutdownWithIncompleteTransaction","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/26/041ccf4694d6638630d6b077e76dedaca24e1b.src","preCode":"    public void testForceShutdownWithIncompleteTransaction() {\n        \r\n        int maxRetries = 1;\n        Metrics m = new Metrics();\n        SenderMetricsRegistry senderMetrics = new SenderMetricsRegistry(m);\n        try {\n            TransactionManager txnManager = new TransactionManager(logContext, \"testForceShutdownWithIncompleteTransaction\", 6000, 100, apiVersions, false);\n            Sender sender = new Sender(logContext, client, metadata, this.accumulator, false, MAX_REQUEST_SIZE, ACKS_ALL,\n                    maxRetries, senderMetrics, time, REQUEST_TIMEOUT, RETRY_BACKOFF_MS, txnManager, apiVersions);\n\n            ProducerIdAndEpoch producerIdAndEpoch = new ProducerIdAndEpoch(123456L, (short) 0);\n            TopicPartition tp = new TopicPartition(\"testForceShutdownWithIncompleteTransaction\", 1);\n\n            setupWithTransactionState(txnManager);\n            doInitTransactions(txnManager, producerIdAndEpoch);\n\n            txnManager.beginTransaction();\n            txnManager.failIfNotReadyForSend();\n            txnManager.maybeAddPartitionToTransaction(tp);\n            client.prepareResponse(new AddPartitionsToTxnResponse(0, Collections.singletonMap(tp, Errors.NONE)));\n            sender.runOnce();\n\n            \r\n            TransactionalRequestResult commitResult = txnManager.beginCommit();\n\n            sender.forceClose();\n            sender.run();\n            assertThrows(KafkaException.class, commitResult::await,\n                \"The test expected to throw a KafkaException for forcefully closing the sender\");\n        } finally {\n            m.close();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/SenderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2709,"status":"M"}],"commitId":"cc6f4c49a9dc241b1b63ed7cf6ec982b05c541d4","commitMessage":"@@@KAFKA-12574: remove internal Producer config and auto downgrade logic  (#10675)\n\nMinor followup to #10573. Removes this internal Producer config which was only ever used to avoid a very minor amount of work to downgrade the consumer group metadata in the txn commit request in Kafka Streams\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Matthias J. Sax <mjsax@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2021-05-18 01:25:35","modifiedFileCount":"13","status":"M","submitter":"A. Sophie Blee-Goldman"}]
