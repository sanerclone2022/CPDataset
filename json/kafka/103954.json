[{"authorTime":"2020-09-24 21:53:59","codes":[{"authorDate":"2020-09-24 21:53:59","commitOrder":7,"curCode":"    private void testGetOffsetsForTimesWithUnknownOffset() {\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = TestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadataUpdate);\n\n        ListOffsetResponseData data = new ListOffsetResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetResponse.UNKNOWN_TIMESTAMP)\n                                .setOffset(ListOffsetResponse.UNKNOWN_OFFSET)))));\n\n        client.prepareResponseFrom(new ListOffsetResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","date":"2020-09-24 21:53:59","endLine":3616,"groupId":"11324","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWithUnknownOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/bdcf63590e9c134009f7671bbe4a3c00800f55.src","preCode":"    private void testGetOffsetsForTimesWithUnknownOffset() {\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = TestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadataUpdate);\n\n        ListOffsetResponseData data = new ListOffsetResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetResponse.UNKNOWN_TIMESTAMP)\n                                .setOffset(ListOffsetResponse.UNKNOWN_OFFSET)))));\n\n        client.prepareResponseFrom(new ListOffsetResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3590,"status":"MB"},{"authorDate":"2020-09-24 21:53:59","commitOrder":7,"curCode":"    public void testGetOffsetsForTimesWithUnknownOffsetV0() {\n        buildFetcher();\n        \r\n        assertTrue(fetcher.offsetsForTimes(new HashMap<>(), time.timer(100L)).isEmpty());\n        \r\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = TestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadataUpdate);\n        \r\n        Node node = metadata.fetch().nodes().get(0);\n        apiVersions.update(node.idString(), NodeApiVersions.create(\n            ApiKeys.LIST_OFFSETS.id, (short) 0, (short) 0));\n\n        ListOffsetResponseData data = new ListOffsetResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetResponse.UNKNOWN_TIMESTAMP)\n                                .setOldStyleOffsets(Collections.emptyList())))));\n\n        client.prepareResponseFrom(new ListOffsetResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","date":"2020-09-24 21:53:59","endLine":3653,"groupId":"11323","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWithUnknownOffsetV0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/bdcf63590e9c134009f7671bbe4a3c00800f55.src","preCode":"    public void testGetOffsetsForTimesWithUnknownOffsetV0() {\n        buildFetcher();\n        \r\n        assertTrue(fetcher.offsetsForTimes(new HashMap<>(), time.timer(100L)).isEmpty());\n        \r\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = TestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadataUpdate);\n        \r\n        Node node = metadata.fetch().nodes().get(0);\n        apiVersions.update(node.idString(), NodeApiVersions.create(\n            ApiKeys.LIST_OFFSETS.id, (short) 0, (short) 0));\n\n        ListOffsetResponseData data = new ListOffsetResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetResponse.UNKNOWN_TIMESTAMP)\n                                .setOldStyleOffsets(Collections.emptyList())))));\n\n        client.prepareResponseFrom(new ListOffsetResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3619,"status":"B"}],"commitId":"785de1e3d459b26c3ce383986827719388be7c6f","commitMessage":"@@@KAFKA-9627: Replace ListOffset request/response with automated protocol (#8295)\n\n\nReviewers: Boyang Chen <reluctanthero104@gmail.com>.  David Jacot <djacot@confluent.io>\n\nCo-authored-by: Mickael Maison <mickael.maison@gmail.com>\nCo-authored-by: Edoardo Comar <ecomar@uk.ibm.com>","date":"2020-09-24 21:53:59","modifiedFileCount":"12","status":"M","submitter":"Mickael Maison"},{"authorTime":"2020-12-10 03:15:58","codes":[{"authorDate":"2020-12-10 03:15:58","commitOrder":8,"curCode":"    private void testGetOffsetsForTimesWithUnknownOffset() {\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = RequestTestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadataUpdate);\n\n        ListOffsetResponseData data = new ListOffsetResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetResponse.UNKNOWN_TIMESTAMP)\n                                .setOffset(ListOffsetResponse.UNKNOWN_OFFSET)))));\n\n        client.prepareResponseFrom(new ListOffsetResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","date":"2020-12-10 03:15:58","endLine":3619,"groupId":"11324","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWithUnknownOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/d65791927f683551833942cc928cadaad2f6b7.src","preCode":"    private void testGetOffsetsForTimesWithUnknownOffset() {\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = TestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadataUpdate);\n\n        ListOffsetResponseData data = new ListOffsetResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetResponse.UNKNOWN_TIMESTAMP)\n                                .setOffset(ListOffsetResponse.UNKNOWN_OFFSET)))));\n\n        client.prepareResponseFrom(new ListOffsetResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3593,"status":"M"},{"authorDate":"2020-12-10 03:15:58","commitOrder":8,"curCode":"    public void testGetOffsetsForTimesWithUnknownOffsetV0() {\n        buildFetcher();\n        \r\n        assertTrue(fetcher.offsetsForTimes(new HashMap<>(), time.timer(100L)).isEmpty());\n        \r\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = RequestTestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadataUpdate);\n        \r\n        Node node = metadata.fetch().nodes().get(0);\n        apiVersions.update(node.idString(), NodeApiVersions.create(\n            ApiKeys.LIST_OFFSETS.id, (short) 0, (short) 0));\n\n        ListOffsetResponseData data = new ListOffsetResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetResponse.UNKNOWN_TIMESTAMP)\n                                .setOldStyleOffsets(Collections.emptyList())))));\n\n        client.prepareResponseFrom(new ListOffsetResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","date":"2020-12-10 03:15:58","endLine":3656,"groupId":"11323","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWithUnknownOffsetV0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/d65791927f683551833942cc928cadaad2f6b7.src","preCode":"    public void testGetOffsetsForTimesWithUnknownOffsetV0() {\n        buildFetcher();\n        \r\n        assertTrue(fetcher.offsetsForTimes(new HashMap<>(), time.timer(100L)).isEmpty());\n        \r\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = TestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadataUpdate);\n        \r\n        Node node = metadata.fetch().nodes().get(0);\n        apiVersions.update(node.idString(), NodeApiVersions.create(\n            ApiKeys.LIST_OFFSETS.id, (short) 0, (short) 0));\n\n        ListOffsetResponseData data = new ListOffsetResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetResponse.UNKNOWN_TIMESTAMP)\n                                .setOldStyleOffsets(Collections.emptyList())))));\n\n        client.prepareResponseFrom(new ListOffsetResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3622,"status":"M"}],"commitId":"1f98112e993bc4ae098936b1b0661fdb2c4b1880","commitMessage":"@@@MINOR: Remove connection id from Send and consolidate request/message utils (#9714)\n\nConnection id is now only present in `NetworkSend`.  which is now\nthe class used by `Selector`/`NetworkClient`/`KafkaChannel` (which\nworks well since `NetworkReceive` is the class used for\nreceived data).\n\nThe previous `NetworkSend` was also responsible for adding a size\nprefix. This logic is already present in `SendBuilder`.  but for the\nminority of cases where `SendBuilder` is not used (including\na number of tests).  we now have `ByteBufferSend.sizePrefixed()`.\n\nWith regards to the request/message utilities:\n* Renamed `toByteBuffer`/`toBytes` in `MessageUtil` to\n`toVersionPrefixedByteBuffer`/`toVersionPrefixedBytes` for clarity.\n* Introduced new `MessageUtil.toByteBuffer` that does not include\nthe version as the prefix.\n* Renamed `serializeBody` in `AbstractRequest/Response` to\n`serialize` for symmetry with `parse`.\n* Introduced `RequestTestUtils` and moved relevant methods from\n`TestUtils`.\n* Moved `serializeWithHeader` methods that were only used in\ntests to `RequestTestUtils`.\n* Deleted `MessageTestUtil`.\n\nFinally.  a couple of changes to simplify coding patterns:\n* Added `flip()` and `buffer()` to `ByteBufferAccessor`.\n* Added `MessageSizeAccumulator.sizeExcludingZeroCopy`.\n* Used lambdas instead of `TestCondition`.\n* Used `Arrays.copyOf` instead of `System.arraycopy` in `MessageUtil`.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2020-12-10 03:15:58","modifiedFileCount":"80","status":"M","submitter":"Ismael Juma"},{"authorTime":"2020-12-16 22:33:10","codes":[{"authorDate":"2020-12-16 22:33:10","commitOrder":9,"curCode":"    private void testGetOffsetsForTimesWithUnknownOffset() {\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = RequestTestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadataUpdate);\n\n        ListOffsetsResponseData data = new ListOffsetsResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetsTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetsPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetsResponse.UNKNOWN_TIMESTAMP)\n                                .setOffset(ListOffsetsResponse.UNKNOWN_OFFSET)))));\n\n        client.prepareResponseFrom(new ListOffsetsResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","date":"2020-12-16 22:33:10","endLine":3619,"groupId":"11324","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWithUnknownOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/f9e4cf87edb7a2517bbd01a2d09bd231100dc9.src","preCode":"    private void testGetOffsetsForTimesWithUnknownOffset() {\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = RequestTestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadataUpdate);\n\n        ListOffsetResponseData data = new ListOffsetResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetResponse.UNKNOWN_TIMESTAMP)\n                                .setOffset(ListOffsetResponse.UNKNOWN_OFFSET)))));\n\n        client.prepareResponseFrom(new ListOffsetResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3593,"status":"M"},{"authorDate":"2020-12-16 22:33:10","commitOrder":9,"curCode":"    public void testGetOffsetsForTimesWithUnknownOffsetV0() {\n        buildFetcher();\n        \r\n        assertTrue(fetcher.offsetsForTimes(new HashMap<>(), time.timer(100L)).isEmpty());\n        \r\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = RequestTestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadataUpdate);\n        \r\n        Node node = metadata.fetch().nodes().get(0);\n        apiVersions.update(node.idString(), NodeApiVersions.create(\n            ApiKeys.LIST_OFFSETS.id, (short) 0, (short) 0));\n\n        ListOffsetsResponseData data = new ListOffsetsResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetsTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetsPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetsResponse.UNKNOWN_TIMESTAMP)\n                                .setOldStyleOffsets(Collections.emptyList())))));\n\n        client.prepareResponseFrom(new ListOffsetsResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","date":"2020-12-16 22:33:10","endLine":3656,"groupId":"11323","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWithUnknownOffsetV0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/f9e4cf87edb7a2517bbd01a2d09bd231100dc9.src","preCode":"    public void testGetOffsetsForTimesWithUnknownOffsetV0() {\n        buildFetcher();\n        \r\n        assertTrue(fetcher.offsetsForTimes(new HashMap<>(), time.timer(100L)).isEmpty());\n        \r\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = RequestTestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadataUpdate);\n        \r\n        Node node = metadata.fetch().nodes().get(0);\n        apiVersions.update(node.idString(), NodeApiVersions.create(\n            ApiKeys.LIST_OFFSETS.id, (short) 0, (short) 0));\n\n        ListOffsetResponseData data = new ListOffsetResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetResponse.UNKNOWN_TIMESTAMP)\n                                .setOldStyleOffsets(Collections.emptyList())))));\n\n        client.prepareResponseFrom(new ListOffsetResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3622,"status":"M"}],"commitId":"782175dfbc4a6694ae9a3970cd92ebd20647bc7e","commitMessage":"@@@MINOR: Simplify ApiKeys by relying on ApiMessageType (#9748)\n\n* The naming for `ListOffsets` was inconsistent.  in some places it was `ListOffset` and in others\nit was `ListOffsets`. Picked the latter since it was used in metrics and the protocol documentation\nand made it consistent.\n* Removed unused methods in ApiKeys.\n* Deleted `CommonFields`.\n* Added `lowestSupportedVersion` and `highestSupportedVersion` to `ApiMessageType`\n* Removed tests in `MessageTest` that are no longer relevant.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2020-12-16 22:33:10","modifiedFileCount":"20","status":"M","submitter":"Ismael Juma"},{"authorTime":"2021-07-08 07:02:37","codes":[{"authorDate":"2021-07-08 07:02:37","commitOrder":10,"curCode":"    private void testGetOffsetsForTimesWithUnknownOffset() {\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = RequestTestUtils.metadataUpdateWithIds(1, singletonMap(topicName, 1), topicIds);\n        client.updateMetadata(initialMetadataUpdate);\n\n        ListOffsetsResponseData data = new ListOffsetsResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetsTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetsPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetsResponse.UNKNOWN_TIMESTAMP)\n                                .setOffset(ListOffsetsResponse.UNKNOWN_OFFSET)))));\n\n        client.prepareResponseFrom(new ListOffsetsResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","date":"2021-07-08 07:02:37","endLine":3769,"groupId":"103954","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWithUnknownOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/a8d4d0de616ad523f86ea20b0b0f6e6fc16cd5.src","preCode":"    private void testGetOffsetsForTimesWithUnknownOffset() {\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = RequestTestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadataUpdate);\n\n        ListOffsetsResponseData data = new ListOffsetsResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetsTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetsPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetsResponse.UNKNOWN_TIMESTAMP)\n                                .setOffset(ListOffsetsResponse.UNKNOWN_OFFSET)))));\n\n        client.prepareResponseFrom(new ListOffsetsResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3743,"status":"M"},{"authorDate":"2021-07-08 07:02:37","commitOrder":10,"curCode":"    public void testGetOffsetsForTimesWithUnknownOffsetV0() {\n        buildFetcher();\n        \r\n        assertTrue(fetcher.offsetsForTimes(new HashMap<>(), time.timer(100L)).isEmpty());\n        \r\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = RequestTestUtils.metadataUpdateWithIds(1, singletonMap(topicName, 1), topicIds);\n        client.updateMetadata(initialMetadataUpdate);\n        \r\n        Node node = metadata.fetch().nodes().get(0);\n        apiVersions.update(node.idString(), NodeApiVersions.create(\n            ApiKeys.LIST_OFFSETS.id, (short) 0, (short) 0));\n\n        ListOffsetsResponseData data = new ListOffsetsResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetsTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetsPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetsResponse.UNKNOWN_TIMESTAMP)\n                                .setOldStyleOffsets(Collections.emptyList())))));\n\n        client.prepareResponseFrom(new ListOffsetsResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","date":"2021-07-08 07:02:37","endLine":3806,"groupId":"103954","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWithUnknownOffsetV0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/a8d4d0de616ad523f86ea20b0b0f6e6fc16cd5.src","preCode":"    public void testGetOffsetsForTimesWithUnknownOffsetV0() {\n        buildFetcher();\n        \r\n        assertTrue(fetcher.offsetsForTimes(new HashMap<>(), time.timer(100L)).isEmpty());\n        \r\n        client.reset();\n        \r\n        MetadataResponse initialMetadataUpdate = RequestTestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadataUpdate);\n        \r\n        Node node = metadata.fetch().nodes().get(0);\n        apiVersions.update(node.idString(), NodeApiVersions.create(\n            ApiKeys.LIST_OFFSETS.id, (short) 0, (short) 0));\n\n        ListOffsetsResponseData data = new ListOffsetsResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(Collections.singletonList(new ListOffsetsTopicResponse()\n                        .setName(tp0.topic())\n                        .setPartitions(Collections.singletonList(new ListOffsetsPartitionResponse()\n                                .setPartitionIndex(tp0.partition())\n                                .setErrorCode(Errors.NONE.code())\n                                .setTimestamp(ListOffsetsResponse.UNKNOWN_TIMESTAMP)\n                                .setOldStyleOffsets(Collections.emptyList())))));\n\n        client.prepareResponseFrom(new ListOffsetsResponse(data),\n                metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, 0L);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n                fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertTrue(offsetAndTimestampMap.containsKey(tp0));\n        assertNull(offsetAndTimestampMap.get(tp0));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3772,"status":"M"}],"commitId":"2b8aff58b575c199ee8372e5689420c9d77357a5","commitMessage":"@@@KAFKA-10580: Add topic ID support to Fetch request (#9944)\n\nUpdated FetchRequest and FetchResponse to use topic IDs rather than topic names.\nSome of the complicated code is found in FetchSession and FetchSessionHandler.\nWe need to be able to store topic IDs and maintain a cache on the broker for IDs that may not have been resolved. On incremental fetch requests.  we will try to resolve them or remove them if in toForget.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>.  Chia-Ping Tsai <chia7712@gmail.com>.  Jun Rao <junrao@gmail.com>","date":"2021-07-08 07:02:37","modifiedFileCount":"23","status":"M","submitter":"Justine Olshan"}]
