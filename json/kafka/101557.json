[{"authorTime":"2017-05-04 07:15:54","codes":[{"authorDate":"2017-05-04 07:15:54","commitOrder":4,"curCode":"    public void shouldAggregateSessionWindows() throws Exception {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer(), \"session-store\");\n        table.foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","date":"2017-05-04 07:15:54","endLine":230,"groupId":"5185","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAggregateSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f2/1c7d357583cb27d1f642299f3626198dd4c2e3.src","preCode":"    public void shouldAggregateSessionWindows() throws Exception {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer(), \"session-store\");\n        table.foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"MB"},{"authorDate":"2017-05-04 07:15:54","commitOrder":4,"curCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() throws Exception {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer());\n        table.foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertNull(table.queryableStoreName());\n    }\n","date":"2017-05-04 07:15:54","endLine":260,"groupId":"5185","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAggregateSessionWindowsWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f2/1c7d357583cb27d1f642299f3626198dd4c2e3.src","preCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() throws Exception {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer());\n        table.foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertNull(table.queryableStoreName());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"B"}],"commitId":"ec9e4eafa406fec897713310bafdedf6bbb3c0c5","commitMessage":"@@@KAFKA-5045: Clarify on KTable APIs for queryable stores\n\nThis is the implementation of KIP-114: KTable state stores and improved semantics:\n- Allow for decoupling between querying and materialisation\n- consistent APIs.  overloads with queryableName and without\n- depreciated several KTable calls\n- new unit and integration tests\n\nIn this implementation.  state stores are materialized if the user desires them to be queryable. In subsequent versions we can offer a second option.  to have a view-like state store. The tradeoff then would be between storage space (materialize) and re-computation (view). That tradeoff can be exploited by later query optimizers.\n\nAuthor: Eno Thereska <eno.thereska@gmail.com>\n\nReviewers: Damian Guy.  Matthias J. Sax.  Guozhang Wang\n\nCloses #2832 from enothereska/KAFKA-5045-ktable\n","date":"2017-05-04 07:15:54","modifiedFileCount":"26","status":"M","submitter":"Eno Thereska"},{"authorTime":"2017-08-01 06:28:59","codes":[{"authorDate":"2017-08-01 06:28:59","commitOrder":5,"curCode":"    public void shouldAggregateSessionWindows() throws Exception {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer(), \"session-store\");\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","date":"2017-08-01 06:28:59","endLine":230,"groupId":"5185","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAggregateSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/7147f02a7736ccef12552a47c9d72716f1bb61.src","preCode":"    public void shouldAggregateSessionWindows() throws Exception {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer(), \"session-store\");\n        table.foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2017-08-01 06:28:59","commitOrder":5,"curCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() throws Exception {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer());\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertNull(table.queryableStoreName());\n    }\n","date":"2017-08-01 06:28:59","endLine":260,"groupId":"5185","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAggregateSessionWindowsWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/7147f02a7736ccef12552a47c9d72716f1bb61.src","preCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() throws Exception {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer());\n        table.foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertNull(table.queryableStoreName());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"M"}],"commitId":"da2205578be3228ce40eb5e59f6bbcb0c8da0aba","commitMessage":"@@@KAFKA-5671: Add StreamsBuilder and Deprecate KStreamBuilder\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3602 from mjsax/kafka-5671-add-streamsbuilder\n","date":"2017-08-01 06:28:59","modifiedFileCount":"83","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2017-09-11 16:42:10","commitOrder":6,"curCode":"    public void shouldAggregateSessionWindows() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer(), \"session-store\");\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","date":"2017-09-11 16:42:10","endLine":229,"groupId":"5185","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAggregateSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bc/65e094d2ce3d84199bd2a63eba3c18e3197861.src","preCode":"    public void shouldAggregateSessionWindows() throws Exception {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer(), \"session-store\");\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":6,"curCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer());\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertNull(table.queryableStoreName());\n    }\n","date":"2017-09-11 16:42:10","endLine":259,"groupId":"5185","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAggregateSessionWindowsWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bc/65e094d2ce3d84199bd2a63eba3c18e3197861.src","preCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() throws Exception {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer());\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertNull(table.queryableStoreName());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"}],"commitId":"c5464edbb7a6821e0a91a3712b1fe2fd92a22d68","commitMessage":"@@@KAFKA-5531; throw concrete exceptions in streams tests\n\n1. Now instead of just generic `Exception` methods declare more concrete\nexceptions throwing or don't declare any throwing at all.  if not needed.\n2. `SimpleBenchmark.run()` throws `RuntimeException`\n3. `SimpleBenchmark.produce()` throws `IllegalArgumentException`\n4. Expect `ProcessorStateException` in\n`StandbyTaskTest.testUpdateNonPersistentStore()`\n\n/cc enothereska\n\nAuthor: Evgeny Veretennikov <evg.veretennikov@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>\n\nCloses #3485 from evis/5531-throw-concrete-exceptions\n","date":"2017-09-11 16:42:10","modifiedFileCount":"106","status":"M","submitter":"Evgeny Veretennikov"},{"authorTime":"2017-09-21 16:10:17","codes":[{"authorDate":"2017-09-11 16:42:10","commitOrder":7,"curCode":"    public void shouldAggregateSessionWindows() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer(), \"session-store\");\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","date":"2017-09-11 16:42:10","endLine":229,"groupId":"5185","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAggregateSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bc/65e094d2ce3d84199bd2a63eba3c18e3197861.src","preCode":"    public void shouldAggregateSessionWindows() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer(), \"session-store\");\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":202,"status":"N"},{"authorDate":"2017-09-21 16:10:17","commitOrder":7,"curCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer());\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n    }\n","date":"2017-09-21 16:10:17","endLine":260,"groupId":"5185","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAggregateSessionWindowsWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c8/e011e932531e8545d78b5214512902970af4d3.src","preCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer());\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertNull(table.queryableStoreName());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"}],"commitId":"a2da064cbf01558d0af64adc9d6fc9444cd744ec","commitMessage":"@@@KAFKA-5922: Add SessionWindowedKStream\n\nAdd `SessionWindowedKStream` and implementation. Deprecate existing `SessionWindow` `aggregate` methods on `KGroupedStream`\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3902 from dguy/kafka-5922\n","date":"2017-09-21 16:10:17","modifiedFileCount":"4","status":"M","submitter":"Damian Guy"},{"authorTime":"2017-10-11 06:13:19","codes":[{"authorDate":"2017-10-11 06:13:19","commitOrder":8,"curCode":"    public void shouldAggregateSessionWindows() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable<Windowed<String>, Integer> table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer(), \"session-store\");\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","date":"2017-10-11 06:13:19","endLine":248,"groupId":"5185","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAggregateSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c8/b7c1856b752203ea74672b313c501cfd2050f4.src","preCode":"    public void shouldAggregateSessionWindows() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer(), \"session-store\");\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2017-10-11 06:13:19","commitOrder":8,"curCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable<Windowed<String>, Integer> table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer());\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n    }\n","date":"2017-10-11 06:13:19","endLine":278,"groupId":"5185","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAggregateSessionWindowsWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c8/b7c1856b752203ea74672b313c501cfd2050f4.src","preCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer());\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"a5a9a901ef78373cda4b743323ef9f6e6da0dbf6","commitMessage":"@@@MINOR: KIP-182 follow up; add deprecation annotations to test classes\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #4051 from mjsax/minor-kip-182-follow-up\n","date":"2017-10-11 06:13:19","modifiedFileCount":"3","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-04-18 04:13:15","codes":[{"authorDate":"2018-04-18 04:13:15","commitOrder":9,"curCode":"    public void shouldAggregateSessionWindows() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer(), \"session-store\");\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","date":"2018-04-18 04:13:15","endLine":248,"groupId":"5185","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAggregateSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2b/87b309e27867c9bce089dbdefb5c9f3ebb8f1a.src","preCode":"    public void shouldAggregateSessionWindows() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable<Windowed<String>, Integer> table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer(), \"session-store\");\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2018-04-18 04:13:15","commitOrder":9,"curCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer());\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n    }\n","date":"2018-04-18 04:13:15","endLine":278,"groupId":"5185","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAggregateSessionWindowsWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2b/87b309e27867c9bce089dbdefb5c9f3ebb8f1a.src","preCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        KTable<Windowed<String>, Integer> table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer());\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"ac9c3ed0b43ee848e6e555a01c55ea2eee78540a","commitMessage":"@@@KAFKA-6376: preliminary cleanup (#4872)\n\nGeneral cleanup of Streams code.  mostly resolving compiler warnings and re-formatting.\n\nThe regular testing suite should be sufficient.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-04-18 04:13:15","modifiedFileCount":"57","status":"M","submitter":"John Roesler"},{"authorTime":"2018-05-08 08:34:34","codes":[{"authorDate":"2018-05-08 08:34:34","commitOrder":10,"curCode":"    public void shouldAggregateSessionWindows() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream.windowedBy(SessionWindows.with(30)).aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, Materialized.<String, Integer, SessionStore<Bytes, byte[]>>as(\"session-store\").withValueSerde(Serdes.Integer()));\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","date":"2018-05-08 08:34:34","endLine":189,"groupId":"15627","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAggregateSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/66/ed49fea511a306a76599e174c66754d3e6e11d.src","preCode":"    public void shouldAggregateSessionWindows() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer(), \"session-store\");\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2018-05-08 08:34:34","commitOrder":10,"curCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream.windowedBy(SessionWindows.with(30)).aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, Materialized.<String, Integer, SessionStore<Bytes, byte[]>>with(null, Serdes.Integer()));\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n    }\n","date":"2018-05-08 08:34:34","endLine":218,"groupId":"15627","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAggregateSessionWindowsWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/66/ed49fea511a306a76599e174c66754d3e6e11d.src","preCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream.aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, SessionWindows.with(30), Serdes.Integer());\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"}],"commitId":"2b5a59406622affa1e333e073546f075f59b4ac9","commitMessage":"@@@KAFKA-6813: Remove deprecated APIs in KIP-182.  Part I (#4919)\n\nI'm breaking KAFKA-6813 into a couple of \"smaller\" PRs and this is the first one. It focused on:\n\nRemove deprecated APIs in KStream.  KTable.  KGroupedStream.  KGroupedTable.  SessionWindowedKStream.  TimeWindowedKStream.\n\nAlso found a couple of overlooked bugs while working on them:\n\n2.a) In KTable.filter / mapValues without the additional parameter indicating the materialized stores.  originally we will not materialize the store. After KIP-182 we mistakenly diverge the semantics: for KTable.mapValues it is still the case.  for KTable.filter we will always materialize.\n\n2.b) In XXStream/Table.reduce/count.  we used to try to reuse the serdes since their types are pre-known (for reduce it is the same types for both key / value.  for count it is the same types for key.  and Long for value). This was somehow lost in the past refactoring.\n\n2.c) We are enforcing to cast a Serde<V> to Serde<VR> for XXStream / Table.aggregate.  for which the returned value type is NOT known.  such the enforced casting should not be applied and we should require users to provide us the value serde if they believe the default ones are not applicable.\n\n2.d) Whenever we are creating a new MaterializedInternal we are effectively incrementing the suffix index for the store / processor-node names. However in some places this MaterializedInternal is only used for validation.  so the resulted processor-node / store suffix is not monotonic.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2018-05-08 08:34:34","modifiedFileCount":"33","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-10-05 04:51:39","codes":[{"authorDate":"2018-10-05 04:51:39","commitOrder":11,"curCode":"    public void shouldAggregateSessionWindows() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream.windowedBy(SessionWindows.with(ofMillis(30))).aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, Materialized.<String, Integer, SessionStore<Bytes, byte[]>>as(\"session-store\").withValueSerde(Serdes.Integer()));\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","date":"2018-10-05 04:51:39","endLine":190,"groupId":"15627","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAggregateSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/f36aa8bc580378665b73a3ead502ed6ec8626f.src","preCode":"    public void shouldAggregateSessionWindows() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream.windowedBy(SessionWindows.with(30)).aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, Materialized.<String, Integer, SessionStore<Bytes, byte[]>>as(\"session-store\").withValueSerde(Serdes.Integer()));\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2018-10-05 04:51:39","commitOrder":11,"curCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream.windowedBy(SessionWindows.with(ofMillis(30))).aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, Materialized.<String, Integer, SessionStore<Bytes, byte[]>>with(null, Serdes.Integer()));\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n    }\n","date":"2018-10-05 04:51:39","endLine":219,"groupId":"15627","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAggregateSessionWindowsWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/f36aa8bc580378665b73a3ead502ed6ec8626f.src","preCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream.windowedBy(SessionWindows.with(30)).aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, Materialized.<String, Integer, SessionStore<Bytes, byte[]>>with(null, Serdes.Integer()));\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"ca641b3e2e48c14ff308181c775775408f5f35f7","commitMessage":"@@@KAFKA-7277: Migrate Streams API to Duration instead of longMs times (#5682)\n\nReviewers: Johne Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-10-05 04:51:39","modifiedFileCount":"97","status":"M","submitter":"Nikolay"},{"authorTime":"2019-01-09 05:32:53","codes":[{"authorDate":"2019-01-09 05:32:53","commitOrder":12,"curCode":"    public void shouldAggregateSessionWindows() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream\n            .windowedBy(SessionWindows.with(ofMillis(30)))\n            .aggregate(\n                () -> 0,\n                (aggKey, value, aggregate) -> aggregate + 1,\n                (aggKey, aggOne, aggTwo) -> aggOne + aggTwo,\n                Materialized\n                    .<String, Integer, SessionStore<Bytes, byte[]>>as(\"session-store\").\n                    withValueSerde(Serdes.Integer()));\n        table.toStream().foreach(results::put);\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","date":"2019-01-09 05:32:53","endLine":186,"groupId":"12024","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAggregateSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9b/dea13dfeb6e750c35b9dc14b0bb5cf20b760ef.src","preCode":"    public void shouldAggregateSessionWindows() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream.windowedBy(SessionWindows.with(ofMillis(30))).aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, Materialized.<String, Integer, SessionStore<Bytes, byte[]>>as(\"session-store\").withValueSerde(Serdes.Integer()));\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2019-01-09 05:32:53","commitOrder":12,"curCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream\n            .windowedBy(SessionWindows.with(ofMillis(30)))\n            .aggregate(\n                () -> 0,\n                (aggKey, value, aggregate) -> aggregate + 1,\n                (aggKey, aggOne, aggTwo) -> aggOne + aggTwo,\n                Materialized.with(null, Serdes.Integer()));\n        table.toStream().foreach(results::put);\n\n        doAggregateSessionWindows(results);\n    }\n","date":"2019-01-09 05:32:53","endLine":201,"groupId":"12024","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAggregateSessionWindowsWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9b/dea13dfeb6e750c35b9dc14b0bb5cf20b760ef.src","preCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream.windowedBy(SessionWindows.with(ofMillis(30))).aggregate(new Initializer<Integer>() {\n            @Override\n            public Integer apply() {\n                return 0;\n            }\n        }, new Aggregator<String, String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final String value, final Integer aggregate) {\n                return aggregate + 1;\n            }\n        }, new Merger<String, Integer>() {\n            @Override\n            public Integer apply(final String aggKey, final Integer aggOne, final Integer aggTwo) {\n                return aggOne + aggTwo;\n            }\n        }, Materialized.<String, Integer, SessionStore<Bytes, byte[]>>with(null, Serdes.Integer()));\n        table.toStream().foreach(new ForeachAction<Windowed<String>, Integer>() {\n            @Override\n            public void apply(final Windowed<String> key, final Integer value) {\n                results.put(key, value);\n            }\n        });\n\n        doAggregateSessionWindows(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"3991d81f6c645bdf36c58e3d56b829ff92dbff3a","commitMessage":"@@@MINOR: code cleanup (#6056)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-01-09 05:32:53","modifiedFileCount":"19","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-05-13 06:31:44","codes":[{"authorDate":"2019-05-13 06:31:44","commitOrder":13,"curCode":"    public void shouldAggregateSessionWindows() {\n        final MockProcessorSupplier<Windowed<String>, Integer> supplier = new MockProcessorSupplier<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream\n            .windowedBy(SessionWindows.with(ofMillis(30)))\n            .aggregate(\n                () -> 0,\n                (aggKey, value, aggregate) -> aggregate + 1,\n                (aggKey, aggOne, aggTwo) -> aggOne + aggTwo,\n                Materialized\n                    .<String, Integer, SessionStore<Bytes, byte[]>>as(\"session-store\").\n                    withValueSerde(Serdes.Integer()));\n        table.toStream().process(supplier);\n\n        doAggregateSessionWindows(supplier);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","date":"2019-05-13 06:31:44","endLine":196,"groupId":"101557","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAggregateSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/d15665ff58b8621a15306b3e30124bed83f28c.src","preCode":"    public void shouldAggregateSessionWindows() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream\n            .windowedBy(SessionWindows.with(ofMillis(30)))\n            .aggregate(\n                () -> 0,\n                (aggKey, value, aggregate) -> aggregate + 1,\n                (aggKey, aggOne, aggTwo) -> aggOne + aggTwo,\n                Materialized\n                    .<String, Integer, SessionStore<Bytes, byte[]>>as(\"session-store\").\n                    withValueSerde(Serdes.Integer()));\n        table.toStream().foreach(results::put);\n\n        doAggregateSessionWindows(results);\n        assertEquals(table.queryableStoreName(), \"session-store\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"},{"authorDate":"2019-05-13 06:31:44","commitOrder":13,"curCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final MockProcessorSupplier<Windowed<String>, Integer> supplier = new MockProcessorSupplier<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream\n            .windowedBy(SessionWindows.with(ofMillis(30)))\n            .aggregate(\n                () -> 0,\n                (aggKey, value, aggregate) -> aggregate + 1,\n                (aggKey, aggOne, aggTwo) -> aggOne + aggTwo,\n                Materialized.with(null, Serdes.Integer()));\n        table.toStream().process(supplier);\n\n        doAggregateSessionWindows(supplier);\n    }\n","date":"2019-05-13 06:31:44","endLine":211,"groupId":"101557","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAggregateSessionWindowsWithInternalStoreName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/d15665ff58b8621a15306b3e30124bed83f28c.src","preCode":"    public void shouldAggregateSessionWindowsWithInternalStoreName() {\n        final Map<Windowed<String>, Integer> results = new HashMap<>();\n        final KTable<Windowed<String>, Integer> table = groupedStream\n            .windowedBy(SessionWindows.with(ofMillis(30)))\n            .aggregate(\n                () -> 0,\n                (aggKey, value, aggregate) -> aggregate + 1,\n                (aggKey, aggOne, aggTwo) -> aggOne + aggTwo,\n                Materialized.with(null, Serdes.Integer()));\n        table.toStream().foreach(results::put);\n\n        doAggregateSessionWindows(results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"8a237f599afa539868a138b5a2534dbf884cb4ec","commitMessage":"@@@KAFKA-6455: Session Aggregation should use window-end-time as record timestamp (#6645)\n\nFor session-windows.  the result record should have the window-end timestamp as record timestamp.\n\nRebased to resolve merge conflicts. Removed unused classes TupleForwarder and ForwardingCacheFlushListener (replace with TimestampedTupleForwarder.  SessionTupleForwarder.  TimestampedCacheFlushListerner.  and SessionCacheFlushListener)\n\nReviewers: John Roesler <john@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-13 06:31:44","modifiedFileCount":"14","status":"M","submitter":"Matthias J. Sax"}]
