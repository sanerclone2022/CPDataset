[{"authorTime":"2020-03-06 04:20:46","codes":[{"authorDate":"2020-03-06 04:20:46","commitOrder":1,"curCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.transitToRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(asList(task00, task01)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2020-03-06 04:20:46","endLine":416,"groupId":"2593","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTasksCannotInitialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/b8782772af8b9404edb58526a6e4cb675cade7.src","preCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.transitToRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(asList(task00, task01)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"B"},{"authorDate":"2020-03-06 04:20:46","commitOrder":1,"curCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration() {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.transitToRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(singletonList(task00)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2020-03-06 04:20:46","endLine":453,"groupId":"14112","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTaskCannotCompleteRestoration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/b8782772af8b9404edb58526a6e4cb675cade7.src","preCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration() {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.transitToRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(singletonList(task00)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"B"}],"commitId":"78374a15492cfb6df49353bd166d8c45ac9abdb2","commitMessage":"@@@KAFKA-9615: Clean up task/producer create and close (#8213)\n\n* Consolidate task/producer management. Now.  exactly one component manages\n  the creation and destruction of Producers.  whether they are per-thread or per-task.\n* Add missing test coverage on TaskManagerTest\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Boyang Chen <boyang@confluent.io>","date":"2020-03-06 04:20:46","modifiedFileCount":"12","status":"B","submitter":"John Roesler"},{"authorTime":"2020-03-20 02:31:51","codes":[{"authorDate":"2020-03-20 02:31:51","commitOrder":2,"curCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.transitToRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(asList(task00, task01)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2020-03-20 02:31:51","endLine":668,"groupId":"2593","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTasksCannotInitialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d8/bca5e6f35cf58a939f83619f8f81ae6d586f6f.src","preCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.transitToRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(asList(task00, task01)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"M"},{"authorDate":"2020-03-20 02:31:51","commitOrder":2,"curCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration() {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.transitToRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(singletonList(task00)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2020-03-20 02:31:51","endLine":707,"groupId":"14112","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTaskCannotCompleteRestoration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d8/bca5e6f35cf58a939f83619f8f81ae6d586f6f.src","preCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration() {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.transitToRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(singletonList(task00)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":671,"status":"M"}],"commitId":"89cd2f2a0b21368297323437fd15ba6341e4707b","commitMessage":"@@@KAFKA-9441: Unify committing within TaskManager (#8218)\n\n - part of KIP-447\n - commit all tasks at once using non-eos (and eos-beta in follow up work)\n - unified commit logic into TaskManager\n - split existing methods of Task interface in pre/post parts\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-03-20 02:31:51","modifiedFileCount":"21","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-03-20 23:17:51","codes":[{"authorDate":"2020-03-20 23:17:51","commitOrder":3,"curCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(asList(task00, task01)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2020-03-20 23:17:51","endLine":668,"groupId":"2593","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTasksCannotInitialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ff/2f932dc20b53469c133dcac7f13841ca290f49.src","preCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.transitToRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(asList(task00, task01)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"M"},{"authorDate":"2020-03-20 23:17:51","commitOrder":3,"curCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration() {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(singletonList(task00)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2020-03-20 23:17:51","endLine":707,"groupId":"14112","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTaskCannotCompleteRestoration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ff/2f932dc20b53469c133dcac7f13841ca290f49.src","preCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration() {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.transitToRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(singletonList(task00)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":671,"status":"M"}],"commitId":"960b2162903dd7d07f20c162aa536b1e67b6477e","commitMessage":"@@@KAFKA-9734: Fix IllegalState in Streams transit to standby (#8319)\n\nConsolidate ChangelogReader state management inside of StreamThread to avoid having to reason about all execution paths in both StreamThread and TaskManager.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-03-20 23:17:51","modifiedFileCount":"7","status":"M","submitter":"John Roesler"},{"authorTime":"2020-10-20 02:07:56","codes":[{"authorDate":"2020-10-20 02:07:56","commitOrder":4,"curCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(asList(task00, task01)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2020-10-20 02:07:56","endLine":910,"groupId":"2593","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTasksCannotInitialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/5e148d7adfac58b89f87a980544d1d0dd371d2.src","preCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(asList(task00, task01)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":865,"status":"M"},{"authorDate":"2020-10-20 02:07:56","commitOrder":4,"curCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration() {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(singletonList(task00)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2020-10-20 02:07:56","endLine":949,"groupId":"14112","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTaskCannotCompleteRestoration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/5e148d7adfac58b89f87a980544d1d0dd371d2.src","preCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration() {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(singletonList(task00)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":913,"status":"M"}],"commitId":"aef6cd6e9995b42db2cefa7d715321d0edee5628","commitMessage":"@@@KAFKA-9274: Add timeout handling for state restore and StandbyTasks (#9368)\n\n* Part of KIP-572\n* If a TimeoutException happens during restore of active tasks.  or updating standby tasks.  we need to trigger task.timeout.ms timeout.\n\nReviewers: John Roesler <john@confluent.io>","date":"2020-10-20 02:07:56","modifiedFileCount":"15","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-01-22 00:52:34","codes":[{"authorDate":"2021-01-22 00:52:34","commitOrder":5,"curCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andStubReturn(asList(task00, task01));\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList());\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2021-01-22 00:52:34","endLine":973,"groupId":"2593","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTasksCannotInitialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/a1151510f36176da74cab4e2af690ba566a41a.src","preCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(asList(task00, task01)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":928,"status":"M"},{"authorDate":"2021-01-22 00:52:34","commitOrder":5,"curCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration() {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andStubReturn(singletonList(task00));\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList());\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2021-01-22 00:52:34","endLine":1012,"groupId":"6568","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTaskCannotCompleteRestoration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/a1151510f36176da74cab4e2af690ba566a41a.src","preCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration() {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andReturn(singletonList(task00)).anyTimes();\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andReturn(emptyList()).anyTimes();\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":976,"status":"M"}],"commitId":"92e72f7bf96841d7991f1d71f440c2da06dd89cf","commitMessage":"@@@KAFKA-12185: fix ConcurrentModificationException in newly added Tasks container class (#9940)\n\nReviewers: Guozhang Wang <guozhand@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2021-01-22 00:52:34","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-02-06 09:25:50","codes":[{"authorDate":"2021-02-06 09:25:50","commitOrder":6,"curCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andStubReturn(asList(task00, task01));\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList());\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2021-02-06 09:25:50","endLine":951,"groupId":"2593","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTasksCannotInitialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/3a8c92c30322fe86e22b4a1174900049e5d642.src","preCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andStubReturn(asList(task00, task01));\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList());\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":906,"status":"M"},{"authorDate":"2021-02-06 09:25:50","commitOrder":6,"curCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration(final java.util.function.Consumer<Set<TopicPartition>> offsetResetter) {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andStubReturn(singletonList(task00));\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList());\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2021-02-06 09:25:50","endLine":990,"groupId":"6568","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTaskCannotCompleteRestoration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/3a8c92c30322fe86e22b4a1174900049e5d642.src","preCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration() {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andStubReturn(singletonList(task00));\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList());\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":954,"status":"M"}],"commitId":"0bc394cc1d19f1e41dd6646e9ac0e09b91fb1398","commitMessage":"@@@KAFKA-9274: handle TimeoutException on task reset (#10000)\n\nPart of KIP-572: We move the offset reset for the internal \"main consumer\" when we revive a corrupted task.  from the \"task cleanup\" code path.  to the \"task init\" code path. For this case.  we have already logic in place to handle TimeoutException that might be thrown by consumer#committed() method call.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>\n","date":"2021-02-06 09:25:50","modifiedFileCount":"10","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-02-07 05:04:30","codes":[{"authorDate":"2021-02-07 05:04:30","commitOrder":7,"curCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andStubReturn(asList(task00, task01));\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList());\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2021-02-07 05:04:30","endLine":975,"groupId":"2593","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTasksCannotInitialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/224e0cd5c002edd02d0ef2ee8e1586fa832b3d.src","preCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andStubReturn(asList(task00, task01));\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList());\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":930,"status":"M"},{"authorDate":"2021-02-07 05:04:30","commitOrder":7,"curCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration() {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andStubReturn(singletonList(task00));\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList());\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2021-02-07 05:04:30","endLine":1014,"groupId":"6568","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTaskCannotCompleteRestoration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/224e0cd5c002edd02d0ef2ee8e1586fa832b3d.src","preCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration(final java.util.function.Consumer<Set<TopicPartition>> offsetResetter) {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andStubReturn(singletonList(task00));\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList());\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":978,"status":"M"}],"commitId":"d2cb2dc45d536ae124e3da25d6d5a4e932a23a27","commitMessage":"@@@KAFKA-9751: Forward CreateTopicsRequest for FindCoordinator/Metadata when topic creation is needed (#9579)\n\nConsolidate auto topic creation logic to either forward a CreateTopicRequest or handling the creation directly as AutoTopicCreationManager.  when handling FindCoordinator/Metadata request.\n\nCo-authored-by: Jason Gustafson <jason@confluent.io>\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2021-02-07 05:04:30","modifiedFileCount":"15","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-03-23 04:39:29","codes":[{"authorDate":"2021-03-23 04:39:29","commitOrder":8,"curCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andStubReturn(asList(task00, task01));\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList());\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2021-03-23 04:39:29","endLine":961,"groupId":"101971","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTasksCannotInitialize","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/ee261715837dd2363bd8ef051c1d1588778d92.src","preCode":"    public void shouldNotCompleteRestorationIfTasksCannotInitialize() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions),\n            mkEntry(taskId01, taskId01Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new LockException(\"can't lock\");\n            }\n        };\n        final Task task01 = new StateMachineTask(taskId01, taskId01Partitions, true) {\n            @Override\n            public void initializeIfNeeded() {\n                throw new TimeoutException(\"timed out\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andStubReturn(asList(task00, task01));\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList());\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(false));\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n        assertThat(task01.state(), is(Task.State.CREATED));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00), mkEntry(taskId01, task01)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":916,"status":"M"},{"authorDate":"2021-03-23 04:39:29","commitOrder":8,"curCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration(final java.util.function.Consumer<Set<TopicPartition>> offsetResetter) {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andStubReturn(singletonList(task00));\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList());\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","date":"2021-03-23 04:39:29","endLine":1000,"groupId":"101971","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCompleteRestorationIfTaskCannotCompleteRestoration","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/ee261715837dd2363bd8ef051c1d1588778d92.src","preCode":"    public void shouldNotCompleteRestorationIfTaskCannotCompleteRestoration() {\n        final Map<TaskId, Set<TopicPartition>> assignment = mkMap(\n            mkEntry(taskId00, taskId00Partitions)\n        );\n        final Task task00 = new StateMachineTask(taskId00, taskId00Partitions, true) {\n            @Override\n            public void completeRestoration() {\n                throw new TimeoutException(\"timeout!\");\n            }\n        };\n\n        consumer.commitSync(Collections.emptyMap());\n        expectLastCall();\n        expect(changeLogReader.completedChangelogs()).andReturn(emptySet());\n        expect(consumer.assignment()).andReturn(emptySet());\n        consumer.resume(eq(emptySet()));\n        expectLastCall();\n        changeLogReader.enforceRestoreActive();\n        expectLastCall();\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignment))).andStubReturn(singletonList(task00));\n        expect(standbyTaskCreator.createTasks(eq(emptyMap()))).andStubReturn(emptyList());\n        replay(consumer, activeTaskCreator, standbyTaskCreator, changeLogReader);\n\n        taskManager.handleAssignment(assignment, emptyMap());\n\n        assertThat(task00.state(), is(Task.State.CREATED));\n\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(false));\n\n        assertThat(task00.state(), is(Task.State.RESTORING));\n        assertThat(\n            taskManager.activeTaskMap(),\n            Matchers.equalTo(mkMap(mkEntry(taskId00, task00)))\n        );\n        assertThat(taskManager.standbyTaskMap(), Matchers.anEmptyMap());\n        verify(activeTaskCreator);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":964,"status":"M"}],"commitId":"80f373d34f7716a54fa9ec1e37a27c65cbbae0f2","commitMessage":"@@@(Cherry-pick) KAFKA-9274: handle TimeoutException on task reset (#10000) (#10372)\n\nThis PR was removed by accident in trunk and 2.8.  bringing it back.\n\nCo-authored-by: Matthias J. Sax <matthias@confluent.io>\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-03-23 04:39:29","modifiedFileCount":"10","status":"M","submitter":"Boyang Chen"}]
