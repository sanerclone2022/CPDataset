[{"authorTime":"2018-04-18 04:13:15","codes":[{"authorDate":"2018-04-18 04:13:15","commitOrder":3,"curCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(false));\n        task.initializeStateStores();\n        task.initializeTopology();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","date":"2018-04-18 04:13:15","endLine":719,"groupId":"17995","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCallPunctuateOnPassedInProcessorNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/81b1fd0bdb39c080c4e461ee9c79ca4432603e.src","preCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(false));\n        task.initializeStateStores();\n        task.initializeTopology();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":711,"status":"MB"},{"authorDate":"2018-04-18 04:13:15","commitOrder":3,"curCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(false));\n        task.initializeStateStores();\n        task.initializeTopology();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(((ProcessorContextImpl) task.context()).currentNode(), nullValue());\n    }\n","date":"2018-04-18 04:13:15","endLine":728,"groupId":"6728","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/81b1fd0bdb39c080c4e461ee9c79ca4432603e.src","preCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(false));\n        task.initializeStateStores();\n        task.initializeTopology();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(((ProcessorContextImpl) task.context()).currentNode(), nullValue());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":722,"status":"B"}],"commitId":"ac9c3ed0b43ee848e6e555a01c55ea2eee78540a","commitMessage":"@@@KAFKA-6376: preliminary cleanup (#4872)\n\nGeneral cleanup of Streams code.  mostly resolving compiler warnings and re-formatting.\n\nThe regular testing suite should be sufficient.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-04-18 04:13:15","modifiedFileCount":"57","status":"M","submitter":"John Roesler"},{"authorTime":"2019-10-20 04:45:36","codes":[{"authorDate":"2019-10-20 04:45:36","commitOrder":4,"curCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(false), StreamsConfig.METRICS_LATEST);\n        task.initializeStateStores();\n        task.initializeTopology();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","date":"2019-10-20 04:45:36","endLine":1063,"groupId":"17995","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCallPunctuateOnPassedInProcessorNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/be4f683810a206b2491ce29017bb27c0faa7f1.src","preCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(false));\n        task.initializeStateStores();\n        task.initializeTopology();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1055,"status":"M"},{"authorDate":"2019-10-20 04:45:36","commitOrder":4,"curCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(false), StreamsConfig.METRICS_LATEST);\n        task.initializeStateStores();\n        task.initializeTopology();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(((ProcessorContextImpl) task.context()).currentNode(), nullValue());\n    }\n","date":"2019-10-20 04:45:36","endLine":1072,"groupId":"6728","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/be4f683810a206b2491ce29017bb27c0faa7f1.src","preCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(false));\n        task.initializeStateStores();\n        task.initializeTopology();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(((ProcessorContextImpl) task.context()).currentNode(), nullValue());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1066,"status":"M"}],"commitId":"2298c7f84fd0e29b304eb11078bfe76ca5b04a97","commitMessage":"@@@KAFKA-8964: Refactor thread-level metrics depending on built-in metrics version (#7474)\n\n* Made commit-over-tasks sensor and skipped-records sensor optional since they are removed in the latest version\n* Refactored methods for sensor creation\n* Adapted unit and integration tests\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2019-10-20 04:45:36","modifiedFileCount":"50","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-02-05 13:06:39","codes":[{"authorDate":"2020-02-05 13:06:39","commitOrder":5,"curCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","date":"2020-02-05 13:06:39","endLine":1087,"groupId":"17995","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCallPunctuateOnPassedInProcessorNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/2b75df9bcf88fa0bbfd86a18affe4ad2137dc7.src","preCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(false), StreamsConfig.METRICS_LATEST);\n        task.initializeStateStores();\n        task.initializeTopology();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1079,"status":"M"},{"authorDate":"2020-02-05 13:06:39","commitOrder":5,"curCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(((InternalProcessorContext) task.context()).currentNode(), nullValue());\n    }\n","date":"2020-02-05 13:06:39","endLine":1096,"groupId":"17995","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/2b75df9bcf88fa0bbfd86a18affe4ad2137dc7.src","preCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(false), StreamsConfig.METRICS_LATEST);\n        task.initializeStateStores();\n        task.initializeTopology();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(((ProcessorContextImpl) task.context()).currentNode(), nullValue());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1090,"status":"M"}],"commitId":"4090f9a2b0a95e4da127e4786007542276d97520","commitMessage":"@@@KAFKA-9113: Clean up task management and state management (#7997)\n\nThis PR is collaborated by Guozhang Wang and John Roesler. It is a significant tech debt cleanup on task management and state management.  and is broken down by several sub-tasks listed below:\n\nExtract embedded clients (producer and consumer) into RecordCollector from StreamTask.\nguozhangwang#2\nguozhangwang#5\n\nConsolidate the standby updating and active restoring logic into ChangelogReader and extract out of StreamThread.\nguozhangwang#3\nguozhangwang#4\n\nIntroduce Task state life cycle (created.  restoring.  running.  suspended.  closing).  and refactor the task operations based on the current state.\nguozhangwang#6\nguozhangwang#7\n\nConsolidate AssignedTasks into TaskManager and simplify the logic of changelog management and task management (since they are already moved in step 2) and 3)).\nguozhangwang#8\nguozhangwang#9\n\nAlso simplified the StreamThread logic a bit as the embedded clients / changelog restoration logic has been moved into step 1) and 2).\nguozhangwang#10\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-02-05 13:06:39","modifiedFileCount":"76","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-05-30 01:48:03","codes":[{"authorDate":"2020-02-05 13:06:39","commitOrder":6,"curCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","date":"2020-02-05 13:06:39","endLine":1087,"groupId":"17995","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCallPunctuateOnPassedInProcessorNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/2b75df9bcf88fa0bbfd86a18affe4ad2137dc7.src","preCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1079,"status":"N"},{"authorDate":"2020-05-30 01:48:03","commitOrder":6,"curCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(task.processorContext().currentNode(), nullValue());\n    }\n","date":"2020-05-30 01:48:03","endLine":1413,"groupId":"17995","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/d039b40823cc5b2b545fbe5a18c901e7d1b6ff.src","preCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(((InternalProcessorContext) task.context()).currentNode(), nullValue());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1407,"status":"M"}],"commitId":"9d52deca247d9e16cf530d655891b2bbe474ffae","commitMessage":"@@@KAFKA-9501: convert between active and standby without closing stores (#8248)\n\nThis PR has gone through several significant transitions of its own.  but here's the latest:\n\n* TaskManager just collects the tasks to transition and refers to the active/standby task creator to handle closing & recycling the old task and creating the new one. If we ever hit an exception during the close.  we bail and close all the remaining tasks as dirty.\n\n* The task creators tell the task to \"close but recycle state\". If this is successful.  it tells the recycled processor context and state manager that they should transition to the new type.\n\n* During \"close and recycle\" the task just does a normal clean close.  but instead of closing the state manager it informs it to recycle itself: maintain all of its store information (most importantly the current store offsets) but unregister the changelogs from the changelog reader\n\n* The new task will (re-)register its changelogs during initialization.  but skip re-registering any stores. It will still read the checkpoint file.  but only use the written offsets if the store offsets are not already initialized from pre-transition\n\n* To ensure we don't end up with manual compaction disabled for standbys.  we have to call the state restore listener's onRestoreEnd for any active restoring stores that are switching to standbys\n\nReviewers: John Roesler <vvcephei@apache.org>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-05-30 01:48:03","modifiedFileCount":"41","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2021-01-07 06:01:02","codes":[{"authorDate":"2021-01-07 06:01:02","commitOrder":7,"curCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","date":"2021-01-07 06:01:02","endLine":1504,"groupId":"17995","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCallPunctuateOnPassedInProcessorNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1496,"status":"M"},{"authorDate":"2021-01-07 06:01:02","commitOrder":7,"curCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(task.processorContext().currentNode(), nullValue());\n    }\n","date":"2021-01-07 06:01:02","endLine":1513,"groupId":"17995","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(task.processorContext().currentNode(), nullValue());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1507,"status":"M"}],"commitId":"22e8e71156762b40ac93e2cbd42eacba00dbfb0c","commitMessage":"@@@KAFKA-9274: Fix commit-TimeoutException handling for EOS (#9800)\n\nIf EOS is enabled and the TX commit fails with a timeout. \nwe should not process more messages (what is ok for non-EOS)\nbecause we don't really know the status of the TX.\nIf the commit was indeed successful.  we won't have an open TX\ncan calling send() would fail with an fatal error.\n\nInstead.  we should retry the (idempotent) commit of the TX. \nand start a new TX afterwards.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  John Roesler <john@confluent.io>","date":"2021-01-07 06:01:02","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-02-06 09:25:50","codes":[{"authorDate":"2021-02-06 09:25:50","commitOrder":8,"curCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","date":"2021-02-06 09:25:50","endLine":1536,"groupId":"17995","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCallPunctuateOnPassedInProcessorNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/69b87b850e0381e2b0cf59590175eaa06ff5d8.src","preCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1528,"status":"M"},{"authorDate":"2021-02-06 09:25:50","commitOrder":8,"curCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(task.processorContext().currentNode(), nullValue());\n    }\n","date":"2021-02-06 09:25:50","endLine":1545,"groupId":"17995","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/69b87b850e0381e2b0cf59590175eaa06ff5d8.src","preCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(task.processorContext().currentNode(), nullValue());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1539,"status":"M"}],"commitId":"0bc394cc1d19f1e41dd6646e9ac0e09b91fb1398","commitMessage":"@@@KAFKA-9274: handle TimeoutException on task reset (#10000)\n\nPart of KIP-572: We move the offset reset for the internal \"main consumer\" when we revive a corrupted task.  from the \"task cleanup\" code path.  to the \"task init\" code path. For this case.  we have already logic in place to handle TimeoutException that might be thrown by consumer#committed() method call.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>\n","date":"2021-02-06 09:25:50","modifiedFileCount":"10","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-02-07 05:04:30","codes":[{"authorDate":"2021-02-07 05:04:30","commitOrder":9,"curCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","date":"2021-02-07 05:04:30","endLine":1472,"groupId":"17995","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCallPunctuateOnPassedInProcessorNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ea/3fbdd91e1cf3f6ab75badba24791183a05fb38.src","preCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1464,"status":"M"},{"authorDate":"2021-02-07 05:04:30","commitOrder":9,"curCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(task.processorContext().currentNode(), nullValue());\n    }\n","date":"2021-02-07 05:04:30","endLine":1481,"groupId":"17995","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ea/3fbdd91e1cf3f6ab75badba24791183a05fb38.src","preCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(task.processorContext().currentNode(), nullValue());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1475,"status":"M"}],"commitId":"d2cb2dc45d536ae124e3da25d6d5a4e932a23a27","commitMessage":"@@@KAFKA-9751: Forward CreateTopicsRequest for FindCoordinator/Metadata when topic creation is needed (#9579)\n\nConsolidate auto topic creation logic to either forward a CreateTopicRequest or handling the creation directly as AutoTopicCreationManager.  when handling FindCoordinator/Metadata request.\n\nCo-authored-by: Jason Gustafson <jason@confluent.io>\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2021-02-07 05:04:30","modifiedFileCount":"15","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-03-23 04:39:29","codes":[{"authorDate":"2021-03-23 04:39:29","commitOrder":10,"curCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","date":"2021-03-23 04:39:29","endLine":1531,"groupId":"17995","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCallPunctuateOnPassedInProcessorNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/78cbe1c94d7ade29cd4d7f012769ba68f32ec0.src","preCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1523,"status":"M"},{"authorDate":"2021-03-23 04:39:29","commitOrder":10,"curCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(task.processorContext().currentNode(), nullValue());\n    }\n","date":"2021-03-23 04:39:29","endLine":1540,"groupId":"17995","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/78cbe1c94d7ade29cd4d7f012769ba68f32ec0.src","preCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(task.processorContext().currentNode(), nullValue());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1534,"status":"M"}],"commitId":"80f373d34f7716a54fa9ec1e37a27c65cbbae0f2","commitMessage":"@@@(Cherry-pick) KAFKA-9274: handle TimeoutException on task reset (#10000) (#10372)\n\nThis PR was removed by accident in trunk and 2.8.  bringing it back.\n\nCo-authored-by: Matthias J. Sax <matthias@confluent.io>\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-03-23 04:39:29","modifiedFileCount":"10","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":11,"curCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(\"100\"));\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","date":"2021-06-01 20:05:08","endLine":1506,"groupId":"102061","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCallPunctuateOnPassedInProcessorNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5b/4125699caf2dbc0cadbc936ac0104e34e104b7.src","preCode":"    public void shouldCallPunctuateOnPassedInProcessorNode() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(5L));\n        task.punctuate(processorStreamTime, 10, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(punctuatedAt, equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1498,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":11,"curCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(\"100\"));\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(task.processorContext().currentNode(), nullValue());\n    }\n","date":"2021-06-01 20:05:08","endLine":1515,"groupId":"102061","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5b/4125699caf2dbc0cadbc936ac0104e34e104b7.src","preCode":"    public void shouldSetProcessorNodeOnContextBackToNullAfterSuccessfulPunctuate() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.punctuate(processorStreamTime, 5, PunctuationType.STREAM_TIME, punctuator);\n        assertThat(task.processorContext().currentNode(), nullValue());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1509,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"}]
