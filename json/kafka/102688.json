[{"authorTime":"2018-07-27 00:31:02","codes":[{"authorDate":"2018-07-27 00:31:02","commitOrder":2,"curCode":"    public static <K, V> List<ConsumerRecord<K, V>> waitUntilMinRecordsReceived(final Properties consumerConfig,\n                                                                                final String topic,\n                                                                                final int expectedNumRecords,\n                                                                                final long waitTime) throws InterruptedException {\n        final List<ConsumerRecord<K, V>> accumData = new ArrayList<>();\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            final TestCondition valuesRead = () -> {\n                final List<ConsumerRecord<K, V>> readData =\n                    readRecords(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                return accumData.size() >= expectedNumRecords;\n            };\n            final String conditionDetails = \"Did not receive all \" + expectedNumRecords + \" records from topic \" + topic;\n            TestUtils.waitForCondition(valuesRead, waitTime, conditionDetails);\n        }\n        return accumData;\n    }\n","date":"2018-07-27 00:31:02","endLine":369,"groupId":"4088","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"waitUntilMinRecordsReceived","params":"(finalPropertiesconsumerConfig@finalStringtopic@finalintexpectedNumRecords@finallongwaitTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/9d74887e5b1e9ce386a719ef76dfc6475dc1f3.src","preCode":"    public static <K, V> List<ConsumerRecord<K, V>> waitUntilMinRecordsReceived(final Properties consumerConfig,\n                                                                                final String topic,\n                                                                                final int expectedNumRecords,\n                                                                                final long waitTime) throws InterruptedException {\n        final List<ConsumerRecord<K, V>> accumData = new ArrayList<>();\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            final TestCondition valuesRead = () -> {\n                final List<ConsumerRecord<K, V>> readData =\n                    readRecords(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                return accumData.size() >= expectedNumRecords;\n            };\n            final String conditionDetails = \"Did not receive all \" + expectedNumRecords + \" records from topic \" + topic;\n            TestUtils.waitForCondition(valuesRead, waitTime, conditionDetails);\n        }\n        return accumData;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"MB"},{"authorDate":"2018-07-27 00:31:02","commitOrder":2,"curCode":"    public static <K, V> List<KeyValue<K, KeyValue<V, Long>>> waitUntilMinKeyValueWithTimestampRecordsReceived(final Properties consumerConfig,\n                                                                                                               final String topic,\n                                                                                                               final int expectedNumRecords,\n                                                                                                               final long waitTime) throws InterruptedException {\n        final List<KeyValue<K, KeyValue<V, Long>>> accumData = new ArrayList<>();\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            final TestCondition valuesRead = () -> {\n                final List<KeyValue<K, KeyValue<V, Long>>> readData =\n                    readKeyValuesWithTimestamp(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                return accumData.size() >= expectedNumRecords;\n            };\n            final String conditionDetails = \"Did not receive all \" + expectedNumRecords + \" records from topic \" + topic;\n            TestUtils.waitForCondition(valuesRead, waitTime, conditionDetails);\n        }\n        return accumData;\n    }\n","date":"2018-07-27 00:31:02","endLine":351,"groupId":"7423","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"waitUntilMinKeyValueWithTimestampRecordsReceived","params":"(finalPropertiesconsumerConfig@finalStringtopic@finalintexpectedNumRecords@finallongwaitTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/9d74887e5b1e9ce386a719ef76dfc6475dc1f3.src","preCode":"    public static <K, V> List<KeyValue<K, KeyValue<V, Long>>> waitUntilMinKeyValueWithTimestampRecordsReceived(final Properties consumerConfig,\n                                                                                                               final String topic,\n                                                                                                               final int expectedNumRecords,\n                                                                                                               final long waitTime) throws InterruptedException {\n        final List<KeyValue<K, KeyValue<V, Long>>> accumData = new ArrayList<>();\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            final TestCondition valuesRead = () -> {\n                final List<KeyValue<K, KeyValue<V, Long>>> readData =\n                    readKeyValuesWithTimestamp(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                return accumData.size() >= expectedNumRecords;\n            };\n            final String conditionDetails = \"Did not receive all \" + expectedNumRecords + \" records from topic \" + topic;\n            TestUtils.waitForCondition(valuesRead, waitTime, conditionDetails);\n        }\n        return accumData;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"B"}],"commitId":"42af41d5fc991c392b75396352903b4d919da5d3","commitMessage":"@@@MINOR: Caching layer should forward record timestamp (#5423)\n\nReviewer: Guozhang Wang <guozhang@confluent.io>\n","date":"2018-07-27 00:31:02","modifiedFileCount":"4","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-05-31 00:46:12","codes":[{"authorDate":"2018-07-27 00:31:02","commitOrder":3,"curCode":"    public static <K, V> List<ConsumerRecord<K, V>> waitUntilMinRecordsReceived(final Properties consumerConfig,\n                                                                                final String topic,\n                                                                                final int expectedNumRecords,\n                                                                                final long waitTime) throws InterruptedException {\n        final List<ConsumerRecord<K, V>> accumData = new ArrayList<>();\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            final TestCondition valuesRead = () -> {\n                final List<ConsumerRecord<K, V>> readData =\n                    readRecords(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                return accumData.size() >= expectedNumRecords;\n            };\n            final String conditionDetails = \"Did not receive all \" + expectedNumRecords + \" records from topic \" + topic;\n            TestUtils.waitForCondition(valuesRead, waitTime, conditionDetails);\n        }\n        return accumData;\n    }\n","date":"2018-07-27 00:31:02","endLine":369,"groupId":"4088","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"waitUntilMinRecordsReceived","params":"(finalPropertiesconsumerConfig@finalStringtopic@finalintexpectedNumRecords@finallongwaitTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/9d74887e5b1e9ce386a719ef76dfc6475dc1f3.src","preCode":"    public static <K, V> List<ConsumerRecord<K, V>> waitUntilMinRecordsReceived(final Properties consumerConfig,\n                                                                                final String topic,\n                                                                                final int expectedNumRecords,\n                                                                                final long waitTime) throws InterruptedException {\n        final List<ConsumerRecord<K, V>> accumData = new ArrayList<>();\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            final TestCondition valuesRead = () -> {\n                final List<ConsumerRecord<K, V>> readData =\n                    readRecords(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                return accumData.size() >= expectedNumRecords;\n            };\n            final String conditionDetails = \"Did not receive all \" + expectedNumRecords + \" records from topic \" + topic;\n            TestUtils.waitForCondition(valuesRead, waitTime, conditionDetails);\n        }\n        return accumData;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":353,"status":"N"},{"authorDate":"2019-05-31 00:46:12","commitOrder":3,"curCode":"    public static <K, V> List<KeyValueTimestamp<K, V>> waitUntilMinKeyValueWithTimestampRecordsReceived(final Properties consumerConfig,\n                                                                                                               final String topic,\n                                                                                                               final int expectedNumRecords,\n                                                                                                               final long waitTime) throws InterruptedException {\n        final List<KeyValueTimestamp<K, V>> accumData = new ArrayList<>();\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            final TestCondition valuesRead = () -> {\n                final List<KeyValueTimestamp<K, V>> readData =\n                    readKeyValuesWithTimestamp(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                return accumData.size() >= expectedNumRecords;\n            };\n            final String conditionDetails = \"Did not receive all \" + expectedNumRecords + \" records from topic \" + topic;\n            TestUtils.waitForCondition(valuesRead, waitTime, conditionDetails);\n        }\n        return accumData;\n    }\n","date":"2019-05-31 00:46:12","endLine":545,"groupId":"3784","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"waitUntilMinKeyValueWithTimestampRecordsReceived","params":"(finalPropertiesconsumerConfig@finalStringtopic@finalintexpectedNumRecords@finallongwaitTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/46/515aa84690c2680cbbf573553cc6fe9c002151.src","preCode":"    public static <K, V> List<KeyValue<K, KeyValue<V, Long>>> waitUntilMinKeyValueWithTimestampRecordsReceived(final Properties consumerConfig,\n                                                                                                               final String topic,\n                                                                                                               final int expectedNumRecords,\n                                                                                                               final long waitTime) throws InterruptedException {\n        final List<KeyValue<K, KeyValue<V, Long>>> accumData = new ArrayList<>();\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            final TestCondition valuesRead = () -> {\n                final List<KeyValue<K, KeyValue<V, Long>>> readData =\n                    readKeyValuesWithTimestamp(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                return accumData.size() >= expectedNumRecords;\n            };\n            final String conditionDetails = \"Did not receive all \" + expectedNumRecords + \" records from topic \" + topic;\n            TestUtils.waitForCondition(valuesRead, waitTime, conditionDetails);\n        }\n        return accumData;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":529,"status":"M"}],"commitId":"77e6e8ec054608a30626271b4952b63294a93c3b","commitMessage":"@@@KAFKA-6455: Update integration tests to verify result timestamps (#6751)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2019-05-31 00:46:12","modifiedFileCount":"12","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-10-16 08:18:58","codes":[{"authorDate":"2019-10-16 08:18:58","commitOrder":4,"curCode":"    public static <K, V> List<ConsumerRecord<K, V>> waitUntilMinRecordsReceived(final Properties consumerConfig,\n                                                                                final String topic,\n                                                                                final int expectedNumRecords,\n                                                                                final long waitTime) throws InterruptedException {\n        final List<ConsumerRecord<K, V>> accumData = new ArrayList<>();\n        final String reason = String.format(\"Did not receive all %d records from topic %s within %d ms\", expectedNumRecords, topic, waitTime);\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            retryOnExceptionWithTimeout(waitTime, () -> {\n                final List<ConsumerRecord<K, V>> readData =\n                    readRecords(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                assertThat(reason, accumData.size(), is(greaterThanOrEqualTo(expectedNumRecords)));\n            });\n        }\n        return accumData;\n    }\n","date":"2019-10-16 08:18:58","endLine":465,"groupId":"18350","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"waitUntilMinRecordsReceived","params":"(finalPropertiesconsumerConfig@finalStringtopic@finalintexpectedNumRecords@finallongwaitTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6c/67a9df131338f9b740242c04137f680accc86b.src","preCode":"    public static <K, V> List<ConsumerRecord<K, V>> waitUntilMinRecordsReceived(final Properties consumerConfig,\n                                                                                final String topic,\n                                                                                final int expectedNumRecords,\n                                                                                final long waitTime) throws InterruptedException {\n        final List<ConsumerRecord<K, V>> accumData = new ArrayList<>();\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            final TestCondition valuesRead = () -> {\n                final List<ConsumerRecord<K, V>> readData =\n                    readRecords(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                return accumData.size() >= expectedNumRecords;\n            };\n            final String conditionDetails = \"Did not receive all \" + expectedNumRecords + \" records from topic \" + topic;\n            TestUtils.waitForCondition(valuesRead, waitTime, conditionDetails);\n        }\n        return accumData;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"M"},{"authorDate":"2019-10-16 08:18:58","commitOrder":4,"curCode":"    public static <K, V> List<KeyValueTimestamp<K, V>> waitUntilMinKeyValueWithTimestampRecordsReceived(final Properties consumerConfig,\n                                                                                                               final String topic,\n                                                                                                               final int expectedNumRecords,\n                                                                                                               final long waitTime) throws InterruptedException {\n        final List<KeyValueTimestamp<K, V>> accumData = new ArrayList<>();\n        final String reason = String.format(\"Did not receive all %d records from topic %s within %d ms\", expectedNumRecords, topic, waitTime);\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            retryOnExceptionWithTimeout(waitTime, () -> {\n                final List<KeyValueTimestamp<K, V>> readData =\n                    readKeyValuesWithTimestamp(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                assertThat(reason, accumData.size(), is(greaterThanOrEqualTo(expectedNumRecords)));\n            });\n        }\n        return accumData;\n    }\n","date":"2019-10-16 08:18:58","endLine":538,"groupId":"17097","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"waitUntilMinKeyValueWithTimestampRecordsReceived","params":"(finalPropertiesconsumerConfig@finalStringtopic@finalintexpectedNumRecords@finallongwaitTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6c/67a9df131338f9b740242c04137f680accc86b.src","preCode":"    public static <K, V> List<KeyValueTimestamp<K, V>> waitUntilMinKeyValueWithTimestampRecordsReceived(final Properties consumerConfig,\n                                                                                                               final String topic,\n                                                                                                               final int expectedNumRecords,\n                                                                                                               final long waitTime) throws InterruptedException {\n        final List<KeyValueTimestamp<K, V>> accumData = new ArrayList<>();\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            final TestCondition valuesRead = () -> {\n                final List<KeyValueTimestamp<K, V>> readData =\n                    readKeyValuesWithTimestamp(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                return accumData.size() >= expectedNumRecords;\n            };\n            final String conditionDetails = \"Did not receive all \" + expectedNumRecords + \" records from topic \" + topic;\n            TestUtils.waitForCondition(valuesRead, waitTime, conditionDetails);\n        }\n        return accumData;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":523,"status":"M"}],"commitId":"9c8ab5ce10e16531c6db95b5ad2abafb1ec62d38","commitMessage":"@@@MINOR: Provide better messages when waiting for a condition in test (#7488)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2019-10-16 08:18:58","modifiedFileCount":"3","status":"M","submitter":"Chris Pettitt"},{"authorTime":"2020-05-08 14:01:11","codes":[{"authorDate":"2020-05-08 14:01:11","commitOrder":5,"curCode":"    public static <K, V> List<ConsumerRecord<K, V>> waitUntilMinRecordsReceived(\n        final Properties consumerConfig,\n        final String topic,\n        final int expectedNumRecords,\n        final long waitTime\n    ) throws Exception {\n        final List<ConsumerRecord<K, V>> accumData = new ArrayList<>();\n        final String reason = String.format(\n            \"Did not receive all %d records from topic %s within %d ms\",\n            expectedNumRecords,\n            topic,\n            waitTime\n        );\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            retryOnExceptionWithTimeout(waitTime, () -> {\n                final List<ConsumerRecord<K, V>> readData =\n                    readRecords(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                assertThat(reason, accumData.size(), is(greaterThanOrEqualTo(expectedNumRecords)));\n            });\n        }\n        return accumData;\n    }\n","date":"2020-05-08 14:01:11","endLine":510,"groupId":"102688","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"waitUntilMinRecordsReceived","params":"(finalPropertiesconsumerConfig@finalStringtopic@finalintexpectedNumRecords@finallongwaitTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/22/2d2780911f754ec3f6a1f7b4af8c455b468edf.src","preCode":"    public static <K, V> List<ConsumerRecord<K, V>> waitUntilMinRecordsReceived(final Properties consumerConfig,\n                                                                                final String topic,\n                                                                                final int expectedNumRecords,\n                                                                                final long waitTime) throws InterruptedException {\n        final List<ConsumerRecord<K, V>> accumData = new ArrayList<>();\n        final String reason = String.format(\"Did not receive all %d records from topic %s within %d ms\", expectedNumRecords, topic, waitTime);\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            retryOnExceptionWithTimeout(waitTime, () -> {\n                final List<ConsumerRecord<K, V>> readData =\n                    readRecords(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                assertThat(reason, accumData.size(), is(greaterThanOrEqualTo(expectedNumRecords)));\n            });\n        }\n        return accumData;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"M"},{"authorDate":"2020-05-08 14:01:11","commitOrder":5,"curCode":"    public static <K, V> List<KeyValueTimestamp<K, V>> waitUntilMinKeyValueWithTimestampRecordsReceived(\n        final Properties consumerConfig,\n        final String topic,\n        final int expectedNumRecords,\n        final long waitTime\n    ) throws Exception {\n        final List<KeyValueTimestamp<K, V>> accumData = new ArrayList<>();\n        final String reason = String.format(\n            \"Did not receive all %d records from topic %s within %d ms\",\n            expectedNumRecords,\n            topic,\n            waitTime\n        );\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            retryOnExceptionWithTimeout(waitTime, () -> {\n                final List<KeyValueTimestamp<K, V>> readData =\n                    readKeyValuesWithTimestamp(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                assertThat(reason, accumData.size(), is(greaterThanOrEqualTo(expectedNumRecords)));\n            });\n        }\n        return accumData;\n    }\n","date":"2020-05-08 14:01:11","endLine":599,"groupId":"102688","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"waitUntilMinKeyValueWithTimestampRecordsReceived","params":"(finalPropertiesconsumerConfig@finalStringtopic@finalintexpectedNumRecords@finallongwaitTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/22/2d2780911f754ec3f6a1f7b4af8c455b468edf.src","preCode":"    public static <K, V> List<KeyValueTimestamp<K, V>> waitUntilMinKeyValueWithTimestampRecordsReceived(final Properties consumerConfig,\n                                                                                                               final String topic,\n                                                                                                               final int expectedNumRecords,\n                                                                                                               final long waitTime) throws InterruptedException {\n        final List<KeyValueTimestamp<K, V>> accumData = new ArrayList<>();\n        final String reason = String.format(\"Did not receive all %d records from topic %s within %d ms\", expectedNumRecords, topic, waitTime);\n        try (final Consumer<K, V> consumer = createConsumer(consumerConfig)) {\n            retryOnExceptionWithTimeout(waitTime, () -> {\n                final List<KeyValueTimestamp<K, V>> readData =\n                    readKeyValuesWithTimestamp(topic, consumer, waitTime, expectedNumRecords);\n                accumData.addAll(readData);\n                assertThat(reason, accumData.size(), is(greaterThanOrEqualTo(expectedNumRecords)));\n            });\n        }\n        return accumData;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/utils/IntegrationTestUtils.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":577,"status":"M"}],"commitId":"611831b051080543d94ef5bea9b3aa02b4992140","commitMessage":"@@@KAFKA-9928: Fix flaky GlobalKTableEOSIntegrationTest (#8600)\n\nReviewer: Guozhang Wang <guozhang@confluent.io>","date":"2020-05-08 14:01:11","modifiedFileCount":"7","status":"M","submitter":"Matthias J. Sax"}]
