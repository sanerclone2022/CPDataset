[{"authorTime":"2016-12-02 07:01:09","codes":[{"authorDate":"2016-12-02 07:01:09","commitOrder":1,"curCode":"    public void testPreCommit() throws Exception {\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(2);\n        expectConvertMessages(2);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 2));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> taskOffsets = new HashMap<>();\n        taskOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(new TopicPartition(TOPIC, 3), new OffsetAndMetadata(FIRST_OFFSET)); \r\n\n        final Map<TopicPartition, OffsetAndMetadata> committableOffsets = new HashMap<>();\n        committableOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        committableOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(taskOffsets);\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(committableOffsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(committableOffsets, null);\n                return null;\n            }\n        });\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        workerTask.iteration(); \r\n\n        assertEquals(workerCurrentOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n        assertEquals(committableOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-12-02 07:01:09","endLine":479,"groupId":"14066","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/9e56b689704374baa27e4f69b551ecdc04378d.src","preCode":"    public void testPreCommit() throws Exception {\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(2);\n        expectConvertMessages(2);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 2));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> taskOffsets = new HashMap<>();\n        taskOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(new TopicPartition(TOPIC, 3), new OffsetAndMetadata(FIRST_OFFSET)); \r\n\n        final Map<TopicPartition, OffsetAndMetadata> committableOffsets = new HashMap<>();\n        committableOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        committableOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(taskOffsets);\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(committableOffsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(committableOffsets, null);\n                return null;\n            }\n        });\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        workerTask.iteration(); \r\n\n        assertEquals(workerCurrentOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n        assertEquals(committableOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"B"},{"authorDate":"2016-12-02 07:01:09","commitOrder":1,"curCode":"    public void testIgnoredCommit() throws Exception {\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(1);\n        expectConvertMessages(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        \r\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(workerStartingOffsets);\n        \r\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-12-02 07:01:09","endLine":525,"groupId":"20217","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoredCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/9e56b689704374baa27e4f69b551ecdc04378d.src","preCode":"    public void testIgnoredCommit() throws Exception {\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(1);\n        expectConvertMessages(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        \r\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(workerStartingOffsets);\n        \r\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":482,"status":"B"}],"commitId":"b45a67ede9021985c8df87c633b225231092c0c9","commitMessage":"@@@KAFKA-4161: KIP-89: Allow sink connectors to decouple flush and offset commit\n\nAuthor: Shikhar Bhushan <shikhar@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #2139 from shikhar/kafka-4161-deux\n","date":"2016-12-02 07:01:09","modifiedFileCount":"6","status":"B","submitter":"Shikhar Bhushan"},{"authorTime":"2017-01-13 08:14:53","codes":[{"authorDate":"2017-01-13 08:14:53","commitOrder":2,"curCode":"    public void testPreCommit() throws Exception {\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(2);\n        expectConversionAndTransformation(2);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 2));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> taskOffsets = new HashMap<>();\n        taskOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(new TopicPartition(TOPIC, 3), new OffsetAndMetadata(FIRST_OFFSET)); \r\n\n        final Map<TopicPartition, OffsetAndMetadata> committableOffsets = new HashMap<>();\n        committableOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        committableOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(taskOffsets);\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(committableOffsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(committableOffsets, null);\n                return null;\n            }\n        });\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        workerTask.iteration(); \r\n\n        assertEquals(workerCurrentOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n        assertEquals(committableOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-01-13 08:14:53","endLine":486,"groupId":"14066","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f9/3e3859d016807d8f5bc353dddbcf1613f0b340.src","preCode":"    public void testPreCommit() throws Exception {\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(2);\n        expectConvertMessages(2);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 2));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> taskOffsets = new HashMap<>();\n        taskOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(new TopicPartition(TOPIC, 3), new OffsetAndMetadata(FIRST_OFFSET)); \r\n\n        final Map<TopicPartition, OffsetAndMetadata> committableOffsets = new HashMap<>();\n        committableOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        committableOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(taskOffsets);\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(committableOffsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(committableOffsets, null);\n                return null;\n            }\n        });\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        workerTask.iteration(); \r\n\n        assertEquals(workerCurrentOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n        assertEquals(committableOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"},{"authorDate":"2017-01-13 08:14:53","commitOrder":2,"curCode":"    public void testIgnoredCommit() throws Exception {\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        \r\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(workerStartingOffsets);\n        \r\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-01-13 08:14:53","endLine":532,"groupId":"20217","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoredCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f9/3e3859d016807d8f5bc353dddbcf1613f0b340.src","preCode":"    public void testIgnoredCommit() throws Exception {\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(1);\n        expectConvertMessages(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        \r\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(workerStartingOffsets);\n        \r\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"M"}],"commitId":"2f904883237c476fd82a202f7ddda93fe56eef36","commitMessage":"@@@KAFKA-3209: KIP-66: single message transforms\n\nBesides API and runtime changes.  this PR also includes 2 data transformations (`InsertField`.  `HoistToStruct`) and 1 routing transformation (`TimestampRouter`).\n\nThere is some gnarliness in `ConnectorConfig` / `ConfigDef` around creating.  parsing and validating a dynamic `ConfigDef`.\n\nAuthor: Shikhar Bhushan <shikhar@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #2299 from shikhar/smt-2017\n","date":"2017-01-13 08:14:53","modifiedFileCount":"16","status":"M","submitter":"Shikhar Bhushan"},{"authorTime":"2017-01-13 08:14:53","codes":[{"authorDate":"2017-08-10 00:07:27","commitOrder":3,"curCode":"    public void testPreCommit() throws Exception {\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(2);\n        expectConversionAndTransformation(2);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 2));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> taskOffsets = new HashMap<>();\n        taskOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(new TopicPartition(TOPIC, 3), new OffsetAndMetadata(FIRST_OFFSET)); \r\n\n        final Map<TopicPartition, OffsetAndMetadata> committableOffsets = new HashMap<>();\n        committableOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        committableOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(taskOffsets);\n        \r\n        EasyMock.expect(consumer.assignment()).andReturn(workerCurrentOffsets.keySet());\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(committableOffsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(committableOffsets, null);\n                return null;\n            }\n        });\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        workerTask.iteration(); \r\n\n        assertEquals(workerCurrentOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n        assertEquals(committableOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-08-10 00:07:27","endLine":495,"groupId":"14066","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/50/b75032def5cadd1b07d98d2197bb034b0aa5cf.src","preCode":"    public void testPreCommit() throws Exception {\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(2);\n        expectConversionAndTransformation(2);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 2));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> taskOffsets = new HashMap<>();\n        taskOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(new TopicPartition(TOPIC, 3), new OffsetAndMetadata(FIRST_OFFSET)); \r\n\n        final Map<TopicPartition, OffsetAndMetadata> committableOffsets = new HashMap<>();\n        committableOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        committableOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(taskOffsets);\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(committableOffsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(committableOffsets, null);\n                return null;\n            }\n        });\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        workerTask.iteration(); \r\n\n        assertEquals(workerCurrentOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n        assertEquals(committableOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":433,"status":"M"},{"authorDate":"2017-01-13 08:14:53","commitOrder":3,"curCode":"    public void testIgnoredCommit() throws Exception {\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        \r\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(workerStartingOffsets);\n        \r\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-01-13 08:14:53","endLine":532,"groupId":"20217","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoredCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f9/3e3859d016807d8f5bc353dddbcf1613f0b340.src","preCode":"    public void testIgnoredCommit() throws Exception {\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        \r\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(workerStartingOffsets);\n        \r\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"N"}],"commitId":"a593db6a2b6c3511215008b6d3dd6bd77f84e8c4","commitMessage":"@@@MINOR: Standardize logging of Worker-level messages from Tasks and Connectors\n\nThis ensures all logs have the connector/task ID.  whether tasks are source or sink.  and formats them consistently.\n\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>.  Jason Gustafson <jason@confluent.io>\n\nCloses #3639 from ewencp/standardize-connector-task-logging\n","date":"2017-08-10 00:07:27","modifiedFileCount":"6","status":"M","submitter":"Ewen Cheslack-Postava"},{"authorTime":"2017-09-27 13:23:37","codes":[{"authorDate":"2017-09-27 13:23:37","commitOrder":4,"curCode":"    public void testPreCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(2);\n        expectConversionAndTransformation(2);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 2));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> taskOffsets = new HashMap<>();\n        taskOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(new TopicPartition(TOPIC, 3), new OffsetAndMetadata(FIRST_OFFSET)); \r\n\n        final Map<TopicPartition, OffsetAndMetadata> committableOffsets = new HashMap<>();\n        committableOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        committableOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(taskOffsets);\n        \r\n        EasyMock.expect(consumer.assignment()).andReturn(workerCurrentOffsets.keySet());\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(committableOffsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(committableOffsets, null);\n                return null;\n            }\n        });\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        workerTask.iteration(); \r\n\n        assertEquals(workerCurrentOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n        assertEquals(committableOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-27 13:23:37","endLine":523,"groupId":"14066","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/4c02219e2ea151234deadc90ebb7815828f1d9.src","preCode":"    public void testPreCommit() throws Exception {\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(2);\n        expectConversionAndTransformation(2);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 2));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> taskOffsets = new HashMap<>();\n        taskOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(new TopicPartition(TOPIC, 3), new OffsetAndMetadata(FIRST_OFFSET)); \r\n\n        final Map<TopicPartition, OffsetAndMetadata> committableOffsets = new HashMap<>();\n        committableOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        committableOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(taskOffsets);\n        \r\n        EasyMock.expect(consumer.assignment()).andReturn(workerCurrentOffsets.keySet());\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(committableOffsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(committableOffsets, null);\n                return null;\n            }\n        });\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        workerTask.iteration(); \r\n\n        assertEquals(workerCurrentOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n        assertEquals(committableOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"M"},{"authorDate":"2017-09-27 13:23:37","commitOrder":4,"curCode":"    public void testIgnoredCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        \r\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(workerStartingOffsets);\n        \r\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-27 13:23:37","endLine":571,"groupId":"20217","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoredCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/4c02219e2ea151234deadc90ebb7815828f1d9.src","preCode":"    public void testIgnoredCommit() throws Exception {\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        \r\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(workerStartingOffsets);\n        \r\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":526,"status":"M"}],"commitId":"73cc416664dbc8e1442f70cb3c4cd8f4d365ea50","commitMessage":"@@@KAFKA-5900: Add task metrics common to both sink and source tasks\n\nAdded metrics that are common to both sink and source tasks.\n\nMarked as \"**WIP**\" since this PR is built upon #3864.  and will need to be rebased once that has been merged into `trunk`. However.  I would still appreciate initial reviews since this PR is largely additive.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3911 from rhauch/kafka-5900\n","date":"2017-09-27 13:23:37","modifiedFileCount":"16","status":"M","submitter":"Randall Hauch"},{"authorTime":"2020-01-30 13:54:21","codes":[{"authorDate":"2020-01-30 13:54:21","commitOrder":5,"curCode":"    public void testPreCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(2);\n        expectConversionAndTransformation(2);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 2));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> taskOffsets = new HashMap<>();\n        taskOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(new TopicPartition(TOPIC, 3), new OffsetAndMetadata(FIRST_OFFSET)); \r\n\n        final Map<TopicPartition, OffsetAndMetadata> committableOffsets = new HashMap<>();\n        committableOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        committableOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(taskOffsets);\n        \r\n        EasyMock.expect(consumer.assignment()).andReturn(workerCurrentOffsets.keySet());\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(committableOffsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(committableOffsets, null);\n                return null;\n            }\n        });\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        workerTask.iteration(); \r\n\n        assertEquals(workerCurrentOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n        assertEquals(committableOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-01-30 13:54:21","endLine":709,"groupId":"14066","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/28/5cbbe50b5a80bd8844468b98ac55b43174c402.src","preCode":"    public void testPreCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(2);\n        expectConversionAndTransformation(2);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 2));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> taskOffsets = new HashMap<>();\n        taskOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(new TopicPartition(TOPIC, 3), new OffsetAndMetadata(FIRST_OFFSET)); \r\n\n        final Map<TopicPartition, OffsetAndMetadata> committableOffsets = new HashMap<>();\n        committableOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        committableOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(taskOffsets);\n        \r\n        EasyMock.expect(consumer.assignment()).andReturn(workerCurrentOffsets.keySet());\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(committableOffsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(committableOffsets, null);\n                return null;\n            }\n        });\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        workerTask.iteration(); \r\n\n        assertEquals(workerCurrentOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n        assertEquals(committableOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":644,"status":"M"},{"authorDate":"2020-01-30 13:54:21","commitOrder":5,"curCode":"    public void testIgnoredCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        \r\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(workerStartingOffsets);\n        \r\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-01-30 13:54:21","endLine":758,"groupId":"20217","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoredCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/28/5cbbe50b5a80bd8844468b98ac55b43174c402.src","preCode":"    public void testIgnoredCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        \r\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(workerStartingOffsets);\n        \r\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":712,"status":"M"}],"commitId":"7746301c2643e0037bff3bcb84c41d512937e4c9","commitMessage":"@@@KAFKA-9422: Track the set of topics a connector is using (KIP-558) (#8017)\n\nThis feature corresponds to KIP-558 and extends how the internal status topic (set via `status.storage.topic` distributed worker config) is used to include information that allows Kafka Connect to keep track which topics a connector is using.\n\nThe set of topics a connector is actively using.  is exposed via a new endpoint that is added to the REST API of Connect workers.\n* A `GET /connectors/{name}/topics` request will return the set of topics that have been recorded as active since a connector started or since the set of topics was reset for this connector.\n\nAn additional endpoints allows users to reset the set of active topics for a connector via the second endpoint that this feature is adding:\n* A `PUT /connectors/{name}/topics/reset` request clears the set of active topics. An operator may enable or disable this feature by setting `topic.tracking.enable` (true by default).\n\nThe `topic.tracking.enable` worker config property (true by default) allows an operator to enable/disable the entire feature. Or if the feature is enabled.  the `topic.tracking.allow.reset` worker config property (true by default) allows an operator to control whether reset requests submitted to the Connect REST API are allowed.\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\nReviewer: Randall Hauch <rhauch@gmail.com>","date":"2020-01-30 13:54:21","modifiedFileCount":"17","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2020-01-30 13:54:21","codes":[{"authorDate":"2021-02-05 01:15:49","commitOrder":6,"curCode":"    public void testPreCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(2);\n        expectConversionAndTransformation(2);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 2));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> taskOffsets = new HashMap<>();\n        taskOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(new TopicPartition(TOPIC, 3), new OffsetAndMetadata(FIRST_OFFSET)); \r\n\n        final Map<TopicPartition, OffsetAndMetadata> committableOffsets = new HashMap<>();\n        committableOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        committableOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(taskOffsets);\n        \r\n        EasyMock.expect(consumer.assignment()).andReturn(workerCurrentOffsets.keySet());\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(committableOffsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(() -> {\n            callback.getValue().onComplete(committableOffsets, null);\n            return null;\n        });\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        workerTask.iteration(); \r\n\n        assertEquals(workerCurrentOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n        assertEquals(committableOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 01:15:49","endLine":799,"groupId":"14066","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ac/b51383de4f794359bad73f0d9fcebb86d1aacd.src","preCode":"    public void testPreCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(2);\n        expectConversionAndTransformation(2);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 2));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> taskOffsets = new HashMap<>();\n        taskOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(new TopicPartition(TOPIC, 3), new OffsetAndMetadata(FIRST_OFFSET)); \r\n\n        final Map<TopicPartition, OffsetAndMetadata> committableOffsets = new HashMap<>();\n        committableOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        committableOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(taskOffsets);\n        \r\n        EasyMock.expect(consumer.assignment()).andReturn(workerCurrentOffsets.keySet());\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(committableOffsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                callback.getValue().onComplete(committableOffsets, null);\n                return null;\n            }\n        });\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        workerTask.iteration(); \r\n\n        assertEquals(workerCurrentOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n        assertEquals(committableOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":737,"status":"M"},{"authorDate":"2020-01-30 13:54:21","commitOrder":6,"curCode":"    public void testIgnoredCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        \r\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(workerStartingOffsets);\n        \r\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-01-30 13:54:21","endLine":758,"groupId":"20217","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoredCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/28/5cbbe50b5a80bd8844468b98ac55b43174c402.src","preCode":"    public void testIgnoredCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        \r\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(workerStartingOffsets);\n        \r\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":712,"status":"N"}],"commitId":"c19a35d1b740c85559a7ff4e882fc95b4737808d","commitMessage":"@@@KAFKA-10835: Replace Runnable and Callable overrides with lambdas in Connect (#9867)\n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 01:15:49","modifiedFileCount":"50","status":"M","submitter":"Lev Zemlyanov"},{"authorTime":"2021-02-05 09:08:56","codes":[{"authorDate":"2021-02-05 09:08:56","commitOrder":7,"curCode":"    public void testPreCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(2);\n        expectConversionAndTransformation(2);\n        sinkTask.put(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 2));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> taskOffsets = new HashMap<>();\n        taskOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(new TopicPartition(TOPIC, 3), new OffsetAndMetadata(FIRST_OFFSET)); \r\n\n        final Map<TopicPartition, OffsetAndMetadata> committableOffsets = new HashMap<>();\n        committableOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        committableOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(taskOffsets);\n        \r\n        EasyMock.expect(consumer.assignment()).andReturn(workerCurrentOffsets.keySet());\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(committableOffsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(() -> {\n            callback.getValue().onComplete(committableOffsets, null);\n            return null;\n        });\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        workerTask.iteration(); \r\n\n        assertEquals(workerCurrentOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n        assertEquals(committableOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 09:08:56","endLine":799,"groupId":"104885","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a7/d68a61520a213f7c399dae8550a4eb246f1ca6.src","preCode":"    public void testPreCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(2);\n        expectConversionAndTransformation(2);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 2));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> taskOffsets = new HashMap<>();\n        taskOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET + 1)); \r\n        taskOffsets.put(new TopicPartition(TOPIC, 3), new OffsetAndMetadata(FIRST_OFFSET)); \r\n\n        final Map<TopicPartition, OffsetAndMetadata> committableOffsets = new HashMap<>();\n        committableOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        committableOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(taskOffsets);\n        \r\n        EasyMock.expect(consumer.assignment()).andReturn(workerCurrentOffsets.keySet());\n        final Capture<OffsetCommitCallback> callback = EasyMock.newCapture();\n        consumer.commitAsync(EasyMock.eq(committableOffsets), EasyMock.capture(callback));\n        EasyMock.expectLastCall().andAnswer(() -> {\n            callback.getValue().onComplete(committableOffsets, null);\n            return null;\n        });\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        workerTask.iteration(); \r\n\n        assertEquals(workerCurrentOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n        assertEquals(committableOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":737,"status":"M"},{"authorDate":"2021-02-05 09:08:56","commitOrder":7,"curCode":"    public void testIgnoredCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        \r\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(workerStartingOffsets);\n        \r\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 09:08:56","endLine":848,"groupId":"104885","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testIgnoredCommit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a7/d68a61520a213f7c399dae8550a4eb246f1ca6.src","preCode":"    public void testIgnoredCommit() throws Exception {\n        createTask(initialState);\n\n        expectInitializeTask();\n        expectTaskGetTopic(true);\n\n        \r\n        expectPollInitialAssignment();\n\n        \r\n        expectConsumerPoll(1);\n        expectConversionAndTransformation(1);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        final Map<TopicPartition, OffsetAndMetadata> workerStartingOffsets = new HashMap<>();\n        workerStartingOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET));\n        workerStartingOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        final Map<TopicPartition, OffsetAndMetadata> workerCurrentOffsets = new HashMap<>();\n        workerCurrentOffsets.put(TOPIC_PARTITION, new OffsetAndMetadata(FIRST_OFFSET + 1));\n        workerCurrentOffsets.put(TOPIC_PARTITION2, new OffsetAndMetadata(FIRST_OFFSET));\n\n        \r\n        sinkTask.preCommit(workerCurrentOffsets);\n        EasyMock.expectLastCall().andReturn(workerStartingOffsets);\n        \r\n        expectConsumerPoll(0);\n        sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.initializeAndStart();\n        workerTask.iteration(); \r\n\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"currentOffsets\"));\n        assertEquals(workerStartingOffsets, Whitebox.<Map<TopicPartition, OffsetAndMetadata>>getInternalState(workerTask, \"lastCommittedOffsets\"));\n\n        workerTask.iteration(); \r\n\n        sinkTaskContext.getValue().requestCommit();\n        workerTask.iteration(); \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":802,"status":"M"}],"commitId":"07843cfbf4e3e7a2d26d63904bbf0da0fcd07ca2","commitMessage":"@@@KAFKA-10834: Remove redundant type casts in Connect (#10053)\n\nCleanup up to remove redundant type casts in Connect and use the diamond operator when needed \n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 09:08:56","modifiedFileCount":"41","status":"M","submitter":"Lev Zemlyanov"}]
