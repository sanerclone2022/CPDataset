[{"authorTime":"2018-05-18 02:28:45","codes":[{"authorDate":"2018-05-08 00:21:20","commitOrder":5,"curCode":"    public void shouldMergeTwoStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(Utils.mkList(\"A:aa\", \"B:bb\", \"C:cc\", \"D:dd\"), processorSupplier.theCapturedProcessor().processed);\n    }\n","date":"2018-05-08 00:21:20","endLine":510,"groupId":"1877","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldMergeTwoStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/e8aaae0266c455eb286e435eb2eabf31f9c6ea.src","preCode":"    public void shouldMergeTwoStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(Utils.mkList(\"A:aa\", \"B:bb\", \"C:cc\", \"D:dd\"), processorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":492,"status":"NB"},{"authorDate":"2018-05-18 02:28:45","commitOrder":5,"curCode":"    public void shouldMergeStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        final MockProcessorSupplier<String, String> processorSupplier = new MockProcessorSupplier<>();\n        merged.process(processorSupplier);\n\n        final ConsumerRecordFactory<String, String> recordFactory = new ConsumerRecordFactory<>(new StringSerializer(), new StringSerializer());\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(Utils.mkList(\"A:aa\", \"B:bb\", \"C:cc\", \"D:dd\"), processorSupplier.theCapturedProcessor().processed);\n    }\n","date":"2018-05-18 02:28:45","endLine":205,"groupId":"12367","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldMergeStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0a/1e6df3622fd8f94604bf8985f6d3bea31f26de.src","preCode":"    public void shouldMergeStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        final MockProcessorSupplier<String, String> processorSupplier = new MockProcessorSupplier<>();\n        merged.process(processorSupplier);\n\n        final ConsumerRecordFactory<String, String> recordFactory = new ConsumerRecordFactory<>(new StringSerializer(), new StringSerializer());\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(Utils.mkList(\"A:aa\", \"B:bb\", \"C:cc\", \"D:dd\"), processorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"B"}],"commitId":"1a324d784cfc53288730b7c1b5c1bde0685e4686","commitMessage":"@@@KAFKA-6729: Reuse source topics for source KTable's materialized store's changelog (#5017)\n\n1. In InternalTopologyBuilder#topicGroups.  which is used in StreamsPartitionAssignor.  look for book-kept storeToChangelogTopic map before creating a new internal changelog topics. In this way if the source KTable is created.  its source topic stored in storeToChangelogTopic will be used.\n\n2. Added unit test (confirmed that without 1) it will fail).\n\n3. MINOR: removed TODOs that are related to removed KStreamBuilder.\n\n4. MINOR: removed TODOs in StreamsBuilderTest util functions and replaced with TopologyWrapper.\n\n5. MINOR: removed StreamsBuilderTest#testFrom as it is already covered by TopologyTest#shouldNotAllowToAddSourcesWithSameName.  plus it requires KStreamImpl.SOURCE_NAME which should be a package private field of the KStreamImpl.\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Matthias\n J. Sax <matthias@confluent.io>","date":"2018-05-18 02:28:45","modifiedFileCount":"17","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-11-13 14:18:59","codes":[{"authorDate":"2018-11-13 14:18:59","commitOrder":6,"curCode":"    public void shouldMergeTwoStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(asList(\"A:aa\", \"B:bb\", \"C:cc\", \"D:dd\"), processorSupplier.theCapturedProcessor().processed);\n    }\n","date":"2018-11-13 14:18:59","endLine":686,"groupId":"1877","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldMergeTwoStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/3492ca5c8360c27d44d06b7a6de651e6f4c02e.src","preCode":"    public void shouldMergeTwoStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(Utils.mkList(\"A:aa\", \"B:bb\", \"C:cc\", \"D:dd\"), processorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":668,"status":"M"},{"authorDate":"2018-11-13 14:18:59","commitOrder":6,"curCode":"    public void shouldMergeStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        final MockProcessorSupplier<String, String> processorSupplier = new MockProcessorSupplier<>();\n        merged.process(processorSupplier);\n\n        final ConsumerRecordFactory<String, String> recordFactory = new ConsumerRecordFactory<>(new StringSerializer(), new StringSerializer());\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(asList(\"A:aa\", \"B:bb\", \"C:cc\", \"D:dd\"), processorSupplier.theCapturedProcessor().processed);\n    }\n","date":"2018-11-13 14:18:59","endLine":221,"groupId":"12367","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldMergeStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/1323d34b1678923df4bf36718282be2feb269e.src","preCode":"    public void shouldMergeStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        final MockProcessorSupplier<String, String> processorSupplier = new MockProcessorSupplier<>();\n        merged.process(processorSupplier);\n\n        final ConsumerRecordFactory<String, String> recordFactory = new ConsumerRecordFactory<>(new StringSerializer(), new StringSerializer());\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(Utils.mkList(\"A:aa\", \"B:bb\", \"C:cc\", \"D:dd\"), processorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"M"}],"commitId":"12f310d50e7f5b1c18c4f61a119a6cd830da3bc0","commitMessage":"@@@KAFKA-7612: Fix javac warnings and enable warnings as errors (#5900)\n\n- Use Xlint:all with 3 exclusions (filed KAFKA-7613 to remove the exclusions)\n- Use the same javac options when compiling tests (seems accidental that\nwe didn't do this before)\n- Replaced several deprecated method calls with non-deprecated ones:\n  - `KafkaConsumer.poll(long)` and `KafkaConsumer.close(long)`\n  - `Class.newInstance` and `new Integer/Long` (deprecated since Java 9)\n  - `scala.Console` (deprecated in Scala 2.11)\n  - `PartitionData` taking a timestamp (one of them seemingly a bug)\n  - `JsonMappingException` single parameter constructor\n- Fix unnecessary usage of raw types in several places.\n- Add @SuppressWarnings for deprecations.  unchecked and switch fallthrough in\nseveral places.\n- Scala clean-ups (var -> val.  ETA expansion warnings.  avoid reflective calls)\n- Use lambdas to simplify code in a few places\n- Add @SafeVarargs.  fix varargs usage and remove unnecessary `Utils.mkList` method\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Manikumar Reddy <manikumar.reddy@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Stanislav Kozlovski <stanislav_kozlovski@outlook.com>","date":"2018-11-13 14:18:59","modifiedFileCount":"146","status":"M","submitter":"Ismael Juma"},{"authorTime":"2019-03-20 08:27:32","codes":[{"authorDate":"2019-03-20 08:27:32","commitOrder":7,"curCode":"    public void shouldMergeTwoStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(asList(\"A:aa (ts: 0)\", \"B:bb (ts: 0)\", \"C:cc (ts: 0)\", \"D:dd (ts: 0)\"), processorSupplier.theCapturedProcessor().processed);\n    }\n","date":"2019-03-20 08:27:32","endLine":662,"groupId":"1877","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldMergeTwoStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3b/450b15fa66e6fb13598c240b75577bcb9a9cae.src","preCode":"    public void shouldMergeTwoStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(asList(\"A:aa\", \"B:bb\", \"C:cc\", \"D:dd\"), processorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":644,"status":"M"},{"authorDate":"2019-03-20 08:27:32","commitOrder":7,"curCode":"    public void shouldMergeStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        final MockProcessorSupplier<String, String> processorSupplier = new MockProcessorSupplier<>();\n        merged.process(processorSupplier);\n\n        final ConsumerRecordFactory<String, String> recordFactory =\n            new ConsumerRecordFactory<>(new StringSerializer(), new StringSerializer(), 0L);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(asList(\"A:aa (ts: 0)\", \"B:bb (ts: 0)\", \"C:cc (ts: 0)\", \"D:dd (ts: 0)\"), processorSupplier.theCapturedProcessor().processed);\n    }\n","date":"2019-03-20 08:27:32","endLine":290,"groupId":"1877","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldMergeStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/1eac8b9a697f60784e3049f22d23696613fe5d.src","preCode":"    public void shouldMergeStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        final MockProcessorSupplier<String, String> processorSupplier = new MockProcessorSupplier<>();\n        merged.process(processorSupplier);\n\n        final ConsumerRecordFactory<String, String> recordFactory =\n            new ConsumerRecordFactory<>(new StringSerializer(), new StringSerializer());\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(asList(\"A:aa\", \"B:bb\", \"C:cc\", \"D:dd\"), processorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"}],"commitId":"b5ce093a24d0fe212b5d1374330fc720b4913bee","commitMessage":"@@@MINOR: capture result timestamps in Kafka Streams DSL tests (#6447)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2019-03-20 08:27:32","modifiedFileCount":"29","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-07-16 22:16:15","codes":[{"authorDate":"2019-07-16 22:16:15","commitOrder":8,"curCode":"    public void shouldMergeTwoStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(asList(new KeyValueTimestamp<>(\"A\", \"aa\", 0),\n                new KeyValueTimestamp<>(\"B\", \"bb\", 0),\n                new KeyValueTimestamp<>(\"C\", \"cc\", 0),\n                new KeyValueTimestamp<>(\"D\", \"dd\", 0)), processorSupplier.theCapturedProcessor().processed);\n    }\n","date":"2019-07-16 22:16:15","endLine":685,"groupId":"1877","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldMergeTwoStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/35/8be9b176a71bd024dc523a42f7311107febe4a.src","preCode":"    public void shouldMergeTwoStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(asList(\"A:aa (ts: 0)\", \"B:bb (ts: 0)\", \"C:cc (ts: 0)\", \"D:dd (ts: 0)\"), processorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"M"},{"authorDate":"2019-07-16 22:16:15","commitOrder":8,"curCode":"    public void shouldMergeStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        final MockProcessorSupplier<String, String> processorSupplier = new MockProcessorSupplier<>();\n        merged.process(processorSupplier);\n\n        final ConsumerRecordFactory<String, String> recordFactory =\n            new ConsumerRecordFactory<>(new StringSerializer(), new StringSerializer(), 0L);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(asList(new KeyValueTimestamp<>(\"A\", \"aa\", 0),\n                new KeyValueTimestamp<>(\"B\", \"bb\", 0),\n                new KeyValueTimestamp<>(\"C\", \"cc\", 0),\n                new KeyValueTimestamp<>(\"D\", \"dd\", 0)), processorSupplier.theCapturedProcessor().processed);\n    }\n","date":"2019-07-16 22:16:15","endLine":315,"groupId":"1877","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldMergeStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/b471c77ad53cba30449f246fedb81fd747f328.src","preCode":"    public void shouldMergeStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        final MockProcessorSupplier<String, String> processorSupplier = new MockProcessorSupplier<>();\n        merged.process(processorSupplier);\n\n        final ConsumerRecordFactory<String, String> recordFactory =\n            new ConsumerRecordFactory<>(new StringSerializer(), new StringSerializer(), 0L);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(asList(\"A:aa (ts: 0)\", \"B:bb (ts: 0)\", \"C:cc (ts: 0)\", \"D:dd (ts: 0)\"), processorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"}],"commitId":"00757cd99f6d8bf2760c3708d307347f4cde65f6","commitMessage":"@@@KAFKA-8450: Using KeyValueTimeStamp in MockProcessor (#6933)\n\nThis PR is to use KeyValueTimeStamp Object in MockProcessor Test file instead of String and change all the dependency files with broken test cases.\n\nReviewers: Kamal Chandraprakash.  Matthias J. Sax <mjsax@apache.org>.   Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-07-16 22:16:15","modifiedFileCount":"28","status":"M","submitter":"SuryaTeja Duggi"},{"authorTime":"2019-10-07 16:01:58","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":9,"curCode":"    public void shouldMergeTwoStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic1 =\n                    driver.createInputTopic(topic1, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<String, String> inputTopic2 =\n                    driver.createInputTopic(topic2, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic1.pipeInput(\"A\", \"aa\");\n            inputTopic2.pipeInput(\"B\", \"bb\");\n            inputTopic2.pipeInput(\"C\", \"cc\");\n            inputTopic1.pipeInput(\"D\", \"dd\");\n        }\n\n        assertEquals(asList(new KeyValueTimestamp<>(\"A\", \"aa\", 0),\n                new KeyValueTimestamp<>(\"B\", \"bb\", 0),\n                new KeyValueTimestamp<>(\"C\", \"cc\", 0),\n                new KeyValueTimestamp<>(\"D\", \"dd\", 0)), processorSupplier.theCapturedProcessor().processed);\n    }\n","date":"2019-10-07 16:01:58","endLine":696,"groupId":"6869","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldMergeTwoStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/7584268087c8db0dc1562a73693780387f6820.src","preCode":"    public void shouldMergeTwoStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(asList(new KeyValueTimestamp<>(\"A\", \"aa\", 0),\n                new KeyValueTimestamp<>(\"B\", \"bb\", 0),\n                new KeyValueTimestamp<>(\"C\", \"cc\", 0),\n                new KeyValueTimestamp<>(\"D\", \"dd\", 0)), processorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":671,"status":"M"},{"authorDate":"2019-10-07 16:01:58","commitOrder":9,"curCode":"    public void shouldMergeStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        final MockProcessorSupplier<String, String> processorSupplier = new MockProcessorSupplier<>();\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic1 =\n                    driver.createInputTopic(topic1, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<String, String> inputTopic2 =\n                    driver.createInputTopic(topic2, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n\n            inputTopic1.pipeInput(\"A\", \"aa\");\n            inputTopic2.pipeInput(\"B\", \"bb\");\n            inputTopic2.pipeInput(\"C\", \"cc\");\n            inputTopic1.pipeInput(\"D\", \"dd\");\n        }\n\n        assertEquals(asList(new KeyValueTimestamp<>(\"A\", \"aa\", 0),\n                new KeyValueTimestamp<>(\"B\", \"bb\", 0),\n                new KeyValueTimestamp<>(\"C\", \"cc\", 0),\n                new KeyValueTimestamp<>(\"D\", \"dd\", 0)), processorSupplier.theCapturedProcessor().processed);\n    }\n","date":"2019-10-07 16:01:58","endLine":317,"groupId":"6869","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldMergeStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/1829771ef77d4cb3aedb45b870f8a508499d4b.src","preCode":"    public void shouldMergeStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        final MockProcessorSupplier<String, String> processorSupplier = new MockProcessorSupplier<>();\n        merged.process(processorSupplier);\n\n        final ConsumerRecordFactory<String, String> recordFactory =\n            new ConsumerRecordFactory<>(new StringSerializer(), new StringSerializer(), 0L);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            driver.pipeInput(recordFactory.create(topic1, \"A\", \"aa\"));\n            driver.pipeInput(recordFactory.create(topic2, \"B\", \"bb\"));\n            driver.pipeInput(recordFactory.create(topic2, \"C\", \"cc\"));\n            driver.pipeInput(recordFactory.create(topic1, \"D\", \"dd\"));\n        }\n\n        assertEquals(asList(new KeyValueTimestamp<>(\"A\", \"aa\", 0),\n                new KeyValueTimestamp<>(\"B\", \"bb\", 0),\n                new KeyValueTimestamp<>(\"C\", \"cc\", 0),\n                new KeyValueTimestamp<>(\"D\", \"dd\", 0)), processorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":290,"status":"M"}],"commitId":"a5a6938c69f4310f7ec519036f0df77d8022326a","commitMessage":"@@@KAFKA-8233: TopologyTestDriver test input and output usability improvements (#7378)\n\nImplements KIP-470\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-07 16:01:58","modifiedFileCount":"47","status":"M","submitter":"Jukka Karvanen"},{"authorTime":"2020-08-21 03:06:16","codes":[{"authorDate":"2020-08-21 03:06:16","commitOrder":10,"curCode":"    public void shouldMergeTwoStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic1 =\n                driver.createInputTopic(topic1, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<String, String> inputTopic2 =\n                driver.createInputTopic(topic2, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic1.pipeInput(\"A\", \"aa\");\n            inputTopic2.pipeInput(\"B\", \"bb\");\n            inputTopic2.pipeInput(\"C\", \"cc\");\n            inputTopic1.pipeInput(\"D\", \"dd\");\n        }\n\n        assertEquals(asList(new KeyValueTimestamp<>(\"A\", \"aa\", 0),\n            new KeyValueTimestamp<>(\"B\", \"bb\", 0),\n            new KeyValueTimestamp<>(\"C\", \"cc\", 0),\n            new KeyValueTimestamp<>(\"D\", \"dd\", 0)), processorSupplier.theCapturedProcessor().processed());\n    }\n","date":"2020-08-21 03:06:16","endLine":1669,"groupId":"101621","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldMergeTwoStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/5f7fc463f20a7c0613e59f500c68a589e9615a.src","preCode":"    public void shouldMergeTwoStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic1 =\n                driver.createInputTopic(topic1, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<String, String> inputTopic2 =\n                driver.createInputTopic(topic2, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic1.pipeInput(\"A\", \"aa\");\n            inputTopic2.pipeInput(\"B\", \"bb\");\n            inputTopic2.pipeInput(\"C\", \"cc\");\n            inputTopic1.pipeInput(\"D\", \"dd\");\n        }\n\n        assertEquals(asList(new KeyValueTimestamp<>(\"A\", \"aa\", 0),\n            new KeyValueTimestamp<>(\"B\", \"bb\", 0),\n            new KeyValueTimestamp<>(\"C\", \"cc\", 0),\n            new KeyValueTimestamp<>(\"D\", \"dd\", 0)), processorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1644,"status":"M"},{"authorDate":"2020-08-21 03:06:16","commitOrder":10,"curCode":"    public void shouldMergeStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        final MockProcessorSupplier<String, String> processorSupplier = new MockProcessorSupplier<>();\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic1 =\n                driver.createInputTopic(topic1, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<String, String> inputTopic2 =\n                driver.createInputTopic(topic2, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n\n            inputTopic1.pipeInput(\"A\", \"aa\");\n            inputTopic2.pipeInput(\"B\", \"bb\");\n            inputTopic2.pipeInput(\"C\", \"cc\");\n            inputTopic1.pipeInput(\"D\", \"dd\");\n        }\n\n        assertEquals(asList(new KeyValueTimestamp<>(\"A\", \"aa\", 0),\n                            new KeyValueTimestamp<>(\"B\", \"bb\", 0),\n                            new KeyValueTimestamp<>(\"C\", \"cc\", 0),\n                            new KeyValueTimestamp<>(\"D\", \"dd\", 0)), processorSupplier.theCapturedProcessor().processed());\n    }\n","date":"2020-08-21 03:06:16","endLine":383,"groupId":"101621","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldMergeStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/12/9a409e8bd4cf40c8064ddf1ee509c9724b2c81.src","preCode":"    public void shouldMergeStreams() {\n        final String topic1 = \"topic-1\";\n        final String topic2 = \"topic-2\";\n\n        final KStream<String, String> source1 = builder.stream(topic1);\n        final KStream<String, String> source2 = builder.stream(topic2);\n        final KStream<String, String> merged = source1.merge(source2);\n\n        final MockProcessorSupplier<String, String> processorSupplier = new MockProcessorSupplier<>();\n        merged.process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic1 =\n                    driver.createInputTopic(topic1, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<String, String> inputTopic2 =\n                    driver.createInputTopic(topic2, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n\n            inputTopic1.pipeInput(\"A\", \"aa\");\n            inputTopic2.pipeInput(\"B\", \"bb\");\n            inputTopic2.pipeInput(\"C\", \"cc\");\n            inputTopic1.pipeInput(\"D\", \"dd\");\n        }\n\n        assertEquals(asList(new KeyValueTimestamp<>(\"A\", \"aa\", 0),\n                new KeyValueTimestamp<>(\"B\", \"bb\", 0),\n                new KeyValueTimestamp<>(\"C\", \"cc\", 0),\n                new KeyValueTimestamp<>(\"D\", \"dd\", 0)), processorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"M"}],"commitId":"88d4bc4641064d21a481ba3b8562a4c97703d64d","commitMessage":"@@@KAFKA-10379: Implement the KIP-478 StreamBuilder#addGlobalStore() (#9148)\n\nFrom KIP-478.  implement the new StreamBuilder#addGlobalStore() overload\nthat takes a stateUpdateSupplier fully typed Processor<KIn.  VIn.  Void.  Void>.\n\nWhere necessary.  use the adapters to make the old APIs defer to the new ones. \nas well as limiting the scope of this change set.\n\nReviewers: Boyang Chen <boyang@apache.org>","date":"2020-08-21 03:06:16","modifiedFileCount":"41","status":"M","submitter":"John Roesler"}]
