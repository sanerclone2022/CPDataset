[{"authorTime":"2020-10-08 21:08:24","codes":[{"authorDate":"2020-10-08 21:08:24","commitOrder":1,"curCode":"    private void setUpCloseTests() {\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context = new InternalMockProcessorContext(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, null));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","date":"2020-10-08 21:08:24","endLine":229,"groupId":"6475","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpCloseTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/84e2ca706b69fb6c55f307ac1b6f2ba88a3321.src","preCode":"    private void setUpCloseTests() {\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context = new InternalMockProcessorContext(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, null));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingInMemorySessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"B"},{"authorDate":"2020-10-08 21:08:24","commitOrder":1,"curCode":"    private void setUpCloseTests() {\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context =\n            new InternalMockProcessorContext(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, null));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","date":"2020-10-08 21:08:24","endLine":214,"groupId":"6475","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUpCloseTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d4/72c7f5637dbcec95a7d99980dd6e71c8c0d2bc.src","preCode":"    private void setUpCloseTests() {\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context =\n            new InternalMockProcessorContext(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, null));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"B"}],"commitId":"d0e6943bdd048aa6e0a4dbbdad3c8da460db16dc","commitMessage":"@@@KAFKA-9929: Support backward iterator on SessionStore (#9139)\n\nImplements KIP-617 for `SessionStore`\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-10-08 21:08:24","modifiedFileCount":"14","status":"B","submitter":"Jorge Esteban Quilcate Otoya"},{"authorTime":"2021-05-07 06:29:26","codes":[{"authorDate":"2020-10-08 21:08:24","commitOrder":2,"curCode":"    private void setUpCloseTests() {\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context = new InternalMockProcessorContext(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, null));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","date":"2020-10-08 21:08:24","endLine":229,"groupId":"6475","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpCloseTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/84e2ca706b69fb6c55f307ac1b6f2ba88a3321.src","preCode":"    private void setUpCloseTests() {\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context = new InternalMockProcessorContext(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, null));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingInMemorySessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"N"},{"authorDate":"2021-05-07 06:29:26","commitOrder":2,"curCode":"    private void setUpCloseTests() {\n        underlyingStore.close();\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context =\n            new InternalMockProcessorContext(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, null));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","date":"2021-05-07 06:29:26","endLine":215,"groupId":"6475","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUpCloseTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7f/8a394c278c0927f6044d3283fcb7a562cac014.src","preCode":"    private void setUpCloseTests() {\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context =\n            new InternalMockProcessorContext(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, null));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"}],"commitId":"90fc875e24121fd0a39143983ce9eb8a93849d7e","commitMessage":"@@@KAFKA-8897: Upgrade RocksDB to 6.19.3 (#10568)\n\nThis PR upgrades RocksDB to 6.19.3. After the upgrade the Gradle build exited with code 134 due to SIGABRT signals (\"Pure virtual function called!\") coming from the C++ part of RocksDB. This error was caused by RocksDB state stores not properly closed in Streams' code. This PR adds the missing closings and updates the RocksDB option adapter.\n\nReviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-05-07 06:29:26","modifiedFileCount":"22","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-05-29 03:59:35","codes":[{"authorDate":"2021-05-29 03:59:35","commitOrder":3,"curCode":"    private void setUpCloseTests() {\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context = new InternalMockProcessorContext<>(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, null));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","date":"2021-05-29 03:59:35","endLine":230,"groupId":"2474","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpCloseTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/7b35f9dd9f06baeb7e43484480e645c5241a73.src","preCode":"    private void setUpCloseTests() {\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context = new InternalMockProcessorContext(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, null));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingInMemorySessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2021-05-29 03:59:35","commitOrder":3,"curCode":"    private void setUpCloseTests() {\n        underlyingStore.close();\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context =\n            new InternalMockProcessorContext<>(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, null));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","date":"2021-05-29 03:59:35","endLine":216,"groupId":"2474","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUpCloseTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/018bf39edc7b9c530d3429ed43e42b0649881b.src","preCode":"    private void setUpCloseTests() {\n        underlyingStore.close();\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context =\n            new InternalMockProcessorContext(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, null));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"}],"commitId":"f207bac20cf19e841d3ee8dbcba03b1c30d88836","commitMessage":"@@@KAFKA-8410: KTableProcessor migration groundwork (#10744)\n\n* Lay the groundwork for migrating KTable Processors to the new PAPI.\n* Migrate the KTableFilter processor to prove that the groundwork works.\n\nThis is an effort to help break up #10507 into multiple PRs.\n\nReviewers: Boyang Chen <boyang@apache.org>","date":"2021-05-29 03:59:35","modifiedFileCount":"69","status":"M","submitter":"John Roesler"},{"authorTime":"2021-06-10 13:51:36","codes":[{"authorDate":"2021-06-10 13:51:36","commitOrder":4,"curCode":"    private void setUpCloseTests() {\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context = new InternalMockProcessorContext<>(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, new RecordHeaders()));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","date":"2021-06-10 13:51:36","endLine":231,"groupId":"101001","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setUpCloseTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/67/258e74177abd1b6056304d8d5566d8c2bc0707.src","preCode":"    private void setUpCloseTests() {\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context = new InternalMockProcessorContext<>(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, null));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingInMemorySessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2021-06-10 13:51:36","commitOrder":4,"curCode":"    private void setUpCloseTests() {\n        underlyingStore.close();\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context =\n            new InternalMockProcessorContext<>(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, new RecordHeaders()));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","date":"2021-06-10 13:51:36","endLine":217,"groupId":"101001","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setUpCloseTests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/88/40da4d5f180be7ac1f0d55d5be9da33ae81526.src","preCode":"    private void setUpCloseTests() {\n        underlyingStore.close();\n        underlyingStore = EasyMock.createNiceMock(SessionStore.class);\n        EasyMock.expect(underlyingStore.name()).andStubReturn(\"store-name\");\n        EasyMock.expect(underlyingStore.isOpen()).andStubReturn(true);\n        EasyMock.replay(underlyingStore);\n        cachingStore = new CachingSessionStore(underlyingStore, SEGMENT_INTERVAL);\n        cache = EasyMock.niceMock(ThreadCache.class);\n        final InternalMockProcessorContext context =\n            new InternalMockProcessorContext<>(TestUtils.tempDirectory(), null, null, null, cache);\n        context.setRecordContext(new ProcessorRecordContext(10, 0, 0, TOPIC, null));\n        cachingStore.init((StateStoreContext) context, cachingStore);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"}],"commitId":"953ec9810099d6e5f41541de46c0ceebf4372790","commitMessage":"@@@MINOR: Improve Kafka Streams JavaDocs with regard to record metadata (#10810)\n\nReviewers: Luke Chen <howuon@gmail.com>.  Josep Prat <josep.prat@aiven.io>.  John Roesler <john@confluent.io>","date":"2021-06-10 13:51:36","modifiedFileCount":"28","status":"M","submitter":"Matthias J. Sax"}]
