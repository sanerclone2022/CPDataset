[{"authorTime":"2019-04-27 02:44:38","codes":[{"authorDate":"2019-03-19 04:26:09","commitOrder":4,"curCode":"    public void testJoinGroupRequestWithMemberIdRequired() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        final String memberId = \"memberId\";\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.MEMBER_ID_REQUIRED));\n\n        mockClient.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                if (!(body instanceof JoinGroupRequest)) {\n                    return false;\n                }\n                JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n                if (!joinGroupRequest.data().memberId().equals(memberId)) {\n                    return false;\n                }\n                return true;\n            }\n        }, joinGroupResponse(Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.MEMBER_ID_REQUIRED.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasValidMemberId());\n        assertTrue(coordinator.hasMatchingGenerationId(generation));\n        future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REBALANCE_TIMEOUT_MS)));\n    }\n","date":"2019-03-19 04:26:09","endLine":235,"groupId":"13627","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinGroupRequestWithMemberIdRequired","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dc/8ea4642d54aa3c3e4e74dc685ab0dd4ef8e798.src","preCode":"    public void testJoinGroupRequestWithMemberIdRequired() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        final String memberId = \"memberId\";\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.MEMBER_ID_REQUIRED));\n\n        mockClient.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                if (!(body instanceof JoinGroupRequest)) {\n                    return false;\n                }\n                JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n                if (!joinGroupRequest.data().memberId().equals(memberId)) {\n                    return false;\n                }\n                return true;\n            }\n        }, joinGroupResponse(Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.MEMBER_ID_REQUIRED.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasValidMemberId());\n        assertTrue(coordinator.hasMatchingGenerationId(generation));\n        future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REBALANCE_TIMEOUT_MS)));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"NB"},{"authorDate":"2019-04-27 02:44:38","commitOrder":4,"curCode":"    public void testJoinGroupRequestWithGroupInstanceIdNotFound() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        final String memberId = \"memberId\";\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.UNKNOWN_MEMBER_ID.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasMatchingGenerationId(generation));\n    }\n","date":"2019-04-27 02:44:38","endLine":278,"groupId":"20952","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupRequestWithGroupInstanceIdNotFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/f0ff5f15a65205fd918d564f7a5a481618bfc1.src","preCode":"    public void testJoinGroupRequestWithGroupInstanceIdNotFound() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        final String memberId = \"memberId\";\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.UNKNOWN_MEMBER_ID.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasMatchingGenerationId(generation));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"B"}],"commitId":"0f995ba6be1c0f949320b0879241d9a7c9578436","commitMessage":"@@@KAFKA-7862 & KIP-345 part-one: Add static membership logic to JoinGroup protocol (#6177)\n\nThis is the first diff for the implementation of JoinGroup logic for static membership. The goal of this diff contains:\n\n* Add group.instance.id to be unique identifier for consumer instances.  provided by end user;\nModify group coordinator to accept JoinGroupRequest with/without static membership.  refactor the logic for readability and code reusability.\n* Add client side support for incorporating static membership changes.  including new config for group.instance.id.  apply stream thread client id by default.  and new join group exception handling.\n* Increase max session timeout to 30 min for more user flexibility if they are inclined to tolerate partial unavailability than burdening rebalance.\n* Unit tests for each module changes.  especially on the group coordinator logic. Crossing the possibilities like:\n6.1 Dynamic/Static member\n6.2 Known/Unknown member id\n6.3 Group stable/unstable\n6.4 Leader/Follower\n\nThe rest of the 345 change will be broken down to 4 separate diffs:\n\n* Avoid kicking out members through rebalance.timeout.  only do the kick out through session timeout.\n* Changes around LeaveGroup logic.  including version bumping.  broker logic.  client logic.  etc.\n* Admin client changes to add ability to batch remove static members\n* Deprecate group.initial.rebalance.delay\n\nReviewers: Liquan Pei <liquanpei@gmail.com>.  Stanislav Kozlovski <familyguyuser192@windowslive.com>.  Jason Gustafson <jason@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-04-27 02:44:38","modifiedFileCount":"13","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-07-27 14:13:37","codes":[{"authorDate":"2019-07-27 14:13:37","commitOrder":5,"curCode":"    public void testJoinGroupRequestWithMemberIdRequired() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(defaultGeneration, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.MEMBER_ID_REQUIRED));\n\n        mockClient.prepareResponse(body -> {\n            if (!(body instanceof JoinGroupRequest)) {\n                return false;\n            }\n            JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n            return joinGroupRequest.data().memberId().equals(memberId);\n        }, joinGroupResponse(Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.MEMBER_ID_REQUIRED.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasValidMemberId());\n        assertTrue(coordinator.hasMatchingGenerationId(defaultGeneration));\n        future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REBALANCE_TIMEOUT_MS)));\n    }\n","date":"2019-07-27 14:13:37","endLine":262,"groupId":"14977","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinGroupRequestWithMemberIdRequired","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/264b3f359172e214ecb952d70aaedafbd25378.src","preCode":"    public void testJoinGroupRequestWithMemberIdRequired() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        final String memberId = \"memberId\";\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.MEMBER_ID_REQUIRED));\n\n        mockClient.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                if (!(body instanceof JoinGroupRequest)) {\n                    return false;\n                }\n                JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n                if (!joinGroupRequest.data().memberId().equals(memberId)) {\n                    return false;\n                }\n                return true;\n            }\n        }, joinGroupResponse(Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.MEMBER_ID_REQUIRED.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasValidMemberId());\n        assertTrue(coordinator.hasMatchingGenerationId(generation));\n        future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REBALANCE_TIMEOUT_MS)));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2019-07-27 14:13:37","commitOrder":5,"curCode":"    public void testJoinGroupRequestWithGroupInstanceIdNotFound() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(defaultGeneration, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.UNKNOWN_MEMBER_ID.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasMatchingGenerationId(defaultGeneration));\n    }\n","date":"2019-07-27 14:13:37","endLine":331,"groupId":"20952","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupRequestWithGroupInstanceIdNotFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/264b3f359172e214ecb952d70aaedafbd25378.src","preCode":"    public void testJoinGroupRequestWithGroupInstanceIdNotFound() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        final String memberId = \"memberId\";\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.UNKNOWN_MEMBER_ID.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasMatchingGenerationId(generation));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"74c90f46c34727be9484e9826ff543b451ada775","commitMessage":"@@@KAFKA-8221; Add batch leave group request (#6714)\n\nThis patch is part of KIP-345. We are aiming to support batch leave group request issued from admin client. This diff is the first effort to bump leave group request version.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2019-07-27 14:13:37","modifiedFileCount":"10","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-10-10 01:34:19","codes":[{"authorDate":"2019-07-27 14:13:37","commitOrder":6,"curCode":"    public void testJoinGroupRequestWithMemberIdRequired() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(defaultGeneration, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.MEMBER_ID_REQUIRED));\n\n        mockClient.prepareResponse(body -> {\n            if (!(body instanceof JoinGroupRequest)) {\n                return false;\n            }\n            JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n            return joinGroupRequest.data().memberId().equals(memberId);\n        }, joinGroupResponse(Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.MEMBER_ID_REQUIRED.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasValidMemberId());\n        assertTrue(coordinator.hasMatchingGenerationId(defaultGeneration));\n        future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REBALANCE_TIMEOUT_MS)));\n    }\n","date":"2019-07-27 14:13:37","endLine":262,"groupId":"14977","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinGroupRequestWithMemberIdRequired","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/264b3f359172e214ecb952d70aaedafbd25378.src","preCode":"    public void testJoinGroupRequestWithMemberIdRequired() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(defaultGeneration, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.MEMBER_ID_REQUIRED));\n\n        mockClient.prepareResponse(body -> {\n            if (!(body instanceof JoinGroupRequest)) {\n                return false;\n            }\n            JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n            return joinGroupRequest.data().memberId().equals(memberId);\n        }, joinGroupResponse(Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.MEMBER_ID_REQUIRED.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasValidMemberId());\n        assertTrue(coordinator.hasMatchingGenerationId(defaultGeneration));\n        future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REBALANCE_TIMEOUT_MS)));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"N"},{"authorDate":"2019-10-10 01:34:19","commitOrder":6,"curCode":"    public void testJoinGroupRequestWithGroupInstanceIdNotFound() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(defaultGeneration, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.UNKNOWN_MEMBER_ID.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasUnknownGeneration());\n    }\n","date":"2019-10-10 01:34:19","endLine":417,"groupId":"20952","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupRequestWithGroupInstanceIdNotFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d6/7fae9122cf5642728fee2a6812404473686318.src","preCode":"    public void testJoinGroupRequestWithGroupInstanceIdNotFound() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(defaultGeneration, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.UNKNOWN_MEMBER_ID.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasMatchingGenerationId(defaultGeneration));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":404,"status":"M"}],"commitId":"fb9b0dfde5f674e2aa9f9948e2f14bc7698413ae","commitMessage":"@@@MINOR: Augment log4j to add generation number in performAssign (#7451)\n\nSince generation is private in AbstractCoordinator.  I need to modify the generation() to let it return the object directly.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2019-10-10 01:34:19","modifiedFileCount":"5","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-01-15 07:04:18","codes":[{"authorDate":"2020-01-15 07:04:18","commitOrder":7,"curCode":"    public void testJoinGroupRequestWithMemberIdRequired() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(defaultGeneration, memberId, JoinGroupRequest.UNKNOWN_MEMBER_ID, Errors.MEMBER_ID_REQUIRED));\n\n        mockClient.prepareResponse(body -> {\n            if (!(body instanceof JoinGroupRequest)) {\n                return false;\n            }\n            JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n            return joinGroupRequest.data().memberId().equals(memberId);\n        }, joinGroupResponse(Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.MEMBER_ID_REQUIRED.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasValidMemberId());\n        assertTrue(coordinator.hasMatchingGenerationId(defaultGeneration));\n        future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REBALANCE_TIMEOUT_MS)));\n    }\n","date":"2020-01-15 07:04:18","endLine":346,"groupId":"104059","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testJoinGroupRequestWithMemberIdRequired","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/b6390cc4864829fe9b8303275baffcc637647f.src","preCode":"    public void testJoinGroupRequestWithMemberIdRequired() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(defaultGeneration, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.MEMBER_ID_REQUIRED));\n\n        mockClient.prepareResponse(body -> {\n            if (!(body instanceof JoinGroupRequest)) {\n                return false;\n            }\n            JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n            return joinGroupRequest.data().memberId().equals(memberId);\n        }, joinGroupResponse(Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.MEMBER_ID_REQUIRED.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasValidMemberId());\n        assertTrue(coordinator.hasMatchingGenerationId(defaultGeneration));\n        future = coordinator.sendJoinGroupRequest();\n        assertTrue(consumerClient.poll(future, mockTime.timer(REBALANCE_TIMEOUT_MS)));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"},{"authorDate":"2020-01-15 07:04:18","commitOrder":7,"curCode":"    public void testJoinGroupRequestWithGroupInstanceIdNotFound() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(defaultGeneration, memberId, JoinGroupRequest.UNKNOWN_MEMBER_ID, Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.UNKNOWN_MEMBER_ID.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasUnknownGeneration());\n    }\n","date":"2020-01-15 07:04:18","endLine":415,"groupId":"104059","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testJoinGroupRequestWithGroupInstanceIdNotFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/b6390cc4864829fe9b8303275baffcc637647f.src","preCode":"    public void testJoinGroupRequestWithGroupInstanceIdNotFound() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(mockTime.timer(0));\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(defaultGeneration, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.UNKNOWN_MEMBER_ID));\n\n        RequestFuture<ByteBuffer> future = coordinator.sendJoinGroupRequest();\n\n        assertTrue(consumerClient.poll(future, mockTime.timer(REQUEST_TIMEOUT_MS)));\n        assertEquals(Errors.UNKNOWN_MEMBER_ID.message(), future.exception().getMessage());\n        assertTrue(coordinator.rejoinNeededOrPending());\n        assertTrue(coordinator.hasUnknownGeneration());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"M"}],"commitId":"ed7c071e07f1f90e4c2895582f61ca090ced3c42","commitMessage":"@@@KAFKA-9365: Add server side change  to include consumer group information within transaction commit (#7897)\n\nTo be able to correctly fence zombie producer txn commit.  we propose to add (member.id.  group.instance.id.  generation) into the transaction commit protocol to raise the same level of correctness guarantee as consumer commit.\n\nMajor changes involve:\n\n1. Upgrade transaction commit protocol with (member.id.  group.instance.id.  generation). The client will fail if the broker is not supporting the new protocol.\n2. Refactor group coordinator logic to handle new txn commit errors such as FENCED_INSTANCE_ID.  UNKNOWN_MEMBER_ID and ILLEGAL_GENERATION. We loose the check on transaction commit when the member.id is set to empty. This is because the member.id check is an add-on safety for producer commit.  and we also need to consider backward compatibility for old producer clients without member.id information. And if producer equips with group.instance.id.  then it must provide a valid member.id (not empty definitely).  the same as a consumer commit.\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-01-15 07:04:18","modifiedFileCount":"10","status":"M","submitter":"Boyang Chen"}]
