[{"authorTime":"2020-09-01 06:22:00","codes":[{"authorDate":"2019-11-20 02:05:09","commitOrder":9,"curCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            internalProcessorContext = (InternalProcessorContext) context;\n            metrics = (StreamsMetricsImpl) context.metrics();\n            final String threadId = Thread.currentThread().getName();\n            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n                threadId,\n                context.taskId().toString(),\n                internalProcessorContext.currentNode().name(),\n                metrics\n            );\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            store = (SessionStore<K, Agg>) context.getStateStore(storeName);\n            tupleForwarder = new SessionTupleForwarder<>(store, context, new SessionCacheFlushListener<>(context), sendOldValues);\n        }\n","date":"2019-11-20 02:05:09","endLine":107,"groupId":"15208","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"(finalProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/3c833e5b646e4fd89a1e4db1428568b88934dc.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            internalProcessorContext = (InternalProcessorContext) context;\n            metrics = (StreamsMetricsImpl) context.metrics();\n            final String threadId = Thread.currentThread().getName();\n            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n                threadId,\n                context.taskId().toString(),\n                internalProcessorContext.currentNode().name(),\n                metrics\n            );\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            store = (SessionStore<K, Agg>) context.getStateStore(storeName);\n            tupleForwarder = new SessionTupleForwarder<>(store, context, new SessionCacheFlushListener<>(context), sendOldValues);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSessionWindowAggregate.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"NB"},{"authorDate":"2020-09-01 06:22:00","commitOrder":9,"curCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            internalProcessorContext = (InternalProcessorContext) context;\n            metrics = internalProcessorContext.metrics();\n            final String threadId = Thread.currentThread().getName();\n            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n                threadId,\n                context.taskId().toString(),\n                internalProcessorContext.currentNode().name(),\n                metrics\n            );\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            windowStore = (TimestampedWindowStore<K, Agg>) context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                windowStore,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","date":"2020-09-01 06:22:00","endLine":107,"groupId":"15208","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"(finalProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3a/c58c3d9864d446059c9c6bfe8325b05fe7e461.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            internalProcessorContext = (InternalProcessorContext) context;\n            metrics = internalProcessorContext.metrics();\n            final String threadId = Thread.currentThread().getName();\n            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n                threadId,\n                context.taskId().toString(),\n                internalProcessorContext.currentNode().name(),\n                metrics\n            );\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            windowStore = (TimestampedWindowStore<K, Agg>) context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                windowStore,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"}],"commitId":"85b6545b8159885c57ab67e08b7185be8a607988","commitMessage":"@@@KAFKA-5636: SlidingWindows (KIP-450) (#9039)\n\nAdd SlidingWindows API.  implementation.  and tests.\nAn edge case and an optimization are left to follow-on work.\n\nImplements: KIP-450\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Matthias J. Sax <mjsax@apache.org>.  John Roesler <vvcephei@apache.org>","date":"2020-09-01 06:22:00","modifiedFileCount":"13","status":"M","submitter":"leah"},{"authorTime":"2021-05-20 05:58:46","codes":[{"authorDate":"2021-05-20 05:58:46","commitOrder":10,"curCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            final StreamsMetricsImpl metrics = (StreamsMetricsImpl) context.metrics();\n            final String threadId = Thread.currentThread().getName();\n            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n                threadId,\n                context.taskId().toString(),\n                ((InternalProcessorContext) context).currentNode().name(),\n                metrics\n            );\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            store = context.getStateStore(storeName);\n            tupleForwarder = new SessionTupleForwarder<>(store, context, new SessionCacheFlushListener<>(context), sendOldValues);\n        }\n","date":"2021-05-20 05:58:46","endLine":103,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"(finalProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/39/869e331bb78a209bfc940984becfe573bef941.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            internalProcessorContext = (InternalProcessorContext) context;\n            metrics = (StreamsMetricsImpl) context.metrics();\n            final String threadId = Thread.currentThread().getName();\n            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n                threadId,\n                context.taskId().toString(),\n                internalProcessorContext.currentNode().name(),\n                metrics\n            );\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            store = (SessionStore<K, Agg>) context.getStateStore(storeName);\n            tupleForwarder = new SessionTupleForwarder<>(store, context, new SessionCacheFlushListener<>(context), sendOldValues);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSessionWindowAggregate.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2021-05-20 05:58:46","commitOrder":10,"curCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            final InternalProcessorContext internalProcessorContext = (InternalProcessorContext) context;\n            final StreamsMetricsImpl metrics = internalProcessorContext.metrics();\n            final String threadId = Thread.currentThread().getName();\n            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n                threadId,\n                context.taskId().toString(),\n                internalProcessorContext.currentNode().name(),\n                metrics\n            );\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(\n                threadId,\n                context.taskId().toString(),\n                metrics\n            );\n            windowStore = context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                windowStore,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","date":"2021-05-20 05:58:46","endLine":109,"groupId":"14009","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"(finalProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/3273f9a5173eeb62ea93fec831c87946c57257.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            internalProcessorContext = (InternalProcessorContext) context;\n            metrics = internalProcessorContext.metrics();\n            final String threadId = Thread.currentThread().getName();\n            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n                threadId,\n                context.taskId().toString(),\n                internalProcessorContext.currentNode().name(),\n                metrics\n            );\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            windowStore = (TimestampedWindowStore<K, Agg>) context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                windowStore,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"476eccb968322879b1843dfa837b63ce386d192c","commitMessage":"@@@KAFKA-12815: Preserve context for KTable.transformValues when getting value from upstream state store (#10720)\n\nReviewers: Victoria Xia <victoria.xia@confluent.io>.  John Roesler <john@confluent.io>","date":"2021-05-20 05:58:46","modifiedFileCount":"17","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":11,"curCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            final StreamsMetricsImpl metrics = (StreamsMetricsImpl) context.metrics();\n            final String threadId = Thread.currentThread().getName();\n            lateRecordDropSensor = droppedRecordsSensor(\n                threadId,\n                context.taskId().toString(),\n                metrics\n            );\n            droppedRecordsSensor = droppedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            store = context.getStateStore(storeName);\n            tupleForwarder = new SessionTupleForwarder<>(store, context, new SessionCacheFlushListener<>(context), sendOldValues);\n        }\n","date":"2021-06-01 20:05:08","endLine":100,"groupId":"5110","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"(finalProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/3d6ca1098f55ccb130afa286f674ab16a3112f.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            final StreamsMetricsImpl metrics = (StreamsMetricsImpl) context.metrics();\n            final String threadId = Thread.currentThread().getName();\n            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n                threadId,\n                context.taskId().toString(),\n                ((InternalProcessorContext) context).currentNode().name(),\n                metrics\n            );\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            store = context.getStateStore(storeName);\n            tupleForwarder = new SessionTupleForwarder<>(store, context, new SessionCacheFlushListener<>(context), sendOldValues);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSessionWindowAggregate.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":11,"curCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            final InternalProcessorContext internalProcessorContext = (InternalProcessorContext) context;\n            final StreamsMetricsImpl metrics = internalProcessorContext.metrics();\n            final String threadId = Thread.currentThread().getName();\n            lateRecordDropSensor = droppedRecordsSensor(\n                threadId,\n                context.taskId().toString(),\n                metrics\n            );\n            droppedRecordsSensor = droppedRecordsSensor(\n                threadId,\n                context.taskId().toString(),\n                metrics\n            );\n            windowStore = context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                windowStore,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","date":"2021-06-01 20:05:08","endLine":107,"groupId":"5110","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"(finalProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/ae7ceae0f48e5f0dd78ddf6b7acf890c56571c.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            final InternalProcessorContext internalProcessorContext = (InternalProcessorContext) context;\n            final StreamsMetricsImpl metrics = internalProcessorContext.metrics();\n            final String threadId = Thread.currentThread().getName();\n            lateRecordDropSensor = droppedRecordsSensorOrLateRecordDropSensor(\n                threadId,\n                context.taskId().toString(),\n                internalProcessorContext.currentNode().name(),\n                metrics\n            );\n            droppedRecordsSensor = droppedRecordsSensorOrSkippedRecordsSensor(\n                threadId,\n                context.taskId().toString(),\n                metrics\n            );\n            windowStore = context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                windowStore,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-22 20:10:28","codes":[{"authorDate":"2021-06-22 20:10:28","commitOrder":12,"curCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            final StreamsMetricsImpl metrics = (StreamsMetricsImpl) context.metrics();\n            final String threadId = Thread.currentThread().getName();\n            droppedRecordsSensor = droppedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            store = context.getStateStore(storeName);\n            tupleForwarder = new SessionTupleForwarder<>(store, context, new SessionCacheFlushListener<>(context), sendOldValues);\n        }\n","date":"2021-06-22 20:10:28","endLine":94,"groupId":"14007","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"(finalProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d1/b639e83d2c9648a071dc42803b42ab1afe804d.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            final StreamsMetricsImpl metrics = (StreamsMetricsImpl) context.metrics();\n            final String threadId = Thread.currentThread().getName();\n            lateRecordDropSensor = droppedRecordsSensor(\n                threadId,\n                context.taskId().toString(),\n                metrics\n            );\n            droppedRecordsSensor = droppedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            store = context.getStateStore(storeName);\n            tupleForwarder = new SessionTupleForwarder<>(store, context, new SessionCacheFlushListener<>(context), sendOldValues);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSessionWindowAggregate.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2021-06-22 20:10:28","commitOrder":12,"curCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            final InternalProcessorContext internalProcessorContext = (InternalProcessorContext) context;\n            final StreamsMetricsImpl metrics = internalProcessorContext.metrics();\n            final String threadId = Thread.currentThread().getName();\n            droppedRecordsSensor = droppedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            windowStore = context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                windowStore,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","date":"2021-06-22 20:10:28","endLine":97,"groupId":"14007","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"(finalProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/5a17d294e361d5be1b5f6d3329b3f6d38cca0a.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            final InternalProcessorContext internalProcessorContext = (InternalProcessorContext) context;\n            final StreamsMetricsImpl metrics = internalProcessorContext.metrics();\n            final String threadId = Thread.currentThread().getName();\n            lateRecordDropSensor = droppedRecordsSensor(\n                threadId,\n                context.taskId().toString(),\n                metrics\n            );\n            droppedRecordsSensor = droppedRecordsSensor(\n                threadId,\n                context.taskId().toString(),\n                metrics\n            );\n            windowStore = context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                windowStore,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"2ad9350cc1052b39d8ae526d1df5a59744f74f2f","commitMessage":"@@@MINOR: Remove obsolete variables for metric sensors (#10912)\n\nThis is a clean-up that we missed for \"KIP-743: Remove config value 0.10.0-2.4 of Streams built-in metrics version config\"\n\nReviewers: Luke Chen <showuon@gmail.com>.  Matthias J. Sax <mjsax@apache.org>","date":"2021-06-22 20:10:28","modifiedFileCount":"5","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-22 22:17:11","codes":[{"authorDate":"2021-06-22 22:17:11","commitOrder":13,"curCode":"        public void init(final org.apache.kafka.streams.processor.ProcessorContext context) {\n            super.init(context);\n            final StreamsMetricsImpl metrics = (StreamsMetricsImpl) context.metrics();\n            final String threadId = Thread.currentThread().getName();\n            droppedRecordsSensor = droppedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            store = context.getStateStore(storeName);\n            tupleForwarder = new SessionTupleForwarder<>(store, context, new SessionCacheFlushListener<>(context), sendOldValues);\n        }\n","date":"2021-06-22 22:17:11","endLine":92,"groupId":"103015","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"(finalorg.apache.kafka.streams.processor.ProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5c/843697f7f77b55098d93b2a66f61c8e320cad8.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            final StreamsMetricsImpl metrics = (StreamsMetricsImpl) context.metrics();\n            final String threadId = Thread.currentThread().getName();\n            droppedRecordsSensor = droppedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            store = context.getStateStore(storeName);\n            tupleForwarder = new SessionTupleForwarder<>(store, context, new SessionCacheFlushListener<>(context), sendOldValues);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSessionWindowAggregate.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2021-06-22 22:17:11","commitOrder":13,"curCode":"        public void init(final org.apache.kafka.streams.processor.ProcessorContext context) {\n            super.init(context);\n            final InternalProcessorContext internalProcessorContext = (InternalProcessorContext) context;\n            final StreamsMetricsImpl metrics = internalProcessorContext.metrics();\n            final String threadId = Thread.currentThread().getName();\n            droppedRecordsSensor = droppedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            windowStore = context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                windowStore,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","date":"2021-06-22 22:17:11","endLine":95,"groupId":"103015","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"init","params":"(finalorg.apache.kafka.streams.processor.ProcessorContextcontext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/db/91bb3a7b4ce948b60a8e0ba5fa841db03387c2.src","preCode":"        public void init(final ProcessorContext context) {\n            super.init(context);\n            final InternalProcessorContext internalProcessorContext = (InternalProcessorContext) context;\n            final StreamsMetricsImpl metrics = internalProcessorContext.metrics();\n            final String threadId = Thread.currentThread().getName();\n            droppedRecordsSensor = droppedRecordsSensor(threadId, context.taskId().toString(), metrics);\n            windowStore = context.getStateStore(storeName);\n            tupleForwarder = new TimestampedTupleForwarder<>(\n                windowStore,\n                context,\n                new TimestampedCacheFlushListener<>(context),\n                sendOldValues);\n        }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamSlidingWindowAggregate.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"c3475081c5e8228e9bd3a45022a93d61e542f72e","commitMessage":"@@@KAFKA-10546: Deprecate old PAPI (#10869)\n\n* Deprecate the old Processor API\n* Suppress warnings on all internal usages of the old API\n  (which will be migrated in other child tickets of KAFKA-8410)\n* Add new KStream#process methods.  since KAFKA-10603 has not seen any action.\n","date":"2021-06-22 22:17:11","modifiedFileCount":"124","status":"M","submitter":"John Roesler"}]
