[{"authorTime":"2020-01-30 15:45:47","codes":[{"authorDate":"2019-09-14 06:45:29","commitOrder":2,"curCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) throws Exception {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n            INPUT_TOPIC_NAME,\n            IntStream.range(start, endExclusive)\n                .mapToObj(i -> KeyValue.pair(key, i))\n                .collect(Collectors.toList()),\n            producerProps,\n            mockTime);\n    }\n","date":"2019-09-14 06:45:29","endLine":227,"groupId":"13289","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"produceValueRange","params":"(finalintkey@finalintstart@finalintendExclusive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/22/083c117ab43ac708c0c08785452832102090e3.src","preCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) throws Exception {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n            INPUT_TOPIC_NAME,\n            IntStream.range(start, endExclusive)\n                .mapToObj(i -> KeyValue.pair(key, i))\n                .collect(Collectors.toList()),\n            producerProps,\n            mockTime);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/OptimizedKTableIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"NB"},{"authorDate":"2020-01-30 15:45:47","commitOrder":2,"curCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) throws Exception {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                INPUT_TOPIC_NAME,\n                IntStream.range(start, endExclusive)\n                        .mapToObj(i -> KeyValue.pair(key, i))\n                        .collect(Collectors.toList()),\n                producerProps,\n                mockTime);\n    }\n","date":"2020-01-30 15:45:47","endLine":325,"groupId":"13289","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"produceValueRange","params":"(finalintkey@finalintstart@finalintendExclusive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c0/3998f543c129a5ad3571055b26f5818ed586cc.src","preCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) throws Exception {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                INPUT_TOPIC_NAME,\n                IntStream.range(start, endExclusive)\n                        .mapToObj(i -> KeyValue.pair(key, i))\n                        .collect(Collectors.toList()),\n                producerProps,\n                mockTime);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StoreQueryIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"B"}],"commitId":"05b2361c0412be25877cb106e9847e9a8a4f622a","commitMessage":"@@@KAFKA-9445: Allow adding changes to allow serving from a specific partition (#7984)\n\nImplements KIP-562.\n\nReviewers: Vinoth Chandar <vchandar@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-01-30 15:45:47","modifiedFileCount":"20","status":"M","submitter":"Navinder Pal Singh Brar"},{"authorTime":"2020-05-02 08:11:26","codes":[{"authorDate":"2019-09-14 06:45:29","commitOrder":3,"curCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) throws Exception {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n            INPUT_TOPIC_NAME,\n            IntStream.range(start, endExclusive)\n                .mapToObj(i -> KeyValue.pair(key, i))\n                .collect(Collectors.toList()),\n            producerProps,\n            mockTime);\n    }\n","date":"2019-09-14 06:45:29","endLine":227,"groupId":"13289","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"produceValueRange","params":"(finalintkey@finalintstart@finalintendExclusive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/22/083c117ab43ac708c0c08785452832102090e3.src","preCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) throws Exception {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n            INPUT_TOPIC_NAME,\n            IntStream.range(start, endExclusive)\n                .mapToObj(i -> KeyValue.pair(key, i))\n                .collect(Collectors.toList()),\n            producerProps,\n            mockTime);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/OptimizedKTableIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"},{"authorDate":"2020-05-02 08:11:26","commitOrder":3,"curCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                INPUT_TOPIC_NAME,\n                IntStream.range(start, endExclusive)\n                        .mapToObj(i -> KeyValue.pair(key, i))\n                        .collect(Collectors.toList()),\n                producerProps,\n                mockTime);\n    }\n","date":"2020-05-02 08:11:26","endLine":318,"groupId":"13289","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"produceValueRange","params":"(finalintkey@finalintstart@finalintendExclusive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/9f420de8cb0fa396c70e4abfec6684b000d414.src","preCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) throws Exception {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                INPUT_TOPIC_NAME,\n                IntStream.range(start, endExclusive)\n                        .mapToObj(i -> KeyValue.pair(key, i))\n                        .collect(Collectors.toList()),\n                producerProps,\n                mockTime);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StoreQueryIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"}],"commitId":"945356724147549421727eb52a4ac33efa920b2e","commitMessage":"@@@MINOR: Improve Sensor recording efficiency (#8593)\n\n1. Added a recordInternal function to let all other public functions trigger.  so that shouldRecord would only be checked once.\n\n2. In Streams.  pass along the current wall-clock time inside InternalProcessorContext when process / punctuate which can be passed in to the record function to reduce the calling frequency of SystemTime.milliseconds().\n\nReviewers: John Roesler <vvcephei@apache.org>","date":"2020-05-02 08:11:26","modifiedFileCount":"32","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-05-02 08:11:26","codes":[{"authorDate":"2020-06-30 11:27:52","commitOrder":4,"curCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n            INPUT_TOPIC_NAME,\n            IntStream.range(start, endExclusive)\n                .mapToObj(i -> KeyValue.pair(key, i))\n                .collect(Collectors.toList()),\n            producerProps,\n            mockTime);\n    }\n","date":"2020-06-30 11:27:52","endLine":168,"groupId":"13289","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"produceValueRange","params":"(finalintkey@finalintstart@finalintendExclusive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a8/ba2b3bc80a13c3540c5201c4698137a529e663.src","preCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) throws Exception {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n            INPUT_TOPIC_NAME,\n            IntStream.range(start, endExclusive)\n                .mapToObj(i -> KeyValue.pair(key, i))\n                .collect(Collectors.toList()),\n            producerProps,\n            mockTime);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/OptimizedKTableIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2020-05-02 08:11:26","commitOrder":4,"curCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                INPUT_TOPIC_NAME,\n                IntStream.range(start, endExclusive)\n                        .mapToObj(i -> KeyValue.pair(key, i))\n                        .collect(Collectors.toList()),\n                producerProps,\n                mockTime);\n    }\n","date":"2020-05-02 08:11:26","endLine":318,"groupId":"13289","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"produceValueRange","params":"(finalintkey@finalintstart@finalintendExclusive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/9f420de8cb0fa396c70e4abfec6684b000d414.src","preCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                INPUT_TOPIC_NAME,\n                IntStream.range(start, endExclusive)\n                        .mapToObj(i -> KeyValue.pair(key, i))\n                        .collect(Collectors.toList()),\n                producerProps,\n                mockTime);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StoreQueryIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"N"}],"commitId":"89c6562082f737351ec28b8f2bf9549ebb23c377","commitMessage":"@@@make produce-sync flush (#8925)\n\nCall Producer#flush to make sure all records are indeed sent \"synchronously\" when EOS is not enabled in the OptimizedKTableIntegrationTest#shouldApplyUpdatesToStandbyStore.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-06-30 11:27:52","modifiedFileCount":"2","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-05-02 08:11:26","codes":[{"authorDate":"2021-03-25 01:04:39","commitOrder":5,"curCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n            INPUT_TOPIC_NAME,\n            IntStream.range(start, endExclusive)\n                .mapToObj(i -> KeyValue.pair(key, i))\n                .collect(Collectors.toList()),\n            producerProps,\n            mockTime);\n    }\n","date":"2021-03-25 01:04:39","endLine":181,"groupId":"102655","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"produceValueRange","params":"(finalintkey@finalintstart@finalintendExclusive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/2b2c157f978b7e87698121c038821c0ebf21ab.src","preCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n            INPUT_TOPIC_NAME,\n            IntStream.range(start, endExclusive)\n                .mapToObj(i -> KeyValue.pair(key, i))\n                .collect(Collectors.toList()),\n            producerProps,\n            mockTime);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/OptimizedKTableIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"},{"authorDate":"2020-05-02 08:11:26","commitOrder":5,"curCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                INPUT_TOPIC_NAME,\n                IntStream.range(start, endExclusive)\n                        .mapToObj(i -> KeyValue.pair(key, i))\n                        .collect(Collectors.toList()),\n                producerProps,\n                mockTime);\n    }\n","date":"2020-05-02 08:11:26","endLine":318,"groupId":"102655","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"produceValueRange","params":"(finalintkey@finalintstart@finalintendExclusive)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/9f420de8cb0fa396c70e4abfec6684b000d414.src","preCode":"    private void produceValueRange(final int key, final int start, final int endExclusive) {\n        final Properties producerProps = new Properties();\n        producerProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, cluster.bootstrapServers());\n        producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n        producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class);\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                INPUT_TOPIC_NAME,\n                IntStream.range(start, endExclusive)\n                        .mapToObj(i -> KeyValue.pair(key, i))\n                        .collect(Collectors.toList()),\n                producerProps,\n                mockTime);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StoreQueryIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"N"}],"commitId":"9af81955c497b31b211b1e21d8323c875518df39","commitMessage":"@@@KAFKA-12173 Migrate streams:streams-scala module to JUnit 5 (#9858)\n\n1. replace org.junit.Assert by org.junit.jupiter.api.Assertions\n2. replace org.junit by org.junit.jupiter.api\n3. replace Before by BeforeEach\n4. replace After by AfterEach\n5. remove ExternalResource from all scala modules\n6. add explicit AfterClass/BeforeClass to stop/start EmbeddedKafkaCluster\n\nNoted that this PR does not migrate stream module to junit 5 so it does not introduce callback of junit 5 to deal with beforeAll/afterAll. The next PR of migrating stream module can replace explicit beforeAll/afterAll by junit 5 extension. Or we can keep the beforeAll/afterAll if it make code more readable.\n\nReviewers: John Roesler <vvcephei@apache.org>","date":"2021-03-25 01:04:39","modifiedFileCount":"45","status":"M","submitter":"Chia-Ping Tsai"}]
