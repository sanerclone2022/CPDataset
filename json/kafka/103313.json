[{"authorTime":"2017-03-25 03:38:36","codes":[{"authorDate":"2017-03-25 03:38:36","commitOrder":1,"curCode":"    public void testWriteTransactionalWithInvalidPID() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = RecordBatch.NO_PRODUCER_ID;\n        short epoch = 15;\n        int sequence = 2342;\n\n        new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, RecordBatch.UNKNOWN_PARTITION_LEADER_EPOCH, buffer.capacity());\n    }\n","date":"2017-03-25 03:38:43","endLine":116,"groupId":"15112","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteTransactionalWithInvalidPID","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ef/48783b2dadb03529e02f87832852a4a519b253.src","preCode":"    public void testWriteTransactionalWithInvalidPID() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = RecordBatch.NO_PRODUCER_ID;\n        short epoch = 15;\n        int sequence = 2342;\n\n        new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, RecordBatch.UNKNOWN_PARTITION_LEADER_EPOCH, buffer.capacity());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2017-03-25 03:38:36","commitOrder":1,"curCode":"    public void testWriteIdempotentWithInvalidEpoch() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = 9809;\n        short epoch = RecordBatch.NO_PRODUCER_EPOCH;\n        int sequence = 2342;\n\n        new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, RecordBatch.UNKNOWN_PARTITION_LEADER_EPOCH, buffer.capacity());\n    }\n","date":"2017-03-25 03:38:43","endLine":129,"groupId":"15114","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteIdempotentWithInvalidEpoch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ef/48783b2dadb03529e02f87832852a4a519b253.src","preCode":"    public void testWriteIdempotentWithInvalidEpoch() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = 9809;\n        short epoch = RecordBatch.NO_PRODUCER_EPOCH;\n        int sequence = 2342;\n\n        new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, RecordBatch.UNKNOWN_PARTITION_LEADER_EPOCH, buffer.capacity());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"}],"commitId":"5bd06f1d542e6b588a1d402d059bc24690017d32","commitMessage":"@@@KAFKA-4816; Message format changes for idempotent/transactional producer (KIP-98)\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Jun Rao <junrao@gmail.com>.  Apurva Mehta <apurva@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>.  Ismael Juma <ismael@juma.me.uk>\n\nCloses #2614 from hachikuji/exactly-once-message-format\n","date":"2017-03-25 03:38:43","modifiedFileCount":"55","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2017-04-08 01:29:55","codes":[{"authorDate":"2017-04-08 01:29:55","commitOrder":2,"curCode":"    public void testWriteTransactionalWithInvalidPID() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = RecordBatch.NO_PRODUCER_ID;\n        short epoch = 15;\n        int sequence = 2342;\n\n        new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n    }\n","date":"2017-04-08 01:29:55","endLine":116,"groupId":"15112","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteTransactionalWithInvalidPID","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/c8c20d199ad042526676244ff7f5b1a685211e.src","preCode":"    public void testWriteTransactionalWithInvalidPID() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = RecordBatch.NO_PRODUCER_ID;\n        short epoch = 15;\n        int sequence = 2342;\n\n        new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, RecordBatch.UNKNOWN_PARTITION_LEADER_EPOCH, buffer.capacity());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2017-04-08 01:29:55","commitOrder":2,"curCode":"    public void testWriteIdempotentWithInvalidEpoch() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = 9809;\n        short epoch = RecordBatch.NO_PRODUCER_EPOCH;\n        int sequence = 2342;\n\n        new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n    }\n","date":"2017-04-08 01:29:55","endLine":129,"groupId":"15114","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteIdempotentWithInvalidEpoch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/c8c20d199ad042526676244ff7f5b1a685211e.src","preCode":"    public void testWriteIdempotentWithInvalidEpoch() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = 9809;\n        short epoch = RecordBatch.NO_PRODUCER_EPOCH;\n        int sequence = 2342;\n\n        new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, RecordBatch.UNKNOWN_PARTITION_LEADER_EPOCH, buffer.capacity());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"5cf64f06a877a181d12a2ae2390516ba1a572135","commitMessage":"@@@MINOR: Log append validation improvements\n\n- Consistent validation across different code paths in LogValidator\n- Validate baseOffset for message format V2\n- Flesh out LogValidatorTest to check producerId.  baseSequence.  producerEpoch and partitionLeaderEpoch.\n\nAuthor: Ismael Juma <ismael@juma.me.uk>\n\nReviewers: Jun Rao <junrao@gmail.com>\n\nCloses #2802 from ijuma/validate-base-offset\n","date":"2017-04-08 01:29:55","modifiedFileCount":"7","status":"M","submitter":"Ismael Juma"},{"authorTime":"2017-04-28 05:11:17","codes":[{"authorDate":"2017-04-28 05:11:17","commitOrder":3,"curCode":"    public void testWriteTransactionalWithInvalidPID() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = RecordBatch.NO_PRODUCER_ID;\n        short epoch = 15;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.close();\n    }\n","date":"2017-04-28 05:11:36","endLine":117,"groupId":"5848","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteTransactionalWithInvalidPID","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/0879fa2b2b9a172554cea112aecc021dc1270f.src","preCode":"    public void testWriteTransactionalWithInvalidPID() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = RecordBatch.NO_PRODUCER_ID;\n        short epoch = 15;\n        int sequence = 2342;\n\n        new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2017-04-28 05:11:17","commitOrder":3,"curCode":"    public void testWriteIdempotentWithInvalidEpoch() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = 9809;\n        short epoch = RecordBatch.NO_PRODUCER_EPOCH;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.close();\n    }\n","date":"2017-04-28 05:11:36","endLine":131,"groupId":"3170","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteIdempotentWithInvalidEpoch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/0879fa2b2b9a172554cea112aecc021dc1270f.src","preCode":"    public void testWriteIdempotentWithInvalidEpoch() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = 9809;\n        short epoch = RecordBatch.NO_PRODUCER_EPOCH;\n        int sequence = 2342;\n\n        new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"}],"commitId":"a82f194b21a6af2f52e36e55e2c6adcdba942c08","commitMessage":"@@@KAFKA-4818; Exactly once transactional clients\n\nAuthor: Apurva Mehta <apurva@confluent.io>\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Ismael Juma <ismael@juma.me.uk>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2840 from apurvam/exactly-once-transactional-clients\n","date":"2017-04-28 05:11:36","modifiedFileCount":"23","status":"M","submitter":"Apurva Mehta"},{"authorTime":"2017-05-07 02:49:35","codes":[{"authorDate":"2017-05-07 02:49:35","commitOrder":4,"curCode":"    public void testWriteTransactionalWithInvalidPID() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = RecordBatch.NO_PRODUCER_ID;\n        short epoch = 15;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.close();\n    }\n","date":"2017-05-07 02:49:35","endLine":143,"groupId":"5848","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteTransactionalWithInvalidPID","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/04/67522d5cf75d920c3642179ade0a65b0ec9b71.src","preCode":"    public void testWriteTransactionalWithInvalidPID() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = RecordBatch.NO_PRODUCER_ID;\n        short epoch = 15;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.close();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2017-05-07 02:49:35","commitOrder":4,"curCode":"    public void testWriteIdempotentWithInvalidEpoch() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = 9809;\n        short epoch = RecordBatch.NO_PRODUCER_EPOCH;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.close();\n    }\n","date":"2017-05-07 02:49:35","endLine":157,"groupId":"3170","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteIdempotentWithInvalidEpoch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/04/67522d5cf75d920c3642179ade0a65b0ec9b71.src","preCode":"    public void testWriteIdempotentWithInvalidEpoch() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = 9809;\n        short epoch = RecordBatch.NO_PRODUCER_EPOCH;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.close();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"e71dce89c0da50f3eccc47d0fc050c92d5a99b88","commitMessage":"@@@KAFKA-5121; Implement transaction index for KIP-98\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Jun Rao <junrao@gmail.com>\n\nCloses #2910 from hachikuji/eos-txn-index\n","date":"2017-05-07 02:49:35","modifiedFileCount":"23","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2021-01-10 20:20:13","codes":[{"authorDate":"2021-01-10 20:20:13","commitOrder":5,"curCode":"    public void testWriteTransactionalWithInvalidPID() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = RecordBatch.NO_PRODUCER_ID;\n        short epoch = 15;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        assertThrows(IllegalArgumentException.class, builder::close);\n    }\n","date":"2021-01-10 20:20:13","endLine":172,"groupId":"5848","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteTransactionalWithInvalidPID","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/aa/9d55829e80bdcd75cd5959e7c2055683fffe89.src","preCode":"    public void testWriteTransactionalWithInvalidPID() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = RecordBatch.NO_PRODUCER_ID;\n        short epoch = 15;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.close();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2021-01-10 20:20:13","commitOrder":5,"curCode":"    public void testWriteIdempotentWithInvalidEpoch() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = 9809;\n        short epoch = RecordBatch.NO_PRODUCER_EPOCH;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        assertThrows(IllegalArgumentException.class, builder::close);\n    }\n","date":"2021-01-10 20:20:13","endLine":186,"groupId":"3170","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteIdempotentWithInvalidEpoch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/aa/9d55829e80bdcd75cd5959e7c2055683fffe89.src","preCode":"    public void testWriteIdempotentWithInvalidEpoch() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = 9809;\n        short epoch = RecordBatch.NO_PRODUCER_EPOCH;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        builder.close();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"913a019d6c9b03eb44706deb7fb164f79c1f601f","commitMessage":"@@@MINOR: replace test \"expected\" parameter by assertThrows (#9520)\n\nThis PR includes following changes.\n\n1. @Test(expected = Exception.class) is replaced by assertThrows\n2. remove reference to org.scalatest.Assertions\n3. change the magic code from 1 to 2 for testAppendAtInvalidOffset to test ZSTD\n4. rename testMaybeAddPartitionToTransactionXXXX to testNotReadyForSendXXX\n5. increase maxBlockMs from 1s to 3s to avoid unexpected timeout from TransactionsTest#testTimeout\n\nReviewers: Ismael Juma <ismael@confluent.io>","date":"2021-01-10 20:20:13","modifiedFileCount":"166","status":"M","submitter":"Chia-Ping Tsai"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2021-01-14 08:17:45","commitOrder":6,"curCode":"    public void testWriteTransactionalWithInvalidPID(Args args) {\n        ByteBuffer buffer = allocateBuffer(128, args);\n\n        long pid = RecordBatch.NO_PRODUCER_ID;\n        short epoch = 15;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, args.compressionType, TimestampType.CREATE_TIME,\n            0L, 0L, pid, epoch, sequence, true, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        assertThrows(IllegalArgumentException.class, builder::close);\n    }\n","date":"2021-01-14 08:17:45","endLine":193,"groupId":"21194","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteTransactionalWithInvalidPID","params":"(Argsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d6/a3801f2e2b011d1049c2879d9a284e26bce88b.src","preCode":"    public void testWriteTransactionalWithInvalidPID() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = RecordBatch.NO_PRODUCER_ID;\n        short epoch = 15;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        assertThrows(IllegalArgumentException.class, builder::close);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"},{"authorDate":"2021-01-14 08:17:45","commitOrder":6,"curCode":"    public void testWriteIdempotentWithInvalidEpoch(Args args) {\n        ByteBuffer buffer = allocateBuffer(128, args);\n\n        long pid = 9809;\n        short epoch = RecordBatch.NO_PRODUCER_EPOCH;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, args.compressionType, TimestampType.CREATE_TIME,\n            0L, 0L, pid, epoch, sequence, true, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        assertThrows(IllegalArgumentException.class, builder::close);\n    }\n","date":"2021-01-14 08:17:45","endLine":207,"groupId":"21194","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteIdempotentWithInvalidEpoch","params":"(Argsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d6/a3801f2e2b011d1049c2879d9a284e26bce88b.src","preCode":"    public void testWriteIdempotentWithInvalidEpoch() {\n        ByteBuffer buffer = ByteBuffer.allocate(128);\n        buffer.position(bufferOffset);\n\n        long pid = 9809;\n        short epoch = RecordBatch.NO_PRODUCER_EPOCH;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        assertThrows(IllegalArgumentException.class, builder::close);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"},{"authorTime":"2021-02-18 11:15:56","codes":[{"authorDate":"2021-02-18 11:15:56","commitOrder":7,"curCode":"    public void testWriteTransactionalWithInvalidPID(Args args) {\n        ByteBuffer buffer = allocateBuffer(128, args);\n        long pid = RecordBatch.NO_PRODUCER_ID;\n        short epoch = 15;\n        int sequence = 2342;\n\n        Supplier<MemoryRecordsBuilder> supplier = () ->  new MemoryRecordsBuilder(buffer, args.magic, args.compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        if (args.magic < MAGIC_VALUE_V2) {\n            assertThrows(IllegalArgumentException.class, supplier::get);\n        } else {\n            MemoryRecordsBuilder builder = supplier.get();\n            assertThrows(IllegalArgumentException.class, builder::close);\n        }\n    }\n","date":"2021-02-18 11:15:56","endLine":163,"groupId":"103313","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testWriteTransactionalWithInvalidPID","params":"(Argsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/eaa9d21cba1291906138fb0a625835796c4a33.src","preCode":"    public void testWriteTransactionalWithInvalidPID(Args args) {\n        ByteBuffer buffer = allocateBuffer(128, args);\n\n        long pid = RecordBatch.NO_PRODUCER_ID;\n        short epoch = 15;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, args.compressionType, TimestampType.CREATE_TIME,\n            0L, 0L, pid, epoch, sequence, true, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        assertThrows(IllegalArgumentException.class, builder::close);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2021-02-18 11:15:56","commitOrder":7,"curCode":"    public void testWriteIdempotentWithInvalidEpoch(Args args) {\n        ByteBuffer buffer = allocateBuffer(128, args);\n        long pid = 9809;\n        short epoch = RecordBatch.NO_PRODUCER_EPOCH;\n        int sequence = 2342;\n\n        Supplier<MemoryRecordsBuilder> supplier = () -> new MemoryRecordsBuilder(buffer, args.magic, args.compressionType, TimestampType.CREATE_TIME,\n                0L, 0L, pid, epoch, sequence, true, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n\n        if (args.magic < MAGIC_VALUE_V2) {\n            assertThrows(IllegalArgumentException.class, supplier::get);\n        } else {\n            MemoryRecordsBuilder builder = supplier.get();\n            assertThrows(IllegalArgumentException.class, builder::close);\n        }\n    }\n","date":"2021-02-18 11:15:56","endLine":182,"groupId":"103313","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testWriteIdempotentWithInvalidEpoch","params":"(Argsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/eaa9d21cba1291906138fb0a625835796c4a33.src","preCode":"    public void testWriteIdempotentWithInvalidEpoch(Args args) {\n        ByteBuffer buffer = allocateBuffer(128, args);\n\n        long pid = 9809;\n        short epoch = RecordBatch.NO_PRODUCER_EPOCH;\n        int sequence = 2342;\n\n        MemoryRecordsBuilder builder = new MemoryRecordsBuilder(buffer, RecordBatch.CURRENT_MAGIC_VALUE, args.compressionType, TimestampType.CREATE_TIME,\n            0L, 0L, pid, epoch, sequence, true, false, RecordBatch.NO_PARTITION_LEADER_EPOCH, buffer.capacity());\n        assertThrows(IllegalArgumentException.class, builder::close);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/MemoryRecordsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"46690113cd0066e57f914539978cfdf69ebbef63","commitMessage":"@@@KAFKA-10885 Refactor MemoryRecordsBuilderTest/MemoryRecordsTest to avoid a lot of? (#9906)\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-02-18 11:15:56","modifiedFileCount":"2","status":"M","submitter":"Geordie"}]
