[{"authorTime":"2020-03-23 04:50:07","codes":[{"authorDate":"2020-03-23 04:50:07","commitOrder":1,"curCode":"    public void shouldNotCommitOnHandleAssignmentIfNoTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","date":"2020-03-23 04:50:07","endLine":821,"groupId":"3637","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCommitOnHandleAssignmentIfNoTaskClosed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e1/716ca210456a1a3dd4bed7c5e6a1df562565dc.src","preCode":"    public void shouldNotCommitOnHandleAssignmentIfNoTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":794,"status":"B"},{"authorDate":"2020-03-23 04:50:07","commitOrder":1,"curCode":"    public void shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, Collections.emptyMap());\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","date":"2020-03-23 04:50:07","endLine":851,"groupId":"3637","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e1/716ca210456a1a3dd4bed7c5e6a1df562565dc.src","preCode":"    public void shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, Collections.emptyMap());\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":824,"status":"B"}],"commitId":"1ad5f346cb88072c419142c86c3d897aad2de996","commitMessage":"@@@KAFKA-9451: Enable producer per thread for Streams EOS (#8318)\n\n- KIP-447\n- add new configs to enable producer per thread EOS\n- updates TaskManager to use single shared producer for eos-beta\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-03-23 04:50:07","modifiedFileCount":"17","status":"B","submitter":"Matthias J. Sax"},{"authorTime":"2020-06-11 08:53:43","codes":[{"authorDate":"2020-03-23 04:50:07","commitOrder":2,"curCode":"    public void shouldNotCommitOnHandleAssignmentIfNoTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","date":"2020-03-23 04:50:07","endLine":821,"groupId":"3637","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCommitOnHandleAssignmentIfNoTaskClosed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e1/716ca210456a1a3dd4bed7c5e6a1df562565dc.src","preCode":"    public void shouldNotCommitOnHandleAssignmentIfNoTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":794,"status":"N"},{"authorDate":"2020-06-11 08:53:43","commitOrder":2,"curCode":"    public void shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, Collections.emptyMap());\n\n        assertThat(task00.commitNeeded, is(true));\n    }\n","date":"2020-06-11 08:53:43","endLine":952,"groupId":"3637","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/e3c21a33e656628f2a4df06e57fd31c043baef.src","preCode":"    public void shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, Collections.emptyMap());\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":926,"status":"M"}],"commitId":"8e083e1b8879e732522bb9a560c82ff84b176cc9","commitMessage":"@@@KAFKA-9441: remove prepareClose() to simplify task management (#8833)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2020-06-11 08:53:43","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-10-20 02:07:56","codes":[{"authorDate":"2020-10-20 02:07:56","commitOrder":3,"curCode":"    public void shouldNotCommitOnHandleAssignmentIfNoTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","date":"2020-10-20 02:07:56","endLine":1126,"groupId":"8021","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCommitOnHandleAssignmentIfNoTaskClosed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/5e148d7adfac58b89f87a980544d1d0dd371d2.src","preCode":"    public void shouldNotCommitOnHandleAssignmentIfNoTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1099,"status":"M"},{"authorDate":"2020-10-20 02:07:56","commitOrder":3,"curCode":"    public void shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, Collections.emptyMap());\n\n        assertThat(task00.commitNeeded, is(true));\n    }\n","date":"2020-10-20 02:07:56","endLine":1155,"groupId":"8021","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/5e148d7adfac58b89f87a980544d1d0dd371d2.src","preCode":"    public void shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, Collections.emptyMap());\n\n        assertThat(task00.commitNeeded, is(true));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1129,"status":"M"}],"commitId":"aef6cd6e9995b42db2cefa7d715321d0edee5628","commitMessage":"@@@KAFKA-9274: Add timeout handling for state restore and StandbyTasks (#9368)\n\n* Part of KIP-572\n* If a TimeoutException happens during restore of active tasks.  or updating standby tasks.  we need to trigger task.timeout.ms timeout.\n\nReviewers: John Roesler <john@confluent.io>","date":"2020-10-20 02:07:56","modifiedFileCount":"15","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-02-06 09:25:50","codes":[{"authorDate":"2021-02-06 09:25:50","commitOrder":4,"curCode":"    public void shouldNotCommitOnHandleAssignmentIfNoTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","date":"2021-02-06 09:25:50","endLine":1167,"groupId":"8021","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCommitOnHandleAssignmentIfNoTaskClosed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/3a8c92c30322fe86e22b4a1174900049e5d642.src","preCode":"    public void shouldNotCommitOnHandleAssignmentIfNoTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1140,"status":"M"},{"authorDate":"2021-02-06 09:25:50","commitOrder":4,"curCode":"    public void shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, Collections.emptyMap());\n\n        assertThat(task00.commitNeeded, is(true));\n    }\n","date":"2021-02-06 09:25:50","endLine":1196,"groupId":"8021","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/3a8c92c30322fe86e22b4a1174900049e5d642.src","preCode":"    public void shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, Collections.emptyMap());\n\n        assertThat(task00.commitNeeded, is(true));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1170,"status":"M"}],"commitId":"0bc394cc1d19f1e41dd6646e9ac0e09b91fb1398","commitMessage":"@@@KAFKA-9274: handle TimeoutException on task reset (#10000)\n\nPart of KIP-572: We move the offset reset for the internal \"main consumer\" when we revive a corrupted task.  from the \"task cleanup\" code path.  to the \"task init\" code path. For this case.  we have already logic in place to handle TimeoutException that might be thrown by consumer#committed() method call.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>\n","date":"2021-02-06 09:25:50","modifiedFileCount":"10","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-02-07 05:04:30","codes":[{"authorDate":"2021-02-07 05:04:30","commitOrder":5,"curCode":"    public void shouldNotCommitOnHandleAssignmentIfNoTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","date":"2021-02-07 05:04:30","endLine":1191,"groupId":"8021","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCommitOnHandleAssignmentIfNoTaskClosed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/224e0cd5c002edd02d0ef2ee8e1586fa832b3d.src","preCode":"    public void shouldNotCommitOnHandleAssignmentIfNoTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1164,"status":"M"},{"authorDate":"2021-02-07 05:04:30","commitOrder":5,"curCode":"    public void shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, Collections.emptyMap());\n\n        assertThat(task00.commitNeeded, is(true));\n    }\n","date":"2021-02-07 05:04:30","endLine":1220,"groupId":"8021","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/224e0cd5c002edd02d0ef2ee8e1586fa832b3d.src","preCode":"    public void shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, Collections.emptyMap());\n\n        assertThat(task00.commitNeeded, is(true));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1194,"status":"M"}],"commitId":"d2cb2dc45d536ae124e3da25d6d5a4e932a23a27","commitMessage":"@@@KAFKA-9751: Forward CreateTopicsRequest for FindCoordinator/Metadata when topic creation is needed (#9579)\n\nConsolidate auto topic creation logic to either forward a CreateTopicRequest or handling the creation directly as AutoTopicCreationManager.  when handling FindCoordinator/Metadata request.\n\nCo-authored-by: Jason Gustafson <jason@confluent.io>\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2021-02-07 05:04:30","modifiedFileCount":"15","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-03-23 04:39:29","codes":[{"authorDate":"2021-03-23 04:39:29","commitOrder":6,"curCode":"    public void shouldNotCommitOnHandleAssignmentIfNoTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","date":"2021-03-23 04:39:29","endLine":1186,"groupId":"101977","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCommitOnHandleAssignmentIfNoTaskClosed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/ee261715837dd2363bd8ef051c1d1588778d92.src","preCode":"    public void shouldNotCommitOnHandleAssignmentIfNoTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n\n        assertThat(task00.commitNeeded, is(true));\n        assertThat(task10.commitPrepared, is(false));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1159,"status":"M"},{"authorDate":"2021-03-23 04:39:29","commitOrder":6,"curCode":"    public void shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds(), null), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, Collections.emptyMap());\n\n        assertThat(task00.commitNeeded, is(true));\n    }\n","date":"2021-03-23 04:39:29","endLine":1215,"groupId":"101977","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/ee261715837dd2363bd8ef051c1d1588778d92.src","preCode":"    public void shouldNotCommitOnHandleAssignmentIfOnlyStandbyTaskClosed() {\n        final StateMachineTask task00 = new StateMachineTask(taskId00, taskId00Partitions, true);\n        final Map<TopicPartition, OffsetAndMetadata> offsets00 = singletonMap(t1p0, new OffsetAndMetadata(0L, null));\n        task00.setCommittableOffsetsAndMetadata(offsets00);\n        task00.setCommitNeeded();\n\n        final StateMachineTask task10 = new StateMachineTask(taskId10, taskId10Partitions, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignmentActive = singletonMap(taskId00, taskId00Partitions);\n        final Map<TaskId, Set<TopicPartition>> assignmentStandby = singletonMap(taskId10, taskId10Partitions);\n\n        expectRestoreToBeCompleted(consumer, changeLogReader);\n\n        expect(activeTaskCreator.createTasks(anyObject(), eq(assignmentActive))).andReturn(singleton(task00));\n        expect(standbyTaskCreator.createTasks(eq(assignmentStandby))).andReturn(singletonList(task10));\n\n        replay(activeTaskCreator, standbyTaskCreator, consumer, changeLogReader);\n\n        taskManager.handleAssignment(assignmentActive, assignmentStandby);\n        assertThat(taskManager.tryToCompleteRestoration(time.milliseconds()), is(true));\n        assertThat(task00.state(), is(Task.State.RUNNING));\n        assertThat(task10.state(), is(Task.State.RUNNING));\n\n        taskManager.handleAssignment(assignmentActive, Collections.emptyMap());\n\n        assertThat(task00.commitNeeded, is(true));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/TaskManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1189,"status":"M"}],"commitId":"80f373d34f7716a54fa9ec1e37a27c65cbbae0f2","commitMessage":"@@@(Cherry-pick) KAFKA-9274: handle TimeoutException on task reset (#10000) (#10372)\n\nThis PR was removed by accident in trunk and 2.8.  bringing it back.\n\nCo-authored-by: Matthias J. Sax <matthias@confluent.io>\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-03-23 04:39:29","modifiedFileCount":"10","status":"M","submitter":"Boyang Chen"}]
