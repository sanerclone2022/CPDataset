[{"authorTime":"2020-07-10 02:50:31","codes":[{"authorDate":"2020-07-10 02:50:31","commitOrder":1,"curCode":"    private void doShouldPassChangelogTopicNameToStateStoreSerde(final String topic) {\n        final Serde<String> keySerde = niceMock(Serde.class);\n        final Serializer<String> keySerializer = mock(Serializer.class);\n        final Serde<String> valueSerde = niceMock(Serde.class);\n        final Deserializer<String> valueDeserializer = mock(Deserializer.class);\n        final Serializer<String> valueSerializer = mock(Serializer.class);\n        expect(keySerde.serializer()).andStubReturn(keySerializer);\n        expect(keySerializer.serialize(topic, KEY)).andStubReturn(KEY.getBytes());\n        expect(valueSerde.deserializer()).andStubReturn(valueDeserializer);\n        expect(valueDeserializer.deserialize(topic, VALUE_BYTES)).andStubReturn(VALUE);\n        expect(valueSerde.serializer()).andStubReturn(valueSerializer);\n        expect(valueSerializer.serialize(topic, VALUE)).andStubReturn(VALUE_BYTES);\n        expect(innerStore.fetchSession(KEY_BYTES, START_TIMESTAMP, END_TIMESTAMP)).andStubReturn(VALUE_BYTES);\n        replay(innerStore, context, keySerializer, keySerde, valueDeserializer, valueSerializer, valueSerde);\n        store = new MeteredSessionStore<>(\n            innerStore,\n            STORE_TYPE,\n            keySerde,\n            valueSerde,\n            new MockTime()\n        );\n        store.init(context, store);\n\n        store.fetchSession(KEY, START_TIMESTAMP, END_TIMESTAMP);\n        store.put(WINDOWED_KEY, VALUE);\n\n        verify(keySerializer, valueDeserializer, valueSerializer);\n    }\n","date":"2020-07-10 02:50:31","endLine":201,"groupId":"4354","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doShouldPassChangelogTopicNameToStateStoreSerde","params":"(finalStringtopic)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/136f4690acea6214462ca938825015f2f06b54.src","preCode":"    private void doShouldPassChangelogTopicNameToStateStoreSerde(final String topic) {\n        final Serde<String> keySerde = niceMock(Serde.class);\n        final Serializer<String> keySerializer = mock(Serializer.class);\n        final Serde<String> valueSerde = niceMock(Serde.class);\n        final Deserializer<String> valueDeserializer = mock(Deserializer.class);\n        final Serializer<String> valueSerializer = mock(Serializer.class);\n        expect(keySerde.serializer()).andStubReturn(keySerializer);\n        expect(keySerializer.serialize(topic, KEY)).andStubReturn(KEY.getBytes());\n        expect(valueSerde.deserializer()).andStubReturn(valueDeserializer);\n        expect(valueDeserializer.deserialize(topic, VALUE_BYTES)).andStubReturn(VALUE);\n        expect(valueSerde.serializer()).andStubReturn(valueSerializer);\n        expect(valueSerializer.serialize(topic, VALUE)).andStubReturn(VALUE_BYTES);\n        expect(innerStore.fetchSession(KEY_BYTES, START_TIMESTAMP, END_TIMESTAMP)).andStubReturn(VALUE_BYTES);\n        replay(innerStore, context, keySerializer, keySerde, valueDeserializer, valueSerializer, valueSerde);\n        store = new MeteredSessionStore<>(\n            innerStore,\n            STORE_TYPE,\n            keySerde,\n            valueSerde,\n            new MockTime()\n        );\n        store.init(context, store);\n\n        store.fetchSession(KEY, START_TIMESTAMP, END_TIMESTAMP);\n        store.put(WINDOWED_KEY, VALUE);\n\n        verify(keySerializer, valueDeserializer, valueSerializer);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"B"},{"authorDate":"2020-07-10 02:50:31","commitOrder":1,"curCode":"    private void doShouldPassChangelogTopicNameToStateStoreSerde(final String topic) {\n        final Serde<String> keySerde = niceMock(Serde.class);\n        final Serializer<String> keySerializer = mock(Serializer.class);\n        final Serde<String> valueSerde = niceMock(Serde.class);\n        final Deserializer<String> valueDeserializer = mock(Deserializer.class);\n        final Serializer<String> valueSerializer = mock(Serializer.class);\n        expect(keySerde.serializer()).andStubReturn(keySerializer);\n        expect(keySerializer.serialize(topic, KEY)).andStubReturn(KEY.getBytes());\n        expect(valueSerde.deserializer()).andStubReturn(valueDeserializer);\n        expect(valueDeserializer.deserialize(topic, VALUE_BYTES)).andStubReturn(VALUE);\n        expect(valueSerde.serializer()).andStubReturn(valueSerializer);\n        expect(valueSerializer.serialize(topic, VALUE)).andStubReturn(VALUE_BYTES);\n        expect(innerStoreMock.fetch(KEY_BYTES, TIMESTAMP)).andStubReturn(VALUE_BYTES);\n        replay(innerStoreMock, keySerializer, keySerde, valueDeserializer, valueSerializer, valueSerde);\n        store = new MeteredWindowStore<>(\n            innerStoreMock,\n            WINDOW_SIZE_MS,\n            STORE_TYPE,\n            new MockTime(),\n            keySerde,\n            valueSerde\n        );\n        store.init(context, store);\n\n        store.fetch(KEY, TIMESTAMP);\n        store.put(KEY, VALUE, TIMESTAMP);\n\n        verify(keySerializer, valueDeserializer, valueSerializer);\n    }\n","date":"2020-07-10 02:50:31","endLine":192,"groupId":"4354","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doShouldPassChangelogTopicNameToStateStoreSerde","params":"(finalStringtopic)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3f/7eb1de2dbb8ccff8f9863087dde90ebc65b61f.src","preCode":"    private void doShouldPassChangelogTopicNameToStateStoreSerde(final String topic) {\n        final Serde<String> keySerde = niceMock(Serde.class);\n        final Serializer<String> keySerializer = mock(Serializer.class);\n        final Serde<String> valueSerde = niceMock(Serde.class);\n        final Deserializer<String> valueDeserializer = mock(Deserializer.class);\n        final Serializer<String> valueSerializer = mock(Serializer.class);\n        expect(keySerde.serializer()).andStubReturn(keySerializer);\n        expect(keySerializer.serialize(topic, KEY)).andStubReturn(KEY.getBytes());\n        expect(valueSerde.deserializer()).andStubReturn(valueDeserializer);\n        expect(valueDeserializer.deserialize(topic, VALUE_BYTES)).andStubReturn(VALUE);\n        expect(valueSerde.serializer()).andStubReturn(valueSerializer);\n        expect(valueSerializer.serialize(topic, VALUE)).andStubReturn(VALUE_BYTES);\n        expect(innerStoreMock.fetch(KEY_BYTES, TIMESTAMP)).andStubReturn(VALUE_BYTES);\n        replay(innerStoreMock, keySerializer, keySerde, valueDeserializer, valueSerializer, valueSerde);\n        store = new MeteredWindowStore<>(\n            innerStoreMock,\n            WINDOW_SIZE_MS,\n            STORE_TYPE,\n            new MockTime(),\n            keySerde,\n            valueSerde\n        );\n        store.init(context, store);\n\n        store.fetch(KEY, TIMESTAMP);\n        store.put(KEY, VALUE, TIMESTAMP);\n\n        verify(keySerializer, valueDeserializer, valueSerializer);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"B"}],"commitId":"813f92c21ad4bd7ffdd8acc66c20d31927e7a67f","commitMessage":"@@@KAFKA-10179: Pass correct changelog topic to state serdes (#8902)\n\nUntil now we always passed the default changelog topic name\nto the state serdes. However.  for optimized source tables\nand global tables the changelog topic is the source topic.\n\nMost serdes do not use the topic name passed to them.\nHowever.  if the serdes actually use the topic name for\n(de)serialization a\norg.apache.kafka.common.errors.SerializationException is thrown.\n\nThis commits passed the correct changelog topic to the state\nserdes of the metered state stores.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-07-10 02:50:31","modifiedFileCount":"30","status":"B","submitter":"Bruno Cadonna"},{"authorTime":"2020-10-03 07:49:12","codes":[{"authorDate":"2020-10-03 07:49:12","commitOrder":2,"curCode":"    private void doShouldPassChangelogTopicNameToStateStoreSerde(final String topic) {\n        final Serde<String> keySerde = niceMock(Serde.class);\n        final Serializer<String> keySerializer = mock(Serializer.class);\n        final Serde<String> valueSerde = niceMock(Serde.class);\n        final Deserializer<String> valueDeserializer = mock(Deserializer.class);\n        final Serializer<String> valueSerializer = mock(Serializer.class);\n        expect(keySerde.serializer()).andStubReturn(keySerializer);\n        expect(keySerializer.serialize(topic, KEY)).andStubReturn(KEY.getBytes());\n        expect(valueSerde.deserializer()).andStubReturn(valueDeserializer);\n        expect(valueDeserializer.deserialize(topic, VALUE_BYTES)).andStubReturn(VALUE);\n        expect(valueSerde.serializer()).andStubReturn(valueSerializer);\n        expect(valueSerializer.serialize(topic, VALUE)).andStubReturn(VALUE_BYTES);\n        expect(innerStore.fetchSession(KEY_BYTES, START_TIMESTAMP, END_TIMESTAMP)).andStubReturn(VALUE_BYTES);\n        replay(innerStore, context, keySerializer, keySerde, valueDeserializer, valueSerializer, valueSerde);\n        store = new MeteredSessionStore<>(\n            innerStore,\n            STORE_TYPE,\n            keySerde,\n            valueSerde,\n            new MockTime()\n        );\n        store.init((StateStoreContext) context, store);\n\n        store.fetchSession(KEY, START_TIMESTAMP, END_TIMESTAMP);\n        store.put(WINDOWED_KEY, VALUE);\n\n        verify(keySerializer, valueDeserializer, valueSerializer);\n    }\n","date":"2020-10-03 07:49:12","endLine":205,"groupId":"101169","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doShouldPassChangelogTopicNameToStateStoreSerde","params":"(finalStringtopic)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0f/f822ebb697c34877b468b60d116e18a44aec71.src","preCode":"    private void doShouldPassChangelogTopicNameToStateStoreSerde(final String topic) {\n        final Serde<String> keySerde = niceMock(Serde.class);\n        final Serializer<String> keySerializer = mock(Serializer.class);\n        final Serde<String> valueSerde = niceMock(Serde.class);\n        final Deserializer<String> valueDeserializer = mock(Deserializer.class);\n        final Serializer<String> valueSerializer = mock(Serializer.class);\n        expect(keySerde.serializer()).andStubReturn(keySerializer);\n        expect(keySerializer.serialize(topic, KEY)).andStubReturn(KEY.getBytes());\n        expect(valueSerde.deserializer()).andStubReturn(valueDeserializer);\n        expect(valueDeserializer.deserialize(topic, VALUE_BYTES)).andStubReturn(VALUE);\n        expect(valueSerde.serializer()).andStubReturn(valueSerializer);\n        expect(valueSerializer.serialize(topic, VALUE)).andStubReturn(VALUE_BYTES);\n        expect(innerStore.fetchSession(KEY_BYTES, START_TIMESTAMP, END_TIMESTAMP)).andStubReturn(VALUE_BYTES);\n        replay(innerStore, context, keySerializer, keySerde, valueDeserializer, valueSerializer, valueSerde);\n        store = new MeteredSessionStore<>(\n            innerStore,\n            STORE_TYPE,\n            keySerde,\n            valueSerde,\n            new MockTime()\n        );\n        store.init(context, store);\n\n        store.fetchSession(KEY, START_TIMESTAMP, END_TIMESTAMP);\n        store.put(WINDOWED_KEY, VALUE);\n\n        verify(keySerializer, valueDeserializer, valueSerializer);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredSessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2020-10-03 07:49:12","commitOrder":2,"curCode":"    private void doShouldPassChangelogTopicNameToStateStoreSerde(final String topic) {\n        final Serde<String> keySerde = niceMock(Serde.class);\n        final Serializer<String> keySerializer = mock(Serializer.class);\n        final Serde<String> valueSerde = niceMock(Serde.class);\n        final Deserializer<String> valueDeserializer = mock(Deserializer.class);\n        final Serializer<String> valueSerializer = mock(Serializer.class);\n        expect(keySerde.serializer()).andStubReturn(keySerializer);\n        expect(keySerializer.serialize(topic, KEY)).andStubReturn(KEY.getBytes());\n        expect(valueSerde.deserializer()).andStubReturn(valueDeserializer);\n        expect(valueDeserializer.deserialize(topic, VALUE_BYTES)).andStubReturn(VALUE);\n        expect(valueSerde.serializer()).andStubReturn(valueSerializer);\n        expect(valueSerializer.serialize(topic, VALUE)).andStubReturn(VALUE_BYTES);\n        expect(innerStoreMock.fetch(KEY_BYTES, TIMESTAMP)).andStubReturn(VALUE_BYTES);\n        replay(innerStoreMock, keySerializer, keySerde, valueDeserializer, valueSerializer, valueSerde);\n        store = new MeteredWindowStore<>(\n            innerStoreMock,\n            WINDOW_SIZE_MS,\n            STORE_TYPE,\n            new MockTime(),\n            keySerde,\n            valueSerde\n        );\n        store.init((StateStoreContext) context, store);\n\n        store.fetch(KEY, TIMESTAMP);\n        store.put(KEY, VALUE, TIMESTAMP);\n\n        verify(keySerializer, valueDeserializer, valueSerializer);\n    }\n","date":"2020-10-03 07:49:12","endLine":194,"groupId":"101169","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doShouldPassChangelogTopicNameToStateStoreSerde","params":"(finalStringtopic)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/0169476f3403154f62b6a95917630b44046bff.src","preCode":"    private void doShouldPassChangelogTopicNameToStateStoreSerde(final String topic) {\n        final Serde<String> keySerde = niceMock(Serde.class);\n        final Serializer<String> keySerializer = mock(Serializer.class);\n        final Serde<String> valueSerde = niceMock(Serde.class);\n        final Deserializer<String> valueDeserializer = mock(Deserializer.class);\n        final Serializer<String> valueSerializer = mock(Serializer.class);\n        expect(keySerde.serializer()).andStubReturn(keySerializer);\n        expect(keySerializer.serialize(topic, KEY)).andStubReturn(KEY.getBytes());\n        expect(valueSerde.deserializer()).andStubReturn(valueDeserializer);\n        expect(valueDeserializer.deserialize(topic, VALUE_BYTES)).andStubReturn(VALUE);\n        expect(valueSerde.serializer()).andStubReturn(valueSerializer);\n        expect(valueSerializer.serialize(topic, VALUE)).andStubReturn(VALUE_BYTES);\n        expect(innerStoreMock.fetch(KEY_BYTES, TIMESTAMP)).andStubReturn(VALUE_BYTES);\n        replay(innerStoreMock, keySerializer, keySerde, valueDeserializer, valueSerializer, valueSerde);\n        store = new MeteredWindowStore<>(\n            innerStoreMock,\n            WINDOW_SIZE_MS,\n            STORE_TYPE,\n            new MockTime(),\n            keySerde,\n            valueSerde\n        );\n        store.init(context, store);\n\n        store.fetch(KEY, TIMESTAMP);\n        store.put(KEY, VALUE, TIMESTAMP);\n\n        verify(keySerializer, valueDeserializer, valueSerializer);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"69790a1463bafc1f63e3c288a6636b3f4586c1b4","commitMessage":"@@@KAFKA-10535: Split ProcessorContext into Processor/StateStore/Record Contexts (#9361)\n\nMigrate different components of the old ProcessorContext interface\ninto separate interfaces that are more appropriate for their usages.\nSee KIP-478 for the details.\n\nReviewers: Guozhang Wang <guozhang@apache.org>.  Paul Whalen <pgwhalen@gmail.com>","date":"2020-10-03 07:49:12","modifiedFileCount":"71","status":"M","submitter":"John Roesler"}]
