[{"authorTime":"2018-08-16 05:30:24","codes":[{"authorDate":"2018-08-16 05:30:24","commitOrder":1,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        assertEquals(JoinWindows.of(3), JoinWindows.of(3));\n        assertEquals(JoinWindows.of(3).hashCode(), JoinWindows.of(3).hashCode());\n\n        assertEquals(JoinWindows.of(3).after(2), JoinWindows.of(3).after(2));\n        assertEquals(JoinWindows.of(3).after(2).hashCode(), JoinWindows.of(3).after(2).hashCode());\n\n        assertEquals(JoinWindows.of(3).before(2), JoinWindows.of(3).before(2));\n        assertEquals(JoinWindows.of(3).before(2).hashCode(), JoinWindows.of(3).before(2).hashCode());\n\n        assertEquals(JoinWindows.of(3).grace(2), JoinWindows.of(3).grace(2));\n        assertEquals(JoinWindows.of(3).grace(2).hashCode(), JoinWindows.of(3).grace(2).hashCode());\n\n        assertEquals(JoinWindows.of(3).until(60), JoinWindows.of(3).until(60));\n        assertEquals(JoinWindows.of(3).until(60).hashCode(), JoinWindows.of(3).until(60).hashCode());\n\n        assertEquals(\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60)\n        );\n        assertEquals(\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode(),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode()\n        );\n        \r\n        assertEquals(\n            JoinWindows.of(9).before(1).after(2).grace(3).until(60),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60)\n        );\n        assertEquals(\n            JoinWindows.of(9).before(1).after(2).grace(3).until(60).hashCode(),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode()\n        );\n    }\n","date":"2018-08-16 05:30:24","endLine":140,"groupId":"18629","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ae/7937125b70a0731842200e4485675ac150e3a1.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        assertEquals(JoinWindows.of(3), JoinWindows.of(3));\n        assertEquals(JoinWindows.of(3).hashCode(), JoinWindows.of(3).hashCode());\n\n        assertEquals(JoinWindows.of(3).after(2), JoinWindows.of(3).after(2));\n        assertEquals(JoinWindows.of(3).after(2).hashCode(), JoinWindows.of(3).after(2).hashCode());\n\n        assertEquals(JoinWindows.of(3).before(2), JoinWindows.of(3).before(2));\n        assertEquals(JoinWindows.of(3).before(2).hashCode(), JoinWindows.of(3).before(2).hashCode());\n\n        assertEquals(JoinWindows.of(3).grace(2), JoinWindows.of(3).grace(2));\n        assertEquals(JoinWindows.of(3).grace(2).hashCode(), JoinWindows.of(3).grace(2).hashCode());\n\n        assertEquals(JoinWindows.of(3).until(60), JoinWindows.of(3).until(60));\n        assertEquals(JoinWindows.of(3).until(60).hashCode(), JoinWindows.of(3).until(60).hashCode());\n\n        assertEquals(\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60)\n        );\n        assertEquals(\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode(),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode()\n        );\n        \r\n        assertEquals(\n            JoinWindows.of(9).before(1).after(2).grace(3).until(60),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60)\n        );\n        assertEquals(\n            JoinWindows.of(9).before(1).after(2).grace(3).until(60).hashCode(),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode()\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/JoinWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"},{"authorDate":"2018-08-16 05:30:24","commitOrder":1,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        assertEquals(SessionWindows.with(1), SessionWindows.with(1));\n        assertEquals(SessionWindows.with(1).hashCode(), SessionWindows.with(1).hashCode());\n\n        assertEquals(SessionWindows.with(1).grace(6), SessionWindows.with(1).grace(6));\n        assertEquals(SessionWindows.with(1).grace(6).hashCode(), SessionWindows.with(1).grace(6).hashCode());\n\n        assertEquals(SessionWindows.with(1).until(7), SessionWindows.with(1).until(7));\n        assertEquals(SessionWindows.with(1).until(7).hashCode(), SessionWindows.with(1).until(7).hashCode());\n\n        assertEquals(SessionWindows.with(1).grace(6).until(7), SessionWindows.with(1).grace(6).until(7));\n        assertEquals(SessionWindows.with(1).grace(6).until(7).hashCode(), SessionWindows.with(1).grace(6).until(7).hashCode());\n    }\n","date":"2018-08-16 05:30:24","endLine":95,"groupId":"13239","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2a/cd5d2ba6424e8b5288502b9626727d7d40fb2c.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        assertEquals(SessionWindows.with(1), SessionWindows.with(1));\n        assertEquals(SessionWindows.with(1).hashCode(), SessionWindows.with(1).hashCode());\n\n        assertEquals(SessionWindows.with(1).grace(6), SessionWindows.with(1).grace(6));\n        assertEquals(SessionWindows.with(1).grace(6).hashCode(), SessionWindows.with(1).grace(6).hashCode());\n\n        assertEquals(SessionWindows.with(1).until(7), SessionWindows.with(1).until(7));\n        assertEquals(SessionWindows.with(1).until(7).hashCode(), SessionWindows.with(1).until(7).hashCode());\n\n        assertEquals(SessionWindows.with(1).grace(6).until(7), SessionWindows.with(1).grace(6).until(7));\n        assertEquals(SessionWindows.with(1).grace(6).until(7).hashCode(), SessionWindows.with(1).grace(6).until(7).hashCode());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/SessionWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"a4a65abcd3e5a01e0910afb10a214f4bb47577a3","commitMessage":"@@@MINOR: (re)add equals/hashCode to *Windows (#5510)\n\nAndy Coates <big-andy-coates@users.noreply.github.com>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-08-16 05:30:24","modifiedFileCount":"9","status":"B","submitter":"John Roesler"},{"authorTime":"2018-08-24 08:53:10","codes":[{"authorDate":"2018-08-24 08:53:10","commitOrder":2,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(JoinWindows.of(3), JoinWindows.of(3));\n\n        verifyEquality(JoinWindows.of(3).after(2), JoinWindows.of(3).after(2));\n\n        verifyEquality(JoinWindows.of(3).before(2), JoinWindows.of(3).before(2));\n\n        verifyEquality(JoinWindows.of(3).grace(2), JoinWindows.of(3).grace(2));\n\n        verifyEquality(JoinWindows.of(3).until(60), JoinWindows.of(3).until(60));\n\n        verifyEquality(\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60)\n        );\n        \r\n        verifyEquality(\n            JoinWindows.of(9).before(1).after(2).grace(3).until(60),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60)\n        );\n    }\n","date":"2018-08-24 08:53:10","endLine":128,"groupId":"12986","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/635b441f428e156a072e4aa1fd63ceb8642a23.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        assertEquals(JoinWindows.of(3), JoinWindows.of(3));\n        assertEquals(JoinWindows.of(3).hashCode(), JoinWindows.of(3).hashCode());\n\n        assertEquals(JoinWindows.of(3).after(2), JoinWindows.of(3).after(2));\n        assertEquals(JoinWindows.of(3).after(2).hashCode(), JoinWindows.of(3).after(2).hashCode());\n\n        assertEquals(JoinWindows.of(3).before(2), JoinWindows.of(3).before(2));\n        assertEquals(JoinWindows.of(3).before(2).hashCode(), JoinWindows.of(3).before(2).hashCode());\n\n        assertEquals(JoinWindows.of(3).grace(2), JoinWindows.of(3).grace(2));\n        assertEquals(JoinWindows.of(3).grace(2).hashCode(), JoinWindows.of(3).grace(2).hashCode());\n\n        assertEquals(JoinWindows.of(3).until(60), JoinWindows.of(3).until(60));\n        assertEquals(JoinWindows.of(3).until(60).hashCode(), JoinWindows.of(3).until(60).hashCode());\n\n        assertEquals(\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60)\n        );\n        assertEquals(\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode(),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode()\n        );\n        \r\n        assertEquals(\n            JoinWindows.of(9).before(1).after(2).grace(3).until(60),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60)\n        );\n        assertEquals(\n            JoinWindows.of(9).before(1).after(2).grace(3).until(60).hashCode(),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60).hashCode()\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/JoinWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2018-08-24 08:53:10","commitOrder":2,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(SessionWindows.with(1), SessionWindows.with(1));\n\n        verifyEquality(SessionWindows.with(1).grace(6), SessionWindows.with(1).grace(6));\n\n        verifyEquality(SessionWindows.with(1).until(7), SessionWindows.with(1).until(7));\n\n        verifyEquality(SessionWindows.with(1).grace(6).until(7), SessionWindows.with(1).grace(6).until(7));\n    }\n","date":"2018-08-24 08:53:10","endLine":92,"groupId":"7500","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9f/99be45cbe8e5076ea67b5dec4130a164da1087.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        assertEquals(SessionWindows.with(1), SessionWindows.with(1));\n        assertEquals(SessionWindows.with(1).hashCode(), SessionWindows.with(1).hashCode());\n\n        assertEquals(SessionWindows.with(1).grace(6), SessionWindows.with(1).grace(6));\n        assertEquals(SessionWindows.with(1).grace(6).hashCode(), SessionWindows.with(1).grace(6).hashCode());\n\n        assertEquals(SessionWindows.with(1).until(7), SessionWindows.with(1).until(7));\n        assertEquals(SessionWindows.with(1).until(7).hashCode(), SessionWindows.with(1).until(7).hashCode());\n\n        assertEquals(SessionWindows.with(1).grace(6).until(7), SessionWindows.with(1).grace(6).until(7));\n        assertEquals(SessionWindows.with(1).grace(6).until(7).hashCode(), SessionWindows.with(1).grace(6).until(7).hashCode());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/SessionWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"1dd85a328f437643a5c135f242c644f47c3767e4","commitMessage":"@@@MINOR: restructure Windows to favor immutable implementation (#5536)\n\nUpdate to KIP-328.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Ted Yu <yuzhihong@gmail.com>.  Kamal Chandraprakash <kamal.chandraprakash@gmail.com>","date":"2018-08-24 08:53:10","modifiedFileCount":"11","status":"M","submitter":"John Roesler"},{"authorTime":"2018-10-05 04:51:39","codes":[{"authorDate":"2018-10-05 04:51:39","commitOrder":3,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(JoinWindows.of(ofMillis(3)), JoinWindows.of(ofMillis(3)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).after(ofMillis(2)), JoinWindows.of(ofMillis(3)).after(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(2)), JoinWindows.of(ofMillis(3)).before(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(2)), JoinWindows.of(ofMillis(3)).grace(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).until(60), JoinWindows.of(ofMillis(3)).until(60));\n\n        verifyEquality(\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60),\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60)\n        );\n        \r\n        verifyEquality(\n            JoinWindows.of(ofMillis(9)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60),\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60)\n        );\n    }\n","date":"2018-10-05 04:51:39","endLine":129,"groupId":"22150","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/3c1f1b7dae17b77e07863bcc3f2adef05aab66.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(JoinWindows.of(3), JoinWindows.of(3));\n\n        verifyEquality(JoinWindows.of(3).after(2), JoinWindows.of(3).after(2));\n\n        verifyEquality(JoinWindows.of(3).before(2), JoinWindows.of(3).before(2));\n\n        verifyEquality(JoinWindows.of(3).grace(2), JoinWindows.of(3).grace(2));\n\n        verifyEquality(JoinWindows.of(3).until(60), JoinWindows.of(3).until(60));\n\n        verifyEquality(\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60)\n        );\n        \r\n        verifyEquality(\n            JoinWindows.of(9).before(1).after(2).grace(3).until(60),\n            JoinWindows.of(3).before(1).after(2).grace(3).until(60)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/JoinWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2018-10-05 04:51:39","commitOrder":3,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(SessionWindows.with(ofMillis(1)), SessionWindows.with(ofMillis(1)));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(6)), SessionWindows.with(ofMillis(1)).grace(ofMillis(6)));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).until(7), SessionWindows.with(ofMillis(1)).until(7));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(6)).until(7), SessionWindows.with(ofMillis(1)).grace(ofMillis(6)).until(7));\n    }\n","date":"2018-10-05 04:51:39","endLine":93,"groupId":"22341","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6f/c0caca9602098327d57252533906bcf3f7b5ce.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(SessionWindows.with(1), SessionWindows.with(1));\n\n        verifyEquality(SessionWindows.with(1).grace(6), SessionWindows.with(1).grace(6));\n\n        verifyEquality(SessionWindows.with(1).until(7), SessionWindows.with(1).until(7));\n\n        verifyEquality(SessionWindows.with(1).grace(6).until(7), SessionWindows.with(1).grace(6).until(7));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/SessionWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"ca641b3e2e48c14ff308181c775775408f5f35f7","commitMessage":"@@@KAFKA-7277: Migrate Streams API to Duration instead of longMs times (#5682)\n\nReviewers: Johne Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-10-05 04:51:39","modifiedFileCount":"97","status":"M","submitter":"Nikolay"},{"authorTime":"2018-11-15 09:29:19","codes":[{"authorDate":"2018-11-15 09:29:19","commitOrder":4,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(JoinWindows.of(ofMillis(3)), JoinWindows.of(ofMillis(3)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).after(ofMillis(2)), JoinWindows.of(ofMillis(3)).after(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(2)), JoinWindows.of(ofMillis(3)).before(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(2)), JoinWindows.of(ofMillis(3)).grace(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(60)), JoinWindows.of(ofMillis(3)).grace(ofMillis(60)));\n\n        verifyEquality(\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60)),\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60))\n        );\n        \r\n        verifyEquality(\n            JoinWindows.of(ofMillis(9)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60)),\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60))\n        );\n    }\n","date":"2018-11-15 09:29:19","endLine":128,"groupId":"14742","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dd/a2da4d44ce0e8ee45b4407ae59a4cb651853e2.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(JoinWindows.of(ofMillis(3)), JoinWindows.of(ofMillis(3)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).after(ofMillis(2)), JoinWindows.of(ofMillis(3)).after(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(2)), JoinWindows.of(ofMillis(3)).before(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(2)), JoinWindows.of(ofMillis(3)).grace(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).until(60), JoinWindows.of(ofMillis(3)).until(60));\n\n        verifyEquality(\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60),\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60)\n        );\n        \r\n        verifyEquality(\n            JoinWindows.of(ofMillis(9)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60),\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).until(60)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/JoinWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2018-11-15 09:29:19","commitOrder":4,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(SessionWindows.with(ofMillis(1)), SessionWindows.with(ofMillis(1)));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(6)), SessionWindows.with(ofMillis(1)).grace(ofMillis(6)));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(7)), SessionWindows.with(ofMillis(1)).grace(ofMillis(7)));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(6)).grace(ofMillis(7)), SessionWindows.with(ofMillis(1)).grace(ofMillis(6)).grace(ofMillis(7)));\n    }\n","date":"2018-11-15 09:29:19","endLine":93,"groupId":"16479","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ea/c978cfeafb60fb252d799302cc432934c7de43.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(SessionWindows.with(ofMillis(1)), SessionWindows.with(ofMillis(1)));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(6)), SessionWindows.with(ofMillis(1)).grace(ofMillis(6)));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).until(7), SessionWindows.with(ofMillis(1)).until(7));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(6)).until(7), SessionWindows.with(ofMillis(1)).grace(ofMillis(6)).until(7));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/SessionWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"14d3ead19d250f2f3117af473ff6244c663ef8ca","commitMessage":"@@@MINOR: Remove deprecated callers (#5911)\n\nCallers of 1) Windows#until.  2) Windows#of.  3) Serialized are replaced when possible with the new APIs.\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Bill Bejeck <bill@confluent.io>","date":"2018-11-15 09:29:19","modifiedFileCount":"28","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2021-07-01 08:09:19","codes":[{"authorDate":"2021-07-01 08:09:19","commitOrder":5,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(JoinWindows.of(ofMillis(3)), JoinWindows.of(ofMillis(3)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).after(ofMillis(2)), JoinWindows.of(ofMillis(3)).after(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(2)), JoinWindows.of(ofMillis(3)).before(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(2)), JoinWindows.of(ofMillis(3)).grace(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(60)), JoinWindows.of(ofMillis(3)).grace(ofMillis(60)));\n\n        verifyEquality(\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60)),\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60))\n        );\n        \r\n        verifyEquality(\n            JoinWindows.of(ofMillis(9)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60)),\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60))\n        );\n\n        verifyEquality(\n                JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3)),\n                JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3))\n        );\n\n        verifyEquality(\n                JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3), ofMillis(4)),\n                JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3), ofMillis(4))\n        );\n    }\n","date":"2021-07-01 08:09:19","endLine":151,"groupId":"14742","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ca/1512f236fb69ff09c08b6943e702355fa826c7.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(JoinWindows.of(ofMillis(3)), JoinWindows.of(ofMillis(3)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).after(ofMillis(2)), JoinWindows.of(ofMillis(3)).after(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(2)), JoinWindows.of(ofMillis(3)).before(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(2)), JoinWindows.of(ofMillis(3)).grace(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(60)), JoinWindows.of(ofMillis(3)).grace(ofMillis(60)));\n\n        verifyEquality(\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60)),\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60))\n        );\n        \r\n        verifyEquality(\n            JoinWindows.of(ofMillis(9)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60)),\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/JoinWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2021-07-01 08:09:19","commitOrder":5,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(SessionWindows.with(ofMillis(1)), SessionWindows.with(ofMillis(1)));\n\n        verifyEquality(SessionWindows.ofInactivityGapWithNoGrace(ofMillis(1)),\n                SessionWindows.ofInactivityGapWithNoGrace(ofMillis(1))\n        );\n\n        verifyEquality(\n                SessionWindows.ofInactivityGapAndGrace(ofMillis(1), ofMillis(11)),\n                SessionWindows.ofInactivityGapAndGrace(ofMillis(1), ofMillis(11))\n        );\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(6)), SessionWindows.with(ofMillis(1)).grace(ofMillis(6)));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(7)), SessionWindows.with(ofMillis(1)).grace(ofMillis(7)));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(6)).grace(ofMillis(7)), SessionWindows.with(ofMillis(1)).grace(ofMillis(6)).grace(ofMillis(7)));\n    }\n","date":"2021-07-01 08:09:19","endLine":88,"groupId":"16479","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/8be3cbdd2c6e34d0c0d4446bf2362e001c6d81.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(SessionWindows.with(ofMillis(1)), SessionWindows.with(ofMillis(1)));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(6)), SessionWindows.with(ofMillis(1)).grace(ofMillis(6)));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(7)), SessionWindows.with(ofMillis(1)).grace(ofMillis(7)));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(6)).grace(ofMillis(7)), SessionWindows.with(ofMillis(1)).grace(ofMillis(6)).grace(ofMillis(7)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/SessionWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"b3905d9f71d48a60f2a9ee38014582d7ec7bc3c2","commitMessage":"@@@KAFKA-8613: New APIs for Controlling Grace Period for Windowed Operations (#10926)\n\nImplements KIP-633.\n\nGrace-period is an important parameter and its best to make it the user's responsibility to set it expliclity. Thus.  we move off to provide a default and make it a mandatory parameter when creating a window.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Luke Chen <showuon@gmail.com>.  Matthias J. Sax <matthias@confluent.io>","date":"2021-07-01 08:09:19","modifiedFileCount":"45","status":"M","submitter":"Israel Ekpo"},{"authorTime":"2021-09-08 10:50:18","codes":[{"authorDate":"2021-09-08 10:50:18","commitOrder":6,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(\n            JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3)),\n            JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3))\n        );\n\n        verifyEquality(\n            JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3), ofMillis(2)),\n            JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3), ofMillis(2))\n        );\n\n        verifyEquality(\n            JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3)).after(ofMillis(2)),\n            JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3)).after(ofMillis(2))\n        );\n\n        verifyEquality(\n            JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3)).before(ofMillis(2)),\n            JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3)).before(ofMillis(2))\n        );\n\n        verifyEquality(\n            JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3), ofMillis(2)).after(ofMillis(4)),\n            JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3), ofMillis(2)).after(ofMillis(4))\n        );\n\n        verifyEquality(\n            JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3), ofMillis(2)).before(ofMillis(4)),\n            JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3), ofMillis(2)).before(ofMillis(4))\n        );\n    }\n","date":"2021-09-08 10:50:18","endLine":173,"groupId":"101360","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c9/62189dd9fe81def4a5cf6eb706d6ad9fdff472.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(JoinWindows.of(ofMillis(3)), JoinWindows.of(ofMillis(3)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).after(ofMillis(2)), JoinWindows.of(ofMillis(3)).after(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).before(ofMillis(2)), JoinWindows.of(ofMillis(3)).before(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(2)), JoinWindows.of(ofMillis(3)).grace(ofMillis(2)));\n\n        verifyEquality(JoinWindows.of(ofMillis(3)).grace(ofMillis(60)), JoinWindows.of(ofMillis(3)).grace(ofMillis(60)));\n\n        verifyEquality(\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60)),\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60))\n        );\n        \r\n        verifyEquality(\n            JoinWindows.of(ofMillis(9)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60)),\n            JoinWindows.of(ofMillis(3)).before(ofMillis(1)).after(ofMillis(2)).grace(ofMillis(3)).grace(ofMillis(60))\n        );\n\n        verifyEquality(\n                JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3)),\n                JoinWindows.ofTimeDifferenceWithNoGrace(ofMillis(3))\n        );\n\n        verifyEquality(\n                JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3), ofMillis(4)),\n                JoinWindows.ofTimeDifferenceAndGrace(ofMillis(3), ofMillis(4))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/JoinWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2021-09-08 10:50:18","commitOrder":6,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(\n            SessionWindows.ofInactivityGapWithNoGrace(ofMillis(1)),\n            SessionWindows.ofInactivityGapWithNoGrace(ofMillis(1))\n        );\n\n        verifyEquality(\n            SessionWindows.ofInactivityGapAndGrace(ofMillis(1), ofMillis(11)),\n            SessionWindows.ofInactivityGapAndGrace(ofMillis(1), ofMillis(11))\n        );\n    }\n","date":"2021-09-08 10:50:18","endLine":101,"groupId":"101360","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/76/d73971f993c917a32afabaf46fb6e74baa708c.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(SessionWindows.with(ofMillis(1)), SessionWindows.with(ofMillis(1)));\n\n        verifyEquality(SessionWindows.ofInactivityGapWithNoGrace(ofMillis(1)),\n                SessionWindows.ofInactivityGapWithNoGrace(ofMillis(1))\n        );\n\n        verifyEquality(\n                SessionWindows.ofInactivityGapAndGrace(ofMillis(1), ofMillis(11)),\n                SessionWindows.ofInactivityGapAndGrace(ofMillis(1), ofMillis(11))\n        );\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(6)), SessionWindows.with(ofMillis(1)).grace(ofMillis(6)));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(7)), SessionWindows.with(ofMillis(1)).grace(ofMillis(7)));\n\n        verifyEquality(SessionWindows.with(ofMillis(1)).grace(ofMillis(6)).grace(ofMillis(7)), SessionWindows.with(ofMillis(1)).grace(ofMillis(6)).grace(ofMillis(7)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/SessionWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"6472e790928e24e27da1bb9723b9b5d2ab3efe50","commitMessage":"@@@KAFKA-12994 Migrate JoinWindowsTest and SessionWindowsTest to new API (#11214)\n\nAs detailed in KAFKA-12994.  unit tests using the old API should be either removed or migrated to the new API.\nThis PR migrates relevant tests in JoinWindowsTest.java and SessionWindowsTest.java.\n\nReviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>","date":"2021-09-08 10:50:18","modifiedFileCount":"2","status":"M","submitter":"Christo Lolov"}]
