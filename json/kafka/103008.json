[{"authorTime":"2019-04-17 00:10:38","codes":[{"authorDate":"2019-04-17 00:10:38","commitOrder":9,"curCode":"    private <VR> KStream<K, VR> doTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR> valueTransformerWithKeySupplier,\n                                                  final String... stateStoreNames) {\n        final String name = builder.newProcessorName(TRANSFORMVALUES_NAME);\n\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames\n        );\n\n        transformNode.setValueChangingOperation(true);\n        builder.addGraphNode(this.streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(name, keySerde, null, sourceNodes, repartitionRequired, transformNode, builder);\n    }\n","date":"2019-04-17 00:10:38","endLine":503,"groupId":"10599","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTransformValues","params":"(finalValueTransformerWithKeySupplier<?superK@?superV@?extendsVR>valueTransformerWithKeySupplier@finalString...stateStoreNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/75/df0582ee3e1e03c71d894f5b43179428b65e3b.src","preCode":"    private <VR> KStream<K, VR> doTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR> valueTransformerWithKeySupplier,\n                                                  final String... stateStoreNames) {\n        final String name = builder.newProcessorName(TRANSFORMVALUES_NAME);\n\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames\n        );\n\n        transformNode.setValueChangingOperation(true);\n        builder.addGraphNode(this.streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(name, keySerde, null, sourceNodes, repartitionRequired, transformNode, builder);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"MB"},{"authorDate":"2019-04-17 00:10:38","commitOrder":9,"curCode":"    private <VR> KStream<K, VR> doFlatTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, Iterable<VR>> valueTransformerWithKeySupplier,\n                                                      final String... stateStoreNames) {\n        final String name = builder.newProcessorName(TRANSFORMVALUES_NAME);\n\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamFlatTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames\n        );\n\n        transformNode.setValueChangingOperation(true);\n        builder.addGraphNode(this.streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(name, keySerde, null, sourceNodes, repartitionRequired, transformNode, builder);\n    }\n","date":"2019-04-17 00:10:38","endLine":536,"groupId":"10599","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doFlatTransformValues","params":"(finalValueTransformerWithKeySupplier<?superK@?superV@Iterable<VR>>valueTransformerWithKeySupplier@finalString...stateStoreNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/75/df0582ee3e1e03c71d894f5b43179428b65e3b.src","preCode":"    private <VR> KStream<K, VR> doFlatTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, Iterable<VR>> valueTransformerWithKeySupplier,\n                                                      final String... stateStoreNames) {\n        final String name = builder.newProcessorName(TRANSFORMVALUES_NAME);\n\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamFlatTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames\n        );\n\n        transformNode.setValueChangingOperation(true);\n        builder.addGraphNode(this.streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(name, keySerde, null, sourceNodes, repartitionRequired, transformNode, builder);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":521,"status":"B"}],"commitId":"05668e98f531cf4d6ddb0696f0f72675ca128581","commitMessage":"@@@KAFKA-7875: Add KStream.flatTransformValues (#6424)\n\nAdds flatTrasformValues methods in KStream\nAdds processor supplier and processor for flatTransformValues\nImproves API documentation of transformValues\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.   John Roesler <john@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-04-17 00:10:38","modifiedFileCount":"4","status":"M","submitter":"cadonna"},{"authorTime":"2019-05-31 21:29:43","codes":[{"authorDate":"2019-05-31 21:29:43","commitOrder":10,"curCode":"    private <VR> KStream<K, VR> doTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR> valueTransformerWithKeySupplier,\n                                                  final NamedInternal named,\n                                                  final String... stateStoreNames) {\n\n        final String name = named.orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames\n        );\n\n        transformNode.setValueChangingOperation(true);\n        builder.addGraphNode(this.streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(name, keySerde, null, sourceNodes, repartitionRequired, transformNode, builder);\n    }\n","date":"2019-05-31 21:29:42","endLine":629,"groupId":"10599","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTransformValues","params":"(finalValueTransformerWithKeySupplier<?superK@?superV@?extendsVR>valueTransformerWithKeySupplier@finalNamedInternalnamed@finalString...stateStoreNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/76033e82f3d1f42971c15f70e226451c03d690.src","preCode":"    private <VR> KStream<K, VR> doTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR> valueTransformerWithKeySupplier,\n                                                  final String... stateStoreNames) {\n        final String name = builder.newProcessorName(TRANSFORMVALUES_NAME);\n\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames\n        );\n\n        transformNode.setValueChangingOperation(true);\n        builder.addGraphNode(this.streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(name, keySerde, null, sourceNodes, repartitionRequired, transformNode, builder);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"M"},{"authorDate":"2019-05-31 21:29:43","commitOrder":10,"curCode":"    private <VR> KStream<K, VR> doFlatTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, Iterable<VR>> valueTransformerWithKeySupplier,\n                                                      final Named named,\n                                                      final String... stateStoreNames) {\n        final String name = new NamedInternal(named).orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamFlatTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames\n        );\n\n        transformNode.setValueChangingOperation(true);\n        builder.addGraphNode(this.streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(name, keySerde, null, sourceNodes, repartitionRequired, transformNode, builder);\n    }\n","date":"2019-05-31 21:29:42","endLine":681,"groupId":"10599","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doFlatTransformValues","params":"(finalValueTransformerWithKeySupplier<?superK@?superV@Iterable<VR>>valueTransformerWithKeySupplier@finalNamednamed@finalString...stateStoreNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/76033e82f3d1f42971c15f70e226451c03d690.src","preCode":"    private <VR> KStream<K, VR> doFlatTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, Iterable<VR>> valueTransformerWithKeySupplier,\n                                                      final String... stateStoreNames) {\n        final String name = builder.newProcessorName(TRANSFORMVALUES_NAME);\n\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamFlatTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames\n        );\n\n        transformNode.setValueChangingOperation(true);\n        builder.addGraphNode(this.streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(name, keySerde, null, sourceNodes, repartitionRequired, transformNode, builder);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":665,"status":"M"}],"commitId":"78c55c8d66f5570d975caa53a9751b126ca10538","commitMessage":"@@@KAFKA-6958: Overload KStream methods to allow to name operation name using the new Named class (#6411)\n\nSub-task required to allow to define custom processor names with KStreams DSL(KIP-307) :\n - overload methods for stateless operations to accept a Named parameter (filter.  filterNot.  map.  mapValues.  foreach.  peek.  branch.  transform.  transformValue.  flatTransform)\n - overload process method to accept a Named parameter\n - overload join/leftJoin/outerJoin methods\n\nReviewers: John Roesler <john@confluent.io>.  Boyang Chen <boyang@confluent.io>. \nBill Bejeck <bbejeck@gmail.com>","date":"2019-05-31 21:29:42","modifiedFileCount":"5","status":"M","submitter":"Florian Hussonnois"},{"authorTime":"2020-01-10 07:38:09","codes":[{"authorDate":"2020-01-10 07:38:09","commitOrder":11,"curCode":"    private <VR> KStream<K, VR> doTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR> valueTransformerWithKeySupplier,\n                                                  final NamedInternal named,\n                                                  final String... stateStoreNames) {\n        Objects.requireNonNull(stateStoreNames, \"stateStoreNames can't be a null array\");\n        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n\n        final String name = named.orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames);\n        transformNode.setValueChangingOperation(true);\n\n        builder.addGraphNode(streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(\n            name,\n            keySerde,\n            null,\n            sourceNodes,\n            repartitionRequired,\n            transformNode,\n            builder);\n    }\n","date":"2020-01-10 07:38:09","endLine":1179,"groupId":"897","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTransformValues","params":"(finalValueTransformerWithKeySupplier<?superK@?superV@?extendsVR>valueTransformerWithKeySupplier@finalNamedInternalnamed@finalString...stateStoreNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/fba3a8f7d3eafdeda036d0e2e7ea9091fdeeac.src","preCode":"    private <VR> KStream<K, VR> doTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR> valueTransformerWithKeySupplier,\n                                                  final NamedInternal named,\n                                                  final String... stateStoreNames) {\n\n        final String name = named.orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames\n        );\n\n        transformNode.setValueChangingOperation(true);\n        builder.addGraphNode(this.streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(name, keySerde, null, sourceNodes, repartitionRequired, transformNode, builder);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1153,"status":"M"},{"authorDate":"2020-01-10 07:38:09","commitOrder":11,"curCode":"    private <VR> KStream<K, VR> doFlatTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, Iterable<VR>> valueTransformerWithKeySupplier,\n                                                      final Named named,\n                                                      final String... stateStoreNames) {\n        Objects.requireNonNull(stateStoreNames, \"stateStoreNames can't be a null array\");\n        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n\n        final String name = new NamedInternal(named).orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamFlatTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames);\n        transformNode.setValueChangingOperation(true);\n\n        builder.addGraphNode(streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(\n            name,\n            keySerde,\n            null,\n            sourceNodes,\n            repartitionRequired,\n            transformNode,\n            builder);\n    }\n","date":"2020-01-10 07:38:09","endLine":1243,"groupId":"897","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doFlatTransformValues","params":"(finalValueTransformerWithKeySupplier<?superK@?superV@Iterable<VR>>valueTransformerWithKeySupplier@finalNamednamed@finalString...stateStoreNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/fba3a8f7d3eafdeda036d0e2e7ea9091fdeeac.src","preCode":"    private <VR> KStream<K, VR> doFlatTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, Iterable<VR>> valueTransformerWithKeySupplier,\n                                                      final Named named,\n                                                      final String... stateStoreNames) {\n        final String name = new NamedInternal(named).orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamFlatTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames\n        );\n\n        transformNode.setValueChangingOperation(true);\n        builder.addGraphNode(this.streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(name, keySerde, null, sourceNodes, repartitionRequired, transformNode, builder);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1217,"status":"M"}],"commitId":"e94f5dcc802f8e786e84a58754c800c0fbad5ab4","commitMessage":"@@@KAFKA-9294: Add tests for Named parameter (#7874)\n\nPart 1 -- tests for stateless KStream operators only\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2020-01-10 07:38:09","modifiedFileCount":"5","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-02-09 13:39:27","codes":[{"authorDate":"2020-02-09 13:39:27","commitOrder":12,"curCode":"    private <VR> KStream<K, VR> doTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR> valueTransformerWithKeySupplier,\n                                                  final NamedInternal named,\n                                                  final String... stateStoreNames) {\n        Objects.requireNonNull(stateStoreNames, \"stateStoreNames can't be a null array\");\n        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n\n        final String name = named.orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames);\n        transformNode.setValueChangingOperation(true);\n\n        builder.addGraphNode(streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(\n            name,\n            keySerde,\n            null,\n            subTopologySourceNodes,\n            repartitionRequired,\n            transformNode,\n            builder);\n    }\n","date":"2020-02-09 13:39:27","endLine":1271,"groupId":"897","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doTransformValues","params":"(finalValueTransformerWithKeySupplier<?superK@?superV@?extendsVR>valueTransformerWithKeySupplier@finalNamedInternalnamed@finalString...stateStoreNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/30/8aafed21948601495eba63e0cd083a7b09eda5.src","preCode":"    private <VR> KStream<K, VR> doTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR> valueTransformerWithKeySupplier,\n                                                  final NamedInternal named,\n                                                  final String... stateStoreNames) {\n        Objects.requireNonNull(stateStoreNames, \"stateStoreNames can't be a null array\");\n        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n\n        final String name = named.orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames);\n        transformNode.setValueChangingOperation(true);\n\n        builder.addGraphNode(streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(\n            name,\n            keySerde,\n            null,\n            sourceNodes,\n            repartitionRequired,\n            transformNode,\n            builder);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1245,"status":"M"},{"authorDate":"2020-02-09 13:39:27","commitOrder":12,"curCode":"    private <VR> KStream<K, VR> doFlatTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, Iterable<VR>> valueTransformerWithKeySupplier,\n                                                      final Named named,\n                                                      final String... stateStoreNames) {\n        Objects.requireNonNull(stateStoreNames, \"stateStoreNames can't be a null array\");\n        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n\n        final String name = new NamedInternal(named).orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamFlatTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames);\n        transformNode.setValueChangingOperation(true);\n\n        builder.addGraphNode(streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(\n            name,\n            keySerde,\n            null,\n            subTopologySourceNodes,\n            repartitionRequired,\n            transformNode,\n            builder);\n    }\n","date":"2020-02-09 13:39:27","endLine":1335,"groupId":"897","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doFlatTransformValues","params":"(finalValueTransformerWithKeySupplier<?superK@?superV@Iterable<VR>>valueTransformerWithKeySupplier@finalNamednamed@finalString...stateStoreNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/30/8aafed21948601495eba63e0cd083a7b09eda5.src","preCode":"    private <VR> KStream<K, VR> doFlatTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, Iterable<VR>> valueTransformerWithKeySupplier,\n                                                      final Named named,\n                                                      final String... stateStoreNames) {\n        Objects.requireNonNull(stateStoreNames, \"stateStoreNames can't be a null array\");\n        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n\n        final String name = new NamedInternal(named).orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamFlatTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames);\n        transformNode.setValueChangingOperation(true);\n\n        builder.addGraphNode(streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(\n            name,\n            keySerde,\n            null,\n            sourceNodes,\n            repartitionRequired,\n            transformNode,\n            builder);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1309,"status":"M"}],"commitId":"059a81e3c95fd89a3cb444aa9ffd3578648b4549","commitMessage":"@@@KAFKA-7658: Follow up to original PR (#8027)\n\nFollow up to original PR #7985 for KIP-523 (adding `KStream#toTable()` operator)\n  - improve JavaDocs\n  - add more unit tests\n  - fix bug for auto-repartitioning\n  - some code cleanup\n\nReviewers: High Lee <yello1109@daum.net>.  John Roesler <john@confluent.io>","date":"2020-02-09 13:39:27","modifiedFileCount":"16","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-11-04 09:30:15","codes":[{"authorDate":"2020-11-04 09:30:15","commitOrder":13,"curCode":"    private <VR> KStream<K, VR> doTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR> valueTransformerWithKeySupplier,\n                                                  final NamedInternal named,\n                                                  final String... stateStoreNames) {\n        Objects.requireNonNull(stateStoreNames, \"stateStoreNames can't be a null array\");\n        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n        ApiUtils.checkSupplier(valueTransformerWithKeySupplier);\n\n        final String name = named.orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames);\n        transformNode.setValueChangingOperation(true);\n\n        builder.addGraphNode(streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(\n            name,\n            keySerde,\n            null,\n            subTopologySourceNodes,\n            repartitionRequired,\n            transformNode,\n            builder);\n    }\n","date":"2020-11-04 09:30:15","endLine":1348,"groupId":"897","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doTransformValues","params":"(finalValueTransformerWithKeySupplier<?superK@?superV@?extendsVR>valueTransformerWithKeySupplier@finalNamedInternalnamed@finalString...stateStoreNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/4ea4096ef7f7b8ff2fb525217de669769dd15a.src","preCode":"    private <VR> KStream<K, VR> doTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR> valueTransformerWithKeySupplier,\n                                                  final NamedInternal named,\n                                                  final String... stateStoreNames) {\n        Objects.requireNonNull(stateStoreNames, \"stateStoreNames can't be a null array\");\n        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n\n        final String name = named.orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames);\n        transformNode.setValueChangingOperation(true);\n\n        builder.addGraphNode(streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(\n            name,\n            keySerde,\n            null,\n            subTopologySourceNodes,\n            repartitionRequired,\n            transformNode,\n            builder);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1321,"status":"M"},{"authorDate":"2020-11-04 09:30:15","commitOrder":13,"curCode":"    private <VR> KStream<K, VR> doFlatTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, Iterable<VR>> valueTransformerWithKeySupplier,\n                                                      final Named named,\n                                                      final String... stateStoreNames) {\n        Objects.requireNonNull(stateStoreNames, \"stateStoreNames can't be a null array\");\n        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n        ApiUtils.checkSupplier(valueTransformerWithKeySupplier);\n\n        final String name = new NamedInternal(named).orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamFlatTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames);\n        transformNode.setValueChangingOperation(true);\n\n        builder.addGraphNode(streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(\n            name,\n            keySerde,\n            null,\n            subTopologySourceNodes,\n            repartitionRequired,\n            transformNode,\n            builder);\n    }\n","date":"2020-11-04 09:30:15","endLine":1413,"groupId":"897","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doFlatTransformValues","params":"(finalValueTransformerWithKeySupplier<?superK@?superV@Iterable<VR>>valueTransformerWithKeySupplier@finalNamednamed@finalString...stateStoreNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/4ea4096ef7f7b8ff2fb525217de669769dd15a.src","preCode":"    private <VR> KStream<K, VR> doFlatTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, Iterable<VR>> valueTransformerWithKeySupplier,\n                                                      final Named named,\n                                                      final String... stateStoreNames) {\n        Objects.requireNonNull(stateStoreNames, \"stateStoreNames can't be a null array\");\n        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n\n        final String name = new NamedInternal(named).orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamFlatTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames);\n        transformNode.setValueChangingOperation(true);\n\n        builder.addGraphNode(streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(\n            name,\n            keySerde,\n            null,\n            subTopologySourceNodes,\n            repartitionRequired,\n            transformNode,\n            builder);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1386,"status":"M"}],"commitId":"b3e77dfad93b9e4d2798ecf84e777c99905d380f","commitMessage":"@@@KAFKA-10036: Improve handling and documentation of Suppliers (#9000)\n\nReviewer: Matthias J. Sax <matthias@confluent.io>","date":"2020-11-04 09:30:15","modifiedFileCount":"25","status":"M","submitter":"Igor Soarez"},{"authorTime":"2020-12-02 03:26:16","codes":[{"authorDate":"2020-12-02 03:26:16","commitOrder":14,"curCode":"    private <VR> KStream<K, VR> doTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR> valueTransformerWithKeySupplier,\n                                                  final NamedInternal named,\n                                                  final String... stateStoreNames) {\n        Objects.requireNonNull(stateStoreNames, \"stateStoreNames can't be a null array\");\n        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n        ApiUtils.checkSupplier(valueTransformerWithKeySupplier);\n\n        final String name = named.orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames);\n        transformNode.setValueChangingOperation(true);\n\n        builder.addGraphNode(graphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(\n            name,\n            keySerde,\n            null,\n            subTopologySourceNodes,\n            repartitionRequired,\n            transformNode,\n            builder);\n    }\n","date":"2020-12-02 03:26:16","endLine":1348,"groupId":"103008","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doTransformValues","params":"(finalValueTransformerWithKeySupplier<?superK@?superV@?extendsVR>valueTransformerWithKeySupplier@finalNamedInternalnamed@finalString...stateStoreNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/80726377c29f69f1cab35ba91156d02e69f9bd.src","preCode":"    private <VR> KStream<K, VR> doTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, ? extends VR> valueTransformerWithKeySupplier,\n                                                  final NamedInternal named,\n                                                  final String... stateStoreNames) {\n        Objects.requireNonNull(stateStoreNames, \"stateStoreNames can't be a null array\");\n        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n        ApiUtils.checkSupplier(valueTransformerWithKeySupplier);\n\n        final String name = named.orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames);\n        transformNode.setValueChangingOperation(true);\n\n        builder.addGraphNode(streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(\n            name,\n            keySerde,\n            null,\n            subTopologySourceNodes,\n            repartitionRequired,\n            transformNode,\n            builder);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1321,"status":"M"},{"authorDate":"2020-12-02 03:26:16","commitOrder":14,"curCode":"    private <VR> KStream<K, VR> doFlatTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, Iterable<VR>> valueTransformerWithKeySupplier,\n                                                      final Named named,\n                                                      final String... stateStoreNames) {\n        Objects.requireNonNull(stateStoreNames, \"stateStoreNames can't be a null array\");\n        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n        ApiUtils.checkSupplier(valueTransformerWithKeySupplier);\n\n        final String name = new NamedInternal(named).orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamFlatTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames);\n        transformNode.setValueChangingOperation(true);\n\n        builder.addGraphNode(graphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(\n            name,\n            keySerde,\n            null,\n            subTopologySourceNodes,\n            repartitionRequired,\n            transformNode,\n            builder);\n    }\n","date":"2020-12-02 03:26:16","endLine":1413,"groupId":"103008","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"doFlatTransformValues","params":"(finalValueTransformerWithKeySupplier<?superK@?superV@Iterable<VR>>valueTransformerWithKeySupplier@finalNamednamed@finalString...stateStoreNames)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/80726377c29f69f1cab35ba91156d02e69f9bd.src","preCode":"    private <VR> KStream<K, VR> doFlatTransformValues(final ValueTransformerWithKeySupplier<? super K, ? super V, Iterable<VR>> valueTransformerWithKeySupplier,\n                                                      final Named named,\n                                                      final String... stateStoreNames) {\n        Objects.requireNonNull(stateStoreNames, \"stateStoreNames can't be a null array\");\n        for (final String stateStoreName : stateStoreNames) {\n            Objects.requireNonNull(stateStoreName, \"stateStoreNames can't contain `null` as store name\");\n        }\n        ApiUtils.checkSupplier(valueTransformerWithKeySupplier);\n\n        final String name = new NamedInternal(named).orElseGenerateWithPrefix(builder, TRANSFORMVALUES_NAME);\n        final StatefulProcessorNode<? super K, ? super V> transformNode = new StatefulProcessorNode<>(\n            name,\n            new ProcessorParameters<>(new KStreamFlatTransformValues<>(valueTransformerWithKeySupplier), name),\n            stateStoreNames);\n        transformNode.setValueChangingOperation(true);\n\n        builder.addGraphNode(streamsGraphNode, transformNode);\n\n        \r\n        return new KStreamImpl<>(\n            name,\n            keySerde,\n            null,\n            subTopologySourceNodes,\n            repartitionRequired,\n            transformNode,\n            builder);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1386,"status":"M"}],"commitId":"dc55be2d92922dbee28d010bec464fcf0e90a350","commitMessage":"@@@KAFKA-6687: restrict DSL to allow only Streams from the same source topics (#9609)\n\nFollowup to PR #9582.  need to restrict DSL so only KStreams can be created from the same set of topic(s)s but not KTables.  which can be tackled as followup work\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Bruno Cadonna <cadonna@confluent.io>","date":"2020-12-02 03:26:16","modifiedFileCount":"29","status":"M","submitter":"A. Sophie Blee-Goldman"}]
