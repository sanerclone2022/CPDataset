[{"authorTime":"2019-05-17 16:37:32","codes":[{"authorDate":"2019-05-17 16:37:32","commitOrder":1,"curCode":"    public void testConsumerConfigsWithClientOverrides() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, String> expectedConfigs = new HashMap<>(defaultConsumerConfigs);\n        expectedConfigs.put(\"group.id\", \"connect-test\");\n        expectedConfigs.put(\"auto.offset.reset\", \"latest\");\n        expectedConfigs.put(\"max.poll.records\", \"5000\");\n        expectedConfigs.put(\"max.poll.interval.ms\", \"1000\");\n        expectedConfigs.put(\"client.id\", \"connector-consumer-test-1\");\n        Map<String, Object> connConfig = new HashMap<String, Object>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        assertEquals(expectedConfigs, Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1), configWithOverrides, connectorConfig,\n                                                             null, allConnectorClientConfigOverridePolicy));\n    }\n","date":"2019-05-17 16:37:32","endLine":947,"groupId":"4543","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConfigsWithClientOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9c/b83eb5e87714874f25ed2b293e47e6b790a02f.src","preCode":"    public void testConsumerConfigsWithClientOverrides() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, String> expectedConfigs = new HashMap<>(defaultConsumerConfigs);\n        expectedConfigs.put(\"group.id\", \"connect-test\");\n        expectedConfigs.put(\"auto.offset.reset\", \"latest\");\n        expectedConfigs.put(\"max.poll.records\", \"5000\");\n        expectedConfigs.put(\"max.poll.interval.ms\", \"1000\");\n        expectedConfigs.put(\"client.id\", \"connector-consumer-test-1\");\n        Map<String, Object> connConfig = new HashMap<String, Object>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        assertEquals(expectedConfigs, Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1), configWithOverrides, connectorConfig,\n                                                             null, allConnectorClientConfigOverridePolicy));\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":927,"status":"B"},{"authorDate":"2019-05-17 16:37:32","commitOrder":1,"curCode":"    public void testConsumerConfigsClientOverridesWithNonePolicy() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, Object> connConfig = new HashMap<String, Object>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1), configWithOverrides, connectorConfig,\n                               null, noneConnectorClientConfigOverridePolicy);\n    }\n","date":"2019-05-17 16:37:32","endLine":964,"groupId":"4544","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConsumerConfigsClientOverridesWithNonePolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9c/b83eb5e87714874f25ed2b293e47e6b790a02f.src","preCode":"    public void testConsumerConfigsClientOverridesWithNonePolicy() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, Object> connConfig = new HashMap<String, Object>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1), configWithOverrides, connectorConfig,\n                               null, noneConnectorClientConfigOverridePolicy);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":950,"status":"B"}],"commitId":"2e91a310d7bf9e7d4d46b0bc0ca0c11cb4531e10","commitMessage":"@@@KAFKA-8265: Initial implementation for ConnectorClientConfigPolicy to enable overrides (KIP-458) (#6624)\n\nImplementation to enable policy for Connector Client config overrides. This is\nimplemented per the KIP-458.\n\nReviewers: Randall Hauch <rhauch@gmail.com>","date":"2019-05-17 16:37:32","modifiedFileCount":"22","status":"B","submitter":"Magesh Nandakumar"},{"authorTime":"2020-05-28 09:18:36","codes":[{"authorDate":"2020-05-28 09:18:36","commitOrder":2,"curCode":"    public void testConsumerConfigsWithClientOverrides() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, String> expectedConfigs = new HashMap<>(defaultConsumerConfigs);\n        expectedConfigs.put(\"group.id\", \"connect-test\");\n        expectedConfigs.put(\"auto.offset.reset\", \"latest\");\n        expectedConfigs.put(\"max.poll.records\", \"5000\");\n        expectedConfigs.put(\"max.poll.interval.ms\", \"1000\");\n        expectedConfigs.put(\"client.id\", \"connector-consumer-test-1\");\n        expectedConfigs.put(\"metrics.context.connect.kafka.cluster.id\", CLUSTER_ID);\n\n        Map<String, Object> connConfig = new HashMap<String, Object>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        assertEquals(expectedConfigs, Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1), configWithOverrides, connectorConfig,\n            null, allConnectorClientConfigOverridePolicy, CLUSTER_ID));\n    }\n","date":"2020-05-28 09:18:36","endLine":1114,"groupId":"3396","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConfigsWithClientOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/ab58f11c3e1da38f9598cd20e229fb716da953.src","preCode":"    public void testConsumerConfigsWithClientOverrides() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, String> expectedConfigs = new HashMap<>(defaultConsumerConfigs);\n        expectedConfigs.put(\"group.id\", \"connect-test\");\n        expectedConfigs.put(\"auto.offset.reset\", \"latest\");\n        expectedConfigs.put(\"max.poll.records\", \"5000\");\n        expectedConfigs.put(\"max.poll.interval.ms\", \"1000\");\n        expectedConfigs.put(\"client.id\", \"connector-consumer-test-1\");\n        Map<String, Object> connConfig = new HashMap<String, Object>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        assertEquals(expectedConfigs, Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1), configWithOverrides, connectorConfig,\n                                                             null, allConnectorClientConfigOverridePolicy));\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1092,"status":"M"},{"authorDate":"2020-05-28 09:18:36","commitOrder":2,"curCode":"    public void testConsumerConfigsClientOverridesWithNonePolicy() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, Object> connConfig = new HashMap<String, Object>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1), configWithOverrides, connectorConfig,\n            null, noneConnectorClientConfigOverridePolicy, CLUSTER_ID);\n    }\n","date":"2020-05-28 09:18:36","endLine":1131,"groupId":"4544","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConsumerConfigsClientOverridesWithNonePolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/ab58f11c3e1da38f9598cd20e229fb716da953.src","preCode":"    public void testConsumerConfigsClientOverridesWithNonePolicy() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, Object> connConfig = new HashMap<String, Object>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1), configWithOverrides, connectorConfig,\n                               null, noneConnectorClientConfigOverridePolicy);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1117,"status":"M"}],"commitId":"9c833f665f349e5c292228f75188f5521282835d","commitMessage":"@@@KAFKA-9960: implement KIP-606 to add metadata context to MetricsReporter (#8691)\n\nImplemented KIP-606 to add metadata context to MetricsReporter.\n\nAuthor: Xiaodong Du <xdu@confluent.io>\nReviewers: David Arthur <mumrah@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Xavier L?aut? <xavier@confluent.io>.  Ryan Pridgeon <ryan.n.pridgeon@gmail.com>","date":"2020-05-28 09:18:36","modifiedFileCount":"35","status":"M","submitter":"xiaodongdu"},{"authorTime":"2021-01-10 20:20:13","codes":[{"authorDate":"2020-05-28 09:18:36","commitOrder":3,"curCode":"    public void testConsumerConfigsWithClientOverrides() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, String> expectedConfigs = new HashMap<>(defaultConsumerConfigs);\n        expectedConfigs.put(\"group.id\", \"connect-test\");\n        expectedConfigs.put(\"auto.offset.reset\", \"latest\");\n        expectedConfigs.put(\"max.poll.records\", \"5000\");\n        expectedConfigs.put(\"max.poll.interval.ms\", \"1000\");\n        expectedConfigs.put(\"client.id\", \"connector-consumer-test-1\");\n        expectedConfigs.put(\"metrics.context.connect.kafka.cluster.id\", CLUSTER_ID);\n\n        Map<String, Object> connConfig = new HashMap<String, Object>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        assertEquals(expectedConfigs, Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1), configWithOverrides, connectorConfig,\n            null, allConnectorClientConfigOverridePolicy, CLUSTER_ID));\n    }\n","date":"2020-05-28 09:18:36","endLine":1114,"groupId":"3396","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConfigsWithClientOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/ab58f11c3e1da38f9598cd20e229fb716da953.src","preCode":"    public void testConsumerConfigsWithClientOverrides() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, String> expectedConfigs = new HashMap<>(defaultConsumerConfigs);\n        expectedConfigs.put(\"group.id\", \"connect-test\");\n        expectedConfigs.put(\"auto.offset.reset\", \"latest\");\n        expectedConfigs.put(\"max.poll.records\", \"5000\");\n        expectedConfigs.put(\"max.poll.interval.ms\", \"1000\");\n        expectedConfigs.put(\"client.id\", \"connector-consumer-test-1\");\n        expectedConfigs.put(\"metrics.context.connect.kafka.cluster.id\", CLUSTER_ID);\n\n        Map<String, Object> connConfig = new HashMap<String, Object>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        assertEquals(expectedConfigs, Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1), configWithOverrides, connectorConfig,\n            null, allConnectorClientConfigOverridePolicy, CLUSTER_ID));\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1092,"status":"N"},{"authorDate":"2021-01-10 20:20:13","commitOrder":3,"curCode":"    public void testConsumerConfigsClientOverridesWithNonePolicy() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, Object> connConfig = new HashMap<String, Object>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        assertThrows(ConnectException.class, () -> Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1),\n            configWithOverrides, connectorConfig, null, noneConnectorClientConfigOverridePolicy, CLUSTER_ID));\n    }\n","date":"2021-01-10 20:20:13","endLine":1205,"groupId":"4544","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testConsumerConfigsClientOverridesWithNonePolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d3/bdcbf39d7c88e2b9be0bcd69285b445ce009a1.src","preCode":"    public void testConsumerConfigsClientOverridesWithNonePolicy() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, Object> connConfig = new HashMap<String, Object>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1), configWithOverrides, connectorConfig,\n            null, noneConnectorClientConfigOverridePolicy, CLUSTER_ID);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1191,"status":"M"}],"commitId":"913a019d6c9b03eb44706deb7fb164f79c1f601f","commitMessage":"@@@MINOR: replace test \"expected\" parameter by assertThrows (#9520)\n\nThis PR includes following changes.\n\n1. @Test(expected = Exception.class) is replaced by assertThrows\n2. remove reference to org.scalatest.Assertions\n3. change the magic code from 1 to 2 for testAppendAtInvalidOffset to test ZSTD\n4. rename testMaybeAddPartitionToTransactionXXXX to testNotReadyForSendXXX\n5. increase maxBlockMs from 1s to 3s to avoid unexpected timeout from TransactionsTest#testTimeout\n\nReviewers: Ismael Juma <ismael@confluent.io>","date":"2021-01-10 20:20:13","modifiedFileCount":"166","status":"M","submitter":"Chia-Ping Tsai"},{"authorTime":"2021-02-05 09:08:56","codes":[{"authorDate":"2021-02-05 09:08:56","commitOrder":4,"curCode":"    public void testConsumerConfigsWithClientOverrides() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, String> expectedConfigs = new HashMap<>(defaultConsumerConfigs);\n        expectedConfigs.put(\"group.id\", \"connect-test\");\n        expectedConfigs.put(\"auto.offset.reset\", \"latest\");\n        expectedConfigs.put(\"max.poll.records\", \"5000\");\n        expectedConfigs.put(\"max.poll.interval.ms\", \"1000\");\n        expectedConfigs.put(\"client.id\", \"connector-consumer-test-1\");\n        expectedConfigs.put(\"metrics.context.connect.kafka.cluster.id\", CLUSTER_ID);\n\n        Map<String, Object> connConfig = new HashMap<>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        assertEquals(expectedConfigs, Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1), configWithOverrides, connectorConfig,\n            null, allConnectorClientConfigOverridePolicy, CLUSTER_ID));\n    }\n","date":"2021-02-05 09:08:56","endLine":1188,"groupId":"104705","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConsumerConfigsWithClientOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cb/f0802cd4b28d9a0d3ab73349753b1b56e657da.src","preCode":"    public void testConsumerConfigsWithClientOverrides() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, String> expectedConfigs = new HashMap<>(defaultConsumerConfigs);\n        expectedConfigs.put(\"group.id\", \"connect-test\");\n        expectedConfigs.put(\"auto.offset.reset\", \"latest\");\n        expectedConfigs.put(\"max.poll.records\", \"5000\");\n        expectedConfigs.put(\"max.poll.interval.ms\", \"1000\");\n        expectedConfigs.put(\"client.id\", \"connector-consumer-test-1\");\n        expectedConfigs.put(\"metrics.context.connect.kafka.cluster.id\", CLUSTER_ID);\n\n        Map<String, Object> connConfig = new HashMap<String, Object>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        assertEquals(expectedConfigs, Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1), configWithOverrides, connectorConfig,\n            null, allConnectorClientConfigOverridePolicy, CLUSTER_ID));\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1166,"status":"M"},{"authorDate":"2021-02-05 09:08:56","commitOrder":4,"curCode":"    public void testConsumerConfigsClientOverridesWithNonePolicy() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, Object> connConfig = new HashMap<>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        assertThrows(ConnectException.class, () -> Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1),\n            configWithOverrides, connectorConfig, null, noneConnectorClientConfigOverridePolicy, CLUSTER_ID));\n    }\n","date":"2021-02-05 09:08:56","endLine":1205,"groupId":"104705","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testConsumerConfigsClientOverridesWithNonePolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cb/f0802cd4b28d9a0d3ab73349753b1b56e657da.src","preCode":"    public void testConsumerConfigsClientOverridesWithNonePolicy() {\n        Map<String, String> props = new HashMap<>(workerProps);\n        props.put(\"consumer.auto.offset.reset\", \"latest\");\n        props.put(\"consumer.max.poll.records\", \"5000\");\n        WorkerConfig configWithOverrides = new StandaloneConfig(props);\n\n        Map<String, Object> connConfig = new HashMap<String, Object>();\n        connConfig.put(\"max.poll.records\", \"5000\");\n        connConfig.put(\"max.poll.interval.ms\", \"1000\");\n        EasyMock.expect(connectorConfig.originalsWithPrefix(ConnectorConfig.CONNECTOR_CLIENT_CONSUMER_OVERRIDES_PREFIX))\n            .andReturn(connConfig);\n        PowerMock.replayAll();\n        assertThrows(ConnectException.class, () -> Worker.consumerConfigs(new ConnectorTaskId(\"test\", 1),\n            configWithOverrides, connectorConfig, null, noneConnectorClientConfigOverridePolicy, CLUSTER_ID));\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1191,"status":"M"}],"commitId":"07843cfbf4e3e7a2d26d63904bbf0da0fcd07ca2","commitMessage":"@@@KAFKA-10834: Remove redundant type casts in Connect (#10053)\n\nCleanup up to remove redundant type casts in Connect and use the diamond operator when needed \n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 09:08:56","modifiedFileCount":"41","status":"M","submitter":"Lev Zemlyanov"}]
