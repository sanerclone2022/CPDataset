[{"authorTime":"2017-09-27 13:23:37","codes":[{"authorDate":"2017-09-27 13:23:37","commitOrder":1,"curCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndShutdown() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        ConnectMetrics metrics = new MockConnectMetrics();\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n    }\n","date":"2017-09-27 13:23:37","endLine":250,"groupId":"8307","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"updateMetricsOnListenerEventsForStartupPauseResumeAndShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/5c7fabea840665fd6b1a18f8be2c3ec48da13c.src","preCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndShutdown() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        ConnectMetrics metrics = new MockConnectMetrics();\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"B"},{"authorDate":"2017-09-27 13:23:37","commitOrder":1,"curCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndFailure() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        MockConnectMetrics metrics = new MockConnectMetrics();\n        MockTime time = metrics.time();\n        ConnectException error = new ConnectException(\"error\");\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onFailure(taskId, error);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        time.sleep(1000L);\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(2000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(3000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(4000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(5000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(6000L);\n        group.onFailure(taskId, error);\n        assertFailedMetric(group);\n\n        time.sleep(7000L);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n\n        long totalTime = 27000L;\n        double pauseTimeRatio = (double) (3000L + 5000L) / totalTime;\n        double runningTimeRatio = (double) (2000L + 4000L + 6000L) / totalTime;\n        assertEquals(pauseTimeRatio, group.currentMetricValue(\"pause-ratio\"), 0.000001d);\n        assertEquals(runningTimeRatio, group.currentMetricValue(\"running-ratio\"), 0.000001d);\n    }\n","date":"2017-09-27 13:23:37","endLine":319,"groupId":"8307","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"updateMetricsOnListenerEventsForStartupPauseResumeAndFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/5c7fabea840665fd6b1a18f8be2c3ec48da13c.src","preCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndFailure() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        MockConnectMetrics metrics = new MockConnectMetrics();\n        MockTime time = metrics.time();\n        ConnectException error = new ConnectException(\"error\");\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onFailure(taskId, error);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        time.sleep(1000L);\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(2000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(3000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(4000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(5000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(6000L);\n        group.onFailure(taskId, error);\n        assertFailedMetric(group);\n\n        time.sleep(7000L);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n\n        long totalTime = 27000L;\n        double pauseTimeRatio = (double) (3000L + 5000L) / totalTime;\n        double runningTimeRatio = (double) (2000L + 4000L + 6000L) / totalTime;\n        assertEquals(pauseTimeRatio, group.currentMetricValue(\"pause-ratio\"), 0.000001d);\n        assertEquals(runningTimeRatio, group.currentMetricValue(\"running-ratio\"), 0.000001d);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"B"}],"commitId":"73cc416664dbc8e1442f70cb3c4cd8f4d365ea50","commitMessage":"@@@KAFKA-5900: Add task metrics common to both sink and source tasks\n\nAdded metrics that are common to both sink and source tasks.\n\nMarked as \"**WIP**\" since this PR is built upon #3864.  and will need to be rebased once that has been merged into `trunk`. However.  I would still appreciate initial reviews since this PR is largely additive.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3911 from rhauch/kafka-5900\n","date":"2017-09-27 13:23:37","modifiedFileCount":"16","status":"B","submitter":"Randall Hauch"},{"authorTime":"2017-09-29 00:52:08","codes":[{"authorDate":"2017-09-27 13:23:37","commitOrder":2,"curCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndShutdown() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        ConnectMetrics metrics = new MockConnectMetrics();\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n    }\n","date":"2017-09-27 13:23:37","endLine":250,"groupId":"8307","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"updateMetricsOnListenerEventsForStartupPauseResumeAndShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/5c7fabea840665fd6b1a18f8be2c3ec48da13c.src","preCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndShutdown() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        ConnectMetrics metrics = new MockConnectMetrics();\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"N"},{"authorDate":"2017-09-29 00:52:08","commitOrder":2,"curCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndFailure() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        MockConnectMetrics metrics = new MockConnectMetrics();\n        MockTime time = metrics.time();\n        ConnectException error = new ConnectException(\"error\");\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onFailure(taskId, error);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        time.sleep(1000L);\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(2000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(3000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(4000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(5000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(6000L);\n        group.onFailure(taskId, error);\n        assertFailedMetric(group);\n\n        time.sleep(7000L);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n\n        long totalTime = 27000L;\n        double pauseTimeRatio = (double) (3000L + 5000L) / totalTime;\n        double runningTimeRatio = (double) (2000L + 4000L + 6000L) / totalTime;\n        assertEquals(pauseTimeRatio, metrics.currentMetricValue(group.metricGroup(), \"pause-ratio\"), 0.000001d);\n        assertEquals(runningTimeRatio, metrics.currentMetricValue(group.metricGroup(), \"running-ratio\"), 0.000001d);\n    }\n","date":"2017-09-29 00:53:19","endLine":319,"groupId":"8307","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"updateMetricsOnListenerEventsForStartupPauseResumeAndFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/746a59a54b2b7909dd29896b5441c4c6ba8353.src","preCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndFailure() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        MockConnectMetrics metrics = new MockConnectMetrics();\n        MockTime time = metrics.time();\n        ConnectException error = new ConnectException(\"error\");\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onFailure(taskId, error);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        time.sleep(1000L);\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(2000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(3000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(4000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(5000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(6000L);\n        group.onFailure(taskId, error);\n        assertFailedMetric(group);\n\n        time.sleep(7000L);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n\n        long totalTime = 27000L;\n        double pauseTimeRatio = (double) (3000L + 5000L) / totalTime;\n        double runningTimeRatio = (double) (2000L + 4000L + 6000L) / totalTime;\n        assertEquals(pauseTimeRatio, group.currentMetricValue(\"pause-ratio\"), 0.000001d);\n        assertEquals(runningTimeRatio, group.currentMetricValue(\"running-ratio\"), 0.000001d);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"}],"commitId":"89ba0c1525b8f8a4e36d1e1b486ca660d5c24a7b","commitMessage":"@@@KAFKA-5901: Added Connect metrics specific to source tasks (KIP-196)\n\nAdded Connect metrics specific to source tasks.  and builds upon #3864 and #3911 that have already been merged into `trunk`.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: tedyu <yuzhihong@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3959 from rhauch/kafka-5901\n","date":"2017-09-29 00:53:19","modifiedFileCount":"8","status":"M","submitter":"Randall Hauch"},{"authorTime":"2017-10-06 02:23:11","codes":[{"authorDate":"2017-09-27 13:23:37","commitOrder":3,"curCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndShutdown() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        ConnectMetrics metrics = new MockConnectMetrics();\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n    }\n","date":"2017-09-27 13:23:37","endLine":250,"groupId":"8307","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"updateMetricsOnListenerEventsForStartupPauseResumeAndShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/5c7fabea840665fd6b1a18f8be2c3ec48da13c.src","preCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndShutdown() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        ConnectMetrics metrics = new MockConnectMetrics();\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"N"},{"authorDate":"2017-10-06 02:23:11","commitOrder":3,"curCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndFailure() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        MockConnectMetrics metrics = new MockConnectMetrics();\n        MockTime time = metrics.time();\n        ConnectException error = new ConnectException(\"error\");\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onFailure(taskId, error);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        time.sleep(1000L);\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(2000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(3000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(4000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(5000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(6000L);\n        group.onFailure(taskId, error);\n        assertFailedMetric(group);\n\n        time.sleep(7000L);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n\n        long totalTime = 27000L;\n        double pauseTimeRatio = (double) (3000L + 5000L) / totalTime;\n        double runningTimeRatio = (double) (2000L + 4000L + 6000L) / totalTime;\n        assertEquals(pauseTimeRatio, metrics.currentMetricValueAsDouble(group.metricGroup(), \"pause-ratio\"), 0.000001d);\n        assertEquals(runningTimeRatio, metrics.currentMetricValueAsDouble(group.metricGroup(), \"running-ratio\"), 0.000001d);\n    }\n","date":"2017-10-06 02:23:11","endLine":319,"groupId":"8307","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"updateMetricsOnListenerEventsForStartupPauseResumeAndFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/51/6b71ab3fcbd4beb504d66ec81d5dcfe6e2cd4a.src","preCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndFailure() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        MockConnectMetrics metrics = new MockConnectMetrics();\n        MockTime time = metrics.time();\n        ConnectException error = new ConnectException(\"error\");\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onFailure(taskId, error);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        time.sleep(1000L);\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(2000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(3000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(4000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(5000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(6000L);\n        group.onFailure(taskId, error);\n        assertFailedMetric(group);\n\n        time.sleep(7000L);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n\n        long totalTime = 27000L;\n        double pauseTimeRatio = (double) (3000L + 5000L) / totalTime;\n        double runningTimeRatio = (double) (2000L + 4000L + 6000L) / totalTime;\n        assertEquals(pauseTimeRatio, metrics.currentMetricValue(group.metricGroup(), \"pause-ratio\"), 0.000001d);\n        assertEquals(runningTimeRatio, metrics.currentMetricValue(group.metricGroup(), \"running-ratio\"), 0.000001d);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"}],"commitId":"a47bfbcae050659d32f777ed2f4b26dda5fbdbbd","commitMessage":"@@@KAFKA-5903: Added Connect metrics to the worker and distributed herder (KIP-196)\n\nAdded metrics to the Connect worker and rebalancing metrics to the distributed herder.\n\nThis is built on top of #3987.  and I can rebase this PR once that is merged.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4011 from rhauch/kafka-5903\n","date":"2017-10-06 02:23:11","modifiedFileCount":"13","status":"M","submitter":"Randall Hauch"},{"authorTime":"2018-02-01 02:40:24","codes":[{"authorDate":"2018-02-01 02:40:24","commitOrder":4,"curCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndShutdown() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        ConnectMetrics metrics = new MockConnectMetrics();\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n    }\n","date":"2018-02-01 02:40:24","endLine":250,"groupId":"104684","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"updateMetricsOnListenerEventsForStartupPauseResumeAndShutdown","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/f2836f42b5a04e11dd0b6f00d84a48b3394caa.src","preCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndShutdown() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        ConnectMetrics metrics = new MockConnectMetrics();\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2018-02-01 02:40:24","commitOrder":4,"curCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndFailure() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        MockConnectMetrics metrics = new MockConnectMetrics();\n        MockTime time = metrics.time();\n        ConnectException error = new ConnectException(\"error\");\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onFailure(taskId, error);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        time.sleep(1000L);\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(2000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(3000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(4000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(5000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(6000L);\n        group.onFailure(taskId, error);\n        assertFailedMetric(group);\n\n        time.sleep(7000L);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n\n        long totalTime = 27000L;\n        double pauseTimeRatio = (double) (3000L + 5000L) / totalTime;\n        double runningTimeRatio = (double) (2000L + 4000L + 6000L) / totalTime;\n        assertEquals(pauseTimeRatio, metrics.currentMetricValueAsDouble(group.metricGroup(), \"pause-ratio\"), 0.000001d);\n        assertEquals(runningTimeRatio, metrics.currentMetricValueAsDouble(group.metricGroup(), \"running-ratio\"), 0.000001d);\n    }\n","date":"2018-02-01 02:40:24","endLine":318,"groupId":"104684","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"updateMetricsOnListenerEventsForStartupPauseResumeAndFailure","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/f2836f42b5a04e11dd0b6f00d84a48b3394caa.src","preCode":"    public void updateMetricsOnListenerEventsForStartupPauseResumeAndFailure() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n        MockConnectMetrics metrics = new MockConnectMetrics();\n        MockTime time = metrics.time();\n        ConnectException error = new ConnectException(\"error\");\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        TaskMetricsGroup group = new TaskMetricsGroup(taskId, metrics, statusListener);\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onPause(taskId);\n        expectLastCall();\n\n        statusListener.onResume(taskId);\n        expectLastCall();\n\n        statusListener.onFailure(taskId, error);\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(statusListener);\n\n        time.sleep(1000L);\n        group.onStartup(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(2000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(3000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(4000L);\n        group.onPause(taskId);\n        assertPausedMetric(group);\n\n        time.sleep(5000L);\n        group.onResume(taskId);\n        assertRunningMetric(group);\n\n        time.sleep(6000L);\n        group.onFailure(taskId, error);\n        assertFailedMetric(group);\n\n        time.sleep(7000L);\n        group.onShutdown(taskId);\n        assertStoppedMetric(group);\n\n        verify(statusListener);\n\n        long totalTime = 27000L;\n        double pauseTimeRatio = (double) (3000L + 5000L) / totalTime;\n        double runningTimeRatio = (double) (2000L + 4000L + 6000L) / totalTime;\n        assertEquals(pauseTimeRatio, metrics.currentMetricValueAsDouble(group.metricGroup(), \"pause-ratio\"), 0.000001d);\n        assertEquals(runningTimeRatio, metrics.currentMetricValueAsDouble(group.metricGroup(), \"running-ratio\"), 0.000001d);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"}],"commitId":"4c48942f9d9e1428e21f934746cb7ce22b3df746","commitMessage":"@@@KAFKA-5142: Add Connect support for message headers (KIP-145)\n\n**[KIP-145](https://cwiki.apache.org/confluence/display/KAFKA/KIP-145+-+Expose+Record+Headers+in+Kafka+Connect) has been accepted.  and this PR implements KIP-145 except without the SMTs.**\n\nChanged the Connect API and runtime to support message headers as described in [KIP-145](https://cwiki.apache.org/confluence/display/KAFKA/KIP-145+-+Expose+Record+Headers+in+Kafka+Connect).\n\nThe new `Header` interface defines an immutable representation of a Kafka header (key-value pair) with support for the Connect value types and schemas. This interface provides methods for easily converting between many of the built-in primitive.  structured.  and logical data types.\n\nThe new `Headers` interface defines an ordered collection of headers and is used to track all headers associated with a `ConnectRecord` (and thus `SourceRecord` and `SinkRecord`). This does allow multiple headers with the same key. The `Headers` contains methods for adding.  removing.  finding.  and modifying headers. Convenience methods allow connectors and transforms to easily use and modify the headers for a record.\n\nA new `HeaderConverter` interface is also defined to enable the Connect runtime framework to be able to serialize and deserialize headers between the in-memory representation and Kafka?s byte[] representation. A new `SimpleHeaderConverter` implementation has been added.  and this serializes to strings and deserializes by inferring the schemas (`Struct` header values are serialized without the schemas.  so they can only be deserialized as `Map` instances without a schema.) The `StringConverter`.  `JsonConverter`.  and `ByteArrayConverter` have all been extended to also be `HeaderConverter` implementations. Each connector can be configured with a different header converter.  although by default the `SimpleHeaderConverter` is used to serialize header values as strings without schemas.\n\nUnit and integration tests are added for `ConnectHeader` and `ConnectHeaders`.  the two implementation classes for headers. Additional test methods are added for the methods added to the `Converter` implementations. Finally.  the `ConnectRecord` object is already used heavily.  so only limited tests need to be added while quite a few of the existing tests already cover the changes.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Arjun Satish <arjun@confluent.io>.  Ted Yu <yuzhihong@gmail.com>.  Magesh Nandakumar <magesh.n.kumar@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4319 from rhauch/kafka-5142-b\n","date":"2018-02-01 02:40:24","modifiedFileCount":"21","status":"M","submitter":"Randall Hauch"}]
