[{"authorTime":"2019-03-27 05:23:01","codes":[{"authorDate":"2019-03-27 05:23:01","commitOrder":1,"curCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final TimestampedSegment segment = new TimestampedSegment(\"segment\", \"window\", 0L);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(emptyMap());\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext);\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n    }\n","date":"2019-03-27 05:23:01","endLine":58,"groupId":"7736","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldDeleteStateDirectoryOnDestroy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/10/ed56efbbbc676da7d9337014f00b8b97e21c1a.src","preCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final TimestampedSegment segment = new TimestampedSegment(\"segment\", \"window\", 0L);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(emptyMap());\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext);\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/TimestampedSegmentTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"},{"authorDate":"2019-03-27 05:23:01","commitOrder":1,"curCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final KeyValueSegment segment = new KeyValueSegment(\"segment\", \"window\", 0L);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(emptyMap());\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext);\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n    }\n","date":"2019-03-27 05:23:01","endLine":58,"groupId":"7736","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldDeleteStateDirectoryOnDestroy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/654b93970c5df352100a2c6918016e5a52633b.src","preCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final KeyValueSegment segment = new KeyValueSegment(\"segment\", \"window\", 0L);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(emptyMap());\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext);\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueSegmentTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"}],"commitId":"dc0601a1c604bea3f426ed25b6c20176ff444079","commitMessage":"@@@KAFKA-3522: Add RocksDBTimestampedSegmentedBytesStore (#6186)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-03-27 05:23:01","modifiedFileCount":"10","status":"B","submitter":"Matthias J. Sax"},{"authorTime":"2019-08-27 07:28:22","codes":[{"authorDate":"2019-08-27 07:28:22","commitOrder":2,"curCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final TimestampedSegment segment = new TimestampedSegment(\"segment\", \"window\", 0L, metricsRecorder);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(mkMap(mkEntry(METRICS_RECORDING_LEVEL_CONFIG, \"INFO\")));\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext);\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n    }\n","date":"2019-08-27 07:28:22","endLine":63,"groupId":"12095","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldDeleteStateDirectoryOnDestroy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7b/d3e7ebe46eb616856e09c7cef30ab49924902d.src","preCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final TimestampedSegment segment = new TimestampedSegment(\"segment\", \"window\", 0L);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(emptyMap());\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext);\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/TimestampedSegmentTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2019-08-27 07:28:22","commitOrder":2,"curCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final KeyValueSegment segment = new KeyValueSegment(\"segment\", \"window\", 0L, metricsRecorder);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(mkMap(mkEntry(METRICS_RECORDING_LEVEL_CONFIG, \"INFO\")));\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext);\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n    }\n","date":"2019-08-27 07:28:22","endLine":63,"groupId":"12095","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldDeleteStateDirectoryOnDestroy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/248220c9870bd62b74241bd830f103aea3254c.src","preCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final KeyValueSegment segment = new KeyValueSegment(\"segment\", \"window\", 0L);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(emptyMap());\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext);\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueSegmentTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"}],"commitId":"24547b810ce9aae4389dad7f41cc47caba73046c","commitMessage":"@@@KAFKA-8579: Expose RocksDB metrics (#7209)\n\nRocksDB metrics are added to the Kafka metrics. For each segmented state store only\none set of metrics is exposed rather than one set of metrics for each segment.\n\nThe metrics are not computed yet.\n\nReviewers: John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-08-27 07:28:22","modifiedFileCount":"25","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-10-08 12:06:53","codes":[{"authorDate":"2020-10-08 12:06:53","commitOrder":3,"curCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final TimestampedSegment segment = new TimestampedSegment(\"segment\", \"window\", 0L, metricsRecorder);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(mkMap(mkEntry(METRICS_RECORDING_LEVEL_CONFIG, \"INFO\")));\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext.appConfigs(), mockContext.stateDir());\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n    }\n","date":"2020-10-08 12:06:53","endLine":78,"groupId":"22451","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldDeleteStateDirectoryOnDestroy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/2181020feb07f91fae3e0392291e227e1a4d3c.src","preCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final TimestampedSegment segment = new TimestampedSegment(\"segment\", \"window\", 0L, metricsRecorder);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(mkMap(mkEntry(METRICS_RECORDING_LEVEL_CONFIG, \"INFO\")));\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext);\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/TimestampedSegmentTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2020-10-08 12:06:53","commitOrder":3,"curCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final KeyValueSegment segment = new KeyValueSegment(\"segment\", \"window\", 0L, metricsRecorder);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(mkMap(mkEntry(METRICS_RECORDING_LEVEL_CONFIG, \"INFO\")));\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext.appConfigs(), mockContext.stateDir());\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n    }\n","date":"2020-10-08 12:06:53","endLine":78,"groupId":"22451","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldDeleteStateDirectoryOnDestroy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/841bdebd2b6ae84b41ad44e8ba4e76dc9fffec.src","preCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final KeyValueSegment segment = new KeyValueSegment(\"segment\", \"window\", 0L, metricsRecorder);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(mkMap(mkEntry(METRICS_RECORDING_LEVEL_CONFIG, \"INFO\")));\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext);\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueSegmentTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"2804257fe221f37e5098bd3f633a5d76ca890634","commitMessage":"@@@KAFKA-10562: Properly invoke new StateStoreContext init (#9388)\n\n* all wrapping stores should pass StateStoreContext init through to the same\n  method on the wrapped store and not translate it to ProcessorContext init\n* base-level stores should handle StateStoreContext init so that callers passing\n  a non-InternalProcessorContext implementation will be able to initialize the store\n* extra tests are added to verify the desired behavior\n\nReviewers: Guozhang Wang <guozhang@apache.org>","date":"2020-10-08 12:06:53","modifiedFileCount":"71","status":"M","submitter":"John Roesler"},{"authorTime":"2021-05-07 06:29:26","codes":[{"authorDate":"2021-05-07 06:29:26","commitOrder":4,"curCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final TimestampedSegment segment = new TimestampedSegment(\"segment\", \"window\", 0L, metricsRecorder);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(mkMap(mkEntry(METRICS_RECORDING_LEVEL_CONFIG, \"INFO\")));\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext.appConfigs(), mockContext.stateDir());\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n\n        segment.close();\n    }\n","date":"2021-05-07 06:29:26","endLine":80,"groupId":"10793","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldDeleteStateDirectoryOnDestroy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/339b73a4df419e60ab0b9cc040bd567a5b3eba.src","preCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final TimestampedSegment segment = new TimestampedSegment(\"segment\", \"window\", 0L, metricsRecorder);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(mkMap(mkEntry(METRICS_RECORDING_LEVEL_CONFIG, \"INFO\")));\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext.appConfigs(), mockContext.stateDir());\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/TimestampedSegmentTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2021-05-07 06:29:26","commitOrder":4,"curCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final KeyValueSegment segment = new KeyValueSegment(\"segment\", \"window\", 0L, metricsRecorder);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(mkMap(mkEntry(METRICS_RECORDING_LEVEL_CONFIG, \"INFO\")));\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext.appConfigs(), mockContext.stateDir());\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n\n        segment.close();\n    }\n","date":"2021-05-07 06:29:26","endLine":80,"groupId":"10793","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldDeleteStateDirectoryOnDestroy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/85/9aea1168a965271765b106b4a81e4f99ec5e59.src","preCode":"    public void shouldDeleteStateDirectoryOnDestroy() throws Exception {\n        final KeyValueSegment segment = new KeyValueSegment(\"segment\", \"window\", 0L, metricsRecorder);\n        final String directoryPath = TestUtils.tempDirectory().getAbsolutePath();\n        final File directory = new File(directoryPath);\n\n        final ProcessorContext mockContext = mock(ProcessorContext.class);\n        expect(mockContext.appConfigs()).andReturn(mkMap(mkEntry(METRICS_RECORDING_LEVEL_CONFIG, \"INFO\")));\n        expect(mockContext.stateDir()).andReturn(directory);\n        replay(mockContext);\n\n        segment.openDB(mockContext.appConfigs(), mockContext.stateDir());\n\n        assertTrue(new File(directoryPath, \"window\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath + File.separator + \"window\", \"segment\").list().length > 0);\n        segment.destroy();\n        assertFalse(new File(directoryPath + File.separator + \"window\", \"segment\").exists());\n        assertTrue(new File(directoryPath, \"window\").exists());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueSegmentTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"90fc875e24121fd0a39143983ce9eb8a93849d7e","commitMessage":"@@@KAFKA-8897: Upgrade RocksDB to 6.19.3 (#10568)\n\nThis PR upgrades RocksDB to 6.19.3. After the upgrade the Gradle build exited with code 134 due to SIGABRT signals (\"Pure virtual function called!\") coming from the C++ part of RocksDB. This error was caused by RocksDB state stores not properly closed in Streams' code. This PR adds the missing closings and updates the RocksDB option adapter.\n\nReviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-05-07 06:29:26","modifiedFileCount":"22","status":"M","submitter":"Bruno Cadonna"}]
