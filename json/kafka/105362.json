[{"authorTime":"2017-05-17 14:05:35","codes":[{"authorDate":"2017-05-17 14:05:35","commitOrder":1,"curCode":"    public void testNestedStruct() {\n        final Flatten<SourceRecord> xform = new Flatten.Value<>();\n        xform.configure(Collections.<String, String>emptyMap());\n\n        SchemaBuilder builder = SchemaBuilder.struct();\n        builder.field(\"int8\", Schema.INT8_SCHEMA);\n        builder.field(\"int16\", Schema.INT16_SCHEMA);\n        builder.field(\"int32\", Schema.INT32_SCHEMA);\n        builder.field(\"int64\", Schema.INT64_SCHEMA);\n        builder.field(\"float32\", Schema.FLOAT32_SCHEMA);\n        builder.field(\"float64\", Schema.FLOAT64_SCHEMA);\n        builder.field(\"boolean\", Schema.BOOLEAN_SCHEMA);\n        builder.field(\"string\", Schema.STRING_SCHEMA);\n        builder.field(\"bytes\", Schema.BYTES_SCHEMA);\n        Schema supportedTypesSchema = builder.build();\n\n        builder = SchemaBuilder.struct();\n        builder.field(\"B\", supportedTypesSchema);\n        Schema oneLevelNestedSchema = builder.build();\n\n        builder = SchemaBuilder.struct();\n        builder.field(\"A\", oneLevelNestedSchema);\n        Schema twoLevelNestedSchema = builder.build();\n\n        Struct supportedTypes = new Struct(supportedTypesSchema);\n        supportedTypes.put(\"int8\", (byte) 8);\n        supportedTypes.put(\"int16\", (short) 16);\n        supportedTypes.put(\"int32\", 32);\n        supportedTypes.put(\"int64\", (long) 64);\n        supportedTypes.put(\"float32\", 32.f);\n        supportedTypes.put(\"float64\", 64.);\n        supportedTypes.put(\"boolean\", true);\n        supportedTypes.put(\"string\", \"stringy\");\n        supportedTypes.put(\"bytes\", \"bytes\".getBytes());\n\n        Struct oneLevelNestedStruct = new Struct(oneLevelNestedSchema);\n        oneLevelNestedStruct.put(\"B\", supportedTypes);\n\n        Struct twoLevelNestedStruct = new Struct(twoLevelNestedSchema);\n        twoLevelNestedStruct.put(\"A\", oneLevelNestedStruct);\n\n        SourceRecord transformed = xform.apply(new SourceRecord(null, null,\n                \"topic\", 0,\n                twoLevelNestedSchema, twoLevelNestedStruct));\n\n        assertEquals(Schema.Type.STRUCT, transformed.valueSchema().type());\n        Struct transformedStruct = (Struct) transformed.value();\n        assertEquals(9, transformedStruct.schema().fields().size());\n        assertEquals(8, (byte) transformedStruct.getInt8(\"A.B.int8\"));\n        assertEquals(16, (short) transformedStruct.getInt16(\"A.B.int16\"));\n        assertEquals(32, (int) transformedStruct.getInt32(\"A.B.int32\"));\n        assertEquals(64L, (long) transformedStruct.getInt64(\"A.B.int64\"));\n        assertEquals(32.f, transformedStruct.getFloat32(\"A.B.float32\"), 0.f);\n        assertEquals(64., transformedStruct.getFloat64(\"A.B.float64\"), 0.);\n        assertEquals(true, transformedStruct.getBoolean(\"A.B.boolean\"));\n        assertEquals(\"stringy\", transformedStruct.getString(\"A.B.string\"));\n        assertArrayEquals(\"bytes\".getBytes(), transformedStruct.getBytes(\"A.B.bytes\"));\n    }\n","date":"2017-05-17 14:05:35","endLine":112,"groupId":"14371","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedStruct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/86/851f38af984ffe0d1487a3fd3b9396973ddf38.src","preCode":"    public void testNestedStruct() {\n        final Flatten<SourceRecord> xform = new Flatten.Value<>();\n        xform.configure(Collections.<String, String>emptyMap());\n\n        SchemaBuilder builder = SchemaBuilder.struct();\n        builder.field(\"int8\", Schema.INT8_SCHEMA);\n        builder.field(\"int16\", Schema.INT16_SCHEMA);\n        builder.field(\"int32\", Schema.INT32_SCHEMA);\n        builder.field(\"int64\", Schema.INT64_SCHEMA);\n        builder.field(\"float32\", Schema.FLOAT32_SCHEMA);\n        builder.field(\"float64\", Schema.FLOAT64_SCHEMA);\n        builder.field(\"boolean\", Schema.BOOLEAN_SCHEMA);\n        builder.field(\"string\", Schema.STRING_SCHEMA);\n        builder.field(\"bytes\", Schema.BYTES_SCHEMA);\n        Schema supportedTypesSchema = builder.build();\n\n        builder = SchemaBuilder.struct();\n        builder.field(\"B\", supportedTypesSchema);\n        Schema oneLevelNestedSchema = builder.build();\n\n        builder = SchemaBuilder.struct();\n        builder.field(\"A\", oneLevelNestedSchema);\n        Schema twoLevelNestedSchema = builder.build();\n\n        Struct supportedTypes = new Struct(supportedTypesSchema);\n        supportedTypes.put(\"int8\", (byte) 8);\n        supportedTypes.put(\"int16\", (short) 16);\n        supportedTypes.put(\"int32\", 32);\n        supportedTypes.put(\"int64\", (long) 64);\n        supportedTypes.put(\"float32\", 32.f);\n        supportedTypes.put(\"float64\", 64.);\n        supportedTypes.put(\"boolean\", true);\n        supportedTypes.put(\"string\", \"stringy\");\n        supportedTypes.put(\"bytes\", \"bytes\".getBytes());\n\n        Struct oneLevelNestedStruct = new Struct(oneLevelNestedSchema);\n        oneLevelNestedStruct.put(\"B\", supportedTypes);\n\n        Struct twoLevelNestedStruct = new Struct(twoLevelNestedSchema);\n        twoLevelNestedStruct.put(\"A\", oneLevelNestedStruct);\n\n        SourceRecord transformed = xform.apply(new SourceRecord(null, null,\n                \"topic\", 0,\n                twoLevelNestedSchema, twoLevelNestedStruct));\n\n        assertEquals(Schema.Type.STRUCT, transformed.valueSchema().type());\n        Struct transformedStruct = (Struct) transformed.value();\n        assertEquals(9, transformedStruct.schema().fields().size());\n        assertEquals(8, (byte) transformedStruct.getInt8(\"A.B.int8\"));\n        assertEquals(16, (short) transformedStruct.getInt16(\"A.B.int16\"));\n        assertEquals(32, (int) transformedStruct.getInt32(\"A.B.int32\"));\n        assertEquals(64L, (long) transformedStruct.getInt64(\"A.B.int64\"));\n        assertEquals(32.f, transformedStruct.getFloat32(\"A.B.float32\"), 0.f);\n        assertEquals(64., transformedStruct.getFloat64(\"A.B.float64\"), 0.);\n        assertEquals(true, transformedStruct.getBoolean(\"A.B.boolean\"));\n        assertEquals(\"stringy\", transformedStruct.getString(\"A.B.string\"));\n        assertArrayEquals(\"bytes\".getBytes(), transformedStruct.getBytes(\"A.B.bytes\"));\n    }\n","realPath":"connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"},{"authorDate":"2017-05-17 14:05:35","commitOrder":1,"curCode":"    public void testOptionalFieldStruct() {\n        final Flatten<SourceRecord> xform = new Flatten.Value<>();\n        xform.configure(Collections.<String, String>emptyMap());\n\n        SchemaBuilder builder = SchemaBuilder.struct();\n        builder.field(\"opt_int32\", Schema.OPTIONAL_INT32_SCHEMA);\n        Schema supportedTypesSchema = builder.build();\n\n        builder = SchemaBuilder.struct();\n        builder.field(\"B\", supportedTypesSchema);\n        Schema oneLevelNestedSchema = builder.build();\n\n        Struct supportedTypes = new Struct(supportedTypesSchema);\n        supportedTypes.put(\"opt_int32\", null);\n\n        Struct oneLevelNestedStruct = new Struct(oneLevelNestedSchema);\n        oneLevelNestedStruct.put(\"B\", supportedTypes);\n\n        SourceRecord transformed = xform.apply(new SourceRecord(null, null,\n                \"topic\", 0,\n                oneLevelNestedSchema, oneLevelNestedStruct));\n\n        assertEquals(Schema.Type.STRUCT, transformed.valueSchema().type());\n        Struct transformedStruct = (Struct) transformed.value();\n        assertNull(transformedStruct.get(\"B.opt_int32\"));\n    }\n","date":"2017-05-17 14:05:35","endLine":178,"groupId":"14372","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOptionalFieldStruct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/86/851f38af984ffe0d1487a3fd3b9396973ddf38.src","preCode":"    public void testOptionalFieldStruct() {\n        final Flatten<SourceRecord> xform = new Flatten.Value<>();\n        xform.configure(Collections.<String, String>emptyMap());\n\n        SchemaBuilder builder = SchemaBuilder.struct();\n        builder.field(\"opt_int32\", Schema.OPTIONAL_INT32_SCHEMA);\n        Schema supportedTypesSchema = builder.build();\n\n        builder = SchemaBuilder.struct();\n        builder.field(\"B\", supportedTypesSchema);\n        Schema oneLevelNestedSchema = builder.build();\n\n        Struct supportedTypes = new Struct(supportedTypesSchema);\n        supportedTypes.put(\"opt_int32\", null);\n\n        Struct oneLevelNestedStruct = new Struct(oneLevelNestedSchema);\n        oneLevelNestedStruct.put(\"B\", supportedTypes);\n\n        SourceRecord transformed = xform.apply(new SourceRecord(null, null,\n                \"topic\", 0,\n                oneLevelNestedSchema, oneLevelNestedStruct));\n\n        assertEquals(Schema.Type.STRUCT, transformed.valueSchema().type());\n        Struct transformedStruct = (Struct) transformed.value();\n        assertNull(transformedStruct.get(\"B.opt_int32\"));\n    }\n","realPath":"connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"B"}],"commitId":"1cea4d8f5a51cc5795ddd3af2ea015b9e14d937d","commitMessage":"@@@KAFKA-4714; Flatten and Cast single message transforms (KIP-66)\n\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Shikhar Bhushan <shikhar@confluent.io>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2458 from ewencp/kafka-3209-even-more-transforms\n","date":"2017-05-17 14:05:35","modifiedFileCount":"4","status":"B","submitter":"Ewen Cheslack-Postava"},{"authorTime":"2017-07-20 01:51:28","codes":[{"authorDate":"2017-07-20 01:51:28","commitOrder":2,"curCode":"    public void testNestedStruct() {\n        xformValue.configure(Collections.<String, String>emptyMap());\n\n        SchemaBuilder builder = SchemaBuilder.struct();\n        builder.field(\"int8\", Schema.INT8_SCHEMA);\n        builder.field(\"int16\", Schema.INT16_SCHEMA);\n        builder.field(\"int32\", Schema.INT32_SCHEMA);\n        builder.field(\"int64\", Schema.INT64_SCHEMA);\n        builder.field(\"float32\", Schema.FLOAT32_SCHEMA);\n        builder.field(\"float64\", Schema.FLOAT64_SCHEMA);\n        builder.field(\"boolean\", Schema.BOOLEAN_SCHEMA);\n        builder.field(\"string\", Schema.STRING_SCHEMA);\n        builder.field(\"bytes\", Schema.BYTES_SCHEMA);\n        Schema supportedTypesSchema = builder.build();\n\n        builder = SchemaBuilder.struct();\n        builder.field(\"B\", supportedTypesSchema);\n        Schema oneLevelNestedSchema = builder.build();\n\n        builder = SchemaBuilder.struct();\n        builder.field(\"A\", oneLevelNestedSchema);\n        Schema twoLevelNestedSchema = builder.build();\n\n        Struct supportedTypes = new Struct(supportedTypesSchema);\n        supportedTypes.put(\"int8\", (byte) 8);\n        supportedTypes.put(\"int16\", (short) 16);\n        supportedTypes.put(\"int32\", 32);\n        supportedTypes.put(\"int64\", (long) 64);\n        supportedTypes.put(\"float32\", 32.f);\n        supportedTypes.put(\"float64\", 64.);\n        supportedTypes.put(\"boolean\", true);\n        supportedTypes.put(\"string\", \"stringy\");\n        supportedTypes.put(\"bytes\", \"bytes\".getBytes());\n\n        Struct oneLevelNestedStruct = new Struct(oneLevelNestedSchema);\n        oneLevelNestedStruct.put(\"B\", supportedTypes);\n\n        Struct twoLevelNestedStruct = new Struct(twoLevelNestedSchema);\n        twoLevelNestedStruct.put(\"A\", oneLevelNestedStruct);\n\n        SourceRecord transformed = xformValue.apply(new SourceRecord(null, null,\n                \"topic\", 0,\n                twoLevelNestedSchema, twoLevelNestedStruct));\n\n        assertEquals(Schema.Type.STRUCT, transformed.valueSchema().type());\n        Struct transformedStruct = (Struct) transformed.value();\n        assertEquals(9, transformedStruct.schema().fields().size());\n        assertEquals(8, (byte) transformedStruct.getInt8(\"A.B.int8\"));\n        assertEquals(16, (short) transformedStruct.getInt16(\"A.B.int16\"));\n        assertEquals(32, (int) transformedStruct.getInt32(\"A.B.int32\"));\n        assertEquals(64L, (long) transformedStruct.getInt64(\"A.B.int64\"));\n        assertEquals(32.f, transformedStruct.getFloat32(\"A.B.float32\"), 0.f);\n        assertEquals(64., transformedStruct.getFloat64(\"A.B.float64\"), 0.);\n        assertEquals(true, transformedStruct.getBoolean(\"A.B.boolean\"));\n        assertEquals(\"stringy\", transformedStruct.getString(\"A.B.string\"));\n        assertArrayEquals(\"bytes\".getBytes(), transformedStruct.getBytes(\"A.B.bytes\"));\n    }\n","date":"2017-07-20 01:51:28","endLine":118,"groupId":"105362","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNestedStruct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d7/09054dbe0434cf2275ef91a775ddff474a6568.src","preCode":"    public void testNestedStruct() {\n        final Flatten<SourceRecord> xform = new Flatten.Value<>();\n        xform.configure(Collections.<String, String>emptyMap());\n\n        SchemaBuilder builder = SchemaBuilder.struct();\n        builder.field(\"int8\", Schema.INT8_SCHEMA);\n        builder.field(\"int16\", Schema.INT16_SCHEMA);\n        builder.field(\"int32\", Schema.INT32_SCHEMA);\n        builder.field(\"int64\", Schema.INT64_SCHEMA);\n        builder.field(\"float32\", Schema.FLOAT32_SCHEMA);\n        builder.field(\"float64\", Schema.FLOAT64_SCHEMA);\n        builder.field(\"boolean\", Schema.BOOLEAN_SCHEMA);\n        builder.field(\"string\", Schema.STRING_SCHEMA);\n        builder.field(\"bytes\", Schema.BYTES_SCHEMA);\n        Schema supportedTypesSchema = builder.build();\n\n        builder = SchemaBuilder.struct();\n        builder.field(\"B\", supportedTypesSchema);\n        Schema oneLevelNestedSchema = builder.build();\n\n        builder = SchemaBuilder.struct();\n        builder.field(\"A\", oneLevelNestedSchema);\n        Schema twoLevelNestedSchema = builder.build();\n\n        Struct supportedTypes = new Struct(supportedTypesSchema);\n        supportedTypes.put(\"int8\", (byte) 8);\n        supportedTypes.put(\"int16\", (short) 16);\n        supportedTypes.put(\"int32\", 32);\n        supportedTypes.put(\"int64\", (long) 64);\n        supportedTypes.put(\"float32\", 32.f);\n        supportedTypes.put(\"float64\", 64.);\n        supportedTypes.put(\"boolean\", true);\n        supportedTypes.put(\"string\", \"stringy\");\n        supportedTypes.put(\"bytes\", \"bytes\".getBytes());\n\n        Struct oneLevelNestedStruct = new Struct(oneLevelNestedSchema);\n        oneLevelNestedStruct.put(\"B\", supportedTypes);\n\n        Struct twoLevelNestedStruct = new Struct(twoLevelNestedSchema);\n        twoLevelNestedStruct.put(\"A\", oneLevelNestedStruct);\n\n        SourceRecord transformed = xform.apply(new SourceRecord(null, null,\n                \"topic\", 0,\n                twoLevelNestedSchema, twoLevelNestedStruct));\n\n        assertEquals(Schema.Type.STRUCT, transformed.valueSchema().type());\n        Struct transformedStruct = (Struct) transformed.value();\n        assertEquals(9, transformedStruct.schema().fields().size());\n        assertEquals(8, (byte) transformedStruct.getInt8(\"A.B.int8\"));\n        assertEquals(16, (short) transformedStruct.getInt16(\"A.B.int16\"));\n        assertEquals(32, (int) transformedStruct.getInt32(\"A.B.int32\"));\n        assertEquals(64L, (long) transformedStruct.getInt64(\"A.B.int64\"));\n        assertEquals(32.f, transformedStruct.getFloat32(\"A.B.float32\"), 0.f);\n        assertEquals(64., transformedStruct.getFloat64(\"A.B.float64\"), 0.);\n        assertEquals(true, transformedStruct.getBoolean(\"A.B.boolean\"));\n        assertEquals(\"stringy\", transformedStruct.getString(\"A.B.string\"));\n        assertArrayEquals(\"bytes\".getBytes(), transformedStruct.getBytes(\"A.B.bytes\"));\n    }\n","realPath":"connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2017-07-20 01:51:28","commitOrder":2,"curCode":"    public void testOptionalFieldStruct() {\n        xformValue.configure(Collections.<String, String>emptyMap());\n\n        SchemaBuilder builder = SchemaBuilder.struct();\n        builder.field(\"opt_int32\", Schema.OPTIONAL_INT32_SCHEMA);\n        Schema supportedTypesSchema = builder.build();\n\n        builder = SchemaBuilder.struct();\n        builder.field(\"B\", supportedTypesSchema);\n        Schema oneLevelNestedSchema = builder.build();\n\n        Struct supportedTypes = new Struct(supportedTypesSchema);\n        supportedTypes.put(\"opt_int32\", null);\n\n        Struct oneLevelNestedStruct = new Struct(oneLevelNestedSchema);\n        oneLevelNestedStruct.put(\"B\", supportedTypes);\n\n        SourceRecord transformed = xformValue.apply(new SourceRecord(null, null,\n                \"topic\", 0,\n                oneLevelNestedSchema, oneLevelNestedStruct));\n\n        assertEquals(Schema.Type.STRUCT, transformed.valueSchema().type());\n        Struct transformedStruct = (Struct) transformed.value();\n        assertNull(transformedStruct.get(\"B.opt_int32\"));\n    }\n","date":"2017-07-20 01:51:28","endLine":182,"groupId":"105362","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOptionalFieldStruct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d7/09054dbe0434cf2275ef91a775ddff474a6568.src","preCode":"    public void testOptionalFieldStruct() {\n        final Flatten<SourceRecord> xform = new Flatten.Value<>();\n        xform.configure(Collections.<String, String>emptyMap());\n\n        SchemaBuilder builder = SchemaBuilder.struct();\n        builder.field(\"opt_int32\", Schema.OPTIONAL_INT32_SCHEMA);\n        Schema supportedTypesSchema = builder.build();\n\n        builder = SchemaBuilder.struct();\n        builder.field(\"B\", supportedTypesSchema);\n        Schema oneLevelNestedSchema = builder.build();\n\n        Struct supportedTypes = new Struct(supportedTypesSchema);\n        supportedTypes.put(\"opt_int32\", null);\n\n        Struct oneLevelNestedStruct = new Struct(oneLevelNestedSchema);\n        oneLevelNestedStruct.put(\"B\", supportedTypes);\n\n        SourceRecord transformed = xform.apply(new SourceRecord(null, null,\n                \"topic\", 0,\n                oneLevelNestedSchema, oneLevelNestedStruct));\n\n        assertEquals(Schema.Type.STRUCT, transformed.valueSchema().type());\n        Struct transformedStruct = (Struct) transformed.value();\n        assertNull(transformedStruct.get(\"B.opt_int32\"));\n    }\n","realPath":"connect/transforms/src/test/java/org/apache/kafka/connect/transforms/FlattenTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"f87d58b796977fdaefb089d17cb30b2071cd4485","commitMessage":"@@@MINOR: Code Cleanup\n\nClean up includes:\n\n- Switching try-catch-finally blocks to try-with-resources when possible\n- Removing some seemingly unnecessary `SuppressWarnings` annotations\n- Resolving some Java warnings\n- Closing unclosed Closable objects\n- Removing unused code\n\nAuthor: Vahid Hashemian <vahidhashemian@us.ibm.com>\n\nReviewers: Balint Molnar <balintmolnar91@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>.  Matthias J. Sax <matthias@confluent.io>.  Ismael Juma <ismael@juma.me.uk>.  Jason Gustafson <jason@confluent.io>\n\nCloses #3222 from vahidhashemian/minor/code_cleanup_1706\n","date":"2017-07-20 01:51:28","modifiedFileCount":"62","status":"M","submitter":"Vahid Hashemian"}]
