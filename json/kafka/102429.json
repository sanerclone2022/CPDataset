[{"authorTime":"2018-01-11 08:24:43","codes":[{"authorDate":"2018-01-11 08:24:43","commitOrder":2,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(\n                metrics,\n                \"\",\n                \"\",\n                Collections.<String, String>emptyMap());\n        final StreamThread thread = new StreamThread(\n                mockTime,\n                config,\n                consumer,\n                consumer,\n                null,\n                taskManager,\n                streamsMetrics,\n                internalTopologyBuilder,\n                clientId,\n                new LogContext(\"\"));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","date":"2018-01-11 08:24:43","endLine":512,"groupId":"10525","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e6/7fe14503cb3f298f94a6481c2513a95bf865ab.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(\n                metrics,\n                \"\",\n                \"\",\n                Collections.<String, String>emptyMap());\n        final StreamThread thread = new StreamThread(\n                mockTime,\n                config,\n                consumer,\n                consumer,\n                null,\n                taskManager,\n                streamsMetrics,\n                internalTopologyBuilder,\n                clientId,\n                new LogContext(\"\"));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":487,"status":"MB"},{"authorDate":"2018-01-11 08:24:43","commitOrder":2,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(\n            metrics,\n            \"\",\n            \"\",\n            Collections.<String, String>emptyMap());\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","date":"2018-01-11 08:24:43","endLine":542,"groupId":"10525","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e6/7fe14503cb3f298f94a6481c2513a95bf865ab.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(\n            metrics,\n            \"\",\n            \"\",\n            Collections.<String, String>emptyMap());\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"B"}],"commitId":"4d544d4f08b027ce318b088b112f03dccc566098","commitMessage":"@@@KAFKA-6383: Complete shut down for streams threads that have not started\n\n*More detailed description of your change. \nif necessary. The PR title and PR message become\nthe squashed commit message.  so use a separate\ncomment to ping reviewers.*\n\n*Summary of testing strategy (including rationale)\nfor the feature or bug fix. Unit and/or integration\ntests are expected for any behaviour change and\nsystem tests should be considered for larger changes.*\n\nAuthor: Rohan Desai <desai.p.rohan@gmail.com>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #4382 from rodesai/KAFKA-6383\n","date":"2018-01-11 08:24:43","modifiedFileCount":"5","status":"M","submitter":"Rohan Desai"},{"authorTime":"2018-04-24 02:41:03","codes":[{"authorDate":"2018-04-24 02:41:03","commitOrder":3,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\")\n        );\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","date":"2018-04-24 02:41:03","endLine":554,"groupId":"11718","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/a1bce8cf0c4336c561a119a840db29ba615431.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(\n            metrics,\n            \"\",\n            \"\",\n            Collections.<String, String>emptyMap()\n        );\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\")\n        );\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":532,"status":"M"},{"authorDate":"2018-04-24 02:41:03","commitOrder":3,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","date":"2018-04-24 02:41:03","endLine":581,"groupId":"11718","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/a1bce8cf0c4336c561a119a840db29ba615431.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(\n            metrics,\n            \"\",\n            \"\",\n            Collections.<String, String>emptyMap());\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":558,"status":"M"}],"commitId":"ed51b2cdf5bdac210a6904bead1a2ca6e8411406","commitMessage":"@@@KAFKA-6376; refactor skip metrics in Kafka Streams\n\n* unify skipped records metering\n* log warnings when things get skipped\n* tighten up metrics usage a bit\n\n\n Testing strategy:\nUnit testing of the metrics and the logs should be sufficient.\n\nAuthor: John Roesler <john@confluent.io>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #4812 from vvcephei/kip-274-streams-skip-metrics\n","date":"2018-04-24 02:41:03","modifiedFileCount":"65","status":"M","submitter":"John Roesler"},{"authorTime":"2018-05-16 05:29:07","codes":[{"authorDate":"2018-05-16 05:29:07","commitOrder":4,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\")\n        );\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","date":"2018-05-16 05:29:07","endLine":554,"groupId":"11718","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/9d618bac57a61e997333911a613688107e9847.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\")\n        );\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":531,"status":"M"},{"authorDate":"2018-05-16 05:29:07","commitOrder":4,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","date":"2018-05-16 05:29:07","endLine":582,"groupId":"11718","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/9d618bac57a61e997333911a613688107e9847.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":558,"status":"M"}],"commitId":"1e207b2ef83db4296fb944ade4c301794f9e8460","commitMessage":"@@@KAFKA-6896: Add producer metrics exporting in KafkaStreams (#4998)\n\nWe would like to also export the producer metrics from StreamThread just like consumer metrics.  so that we could gain more visibility of stream application. The approach is to pass in the threadProducer into the StreamThread so that we could export its metrics in dynamic.\n\nNote that this is a pure internal change that doesn't require a KIP.  and in the future we also want to export admin client metrics. A followup KIP for admin client will be created once this is merged.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2018-05-16 05:29:07","modifiedFileCount":"5","status":"M","submitter":"Boyang Chen"},{"authorTime":"2018-05-31 13:39:42","codes":[{"authorDate":"2018-05-31 13:39:42","commitOrder":5,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicBoolean()\n        );\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","date":"2018-05-31 13:39:42","endLine":562,"groupId":"11718","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/dce521998361e5e729e883ecbe872d54484a7a.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\")\n        );\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":538,"status":"M"},{"authorDate":"2018-05-31 13:39:42","commitOrder":5,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicBoolean()\n        );\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","date":"2018-05-31 13:39:42","endLine":592,"groupId":"11718","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/dce521998361e5e729e883ecbe872d54484a7a.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"M"}],"commitId":"d166485be15d95192ec1b2818f815fa58726ec54","commitMessage":"@@@KAFKA-6054: Add 'version probing' to Kafka Streams rebalance (#4636)\n\nimplements KIP-268\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-05-31 13:39:42","modifiedFileCount":"13","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-07-20 06:22:53","codes":[{"authorDate":"2018-07-20 06:22:53","commitOrder":6,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        );\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","date":"2018-07-20 06:22:53","endLine":567,"groupId":"11718","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/d4e94a234ac3324e85b1a241dae2dc001851fe.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicBoolean()\n        );\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":543,"status":"M"},{"authorDate":"2018-07-20 06:22:53","commitOrder":6,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        );\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","date":"2018-07-20 06:22:53","endLine":597,"groupId":"11718","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/d4e94a234ac3324e85b1a241dae2dc001851fe.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicBoolean()\n        );\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":571,"status":"M"}],"commitId":"82f124ae30116b2b7d45878aaeb9699b6bdf1c30","commitMessage":"@@@KAFKA-5037: Fix infinite loop if all input topics are unknown at startup\n\n1. At the beginning of assign.  we first check that all the non-repartition source topics are included in the metadata. If not.  we log an error at the leader and set an error in the Assignment userData bytes.  indicating that leader cannot complete assignment and the error code would indicate the root cause of it.\n\n2. Upon receiving the assignment.  if the error is not NONE the streams will shutdown itself with a log entry re-stating the root cause interpreted from the error code.\n\nAuthor: tedyu <yuzhihong@gmail.com>\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #5322 from tedyu/trunk\n","date":"2018-07-20 06:22:53","modifiedFileCount":"15","status":"M","submitter":"Ted Yu"},{"authorTime":"2019-02-02 13:29:00","codes":[{"authorDate":"2019-02-02 13:29:00","commitOrder":7,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics\n            = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(clientId));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","date":"2019-02-02 13:29:00","endLine":662,"groupId":"11718","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/d151c9462b59381223a4e27f88ef76a23e8769.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics\n            = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        );\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":637,"status":"M"},{"authorDate":"2019-02-02 13:29:00","commitOrder":7,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics\n            = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(clientId));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","date":"2019-02-02 13:29:00","endLine":692,"groupId":"11718","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/d151c9462b59381223a4e27f88ef76a23e8769.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics\n            = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        );\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":665,"status":"M"}],"commitId":"9dc76f8872b862ca008562cdcf8cf50524e2eaa3","commitMessage":"@@@KAFKA-7798: Expose embedded clientIds (#6107)\n\nReviewers: Damian Guy <damian@confluent.io>.  John Roesler <john@confluent.io>.  Boyang Chen <bchen11@outlook.com>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2019-02-02 13:29:00","modifiedFileCount":"7","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-06-04 05:31:19","codes":[{"authorDate":"2019-06-04 05:31:19","commitOrder":8,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, clientId);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(clientId));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","date":"2019-06-04 05:31:18","endLine":696,"groupId":"11171","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7c/17ca7a45c1eb31b5cacefe33c34291fca97ca1.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics\n            = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(clientId));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":672,"status":"M"},{"authorDate":"2019-06-04 05:31:19","commitOrder":8,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, clientId);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(clientId));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","date":"2019-06-04 05:31:18","endLine":725,"groupId":"11171","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7c/17ca7a45c1eb31b5cacefe33c34291fca97ca1.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamThread.StreamsMetricsThreadImpl streamsMetrics\n            = new StreamThread.StreamsMetricsThreadImpl(metrics, \"\");\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(clientId));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":699,"status":"M"}],"commitId":"17712b96c86d6c2cce695531d7e5f2e3d5718b21","commitMessage":"@@@KAFKA-6819: Pt. 1 - Refactor thread-level Streams metrics (#6631)\n\n* StreamsMetricsImpl wraps the Kafka Streams' metrics registry and provides logic to create\nand register sensors and their corresponding metrics. An example for such logic can be found in\nthreadLevelSensor(). Furthermore.  StreamsMetricsmpl keeps track of the sensors on the\ndifferent levels of an application.  i.e..  thread.  task.  etc..  and provides logic to remove sensors per\nlevel.  e.g..  removeAllThreadLevelSensors(). There is one StreamsMetricsImpl object per\napplication instance.\n* ThreadMetrics contains only static methods that specify all built-in thread-level sensors and\nmetrics and provide logic to register and retrieve those thread-level sensors.  e.g..  commitSensor().\n* From anywhere inside the code base with access to StreamsMetricsImpl.  thread-level sensors can be accessed by using ThreadMetrics.\n* ThreadsMetrics does not inherit from StreamsMetricsImpl anymore.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-06-04 05:31:18","modifiedFileCount":"24","status":"M","submitter":"cadonna"},{"authorTime":"2019-09-17 12:48:25","codes":[{"authorDate":"2019-09-17 12:48:25","commitOrder":9,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, clientId, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(clientId));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","date":"2019-09-17 12:48:25","endLine":706,"groupId":"9597","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d6/0c0069039c4c902c23a66b8beac08955976eab.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, clientId);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(clientId));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":681,"status":"M"},{"authorDate":"2019-09-17 12:48:25","commitOrder":9,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, clientId, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(clientId));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","date":"2019-09-17 12:48:25","endLine":816,"groupId":"9597","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d6/0c0069039c4c902c23a66b8beac08955976eab.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, clientId);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(clientId));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":789,"status":"M"}],"commitId":"bab3e082dc48bc3db68692694bd114a39b41fa68","commitMessage":"@@@KAFKA-8859: Expose built-in streams metrics version in `StreamsMetricsImpl` (#7323)\n\nThe streams config built.in.metrics.version is needed to add metrics in\na backward-compatible way. However.  not in every location where metrics are\nadded a streams config is available to check built.in.metrics.version. Thus. \nthe config value needs to be exposed through the StreamsMetricsImpl object.\n\nReviewers: John Roesler <vvcephei@users.noreply.github.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-09-17 12:48:25","modifiedFileCount":"13","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-10-05 08:07:30","codes":[{"authorDate":"2019-10-05 08:07:30","commitOrder":10,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","date":"2019-10-05 08:07:30","endLine":717,"groupId":"9597","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/10e4cf2c3aa27a7218d5dfc42ff45e167d8683.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, clientId, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(clientId));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":692,"status":"M"},{"authorDate":"2019-10-05 08:07:30","commitOrder":10,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","date":"2019-10-05 08:07:30","endLine":832,"groupId":"9597","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/10e4cf2c3aa27a7218d5dfc42ff45e167d8683.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, clientId, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            clientId,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(clientId));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":805,"status":"M"}],"commitId":"52007e878aaac3f48d0d949dbe428a2ae5e56f57","commitMessage":"@@@KAFKA-8934: Introduce instance-level metrics for streams applications (#7416)\n\n1. Moves StreamsMetricsImpl from StreamThread to KafkaStreams\n2. Adds instance-level metrics as specified in KIP-444.  i.e.:\n-- version\n-- commit-id\n-- application-id\n-- topology-description\n-- state\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <john@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-10-05 08:07:30","modifiedFileCount":"65","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-02-05 13:06:39","codes":[{"authorDate":"2020-02-05 13:06:39","commitOrder":11,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","date":"2020-02-05 13:06:39","endLine":792,"groupId":"22138","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/364b3c9fb305a84bb46632f74fc775946af90b.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":765,"status":"M"},{"authorDate":"2020-02-05 13:06:39","commitOrder":11,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","date":"2020-02-05 13:06:39","endLine":824,"groupId":"22138","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/364b3c9fb305a84bb46632f74fc775946af90b.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":795,"status":"M"}],"commitId":"4090f9a2b0a95e4da127e4786007542276d97520","commitMessage":"@@@KAFKA-9113: Clean up task management and state management (#7997)\n\nThis PR is collaborated by Guozhang Wang and John Roesler. It is a significant tech debt cleanup on task management and state management.  and is broken down by several sub-tasks listed below:\n\nExtract embedded clients (producer and consumer) into RecordCollector from StreamTask.\nguozhangwang#2\nguozhangwang#5\n\nConsolidate the standby updating and active restoring logic into ChangelogReader and extract out of StreamThread.\nguozhangwang#3\nguozhangwang#4\n\nIntroduce Task state life cycle (created.  restoring.  running.  suspended.  closing).  and refactor the task operations based on the current state.\nguozhangwang#6\nguozhangwang#7\n\nConsolidate AssignedTasks into TaskManager and simplify the logic of changelog management and task management (since they are already moved in step 2) and 3)).\nguozhangwang#8\nguozhangwang#9\n\nAlso simplified the StreamThread logic a bit as the embedded clients / changelog restoration logic has been moved into step 1) and 2).\nguozhangwang#10\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-02-05 13:06:39","modifiedFileCount":"76","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-02-22 13:40:28","codes":[{"authorDate":"2020-02-22 13:40:28","commitOrder":12,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            null,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","date":"2020-02-22 13:40:28","endLine":795,"groupId":"19366","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/a16a7d720fd32b59ee088c7cbac883a7d61fb5.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":767,"status":"M"},{"authorDate":"2020-02-22 13:40:28","commitOrder":12,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            null,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","date":"2020-02-22 13:40:28","endLine":828,"groupId":"19366","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/a16a7d720fd32b59ee088c7cbac883a7d61fb5.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":798,"status":"M"}],"commitId":"97d107a270d3e9b795b42d209f838f2f81009ce8","commitMessage":"@@@KAFKA-9441: Add internal TransactionManager (#8105)\n\nUpfront refactoring for KIP-447.\n\nIntroduces `StreamsProducer` that allows to share a producer over multiple tasks and track the TX status.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-02-22 13:40:28","modifiedFileCount":"19","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-03-06 04:20:46","codes":[{"authorDate":"2020-03-06 04:20:46","commitOrder":13,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","date":"2020-03-06 04:20:46","endLine":837,"groupId":"9135","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/a669d0112a00c69b3d075d65f625339c67ea15.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            null,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":811,"status":"M"},{"authorDate":"2020-03-06 04:20:46","commitOrder":13,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","date":"2020-03-06 04:20:46","endLine":868,"groupId":"9135","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/a669d0112a00c69b3d075d65f625339c67ea15.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            null,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":840,"status":"M"}],"commitId":"78374a15492cfb6df49353bd166d8c45ac9abdb2","commitMessage":"@@@KAFKA-9615: Clean up task/producer create and close (#8213)\n\n* Consolidate task/producer management. Now.  exactly one component manages\n  the creation and destruction of Producers.  whether they are per-thread or per-task.\n* Add missing test coverage on TaskManagerTest\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Boyang Chen <boyang@confluent.io>","date":"2020-03-06 04:20:46","modifiedFileCount":"12","status":"M","submitter":"John Roesler"},{"authorTime":"2020-04-09 02:02:30","codes":[{"authorDate":"2020-04-09 02:02:30","commitOrder":14,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","date":"2020-04-09 02:02:30","endLine":1012,"groupId":"9135","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/db/d43488bfec99e1ba2fc7eb89b43737f3a11171.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":985,"status":"M"},{"authorDate":"2020-04-09 02:02:30","commitOrder":14,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","date":"2020-04-09 02:02:30","endLine":1044,"groupId":"9135","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/db/d43488bfec99e1ba2fc7eb89b43737f3a11171.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1015,"status":"M"}],"commitId":"98ea773a22f84eb21c318fa1da78d2e6b323e8de","commitMessage":"@@@KAFKA-6145: KIP-441 Pt. 6 Trigger probing rebalances until group is stable (#8409)\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-04-09 02:02:30","modifiedFileCount":"8","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-04-16 04:13:23","codes":[{"authorDate":"2020-04-16 04:13:23","commitOrder":15,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        verify(taskManager);\n    }\n","date":"2020-04-16 04:13:23","endLine":1020,"groupId":"9135","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a5/39ec8441b51ac21ea2cf36110e3d7e4ba15314.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":993,"status":"M"},{"authorDate":"2020-04-16 04:13:23","commitOrder":15,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        verify(taskManager);\n    }\n","date":"2020-04-16 04:13:23","endLine":1052,"groupId":"9135","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a5/39ec8441b51ac21ea2cf36110e3d7e4ba15314.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        EasyMock.verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1023,"status":"M"}],"commitId":"17f98792617a6de39cbd0d651a03fc40a06e0ff6","commitMessage":"@@@KAFKA-9832: extend Kafka Streams EOS system test (#8440)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-04-16 04:13:23","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-08-14 03:40:40","codes":[{"authorDate":"2020-08-14 03:40:40","commitOrder":16,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        verify(taskManager);\n    }\n","date":"2020-08-14 03:40:40","endLine":1033,"groupId":"22517","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/39/366402426362b2d3a235c20b0f2deebde697bc.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1006,"status":"M"},{"authorDate":"2020-08-14 03:40:40","commitOrder":16,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        verify(taskManager);\n    }\n","date":"2020-08-14 03:40:40","endLine":1065,"groupId":"22517","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/39/366402426362b2d3a235c20b0f2deebde697bc.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1036,"status":"M"}],"commitId":"5645d906fa319206a9270c080926a21dfddc852a","commitMessage":"@@@KAFKA-9924: Prepare RocksDB and metrics for RocksDB properties recording (#9098)\n\nRefactor the RocksDB store and the metrics infrastructure in Streams\nin preparation of the recordings of the RocksDB properties specified in KIP-607.\n\nThe refactoring includes:\n* wrapper around BlockedBasedTableConfig to make the cache accessible to the\n  RocksDB metrics recorder\n* RocksDB metrics recorder now takes also the DB instance and the cache in addition\n  to the statistics\n* The value providers for the metrics are added to the RockDB metrics recorder also if\n  the recording level is INFO.\n* The creation of the RocksDB metrics recording trigger is moved to StreamsMetricsImpl\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <vvcephei@apache.org>\n","date":"2020-08-14 03:40:40","modifiedFileCount":"27","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-11-18 14:55:09","codes":[{"authorDate":"2020-11-18 14:55:09","commitOrder":17,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        verify(taskManager);\n    }\n","date":"2020-11-18 14:55:09","endLine":1067,"groupId":"22517","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/039ef024aa5fce13f7fccbaeebb94fce3b843c.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1038,"status":"M"},{"authorDate":"2020-11-18 14:55:09","commitOrder":17,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        verify(taskManager);\n    }\n","date":"2020-11-18 14:55:09","endLine":1101,"groupId":"22517","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/039ef024aa5fce13f7fccbaeebb94fce3b843c.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1070,"status":"M"}],"commitId":"5899f5fc4a9557c33e466e58d7555990ee742a2b","commitMessage":"@@@KAFKA-9331: Add a streams specific uncaught exception handler (#9487)\n\nThis PR introduces a streams specific uncaught exception handler that currently has the option to close the client or the application. If the new handler is set as well as the old handler (java thread handler) will be ignored and an error will be logged.\nThe application shutdown is achieved through the rebalance protocol.\n\nReviewers: Bruno Cadonna <cadonna@confluent.io>.  Leah Thomas <lthomas@confluent.io>.  John Roesler <john@confluent.io>.  Anna Sophie Blee-Goldman <ableegoldman@apache.org>","date":"2020-11-18 14:55:09","modifiedFileCount":"34","status":"M","submitter":"Walker Carlson"},{"authorTime":"2020-11-19 07:45:40","codes":[{"authorDate":"2020-11-19 07:45:40","commitOrder":18,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        verify(taskManager);\n    }\n","date":"2020-11-19 07:45:40","endLine":1073,"groupId":"22517","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/361f0b760db4c3e1a9889e0084561c58f9f203.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1043,"status":"M"},{"authorDate":"2020-11-19 07:45:40","commitOrder":18,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        verify(taskManager);\n    }\n","date":"2020-11-19 07:45:40","endLine":1108,"groupId":"22517","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/361f0b760db4c3e1a9889e0084561c58f9f203.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1076,"status":"M"}],"commitId":"d12fbb7c0077fba23282adb84ff87635d6e44e5e","commitMessage":"@@@KAFKA-10500: Allow resizing of StreamThread state store caches (#9572)\n\n - part of KIP-663\n\nReviewer: Bruno Cadonna <bruno@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-11-19 07:45:40","modifiedFileCount":"5","status":"M","submitter":"Walker Carlson"},{"authorTime":"2021-01-30 04:35:34","codes":[{"authorDate":"2021-01-30 04:35:34","commitOrder":19,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final ConsumerGroupMetadata consumerGroupMetadata = mock(ConsumerGroupMetadata.class);\n        expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata);\n        expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty());\n        EasyMock.replay(consumerGroupMetadata);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        verify(taskManager);\n    }\n","date":"2021-01-30 04:35:34","endLine":1136,"groupId":"22517","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/69/cf09cd75f98665ec2ac6a8e2aa03e5d146a586.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1102,"status":"M"},{"authorDate":"2021-01-30 04:35:34","commitOrder":19,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final ConsumerGroupMetadata consumerGroupMetadata = mock(ConsumerGroupMetadata.class);\n        expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata);\n        expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty());\n        EasyMock.replay(consumerGroupMetadata);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        verify(taskManager);\n    }\n","date":"2021-01-30 04:35:34","endLine":1175,"groupId":"22517","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/69/cf09cd75f98665ec2ac6a8e2aa03e5d146a586.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1139,"status":"M"}],"commitId":"bd6c212538984399e78ab6a3493a15270b38eca9","commitMessage":"@@@KAFKA-12247: add timeout and static group rebalance to remove thread (#9984)\n\nAdd timeout to remove thread.  and trigger thread to explicitly leave the group even in case of static membership\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  Anna Sophie Blee-Goldman <ableegoldman@apache.org>","date":"2021-01-30 04:35:34","modifiedFileCount":"5","status":"M","submitter":"Walker Carlson"},{"authorTime":"2021-06-26 00:31:49","codes":[{"authorDate":"2021-06-26 00:31:49","commitOrder":20,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final ConsumerGroupMetadata consumerGroupMetadata = mock(ConsumerGroupMetadata.class);\n        expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata);\n        expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty());\n        EasyMock.replay(consumerGroupMetadata);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet());\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        verify(taskManager);\n    }\n","date":"2021-06-26 00:31:49","endLine":1252,"groupId":"22517","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/eb26d85af4db8a9cbd2343dd4a474a25fe9620.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final ConsumerGroupMetadata consumerGroupMetadata = mock(ConsumerGroupMetadata.class);\n        expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata);\n        expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty());\n        EasyMock.replay(consumerGroupMetadata);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1217,"status":"M"},{"authorDate":"2021-06-26 00:31:49","commitOrder":20,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final ConsumerGroupMetadata consumerGroupMetadata = mock(ConsumerGroupMetadata.class);\n        expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata);\n        expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty());\n        EasyMock.replay(consumerGroupMetadata);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet());\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        verify(taskManager);\n    }\n","date":"2021-06-26 00:31:49","endLine":1292,"groupId":"22517","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/eb26d85af4db8a9cbd2343dd4a474a25fe9620.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final ConsumerGroupMetadata consumerGroupMetadata = mock(ConsumerGroupMetadata.class);\n        expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata);\n        expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty());\n        EasyMock.replay(consumerGroupMetadata);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1255,"status":"M"}],"commitId":"6655a09e99125aff34cb96188924fca1df3387ad","commitMessage":"@@@KAFKA-12849: KIP-744 TaskMetadata ThreadMetadata StreamsMetadata as API (#10840)\n\nImplementation of KIP-744.\n\nCreates new Interfaces for TaskMetadata.  ThreadMetadata.  and\nStreamsMetadata.  providing internal implementations for each of them.\n\nDeprecates current TaskMetadata.  ThreadMetadata under o.a.k.s.processor. \nand SreamsMetadata under a.o.k.s.state.\n\nUpdates references on internal classes from deprecated classes to new interfaces.\n\nDeprecates methods on KafkaStreams returning deprecated ThreadMeatada and\nStreamsMetadata.  and provides new ones returning the new interfaces.\n\nUpdate Javadocs referencing to deprecated classes and methods to point\nto the right ones.\n\nCo-authored-by: Bruno Cadonna <cadonna@apache.org>\n\nReviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>.  Bruno Cadonna <cadonna@apache.org>","date":"2021-06-26 00:31:49","modifiedFileCount":"29","status":"M","submitter":"Josep Prat"},{"authorTime":"2021-07-29 02:18:56","codes":[{"authorDate":"2021-07-29 02:18:56","commitOrder":21,"curCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final ConsumerGroupMetadata consumerGroupMetadata = mock(ConsumerGroupMetadata.class);\n        expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata);\n        expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty());\n        EasyMock.replay(consumerGroupMetadata);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet());\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            new TopologyMetadata(internalTopologyBuilder, config),\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        verify(taskManager);\n    }\n","date":"2021-07-29 02:18:56","endLine":1256,"groupId":"102429","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldShutdownTaskManagerOnCloseWithoutStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/da8f3d05b33ab4a0fd78d50b5bdf27db2eac9e.src","preCode":"    public void shouldShutdownTaskManagerOnCloseWithoutStart() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final ConsumerGroupMetadata consumerGroupMetadata = mock(ConsumerGroupMetadata.class);\n        expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata);\n        expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty());\n        EasyMock.replay(consumerGroupMetadata);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet());\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1221,"status":"M"},{"authorDate":"2021-07-29 02:18:56","commitOrder":21,"curCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final ConsumerGroupMetadata consumerGroupMetadata = mock(ConsumerGroupMetadata.class);\n        expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata);\n        expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty());\n        EasyMock.replay(consumerGroupMetadata);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet());\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            new TopologyMetadata(internalTopologyBuilder, config),\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        verify(taskManager);\n    }\n","date":"2021-07-29 02:18:56","endLine":1296,"groupId":"102429","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldOnlyShutdownOnce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/da8f3d05b33ab4a0fd78d50b5bdf27db2eac9e.src","preCode":"    public void shouldOnlyShutdownOnce() {\n        final Consumer<byte[], byte[]> consumer = EasyMock.createNiceMock(Consumer.class);\n        final ConsumerGroupMetadata consumerGroupMetadata = mock(ConsumerGroupMetadata.class);\n        expect(consumer.groupMetadata()).andStubReturn(consumerGroupMetadata);\n        expect(consumerGroupMetadata.groupInstanceId()).andReturn(Optional.empty());\n        EasyMock.replay(consumerGroupMetadata);\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet());\n        taskManager.shutdown(true);\n        EasyMock.expectLastCall();\n        EasyMock.replay(taskManager, consumer);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n        thread.shutdown();\n        \r\n        thread.run();\n        verify(taskManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1259,"status":"M"}],"commitId":"4710a491463a91ec12c670ea50c139fc14134e80","commitMessage":"@@@KAFKA-12648: Pt. 2 - Introduce TopologyMetadata to wrap InternalTopologyBuilders of named topologies (#10683)\n\nPt. 1: #10609\nPt. 2: #10683\nPt. 3: #10788\n\nThe TopologyMetadata is next up after Pt. 1 #10609. This PR sets up the basic architecture for running an app with multiple NamedTopologies.  though the APIs to add/remove them dynamically are not implemented until Pt. 3\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Walker Carlson <wcarlson@confluent.io>","date":"2021-07-29 02:18:56","modifiedFileCount":"56","status":"M","submitter":"A. Sophie Blee-Goldman"}]
