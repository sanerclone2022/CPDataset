[{"authorTime":"2020-08-05 07:04:52","codes":[{"authorDate":"2020-07-03 07:14:46","commitOrder":2,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2020-07-03 07:14:46","endLine":97,"groupId":"2366","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/c7d5d82ebffad25ae604c227439341ce6f7e56.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"NB"},{"authorDate":"2020-08-05 07:04:52","commitOrder":2,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2020-08-05 07:04:52","endLine":97,"groupId":"2366","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/c7d5d82ebffad25ae604c227439341ce6f7e56.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"}],"commitId":"1112fd47238abd0254ceb11d699478d4451278f7","commitMessage":"@@@KAFKA-10341: Add 2.6.0 to system tests and streams upgrade tests (#9116)\n\nAuthor: Randall Hauch <rhauch@gmail.com>\nReviewer: Matthias J. Sax <matthias@confluent.io>","date":"2020-08-05 07:04:52","modifiedFileCount":"0","status":"M","submitter":"Randall Hauch"},{"authorTime":"2020-08-06 04:52:50","codes":[{"authorDate":"2020-08-06 04:52:50","commitOrder":3,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            Exit.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            Exit.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                Exit.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2020-08-06 04:52:50","endLine":98,"groupId":"10250","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f2/80eb072182399e2836eebed6a23864c97eccfe.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/upgrade-system-tests-24/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2020-08-06 04:52:50","commitOrder":3,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            Exit.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            Exit.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                Exit.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2020-08-06 04:52:50","endLine":98,"groupId":"10250","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f2/80eb072182399e2836eebed6a23864c97eccfe.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/upgrade-system-tests-26/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"26a217c8e75b238bbba5f1799b7d91b5b4910123","commitMessage":"@@@MINOR: Streams integration tests should not call exit (#9067)\n\n- replace System.exit with Exit.exit in all relevant classes\n- forbid use of System.exit in all relevant classes and add exceptions for others\n\nCo-authored-by: John Roesler <vvcephei@apache.org>\nCo-authored-by: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Lucas Bradstreet <lucas@confluent.io>.  Ismael Juma <ismael@confluent.io>","date":"2020-08-06 04:52:50","modifiedFileCount":"14","status":"M","submitter":"John Roesler"}]
