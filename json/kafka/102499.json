[{"authorTime":"2018-02-27 06:39:47","codes":[{"authorDate":"2018-02-27 06:39:47","commitOrder":1,"curCode":"    public void testAssignWithInternalTopics() throws Exception {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        List<String> topics = Utils.mkList(\"topic1\", applicationId + \"-topicX\");\n        Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","date":"2018-02-27 06:39:47","endLine":697,"groupId":"16569","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bf/3f1d1ac5ee3d04a0c08952ea340b140ef5951a.src","preCode":"    public void testAssignWithInternalTopics() throws Exception {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        List<String> topics = Utils.mkList(\"topic1\", applicationId + \"-topicX\");\n        Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"B"},{"authorDate":"2018-02-27 06:39:47","commitOrder":1,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() throws Exception {\n        String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        List<String> topics = Utils.mkList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","date":"2018-02-27 06:39:47","endLine":732,"groupId":"16126","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bf/3f1d1ac5ee3d04a0c08952ea340b140ef5951a.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() throws Exception {\n        String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        List<String> topics = Utils.mkList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":700,"status":"B"}],"commitId":"f26fbb9adcd66a31740da5c99f14a108bbc24304","commitMessage":"@@@MINOR: Rename stream partition assignor to streams partition assignor (#4621)\n\nThis is a straight-forward change that make the name of the partition assignor to be aligned with Streams.\n\nReviewers: Matthias J. Sax <mjsax@apache.org>","date":"2018-02-27 06:39:47","modifiedFileCount":"7","status":"B","submitter":"Guozhang Wang"},{"authorTime":"2018-04-07 08:00:52","codes":[{"authorDate":"2018-04-07 08:00:52","commitOrder":2,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        List<String> topics = Utils.mkList(\"topic1\", applicationId + \"-topicX\");\n        Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","date":"2018-04-07 08:00:52","endLine":689,"groupId":"16569","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/ed9682066eb611f5863b81adeea08726b99e11.src","preCode":"    public void testAssignWithInternalTopics() throws Exception {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        List<String> topics = Utils.mkList(\"topic1\", applicationId + \"-topicX\");\n        Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":662,"status":"M"},{"authorDate":"2018-04-07 08:00:52","commitOrder":2,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        List<String> topics = Utils.mkList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","date":"2018-04-07 08:00:52","endLine":724,"groupId":"16126","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/ed9682066eb611f5863b81adeea08726b99e11.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() throws Exception {\n        String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        List<String> topics = Utils.mkList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":692,"status":"M"}],"commitId":"0c0d8363e5787e97cce5e0b9b86486d737a6890c","commitMessage":"@@@KAFKA-6054: Fix upgrade path from Kafka Streams v0.10.0 (#4779)\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Damian Guy <damian@confluent.io>","date":"2018-04-07 08:00:52","modifiedFileCount":"10","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-05-31 13:39:42","codes":[{"authorDate":"2018-05-31 13:39:42","commitOrder":3,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = Utils.mkList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        final Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        final Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","date":"2018-05-31 13:39:42","endLine":693,"groupId":"16569","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a3/2d193a171c250da4850a3d628b19efad0732f5.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        List<String> topics = Utils.mkList(\"topic1\", applicationId + \"-topicX\");\n        Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":666,"status":"M"},{"authorDate":"2018-05-31 13:39:42","commitOrder":3,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = Utils.mkList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        final Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        final Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","date":"2018-05-31 13:39:42","endLine":728,"groupId":"16126","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a3/2d193a171c250da4850a3d628b19efad0732f5.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        List<String> topics = Utils.mkList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":696,"status":"M"}],"commitId":"d166485be15d95192ec1b2818f815fa58726ec54","commitMessage":"@@@KAFKA-6054: Add 'version probing' to Kafka Streams rebalance (#4636)\n\nimplements KIP-268\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-05-31 13:39:42","modifiedFileCount":"13","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-11-13 14:18:59","codes":[{"authorDate":"2018-11-13 14:18:59","commitOrder":4,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        final Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        final Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","date":"2018-11-13 14:18:59","endLine":695,"groupId":"16569","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7c/5abbeee094504ab631e49d1b2871e5708dd640.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = Utils.mkList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        final Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        final Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":668,"status":"M"},{"authorDate":"2018-11-13 14:18:59","commitOrder":4,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        final Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        final Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","date":"2018-11-13 14:18:59","endLine":730,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7c/5abbeee094504ab631e49d1b2871e5708dd640.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = Utils.mkList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        final Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        final Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":698,"status":"M"}],"commitId":"12f310d50e7f5b1c18c4f61a119a6cd830da3bc0","commitMessage":"@@@KAFKA-7612: Fix javac warnings and enable warnings as errors (#5900)\n\n- Use Xlint:all with 3 exclusions (filed KAFKA-7613 to remove the exclusions)\n- Use the same javac options when compiling tests (seems accidental that\nwe didn't do this before)\n- Replaced several deprecated method calls with non-deprecated ones:\n  - `KafkaConsumer.poll(long)` and `KafkaConsumer.close(long)`\n  - `Class.newInstance` and `new Integer/Long` (deprecated since Java 9)\n  - `scala.Console` (deprecated in Scala 2.11)\n  - `PartitionData` taking a timestamp (one of them seemingly a bug)\n  - `JsonMappingException` single parameter constructor\n- Fix unnecessary usage of raw types in several places.\n- Add @SuppressWarnings for deprecations.  unchecked and switch fallthrough in\nseveral places.\n- Scala clean-ups (var -> val.  ETA expansion warnings.  avoid reflective calls)\n- Use lambdas to simplify code in a few places\n- Add @SafeVarargs.  fix varargs usage and remove unnecessary `Utils.mkList` method\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Manikumar Reddy <manikumar.reddy@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Stanislav Kozlovski <stanislav_kozlovski@outlook.com>","date":"2018-11-13 14:18:59","modifiedFileCount":"146","status":"M","submitter":"Ismael Juma"},{"authorTime":"2018-12-11 17:54:41","codes":[{"authorDate":"2018-12-11 17:54:41","commitOrder":5,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.emptySet(), Collections.emptySet(), uuid1, builder);\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        final Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        final Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","date":"2018-12-11 17:54:41","endLine":694,"groupId":"16569","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/0c219b1143c0c31a69ded0a5f52abab83b651e.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        final Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        final Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":667,"status":"M"},{"authorDate":"2018-12-11 17:54:41","commitOrder":5,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.emptySet(), Collections.emptySet(), uuid1, builder);\n\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        final Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        final Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","date":"2018-12-11 17:54:41","endLine":729,"groupId":"16570","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/0c219b1143c0c31a69ded0a5f52abab83b651e.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.<TaskId>emptySet(), Collections.<TaskId>emptySet(), uuid1, builder);\n\n        configurePartitionAssignor(Collections.<String, Object>emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        final Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        final Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":697,"status":"M"}],"commitId":"046b0087bd76637bbfd813ccef31693fa358ff2d","commitMessage":"@@@MINOR: improve Streams checkstyle and code cleanup (#5954)\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Nikolay Izhikov <nIzhikov@gmail.com>.  Ismael Juma <ismael@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2018-12-11 17:54:41","modifiedFileCount":"74","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-06-28 12:12:39","codes":[{"authorDate":"2019-06-28 12:12:39","commitOrder":6,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","date":"2019-06-28 12:12:39","endLine":715,"groupId":"16569","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/a6653ba3acc889614542a4bfaf799ebc4f2edd.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.emptySet(), Collections.emptySet(), uuid1, builder);\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        final Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        final Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":689,"status":"M"},{"authorDate":"2019-06-28 12:12:39","commitOrder":6,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","date":"2019-06-28 12:12:39","endLine":749,"groupId":"11384","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/a6653ba3acc889614542a4bfaf799ebc4f2edd.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(Collections.emptySet(), Collections.emptySet(), uuid1, builder);\n\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        final Map<String, PartitionAssignor.Subscription> subscriptions = new HashMap<>();\n        final Set<TaskId> emptyTasks = Collections.emptySet();\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics, new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode()));\n\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":718,"status":"M"}],"commitId":"fbf6a76fc40fc5fecd679ef6484a0b92a4ab3971","commitMessage":"@@@KAFKA-8356: add static membership info to round robin assignor (#6815)\n\nThe purpose here is to leverage static membership information during round robin consumer assignment.  because persistent member id could help make the assignment remain the same during rebalance.\nThe comparison logic is changed to:\n\n1. If member A and member B both have group.instance.id.  then compare their group.instance.id\n2. If member A has group.instance.id.  while member B doesn't.  then A < B\n3. If both member A and B don't have group.instance.id.  compare their member.id\n\nIn round robin assignor.  we use ephemeral member.id to sort the members in order for assignment. This semantic is not stable and could trigger unnecessary shuffle of tasks. By leveraging group.instance.id the static member assignment shall be persist when satisfying following conditions:\n\n1. number of members remain the same across generation\n2. static members' identities persist across generation\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-06-28 12:12:39","modifiedFileCount":"7","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-07-26 04:02:09","codes":[{"authorDate":"2019-07-26 04:02:09","commitOrder":7,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new ConsumerPartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","date":"2019-07-26 04:02:09","endLine":718,"groupId":"16569","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/6deaf39040c5ff7905d75ba7b380750097e053.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":692,"status":"M"},{"authorDate":"2019-07-26 04:02:09","commitOrder":7,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new ConsumerPartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","date":"2019-07-26 04:02:09","endLine":752,"groupId":"11384","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/6deaf39040c5ff7905d75ba7b380750097e053.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new PartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, subscriptions);\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":721,"status":"M"}],"commitId":"69d86a197f86ad4c6f1636b5ab4678907e30a4c0","commitMessage":"@@@KAFKA-8179: add public ConsumerPartitionAssignor interface (#7108)\n\nMain changes of this PR:\n\n* Deprecate old consumer.internal.PartitionAssignor and add public consumer.ConsumerPartitionAssignor with all OOTB assignors migrated to new interface\n* Refactor assignor's assignment/subscription related classes for easier to evolve API\n* Removed version number from classes as it is only needed for serialization/deserialization\n* Other previously-discussed cleanup included in this PR:\n\n* Remove Assignment.error added in pt 1\n* Remove ConsumerCoordinator#adjustAssignment added in pt 2\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Jason Gustafson <jason@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-07-26 04:02:09","modifiedFileCount":"19","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2019-09-09 08:06:06","codes":[{"authorDate":"2019-09-09 08:06:06","commitOrder":8,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new ConsumerPartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","date":"2019-09-09 08:06:06","endLine":735,"groupId":"16569","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/28/86f51fb5d6caa831288f9290a2250e7fff53f9.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new ConsumerPartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":708,"status":"M"},{"authorDate":"2019-09-09 08:06:06","commitOrder":8,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new ConsumerPartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","date":"2019-09-09 08:06:06","endLine":770,"groupId":"11384","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/28/86f51fb5d6caa831288f9290a2250e7fff53f9.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        mockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new ConsumerPartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":738,"status":"M"}],"commitId":"0f177ea6b826cd96f7a4a687da3691fb786a0a89","commitMessage":"@@@MINOR: Clean up partition assignment logic (#7249)\n\nThese are just some \"tidying up\" changes I made when I was preparing to start working on KIP-441.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2019-09-09 08:06:06","modifiedFileCount":"12","status":"M","submitter":"John Roesler"},{"authorTime":"2019-10-08 00:27:09","codes":[{"authorDate":"2019-10-08 00:27:09","commitOrder":9,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new ConsumerPartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","date":"2019-10-08 00:27:09","endLine":969,"groupId":"7165","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9f/f6e33b07d9e6b5bd60b8c6d76dd75793021d34.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new ConsumerPartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":942,"status":"M"},{"authorDate":"2019-10-08 00:27:09","commitOrder":9,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new ConsumerPartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","date":"2019-10-08 00:27:09","endLine":1004,"groupId":"7166","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9f/f6e33b07d9e6b5bd60b8c6d76dd75793021d34.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0, task1, task2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new ConsumerPartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":972,"status":"M"}],"commitId":"d88f1048da6bdc5670102bbbde7bd92fa7af4ccb","commitMessage":"@@@KAFKA-8179: Part 7.  cooperative rebalancing in Streams (#7386)\n\nKey improvements with this PR:\n\n* tasks will remain available for IQ during a rebalance (but not during restore)\n* continue restoring and processing standby tasks during a rebalance\n* continue processing active tasks during rebalance until the RecordQueue is empty*\n* only revoked tasks must suspended/closed\n* StreamsPartitionAssignor tries to return tasks to their previous consumers within a client\n* but do not try to commit.  for now (pending KAFKA-7312)\n\n\nReviewers: John Roesler <john@confluent.io>.  Boyang Chen <boyang@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-10-08 00:27:09","modifiedFileCount":"22","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2019-11-02 01:03:55","codes":[{"authorDate":"2019-11-02 01:03:55","commitOrder":10,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","date":"2019-11-02 01:03:55","endLine":1003,"groupId":"7165","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/aa/79bc3bf4ed34e9865c4a938a518ad466ec3d9b.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new ConsumerPartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":975,"status":"M"},{"authorDate":"2019-11-02 01:03:55","commitOrder":10,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager =\n            new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","date":"2019-11-02 01:03:55","endLine":1040,"groupId":"7166","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/aa/79bc3bf4ed34e9865c4a938a518ad466ec3d9b.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                new ConsumerPartitionAssignor.Subscription(topics,\n                        new SubscriptionInfo(uuid1, emptyTasks, emptyTasks, userEndPoint).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1006,"status":"M"}],"commitId":"4a5155c934b9d2045e1f7af09a0298bc4b413027","commitMessage":"@@@KAFKA-8868: Generate SubscriptionInfo protocol message (#7248)\n\nRather than maintain hand coded protocol serialization code.  Streams could use the same code-generation framework as Clients/Core.\n\nThere isn't a perfect match.  since the code generation framework includes an assumption that you're generating \"protocol messages\".  rather than just arbitrary blobs.  but I think it's close enough to justify using it.  and improving it over time.\n\nUsing the code generation allows us to drop a lot of detail-oriented.  brittle.  and hard-to-maintain serialization logic in favor of a schema spec.\n\nReviewers: Colin P. McCabe <cmccabe@apache.org>.  Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-11-02 01:03:55","modifiedFileCount":"7","status":"M","submitter":"John Roesler"},{"authorTime":"2019-11-07 03:01:27","codes":[{"authorDate":"2019-11-07 03:01:27","commitOrder":11,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(APPLICATION_ID);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","date":"2019-11-07 03:01:26","endLine":1016,"groupId":"20781","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8f/313d5bece9f8e9157fd628eb7aed76ff4e4bab.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", applicationId + \"-topicX\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(applicationId + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":988,"status":"M"},{"authorDate":"2019-11-07 03:01:27","commitOrder":11,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager =\n            new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","date":"2019-11-07 03:01:26","endLine":1053,"groupId":"7166","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8f/313d5bece9f8e9157fd628eb7aed76ff4e4bab.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = Utils.mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n\n        configurePartitionAssignor(Collections.emptyMap());\n        final MockInternalTopicManager internalTopicManager =\n            new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1019,"status":"M"}],"commitId":"731018222c19a260f2c576b27946bf0a8eb2167e","commitMessage":"@@@[MINOR] Clean up PartitionAssignor for KIP-441 (#7649)\n\nOn-the-side cleanups extracted from the PR for KAFKA-9103.  so that the actual PR can be as small as possible.\nReviewers: Christopher Pettitt <cpettitt@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-11-07 03:01:26","modifiedFileCount":"8","status":"M","submitter":"John Roesler"},{"authorTime":"2020-02-05 13:06:39","codes":[{"authorDate":"2020-02-05 13:06:39","commitOrder":12,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(APPLICATION_ID);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","date":"2020-02-05 13:06:39","endLine":1065,"groupId":"12477","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/fe00869c2a5ac009869a3224d0ba456fd9b106.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(APPLICATION_ID);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1036,"status":"M"},{"authorDate":"2020-02-05 13:06:39","commitOrder":12,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager =\n            new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","date":"2020-02-05 13:06:39","endLine":1103,"groupId":"7166","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/fe00869c2a5ac009869a3224d0ba456fd9b106.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager =\n            new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1068,"status":"M"}],"commitId":"4090f9a2b0a95e4da127e4786007542276d97520","commitMessage":"@@@KAFKA-9113: Clean up task management and state management (#7997)\n\nThis PR is collaborated by Guozhang Wang and John Roesler. It is a significant tech debt cleanup on task management and state management.  and is broken down by several sub-tasks listed below:\n\nExtract embedded clients (producer and consumer) into RecordCollector from StreamTask.\nguozhangwang#2\nguozhangwang#5\n\nConsolidate the standby updating and active restoring logic into ChangelogReader and extract out of StreamThread.\nguozhangwang#3\nguozhangwang#4\n\nIntroduce Task state life cycle (created.  restoring.  running.  suspended.  closing).  and refactor the task operations based on the current state.\nguozhangwang#6\nguozhangwang#7\n\nConsolidate AssignedTasks into TaskManager and simplify the logic of changelog management and task management (since they are already moved in step 2) and 3)).\nguozhangwang#8\nguozhangwang#9\n\nAlso simplified the StreamThread logic a bit as the embedded clients / changelog restoration logic has been moved into step 1) and 2).\nguozhangwang#10\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-02-05 13:06:39","modifiedFileCount":"76","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-02-26 07:28:01","codes":[{"authorDate":"2020-02-05 13:06:39","commitOrder":13,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(APPLICATION_ID);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","date":"2020-02-05 13:06:39","endLine":1065,"groupId":"12477","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/fe00869c2a5ac009869a3224d0ba456fd9b106.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(APPLICATION_ID);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1036,"status":"N"},{"authorDate":"2020-02-26 07:28:01","commitOrder":13,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager =\n            new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","date":"2020-02-26 07:28:01","endLine":1180,"groupId":"1230","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f0/0f93332e2a6b810d83f4d01f92392e89735594.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        final String applicationId = \"test\";\n        builder.setApplicationId(applicationId);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", \"test-topicX\", \"test-topicZ\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager =\n            new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(\"test-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1147,"status":"M"}],"commitId":"a28447a06582bf8e6de427f047f3d3ba4e2219a1","commitMessage":"@@@MINOR: don't assign standby tasks with no logged state (#8147)\n\nRight now the task assignor just blindly assigns N standby tasks per active task (where N = num.standbys) and attempts to distribute them evenly across all instances/threads. But only standby tasks that are stateful.  and whose stores are changelog-enabled.  will ever actually be created.\n\nThis can result in a less-balanced assignment.  and should be cleaned up in particular before implementing KIP-441 to remove the noise of ghost standbys.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-02-26 07:28:01","modifiedFileCount":"16","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-03-06 23:19:04","codes":[{"authorDate":"2020-03-06 23:19:04","commitOrder":14,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(APPLICATION_ID);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","date":"2020-03-06 23:19:04","endLine":1139,"groupId":"12477","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3d/ba29a62286047914eb771f687b3ec5cc0bd36c.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(APPLICATION_ID);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1110,"status":"M"},{"authorDate":"2020-03-06 23:19:04","commitOrder":14,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager =\n            new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","date":"2020-03-06 23:19:04","endLine":1175,"groupId":"1230","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3d/ba29a62286047914eb771f687b3ec5cc0bd36c.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager =\n            new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new ConsumerPartitionAssignor.Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1142,"status":"M"}],"commitId":"674360f5b3a7e5e05b626fd55c277f7c03f27b9e","commitMessage":"@@@KAFKA-6145: Encode task positions in SubscriptionInfo (#8121)\n\n* Replace Prev/Standby task lists with a representation of the current poasition\n  of all tasks.  where each task is encoded as the sum of the positions of all the\n  changelogs in that task.\n* Only the protocol change is implemented.  not actual positions.  and the\n  assignor is updated to translate the new protocol back to lists of Prev/Standby\n  tasks so that the current assignment protocol still functions without modification.\n\nImplements: KIP-441\n\nReviewers: John Roesler <vvcephei@apache.org>.  Bruno Cadonna <bruno@confluent.io>","date":"2020-03-06 23:19:04","modifiedFileCount":"12","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-03-18 13:14:00","codes":[{"authorDate":"2020-03-18 13:14:00","commitOrder":15,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        configureDefault();\n\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","date":"2020-03-18 13:14:00","endLine":1051,"groupId":"4801","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/062f68002ac0156eb4068b9882430c17b927ab.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.setApplicationId(APPLICATION_ID);\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1026,"status":"M"},{"authorDate":"2020-03-18 13:14:00","commitOrder":15,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        configureDefault();\n\n        final MockInternalTopicManager internalTopicManager =\n            new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","date":"2020-03-18 13:14:00","endLine":1083,"groupId":"4201","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/062f68002ac0156eb4068b9882430c17b927ab.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final UUID uuid1 = UUID.randomUUID();\n        createMockTaskManager(emptyTasks, emptyTasks, uuid1, builder);\n        EasyMock.replay(taskManager);\n\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(emptyMap());\n        final MockInternalTopicManager internalTopicManager =\n            new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              getInfo(uuid1, emptyTasks, emptyTasks).encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1054,"status":"M"}],"commitId":"d38e97e319b1ca90ce951b8a153fa51953bba43e","commitMessage":"@@@MINOR: clean up required setup for StreamsPartitionAssignorTest (#8306)\n\nNo logical or behavioral changes.  just a bit of cleanup in this class before we have to write and fix a lot of these tests for KIP-441:\n\n* Moved creation of streamsMetadata mock to setUp (in exactly one test it will be overwritten with a strict mock)\n* Tried to clean up the use of helper methods for configuring the assignor.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-03-18 13:14:00","modifiedFileCount":"2","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-03-22 02:40:34","codes":[{"authorDate":"2020-03-22 02:40:34","commitOrder":16,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","date":"2020-03-22 02:40:34","endLine":1098,"groupId":"4801","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/8e13f70b47672686e0be80e043dc33be95b392.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        configureDefault();\n\n        final MockInternalTopicManager internalTopicManager = new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1076,"status":"M"},{"authorDate":"2020-03-22 02:40:34","commitOrder":16,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","date":"2020-03-22 02:40:34","endLine":1126,"groupId":"771","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/8e13f70b47672686e0be80e043dc33be95b392.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        configureDefault();\n\n        final MockInternalTopicManager internalTopicManager =\n            new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer);\n        partitionAssignor.setInternalTopicManager(internalTopicManager);\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1101,"status":"M"}],"commitId":"6cf27c9c771900baf43cc47f9b010dbf7a86fa22","commitMessage":"@@@KAFKA-6145: Pt 2.5 Compute overall task lag per client (#8252)\n\nOnce we have encoded the offset sums per task for each client.  we can compute the overall lag during assign by fetching the end offsets for all changelog and subtracting.\n\nIf the listOffsets request fails.  we simply return a \"completely sticky\" assignment.  ie all active tasks are given to previous owners regardless of balance.\n\nBuilds (but does not yet use) the statefulTasksToRankedCandidates map with the ranking:\nRank -1: active running task\nRank 0: standby or restoring task whose overall lag is within acceptableRecoveryLag\nRank 1: tasks whose lag is unknown (eg during version probing)\nRank 1+: all other tasks are ranked according to their actual total lag\n\nImplements: KIP-441\nReviewers: Bruno Cadonna <bruno@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-03-22 02:40:34","modifiedFileCount":"12","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-04-04 02:53:51","codes":[{"authorDate":"2020-04-04 02:53:51","commitOrder":17,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","date":"2020-04-04 02:53:51","endLine":1109,"groupId":"4801","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a4/a93a4f243a7b7c33226b6fff0a3685fa4cafff.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1087,"status":"M"},{"authorDate":"2020-04-04 02:53:51","commitOrder":17,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","date":"2020-04-04 02:53:51","endLine":1137,"groupId":"771","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a4/a93a4f243a7b7c33226b6fff0a3685fa4cafff.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(task0_0, task0_1, task0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1112,"status":"M"}],"commitId":"6e0d553350cef876f4fd2de0e3b8e6e40ce6be44","commitMessage":"@@@MINOR: clean up Streams assignment classes and tests (#8406)\n\nFirst set of cleanup pushed to followup PR after KIP-441 Pt. 5. Main changes are:\n\n1. Moved `RankedClient` and the static `buildClientRankingsByTask` to a new file\n2. Moved `Movement` and the static `getMovements` to a new file (also renamed to `TaskMovement`)\n3. Consolidated the many common variables throughout the assignment tests to the new `AssignmentTestUtils` \n4. New utility to generate comparable/predictable UUIDs for tests.  and removed the generic from `TaskAssignor` and all related classes\n\nReviewers: John Roesler <vvcephei@apache.org>.  Andrew Choi <a24choi@edu.uwaterloo.ca>","date":"2020-04-04 02:53:51","modifiedFileCount":"16","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-04-10 07:52:41","codes":[{"authorDate":"2020-04-10 07:52:41","commitOrder":18,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.addInternalTopic(\"topicX\", InternalTopicProperties.empty());\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","date":"2020-04-10 07:52:41","endLine":1113,"groupId":"4801","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/39/7ba51960c79358a64c1ceb9b14575868590ae6.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1091,"status":"M"},{"authorDate":"2020-04-10 07:52:41","commitOrder":18,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\", InternalTopicProperties.empty());\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\", InternalTopicProperties.empty());\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","date":"2020-04-10 07:52:41","endLine":1141,"groupId":"21584","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/39/7ba51960c79358a64c1ceb9b14575868590ae6.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\");\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1116,"status":"M"}],"commitId":"e131a9963484e46f45a7302267507ed54dab6871","commitMessage":"@@@KAFKA-8611: Add KStream#repartition operation (#7170)\n\nImplements KIP-221.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <john@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2020-04-10 07:52:41","modifiedFileCount":"23","status":"M","submitter":"Levani Kokhreidze"},{"authorTime":"2020-08-07 02:28:07","codes":[{"authorDate":"2020-08-07 02:28:07","commitOrder":19,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.addInternalTopic(\"topicX\", InternalTopicProperties.empty());\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier<>(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier<>(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","date":"2020-08-07 02:28:07","endLine":1112,"groupId":"9418","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/a865bdca5247690999077274c34f0fe34dba3b.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.addInternalTopic(\"topicX\", InternalTopicProperties.empty());\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1090,"status":"M"},{"authorDate":"2020-08-07 02:28:07","commitOrder":19,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\", InternalTopicProperties.empty());\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier<>(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\", InternalTopicProperties.empty());\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier<>(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","date":"2020-08-07 02:28:07","endLine":1140,"groupId":"18058","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/a865bdca5247690999077274c34f0fe34dba3b.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\", InternalTopicProperties.empty());\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\", InternalTopicProperties.empty());\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1115,"status":"M"}],"commitId":"990301323cc5a774e17b0a5d373aff8439cda489","commitMessage":"@@@KAFKA-9274: Remove `retries` from InternalTopicManager (#9060)\n\n - part of KIP-572\n - replace `retries` in InternalTopicManager with infinite retires plus a new timeout.  based on consumer config MAX_POLL_INTERVAL_MS\n\nReviewers: David Jacot <djacot@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-08-07 02:28:07","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-09-10 01:37:21","codes":[{"authorDate":"2020-09-10 01:37:21","commitOrder":20,"curCode":"    public void testAssignWithInternalTopics() {\n        builder.addInternalTopic(\"topicX\", InternalTopicProperties.empty());\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockApiProcessorSupplier<>(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockApiProcessorSupplier<>(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","date":"2020-09-10 01:37:21","endLine":1112,"groupId":"102499","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithInternalTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/eb563d9120f1bfd01ba273531233c0a330923c.src","preCode":"    public void testAssignWithInternalTopics() {\n        builder.addInternalTopic(\"topicX\", InternalTopicProperties.empty());\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier<>(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier<>(), \"source2\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\");\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(1, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicX\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1090,"status":"M"},{"authorDate":"2020-09-10 01:37:21","commitOrder":20,"curCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\", InternalTopicProperties.empty());\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockApiProcessorSupplier<>(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\", InternalTopicProperties.empty());\n        builder.addProcessor(\"processor2\", new MockApiProcessorSupplier<>(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","date":"2020-09-10 01:37:21","endLine":1140,"groupId":"102499","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/eb563d9120f1bfd01ba273531233c0a330923c.src","preCode":"    public void testAssignWithInternalTopicThatsSourceIsAnotherInternalTopic() {\n        builder.addInternalTopic(\"topicX\", InternalTopicProperties.empty());\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier<>(), \"source1\");\n        builder.addSink(\"sink1\", \"topicX\", null, null, null, \"processor1\");\n        builder.addSource(null, \"source2\", null, null, null, \"topicX\");\n        builder.addInternalTopic(\"topicZ\", InternalTopicProperties.empty());\n        builder.addProcessor(\"processor2\", new MockProcessorSupplier<>(), \"source2\");\n        builder.addSink(\"sink2\", \"topicZ\", null, null, null, \"processor2\");\n        builder.addSource(null, \"source3\", null, null, null, \"topicZ\");\n        final List<String> topics = asList(\"topic1\", APPLICATION_ID + \"-topicX\", APPLICATION_ID + \"-topicZ\");\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2);\n\n        final MockInternalTopicManager internalTopicManager = configureDefault();\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              topics,\n                              defaultSubscriptionInfo.encode())\n        );\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        \r\n        assertEquals(2, internalTopicManager.readyTopics.size());\n        assertEquals(allTasks.size(), (long) internalTopicManager.readyTopics.get(APPLICATION_ID + \"-topicZ\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1115,"status":"M"}],"commitId":"09d1498e3065eccc26a2d396ea13e7c8b553b974","commitMessage":"@@@KAFKA-10436: Implement KIP-478 Topology changes (#9221)\n\nConvert Topology#addProcessor and #addGlobalStore\nAlso.  convert some of the internals in support of addProcessor\n\nReviewers: Bill Bejeck <bbejeck@apache.org>","date":"2020-09-10 01:37:21","modifiedFileCount":"45","status":"M","submitter":"John Roesler"}]
