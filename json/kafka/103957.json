[{"authorTime":"2019-05-18 13:45:46","codes":[{"authorDate":"2019-05-18 13:45:46","commitOrder":1,"curCode":"    public void testPreferredReadReplica() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(TestUtils.metadataUpdateWith(2, singletonMap(topicName, 4)));\n        subscriptions.seek(tp0, 0);\n\n        \r\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, 1));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        Map<TopicPartition, List<ConsumerRecord<byte[], byte[]>>> partitionRecords = fetchedRecords();\n        assertTrue(partitionRecords.containsKey(tp0));\n\n        \r\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, 2));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n        fetchedRecords();\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","date":"2019-05-18 13:45:45","endLine":3311,"groupId":"1266","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreferredReadReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1d/fdf231d764ce16817ec0dd145acac68763a329.src","preCode":"    public void testPreferredReadReplica() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(TestUtils.metadataUpdateWith(2, singletonMap(topicName, 4)));\n        subscriptions.seek(tp0, 0);\n\n        \r\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, 1));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        Map<TopicPartition, List<ConsumerRecord<byte[], byte[]>>> partitionRecords = fetchedRecords();\n        assertTrue(partitionRecords.containsKey(tp0));\n\n        \r\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, 2));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n        fetchedRecords();\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3271,"status":"B"},{"authorDate":"2019-05-18 13:45:46","commitOrder":1,"curCode":"    public void testPreferredReadReplicaOffsetError() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(TestUtils.metadataUpdateWith(2, singletonMap(topicName, 4)));\n        subscriptions.seek(tp0, 0);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, 1));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n        \r\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.OFFSET_OUT_OF_RANGE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, null));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","date":"2019-05-18 13:45:45","endLine":3348,"groupId":"15084","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreferredReadReplicaOffsetError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1d/fdf231d764ce16817ec0dd145acac68763a329.src","preCode":"    public void testPreferredReadReplicaOffsetError() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(TestUtils.metadataUpdateWith(2, singletonMap(topicName, 4)));\n        subscriptions.seek(tp0, 0);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, 1));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n        \r\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.OFFSET_OUT_OF_RANGE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, null));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3314,"status":"B"}],"commitId":"e2847e8603fe19a87ff03584fb38954e4bd3a59e","commitMessage":"@@@KAFKA-8365; Consumer and protocol support for follower fetching (#6731)\n\nThis patch includes API changes for follower fetching per [KIP-392](https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica) as well as the consumer implementation. After this patch.  consumers will continue to fetch only from the leader.  since the broker implementation to select an alternate read replica is not included here.\n\nAdds new `client.rack` consumer configuration property is added which allows the consumer to indicate its rack. This is just an arbitrary string to indicate some relative location.  it doesn't have to actually represent a physical rack. We are keeping the naming consistent with the broker property (`broker.rack`).\n\nFetchRequest now includes `rack_id` which can optionally be specified by the consumer. FetchResponse includes an optional `preferred_read_replica` field for each partition in the response. OffsetForLeaderEpochRequest also adds new `replica_id` field which is similar to the same field in FetchRequest.\n\nWhen the consumer sees a `preferred_read_replica` in a fetch response.  it will use the Node with that ID for the next fetch.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-05-18 13:45:45","modifiedFileCount":"16","status":"B","submitter":"David Arthur"},{"authorTime":"2019-05-22 06:50:21","codes":[{"authorDate":"2019-05-22 06:50:21","commitOrder":2,"curCode":"    public void testPreferredReadReplica() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(TestUtils.metadataUpdateWith(2, singletonMap(topicName, 4)));\n        subscriptions.seek(tp0, 0);\n\n        \r\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(1)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        Map<TopicPartition, List<ConsumerRecord<byte[], byte[]>>> partitionRecords = fetchedRecords();\n        assertTrue(partitionRecords.containsKey(tp0));\n\n        \r\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(2)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n        fetchedRecords();\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","date":"2019-05-22 06:50:21","endLine":3367,"groupId":"1266","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreferredReadReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0e/2662a82fa5a2275ca0b6e0e977d7868dd7beff.src","preCode":"    public void testPreferredReadReplica() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(TestUtils.metadataUpdateWith(2, singletonMap(topicName, 4)));\n        subscriptions.seek(tp0, 0);\n\n        \r\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, 1));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        Map<TopicPartition, List<ConsumerRecord<byte[], byte[]>>> partitionRecords = fetchedRecords();\n        assertTrue(partitionRecords.containsKey(tp0));\n\n        \r\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, 2));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n        fetchedRecords();\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3327,"status":"M"},{"authorDate":"2019-05-22 06:50:21","commitOrder":2,"curCode":"    public void testPreferredReadReplicaOffsetError() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(TestUtils.metadataUpdateWith(2, singletonMap(topicName, 4)));\n        subscriptions.seek(tp0, 0);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(1)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n        \r\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.OFFSET_OUT_OF_RANGE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.empty()));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","date":"2019-05-22 06:50:21","endLine":3404,"groupId":"10951","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreferredReadReplicaOffsetError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0e/2662a82fa5a2275ca0b6e0e977d7868dd7beff.src","preCode":"    public void testPreferredReadReplicaOffsetError() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(TestUtils.metadataUpdateWith(2, singletonMap(topicName, 4)));\n        subscriptions.seek(tp0, 0);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, 1));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n        \r\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.OFFSET_OUT_OF_RANGE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, null));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3370,"status":"M"}],"commitId":"bacb45e044aae61fd373f6535f8073263c972370","commitMessage":"@@@MINOR: Set `replicaId` for OffsetsForLeaderEpoch from followers (#6775)\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-05-22 06:50:21","modifiedFileCount":"6","status":"M","submitter":"David Arthur"},{"authorTime":"2020-06-06 06:53:13","codes":[{"authorDate":"2020-06-06 06:53:13","commitOrder":3,"curCode":"    public void testPreferredReadReplica() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(TestUtils.metadataUpdateWith(2, singletonMap(topicName, 4), tp -> validLeaderEpoch));\n        subscriptions.seek(tp0, 0);\n\n        \r\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(1)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        Map<TopicPartition, List<ConsumerRecord<byte[], byte[]>>> partitionRecords = fetchedRecords();\n        assertTrue(partitionRecords.containsKey(tp0));\n\n        \r\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(2)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n        fetchedRecords();\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","date":"2020-06-06 06:53:13","endLine":4081,"groupId":"1266","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreferredReadReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/10965f47d57c91b2c52b65ce8138993b3e1e94.src","preCode":"    public void testPreferredReadReplica() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(TestUtils.metadataUpdateWith(2, singletonMap(topicName, 4)));\n        subscriptions.seek(tp0, 0);\n\n        \r\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(1)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        Map<TopicPartition, List<ConsumerRecord<byte[], byte[]>>> partitionRecords = fetchedRecords();\n        assertTrue(partitionRecords.containsKey(tp0));\n\n        \r\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(2)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n        fetchedRecords();\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":4041,"status":"M"},{"authorDate":"2020-06-06 06:53:13","commitOrder":3,"curCode":"    public void testPreferredReadReplicaOffsetError() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(TestUtils.metadataUpdateWith(2, singletonMap(topicName, 4), tp -> validLeaderEpoch));\n\n        subscriptions.seek(tp0, 0);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(1)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n        \r\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.OFFSET_OUT_OF_RANGE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.empty()));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","date":"2020-06-06 06:53:13","endLine":4119,"groupId":"10951","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreferredReadReplicaOffsetError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/10965f47d57c91b2c52b65ce8138993b3e1e94.src","preCode":"    public void testPreferredReadReplicaOffsetError() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(TestUtils.metadataUpdateWith(2, singletonMap(topicName, 4)));\n        subscriptions.seek(tp0, 0);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(1)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n        \r\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.OFFSET_OUT_OF_RANGE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.empty()));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":4084,"status":"M"}],"commitId":"910f3179960067135ec8ad4ab83d4582ff3847b5","commitMessage":"@@@KAFKA-9840; Skip End Offset validation when the leader epoch is not reliable (#8486)\n\nThis PR provides two fixes:\n1. Skip offset validation if the current leader epoch cannot be reliably determined.\n2. Raise an out of range error if the leader returns an undefined offset in response to the OffsetsForLeaderEpoch request.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2020-06-06 06:53:13","modifiedFileCount":"14","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-12-10 03:15:58","codes":[{"authorDate":"2020-12-10 03:15:58","commitOrder":4,"curCode":"    public void testPreferredReadReplica() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(RequestTestUtils.metadataUpdateWith(2, singletonMap(topicName, 4), tp -> validLeaderEpoch));\n        subscriptions.seek(tp0, 0);\n\n        \r\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(1)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        Map<TopicPartition, List<ConsumerRecord<byte[], byte[]>>> partitionRecords = fetchedRecords();\n        assertTrue(partitionRecords.containsKey(tp0));\n\n        \r\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(2)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n        fetchedRecords();\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","date":"2020-12-10 03:15:58","endLine":4203,"groupId":"1266","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreferredReadReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/d65791927f683551833942cc928cadaad2f6b7.src","preCode":"    public void testPreferredReadReplica() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(TestUtils.metadataUpdateWith(2, singletonMap(topicName, 4), tp -> validLeaderEpoch));\n        subscriptions.seek(tp0, 0);\n\n        \r\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(1)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        Map<TopicPartition, List<ConsumerRecord<byte[], byte[]>>> partitionRecords = fetchedRecords();\n        assertTrue(partitionRecords.containsKey(tp0));\n\n        \r\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(2)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n        fetchedRecords();\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":4163,"status":"M"},{"authorDate":"2020-12-10 03:15:58","commitOrder":4,"curCode":"    public void testPreferredReadReplicaOffsetError() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(RequestTestUtils.metadataUpdateWith(2, singletonMap(topicName, 4), tp -> validLeaderEpoch));\n\n        subscriptions.seek(tp0, 0);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(1)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n        \r\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.OFFSET_OUT_OF_RANGE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.empty()));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","date":"2020-12-10 03:15:58","endLine":4241,"groupId":"10951","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreferredReadReplicaOffsetError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/d65791927f683551833942cc928cadaad2f6b7.src","preCode":"    public void testPreferredReadReplicaOffsetError() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(TestUtils.metadataUpdateWith(2, singletonMap(topicName, 4), tp -> validLeaderEpoch));\n\n        subscriptions.seek(tp0, 0);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(1)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n        \r\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.OFFSET_OUT_OF_RANGE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.empty()));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":4206,"status":"M"}],"commitId":"1f98112e993bc4ae098936b1b0661fdb2c4b1880","commitMessage":"@@@MINOR: Remove connection id from Send and consolidate request/message utils (#9714)\n\nConnection id is now only present in `NetworkSend`.  which is now\nthe class used by `Selector`/`NetworkClient`/`KafkaChannel` (which\nworks well since `NetworkReceive` is the class used for\nreceived data).\n\nThe previous `NetworkSend` was also responsible for adding a size\nprefix. This logic is already present in `SendBuilder`.  but for the\nminority of cases where `SendBuilder` is not used (including\na number of tests).  we now have `ByteBufferSend.sizePrefixed()`.\n\nWith regards to the request/message utilities:\n* Renamed `toByteBuffer`/`toBytes` in `MessageUtil` to\n`toVersionPrefixedByteBuffer`/`toVersionPrefixedBytes` for clarity.\n* Introduced new `MessageUtil.toByteBuffer` that does not include\nthe version as the prefix.\n* Renamed `serializeBody` in `AbstractRequest/Response` to\n`serialize` for symmetry with `parse`.\n* Introduced `RequestTestUtils` and moved relevant methods from\n`TestUtils`.\n* Moved `serializeWithHeader` methods that were only used in\ntests to `RequestTestUtils`.\n* Deleted `MessageTestUtil`.\n\nFinally.  a couple of changes to simplify coding patterns:\n* Added `flip()` and `buffer()` to `ByteBufferAccessor`.\n* Added `MessageSizeAccumulator.sizeExcludingZeroCopy`.\n* Used lambdas instead of `TestCondition`.\n* Used `Arrays.copyOf` instead of `System.arraycopy` in `MessageUtil`.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2020-12-10 03:15:58","modifiedFileCount":"80","status":"M","submitter":"Ismael Juma"},{"authorTime":"2021-07-08 07:02:37","codes":[{"authorDate":"2021-07-08 07:02:37","commitOrder":5,"curCode":"    public void testPreferredReadReplica() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(RequestTestUtils.metadataUpdateWithIds(2, singletonMap(topicName, 4), tp -> validLeaderEpoch, topicIds));\n        subscriptions.seek(tp0, 0);\n\n        \r\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(1)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        Map<TopicPartition, List<ConsumerRecord<byte[], byte[]>>> partitionRecords = fetchedRecords();\n        assertTrue(partitionRecords.containsKey(tp0));\n\n        \r\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(2)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n        fetchedRecords();\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","date":"2021-07-08 07:02:37","endLine":4354,"groupId":"103957","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPreferredReadReplica","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/a8d4d0de616ad523f86ea20b0b0f6e6fc16cd5.src","preCode":"    public void testPreferredReadReplica() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(RequestTestUtils.metadataUpdateWith(2, singletonMap(topicName, 4), tp -> validLeaderEpoch));\n        subscriptions.seek(tp0, 0);\n\n        \r\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(1)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        Map<TopicPartition, List<ConsumerRecord<byte[], byte[]>>> partitionRecords = fetchedRecords();\n        assertTrue(partitionRecords.containsKey(tp0));\n\n        \r\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        \r\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(2)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n        fetchedRecords();\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":4314,"status":"M"},{"authorDate":"2021-07-08 07:02:37","commitOrder":5,"curCode":"    public void testPreferredReadReplicaOffsetError() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(RequestTestUtils.metadataUpdateWithIds(2, singletonMap(topicName, 4), tp -> validLeaderEpoch, topicIds));\n\n        subscriptions.seek(tp0, 0);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(1)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n        \r\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.OFFSET_OUT_OF_RANGE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.empty()));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","date":"2021-07-08 07:02:37","endLine":4392,"groupId":"103957","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testPreferredReadReplicaOffsetError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/a8d4d0de616ad523f86ea20b0b0f6e6fc16cd5.src","preCode":"    public void testPreferredReadReplicaOffsetError() {\n        buildFetcher(new MetricConfig(), OffsetResetStrategy.EARLIEST, new BytesDeserializer(), new BytesDeserializer(),\n                Integer.MAX_VALUE, IsolationLevel.READ_COMMITTED, Duration.ofMinutes(5).toMillis());\n\n        subscriptions.assignFromUser(singleton(tp0));\n        client.updateMetadata(RequestTestUtils.metadataUpdateWith(2, singletonMap(topicName, 4), tp -> validLeaderEpoch));\n\n        subscriptions.seek(tp0, 0);\n\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.NONE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.of(1)));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        Node selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), 1);\n\n        \r\n        assertEquals(1, fetcher.sendFetches());\n        assertFalse(fetcher.hasCompletedFetches());\n\n        client.prepareResponse(fullFetchResponse(tp0, this.records, Errors.OFFSET_OUT_OF_RANGE, 100L,\n                FetchResponse.INVALID_LAST_STABLE_OFFSET, 0, Optional.empty()));\n        consumerClient.poll(time.timer(0));\n        assertTrue(fetcher.hasCompletedFetches());\n\n        fetchedRecords();\n\n        selected = fetcher.selectReadReplica(tp0, Node.noNode(), time.milliseconds());\n        assertEquals(selected.id(), -1);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":4357,"status":"M"}],"commitId":"2b8aff58b575c199ee8372e5689420c9d77357a5","commitMessage":"@@@KAFKA-10580: Add topic ID support to Fetch request (#9944)\n\nUpdated FetchRequest and FetchResponse to use topic IDs rather than topic names.\nSome of the complicated code is found in FetchSession and FetchSessionHandler.\nWe need to be able to store topic IDs and maintain a cache on the broker for IDs that may not have been resolved. On incremental fetch requests.  we will try to resolve them or remove them if in toForget.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>.  Chia-Ping Tsai <chia7712@gmail.com>.  Jun Rao <junrao@gmail.com>","date":"2021-07-08 07:02:37","modifiedFileCount":"23","status":"M","submitter":"Justine Olshan"}]
