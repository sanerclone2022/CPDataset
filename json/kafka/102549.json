[{"authorTime":"2020-04-29 11:34:17","codes":[{"authorDate":"2020-04-29 11:34:17","commitOrder":1,"curCode":"    public void shouldNotCreateStreamThreadsForGlobalOnlyTopology() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n\n        assertThat(streams.threads.length, equalTo(0));\n    }\n","date":"2020-04-29 11:34:17","endLine":909,"groupId":"3065","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCreateStreamThreadsForGlobalOnlyTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/05/271e82b07a92f59ad9236f746742ef6a209876.src","preCode":"    public void shouldNotCreateStreamThreadsForGlobalOnlyTopology() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n\n        assertThat(streams.threads.length, equalTo(0));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":903,"status":"B"},{"authorDate":"2020-04-29 11:34:17","commitOrder":1,"curCode":"    public void shouldTransitToRunningWithGlobalOnlyTopology() throws InterruptedException {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n\n        assertThat(streams.threads.length, equalTo(0));\n        assertEquals(streams.state(), KafkaStreams.State.CREATED);\n\n        streams.start();\n        TestUtils.waitForCondition(\n            () -> streams.state() == KafkaStreams.State.RUNNING,\n            \"Streams never started, state is \" + streams.state());\n\n        streams.close();\n\n        TestUtils.waitForCondition(\n            () -> streams.state() == KafkaStreams.State.NOT_RUNNING,\n            \"Streams never stopped.\");\n    }\n","date":"2020-04-29 11:34:17","endLine":930,"groupId":"3065","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldTransitToRunningWithGlobalOnlyTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/05/271e82b07a92f59ad9236f746742ef6a209876.src","preCode":"    public void shouldTransitToRunningWithGlobalOnlyTopology() throws InterruptedException {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n\n        assertThat(streams.threads.length, equalTo(0));\n        assertEquals(streams.state(), KafkaStreams.State.CREATED);\n\n        streams.start();\n        TestUtils.waitForCondition(\n            () -> streams.state() == KafkaStreams.State.RUNNING,\n            \"Streams never started, state is \" + streams.state());\n\n        streams.close();\n\n        TestUtils.waitForCondition(\n            () -> streams.state() == KafkaStreams.State.NOT_RUNNING,\n            \"Streams never stopped.\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":912,"status":"B"}],"commitId":"b5de44937768304ba17351e7e742f4258533a150","commitMessage":"@@@KAFKA-9127: don't create StreamThreads for global-only topology (#8540)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-04-29 11:34:17","modifiedFileCount":"4","status":"B","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-11-06 05:02:00","codes":[{"authorDate":"2020-11-06 05:02:00","commitOrder":2,"curCode":"    public void shouldNotCreateStreamThreadsForGlobalOnlyTopology() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n\n        assertThat(streams.threads.size(), equalTo(0));\n    }\n","date":"2020-11-06 05:02:00","endLine":916,"groupId":"8465","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCreateStreamThreadsForGlobalOnlyTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/6aefe8335de7bd1741854e7528f707bfa60032.src","preCode":"    public void shouldNotCreateStreamThreadsForGlobalOnlyTopology() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n\n        assertThat(streams.threads.length, equalTo(0));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":910,"status":"M"},{"authorDate":"2020-11-06 05:02:00","commitOrder":2,"curCode":"    public void shouldTransitToRunningWithGlobalOnlyTopology() throws InterruptedException {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n\n        assertThat(streams.threads.size(), equalTo(0));\n        assertEquals(streams.state(), KafkaStreams.State.CREATED);\n\n        streams.start();\n        TestUtils.waitForCondition(\n            () -> streams.state() == KafkaStreams.State.RUNNING,\n            \"Streams never started, state is \" + streams.state());\n\n        streams.close();\n\n        TestUtils.waitForCondition(\n            () -> streams.state() == KafkaStreams.State.NOT_RUNNING,\n            \"Streams never stopped.\");\n    }\n","date":"2020-11-06 05:02:00","endLine":937,"groupId":"3065","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldTransitToRunningWithGlobalOnlyTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/6aefe8335de7bd1741854e7528f707bfa60032.src","preCode":"    public void shouldTransitToRunningWithGlobalOnlyTopology() throws InterruptedException {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n\n        assertThat(streams.threads.length, equalTo(0));\n        assertEquals(streams.state(), KafkaStreams.State.CREATED);\n\n        streams.start();\n        TestUtils.waitForCondition(\n            () -> streams.state() == KafkaStreams.State.RUNNING,\n            \"Streams never started, state is \" + streams.state());\n\n        streams.close();\n\n        TestUtils.waitForCondition(\n            () -> streams.state() == KafkaStreams.State.NOT_RUNNING,\n            \"Streams never stopped.\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":919,"status":"M"}],"commitId":"c3d0140a5577f85ee64f739f5f8832f54612de22","commitMessage":"@@@KAFKA-10500: Makes the Stream thread list resizable (#9543)\n\nChange the StreamThreads to be held in a List so that we\ncan dynamically change the number of threads easily.\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-11-06 05:02:00","modifiedFileCount":"3","status":"M","submitter":"Walker Carlson"},{"authorTime":"2021-05-14 07:16:35","codes":[{"authorDate":"2020-11-06 05:02:00","commitOrder":3,"curCode":"    public void shouldNotCreateStreamThreadsForGlobalOnlyTopology() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n\n        assertThat(streams.threads.size(), equalTo(0));\n    }\n","date":"2020-11-06 05:02:00","endLine":916,"groupId":"8465","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCreateStreamThreadsForGlobalOnlyTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/6aefe8335de7bd1741854e7528f707bfa60032.src","preCode":"    public void shouldNotCreateStreamThreadsForGlobalOnlyTopology() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n\n        assertThat(streams.threads.size(), equalTo(0));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":910,"status":"N"},{"authorDate":"2021-05-14 07:16:35","commitOrder":3,"curCode":"    public void shouldTransitToRunningWithGlobalOnlyTopology() throws InterruptedException {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n\n        assertThat(streams.threads.size(), equalTo(0));\n        assertEquals(streams.state(), KafkaStreams.State.CREATED);\n\n        streams.start();\n        waitForCondition(\n            () -> streams.state() == KafkaStreams.State.RUNNING,\n            \"Streams never started, state is \" + streams.state());\n\n        streams.close();\n\n        waitForCondition(\n            () -> streams.state() == KafkaStreams.State.NOT_RUNNING,\n            \"Streams never stopped.\");\n    }\n","date":"2021-05-14 07:16:35","endLine":1059,"groupId":"8465","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldTransitToRunningWithGlobalOnlyTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/2a145d33ba2bc358d9d5060dc2b68c48020cea.src","preCode":"    public void shouldTransitToRunningWithGlobalOnlyTopology() throws InterruptedException {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n\n        assertThat(streams.threads.size(), equalTo(0));\n        assertEquals(streams.state(), KafkaStreams.State.CREATED);\n\n        streams.start();\n        TestUtils.waitForCondition(\n            () -> streams.state() == KafkaStreams.State.RUNNING,\n            \"Streams never started, state is \" + streams.state());\n\n        streams.close();\n\n        TestUtils.waitForCondition(\n            () -> streams.state() == KafkaStreams.State.NOT_RUNNING,\n            \"Streams never stopped.\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1041,"status":"M"}],"commitId":"4153e754f1a4ebbd9a3d10be8bf75a7057c82f1d","commitMessage":"@@@MINOR: prevent cleanup() from being called while Streams is still shutting down (#10666)\n\nCurrently KafkaStreams#cleanUp only throw an IllegalStateException if the state is RUNNING or REBALANCING.  however the application could be in the process of shutting down in which case StreamThreads may still be running. We should also throw if the state is PENDING_ERROR or PENDING_SHUTDOWN\n\nReviewers: Walker Carlson <wcarlson@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2021-05-14 07:16:35","modifiedFileCount":"4","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2021-06-03 12:13:09","codes":[{"authorDate":"2021-06-03 12:13:09","commitOrder":4,"curCode":"    public void shouldNotCreateStreamThreadsForGlobalOnlyTopology() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        try (final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time)) {\n\n            assertThat(streams.threads.size(), equalTo(0));\n        }\n    }\n","date":"2021-06-03 12:13:09","endLine":1055,"groupId":"102549","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCreateStreamThreadsForGlobalOnlyTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/24/90eecfef68006868a9a194f64839c744093ad4.src","preCode":"    public void shouldNotCreateStreamThreadsForGlobalOnlyTopology() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n\n        assertThat(streams.threads.size(), equalTo(0));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1048,"status":"M"},{"authorDate":"2021-06-03 12:13:09","commitOrder":4,"curCode":"    public void shouldTransitToRunningWithGlobalOnlyTopology() throws InterruptedException {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        try (final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time)) {\n\n            assertThat(streams.threads.size(), equalTo(0));\n            assertEquals(streams.state(), KafkaStreams.State.CREATED);\n\n            streams.start();\n            waitForCondition(\n                () -> streams.state() == KafkaStreams.State.RUNNING,\n                \"Streams never started, state is \" + streams.state());\n\n            streams.close();\n\n            waitForCondition(\n                () -> streams.state() == KafkaStreams.State.NOT_RUNNING,\n                \"Streams never stopped.\");\n        }\n    }\n","date":"2021-06-03 12:13:09","endLine":1077,"groupId":"102549","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldTransitToRunningWithGlobalOnlyTopology","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/24/90eecfef68006868a9a194f64839c744093ad4.src","preCode":"    public void shouldTransitToRunningWithGlobalOnlyTopology() throws InterruptedException {\n        final StreamsBuilder builder = new StreamsBuilder();\n        builder.globalTable(\"anyTopic\");\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props, supplier, time);\n\n        assertThat(streams.threads.size(), equalTo(0));\n        assertEquals(streams.state(), KafkaStreams.State.CREATED);\n\n        streams.start();\n        waitForCondition(\n            () -> streams.state() == KafkaStreams.State.RUNNING,\n            \"Streams never started, state is \" + streams.state());\n\n        streams.close();\n\n        waitForCondition(\n            () -> streams.state() == KafkaStreams.State.NOT_RUNNING,\n            \"Streams never stopped.\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1058,"status":"M"}],"commitId":"c2c08b41f2bfd5fd3c2bb14417c27c6b7de92710","commitMessage":"@@@MINOR: Apply try-with-resource to KafkaStreamsTest (#10668)\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  Matthias J. Sax <matthias@confluent.io>","date":"2021-06-03 12:13:09","modifiedFileCount":"1","status":"M","submitter":"Vito Jeng"}]
