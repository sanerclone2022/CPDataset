[{"authorTime":"2019-03-27 05:23:01","codes":[{"authorDate":"2019-03-27 05:23:01","commitOrder":1,"curCode":"    public void shouldCompareSegmentIdOnly() {\n        final TimestampedSegment segment1 = new TimestampedSegment(\"a\", \"C\", 50L);\n        final TimestampedSegment segment2 = new TimestampedSegment(\"b\", \"B\", 100L);\n        final TimestampedSegment segment3 = new TimestampedSegment(\"c\", \"A\", 0L);\n\n        assertThat(segment1.compareTo(segment1), equalTo(0));\n        assertThat(segment1.compareTo(segment2), equalTo(-1));\n        assertThat(segment2.compareTo(segment1), equalTo(1));\n        assertThat(segment1.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment1), equalTo(-1));\n        assertThat(segment2.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment2), equalTo(-1));\n    }\n","date":"2019-03-27 05:23:01","endLine":98,"groupId":"22452","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompareSegmentIdOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/10/ed56efbbbc676da7d9337014f00b8b97e21c1a.src","preCode":"    public void shouldCompareSegmentIdOnly() {\n        final TimestampedSegment segment1 = new TimestampedSegment(\"a\", \"C\", 50L);\n        final TimestampedSegment segment2 = new TimestampedSegment(\"b\", \"B\", 100L);\n        final TimestampedSegment segment3 = new TimestampedSegment(\"c\", \"A\", 0L);\n\n        assertThat(segment1.compareTo(segment1), equalTo(0));\n        assertThat(segment1.compareTo(segment2), equalTo(-1));\n        assertThat(segment2.compareTo(segment1), equalTo(1));\n        assertThat(segment1.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment1), equalTo(-1));\n        assertThat(segment2.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment2), equalTo(-1));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/TimestampedSegmentTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"},{"authorDate":"2019-03-27 05:23:01","commitOrder":1,"curCode":"    public void shouldCompareSegmentIdOnly() {\n        final KeyValueSegment segment1 = new KeyValueSegment(\"a\", \"C\", 50L);\n        final KeyValueSegment segment2 = new KeyValueSegment(\"b\", \"B\", 100L);\n        final KeyValueSegment segment3 = new KeyValueSegment(\"c\", \"A\", 0L);\n\n        assertThat(segment1.compareTo(segment1), equalTo(0));\n        assertThat(segment1.compareTo(segment2), equalTo(-1));\n        assertThat(segment2.compareTo(segment1), equalTo(1));\n        assertThat(segment1.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment1), equalTo(-1));\n        assertThat(segment2.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment2), equalTo(-1));\n    }\n","date":"2019-03-27 05:23:01","endLine":98,"groupId":"22452","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompareSegmentIdOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/654b93970c5df352100a2c6918016e5a52633b.src","preCode":"    public void shouldCompareSegmentIdOnly() {\n        final KeyValueSegment segment1 = new KeyValueSegment(\"a\", \"C\", 50L);\n        final KeyValueSegment segment2 = new KeyValueSegment(\"b\", \"B\", 100L);\n        final KeyValueSegment segment3 = new KeyValueSegment(\"c\", \"A\", 0L);\n\n        assertThat(segment1.compareTo(segment1), equalTo(0));\n        assertThat(segment1.compareTo(segment2), equalTo(-1));\n        assertThat(segment2.compareTo(segment1), equalTo(1));\n        assertThat(segment1.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment1), equalTo(-1));\n        assertThat(segment2.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment2), equalTo(-1));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueSegmentTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"dc0601a1c604bea3f426ed25b6c20176ff444079","commitMessage":"@@@KAFKA-3522: Add RocksDBTimestampedSegmentedBytesStore (#6186)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-03-27 05:23:01","modifiedFileCount":"10","status":"B","submitter":"Matthias J. Sax"},{"authorTime":"2019-08-27 07:28:22","codes":[{"authorDate":"2019-08-27 07:28:22","commitOrder":2,"curCode":"    public void shouldCompareSegmentIdOnly() {\n        final TimestampedSegment segment1 = new TimestampedSegment(\"a\", \"C\", 50L, metricsRecorder);\n        final TimestampedSegment segment2 = new TimestampedSegment(\"b\", \"B\", 100L, metricsRecorder);\n        final TimestampedSegment segment3 = new TimestampedSegment(\"c\", \"A\", 0L, metricsRecorder);\n\n        assertThat(segment1.compareTo(segment1), equalTo(0));\n        assertThat(segment1.compareTo(segment2), equalTo(-1));\n        assertThat(segment2.compareTo(segment1), equalTo(1));\n        assertThat(segment1.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment1), equalTo(-1));\n        assertThat(segment2.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment2), equalTo(-1));\n    }\n","date":"2019-08-27 07:28:22","endLine":107,"groupId":"22452","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompareSegmentIdOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7b/d3e7ebe46eb616856e09c7cef30ab49924902d.src","preCode":"    public void shouldCompareSegmentIdOnly() {\n        final TimestampedSegment segment1 = new TimestampedSegment(\"a\", \"C\", 50L);\n        final TimestampedSegment segment2 = new TimestampedSegment(\"b\", \"B\", 100L);\n        final TimestampedSegment segment3 = new TimestampedSegment(\"c\", \"A\", 0L);\n\n        assertThat(segment1.compareTo(segment1), equalTo(0));\n        assertThat(segment1.compareTo(segment2), equalTo(-1));\n        assertThat(segment2.compareTo(segment1), equalTo(1));\n        assertThat(segment1.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment1), equalTo(-1));\n        assertThat(segment2.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment2), equalTo(-1));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/TimestampedSegmentTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2019-08-27 07:28:22","commitOrder":2,"curCode":"    public void shouldCompareSegmentIdOnly() {\n        final KeyValueSegment segment1 = new KeyValueSegment(\"a\", \"C\", 50L, metricsRecorder);\n        final KeyValueSegment segment2 = new KeyValueSegment(\"b\", \"B\", 100L, metricsRecorder);\n        final KeyValueSegment segment3 = new KeyValueSegment(\"c\", \"A\", 0L, metricsRecorder);\n\n        assertThat(segment1.compareTo(segment1), equalTo(0));\n        assertThat(segment1.compareTo(segment2), equalTo(-1));\n        assertThat(segment2.compareTo(segment1), equalTo(1));\n        assertThat(segment1.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment1), equalTo(-1));\n        assertThat(segment2.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment2), equalTo(-1));\n    }\n","date":"2019-08-27 07:28:22","endLine":105,"groupId":"22452","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompareSegmentIdOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/248220c9870bd62b74241bd830f103aea3254c.src","preCode":"    public void shouldCompareSegmentIdOnly() {\n        final KeyValueSegment segment1 = new KeyValueSegment(\"a\", \"C\", 50L);\n        final KeyValueSegment segment2 = new KeyValueSegment(\"b\", \"B\", 100L);\n        final KeyValueSegment segment3 = new KeyValueSegment(\"c\", \"A\", 0L);\n\n        assertThat(segment1.compareTo(segment1), equalTo(0));\n        assertThat(segment1.compareTo(segment2), equalTo(-1));\n        assertThat(segment2.compareTo(segment1), equalTo(1));\n        assertThat(segment1.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment1), equalTo(-1));\n        assertThat(segment2.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment2), equalTo(-1));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueSegmentTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"24547b810ce9aae4389dad7f41cc47caba73046c","commitMessage":"@@@KAFKA-8579: Expose RocksDB metrics (#7209)\n\nRocksDB metrics are added to the Kafka metrics. For each segmented state store only\none set of metrics is exposed rather than one set of metrics for each segment.\n\nThe metrics are not computed yet.\n\nReviewers: John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-08-27 07:28:22","modifiedFileCount":"25","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-05-07 06:29:26","codes":[{"authorDate":"2021-05-07 06:29:26","commitOrder":3,"curCode":"    public void shouldCompareSegmentIdOnly() {\n        final TimestampedSegment segment1 = new TimestampedSegment(\"a\", \"C\", 50L, metricsRecorder);\n        final TimestampedSegment segment2 = new TimestampedSegment(\"b\", \"B\", 100L, metricsRecorder);\n        final TimestampedSegment segment3 = new TimestampedSegment(\"c\", \"A\", 0L, metricsRecorder);\n\n        assertThat(segment1.compareTo(segment1), equalTo(0));\n        assertThat(segment1.compareTo(segment2), equalTo(-1));\n        assertThat(segment2.compareTo(segment1), equalTo(1));\n        assertThat(segment1.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment1), equalTo(-1));\n        assertThat(segment2.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment2), equalTo(-1));\n\n        segment1.close();\n        segment2.close();\n        segment3.close();\n    }\n","date":"2021-05-07 06:29:26","endLine":136,"groupId":"10796","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldCompareSegmentIdOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/339b73a4df419e60ab0b9cc040bd567a5b3eba.src","preCode":"    public void shouldCompareSegmentIdOnly() {\n        final TimestampedSegment segment1 = new TimestampedSegment(\"a\", \"C\", 50L, metricsRecorder);\n        final TimestampedSegment segment2 = new TimestampedSegment(\"b\", \"B\", 100L, metricsRecorder);\n        final TimestampedSegment segment3 = new TimestampedSegment(\"c\", \"A\", 0L, metricsRecorder);\n\n        assertThat(segment1.compareTo(segment1), equalTo(0));\n        assertThat(segment1.compareTo(segment2), equalTo(-1));\n        assertThat(segment2.compareTo(segment1), equalTo(1));\n        assertThat(segment1.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment1), equalTo(-1));\n        assertThat(segment2.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment2), equalTo(-1));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/TimestampedSegmentTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2021-05-07 06:29:26","commitOrder":3,"curCode":"    public void shouldCompareSegmentIdOnly() {\n        final KeyValueSegment segment1 = new KeyValueSegment(\"a\", \"C\", 50L, metricsRecorder);\n        final KeyValueSegment segment2 = new KeyValueSegment(\"b\", \"B\", 100L, metricsRecorder);\n        final KeyValueSegment segment3 = new KeyValueSegment(\"c\", \"A\", 0L, metricsRecorder);\n\n        assertThat(segment1.compareTo(segment1), equalTo(0));\n        assertThat(segment1.compareTo(segment2), equalTo(-1));\n        assertThat(segment2.compareTo(segment1), equalTo(1));\n        assertThat(segment1.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment1), equalTo(-1));\n        assertThat(segment2.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment2), equalTo(-1));\n\n        segment1.close();\n        segment2.close();\n        segment3.close();\n    }\n","date":"2021-05-07 06:29:26","endLine":130,"groupId":"10796","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldCompareSegmentIdOnly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/85/9aea1168a965271765b106b4a81e4f99ec5e59.src","preCode":"    public void shouldCompareSegmentIdOnly() {\n        final KeyValueSegment segment1 = new KeyValueSegment(\"a\", \"C\", 50L, metricsRecorder);\n        final KeyValueSegment segment2 = new KeyValueSegment(\"b\", \"B\", 100L, metricsRecorder);\n        final KeyValueSegment segment3 = new KeyValueSegment(\"c\", \"A\", 0L, metricsRecorder);\n\n        assertThat(segment1.compareTo(segment1), equalTo(0));\n        assertThat(segment1.compareTo(segment2), equalTo(-1));\n        assertThat(segment2.compareTo(segment1), equalTo(1));\n        assertThat(segment1.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment1), equalTo(-1));\n        assertThat(segment2.compareTo(segment3), equalTo(1));\n        assertThat(segment3.compareTo(segment2), equalTo(-1));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueSegmentTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"}],"commitId":"90fc875e24121fd0a39143983ce9eb8a93849d7e","commitMessage":"@@@KAFKA-8897: Upgrade RocksDB to 6.19.3 (#10568)\n\nThis PR upgrades RocksDB to 6.19.3. After the upgrade the Gradle build exited with code 134 due to SIGABRT signals (\"Pure virtual function called!\") coming from the C++ part of RocksDB. This error was caused by RocksDB state stores not properly closed in Streams' code. This PR adds the missing closings and updates the RocksDB option adapter.\n\nReviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-05-07 06:29:26","modifiedFileCount":"22","status":"M","submitter":"Bruno Cadonna"}]
