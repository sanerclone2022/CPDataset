[{"authorTime":"2018-08-16 05:30:24","codes":[{"authorDate":"2018-08-16 05:30:24","commitOrder":1,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        assertEquals(TimeWindows.of(3), TimeWindows.of(3));\n        assertEquals(TimeWindows.of(3).hashCode(), TimeWindows.of(3).hashCode());\n\n        assertEquals(TimeWindows.of(3).advanceBy(1), TimeWindows.of(3).advanceBy(1));\n        assertEquals(TimeWindows.of(3).advanceBy(1).hashCode(), TimeWindows.of(3).advanceBy(1).hashCode());\n\n        assertEquals(TimeWindows.of(3).grace(1), TimeWindows.of(3).grace(1));\n        assertEquals(TimeWindows.of(3).grace(1).hashCode(), TimeWindows.of(3).grace(1).hashCode());\n\n        assertEquals(TimeWindows.of(3).until(4), TimeWindows.of(3).until(4));\n        assertEquals(TimeWindows.of(3).until(4).hashCode(), TimeWindows.of(3).until(4).hashCode());\n\n        assertEquals(\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4),\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4)\n        );\n        assertEquals(\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4).hashCode(),\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4).hashCode()\n        );\n    }\n","date":"2018-08-16 05:30:24","endLine":173,"groupId":"6801","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d4/26b2811b7f9b9660e002e9c5a12a18299aa6b5.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        assertEquals(TimeWindows.of(3), TimeWindows.of(3));\n        assertEquals(TimeWindows.of(3).hashCode(), TimeWindows.of(3).hashCode());\n\n        assertEquals(TimeWindows.of(3).advanceBy(1), TimeWindows.of(3).advanceBy(1));\n        assertEquals(TimeWindows.of(3).advanceBy(1).hashCode(), TimeWindows.of(3).advanceBy(1).hashCode());\n\n        assertEquals(TimeWindows.of(3).grace(1), TimeWindows.of(3).grace(1));\n        assertEquals(TimeWindows.of(3).grace(1).hashCode(), TimeWindows.of(3).grace(1).hashCode());\n\n        assertEquals(TimeWindows.of(3).until(4), TimeWindows.of(3).until(4));\n        assertEquals(TimeWindows.of(3).until(4).hashCode(), TimeWindows.of(3).until(4).hashCode());\n\n        assertEquals(\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4),\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4)\n        );\n        assertEquals(\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4).hashCode(),\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4).hashCode()\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/TimeWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"B"},{"authorDate":"2018-08-16 05:30:24","commitOrder":1,"curCode":"    public void equalsAndHashcodeShouldBeValidForNegativeCases() {\n        assertNotEquals(TimeWindows.of(9), TimeWindows.of(3));\n        assertNotEquals(TimeWindows.of(9).hashCode(), TimeWindows.of(3).hashCode());\n\n        assertNotEquals(TimeWindows.of(3).advanceBy(2), TimeWindows.of(3).advanceBy(1));\n        assertNotEquals(TimeWindows.of(3).advanceBy(2).hashCode(), TimeWindows.of(3).advanceBy(1).hashCode());\n\n        assertNotEquals(TimeWindows.of(3).grace(2), TimeWindows.of(3).grace(1));\n        assertNotEquals(TimeWindows.of(3).grace(2).hashCode(), TimeWindows.of(3).grace(1).hashCode());\n\n        assertNotEquals(TimeWindows.of(3).until(9), TimeWindows.of(3).until(4));\n        assertNotEquals(TimeWindows.of(3).until(9).hashCode(), TimeWindows.of(3).until(4).hashCode());\n\n\n        assertNotEquals(\n            TimeWindows.of(4).advanceBy(2).grace(2).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n        assertNotEquals(\n            TimeWindows.of(4).advanceBy(2).grace(2).until(4).hashCode(),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode()\n        );\n\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(1).grace(2).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(1).grace(2).until(4).hashCode(),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode()\n        );\n\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(1).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(1).until(4).hashCode(),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode()\n        );\n\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(2).until(9),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(2).until(9).hashCode(),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode()\n        );\n    }\n","date":"2018-08-16 05:30:24","endLine":225,"groupId":"6801","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForNegativeCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d4/26b2811b7f9b9660e002e9c5a12a18299aa6b5.src","preCode":"    public void equalsAndHashcodeShouldBeValidForNegativeCases() {\n        assertNotEquals(TimeWindows.of(9), TimeWindows.of(3));\n        assertNotEquals(TimeWindows.of(9).hashCode(), TimeWindows.of(3).hashCode());\n\n        assertNotEquals(TimeWindows.of(3).advanceBy(2), TimeWindows.of(3).advanceBy(1));\n        assertNotEquals(TimeWindows.of(3).advanceBy(2).hashCode(), TimeWindows.of(3).advanceBy(1).hashCode());\n\n        assertNotEquals(TimeWindows.of(3).grace(2), TimeWindows.of(3).grace(1));\n        assertNotEquals(TimeWindows.of(3).grace(2).hashCode(), TimeWindows.of(3).grace(1).hashCode());\n\n        assertNotEquals(TimeWindows.of(3).until(9), TimeWindows.of(3).until(4));\n        assertNotEquals(TimeWindows.of(3).until(9).hashCode(), TimeWindows.of(3).until(4).hashCode());\n\n\n        assertNotEquals(\n            TimeWindows.of(4).advanceBy(2).grace(2).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n        assertNotEquals(\n            TimeWindows.of(4).advanceBy(2).grace(2).until(4).hashCode(),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode()\n        );\n\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(1).grace(2).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(1).grace(2).until(4).hashCode(),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode()\n        );\n\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(1).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(1).until(4).hashCode(),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode()\n        );\n\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(2).until(9),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(2).until(9).hashCode(),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode()\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/TimeWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"B"}],"commitId":"a4a65abcd3e5a01e0910afb10a214f4bb47577a3","commitMessage":"@@@MINOR: (re)add equals/hashCode to *Windows (#5510)\n\nAndy Coates <big-andy-coates@users.noreply.github.com>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-08-16 05:30:24","modifiedFileCount":"9","status":"B","submitter":"John Roesler"},{"authorTime":"2018-08-24 08:53:10","codes":[{"authorDate":"2018-08-24 08:53:10","commitOrder":2,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(TimeWindows.of(3), TimeWindows.of(3));\n\n        verifyEquality(TimeWindows.of(3).advanceBy(1), TimeWindows.of(3).advanceBy(1));\n\n        verifyEquality(TimeWindows.of(3).grace(1), TimeWindows.of(3).grace(1));\n\n        verifyEquality(TimeWindows.of(3).until(4), TimeWindows.of(3).until(4));\n\n        verifyEquality(\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4),\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4)\n        );\n    }\n","date":"2018-08-24 08:53:10","endLine":167,"groupId":"17472","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/90/10bb2c2775437624b95ed9a5484f68011f9db8.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        assertEquals(TimeWindows.of(3), TimeWindows.of(3));\n        assertEquals(TimeWindows.of(3).hashCode(), TimeWindows.of(3).hashCode());\n\n        assertEquals(TimeWindows.of(3).advanceBy(1), TimeWindows.of(3).advanceBy(1));\n        assertEquals(TimeWindows.of(3).advanceBy(1).hashCode(), TimeWindows.of(3).advanceBy(1).hashCode());\n\n        assertEquals(TimeWindows.of(3).grace(1), TimeWindows.of(3).grace(1));\n        assertEquals(TimeWindows.of(3).grace(1).hashCode(), TimeWindows.of(3).grace(1).hashCode());\n\n        assertEquals(TimeWindows.of(3).until(4), TimeWindows.of(3).until(4));\n        assertEquals(TimeWindows.of(3).until(4).hashCode(), TimeWindows.of(3).until(4).hashCode());\n\n        assertEquals(\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4),\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4)\n        );\n        assertEquals(\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4).hashCode(),\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4).hashCode()\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/TimeWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2018-08-24 08:53:10","commitOrder":2,"curCode":"    public void equalsAndHashcodeShouldBeValidForNegativeCases() {\n        verifyInEquality(TimeWindows.of(9), TimeWindows.of(3));\n\n        verifyInEquality(TimeWindows.of(3).advanceBy(2), TimeWindows.of(3).advanceBy(1));\n\n        verifyInEquality(TimeWindows.of(3).grace(2), TimeWindows.of(3).grace(1));\n\n        verifyInEquality(TimeWindows.of(3).until(9), TimeWindows.of(3).until(4));\n\n\n        verifyInEquality(\n            TimeWindows.of(4).advanceBy(2).grace(2).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n\n        verifyInEquality(\n            TimeWindows.of(3).advanceBy(1).grace(2).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(1).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(2).until(9),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n    }\n","date":"2018-08-24 08:53:10","endLine":199,"groupId":"17472","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForNegativeCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/90/10bb2c2775437624b95ed9a5484f68011f9db8.src","preCode":"    public void equalsAndHashcodeShouldBeValidForNegativeCases() {\n        assertNotEquals(TimeWindows.of(9), TimeWindows.of(3));\n        assertNotEquals(TimeWindows.of(9).hashCode(), TimeWindows.of(3).hashCode());\n\n        assertNotEquals(TimeWindows.of(3).advanceBy(2), TimeWindows.of(3).advanceBy(1));\n        assertNotEquals(TimeWindows.of(3).advanceBy(2).hashCode(), TimeWindows.of(3).advanceBy(1).hashCode());\n\n        assertNotEquals(TimeWindows.of(3).grace(2), TimeWindows.of(3).grace(1));\n        assertNotEquals(TimeWindows.of(3).grace(2).hashCode(), TimeWindows.of(3).grace(1).hashCode());\n\n        assertNotEquals(TimeWindows.of(3).until(9), TimeWindows.of(3).until(4));\n        assertNotEquals(TimeWindows.of(3).until(9).hashCode(), TimeWindows.of(3).until(4).hashCode());\n\n\n        assertNotEquals(\n            TimeWindows.of(4).advanceBy(2).grace(2).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n        assertNotEquals(\n            TimeWindows.of(4).advanceBy(2).grace(2).until(4).hashCode(),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode()\n        );\n\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(1).grace(2).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(1).grace(2).until(4).hashCode(),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode()\n        );\n\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(1).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(1).until(4).hashCode(),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode()\n        );\n\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(2).until(9),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(2).until(9).hashCode(),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4).hashCode()\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/TimeWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"1dd85a328f437643a5c135f242c644f47c3767e4","commitMessage":"@@@MINOR: restructure Windows to favor immutable implementation (#5536)\n\nUpdate to KIP-328.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Ted Yu <yuzhihong@gmail.com>.  Kamal Chandraprakash <kamal.chandraprakash@gmail.com>","date":"2018-08-24 08:53:10","modifiedFileCount":"11","status":"M","submitter":"John Roesler"},{"authorTime":"2018-10-05 04:51:39","codes":[{"authorDate":"2018-10-05 04:51:39","commitOrder":3,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(TimeWindows.of(ofMillis(3)), TimeWindows.of(ofMillis(3)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)), TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(1)), TimeWindows.of(ofMillis(3)).grace(ofMillis(1)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).until(4), TimeWindows.of(ofMillis(3)).until(4));\n\n        verifyEquality(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(1)).until(4),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(1)).until(4)\n        );\n    }\n","date":"2018-10-05 04:51:39","endLine":168,"groupId":"13451","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/7a99284979de662152d57014ccf7a7217fc90f.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(TimeWindows.of(3), TimeWindows.of(3));\n\n        verifyEquality(TimeWindows.of(3).advanceBy(1), TimeWindows.of(3).advanceBy(1));\n\n        verifyEquality(TimeWindows.of(3).grace(1), TimeWindows.of(3).grace(1));\n\n        verifyEquality(TimeWindows.of(3).until(4), TimeWindows.of(3).until(4));\n\n        verifyEquality(\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4),\n            TimeWindows.of(3).advanceBy(1).grace(1).until(4)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/TimeWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2018-10-05 04:51:39","commitOrder":3,"curCode":"    public void equalsAndHashcodeShouldBeValidForNegativeCases() {\n        verifyInEquality(TimeWindows.of(ofMillis(9)), TimeWindows.of(ofMillis(3)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)), TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(2)), TimeWindows.of(ofMillis(3)).grace(ofMillis(1)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).until(9), TimeWindows.of(ofMillis(3)).until(4));\n\n\n        verifyInEquality(\n            TimeWindows.of(ofMillis(4)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4)\n        );\n\n        verifyInEquality(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(2)).until(4),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4)\n        );\n\n        assertNotEquals(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(1)).until(4),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4)\n        );\n\n        assertNotEquals(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(9),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4)\n        );\n    }\n","date":"2018-10-05 04:51:39","endLine":200,"groupId":"13451","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForNegativeCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/7a99284979de662152d57014ccf7a7217fc90f.src","preCode":"    public void equalsAndHashcodeShouldBeValidForNegativeCases() {\n        verifyInEquality(TimeWindows.of(9), TimeWindows.of(3));\n\n        verifyInEquality(TimeWindows.of(3).advanceBy(2), TimeWindows.of(3).advanceBy(1));\n\n        verifyInEquality(TimeWindows.of(3).grace(2), TimeWindows.of(3).grace(1));\n\n        verifyInEquality(TimeWindows.of(3).until(9), TimeWindows.of(3).until(4));\n\n\n        verifyInEquality(\n            TimeWindows.of(4).advanceBy(2).grace(2).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n\n        verifyInEquality(\n            TimeWindows.of(3).advanceBy(1).grace(2).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(1).until(4),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n\n        assertNotEquals(\n            TimeWindows.of(3).advanceBy(2).grace(2).until(9),\n            TimeWindows.of(3).advanceBy(2).grace(2).until(4)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/TimeWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"}],"commitId":"ca641b3e2e48c14ff308181c775775408f5f35f7","commitMessage":"@@@KAFKA-7277: Migrate Streams API to Duration instead of longMs times (#5682)\n\nReviewers: Johne Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-10-05 04:51:39","modifiedFileCount":"97","status":"M","submitter":"Nikolay"},{"authorTime":"2018-11-15 09:29:19","codes":[{"authorDate":"2018-11-15 09:29:19","commitOrder":4,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(TimeWindows.of(ofMillis(3)), TimeWindows.of(ofMillis(3)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)), TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(1)), TimeWindows.of(ofMillis(3)).grace(ofMillis(1)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(4)), TimeWindows.of(ofMillis(3)).grace(ofMillis(4)));\n\n        verifyEquality(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(1)).grace(ofMillis(4)),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(1)).grace(ofMillis(4))\n        );\n    }\n","date":"2018-11-15 09:29:19","endLine":169,"groupId":"13451","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dc/b691b1cd7adea28ef13c8357685fd00ff3fd0a.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(TimeWindows.of(ofMillis(3)), TimeWindows.of(ofMillis(3)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)), TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(1)), TimeWindows.of(ofMillis(3)).grace(ofMillis(1)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).until(4), TimeWindows.of(ofMillis(3)).until(4));\n\n        verifyEquality(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(1)).until(4),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(1)).until(4)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/TimeWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2018-11-15 09:29:19","commitOrder":4,"curCode":"    public void equalsAndHashcodeShouldBeValidForNegativeCases() {\n        verifyInEquality(TimeWindows.of(ofMillis(9)), TimeWindows.of(ofMillis(3)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)), TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(2)), TimeWindows.of(ofMillis(3)).grace(ofMillis(1)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(9)), TimeWindows.of(ofMillis(3)).grace(ofMillis(4)));\n\n\n        verifyInEquality(\n            TimeWindows.of(ofMillis(4)).advanceBy(ofMillis(2)).grace(ofMillis(2)),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2))\n        );\n\n        verifyInEquality(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(2)),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2))\n        );\n\n        assertNotEquals(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(1)),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2))\n        );\n    }\n","date":"2018-11-15 09:29:19","endLine":196,"groupId":"13451","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForNegativeCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dc/b691b1cd7adea28ef13c8357685fd00ff3fd0a.src","preCode":"    public void equalsAndHashcodeShouldBeValidForNegativeCases() {\n        verifyInEquality(TimeWindows.of(ofMillis(9)), TimeWindows.of(ofMillis(3)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)), TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(2)), TimeWindows.of(ofMillis(3)).grace(ofMillis(1)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).until(9), TimeWindows.of(ofMillis(3)).until(4));\n\n\n        verifyInEquality(\n            TimeWindows.of(ofMillis(4)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4)\n        );\n\n        verifyInEquality(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(2)).until(4),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4)\n        );\n\n        assertNotEquals(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(1)).until(4),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4)\n        );\n\n        assertNotEquals(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(9),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2)).until(4)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/TimeWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"14d3ead19d250f2f3117af473ff6244c663ef8ca","commitMessage":"@@@MINOR: Remove deprecated callers (#5911)\n\nCallers of 1) Windows#until.  2) Windows#of.  3) Serialized are replaced when possible with the new APIs.\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Bill Bejeck <bill@confluent.io>","date":"2018-11-15 09:29:19","modifiedFileCount":"28","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2021-07-01 08:09:19","codes":[{"authorDate":"2021-07-01 08:09:19","commitOrder":5,"curCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(TimeWindows.of(ofMillis(3)), TimeWindows.of(ofMillis(3)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)), TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(1)), TimeWindows.of(ofMillis(3)).grace(ofMillis(1)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(4)), TimeWindows.of(ofMillis(3)).grace(ofMillis(4)));\n\n        verifyEquality(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(1)).grace(ofMillis(4)),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(1)).grace(ofMillis(4))\n        );\n\n        verifyEquality(TimeWindows.ofSizeWithNoGrace(ofMillis(3)), TimeWindows.ofSizeWithNoGrace(ofMillis(3)));\n\n        verifyEquality(TimeWindows.ofSizeAndGrace(ofMillis(3), ofMillis(33)),\n                TimeWindows.ofSizeAndGrace(ofMillis(3), ofMillis(33))\n        );\n    }\n","date":"2021-07-01 08:09:19","endLine":153,"groupId":"101366","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForPositiveCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/25/a607d0a9657c7f22f280de7498cb8071571009.src","preCode":"    public void equalsAndHashcodeShouldBeValidForPositiveCases() {\n        verifyEquality(TimeWindows.of(ofMillis(3)), TimeWindows.of(ofMillis(3)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)), TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(1)), TimeWindows.of(ofMillis(3)).grace(ofMillis(1)));\n\n        verifyEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(4)), TimeWindows.of(ofMillis(3)).grace(ofMillis(4)));\n\n        verifyEquality(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(1)).grace(ofMillis(4)),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(1)).grace(ofMillis(4))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/TimeWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"},{"authorDate":"2021-07-01 08:09:19","commitOrder":5,"curCode":"    public void equalsAndHashcodeShouldBeValidForNegativeCases() {\n\n        verifyInEquality(\n                TimeWindows.ofSizeWithNoGrace(ofMillis(9)),\n                TimeWindows.ofSizeWithNoGrace(ofMillis(3))\n        );\n\n        verifyInEquality(\n                TimeWindows.ofSizeAndGrace(ofMillis(9), ofMillis(9)),\n                TimeWindows.ofSizeAndGrace(ofMillis(3), ofMillis(9))\n        );\n\n        verifyInEquality(TimeWindows.of(ofMillis(9)), TimeWindows.of(ofMillis(3)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)), TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(2)), TimeWindows.of(ofMillis(3)).grace(ofMillis(1)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(9)), TimeWindows.of(ofMillis(3)).grace(ofMillis(4)));\n\n\n        verifyInEquality(\n            TimeWindows.of(ofMillis(4)).advanceBy(ofMillis(2)).grace(ofMillis(2)),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2))\n        );\n\n        verifyInEquality(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(2)),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2))\n        );\n\n        assertNotEquals(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(1)),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2))\n        );\n    }\n","date":"2021-07-01 08:09:19","endLine":191,"groupId":"101366","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"equalsAndHashcodeShouldBeValidForNegativeCases","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/25/a607d0a9657c7f22f280de7498cb8071571009.src","preCode":"    public void equalsAndHashcodeShouldBeValidForNegativeCases() {\n        verifyInEquality(TimeWindows.of(ofMillis(9)), TimeWindows.of(ofMillis(3)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)), TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(2)), TimeWindows.of(ofMillis(3)).grace(ofMillis(1)));\n\n        verifyInEquality(TimeWindows.of(ofMillis(3)).grace(ofMillis(9)), TimeWindows.of(ofMillis(3)).grace(ofMillis(4)));\n\n\n        verifyInEquality(\n            TimeWindows.of(ofMillis(4)).advanceBy(ofMillis(2)).grace(ofMillis(2)),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2))\n        );\n\n        verifyInEquality(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(1)).grace(ofMillis(2)),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2))\n        );\n\n        assertNotEquals(\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(1)),\n            TimeWindows.of(ofMillis(3)).advanceBy(ofMillis(2)).grace(ofMillis(2))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/TimeWindowsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"b3905d9f71d48a60f2a9ee38014582d7ec7bc3c2","commitMessage":"@@@KAFKA-8613: New APIs for Controlling Grace Period for Windowed Operations (#10926)\n\nImplements KIP-633.\n\nGrace-period is an important parameter and its best to make it the user's responsibility to set it expliclity. Thus.  we move off to provide a default and make it a mandatory parameter when creating a window.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Luke Chen <showuon@gmail.com>.  Matthias J. Sax <matthias@confluent.io>","date":"2021-07-01 08:09:19","modifiedFileCount":"45","status":"M","submitter":"Israel Ekpo"}]
