[{"authorTime":"2020-10-08 21:08:24","codes":[{"authorDate":"2020-10-08 21:08:24","commitOrder":1,"curCode":"    public void shouldFetchAllWithinTimestampRange() {\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (int i = 0; i < array.length; i++) {\n            context.setTime(i);\n            cachingStore.put(bytesKey(array[i]), bytesValue(array[i]));\n        }\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n            cachingStore.fetchAll(ofEpochMilli(0), ofEpochMilli(7));\n        for (int i = 0; i < array.length; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator1 =\n            cachingStore.fetchAll(ofEpochMilli(2), ofEpochMilli(4));\n        for (int i = 2; i <= 4; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator1.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator1.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator2 =\n            cachingStore.fetchAll(ofEpochMilli(5), ofEpochMilli(7));\n        for (int i = 5; i <= 7; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator2.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator2.hasNext());\n    }\n","date":"2020-10-08 21:08:24","endLine":384,"groupId":"9300","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldFetchAllWithinTimestampRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/86/ee164b07ac9b2d7817d24e9bc69314dd4cc1c9.src","preCode":"    public void shouldFetchAllWithinTimestampRange() {\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (int i = 0; i < array.length; i++) {\n            context.setTime(i);\n            cachingStore.put(bytesKey(array[i]), bytesValue(array[i]));\n        }\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n            cachingStore.fetchAll(ofEpochMilli(0), ofEpochMilli(7));\n        for (int i = 0; i < array.length; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator1 =\n            cachingStore.fetchAll(ofEpochMilli(2), ofEpochMilli(4));\n        for (int i = 2; i <= 4; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator1.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator1.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator2 =\n            cachingStore.fetchAll(ofEpochMilli(5), ofEpochMilli(7));\n        for (int i = 5; i <= 7; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator2.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator2.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"B"},{"authorDate":"2020-10-08 21:08:24","commitOrder":1,"curCode":"    public void shouldFetchAllBackwardWithinTimestampRange() {\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (int i = 0; i < array.length; i++) {\n            context.setTime(i);\n            cachingStore.put(bytesKey(array[i]), bytesValue(array[i]));\n        }\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n            cachingStore.backwardFetchAll(ofEpochMilli(0), ofEpochMilli(7));\n        for (int i = array.length - 1; i >= 0; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator1 =\n            cachingStore.backwardFetchAll(ofEpochMilli(2), ofEpochMilli(4));\n        for (int i = 4; i >= 2; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator1.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator1.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator2 =\n            cachingStore.backwardFetchAll(ofEpochMilli(5), ofEpochMilli(7));\n        for (int i = 7; i >= 5; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator2.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator2.hasNext());\n    }\n","date":"2020-10-08 21:08:24","endLine":427,"groupId":"9300","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFetchAllBackwardWithinTimestampRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/86/ee164b07ac9b2d7817d24e9bc69314dd4cc1c9.src","preCode":"    public void shouldFetchAllBackwardWithinTimestampRange() {\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (int i = 0; i < array.length; i++) {\n            context.setTime(i);\n            cachingStore.put(bytesKey(array[i]), bytesValue(array[i]));\n        }\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n            cachingStore.backwardFetchAll(ofEpochMilli(0), ofEpochMilli(7));\n        for (int i = array.length - 1; i >= 0; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator1 =\n            cachingStore.backwardFetchAll(ofEpochMilli(2), ofEpochMilli(4));\n        for (int i = 4; i >= 2; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator1.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator1.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator2 =\n            cachingStore.backwardFetchAll(ofEpochMilli(5), ofEpochMilli(7));\n        for (int i = 7; i >= 5; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator2.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator2.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":388,"status":"B"}],"commitId":"d0e6943bdd048aa6e0a4dbbdad3c8da460db16dc","commitMessage":"@@@KAFKA-9929: Support backward iterator on SessionStore (#9139)\n\nImplements KIP-617 for `SessionStore`\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-10-08 21:08:24","modifiedFileCount":"14","status":"B","submitter":"Jorge Esteban Quilcate Otoya"},{"authorTime":"2021-04-10 02:49:37","codes":[{"authorDate":"2021-04-10 02:49:37","commitOrder":2,"curCode":"    public void shouldFetchAllWithinTimestampRange() {\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (int i = 0; i < array.length; i++) {\n            cachingStore.put(bytesKey(array[i]), bytesValue(array[i]), i);\n        }\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n            cachingStore.fetchAll(ofEpochMilli(0), ofEpochMilli(7));\n        for (int i = 0; i < array.length; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator1 =\n            cachingStore.fetchAll(ofEpochMilli(2), ofEpochMilli(4));\n        for (int i = 2; i <= 4; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator1.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator1.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator2 =\n            cachingStore.fetchAll(ofEpochMilli(5), ofEpochMilli(7));\n        for (int i = 5; i <= 7; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator2.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator2.hasNext());\n    }\n","date":"2021-04-10 02:49:37","endLine":380,"groupId":"9300","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldFetchAllWithinTimestampRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/5101f8158d194f971de8e8e649fb510df2ec15.src","preCode":"    public void shouldFetchAllWithinTimestampRange() {\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (int i = 0; i < array.length; i++) {\n            context.setTime(i);\n            cachingStore.put(bytesKey(array[i]), bytesValue(array[i]));\n        }\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n            cachingStore.fetchAll(ofEpochMilli(0), ofEpochMilli(7));\n        for (int i = 0; i < array.length; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator1 =\n            cachingStore.fetchAll(ofEpochMilli(2), ofEpochMilli(4));\n        for (int i = 2; i <= 4; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator1.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator1.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator2 =\n            cachingStore.fetchAll(ofEpochMilli(5), ofEpochMilli(7));\n        for (int i = 5; i <= 7; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator2.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator2.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2021-04-10 02:49:37","commitOrder":2,"curCode":"    public void shouldFetchAllBackwardWithinTimestampRange() {\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (int i = 0; i < array.length; i++) {\n            cachingStore.put(bytesKey(array[i]), bytesValue(array[i]), i);\n        }\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n            cachingStore.backwardFetchAll(ofEpochMilli(0), ofEpochMilli(7));\n        for (int i = array.length - 1; i >= 0; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator1 =\n            cachingStore.backwardFetchAll(ofEpochMilli(2), ofEpochMilli(4));\n        for (int i = 4; i >= 2; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator1.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator1.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator2 =\n            cachingStore.backwardFetchAll(ofEpochMilli(5), ofEpochMilli(7));\n        for (int i = 7; i >= 5; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator2.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator2.hasNext());\n    }\n","date":"2021-04-10 02:49:37","endLine":422,"groupId":"9300","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFetchAllBackwardWithinTimestampRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/5101f8158d194f971de8e8e649fb510df2ec15.src","preCode":"    public void shouldFetchAllBackwardWithinTimestampRange() {\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (int i = 0; i < array.length; i++) {\n            context.setTime(i);\n            cachingStore.put(bytesKey(array[i]), bytesValue(array[i]));\n        }\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n            cachingStore.backwardFetchAll(ofEpochMilli(0), ofEpochMilli(7));\n        for (int i = array.length - 1; i >= 0; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator1 =\n            cachingStore.backwardFetchAll(ofEpochMilli(2), ofEpochMilli(4));\n        for (int i = 4; i >= 2; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator1.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator1.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator2 =\n            cachingStore.backwardFetchAll(ofEpochMilli(5), ofEpochMilli(7));\n        for (int i = 7; i >= 5; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator2.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator2.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":384,"status":"M"}],"commitId":"db0323e9ba3f767614415d833a2081a33825a284","commitMessage":"@@@KAFKA-12449: Remove deprecated WindowStore#put (#10293)\n\nRemoves `WindowStore#put(K. V)` that was deprecated via KIP-474.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-04-10 02:49:37","modifiedFileCount":"21","status":"M","submitter":"Jorge Esteban Quilcate Otoya"},{"authorTime":"2021-07-27 07:26:02","codes":[{"authorDate":"2021-07-27 07:26:02","commitOrder":3,"curCode":"    public void shouldFetchAllWithinTimestampRange() {\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (int i = 0; i < array.length; i++) {\n            cachingStore.put(bytesKey(array[i]), bytesValue(array[i]), i);\n        }\n\n        try (final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n                 cachingStore.fetchAll(ofEpochMilli(0), ofEpochMilli(7))) {\n            for (int i = 0; i < array.length; i++) {\n                final String str = array[i];\n                verifyWindowedKeyValue(\n                    iterator.next(),\n                    new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                    str);\n            }\n            assertFalse(iterator.hasNext());\n        }\n\n        try (final KeyValueIterator<Windowed<Bytes>, byte[]> iterator1 =\n                 cachingStore.fetchAll(ofEpochMilli(2), ofEpochMilli(4))) {\n            for (int i = 2; i <= 4; i++) {\n                final String str = array[i];\n                verifyWindowedKeyValue(\n                    iterator1.next(),\n                    new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                    str);\n            }\n            assertFalse(iterator1.hasNext());\n        }\n\n        try (final KeyValueIterator<Windowed<Bytes>, byte[]> iterator2 =\n                 cachingStore.fetchAll(ofEpochMilli(5), ofEpochMilli(7))) {\n            for (int i = 5; i <= 7; i++) {\n                final String str = array[i];\n                verifyWindowedKeyValue(\n                    iterator2.next(),\n                    new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                    str);\n            }\n            assertFalse(iterator2.hasNext());\n        }\n    }\n","date":"2021-07-27 07:26:02","endLine":388,"groupId":"101268","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldFetchAllWithinTimestampRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/3d69a6a9f4d4c9cd689931ddd344dd6baa68bc.src","preCode":"    public void shouldFetchAllWithinTimestampRange() {\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (int i = 0; i < array.length; i++) {\n            cachingStore.put(bytesKey(array[i]), bytesValue(array[i]), i);\n        }\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n            cachingStore.fetchAll(ofEpochMilli(0), ofEpochMilli(7));\n        for (int i = 0; i < array.length; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator1 =\n            cachingStore.fetchAll(ofEpochMilli(2), ofEpochMilli(4));\n        for (int i = 2; i <= 4; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator1.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator1.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator2 =\n            cachingStore.fetchAll(ofEpochMilli(5), ofEpochMilli(7));\n        for (int i = 5; i <= 7; i++) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator2.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator2.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"},{"authorDate":"2021-07-27 07:26:02","commitOrder":3,"curCode":"    public void shouldFetchAllBackwardWithinTimestampRange() {\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (int i = 0; i < array.length; i++) {\n            cachingStore.put(bytesKey(array[i]), bytesValue(array[i]), i);\n        }\n\n        try (final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n                 cachingStore.backwardFetchAll(ofEpochMilli(0), ofEpochMilli(7))) {\n            for (int i = array.length - 1; i >= 0; i--) {\n                final String str = array[i];\n                verifyWindowedKeyValue(\n                    iterator.next(),\n                    new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                    str);\n            }\n            assertFalse(iterator.hasNext());\n        }\n\n        try (final KeyValueIterator<Windowed<Bytes>, byte[]> iterator1 =\n                 cachingStore.backwardFetchAll(ofEpochMilli(2), ofEpochMilli(4))) {\n            for (int i = 4; i >= 2; i--) {\n                final String str = array[i];\n                verifyWindowedKeyValue(\n                    iterator1.next(),\n                    new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                    str);\n            }\n            assertFalse(iterator1.hasNext());\n        }\n\n        try (final KeyValueIterator<Windowed<Bytes>, byte[]> iterator2 =\n                 cachingStore.backwardFetchAll(ofEpochMilli(5), ofEpochMilli(7))) {\n            for (int i = 7; i >= 5; i--) {\n                final String str = array[i];\n                verifyWindowedKeyValue(\n                    iterator2.next(),\n                    new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                    str);\n            }\n            assertFalse(iterator2.hasNext());\n        }\n    }\n","date":"2021-07-27 07:26:02","endLine":432,"groupId":"101268","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldFetchAllBackwardWithinTimestampRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/3d69a6a9f4d4c9cd689931ddd344dd6baa68bc.src","preCode":"    public void shouldFetchAllBackwardWithinTimestampRange() {\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (int i = 0; i < array.length; i++) {\n            cachingStore.put(bytesKey(array[i]), bytesValue(array[i]), i);\n        }\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator =\n            cachingStore.backwardFetchAll(ofEpochMilli(0), ofEpochMilli(7));\n        for (int i = array.length - 1; i >= 0; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator1 =\n            cachingStore.backwardFetchAll(ofEpochMilli(2), ofEpochMilli(4));\n        for (int i = 4; i >= 2; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator1.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator1.hasNext());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator2 =\n            cachingStore.backwardFetchAll(ofEpochMilli(5), ofEpochMilli(7));\n        for (int i = 7; i >= 5; i--) {\n            final String str = array[i];\n            verifyWindowedKeyValue(\n                iterator2.next(),\n                new Windowed<>(bytesKey(str), new TimeWindow(i, i + WINDOW_SIZE)),\n                str);\n        }\n        assertFalse(iterator2.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":391,"status":"M"}],"commitId":"818cbfba6ddf8252b7da314bbaac74201951dfb3","commitMessage":"@@@KAFKA-13125: close KeyValueIterator instances in internals tests (part 2) (#11107)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-07-27 07:26:02","modifiedFileCount":"8","status":"M","submitter":"Luke Chen"}]
