[{"authorTime":"2017-05-17 08:23:11","codes":[{"authorDate":"2017-08-02 21:11:23","commitOrder":2,"curCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(null, \"groupId\", \"clientId\");\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","date":"2017-08-02 21:11:23","endLine":324,"groupId":"22674","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/69/a44a693301ea1b71f80e31ae0d558a96289f2c.src","preCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(null, \"groupId\", \"clientId\");\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"B"},{"authorDate":"2017-05-17 08:23:11","commitOrder":2,"curCode":"    public void shouldSetDifferentDefaultsIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(null, \"groupId\", \"clientId\");\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(\"clientId\");\n\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat((Integer) producerConfigs.get(ProducerConfig.RETRIES_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat((Integer) producerConfigs.get(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION), equalTo(1));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","date":"2017-05-17 08:23:11","endLine":369,"groupId":"4312","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetDifferentDefaultsIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2d/d4553ce041c96289adb83b9212328cbf0cdd0e.src","preCode":"    public void shouldSetDifferentDefaultsIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(null, \"groupId\", \"clientId\");\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(\"clientId\");\n\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat((Integer) producerConfigs.get(ProducerConfig.RETRIES_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat((Integer) producerConfigs.get(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION), equalTo(1));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"NB"}],"commitId":"b7684b47b80a2a7d604632bb325fde49e570480f","commitMessage":"@@@KAFKA-5096; Log invalid user configs and use defaults\n\nKafka Streams does not allow users to modify some consumer configurations.\nCurrently.  it does not allow modifying the value of 'enable.auto.commit'.\nIf the user modifies this property.  currently an exception is thrown.\nThe following changes were made in this patch:\n- Defined a new array 'NON_CONFIGURABLE_CONSUMER_CONFIGS' to hold the names\n  of the configuration parameters that is not allowed to be modified\n- Defined a new method 'checkIfUnexpectedUserSpecifiedConsumerConfig' to\n  check if user overwrote the values of any of the non configurable configuration\n  parameters. If so.  then log a warning message and reset the default values\n- Updated the javadoc to include the configuration parameters that cannot be\n  modified by users.\n- Updated the corresponding tests in StreamsConfigTest.java to reflect the changes\n  made in StreamsConfig.java\n\nAuthor: Mariam John <mariamj@us.ibm.com>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Eno Thereska <eno.thereska@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>.  Damian Guy <damian.guy@gmail.com>\n\nCloses #2990 from johnma14/bug/kafka-5096\n","date":"2017-08-02 21:11:23","modifiedFileCount":"2","status":"M","submitter":"Mariam John"},{"authorTime":"2017-11-29 01:37:27","codes":[{"authorDate":"2017-11-29 01:37:27","commitOrder":3,"curCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","date":"2017-11-29 01:37:27","endLine":324,"groupId":"4311","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1a/4cfb1d48156e273c7f4c78bf9235d02aed5c8b.src","preCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(null, \"groupId\", \"clientId\");\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"},{"authorDate":"2017-11-29 01:37:27","commitOrder":3,"curCode":"    public void shouldSetDifferentDefaultsIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(\"clientId\");\n\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat((Integer) producerConfigs.get(ProducerConfig.RETRIES_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat((Integer) producerConfigs.get(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION), equalTo(1));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","date":"2017-11-29 01:37:27","endLine":382,"groupId":"4312","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetDifferentDefaultsIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1a/4cfb1d48156e273c7f4c78bf9235d02aed5c8b.src","preCode":"    public void shouldSetDifferentDefaultsIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(null, \"groupId\", \"clientId\");\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(\"clientId\");\n\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat((Integer) producerConfigs.get(ProducerConfig.RETRIES_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat((Integer) producerConfigs.get(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION), equalTo(1));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"M"}],"commitId":"5df1eee7d689e18ac2f7b74410e7a30159d3afdc","commitMessage":"@@@KAFKA-6170; KIP-220 Part 2: Break dependency of Assignor on StreamThread\n\nThis refactoring is discussed in https://github.com/apache/kafka/pull/3624#discussion_r132614639. More specifically:\n\n1. Moved the access of `StreamThread` in `StreamPartitionAssignor` to `TaskManager`.  removed any fields stored in `StreamThread` such as `processId` and `clientId` that are only to be used in `StreamPartitionAssignor`.  and pass them to `TaskManager` if necessary.\n2. Moved any in-memory states.  `metadataWithInternalTopics`.  `partitionsByHostState`.  `standbyTasks`.  `activeTasks` to `TaskManager` so that `StreamPartitionAssignor` becomes a stateless thin layer that access TaskManager directly.\n3. Remove the reference of `StreamPartitionAssignor` in `StreamThread`.  instead consolidate all related functionalities such as `cachedTasksIds ` in `TaskManager` which could be retrieved by the `StreamThread` and the `StreamPartitionAssignor` directly.\n4. Finally.  removed the two interfaces used for `StreamThread` and `StreamPartitionAssignor`.\n\n5. Some minor fixes on logPrefixes.  etc.\n\nFuture work: when replacing the StreamsKafkaClient.  we would let `StreamPartitionAssignor` to retrieve it from `TaskManager` directly.  and also its closing call do not need to be called (`KafkaStreams` will be responsible for closing it).\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Damian Guy <damian.guy@gmail.com>.  Matthias J. Sax <matthias@confluent.io>\n\nCloses #4224 from guozhangwang/K6170-refactor-assignor\n","date":"2017-11-29 01:37:27","modifiedFileCount":"23","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-04-25 02:13:12","codes":[{"authorDate":"2017-11-29 01:37:27","commitOrder":4,"curCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","date":"2017-11-29 01:37:27","endLine":324,"groupId":"4311","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1a/4cfb1d48156e273c7f4c78bf9235d02aed5c8b.src","preCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"N"},{"authorDate":"2018-04-25 02:13:12","commitOrder":4,"curCode":"    public void shouldSetDifferentDefaultsIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(\"clientId\");\n\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat((Integer) producerConfigs.get(ProducerConfig.RETRIES_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","date":"2018-04-25 02:13:12","endLine":433,"groupId":"4312","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetDifferentDefaultsIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ef/5e5a86be757ed4b34c2e1efc556ef2227f0b19.src","preCode":"    public void shouldSetDifferentDefaultsIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(\"clientId\");\n\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat((Integer) producerConfigs.get(ProducerConfig.RETRIES_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat((Integer) producerConfigs.get(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION), equalTo(1));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"M"}],"commitId":"a05e33693b66ac38ccb21f2238c194ca59fcb6ec","commitMessage":"@@@KAFKA-6677: Fixed StreamsConfig producer's max-in-flight allowed when EOS enabled. (#4868)\n\nReviewers: Matthias J Sax <matthias@confluentio>.  Bill Bejeck <bill@confluent.io>","date":"2018-04-25 02:13:12","modifiedFileCount":"2","status":"M","submitter":"Jagadesh Adireddi"},{"authorTime":"2018-05-03 04:24:15","codes":[{"authorDate":"2018-05-03 04:24:15","commitOrder":5,"curCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(\"groupId\", \"clientId\");\n        String isoLevel = (String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG);\n        String name = READ_COMMITTED.name();\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","date":"2018-05-03 04:24:15","endLine":461,"groupId":"22674","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/91b6ff89e5496eeeac5606076dd3563fee03e7.src","preCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"M"},{"authorDate":"2018-05-03 04:24:15","commitOrder":5,"curCode":"    public void shouldSetDifferentDefaultsIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(\"groupId\", \"clientId\");\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(\"clientId\");\n\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat((Integer) producerConfigs.get(ProducerConfig.RETRIES_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","date":"2018-05-03 04:24:15","endLine":501,"groupId":"4312","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetDifferentDefaultsIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/91b6ff89e5496eeeac5606076dd3563fee03e7.src","preCode":"    public void shouldSetDifferentDefaultsIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(\"clientId\");\n\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat((Integer) producerConfigs.get(ProducerConfig.RETRIES_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":490,"status":"M"}],"commitId":"1b170df31c7304f6d4c938b5e0c2a09ae1e9189d","commitMessage":"@@@KAFKA-6657: Add StreamsConfig prefix for different consumers (#4805)\n\nThis pull request is for JIRA 6657.  for KIP-276.\n\nAdded unit tests for new getGlobalConsumerConfigs API and make sure existing restore consumer tests are passing.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-05-03 04:24:15","modifiedFileCount":"7","status":"M","submitter":"Boyang Chen"},{"authorTime":"2018-08-02 02:04:17","codes":[{"authorDate":"2018-08-02 02:04:17","commitOrder":6,"curCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(\"groupId\", \"clientId\");\n        assertThat(consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","date":"2018-08-02 02:04:17","endLine":460,"groupId":"16743","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/55334d09fb68de194a4922ab6d226e5f4a1240.src","preCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(\"groupId\", \"clientId\");\n        String isoLevel = (String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG);\n        String name = READ_COMMITTED.name();\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":454,"status":"M"},{"authorDate":"2018-08-02 02:04:17","commitOrder":6,"curCode":"    public void shouldSetDifferentDefaultsIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(\"groupId\", \"clientId\");\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(\"clientId\");\n\n        assertThat(consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat(producerConfigs.get(ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","date":"2018-08-02 02:04:17","endLine":500,"groupId":"17275","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetDifferentDefaultsIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/55334d09fb68de194a4922ab6d226e5f4a1240.src","preCode":"    public void shouldSetDifferentDefaultsIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(\"groupId\", \"clientId\");\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(\"clientId\");\n\n        assertThat((String) consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat((Integer) producerConfigs.get(ProducerConfig.RETRIES_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":489,"status":"M"}],"commitId":"c3e7c0bcb258061568294c0d96b62fea94ef8ee7","commitMessage":"@@@MINOR: Producers should set delivery timeout instead of retries  (#5425)\n\nUse delivery timeout instead of retries when possible and remove various TODOs associated with completion of KIP-91.\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-08-02 02:04:17","modifiedFileCount":"16","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2019-05-08 08:43:13","codes":[{"authorDate":"2019-05-08 08:43:13","commitOrder":7,"curCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        assertThat(consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","date":"2019-05-08 08:43:13","endLine":454,"groupId":"22674","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/02c93cec776a0a5aeacc6ff5debabb169bd528.src","preCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(\"groupId\", \"clientId\");\n        assertThat(consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"M"},{"authorDate":"2019-05-08 08:43:13","commitOrder":7,"curCode":"    public void shouldSetDifferentDefaultsIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(clientId);\n\n        assertThat(consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat(producerConfigs.get(ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","date":"2019-05-08 08:43:13","endLine":494,"groupId":"2775","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetDifferentDefaultsIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/02c93cec776a0a5aeacc6ff5debabb169bd528.src","preCode":"    public void shouldSetDifferentDefaultsIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(\"groupId\", \"clientId\");\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(\"clientId\");\n\n        assertThat(consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat(producerConfigs.get(ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":483,"status":"M"}],"commitId":"b0e82a68b34512d23a5a60a9b5da0db86eb880b2","commitMessage":"@@@KAFKA-8284: enable static membership on KStream (#6673)\n\nPart of KIP-345 effort. The strategy is to extract user passed in group.instance.id config and pass it in with given thread-id (because consumer is currently per-thread level).\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-08 08:43:13","modifiedFileCount":"31","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-03-23 04:50:07","codes":[{"authorDate":"2019-05-08 08:43:13","commitOrder":8,"curCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        assertThat(consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","date":"2019-05-08 08:43:13","endLine":454,"groupId":"22674","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/02c93cec776a0a5aeacc6ff5debabb169bd528.src","preCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        assertThat(consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":448,"status":"N"},{"authorDate":"2020-03-23 04:50:07","commitOrder":8,"curCode":"    private void shouldSetDifferentDefaultsIfEosEnabled() {\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(clientId);\n\n        assertThat(consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat(producerConfigs.get(ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","date":"2020-03-23 04:50:07","endLine":605,"groupId":"2775","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetDifferentDefaultsIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/28/6b6455fa85c4fb6490096a7db78edaf5ee1957.src","preCode":"    public void shouldSetDifferentDefaultsIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(clientId);\n\n        assertThat(consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat(producerConfigs.get(ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":595,"status":"M"}],"commitId":"1ad5f346cb88072c419142c86c3d897aad2de996","commitMessage":"@@@KAFKA-9451: Enable producer per thread for Streams EOS (#8318)\n\n- KIP-447\n- add new configs to enable producer per thread EOS\n- updates TaskManager to use single shared producer for eos-beta\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-03-23 04:50:07","modifiedFileCount":"17","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-03-23 04:50:07","codes":[{"authorDate":"2020-04-22 00:25:45","commitOrder":9,"curCode":"    private void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        assertThat(\n            consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG),\n            equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT))\n        );\n    }\n","date":"2020-04-22 00:25:45","endLine":617,"groupId":"22674","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a6/701b0ff5899555369c593e748adca334530e80.src","preCode":"    public void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, EXACTLY_ONCE);\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        assertThat(consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"M"},{"authorDate":"2020-03-23 04:50:07","commitOrder":9,"curCode":"    private void shouldSetDifferentDefaultsIfEosEnabled() {\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(clientId);\n\n        assertThat(consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat(producerConfigs.get(ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","date":"2020-03-23 04:50:07","endLine":605,"groupId":"2775","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetDifferentDefaultsIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/28/6b6455fa85c4fb6490096a7db78edaf5ee1957.src","preCode":"    private void shouldSetDifferentDefaultsIfEosEnabled() {\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(clientId);\n\n        assertThat(consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG), equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT)));\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat(producerConfigs.get(ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":595,"status":"N"}],"commitId":"11d8ef76ff5348a48eb1c37cddf244e399666d59","commitMessage":"@@@MINOR: Improve usage of LogCaptureAppender (#8508)\n\nReviewers: Ismael Juma <ismael@confluent.io>.  John Roesler <john@confluent.io>","date":"2020-04-22 00:25:45","modifiedFileCount":"40","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-11-23 06:00:31","codes":[{"authorDate":"2020-04-22 00:25:45","commitOrder":10,"curCode":"    private void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        assertThat(\n            consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG),\n            equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT))\n        );\n    }\n","date":"2020-04-22 00:25:45","endLine":617,"groupId":"102792","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a6/701b0ff5899555369c593e748adca334530e80.src","preCode":"    private void shouldResetToDefaultIfConsumerIsolationLevelIsOverriddenIfEosEnabled() {\n        props.put(ConsumerConfig.ISOLATION_LEVEL_CONFIG, \"anyValue\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        assertThat(\n            consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG),\n            equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"N"},{"authorDate":"2020-11-23 06:00:31","commitOrder":10,"curCode":"    private void shouldSetDifferentDefaultsIfEosEnabled() {\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(clientId);\n\n        assertThat(\n            consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG),\n            equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT))\n        );\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat(producerConfigs.get(ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat(producerConfigs.get(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG), equalTo(10000));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","date":"2020-11-23 06:00:31","endLine":673,"groupId":"102792","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSetDifferentDefaultsIfEosEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/a4fd5264e57d8435cf06a3491cb8dd754fa15d.src","preCode":"    private void shouldSetDifferentDefaultsIfEosEnabled() {\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        final Map<String, Object> producerConfigs = streamsConfig.getProducerConfigs(clientId);\n\n        assertThat(\n            consumerConfigs.get(ConsumerConfig.ISOLATION_LEVEL_CONFIG),\n            equalTo(READ_COMMITTED.name().toLowerCase(Locale.ROOT))\n        );\n        assertTrue((Boolean) producerConfigs.get(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG));\n        assertThat(producerConfigs.get(ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG), equalTo(Integer.MAX_VALUE));\n        assertThat(streamsConfig.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG), equalTo(100L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":659,"status":"M"}],"commitId":"72918a98161ba71ff4fa8116fdf8ed02b09a0580","commitMessage":"@@@MINOR: change default TX timeout only if EOS is enabled (#9618)\n\nReviewer: Boyang Chen <boyang@confluent.io>","date":"2020-11-23 06:00:31","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"}]
