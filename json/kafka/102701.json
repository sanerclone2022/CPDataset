[{"authorTime":"2016-07-12 04:57:02","codes":[{"authorDate":"2016-07-12 04:57:02","commitOrder":1,"curCode":"    public void shouldReduce() throws Exception {\n        produceMessages(System.currentTimeMillis());\n        groupedStream\n            .reduce(reducer, \"reduce-by-key\")\n            .to(Serdes.String(), Serdes.String(), outputTopic);\n\n        startStreams();\n\n        produceMessages(System.currentTimeMillis());\n\n        List<KeyValue<String, String>> results = receiveMessages(\n            new StringDeserializer(),\n            new StringDeserializer()\n            , 10);\n\n        Collections.sort(results, new Comparator<KeyValue<String, String>>() {\n            @Override\n            public int compare(KeyValue<String, String> o1, KeyValue<String, String> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(KeyValue.pair(\"A\", \"A\"),\n                                             KeyValue.pair(\"A\", \"A:A\"),\n                                             KeyValue.pair(\"B\", \"B\"),\n                                             KeyValue.pair(\"B\", \"B:B\"),\n                                             KeyValue.pair(\"C\", \"C\"),\n                                             KeyValue.pair(\"C\", \"C:C\"),\n                                             KeyValue.pair(\"D\", \"D\"),\n                                             KeyValue.pair(\"D\", \"D:D\"),\n                                             KeyValue.pair(\"E\", \"E\"),\n                                             KeyValue.pair(\"E\", \"E:E\"))));\n    }\n","date":"2016-07-12 04:57:02","endLine":156,"groupId":"20731","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/1a907273acbc4e9443620aec612dde79c99199.src","preCode":"    public void shouldReduce() throws Exception {\n        produceMessages(System.currentTimeMillis());\n        groupedStream\n            .reduce(reducer, \"reduce-by-key\")\n            .to(Serdes.String(), Serdes.String(), outputTopic);\n\n        startStreams();\n\n        produceMessages(System.currentTimeMillis());\n\n        List<KeyValue<String, String>> results = receiveMessages(\n            new StringDeserializer(),\n            new StringDeserializer()\n            , 10);\n\n        Collections.sort(results, new Comparator<KeyValue<String, String>>() {\n            @Override\n            public int compare(KeyValue<String, String> o1, KeyValue<String, String> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(KeyValue.pair(\"A\", \"A\"),\n                                             KeyValue.pair(\"A\", \"A:A\"),\n                                             KeyValue.pair(\"B\", \"B\"),\n                                             KeyValue.pair(\"B\", \"B:B\"),\n                                             KeyValue.pair(\"C\", \"C\"),\n                                             KeyValue.pair(\"C\", \"C:C\"),\n                                             KeyValue.pair(\"D\", \"D\"),\n                                             KeyValue.pair(\"D\", \"D:D\"),\n                                             KeyValue.pair(\"E\", \"E\"),\n                                             KeyValue.pair(\"E\", \"E:E\"))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"},{"authorDate":"2016-07-12 04:57:02","commitOrder":1,"curCode":"    public void shouldCount() throws Exception {\n        produceMessages(System.currentTimeMillis());\n\n        groupedStream.count(\"count-by-key\")\n            .to(Serdes.String(), Serdes.Long(), outputTopic);\n\n        startStreams();\n\n        produceMessages(System.currentTimeMillis());\n\n        List<KeyValue<String, Long>> results = receiveMessages(\n            new StringDeserializer(),\n            new LongDeserializer()\n            , 10);\n        Collections.sort(results, new Comparator<KeyValue<String, Long>>() {\n            @Override\n            public int compare(KeyValue<String, Long> o1, KeyValue<String, Long> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(\n            KeyValue.pair(\"A\", 1L),\n            KeyValue.pair(\"A\", 2L),\n            KeyValue.pair(\"B\", 1L),\n            KeyValue.pair(\"B\", 2L),\n            KeyValue.pair(\"C\", 1L),\n            KeyValue.pair(\"C\", 2L),\n            KeyValue.pair(\"D\", 1L),\n            KeyValue.pair(\"D\", 2L),\n            KeyValue.pair(\"E\", 1L),\n            KeyValue.pair(\"E\", 2L)\n        )));\n    }\n","date":"2016-07-12 04:57:02","endLine":365,"groupId":"6228","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/1a907273acbc4e9443620aec612dde79c99199.src","preCode":"    public void shouldCount() throws Exception {\n        produceMessages(System.currentTimeMillis());\n\n        groupedStream.count(\"count-by-key\")\n            .to(Serdes.String(), Serdes.Long(), outputTopic);\n\n        startStreams();\n\n        produceMessages(System.currentTimeMillis());\n\n        List<KeyValue<String, Long>> results = receiveMessages(\n            new StringDeserializer(),\n            new LongDeserializer()\n            , 10);\n        Collections.sort(results, new Comparator<KeyValue<String, Long>>() {\n            @Override\n            public int compare(KeyValue<String, Long> o1, KeyValue<String, Long> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(\n            KeyValue.pair(\"A\", 1L),\n            KeyValue.pair(\"A\", 2L),\n            KeyValue.pair(\"B\", 1L),\n            KeyValue.pair(\"B\", 2L),\n            KeyValue.pair(\"C\", 1L),\n            KeyValue.pair(\"C\", 2L),\n            KeyValue.pair(\"D\", 1L),\n            KeyValue.pair(\"D\", 2L),\n            KeyValue.pair(\"E\", 1L),\n            KeyValue.pair(\"E\", 2L)\n        )));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"B"}],"commitId":"136a8fabca8e266f67897cf5471b2e41c0a341be","commitMessage":"@@@KAFKA-3887 Follow-up: add unit test for null checking in KTable aggregates\n\nAlso made a pass over the streams unit tests.  with the following changes:\n\n1. Removed three integration tests as they are already covered by other integration tests.\n2. Merged `KGroupedTableImplTest` into `KTableAggregateTest`.\n3. Use mocks whenever possible to reduce code duplicates.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Ismael Juma <ismael@juma.me.uk>\n\nCloses #1604 from guozhangwang/Kminor-unit-tests-consolidation\n","date":"2016-07-12 04:57:02","modifiedFileCount":"5","status":"B","submitter":"Guozhang Wang"},{"authorTime":"2016-09-07 06:35:12","codes":[{"authorDate":"2016-09-07 06:35:12","commitOrder":2,"curCode":"    public void shouldReduce() throws Exception {\n        produceMessages(mockTime.milliseconds());\n        groupedStream\n            .reduce(reducer, \"reduce-by-key\")\n            .to(Serdes.String(), Serdes.String(), outputTopic);\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValue<String, String>> results = receiveMessages(\n            new StringDeserializer(),\n            new StringDeserializer()\n            , 10);\n\n        Collections.sort(results, new Comparator<KeyValue<String, String>>() {\n            @Override\n            public int compare(final KeyValue<String, String> o1, final KeyValue<String, String> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(KeyValue.pair(\"A\", \"A\"),\n            KeyValue.pair(\"A\", \"A:A\"),\n            KeyValue.pair(\"B\", \"B\"),\n            KeyValue.pair(\"B\", \"B:B\"),\n            KeyValue.pair(\"C\", \"C\"),\n            KeyValue.pair(\"C\", \"C:C\"),\n            KeyValue.pair(\"D\", \"D\"),\n            KeyValue.pair(\"D\", \"D:D\"),\n            KeyValue.pair(\"E\", \"E\"),\n            KeyValue.pair(\"E\", \"E:E\"))));\n    }\n","date":"2016-09-07 06:35:12","endLine":161,"groupId":"20731","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6d/a2a959968f17497248e90bef4442b27a381cb5.src","preCode":"    public void shouldReduce() throws Exception {\n        produceMessages(System.currentTimeMillis());\n        groupedStream\n            .reduce(reducer, \"reduce-by-key\")\n            .to(Serdes.String(), Serdes.String(), outputTopic);\n\n        startStreams();\n\n        produceMessages(System.currentTimeMillis());\n\n        List<KeyValue<String, String>> results = receiveMessages(\n            new StringDeserializer(),\n            new StringDeserializer()\n            , 10);\n\n        Collections.sort(results, new Comparator<KeyValue<String, String>>() {\n            @Override\n            public int compare(KeyValue<String, String> o1, KeyValue<String, String> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(KeyValue.pair(\"A\", \"A\"),\n                                             KeyValue.pair(\"A\", \"A:A\"),\n                                             KeyValue.pair(\"B\", \"B\"),\n                                             KeyValue.pair(\"B\", \"B:B\"),\n                                             KeyValue.pair(\"C\", \"C\"),\n                                             KeyValue.pair(\"C\", \"C:C\"),\n                                             KeyValue.pair(\"D\", \"D\"),\n                                             KeyValue.pair(\"D\", \"D:D\"),\n                                             KeyValue.pair(\"E\", \"E\"),\n                                             KeyValue.pair(\"E\", \"E:E\"))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2016-09-07 06:35:12","commitOrder":2,"curCode":"    public void shouldCount() throws Exception {\n        produceMessages(mockTime.milliseconds());\n\n        groupedStream.count(\"count-by-key\")\n            .to(Serdes.String(), Serdes.Long(), outputTopic);\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValue<String, Long>> results = receiveMessages(\n            new StringDeserializer(),\n            new LongDeserializer()\n            , 10);\n        Collections.sort(results, new Comparator<KeyValue<String, Long>>() {\n            @Override\n            public int compare(final KeyValue<String, Long> o1, final KeyValue<String, Long> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(\n            KeyValue.pair(\"A\", 1L),\n            KeyValue.pair(\"A\", 2L),\n            KeyValue.pair(\"B\", 1L),\n            KeyValue.pair(\"B\", 2L),\n            KeyValue.pair(\"C\", 1L),\n            KeyValue.pair(\"C\", 2L),\n            KeyValue.pair(\"D\", 1L),\n            KeyValue.pair(\"D\", 2L),\n            KeyValue.pair(\"E\", 1L),\n            KeyValue.pair(\"E\", 2L)\n        )));\n    }\n","date":"2016-09-07 06:35:12","endLine":371,"groupId":"6228","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6d/a2a959968f17497248e90bef4442b27a381cb5.src","preCode":"    public void shouldCount() throws Exception {\n        produceMessages(System.currentTimeMillis());\n\n        groupedStream.count(\"count-by-key\")\n            .to(Serdes.String(), Serdes.Long(), outputTopic);\n\n        startStreams();\n\n        produceMessages(System.currentTimeMillis());\n\n        List<KeyValue<String, Long>> results = receiveMessages(\n            new StringDeserializer(),\n            new LongDeserializer()\n            , 10);\n        Collections.sort(results, new Comparator<KeyValue<String, Long>>() {\n            @Override\n            public int compare(KeyValue<String, Long> o1, KeyValue<String, Long> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(\n            KeyValue.pair(\"A\", 1L),\n            KeyValue.pair(\"A\", 2L),\n            KeyValue.pair(\"B\", 1L),\n            KeyValue.pair(\"B\", 2L),\n            KeyValue.pair(\"C\", 1L),\n            KeyValue.pair(\"C\", 2L),\n            KeyValue.pair(\"D\", 1L),\n            KeyValue.pair(\"D\", 2L),\n            KeyValue.pair(\"E\", 1L),\n            KeyValue.pair(\"E\", 2L)\n        )));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"M"}],"commitId":"de1b853c3ed326cf296a56538ca9570b0ecc0636","commitMessage":"@@@MINOR: changes embedded broker time to MockTime\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Damian Guy.  Ismael Juma.  Guozhang Wang\n\nCloses #1808 from mjsax/mockTime\n","date":"2016-09-07 06:35:12","modifiedFileCount":"10","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2016-09-07 06:35:12","codes":[{"authorDate":"2018-05-08 00:44:45","commitOrder":3,"curCode":"    public void shouldReduce() throws Exception {\n        produceMessages(mockTime.milliseconds());\n        groupedStream\n            .reduce(reducer, \"reduce-by-key\")\n            .toStream()\n            .to(Serdes.String(), Serdes.String(), outputTopic);\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValue<String, String>> results = receiveMessages(\n            new StringDeserializer(),\n            new StringDeserializer(),\n            10);\n\n        Collections.sort(results, new Comparator<KeyValue<String, String>>() {\n            @Override\n            public int compare(final KeyValue<String, String> o1, final KeyValue<String, String> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(KeyValue.pair(\"A\", \"A\"),\n            KeyValue.pair(\"A\", \"A:A\"),\n            KeyValue.pair(\"B\", \"B\"),\n            KeyValue.pair(\"B\", \"B:B\"),\n            KeyValue.pair(\"C\", \"C\"),\n            KeyValue.pair(\"C\", \"C:C\"),\n            KeyValue.pair(\"D\", \"D\"),\n            KeyValue.pair(\"D\", \"D:D\"),\n            KeyValue.pair(\"E\", \"E\"),\n            KeyValue.pair(\"E\", \"E:E\"))));\n    }\n","date":"2018-05-08 00:44:45","endLine":200,"groupId":"20731","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/fe9f28df8fd2cbee3713c0ee1f538f3a0eb884.src","preCode":"    public void shouldReduce() throws Exception {\n        produceMessages(mockTime.milliseconds());\n        groupedStream\n            .reduce(reducer, \"reduce-by-key\")\n            .to(Serdes.String(), Serdes.String(), outputTopic);\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValue<String, String>> results = receiveMessages(\n            new StringDeserializer(),\n            new StringDeserializer(),\n            10);\n\n        Collections.sort(results, new Comparator<KeyValue<String, String>>() {\n            @Override\n            public int compare(final KeyValue<String, String> o1, final KeyValue<String, String> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(KeyValue.pair(\"A\", \"A\"),\n            KeyValue.pair(\"A\", \"A:A\"),\n            KeyValue.pair(\"B\", \"B\"),\n            KeyValue.pair(\"B\", \"B:B\"),\n            KeyValue.pair(\"C\", \"C\"),\n            KeyValue.pair(\"C\", \"C:C\"),\n            KeyValue.pair(\"D\", \"D\"),\n            KeyValue.pair(\"D\", \"D:D\"),\n            KeyValue.pair(\"E\", \"E\"),\n            KeyValue.pair(\"E\", \"E:E\"))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2016-09-07 06:35:12","commitOrder":3,"curCode":"    public void shouldCount() throws Exception {\n        produceMessages(mockTime.milliseconds());\n\n        groupedStream.count(\"count-by-key\")\n            .to(Serdes.String(), Serdes.Long(), outputTopic);\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValue<String, Long>> results = receiveMessages(\n            new StringDeserializer(),\n            new LongDeserializer()\n            , 10);\n        Collections.sort(results, new Comparator<KeyValue<String, Long>>() {\n            @Override\n            public int compare(final KeyValue<String, Long> o1, final KeyValue<String, Long> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(\n            KeyValue.pair(\"A\", 1L),\n            KeyValue.pair(\"A\", 2L),\n            KeyValue.pair(\"B\", 1L),\n            KeyValue.pair(\"B\", 2L),\n            KeyValue.pair(\"C\", 1L),\n            KeyValue.pair(\"C\", 2L),\n            KeyValue.pair(\"D\", 1L),\n            KeyValue.pair(\"D\", 2L),\n            KeyValue.pair(\"E\", 1L),\n            KeyValue.pair(\"E\", 2L)\n        )));\n    }\n","date":"2016-09-07 06:35:12","endLine":371,"groupId":"6228","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6d/a2a959968f17497248e90bef4442b27a381cb5.src","preCode":"    public void shouldCount() throws Exception {\n        produceMessages(mockTime.milliseconds());\n\n        groupedStream.count(\"count-by-key\")\n            .to(Serdes.String(), Serdes.Long(), outputTopic);\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValue<String, Long>> results = receiveMessages(\n            new StringDeserializer(),\n            new LongDeserializer()\n            , 10);\n        Collections.sort(results, new Comparator<KeyValue<String, Long>>() {\n            @Override\n            public int compare(final KeyValue<String, Long> o1, final KeyValue<String, Long> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(\n            KeyValue.pair(\"A\", 1L),\n            KeyValue.pair(\"A\", 2L),\n            KeyValue.pair(\"B\", 1L),\n            KeyValue.pair(\"B\", 2L),\n            KeyValue.pair(\"C\", 1L),\n            KeyValue.pair(\"C\", 2L),\n            KeyValue.pair(\"D\", 1L),\n            KeyValue.pair(\"D\", 2L),\n            KeyValue.pair(\"E\", 1L),\n            KeyValue.pair(\"E\", 2L)\n        )));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"N"}],"commitId":"42771eb37d6abd0a34220d30773e559680bdf9b0","commitMessage":"@@@MINOR: Remove deprecated KTable#writeAs.  print.  foreach.  to.  through (#4910)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-05-08 00:44:45","modifiedFileCount":"8","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-05-08 08:34:34","codes":[{"authorDate":"2018-05-08 08:34:34","commitOrder":4,"curCode":"    public void shouldReduce() throws Exception {\n        produceMessages(mockTime.milliseconds());\n        groupedStream\n            .reduce(reducer, Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"reduce-by-key\"))\n            .toStream()\n            .to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValue<String, String>> results = receiveMessages(\n            new StringDeserializer(),\n            new StringDeserializer(),\n            10);\n\n        Collections.sort(results, new Comparator<KeyValue<String, String>>() {\n            @Override\n            public int compare(final KeyValue<String, String> o1, final KeyValue<String, String> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(KeyValue.pair(\"A\", \"A\"),\n            KeyValue.pair(\"A\", \"A:A\"),\n            KeyValue.pair(\"B\", \"B\"),\n            KeyValue.pair(\"B\", \"B:B\"),\n            KeyValue.pair(\"C\", \"C\"),\n            KeyValue.pair(\"C\", \"C:C\"),\n            KeyValue.pair(\"D\", \"D\"),\n            KeyValue.pair(\"D\", \"D:D\"),\n            KeyValue.pair(\"E\", \"E\"),\n            KeyValue.pair(\"E\", \"E:E\"))));\n    }\n","date":"2018-05-08 08:34:34","endLine":201,"groupId":"20731","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/65/8bf33909e024e9dbffc1f3973431bcf96fd48e.src","preCode":"    public void shouldReduce() throws Exception {\n        produceMessages(mockTime.milliseconds());\n        groupedStream\n            .reduce(reducer, \"reduce-by-key\")\n            .toStream()\n            .to(Serdes.String(), Serdes.String(), outputTopic);\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValue<String, String>> results = receiveMessages(\n            new StringDeserializer(),\n            new StringDeserializer(),\n            10);\n\n        Collections.sort(results, new Comparator<KeyValue<String, String>>() {\n            @Override\n            public int compare(final KeyValue<String, String> o1, final KeyValue<String, String> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(KeyValue.pair(\"A\", \"A\"),\n            KeyValue.pair(\"A\", \"A:A\"),\n            KeyValue.pair(\"B\", \"B\"),\n            KeyValue.pair(\"B\", \"B:B\"),\n            KeyValue.pair(\"C\", \"C\"),\n            KeyValue.pair(\"C\", \"C:C\"),\n            KeyValue.pair(\"D\", \"D\"),\n            KeyValue.pair(\"D\", \"D:D\"),\n            KeyValue.pair(\"E\", \"E\"),\n            KeyValue.pair(\"E\", \"E:E\"))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"},{"authorDate":"2018-05-08 08:34:34","commitOrder":4,"curCode":"    public void shouldCount() throws Exception {\n        produceMessages(mockTime.milliseconds());\n\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count-by-key\"))\n                .toStream()\n                .to(outputTopic, Produced.with(Serdes.String(), Serdes.Long()));\n\n        shouldCountHelper();\n    }\n","date":"2018-05-08 08:34:34","endLine":452,"groupId":"7731","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/65/8bf33909e024e9dbffc1f3973431bcf96fd48e.src","preCode":"    public void shouldCount() throws Exception {\n        produceMessages(mockTime.milliseconds());\n\n        groupedStream.count(\"count-by-key\")\n            .to(Serdes.String(), Serdes.Long(), outputTopic);\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValue<String, Long>> results = receiveMessages(\n            new StringDeserializer(),\n            new LongDeserializer(),\n            10);\n        Collections.sort(results, new Comparator<KeyValue<String, Long>>() {\n            @Override\n            public int compare(final KeyValue<String, Long> o1, final KeyValue<String, Long> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(\n            KeyValue.pair(\"A\", 1L),\n            KeyValue.pair(\"A\", 2L),\n            KeyValue.pair(\"B\", 1L),\n            KeyValue.pair(\"B\", 2L),\n            KeyValue.pair(\"C\", 1L),\n            KeyValue.pair(\"C\", 2L),\n            KeyValue.pair(\"D\", 1L),\n            KeyValue.pair(\"D\", 2L),\n            KeyValue.pair(\"E\", 1L),\n            KeyValue.pair(\"E\", 2L)\n        )));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":444,"status":"M"}],"commitId":"2b5a59406622affa1e333e073546f075f59b4ac9","commitMessage":"@@@KAFKA-6813: Remove deprecated APIs in KIP-182.  Part I (#4919)\n\nI'm breaking KAFKA-6813 into a couple of \"smaller\" PRs and this is the first one. It focused on:\n\nRemove deprecated APIs in KStream.  KTable.  KGroupedStream.  KGroupedTable.  SessionWindowedKStream.  TimeWindowedKStream.\n\nAlso found a couple of overlooked bugs while working on them:\n\n2.a) In KTable.filter / mapValues without the additional parameter indicating the materialized stores.  originally we will not materialize the store. After KIP-182 we mistakenly diverge the semantics: for KTable.mapValues it is still the case.  for KTable.filter we will always materialize.\n\n2.b) In XXStream/Table.reduce/count.  we used to try to reuse the serdes since their types are pre-known (for reduce it is the same types for both key / value.  for count it is the same types for key.  and Long for value). This was somehow lost in the past refactoring.\n\n2.c) We are enforcing to cast a Serde<V> to Serde<VR> for XXStream / Table.aggregate.  for which the returned value type is NOT known.  such the enforced casting should not be applied and we should require users to provide us the value serde if they believe the default ones are not applicable.\n\n2.d) Whenever we are creating a new MaterializedInternal we are effectively incrementing the suffix index for the store / processor-node names. However in some places this MaterializedInternal is only used for validation.  so the resulted processor-node / store suffix is not monotonic.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2018-05-08 08:34:34","modifiedFileCount":"33","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-07-27 00:31:02","codes":[{"authorDate":"2018-07-27 00:31:02","commitOrder":5,"curCode":"    public void shouldReduce() throws Exception {\n        produceMessages(mockTime.milliseconds());\n        groupedStream\n            .reduce(reducer, Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"reduce-by-key\"))\n            .toStream()\n            .to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValue<String, String>> results = receiveMessages(\n            new StringDeserializer(),\n            new StringDeserializer(),\n            10);\n\n        Collections.sort(results, KStreamAggregationIntegrationTest::compare);\n\n        assertThat(results, is(Arrays.asList(KeyValue.pair(\"A\", \"A\"),\n            KeyValue.pair(\"A\", \"A:A\"),\n            KeyValue.pair(\"B\", \"B\"),\n            KeyValue.pair(\"B\", \"B:B\"),\n            KeyValue.pair(\"C\", \"C\"),\n            KeyValue.pair(\"C\", \"C:C\"),\n            KeyValue.pair(\"D\", \"D\"),\n            KeyValue.pair(\"D\", \"D:D\"),\n            KeyValue.pair(\"E\", \"E\"),\n            KeyValue.pair(\"E\", \"E:E\"))));\n    }\n","date":"2018-07-27 00:31:02","endLine":180,"groupId":"19201","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a2/9332c5da74602ea7eb539a8ce366e9200c41f2.src","preCode":"    public void shouldReduce() throws Exception {\n        produceMessages(mockTime.milliseconds());\n        groupedStream\n            .reduce(reducer, Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"reduce-by-key\"))\n            .toStream()\n            .to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValue<String, String>> results = receiveMessages(\n            new StringDeserializer(),\n            new StringDeserializer(),\n            10);\n\n        Collections.sort(results, new Comparator<KeyValue<String, String>>() {\n            @Override\n            public int compare(final KeyValue<String, String> o1, final KeyValue<String, String> o2) {\n                return KStreamAggregationIntegrationTest.compare(o1, o2);\n            }\n        });\n\n        assertThat(results, is(Arrays.asList(KeyValue.pair(\"A\", \"A\"),\n            KeyValue.pair(\"A\", \"A:A\"),\n            KeyValue.pair(\"B\", \"B\"),\n            KeyValue.pair(\"B\", \"B:B\"),\n            KeyValue.pair(\"C\", \"C\"),\n            KeyValue.pair(\"C\", \"C:C\"),\n            KeyValue.pair(\"D\", \"D\"),\n            KeyValue.pair(\"D\", \"D:D\"),\n            KeyValue.pair(\"E\", \"E\"),\n            KeyValue.pair(\"E\", \"E:E\"))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"},{"authorDate":"2018-07-27 00:31:02","commitOrder":5,"curCode":"    public void shouldCount() throws Exception {\n        produceMessages(mockTime.milliseconds());\n\n        groupedStream.count(Materialized.as(\"count-by-key\"))\n                .toStream()\n                .to(outputTopic, Produced.with(Serdes.String(), Serdes.Long()));\n\n        shouldCountHelper();\n    }\n","date":"2018-07-27 00:31:02","endLine":408,"groupId":"20104","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a2/9332c5da74602ea7eb539a8ce366e9200c41f2.src","preCode":"    public void shouldCount() throws Exception {\n        produceMessages(mockTime.milliseconds());\n\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count-by-key\"))\n                .toStream()\n                .to(outputTopic, Produced.with(Serdes.String(), Serdes.Long()));\n\n        shouldCountHelper();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"}],"commitId":"42af41d5fc991c392b75396352903b4d919da5d3","commitMessage":"@@@MINOR: Caching layer should forward record timestamp (#5423)\n\nReviewer: Guozhang Wang <guozhang@confluent.io>\n","date":"2018-07-27 00:31:02","modifiedFileCount":"4","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-07-27 00:31:02","codes":[{"authorDate":"2019-05-13 06:31:44","commitOrder":6,"curCode":"    public void shouldReduce() throws Exception {\n        produceMessages(mockTime.milliseconds());\n        groupedStream\n            .reduce(reducer, Materialized.as(\"reduce-by-key\"))\n            .toStream()\n            .to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValue<String, String>> results = receiveMessages(\n            new StringDeserializer(),\n            new StringDeserializer(),\n            10);\n\n        results.sort(KStreamAggregationIntegrationTest::compare);\n\n        assertThat(results, is(Arrays.asList(KeyValue.pair(\"A\", \"A\"),\n            KeyValue.pair(\"A\", \"A:A\"),\n            KeyValue.pair(\"B\", \"B\"),\n            KeyValue.pair(\"B\", \"B:B\"),\n            KeyValue.pair(\"C\", \"C\"),\n            KeyValue.pair(\"C\", \"C:C\"),\n            KeyValue.pair(\"D\", \"D\"),\n            KeyValue.pair(\"D\", \"D:D\"),\n            KeyValue.pair(\"E\", \"E\"),\n            KeyValue.pair(\"E\", \"E:E\"))));\n    }\n","date":"2019-05-13 06:31:44","endLine":180,"groupId":"15026","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ea/3695e19a45ec9af1a0193f2fc405cd56a76a13.src","preCode":"    public void shouldReduce() throws Exception {\n        produceMessages(mockTime.milliseconds());\n        groupedStream\n            .reduce(reducer, Materialized.<String, String, KeyValueStore<Bytes, byte[]>>as(\"reduce-by-key\"))\n            .toStream()\n            .to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValue<String, String>> results = receiveMessages(\n            new StringDeserializer(),\n            new StringDeserializer(),\n            10);\n\n        Collections.sort(results, KStreamAggregationIntegrationTest::compare);\n\n        assertThat(results, is(Arrays.asList(KeyValue.pair(\"A\", \"A\"),\n            KeyValue.pair(\"A\", \"A:A\"),\n            KeyValue.pair(\"B\", \"B\"),\n            KeyValue.pair(\"B\", \"B:B\"),\n            KeyValue.pair(\"C\", \"C\"),\n            KeyValue.pair(\"C\", \"C:C\"),\n            KeyValue.pair(\"D\", \"D\"),\n            KeyValue.pair(\"D\", \"D:D\"),\n            KeyValue.pair(\"E\", \"E\"),\n            KeyValue.pair(\"E\", \"E:E\"))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"M"},{"authorDate":"2018-07-27 00:31:02","commitOrder":6,"curCode":"    public void shouldCount() throws Exception {\n        produceMessages(mockTime.milliseconds());\n\n        groupedStream.count(Materialized.as(\"count-by-key\"))\n                .toStream()\n                .to(outputTopic, Produced.with(Serdes.String(), Serdes.Long()));\n\n        shouldCountHelper();\n    }\n","date":"2018-07-27 00:31:02","endLine":408,"groupId":"20104","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a2/9332c5da74602ea7eb539a8ce366e9200c41f2.src","preCode":"    public void shouldCount() throws Exception {\n        produceMessages(mockTime.milliseconds());\n\n        groupedStream.count(Materialized.as(\"count-by-key\"))\n                .toStream()\n                .to(outputTopic, Produced.with(Serdes.String(), Serdes.Long()));\n\n        shouldCountHelper();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"N"}],"commitId":"8a237f599afa539868a138b5a2534dbf884cb4ec","commitMessage":"@@@KAFKA-6455: Session Aggregation should use window-end-time as record timestamp (#6645)\n\nFor session-windows.  the result record should have the window-end timestamp as record timestamp.\n\nRebased to resolve merge conflicts. Removed unused classes TupleForwarder and ForwardingCacheFlushListener (replace with TimestampedTupleForwarder.  SessionTupleForwarder.  TimestampedCacheFlushListerner.  and SessionCacheFlushListener)\n\nReviewers: John Roesler <john@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-13 06:31:44","modifiedFileCount":"14","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-07-27 00:31:02","codes":[{"authorDate":"2019-05-31 00:46:12","commitOrder":7,"curCode":"    public void shouldReduce() throws Exception {\n        produceMessages(mockTime.milliseconds());\n        groupedStream\n            .reduce(reducer, Materialized.as(\"reduce-by-key\"))\n            .toStream()\n            .to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValueTimestamp<String, String>> results = receiveMessages(\n            new StringDeserializer(),\n            new StringDeserializer(),\n            10);\n\n        results.sort(KStreamAggregationIntegrationTest::compare);\n\n        assertThat(results, is(Arrays.asList(\n            new KeyValueTimestamp(\"A\", \"A\", mockTime.milliseconds()),\n            new KeyValueTimestamp(\"A\", \"A:A\", mockTime.milliseconds()),\n            new KeyValueTimestamp(\"B\", \"B\", mockTime.milliseconds()),\n            new KeyValueTimestamp(\"B\", \"B:B\", mockTime.milliseconds()),\n            new KeyValueTimestamp(\"C\", \"C\", mockTime.milliseconds()),\n            new KeyValueTimestamp(\"C\", \"C:C\", mockTime.milliseconds()),\n            new KeyValueTimestamp(\"D\", \"D\", mockTime.milliseconds()),\n            new KeyValueTimestamp(\"D\", \"D:D\", mockTime.milliseconds()),\n            new KeyValueTimestamp(\"E\", \"E\", mockTime.milliseconds()),\n            new KeyValueTimestamp(\"E\", \"E:E\", mockTime.milliseconds()))));\n    }\n","date":"2019-05-31 00:46:12","endLine":180,"groupId":"102701","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReduce","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dc/f72a501ec1a64ed41f2d10d6e988361e2466c3.src","preCode":"    public void shouldReduce() throws Exception {\n        produceMessages(mockTime.milliseconds());\n        groupedStream\n            .reduce(reducer, Materialized.as(\"reduce-by-key\"))\n            .toStream()\n            .to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n\n        startStreams();\n\n        produceMessages(mockTime.milliseconds());\n\n        final List<KeyValue<String, String>> results = receiveMessages(\n            new StringDeserializer(),\n            new StringDeserializer(),\n            10);\n\n        results.sort(KStreamAggregationIntegrationTest::compare);\n\n        assertThat(results, is(Arrays.asList(KeyValue.pair(\"A\", \"A\"),\n            KeyValue.pair(\"A\", \"A:A\"),\n            KeyValue.pair(\"B\", \"B\"),\n            KeyValue.pair(\"B\", \"B:B\"),\n            KeyValue.pair(\"C\", \"C\"),\n            KeyValue.pair(\"C\", \"C:C\"),\n            KeyValue.pair(\"D\", \"D\"),\n            KeyValue.pair(\"D\", \"D:D\"),\n            KeyValue.pair(\"E\", \"E\"),\n            KeyValue.pair(\"E\", \"E:E\"))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2018-07-27 00:31:02","commitOrder":7,"curCode":"    public void shouldCount() throws Exception {\n        produceMessages(mockTime.milliseconds());\n\n        groupedStream.count(Materialized.as(\"count-by-key\"))\n                .toStream()\n                .to(outputTopic, Produced.with(Serdes.String(), Serdes.Long()));\n\n        shouldCountHelper();\n    }\n","date":"2018-07-27 00:31:02","endLine":408,"groupId":"102701","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCount","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a2/9332c5da74602ea7eb539a8ce366e9200c41f2.src","preCode":"    public void shouldCount() throws Exception {\n        produceMessages(mockTime.milliseconds());\n\n        groupedStream.count(Materialized.as(\"count-by-key\"))\n                .toStream()\n                .to(outputTopic, Produced.with(Serdes.String(), Serdes.Long()));\n\n        shouldCountHelper();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"N"}],"commitId":"77e6e8ec054608a30626271b4952b63294a93c3b","commitMessage":"@@@KAFKA-6455: Update integration tests to verify result timestamps (#6751)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2019-05-31 00:46:12","modifiedFileCount":"12","status":"M","submitter":"Matthias J. Sax"}]
