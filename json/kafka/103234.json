[{"authorTime":"2018-05-26 15:18:41","codes":[{"authorDate":"2018-05-26 15:18:41","commitOrder":1,"curCode":"    public void login1Commit1Logout1Login2Commit2Logout2() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {EasyMock.mock(OAuthBearerToken.class),\n            EasyMock.mock(OAuthBearerToken.class)};\n        EasyMock.replay(tokens[0], tokens[1]); \r\n        TestTokenCallbackHandler testTokenCallbackHandler = new TestTokenCallbackHandler(tokens);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        loginModule1.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n\n        loginModule2.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule2.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[1], privateCredentials.iterator().next());\n        loginModule2.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n    }\n","date":"2018-05-26 15:18:41","endLine":204,"groupId":"9647","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"login1Commit1Logout1Login2Commit2Logout2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d8/83e5e9dcce45135156cca83a3a089c4775d9ea.src","preCode":"    public void login1Commit1Logout1Login2Commit2Logout2() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {EasyMock.mock(OAuthBearerToken.class),\n            EasyMock.mock(OAuthBearerToken.class)};\n        EasyMock.replay(tokens[0], tokens[1]); \r\n        TestTokenCallbackHandler testTokenCallbackHandler = new TestTokenCallbackHandler(tokens);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        loginModule1.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n\n        loginModule2.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule2.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[1], privateCredentials.iterator().next());\n        loginModule2.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerLoginModuleTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"B"},{"authorDate":"2018-05-26 15:18:41","commitOrder":1,"curCode":"    public void login1Commit1Login2Abort2Login3Commit3Logout3() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {EasyMock.mock(OAuthBearerToken.class),\n            EasyMock.mock(OAuthBearerToken.class), EasyMock.mock(OAuthBearerToken.class)};\n        EasyMock.replay(tokens[0], tokens[1], tokens[2]); \r\n        TestTokenCallbackHandler testTokenCallbackHandler = new TestTokenCallbackHandler(tokens);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule3 = new OAuthBearerLoginModule();\n        loginModule3.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        loginModule2.abort();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        loginModule2.commit();\n        \r\n        assertEquals(2, privateCredentials.size());\n        Iterator<Object> iterator = privateCredentials.iterator();\n        assertNotSame(tokens[1], iterator.next());\n        assertNotSame(tokens[1], iterator.next());\n        loginModule1.logout();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[2], privateCredentials.iterator().next());\n    }\n","date":"2018-05-26 15:18:41","endLine":307,"groupId":"9647","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"login1Commit1Login2Abort2Login3Commit3Logout3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d8/83e5e9dcce45135156cca83a3a089c4775d9ea.src","preCode":"    public void login1Commit1Login2Abort2Login3Commit3Logout3() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {EasyMock.mock(OAuthBearerToken.class),\n            EasyMock.mock(OAuthBearerToken.class), EasyMock.mock(OAuthBearerToken.class)};\n        EasyMock.replay(tokens[0], tokens[1], tokens[2]); \r\n        TestTokenCallbackHandler testTokenCallbackHandler = new TestTokenCallbackHandler(tokens);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule3 = new OAuthBearerLoginModule();\n        loginModule3.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        loginModule2.abort();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        loginModule2.commit();\n        \r\n        assertEquals(2, privateCredentials.size());\n        Iterator<Object> iterator = privateCredentials.iterator();\n        assertNotSame(tokens[1], iterator.next());\n        assertNotSame(tokens[1], iterator.next());\n        loginModule1.logout();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[2], privateCredentials.iterator().next());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerLoginModuleTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"B"}],"commitId":"8c5d7e0408a62aa5f414e8b707050bf8e313a57e","commitMessage":"@@@KAFKA-6562: OAuth Authentication via SASL/OAUTHBEARER (KIP-255) (#4994)\n\nThis KIP adds the following functionality related to SASL/OAUTHBEARER:\n\n1) Allow clients (both brokers when SASL/OAUTHBEARER is the inter-broker protocol as well as non-broker clients) to flexibly retrieve an access token from an OAuth 2 authorization server based on the declaration of a custom login CallbackHandler implementation and have that access token transparently and automatically transmitted to a broker for authentication.\n\n2) Allow brokers to flexibly validate provided access tokens when a client establishes a connection based on the declaration of a custom SASL Server CallbackHandler implementation.\n\n3) Provide implementations of the above retrieval and validation features based on an unsecured JSON Web Token that function out-of-the-box with minimal configuration required (i.e. implementations of the two types of callback handlers mentioned above will be used by default with no need to explicitly declare them).\n\n4) Allow clients (both brokers when SASL/OAUTHBEARER is the inter-broker protocol as well as non-broker clients) to transparently retrieve a new access token in the background before the existing access token expires in case the client has to open new connections.","date":"2018-05-26 15:18:41","modifiedFileCount":"5","status":"B","submitter":"Ron Dagostino"},{"authorTime":"2018-08-07 00:22:04","codes":[{"authorDate":"2018-08-07 00:22:04","commitOrder":2,"curCode":"    public void login1Commit1Logout1Login2Commit2Logout2() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n        Set<Object> publicCredentials = subject.getPublicCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {EasyMock.mock(OAuthBearerToken.class),\n            EasyMock.mock(OAuthBearerToken.class)};\n        SaslExtensions[] extensions = new SaslExtensions[] {EasyMock.mock(SaslExtensions.class),\n            EasyMock.mock(SaslExtensions.class)};\n        EasyMock.replay(tokens[0], tokens[1]); \r\n        EasyMock.replay(extensions[0], extensions[1]);\n        TestCallbackHandler testTokenCallbackHandler = new TestCallbackHandler(tokens, extensions);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule1.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n\n        loginModule2.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule2.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[1], privateCredentials.iterator().next());\n        assertSame(extensions[1], publicCredentials.iterator().next());\n        loginModule2.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n    }\n","date":"2018-08-07 00:22:04","endLine":271,"groupId":"14389","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"login1Commit1Logout1Login2Commit2Logout2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a9/620fa69378b239b499a65fd67ad9abba132ff3.src","preCode":"    public void login1Commit1Logout1Login2Commit2Logout2() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {EasyMock.mock(OAuthBearerToken.class),\n            EasyMock.mock(OAuthBearerToken.class)};\n        EasyMock.replay(tokens[0], tokens[1]); \r\n        TestTokenCallbackHandler testTokenCallbackHandler = new TestTokenCallbackHandler(tokens);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        loginModule1.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n\n        loginModule2.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule2.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[1], privateCredentials.iterator().next());\n        loginModule2.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerLoginModuleTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2018-08-07 00:22:04","commitOrder":2,"curCode":"    public void login1Commit1Login2Abort2Login3Commit3Logout3() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n        Set<Object> publicCredentials = subject.getPublicCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {EasyMock.mock(OAuthBearerToken.class),\n            EasyMock.mock(OAuthBearerToken.class), EasyMock.mock(OAuthBearerToken.class)};\n        SaslExtensions[] extensions = new SaslExtensions[] {EasyMock.mock(SaslExtensions.class),\n            EasyMock.mock(SaslExtensions.class), EasyMock.mock(SaslExtensions.class)};\n        EasyMock.replay(tokens[0], tokens[1], tokens[2]); \r\n        EasyMock.replay(extensions[0], extensions[1], extensions[2]);\n        TestCallbackHandler testTokenCallbackHandler = new TestCallbackHandler(tokens, extensions);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule3 = new OAuthBearerLoginModule();\n        loginModule3.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule2.abort();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule2.commit();\n        \r\n        assertEquals(2, privateCredentials.size());\n        Iterator<Object> iterator = privateCredentials.iterator();\n        assertNotSame(tokens[1], iterator.next());\n        assertNotSame(tokens[1], iterator.next());\n        assertEquals(2, publicCredentials.size());\n        Iterator<Object> publicIterator = publicCredentials.iterator();\n        assertNotSame(extensions[1], publicIterator.next());\n        assertNotSame(extensions[1], publicIterator.next());\n        loginModule1.logout();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[2], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[2], publicCredentials.iterator().next());\n    }\n","date":"2018-08-07 00:22:04","endLine":405,"groupId":"12183","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"login1Commit1Login2Abort2Login3Commit3Logout3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a9/620fa69378b239b499a65fd67ad9abba132ff3.src","preCode":"    public void login1Commit1Login2Abort2Login3Commit3Logout3() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {EasyMock.mock(OAuthBearerToken.class),\n            EasyMock.mock(OAuthBearerToken.class), EasyMock.mock(OAuthBearerToken.class)};\n        EasyMock.replay(tokens[0], tokens[1], tokens[2]); \r\n        TestTokenCallbackHandler testTokenCallbackHandler = new TestTokenCallbackHandler(tokens);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule3 = new OAuthBearerLoginModule();\n        loginModule3.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        loginModule2.abort();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        loginModule2.commit();\n        \r\n        assertEquals(2, privateCredentials.size());\n        Iterator<Object> iterator = privateCredentials.iterator();\n        assertNotSame(tokens[1], iterator.next());\n        assertNotSame(tokens[1], iterator.next());\n        loginModule1.logout();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[2], privateCredentials.iterator().next());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerLoginModuleTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"}],"commitId":"518e9d3eee1b1d2c8c76d68e043edd3cf49139fa","commitMessage":"@@@KAFKA-7169: Custom SASL extensions for OAuthBearer authentication mechanism (KIP-342) (#5379)\n\nReviewers: Ron Dagostino <rndgstn@gmail.com>.  Rajini Sivaram <rajinisivaram@googlemail.com>\n","date":"2018-08-07 00:22:04","modifiedFileCount":"16","status":"M","submitter":"Stanislav Kozlovski"},{"authorTime":"2018-09-10 05:25:30","codes":[{"authorDate":"2018-09-10 05:25:30","commitOrder":3,"curCode":"    public void login1Commit1Logout1Login2Commit2Logout2() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n        Set<Object> publicCredentials = subject.getPublicCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {EasyMock.mock(OAuthBearerToken.class),\n            EasyMock.mock(OAuthBearerToken.class)};\n        SaslExtensions[] extensions = new SaslExtensions[] {EasyMock.mock(SaslExtensions.class),\n            EasyMock.mock(SaslExtensions.class)};\n        EasyMock.replay(tokens[0], tokens[1]); \r\n        EasyMock.replay(extensions[0], extensions[1]);\n        TestCallbackHandler testTokenCallbackHandler = new TestCallbackHandler(tokens, extensions);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule1.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n\n        loginModule2.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule2.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[1], privateCredentials.iterator().next());\n        assertSame(extensions[1], publicCredentials.iterator().next());\n        loginModule2.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n    }\n","date":"2018-09-10 05:25:30","endLine":271,"groupId":"14389","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"login1Commit1Logout1Login2Commit2Logout2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/51/d60123c7f145c96160d2589c61759a5e2aff6a.src","preCode":"    public void login1Commit1Logout1Login2Commit2Logout2() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n        Set<Object> publicCredentials = subject.getPublicCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {EasyMock.mock(OAuthBearerToken.class),\n            EasyMock.mock(OAuthBearerToken.class)};\n        SaslExtensions[] extensions = new SaslExtensions[] {EasyMock.mock(SaslExtensions.class),\n            EasyMock.mock(SaslExtensions.class)};\n        EasyMock.replay(tokens[0], tokens[1]); \r\n        EasyMock.replay(extensions[0], extensions[1]);\n        TestCallbackHandler testTokenCallbackHandler = new TestCallbackHandler(tokens, extensions);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule1.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n\n        loginModule2.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule2.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[1], privateCredentials.iterator().next());\n        assertSame(extensions[1], publicCredentials.iterator().next());\n        loginModule2.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerLoginModuleTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2018-09-10 05:25:30","commitOrder":3,"curCode":"    public void login1Commit1Login2Abort2Login3Commit3Logout3() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n        Set<Object> publicCredentials = subject.getPublicCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {EasyMock.mock(OAuthBearerToken.class),\n            EasyMock.mock(OAuthBearerToken.class), EasyMock.mock(OAuthBearerToken.class)};\n        SaslExtensions[] extensions = new SaslExtensions[] {EasyMock.mock(SaslExtensions.class),\n            EasyMock.mock(SaslExtensions.class), EasyMock.mock(SaslExtensions.class)};\n        EasyMock.replay(tokens[0], tokens[1], tokens[2]); \r\n        EasyMock.replay(extensions[0], extensions[1], extensions[2]);\n        TestCallbackHandler testTokenCallbackHandler = new TestCallbackHandler(tokens, extensions);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule3 = new OAuthBearerLoginModule();\n        loginModule3.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule2.abort();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule2.commit();\n        \r\n        assertEquals(2, privateCredentials.size());\n        Iterator<Object> iterator = privateCredentials.iterator();\n        assertNotSame(tokens[1], iterator.next());\n        assertNotSame(tokens[1], iterator.next());\n        assertEquals(2, publicCredentials.size());\n        Iterator<Object> publicIterator = publicCredentials.iterator();\n        assertNotSame(extensions[1], publicIterator.next());\n        assertNotSame(extensions[1], publicIterator.next());\n        loginModule1.logout();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[2], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[2], publicCredentials.iterator().next());\n    }\n","date":"2018-09-10 05:25:30","endLine":405,"groupId":"12183","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"login1Commit1Login2Abort2Login3Commit3Logout3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/51/d60123c7f145c96160d2589c61759a5e2aff6a.src","preCode":"    public void login1Commit1Login2Abort2Login3Commit3Logout3() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n        Set<Object> publicCredentials = subject.getPublicCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {EasyMock.mock(OAuthBearerToken.class),\n            EasyMock.mock(OAuthBearerToken.class), EasyMock.mock(OAuthBearerToken.class)};\n        SaslExtensions[] extensions = new SaslExtensions[] {EasyMock.mock(SaslExtensions.class),\n            EasyMock.mock(SaslExtensions.class), EasyMock.mock(SaslExtensions.class)};\n        EasyMock.replay(tokens[0], tokens[1], tokens[2]); \r\n        EasyMock.replay(extensions[0], extensions[1], extensions[2]);\n        TestCallbackHandler testTokenCallbackHandler = new TestCallbackHandler(tokens, extensions);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n        OAuthBearerLoginModule loginModule3 = new OAuthBearerLoginModule();\n        loginModule3.initialize(subject, testTokenCallbackHandler, Collections.<String, Object>emptyMap(),\n                Collections.<String, Object>emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule2.abort();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule2.commit();\n        \r\n        assertEquals(2, privateCredentials.size());\n        Iterator<Object> iterator = privateCredentials.iterator();\n        assertNotSame(tokens[1], iterator.next());\n        assertNotSame(tokens[1], iterator.next());\n        assertEquals(2, publicCredentials.size());\n        Iterator<Object> publicIterator = publicCredentials.iterator();\n        assertNotSame(extensions[1], publicIterator.next());\n        assertNotSame(extensions[1], publicIterator.next());\n        loginModule1.logout();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[2], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[2], publicCredentials.iterator().next());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerLoginModuleTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"}],"commitId":"b8651d4e82d45463d2c71798bd5852f8a605b440","commitMessage":"@@@MINOR: Code cleanup of 'clients' module (#5427)\n\nCleanup involves:\n* Refactoring to use Java 8 constructs (lambdas. \ndiamond for `empty` collection methods) and library\nmethods (`computeIfAbsent`)\n* Simplifying code (including unnecessarily complex\n`equals` and `hashCode` implementations)\n* Removing redundant code\n* Fixing typos\n\nReviewers: Ryanne Dolan.  Ismael Juma <ismael@juma.me.uk>","date":"2018-09-10 05:25:30","modifiedFileCount":"96","status":"M","submitter":"Vahid Hashemian"},{"authorTime":"2018-10-10 06:55:09","codes":[{"authorDate":"2018-10-10 06:55:09","commitOrder":4,"curCode":"    public void login1Commit1Logout1Login2Commit2Logout2() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n        Set<Object> publicCredentials = subject.getPublicCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {mock(OAuthBearerToken.class),\n            mock(OAuthBearerToken.class)};\n        SaslExtensions[] extensions = new SaslExtensions[] {mock(SaslExtensions.class),\n            mock(SaslExtensions.class)};\n        TestCallbackHandler testTokenCallbackHandler = new TestCallbackHandler(tokens, extensions);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule1.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n\n        loginModule2.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule2.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[1], privateCredentials.iterator().next());\n        assertSame(extensions[1], publicCredentials.iterator().next());\n        loginModule2.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n\n        verifyZeroInteractions((Object[]) tokens);\n        verifyZeroInteractions((Object[]) extensions);\n    }\n","date":"2018-10-10 06:55:09","endLine":274,"groupId":"14389","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"login1Commit1Logout1Login2Commit2Logout2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/cde99b704cedc575dc8a082a367379930a2d75.src","preCode":"    public void login1Commit1Logout1Login2Commit2Logout2() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n        Set<Object> publicCredentials = subject.getPublicCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {EasyMock.mock(OAuthBearerToken.class),\n            EasyMock.mock(OAuthBearerToken.class)};\n        SaslExtensions[] extensions = new SaslExtensions[] {EasyMock.mock(SaslExtensions.class),\n            EasyMock.mock(SaslExtensions.class)};\n        EasyMock.replay(tokens[0], tokens[1]); \r\n        EasyMock.replay(extensions[0], extensions[1]);\n        TestCallbackHandler testTokenCallbackHandler = new TestCallbackHandler(tokens, extensions);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule1.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n\n        loginModule2.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule2.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[1], privateCredentials.iterator().next());\n        assertSame(extensions[1], publicCredentials.iterator().next());\n        loginModule2.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerLoginModuleTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2018-10-10 06:55:09","commitOrder":4,"curCode":"    public void login1Commit1Login2Abort2Login3Commit3Logout3() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n        Set<Object> publicCredentials = subject.getPublicCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {mock(OAuthBearerToken.class),\n            mock(OAuthBearerToken.class), mock(OAuthBearerToken.class)};\n        SaslExtensions[] extensions = new SaslExtensions[] {mock(SaslExtensions.class),\n            mock(SaslExtensions.class), mock(SaslExtensions.class)};\n        TestCallbackHandler testTokenCallbackHandler = new TestCallbackHandler(tokens, extensions);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule3 = new OAuthBearerLoginModule();\n        loginModule3.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule2.abort();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule2.commit();\n        \r\n        assertEquals(2, privateCredentials.size());\n        Iterator<Object> iterator = privateCredentials.iterator();\n        assertNotSame(tokens[1], iterator.next());\n        assertNotSame(tokens[1], iterator.next());\n        assertEquals(2, publicCredentials.size());\n        Iterator<Object> publicIterator = publicCredentials.iterator();\n        assertNotSame(extensions[1], publicIterator.next());\n        assertNotSame(extensions[1], publicIterator.next());\n        loginModule1.logout();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[2], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[2], publicCredentials.iterator().next());\n\n        verifyZeroInteractions((Object[]) tokens);\n        verifyZeroInteractions((Object[]) extensions);\n    }\n","date":"2018-10-10 06:55:09","endLine":410,"groupId":"12183","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"login1Commit1Login2Abort2Login3Commit3Logout3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/cde99b704cedc575dc8a082a367379930a2d75.src","preCode":"    public void login1Commit1Login2Abort2Login3Commit3Logout3() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n        Set<Object> publicCredentials = subject.getPublicCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {EasyMock.mock(OAuthBearerToken.class),\n            EasyMock.mock(OAuthBearerToken.class), EasyMock.mock(OAuthBearerToken.class)};\n        SaslExtensions[] extensions = new SaslExtensions[] {EasyMock.mock(SaslExtensions.class),\n            EasyMock.mock(SaslExtensions.class), EasyMock.mock(SaslExtensions.class)};\n        EasyMock.replay(tokens[0], tokens[1], tokens[2]); \r\n        EasyMock.replay(extensions[0], extensions[1], extensions[2]);\n        TestCallbackHandler testTokenCallbackHandler = new TestCallbackHandler(tokens, extensions);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule3 = new OAuthBearerLoginModule();\n        loginModule3.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule2.abort();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule2.commit();\n        \r\n        assertEquals(2, privateCredentials.size());\n        Iterator<Object> iterator = privateCredentials.iterator();\n        assertNotSame(tokens[1], iterator.next());\n        assertNotSame(tokens[1], iterator.next());\n        assertEquals(2, publicCredentials.size());\n        Iterator<Object> publicIterator = publicCredentials.iterator();\n        assertNotSame(extensions[1], publicIterator.next());\n        assertNotSame(extensions[1], publicIterator.next());\n        loginModule1.logout();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[2], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[2], publicCredentials.iterator().next());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerLoginModuleTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"}],"commitId":"578205cadd0bf64d671c6c162229c4975081a9d6","commitMessage":"@@@KAFKA-7439; Replace EasyMock and PowerMock with Mockito in clients module\n\nDevelopment of EasyMock and PowerMock has stagnated while Mockito\ncontinues to be actively developed. With the new Java release cadence. \nit's a problem to depend on libraries that do bytecode manipulation\nand are not actively maintained. In addition.  Mockito is also\neasier to use.\n\nWhile updating the tests.  I attempted to go from failing test to\npassing test. In cases where the updated test passed on the first\nattempt.  I artificially broke it to ensure the test was still doing its\njob.\n\nI included a few improvements that were helpful while making these\nchanges:\n\n1. Better exception if there are no nodes in `leastLoadedNodes`\n2. Always close the producer in `KafkaProducerTest`\n3. requestsInFlight producer metric should not hold a reference to\n`Sender`\n\nFinally.  `Metadata` is no longer final so that we don't need\n`PowerMock` to mock it. It's an internal class.  so it's OK.\n\nAuthor: Ismael Juma <ismael@juma.me.uk>\n\nReviewers: Viktor Somogyi <viktorsomogyi@gmail.com>.  Dong Lin <lindong28@gmail.com>\n\nCloses #5691 from ijuma/kafka-7438-mockito\n","date":"2018-10-10 06:55:09","modifiedFileCount":"19","status":"M","submitter":"Ismael Juma"},{"authorTime":"2020-01-09 08:25:20","codes":[{"authorDate":"2020-01-09 08:25:20","commitOrder":5,"curCode":"    public void login1Commit1Logout1Login2Commit2Logout2() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n        Set<Object> publicCredentials = subject.getPublicCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {mock(OAuthBearerToken.class),\n            mock(OAuthBearerToken.class)};\n        SaslExtensions[] extensions = new SaslExtensions[] {mock(SaslExtensions.class),\n            mock(SaslExtensions.class)};\n        TestCallbackHandler testTokenCallbackHandler = new TestCallbackHandler(tokens, extensions);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule1.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n\n        loginModule2.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule2.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[1], privateCredentials.iterator().next());\n        assertSame(extensions[1], publicCredentials.iterator().next());\n        loginModule2.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n\n        verifyNoInteractions((Object[]) tokens);\n        verifyNoInteractions((Object[]) extensions);\n    }\n","date":"2020-01-09 08:25:20","endLine":274,"groupId":"103234","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"login1Commit1Logout1Login2Commit2Logout2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7c/6d998bd3e41795f9b1495d9f6ebe9ff59b1fdb.src","preCode":"    public void login1Commit1Logout1Login2Commit2Logout2() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n        Set<Object> publicCredentials = subject.getPublicCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {mock(OAuthBearerToken.class),\n            mock(OAuthBearerToken.class)};\n        SaslExtensions[] extensions = new SaslExtensions[] {mock(SaslExtensions.class),\n            mock(SaslExtensions.class)};\n        TestCallbackHandler testTokenCallbackHandler = new TestCallbackHandler(tokens, extensions);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule1.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n\n        loginModule2.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule2.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[1], privateCredentials.iterator().next());\n        assertSame(extensions[1], publicCredentials.iterator().next());\n        loginModule2.logout();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n\n        verifyZeroInteractions((Object[]) tokens);\n        verifyZeroInteractions((Object[]) extensions);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerLoginModuleTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2020-01-09 08:25:20","commitOrder":5,"curCode":"    public void login1Commit1Login2Abort2Login3Commit3Logout3() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n        Set<Object> publicCredentials = subject.getPublicCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {mock(OAuthBearerToken.class),\n            mock(OAuthBearerToken.class), mock(OAuthBearerToken.class)};\n        SaslExtensions[] extensions = new SaslExtensions[] {mock(SaslExtensions.class),\n            mock(SaslExtensions.class), mock(SaslExtensions.class)};\n        TestCallbackHandler testTokenCallbackHandler = new TestCallbackHandler(tokens, extensions);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule3 = new OAuthBearerLoginModule();\n        loginModule3.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule2.abort();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule2.commit();\n        \r\n        assertEquals(2, privateCredentials.size());\n        Iterator<Object> iterator = privateCredentials.iterator();\n        assertNotSame(tokens[1], iterator.next());\n        assertNotSame(tokens[1], iterator.next());\n        assertEquals(2, publicCredentials.size());\n        Iterator<Object> publicIterator = publicCredentials.iterator();\n        assertNotSame(extensions[1], publicIterator.next());\n        assertNotSame(extensions[1], publicIterator.next());\n        loginModule1.logout();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[2], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[2], publicCredentials.iterator().next());\n\n        verifyNoInteractions((Object[]) tokens);\n        verifyNoInteractions((Object[]) extensions);\n    }\n","date":"2020-01-09 08:25:20","endLine":410,"groupId":"103234","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"login1Commit1Login2Abort2Login3Commit3Logout3","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7c/6d998bd3e41795f9b1495d9f6ebe9ff59b1fdb.src","preCode":"    public void login1Commit1Login2Abort2Login3Commit3Logout3() throws LoginException {\n        \r\n\r\n\r\n\n        Subject subject = new Subject();\n        Set<Object> privateCredentials = subject.getPrivateCredentials();\n        Set<Object> publicCredentials = subject.getPublicCredentials();\n\n        \r\n        OAuthBearerToken[] tokens = new OAuthBearerToken[] {mock(OAuthBearerToken.class),\n            mock(OAuthBearerToken.class), mock(OAuthBearerToken.class)};\n        SaslExtensions[] extensions = new SaslExtensions[] {mock(SaslExtensions.class),\n            mock(SaslExtensions.class), mock(SaslExtensions.class)};\n        TestCallbackHandler testTokenCallbackHandler = new TestCallbackHandler(tokens, extensions);\n\n        \r\n        OAuthBearerLoginModule loginModule1 = new OAuthBearerLoginModule();\n        loginModule1.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule2 = new OAuthBearerLoginModule();\n        loginModule2.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n        OAuthBearerLoginModule loginModule3 = new OAuthBearerLoginModule();\n        loginModule3.initialize(subject, testTokenCallbackHandler, Collections.emptyMap(),\n                Collections.emptyMap());\n\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.login();\n        \r\n        assertEquals(0, privateCredentials.size());\n        assertEquals(0, publicCredentials.size());\n        loginModule1.commit();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertEquals(1, publicCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule2.abort();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n\n        \r\n        loginModule2.login();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[0], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[0], publicCredentials.iterator().next());\n        loginModule2.commit();\n        \r\n        assertEquals(2, privateCredentials.size());\n        Iterator<Object> iterator = privateCredentials.iterator();\n        assertNotSame(tokens[1], iterator.next());\n        assertNotSame(tokens[1], iterator.next());\n        assertEquals(2, publicCredentials.size());\n        Iterator<Object> publicIterator = publicCredentials.iterator();\n        assertNotSame(extensions[1], publicIterator.next());\n        assertNotSame(extensions[1], publicIterator.next());\n        loginModule1.logout();\n        \r\n        assertEquals(1, privateCredentials.size());\n        assertSame(tokens[2], privateCredentials.iterator().next());\n        assertEquals(1, publicCredentials.size());\n        assertSame(extensions[2], publicCredentials.iterator().next());\n\n        verifyZeroInteractions((Object[]) tokens);\n        verifyZeroInteractions((Object[]) extensions);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/oauthbearer/OAuthBearerLoginModuleTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"}],"commitId":"a024e679c7207aee2242d72aef53dc441c60ca27","commitMessage":"@@@MINOR: Update dependencies for Kafka 2.5 (#7909)\n\nNoteworthy:\n* zstd decompression speed improvement of ~10%:\nhttps://github.com/facebook/zstd/releases/tag/v1.4.4\n* EasyMock.  PowerMock and Mockito: improved support for Java 13.\n* Replace usage of method deprecated by Mockito.\n* Gradle plugins updated to versions that require Gradle 5.x.  this is\nfine since we no longer depend on the installed Gradle version.\n* Fixed build not to depend on methods deprecated in Gradle 5.x\n(fixes KAFKA-8786).\n* Reflections 0.9.12 no longer depends on Guava (fixes KAFKA-3061).\n* Updated `OptimizedKTableIntegrationTest` to pass with new version\nof Hamcrest.\n* Several Jetty improvements and bug fixes:\n   - https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.21.v20190926\n   - https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.22.v20191022\n   - https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.23.v20191118\n   - https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.24.v20191120\n   - https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.25.v20191220\n\nNote that I did not upgrade lz4 due to https://github.com/lz4/lz4-java/issues/156.\n\nReviewers: Manikumar Reddy <manikumar.reddy@gmail.com>\n\nCo-authored-by: Ismael Juma <ismael@juma.me.uk>\nCo-authored-by: Aljoscha <aljoscha.poertner@posteo.de>","date":"2020-01-09 08:25:20","modifiedFileCount":"2","status":"M","submitter":"Ismael Juma"}]
