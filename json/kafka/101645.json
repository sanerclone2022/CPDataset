[{"authorTime":"2019-10-04 06:59:31","codes":[{"authorDate":"2019-10-04 06:59:31","commitOrder":1,"curCode":"    public void ShouldSerdeWithNonNullsTest() {\n        final long[] hashedValue = Murmur3.hash128(new byte[] {(byte) 0x01, (byte) 0x9A, (byte) 0xFF, (byte) 0x00});\n        final String foreignValue = \"foreignValue\";\n        final SubscriptionResponseWrapper<String> srw = new SubscriptionResponseWrapper<>(hashedValue, foreignValue);\n        final SubscriptionResponseWrapperSerde srwSerde = new SubscriptionResponseWrapperSerde(Serdes.String());\n        final byte[] serResponse = srwSerde.serializer().serialize(null, srw);\n        final SubscriptionResponseWrapper<String> result = (SubscriptionResponseWrapper<String>) srwSerde.deserializer().deserialize(null, serResponse);\n\n        assertArrayEquals(hashedValue, result.getOriginalValueHash());\n        assertEquals(foreignValue, result.getForeignValue());\n    }\n","date":"2019-10-04 06:59:31","endLine":42,"groupId":"7409","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"ShouldSerdeWithNonNullsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fd/e9bddfac37d7e0809f669d6ee9d3210ff54a12.src","preCode":"    public void ShouldSerdeWithNonNullsTest() {\n        final long[] hashedValue = Murmur3.hash128(new byte[] {(byte) 0x01, (byte) 0x9A, (byte) 0xFF, (byte) 0x00});\n        final String foreignValue = \"foreignValue\";\n        final SubscriptionResponseWrapper<String> srw = new SubscriptionResponseWrapper<>(hashedValue, foreignValue);\n        final SubscriptionResponseWrapperSerde srwSerde = new SubscriptionResponseWrapperSerde(Serdes.String());\n        final byte[] serResponse = srwSerde.serializer().serialize(null, srw);\n        final SubscriptionResponseWrapper<String> result = (SubscriptionResponseWrapper<String>) srwSerde.deserializer().deserialize(null, serResponse);\n\n        assertArrayEquals(hashedValue, result.getOriginalValueHash());\n        assertEquals(foreignValue, result.getForeignValue());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResponseWrapperSerdeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"B"},{"authorDate":"2019-10-04 06:59:31","commitOrder":1,"curCode":"    public void shouldSerdeWithNullHashTest() {\n        final long[] hashedValue = null;\n        final String foreignValue = \"foreignValue\";\n        final SubscriptionResponseWrapper<String> srw = new SubscriptionResponseWrapper<>(hashedValue, foreignValue);\n        final SubscriptionResponseWrapperSerde srwSerde = new SubscriptionResponseWrapperSerde(Serdes.String());\n        final byte[] serResponse = srwSerde.serializer().serialize(null, srw);\n        final SubscriptionResponseWrapper<String> result = (SubscriptionResponseWrapper<String>) srwSerde.deserializer().deserialize(null, serResponse);\n\n        assertArrayEquals(hashedValue, result.getOriginalValueHash());\n        assertEquals(foreignValue, result.getForeignValue());\n    }\n","date":"2019-10-04 06:59:31","endLine":69,"groupId":"7409","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSerdeWithNullHashTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fd/e9bddfac37d7e0809f669d6ee9d3210ff54a12.src","preCode":"    public void shouldSerdeWithNullHashTest() {\n        final long[] hashedValue = null;\n        final String foreignValue = \"foreignValue\";\n        final SubscriptionResponseWrapper<String> srw = new SubscriptionResponseWrapper<>(hashedValue, foreignValue);\n        final SubscriptionResponseWrapperSerde srwSerde = new SubscriptionResponseWrapperSerde(Serdes.String());\n        final byte[] serResponse = srwSerde.serializer().serialize(null, srw);\n        final SubscriptionResponseWrapper<String> result = (SubscriptionResponseWrapper<String>) srwSerde.deserializer().deserialize(null, serResponse);\n\n        assertArrayEquals(hashedValue, result.getOriginalValueHash());\n        assertEquals(foreignValue, result.getForeignValue());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResponseWrapperSerdeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"c87fe9402cbebc460b42cd3dd7c268e5e6e659d9","commitMessage":"@@@KAFKA-3705 Added a foreignKeyJoin implementation for KTable. (#5527)\n\nhttps://issues.apache.org/jira/browse/KAFKA-3705\n\nAllows for a KTable to map its value to a given foreign key and join on another KTable keyed on that foreign key. Applies the joiner.  then returns the tuples keyed on the original key. This supports updates from both sides of the join.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Matthias J. Sax <mjsax@apache.org>.   John Roesler <john@confluent.io>.  Boyang Chen <boyang@confluent.io>.  Christopher Pettitt <cpettitt@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>.  Jan Filipiak <Jan.Filipiak@trivago.com>.  pgwhalen.  Alexei Daniline","date":"2019-10-04 06:59:31","modifiedFileCount":"15","status":"B","submitter":"Adam Bellemare"},{"authorTime":"2019-10-17 00:34:52","codes":[{"authorDate":"2019-10-17 00:34:52","commitOrder":2,"curCode":"    public void ShouldSerdeWithNonNullsTest() {\n        final long[] hashedValue = Murmur3.hash128(new byte[] {(byte) 0x01, (byte) 0x9A, (byte) 0xFF, (byte) 0x00});\n        final String foreignValue = \"foreignValue\";\n        final SubscriptionResponseWrapper<String> srw = new SubscriptionResponseWrapper<>(hashedValue, foreignValue);\n        final SubscriptionResponseWrapperSerde<String> srwSerde = new SubscriptionResponseWrapperSerde(new NonNullableSerde(Serdes.String()));\n        final byte[] serResponse = srwSerde.serializer().serialize(null, srw);\n        final SubscriptionResponseWrapper<String> result = srwSerde.deserializer().deserialize(null, serResponse);\n\n        assertArrayEquals(hashedValue, result.getOriginalValueHash());\n        assertEquals(foreignValue, result.getForeignValue());\n    }\n","date":"2019-10-17 00:34:52","endLine":85,"groupId":"101645","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"ShouldSerdeWithNonNullsTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/948e33a2f2b328f66382369da8a2ab3d5bf36b.src","preCode":"    public void ShouldSerdeWithNonNullsTest() {\n        final long[] hashedValue = Murmur3.hash128(new byte[] {(byte) 0x01, (byte) 0x9A, (byte) 0xFF, (byte) 0x00});\n        final String foreignValue = \"foreignValue\";\n        final SubscriptionResponseWrapper<String> srw = new SubscriptionResponseWrapper<>(hashedValue, foreignValue);\n        final SubscriptionResponseWrapperSerde srwSerde = new SubscriptionResponseWrapperSerde(Serdes.String());\n        final byte[] serResponse = srwSerde.serializer().serialize(null, srw);\n        final SubscriptionResponseWrapper<String> result = (SubscriptionResponseWrapper<String>) srwSerde.deserializer().deserialize(null, serResponse);\n\n        assertArrayEquals(hashedValue, result.getOriginalValueHash());\n        assertEquals(foreignValue, result.getForeignValue());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResponseWrapperSerdeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2019-10-17 00:34:52","commitOrder":2,"curCode":"    public void shouldSerdeWithNullHashTest() {\n        final long[] hashedValue = null;\n        final String foreignValue = \"foreignValue\";\n        final SubscriptionResponseWrapper<String> srw = new SubscriptionResponseWrapper<>(hashedValue, foreignValue);\n        final SubscriptionResponseWrapperSerde<String> srwSerde = new SubscriptionResponseWrapperSerde(new NonNullableSerde(Serdes.String()));\n        final byte[] serResponse = srwSerde.serializer().serialize(null, srw);\n        final SubscriptionResponseWrapper<String> result = srwSerde.deserializer().deserialize(null, serResponse);\n\n        assertArrayEquals(hashedValue, result.getOriginalValueHash());\n        assertEquals(foreignValue, result.getForeignValue());\n    }\n","date":"2019-10-17 00:34:52","endLine":112,"groupId":"101645","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSerdeWithNullHashTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/948e33a2f2b328f66382369da8a2ab3d5bf36b.src","preCode":"    public void shouldSerdeWithNullHashTest() {\n        final long[] hashedValue = null;\n        final String foreignValue = \"foreignValue\";\n        final SubscriptionResponseWrapper<String> srw = new SubscriptionResponseWrapper<>(hashedValue, foreignValue);\n        final SubscriptionResponseWrapperSerde srwSerde = new SubscriptionResponseWrapperSerde(Serdes.String());\n        final byte[] serResponse = srwSerde.serializer().serialize(null, srw);\n        final SubscriptionResponseWrapper<String> result = (SubscriptionResponseWrapper<String>) srwSerde.deserializer().deserialize(null, serResponse);\n\n        assertArrayEquals(hashedValue, result.getOriginalValueHash());\n        assertEquals(foreignValue, result.getForeignValue());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/foreignkeyjoin/SubscriptionResponseWrapperSerdeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"072503527e292ed8aeb19edf7a05089581152007","commitMessage":"@@@KAFKA-9032: Bypass serdes for tombstones (#7518)\n\nIn a KTable context.  null record values have a special \"tombstone\" significance. We should always bypass the serdes for such tombstones.  since otherwise the serde could violate Streams' table semantics.\n\nAdded test coverage for this case and fixed the code accordingly.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>.  Bill Bejeck <bill@confluent.io>","date":"2019-10-17 00:34:52","modifiedFileCount":"2","status":"M","submitter":"John Roesler"}]
