[{"authorTime":"2020-09-01 06:22:00","codes":[{"authorDate":"2019-12-13 02:52:24","commitOrder":2,"curCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n            .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n            .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(TimeWindows.of(ofMillis(500L)));\n    }\n","date":"2019-12-13 02:52:24","endLine":82,"groupId":"18617","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/9b6edda177029ce7e9f61325f749c28f9c93c0.src","preCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n            .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n            .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(TimeWindows.of(ofMillis(500L)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/TimeWindowedCogroupedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"NB"},{"authorDate":"2020-09-01 06:22:00","commitOrder":2,"curCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n                .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n                .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(SlidingWindows.withTimeDifferenceAndGrace(ofMillis(500L), ofMillis(2000L)));\n    }\n","date":"2020-09-01 06:22:00","endLine":82,"groupId":"18617","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/ac960e3ea7cec606328beb5f1e104118b3a0d9.src","preCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n                .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n                .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(SlidingWindows.withTimeDifferenceAndGrace(ofMillis(500L), ofMillis(2000L)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/SlidingWindowedCogroupedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"}],"commitId":"85b6545b8159885c57ab67e08b7185be8a607988","commitMessage":"@@@KAFKA-5636: SlidingWindows (KIP-450) (#9039)\n\nAdd SlidingWindows API.  implementation.  and tests.\nAn edge case and an optimization are left to follow-on work.\n\nImplements: KIP-450\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Matthias J. Sax <mjsax@apache.org>.  John Roesler <vvcephei@apache.org>","date":"2020-09-01 06:22:00","modifiedFileCount":"13","status":"M","submitter":"leah"},{"authorTime":"2020-09-01 06:22:00","codes":[{"authorDate":"2021-02-02 08:20:35","commitOrder":3,"curCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n            .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n            .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(TimeWindows.of(ofMillis(WINDOW_SIZE)));\n    }\n","date":"2021-02-02 08:20:35","endLine":82,"groupId":"18617","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d0/52429767b7b9a08786b8c4f7ba9e4c460a9c43.src","preCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n            .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n            .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(TimeWindows.of(ofMillis(500L)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/TimeWindowedCogroupedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-09-01 06:22:00","commitOrder":3,"curCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n                .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n                .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(SlidingWindows.withTimeDifferenceAndGrace(ofMillis(500L), ofMillis(2000L)));\n    }\n","date":"2020-09-01 06:22:00","endLine":82,"groupId":"18617","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/ac960e3ea7cec606328beb5f1e104118b3a0d9.src","preCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n                .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n                .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(SlidingWindows.withTimeDifferenceAndGrace(ofMillis(500L), ofMillis(2000L)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/SlidingWindowedCogroupedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"}],"commitId":"f5a2fbac6d26fc1613ec34d9764a1e86732f0a45","commitMessage":"@@@KAFKA-10366 & KAFKA-9649: Implement KIP-659 to allow TimeWindowedDeserializer and TimeWindowedSerde to handle window size (#9253)\n\nSee KIP details and discussions here: https://cwiki.apache.org/confluence/display/KAFKA/KIP-659%3A+Improve+TimeWindowedDeserializer+and+TimeWindowedSerde+to+handle+window+size\n\nDeprecates methods that allow users to skip setting a window size when one is needed. Adds a window size streams config to allow the timeWindowedDeserializer to calculate window end time.\n\nReviewers: Walker Carlson <wcarlson@confluent.io>.  John Roesler <vvcephei@apache.org>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-02-02 08:20:35","modifiedFileCount":"9","status":"M","submitter":"leah"},{"authorTime":"2021-05-23 05:22:42","codes":[{"authorDate":"2021-02-02 08:20:35","commitOrder":4,"curCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n            .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n            .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(TimeWindows.of(ofMillis(WINDOW_SIZE)));\n    }\n","date":"2021-02-02 08:20:35","endLine":82,"groupId":"18617","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d0/52429767b7b9a08786b8c4f7ba9e4c460a9c43.src","preCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n            .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n            .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(TimeWindows.of(ofMillis(WINDOW_SIZE)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/TimeWindowedCogroupedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2021-05-23 05:22:42","commitOrder":4,"curCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n                .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n                .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(SlidingWindows.withTimeDifferenceAndGrace(ofMillis(\n            WINDOW_SIZE_MS), ofMillis(2000L)));\n    }\n","date":"2021-05-23 05:22:42","endLine":86,"groupId":"18617","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/06341eb86c5e10ffbd940737a0a00f3137fb9a.src","preCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n                .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n                .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(SlidingWindows.withTimeDifferenceAndGrace(ofMillis(500L), ofMillis(2000L)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/SlidingWindowedCogroupedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"47796d2f8781447c8e7de716841db438cde9cc3c","commitMessage":"@@@MINOR: Fix deprecation warnings in SlidingWindowedCogroupedKStreamImplTest (#10703)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-05-23 05:22:42","modifiedFileCount":"1","status":"M","submitter":"Ismael Juma"},{"authorTime":"2021-05-26 14:43:33","codes":[{"authorDate":"2021-02-02 08:20:35","commitOrder":5,"curCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n            .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n            .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(TimeWindows.of(ofMillis(WINDOW_SIZE)));\n    }\n","date":"2021-02-02 08:20:35","endLine":82,"groupId":"101388","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d0/52429767b7b9a08786b8c4f7ba9e4c460a9c43.src","preCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n            .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n            .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(TimeWindows.of(ofMillis(WINDOW_SIZE)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/TimeWindowedCogroupedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2021-05-26 14:43:33","commitOrder":5,"curCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n                .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n                .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        final KGroupedStream<String, String> groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        final CogroupedKStream<String, String> cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(SlidingWindows.withTimeDifferenceAndGrace(ofMillis(\n            WINDOW_SIZE_MS), ofMillis(2000L)));\n    }\n","date":"2021-05-26 14:43:33","endLine":84,"groupId":"101388","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/d301decade340e60611c647bd230c8852bf643.src","preCode":"    public void setup() {\n        final KStream<String, String> stream = builder.stream(TOPIC, Consumed\n                .with(Serdes.String(), Serdes.String()));\n        final KStream<String, String> stream2 = builder.stream(TOPIC2, Consumed\n                .with(Serdes.String(), Serdes.String()));\n\n        groupedStream = stream.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        groupedStream2 = stream2.groupByKey(Grouped.with(Serdes.String(), Serdes.String()));\n        cogroupedStream = groupedStream.cogroup(MockAggregator.TOSTRING_ADDER)\n                .cogroup(groupedStream2, MockAggregator.TOSTRING_REMOVER);\n        windowedCogroupedStream = cogroupedStream.windowedBy(SlidingWindows.withTimeDifferenceAndGrace(ofMillis(\n            WINDOW_SIZE_MS), ofMillis(2000L)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/SlidingWindowedCogroupedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"77573d88c819753e6409e6f346e1d72172313d7a","commitMessage":"@@@MINOR: add window verification to sliding-window co-group test (#10745)\n\nReviewers: Luke Chen <showuon@gmail.com>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2021-05-26 14:43:33","modifiedFileCount":"1","status":"M","submitter":"Matthias J. Sax"}]
