[{"authorTime":"2021-01-07 06:01:02","codes":[{"authorDate":"2021-01-07 06:01:02","commitOrder":1,"curCode":"    public void shouldProcessRecordsAfterPrepareCommitWhenEosDisabled() {\n        task = createStatelessTask(createConfig(), StreamsConfig.METRICS_LATEST);\n\n        assertFalse(task.process(time.milliseconds()));\n\n        task.addRecords(partition1, asList(\n            getConsumerRecord(partition1, 10),\n            getConsumerRecord(partition1, 20),\n            getConsumerRecord(partition1, 30)\n        ));\n\n        assertTrue(task.process(time.milliseconds()));\n        task.prepareCommit();\n        assertTrue(task.process(time.milliseconds()));\n        task.postCommit(false);\n        assertTrue(task.process(time.milliseconds()));\n\n        assertFalse(task.process(time.milliseconds()));\n    }\n","date":"2021-01-07 06:01:02","endLine":439,"groupId":"8926","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldProcessRecordsAfterPrepareCommitWhenEosDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void shouldProcessRecordsAfterPrepareCommitWhenEosDisabled() {\n        task = createStatelessTask(createConfig(), StreamsConfig.METRICS_LATEST);\n\n        assertFalse(task.process(time.milliseconds()));\n\n        task.addRecords(partition1, asList(\n            getConsumerRecord(partition1, 10),\n            getConsumerRecord(partition1, 20),\n            getConsumerRecord(partition1, 30)\n        ));\n\n        assertTrue(task.process(time.milliseconds()));\n        task.prepareCommit();\n        assertTrue(task.process(time.milliseconds()));\n        task.postCommit(false);\n        assertTrue(task.process(time.milliseconds()));\n\n        assertFalse(task.process(time.milliseconds()));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"B"},{"authorDate":"2021-01-07 06:01:02","commitOrder":1,"curCode":"    public void shouldNotProcessRecordsAfterPrepareCommitWhenEosAlphaEnabled() {\n        task = createStatelessTask(createConfig(StreamsConfig.EXACTLY_ONCE, \"0\"), StreamsConfig.METRICS_LATEST);\n\n        assertFalse(task.process(time.milliseconds()));\n\n        task.addRecords(partition1, asList(\n            getConsumerRecord(partition1, 10),\n            getConsumerRecord(partition1, 20),\n            getConsumerRecord(partition1, 30)\n        ));\n\n        assertTrue(task.process(time.milliseconds()));\n        task.prepareCommit();\n        assertFalse(task.process(time.milliseconds()));\n        task.postCommit(false);\n        assertTrue(task.process(time.milliseconds()));\n        assertTrue(task.process(time.milliseconds()));\n\n        assertFalse(task.process(time.milliseconds()));\n    }\n","date":"2021-01-07 06:01:02","endLine":461,"groupId":"16269","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotProcessRecordsAfterPrepareCommitWhenEosAlphaEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void shouldNotProcessRecordsAfterPrepareCommitWhenEosAlphaEnabled() {\n        task = createStatelessTask(createConfig(StreamsConfig.EXACTLY_ONCE, \"0\"), StreamsConfig.METRICS_LATEST);\n\n        assertFalse(task.process(time.milliseconds()));\n\n        task.addRecords(partition1, asList(\n            getConsumerRecord(partition1, 10),\n            getConsumerRecord(partition1, 20),\n            getConsumerRecord(partition1, 30)\n        ));\n\n        assertTrue(task.process(time.milliseconds()));\n        task.prepareCommit();\n        assertFalse(task.process(time.milliseconds()));\n        task.postCommit(false);\n        assertTrue(task.process(time.milliseconds()));\n        assertTrue(task.process(time.milliseconds()));\n\n        assertFalse(task.process(time.milliseconds()));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":442,"status":"B"}],"commitId":"22e8e71156762b40ac93e2cbd42eacba00dbfb0c","commitMessage":"@@@KAFKA-9274: Fix commit-TimeoutException handling for EOS (#9800)\n\nIf EOS is enabled and the TX commit fails with a timeout. \nwe should not process more messages (what is ok for non-EOS)\nbecause we don't really know the status of the TX.\nIf the commit was indeed successful.  we won't have an open TX\ncan calling send() would fail with an fatal error.\n\nInstead.  we should retry the (idempotent) commit of the TX. \nand start a new TX afterwards.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  John Roesler <john@confluent.io>","date":"2021-01-07 06:01:02","modifiedFileCount":"2","status":"B","submitter":"Matthias J. Sax"},{"authorTime":"2021-01-28 11:57:20","codes":[{"authorDate":"2021-01-28 11:57:20","commitOrder":2,"curCode":"    public void shouldProcessRecordsAfterPrepareCommitWhenEosDisabled() {\n        task = createSingleSourceStateless(createConfig(), StreamsConfig.METRICS_LATEST);\n\n        assertFalse(task.process(time.milliseconds()));\n\n        task.addRecords(partition1, asList(\n            getConsumerRecordWithOffsetAsTimestamp(partition1, 10),\n            getConsumerRecordWithOffsetAsTimestamp(partition1, 20),\n            getConsumerRecordWithOffsetAsTimestamp(partition1, 30)\n        ));\n\n        assertTrue(task.process(time.milliseconds()));\n        task.prepareCommit();\n        assertTrue(task.process(time.milliseconds()));\n        task.postCommit(false);\n        assertTrue(task.process(time.milliseconds()));\n\n        assertFalse(task.process(time.milliseconds()));\n    }\n","date":"2021-01-28 11:57:20","endLine":459,"groupId":"102053","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldProcessRecordsAfterPrepareCommitWhenEosDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/d0bdc3e8b56c31b405cebd384297e58af121c3.src","preCode":"    public void shouldProcessRecordsAfterPrepareCommitWhenEosDisabled() {\n        task = createStatelessTask(createConfig(), StreamsConfig.METRICS_LATEST);\n\n        assertFalse(task.process(time.milliseconds()));\n\n        task.addRecords(partition1, asList(\n            getConsumerRecord(partition1, 10),\n            getConsumerRecord(partition1, 20),\n            getConsumerRecord(partition1, 30)\n        ));\n\n        assertTrue(task.process(time.milliseconds()));\n        task.prepareCommit();\n        assertTrue(task.process(time.milliseconds()));\n        task.postCommit(false);\n        assertTrue(task.process(time.milliseconds()));\n\n        assertFalse(task.process(time.milliseconds()));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"M"},{"authorDate":"2021-01-28 11:57:20","commitOrder":2,"curCode":"    public void shouldNotProcessRecordsAfterPrepareCommitWhenEosAlphaEnabled() {\n        task = createSingleSourceStateless(createConfig(StreamsConfig.EXACTLY_ONCE, \"0\"), StreamsConfig.METRICS_LATEST);\n\n        assertFalse(task.process(time.milliseconds()));\n\n        task.addRecords(partition1, asList(\n            getConsumerRecordWithOffsetAsTimestamp(partition1, 10),\n            getConsumerRecordWithOffsetAsTimestamp(partition1, 20),\n            getConsumerRecordWithOffsetAsTimestamp(partition1, 30)\n        ));\n\n        assertTrue(task.process(time.milliseconds()));\n        task.prepareCommit();\n        assertFalse(task.process(time.milliseconds()));\n        task.postCommit(false);\n        assertTrue(task.process(time.milliseconds()));\n        assertTrue(task.process(time.milliseconds()));\n\n        assertFalse(task.process(time.milliseconds()));\n    }\n","date":"2021-01-28 11:57:20","endLine":481,"groupId":"102053","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotProcessRecordsAfterPrepareCommitWhenEosAlphaEnabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/d0bdc3e8b56c31b405cebd384297e58af121c3.src","preCode":"    public void shouldNotProcessRecordsAfterPrepareCommitWhenEosAlphaEnabled() {\n        task = createStatelessTask(createConfig(StreamsConfig.EXACTLY_ONCE, \"0\"), StreamsConfig.METRICS_LATEST);\n\n        assertFalse(task.process(time.milliseconds()));\n\n        task.addRecords(partition1, asList(\n            getConsumerRecord(partition1, 10),\n            getConsumerRecord(partition1, 20),\n            getConsumerRecord(partition1, 30)\n        ));\n\n        assertTrue(task.process(time.milliseconds()));\n        task.prepareCommit();\n        assertFalse(task.process(time.milliseconds()));\n        task.postCommit(false);\n        assertTrue(task.process(time.milliseconds()));\n        assertTrue(task.process(time.milliseconds()));\n\n        assertFalse(task.process(time.milliseconds()));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"M"}],"commitId":"4d28391480fd8c547a63af119bba67fceb5d2ede","commitMessage":"@@@KAFKA-10867: Improved task idling (#9840)\n\nUse the new ConsumerRecords.metadata() API to implement\nimproved task idling as described in KIP-695\n\nReviewers: Guozhang Wang <guozhang@apache.org>","date":"2021-01-28 11:57:20","modifiedFileCount":"18","status":"M","submitter":"John Roesler"}]
