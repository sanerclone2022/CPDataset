[{"authorTime":"2015-11-09 14:11:03","codes":[{"authorDate":"2015-11-09 14:11:03","commitOrder":1,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        configStorage.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList());\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","date":"2015-11-09 14:11:03","endLine":213,"groupId":"8113","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/f8fced2b200ce419eff447165684d3c9e6fc33.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        configStorage.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList());\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"},{"authorDate":"2015-11-09 14:11:03","commitOrder":1,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","date":"2015-11-09 14:11:03","endLine":236,"groupId":"6552","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/f8fced2b200ce419eff447165684d3c9e6fc33.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"B"}],"commitId":"f2031d40639ef34c1591c22971394ef41c87652c","commitMessage":"@@@KAFKA-2774: Rename Copycat to Kafka Connect\n\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Gwen Shapira\n\nCloses #456 from ewencp/kafka-2774-rename-copycat\n","date":"2015-11-09 14:11:03","modifiedFileCount":"1","status":"B","submitter":"Ewen Cheslack-Postava"},{"authorTime":"2015-11-09 14:11:03","codes":[{"authorDate":"2016-11-13 08:11:04","commitOrder":2,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        ConnectorFactory connectorFactoryMock = PowerMock.createMock(ConnectorFactory.class);\n        EasyMock.expect(worker.getConnectorFactory()).andStubReturn(connectorFactoryMock);\n        Connector connectorMock = PowerMock.createMock(Connector.class);\n        EasyMock.expect(connectorFactoryMock.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n\n        \r\n        configStorage.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList());\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-11-13 08:11:28","endLine":330,"groupId":"14265","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1d/a4595375eaf1204a0c62eb7959e4d5980cd006.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        configStorage.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList());\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"},{"authorDate":"2015-11-09 14:11:03","commitOrder":2,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","date":"2015-11-09 14:11:03","endLine":236,"groupId":"6552","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/f8fced2b200ce419eff447165684d3c9e6fc33.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"N"}],"commitId":"b7d36b7261ddefea68667a65cc5e2ee0734ed4a1","commitMessage":"@@@KAFKA-3829: Ensure valid configuration prior to creating connector\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Shikhar Bhushan <shikhar@schmizz.net>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1911 from hachikuji/KAFKA-3829\n","date":"2016-11-13 08:11:28","modifiedFileCount":"15","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2015-11-09 14:11:03","codes":[{"authorDate":"2016-12-02 06:42:15","commitOrder":3,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        ConnectorFactory connectorFactoryMock = PowerMock.createMock(ConnectorFactory.class);\n        EasyMock.expect(worker.getConnectorFactory()).andStubReturn(connectorFactoryMock);\n        Connector connectorMock = PowerMock.createMock(Connector.class);\n        EasyMock.expect(connectorFactoryMock.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList());\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-12-02 06:42:15","endLine":331,"groupId":"14265","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5b/e2044b1af3c0e3fd6641ff1261d14cb4f44bff.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        ConnectorFactory connectorFactoryMock = PowerMock.createMock(ConnectorFactory.class);\n        EasyMock.expect(worker.getConnectorFactory()).andStubReturn(connectorFactoryMock);\n        Connector connectorMock = PowerMock.createMock(Connector.class);\n        EasyMock.expect(connectorFactoryMock.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n\n        \r\n        configStorage.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList());\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"},{"authorDate":"2015-11-09 14:11:03","commitOrder":3,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","date":"2015-11-09 14:11:03","endLine":236,"groupId":"6552","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/f8fced2b200ce419eff447165684d3c9e6fc33.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"N"}],"commitId":"b65f9a777d46fbe4edfed8a4c7216dd1e741be53","commitMessage":"@@@KAFKA-3008: Parallel start and stop of connectors and tasks in Connect\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\nAuthor: Konstantine Karantasis <k.karantasis@gmail.com>\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Shikhar Bhushan <shikhar@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1788 from kkonstantine/KAFKA-3008-Parallel-start-and-stop-of-connectors-and-tasks\n","date":"2016-12-02 06:42:15","modifiedFileCount":"7","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2015-11-09 14:11:03","codes":[{"authorDate":"2017-05-19 01:39:15","commitOrder":4,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(Connector.class);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(4);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList());\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-05-19 01:39:15","endLine":346,"groupId":"8113","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/d83c559377ed74525c217b1dae3553f377a9f3.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        ConnectorFactory connectorFactoryMock = PowerMock.createMock(ConnectorFactory.class);\n        EasyMock.expect(worker.getConnectorFactory()).andStubReturn(connectorFactoryMock);\n        Connector connectorMock = PowerMock.createMock(Connector.class);\n        EasyMock.expect(connectorFactoryMock.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList());\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"M"},{"authorDate":"2015-11-09 14:11:03","commitOrder":4,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","date":"2015-11-09 14:11:03","endLine":236,"groupId":"6552","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/f8fced2b200ce419eff447165684d3c9e6fc33.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"N"}],"commitId":"45f2261763eac5caaebf860daab32ef5337c9293","commitMessage":"@@@KAFKA-3487: Support classloading isolation in Connect (KIP-146)\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3028 from kkonstantine/KAFKA-3487-Support-classloading-isolation-in-Connect\n","date":"2017-05-19 01:39:15","modifiedFileCount":"26","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2015-11-09 14:11:03","codes":[{"authorDate":"2017-06-22 05:20:48","commitOrder":5,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(Connector.class);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList());\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-06-22 05:20:48","endLine":346,"groupId":"8113","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/34a891120d4b4dfbf70151fd1ba1704933a28c.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(Connector.class);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(4);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList());\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"M"},{"authorDate":"2015-11-09 14:11:03","commitOrder":5,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","date":"2015-11-09 14:11:03","endLine":236,"groupId":"6552","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/f8fced2b200ce419eff447165684d3c9e6fc33.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"N"}],"commitId":"96587f4b1ffd372d3e4f9a1fba6fc1d2f84a191d","commitMessage":"@@@KAFKA-5475: Connector config validation should include fields for defined transformation aliases\n\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Jason Gustafson <jason@confluent.io>\n\nCloses #3399 from ewencp/kafka-5475-validation-transformations\n","date":"2017-06-22 05:20:48","modifiedFileCount":"7","status":"M","submitter":"Ewen Cheslack-Postava"},{"authorTime":"2017-09-14 01:18:54","codes":[{"authorDate":"2017-06-22 05:20:48","commitOrder":6,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(Connector.class);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList());\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-06-22 05:20:48","endLine":346,"groupId":"8113","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/34a891120d4b4dfbf70151fd1ba1704933a28c.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(Connector.class);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList());\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"N"},{"authorDate":"2017-09-14 01:18:54","commitOrder":6,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-14 01:18:54","endLine":504,"groupId":"6552","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dc/bd88f5852f6de28d72df4f605788bf1d7195b0.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":482,"status":"M"}],"commitId":"ffd8f18a129fa826d62f527ea2c8eba2cfd644b2","commitMessage":"@@@KAFKA-4501; Fix EasyMock and disable PowerMock tests under Java 9\n\n- EasyMock 3.5 supports Java 9.\n\n- Fixed issues in `testFailedSendRetryLogic` and\n`testCreateConnectorAlreadyExists` exposed by new EasyMock\nversion. The former was passing `anyObject` to\n`andReturn`.  which doesn't make sense. This was leaving\nbehind a global `any` matcher.  which caused a few issues in\nthe new version. Fixing this meant that the correlation ids had\nto be updated to actually match. The latter was missing a\ncouple of expectations that the previous version of EasyMock\ndidn't catch.\n\n- Removed unnecessary PowerMock dependency from 3 tests.\n\n- Disabled remaining PowerMock tests when running with Java 9\nuntil https://github.com/powermock/powermock/issues/783 is\nin a release.\n\n- Once we merge this PR.  we can enable tests in the Java 9 builds\nin Jenkins.\n\nAuthor: Ismael Juma <ismael@juma.me.uk>\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>\n\nCloses #3845 from ijuma/kafka-4501-easymock-powermock-java-9\n","date":"2017-09-14 01:18:54","modifiedFileCount":"4","status":"M","submitter":"Ismael Juma"},{"authorTime":"2017-09-14 01:18:54","codes":[{"authorDate":"2017-09-21 05:01:43","commitOrder":7,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(Connector.class);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-21 05:01:43","endLine":349,"groupId":"8113","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/d0e2b01b22cd09f44d9eeac77e46eb9178e2b0.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(Connector.class);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList());\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"},{"authorDate":"2017-09-14 01:18:54","commitOrder":7,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-14 01:18:54","endLine":504,"groupId":"6552","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dc/bd88f5852f6de28d72df4f605788bf1d7195b0.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":482,"status":"N"}],"commitId":"552b1707871fd92656debe33b03381f597be2578","commitMessage":"@@@KAFKA-5657: Connect REST API should include the connector type when describing a connector (KIP-151)\n\nEmbed the type of connector in ConnectorInfo\n\nAuthor: tedyu <yuzhihong@gmail.com>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Jason Gustafson <jason@confluent.io>.  Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3812 from tedyu/trunk\n","date":"2017-09-21 05:01:43","modifiedFileCount":"9","status":"M","submitter":"tedyu"},{"authorTime":"2017-10-06 02:23:11","codes":[{"authorDate":"2017-10-06 02:23:11","commitOrder":8,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(Connector.class);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":378,"groupId":"8113","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/83261f202bee7477543a59fa8b5b788f10214a.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(Connector.class);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"M"},{"authorDate":"2017-10-06 02:23:11","commitOrder":8,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":548,"groupId":"6552","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/83261f202bee7477543a59fa8b5b788f10214a.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":523,"status":"M"}],"commitId":"a47bfbcae050659d32f777ed2f4b26dda5fbdbbd","commitMessage":"@@@KAFKA-5903: Added Connect metrics to the worker and distributed herder (KIP-196)\n\nAdded metrics to the Connect worker and rebalancing metrics to the distributed herder.\n\nThis is built on top of #3987.  and I can rebase this PR once that is merged.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4011 from rhauch/kafka-5903\n","date":"2017-10-06 02:23:11","modifiedFileCount":"13","status":"M","submitter":"Randall Hauch"},{"authorTime":"2017-10-06 02:23:11","codes":[{"authorDate":"2018-02-06 01:46:07","commitOrder":9,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-02-06 01:46:07","endLine":386,"groupId":"8113","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d7/a7d87cb4fe4dd722fededa5a7ec8df8aeab227.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(Connector.class);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"},{"authorDate":"2017-10-06 02:23:11","commitOrder":9,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":548,"groupId":"6552","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/83261f202bee7477543a59fa8b5b788f10214a.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":523,"status":"N"}],"commitId":"eb3fef760e1c876b936f175e0eb9a1446cf5bdcf","commitMessage":"@@@KAFKA-6253: Improve sink connector topic regex validation\n\nKAFKA-3073 added topic regex support for sink connectors. The addition requires that you only specify one of topics or topics.regex settings. This is being validated in one place.  but not during submission of connectors. This PR adds validation at `AbstractHerder.validateConnectorConfig` and `WorkerConnector.initialize`.\n\nThis adds a test of the new behavior to `AbstractHerderTest`.\n\nAuthor: Jeff Klukas <jeff@klukas.net>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4251 from jklukas/connect-topics-validation\n","date":"2018-02-06 01:46:07","modifiedFileCount":"7","status":"M","submitter":"Jeff Klukas"},{"authorTime":"2018-08-08 04:18:16","codes":[{"authorDate":"2018-08-08 04:18:16","commitOrder":10,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2);\n        final Capture<Map<String, String>> configCapture = EasyMock.newCapture();\n        EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(configCapture::getValue);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-08-08 04:18:16","endLine":391,"groupId":"8113","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a0/de8cf14ac884af71083d2986ece0fa85653c08.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"M"},{"authorDate":"2018-08-08 04:18:16","commitOrder":10,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2);\n        final Capture<Map<String, String>> configCapture = EasyMock.newCapture();\n        EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(configCapture::getValue);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-08-08 04:18:16","endLine":573,"groupId":"6552","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a0/de8cf14ac884af71083d2986ece0fa85653c08.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"M"}],"commitId":"36a8fec0ab2d05a8386ecd386bbbd294c3dc9126","commitMessage":"@@@KAFKA-7225: Pretransform validated props\n\nIf a property requires validation.  it should be pretransformed if it is a variable reference.  in order to have a value that will properly pass the validation.\n\nAuthor: Robert Yokota <rayokota@gmail.com>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #5445 from rayokota/KAFKA-7225-pretransform-validated-props\n","date":"2018-08-08 04:18:16","modifiedFileCount":"5","status":"M","submitter":"Robert Yokota"},{"authorTime":"2019-05-17 11:46:04","codes":[{"authorDate":"2019-05-17 11:46:04","commitOrder":11,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2);\n        final Capture<Map<String, String>> configCapture = EasyMock.newCapture();\n        EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(configCapture::getValue);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-05-17 11:46:03","endLine":548,"groupId":"8113","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/81263718256fc3a9d8e38b33de7dc17b10e8d8.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2);\n        final Capture<Map<String, String>> configCapture = EasyMock.newCapture();\n        EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(configCapture::getValue);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"M"},{"authorDate":"2019-05-17 11:46:04","commitOrder":11,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2);\n        final Capture<Map<String, String>> configCapture = EasyMock.newCapture();\n        EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(configCapture::getValue);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-05-17 11:46:03","endLine":735,"groupId":"6552","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/81263718256fc3a9d8e38b33de7dc17b10e8d8.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2);\n        final Capture<Map<String, String>> configCapture = EasyMock.newCapture();\n        EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(configCapture::getValue);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":706,"status":"M"}],"commitId":"ce584a01fff4e73afa96d38c9a7508fcd67e3e46","commitMessage":"@@@KAFKA-5505: Incremental cooperative rebalancing in Connect (KIP-415) (#6363)\n\nAdded the incremental cooperative rebalancing in Connect to avoid global rebalances on all connectors and tasks with each new/changed/removed connector. This new protocol is backward compatible and will work with heterogeneous clusters that exist during a rolling upgrade.  but once the clusters consist of new workers only some affected connectors and tasks will be rebalanced: connectors and tasks on existing nodes still in the cluster and not added/changed/removed will continue running while the affected connectors and tasks are rebalanced.\n\nThis commit attempted to minimize the changes to the existing V0 protocol logic.  though that was not entirely possible.\n\nThis commit adds extensive unit and integration tests for both the old V0 protocol and the new v1 protocol. Soak testing has been performed multiple times to verify behavior while connectors and added.  changed.  and removed and while workers are added and removed from the cluster.\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <me@ewencp.org>.  Robert Yokota <rayokota@gmail.com>.  David Arthur <mumrah@gmail.com>.  Ryanne Dolan <ryannedolan@gmail.com>","date":"2019-05-17 11:46:03","modifiedFileCount":"9","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2020-06-10 04:02:35","codes":[{"authorDate":"2020-06-10 04:02:35","commitOrder":12,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2);\n        final Capture<Map<String, String>> configCapture = newCapture();\n        EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(configCapture::getValue);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-10 04:02:35","endLine":570,"groupId":"8113","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/b2b3a820f7ee18aea5d5047094889d82ac7b9e.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2);\n        final Capture<Map<String, String>> configCapture = EasyMock.newCapture();\n        EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(configCapture::getValue);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":529,"status":"M"},{"authorDate":"2020-06-10 04:02:35","commitOrder":12,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2);\n        final Capture<Map<String, String>> configCapture = newCapture();\n        EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(configCapture::getValue);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-10 04:02:35","endLine":757,"groupId":"6552","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/b2b3a820f7ee18aea5d5047094889d82ac7b9e.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2);\n        final Capture<Map<String, String>> configCapture = EasyMock.newCapture();\n        EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(configCapture::getValue);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":728,"status":"M"}],"commitId":"b2d37cc74e9b694713a561d307f52cc0ddf08fe6","commitMessage":"@@@KAFKA-9849: Fix issue with worker.unsync.backoff.ms creating zombie workers when incremental cooperative rebalancing is used (#8827)\n\nWhen Incremental Cooperative Rebalancing is enabled and a worker fails to read to the end of the config topic.  it needs to voluntarily revoke its locally running tasks on time.  before these tasks get assigned to another worker.  creating a situation where redundant tasks are running in the Connect cluster. \n\nAdditionally.  instead of using the delay `worker.unsync.backoff.ms` that was defined for the eager rebalancing protocol and has a long default value (which coincidentally is equal to the default value of the rebalance delay of the incremental cooperative protocol).  the worker should quickly attempt to re-read the config topic and backoff for a fraction of the rebalance delay. After this fix.  the worker will retry for a maximum time of 5 times before it revokes its running assignment and for a cumulative delay less than the configured `scheduled.rebalance.max.delay.ms`.\n\nUnit tests are added to cover the backoff logic with incremental cooperative rebalancing. \n\nReviewers: Randall Hauch <rhauch@gmail.com>","date":"2020-06-10 04:02:35","modifiedFileCount":"6","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2020-06-11 16:29:23","codes":[{"authorDate":"2020-06-11 16:29:23","commitOrder":13,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN2_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                validateCallback.getValue().onCompletion(null, CONN2_CONFIG_INFOS);\n                return null;\n            }\n        });\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        \r\n        \r\n        herder.tick();\n\n        \r\n        \r\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-11 16:29:23","endLine":649,"groupId":"2708","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/0f398c6b090c0ee7c57998a6ba113238e2190f.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2);\n        final Capture<Map<String, String>> configCapture = newCapture();\n        EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(configCapture::getValue);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);\n        EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);\n        EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());\n        EasyMock.expect(connectorMock.validate(CONN2_CONFIG)).andReturn(new Config(Collections.<ConfigValue>emptyList()));\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":594,"status":"M"},{"authorDate":"2020-06-11 16:29:23","commitOrder":13,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN1_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                validateCallback.getValue().onCompletion(null, CONN1_CONFIG_INFOS);\n                return null;\n            }\n        });\n\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-11 16:29:23","endLine":776,"groupId":"6552","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/0f398c6b090c0ee7c57998a6ba113238e2190f.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2);\n        final Capture<Map<String, String>> configCapture = newCapture();\n        EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(configCapture::getValue);\n        EasyMock.expect(worker.getPlugins()).andReturn(plugins);\n        EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(null);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":729,"status":"M"}],"commitId":"7f4fc76e968a6b2cf4a73364c93bfdea03f81af3","commitMessage":"@@@KAFKA-9374: Make connector interactions asynchronous (#8069)\n\nThese changes allow herders to continue to function even when a connector they are running hangs in its start.  stop.  initialize.  validate.  and/or config methods.\n\nThe main idea is to make these connector interactions asynchronous and accept a callback that can be invoked upon the completion (successful or otherwise) of these interactions. The distributed herder handles any follow-up logic by adding a new herder request to its queue in that callback.  which helps preserve some synchronization and ordering guarantees provided by the current tick model.\n\nIf any connector refuses to shut down within a graceful timeout period.  the framework will abandon it and potentially start a new connector in its place (in cases such as connector restart or reconfiguration).\n\nExisting unit tests for the distributed herder and worker have been modified to reflect these changes.  and a new integration test named `BlockingConnectorTest` has been added to ensure that they work in practice.\n\nReviewers: Greg Harris <gregh@confluent.io>.  Nigel Liang <nigel@nigelliang.com>.  Randall Hauch <rhauch@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>","date":"2020-06-11 16:29:23","modifiedFileCount":"18","status":"M","submitter":"Chris Egerton"},{"authorTime":"2021-02-05 01:15:49","codes":[{"authorDate":"2021-02-05 01:15:49","commitOrder":14,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN2_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(() -> {\n            validateCallback.getValue().onCompletion(null, CONN2_CONFIG_INFOS);\n            return null;\n        });\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        \r\n        \r\n        herder.tick();\n\n        \r\n        \r\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 01:15:49","endLine":725,"groupId":"2708","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ad/cae27e5b53b24fe87045a24663a307a56809bb.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN2_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                validateCallback.getValue().onCompletion(null, CONN2_CONFIG_INFOS);\n                return null;\n            }\n        });\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        \r\n        \r\n        herder.tick();\n\n        \r\n        \r\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":673,"status":"M"},{"authorDate":"2021-02-05 01:15:49","commitOrder":14,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN1_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(() -> {\n            validateCallback.getValue().onCompletion(null, CONN1_CONFIG_INFOS);\n            return null;\n        });\n\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 01:15:49","endLine":846,"groupId":"6552","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ad/cae27e5b53b24fe87045a24663a307a56809bb.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN1_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                validateCallback.getValue().onCompletion(null, CONN1_CONFIG_INFOS);\n                return null;\n            }\n        });\n\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":802,"status":"M"}],"commitId":"c19a35d1b740c85559a7ff4e882fc95b4737808d","commitMessage":"@@@KAFKA-10835: Replace Runnable and Callable overrides with lambdas in Connect (#9867)\n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 01:15:49","modifiedFileCount":"50","status":"M","submitter":"Lev Zemlyanov"},{"authorTime":"2021-02-05 09:08:56","codes":[{"authorDate":"2021-02-05 09:08:56","commitOrder":15,"curCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.emptyList(), Collections.emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN2_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(() -> {\n            validateCallback.getValue().onCompletion(null, CONN2_CONFIG_INFOS);\n            return null;\n        });\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        \r\n        \r\n        herder.tick();\n\n        \r\n        \r\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 09:08:56","endLine":724,"groupId":"104822","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5b/ddcf76e3c103ea29beb2cb2dfd21f321ba25e9.src","preCode":"    public void testCreateConnector() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN2_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(() -> {\n            validateCallback.getValue().onCompletion(null, CONN2_CONFIG_INFOS);\n            return null;\n        });\n\n        \r\n        configBackingStore.putConnectorConfig(CONN2, CONN2_CONFIG);\n        PowerMock.expectLastCall();\n        ConnectorInfo info = new ConnectorInfo(CONN2, CONN2_CONFIG, Collections.<ConnectorTaskId>emptyList(),\n            ConnectorType.SOURCE);\n        putConnectorCallback.onCompletion(null, new Herder.Created<>(true, info));\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, CONN2_CONFIG, false, putConnectorCallback);\n        \r\n        \r\n        herder.tick();\n\n        \r\n        \r\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":672,"status":"M"},{"authorDate":"2021-02-05 09:08:56","commitOrder":15,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN1_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(() -> {\n            validateCallback.getValue().onCompletion(null, CONN1_CONFIG_INFOS);\n            return null;\n        });\n\n        expectRebalance(1, Collections.emptyList(), Collections.emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 09:08:56","endLine":845,"groupId":"104822","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5b/ddcf76e3c103ea29beb2cb2dfd21f321ba25e9.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN1_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(() -> {\n            validateCallback.getValue().onCompletion(null, CONN1_CONFIG_INFOS);\n            return null;\n        });\n\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":801,"status":"M"}],"commitId":"07843cfbf4e3e7a2d26d63904bbf0da0fcd07ca2","commitMessage":"@@@KAFKA-10834: Remove redundant type casts in Connect (#10053)\n\nCleanup up to remove redundant type casts in Connect and use the diamond operator when needed \n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 09:08:56","modifiedFileCount":"41","status":"M","submitter":"Lev Zemlyanov"}]
