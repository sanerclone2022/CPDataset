[{"authorTime":"2019-05-17 11:46:04","codes":[{"authorDate":"2019-05-17 11:46:04","commitOrder":1,"curCode":"    public void testLostAssignmentHandlingWhenWorkerLeavesPermanently() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        assertTrue(assignor.candidateWorkersForReassignment.isEmpty());\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        Map<String, WorkerLoad> configuredAssignment = new HashMap<>();\n        configuredAssignment.put(\"worker0\", workerLoad(\"worker0\", 0, 2, 0, 4));\n        configuredAssignment.put(\"worker2\", workerLoad(\"worker2\", 4, 2, 8, 4));\n\n        ConnectorsAndTasks newSubmissions = new ConnectorsAndTasks.Builder().build();\n\n        \r\n        assignor.handleLostAssignments(new ConnectorsAndTasks.Builder().build(),\n                newSubmissions,\n                new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        String removedWorker = \"worker1\";\n        WorkerLoad lostLoad = workerLoad(removedWorker, 2, 2, 4, 4);\n\n        ConnectorsAndTasks lostAssignments = new ConnectorsAndTasks.Builder()\n                .withCopies(lostLoad.connectors(), lostLoad.tasks()).build();\n\n        \r\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        time.sleep(rebalanceDelay / 2);\n        rebalanceDelay /= 2;\n\n        \r\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        time.sleep(rebalanceDelay);\n\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertTrue(\"Wrong assignment of lost connectors\",\n                newSubmissions.connectors().containsAll(lostAssignments.connectors()));\n        assertTrue(\"Wrong assignment of lost tasks\",\n                newSubmissions.tasks().containsAll(lostAssignments.tasks()));\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n    }\n","date":"2019-05-17 11:46:03","endLine":764,"groupId":"22525","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLostAssignmentHandlingWhenWorkerLeavesPermanently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/ccefdf52c445d6e5109150e98cf9af345d13b4.src","preCode":"    public void testLostAssignmentHandlingWhenWorkerLeavesPermanently() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        assertTrue(assignor.candidateWorkersForReassignment.isEmpty());\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        Map<String, WorkerLoad> configuredAssignment = new HashMap<>();\n        configuredAssignment.put(\"worker0\", workerLoad(\"worker0\", 0, 2, 0, 4));\n        configuredAssignment.put(\"worker2\", workerLoad(\"worker2\", 4, 2, 8, 4));\n\n        ConnectorsAndTasks newSubmissions = new ConnectorsAndTasks.Builder().build();\n\n        \r\n        assignor.handleLostAssignments(new ConnectorsAndTasks.Builder().build(),\n                newSubmissions,\n                new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        String removedWorker = \"worker1\";\n        WorkerLoad lostLoad = workerLoad(removedWorker, 2, 2, 4, 4);\n\n        ConnectorsAndTasks lostAssignments = new ConnectorsAndTasks.Builder()\n                .withCopies(lostLoad.connectors(), lostLoad.tasks()).build();\n\n        \r\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        time.sleep(rebalanceDelay / 2);\n        rebalanceDelay /= 2;\n\n        \r\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        time.sleep(rebalanceDelay);\n\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertTrue(\"Wrong assignment of lost connectors\",\n                newSubmissions.connectors().containsAll(lostAssignments.connectors()));\n        assertTrue(\"Wrong assignment of lost tasks\",\n                newSubmissions.tasks().containsAll(lostAssignments.tasks()));\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":698,"status":"B"},{"authorDate":"2019-05-17 11:46:04","commitOrder":1,"curCode":"    public void testLostAssignmentHandlingWhenWorkerBouncesBackButFinallyLeaves() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        assertTrue(assignor.candidateWorkersForReassignment.isEmpty());\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        Map<String, WorkerLoad> configuredAssignment = new HashMap<>();\n        configuredAssignment.put(\"worker0\", workerLoad(\"worker0\", 0, 2, 0, 4));\n        configuredAssignment.put(\"worker2\", workerLoad(\"worker2\", 4, 2, 8, 4));\n\n        ConnectorsAndTasks newSubmissions = new ConnectorsAndTasks.Builder().build();\n\n        \r\n        assignor.handleLostAssignments(new ConnectorsAndTasks.Builder().build(),\n                newSubmissions,\n                new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        String veryFlakyWorker = \"worker1\";\n        WorkerLoad lostLoad = workerLoad(veryFlakyWorker, 2, 2, 4, 4);\n\n        ConnectorsAndTasks lostAssignments = new ConnectorsAndTasks.Builder()\n                .withCopies(lostLoad.connectors(), lostLoad.tasks()).build();\n\n        \r\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        time.sleep(rebalanceDelay / 2);\n        rebalanceDelay /= 2;\n\n        \r\n        configuredAssignment.put(veryFlakyWorker, new WorkerLoad.Builder(veryFlakyWorker).build());\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.singleton(veryFlakyWorker),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        time.sleep(rebalanceDelay);\n\n        \r\n        configuredAssignment.remove(veryFlakyWorker);\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertTrue(\"Wrong assignment of lost connectors\",\n                newSubmissions.connectors().containsAll(lostAssignments.connectors()));\n        assertTrue(\"Wrong assignment of lost tasks\",\n                newSubmissions.tasks().containsAll(lostAssignments.tasks()));\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n    }\n","date":"2019-05-17 11:46:03","endLine":918,"groupId":"22525","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLostAssignmentHandlingWhenWorkerBouncesBackButFinallyLeaves","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/ccefdf52c445d6e5109150e98cf9af345d13b4.src","preCode":"    public void testLostAssignmentHandlingWhenWorkerBouncesBackButFinallyLeaves() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        assertTrue(assignor.candidateWorkersForReassignment.isEmpty());\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        Map<String, WorkerLoad> configuredAssignment = new HashMap<>();\n        configuredAssignment.put(\"worker0\", workerLoad(\"worker0\", 0, 2, 0, 4));\n        configuredAssignment.put(\"worker2\", workerLoad(\"worker2\", 4, 2, 8, 4));\n\n        ConnectorsAndTasks newSubmissions = new ConnectorsAndTasks.Builder().build();\n\n        \r\n        assignor.handleLostAssignments(new ConnectorsAndTasks.Builder().build(),\n                newSubmissions,\n                new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        String veryFlakyWorker = \"worker1\";\n        WorkerLoad lostLoad = workerLoad(veryFlakyWorker, 2, 2, 4, 4);\n\n        ConnectorsAndTasks lostAssignments = new ConnectorsAndTasks.Builder()\n                .withCopies(lostLoad.connectors(), lostLoad.tasks()).build();\n\n        \r\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        time.sleep(rebalanceDelay / 2);\n        rebalanceDelay /= 2;\n\n        \r\n        configuredAssignment.put(veryFlakyWorker, new WorkerLoad.Builder(veryFlakyWorker).build());\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.singleton(veryFlakyWorker),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        time.sleep(rebalanceDelay);\n\n        \r\n        configuredAssignment.remove(veryFlakyWorker);\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertTrue(\"Wrong assignment of lost connectors\",\n                newSubmissions.connectors().containsAll(lostAssignments.connectors()));\n        assertTrue(\"Wrong assignment of lost tasks\",\n                newSubmissions.tasks().containsAll(lostAssignments.tasks()));\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":849,"status":"B"}],"commitId":"ce584a01fff4e73afa96d38c9a7508fcd67e3e46","commitMessage":"@@@KAFKA-5505: Incremental cooperative rebalancing in Connect (KIP-415) (#6363)\n\nAdded the incremental cooperative rebalancing in Connect to avoid global rebalances on all connectors and tasks with each new/changed/removed connector. This new protocol is backward compatible and will work with heterogeneous clusters that exist during a rolling upgrade.  but once the clusters consist of new workers only some affected connectors and tasks will be rebalanced: connectors and tasks on existing nodes still in the cluster and not added/changed/removed will continue running while the affected connectors and tasks are rebalanced.\n\nThis commit attempted to minimize the changes to the existing V0 protocol logic.  though that was not entirely possible.\n\nThis commit adds extensive unit and integration tests for both the old V0 protocol and the new v1 protocol. Soak testing has been performed multiple times to verify behavior while connectors and added.  changed.  and removed and while workers are added and removed from the cluster.\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <me@ewencp.org>.  Robert Yokota <rayokota@gmail.com>.  David Arthur <mumrah@gmail.com>.  Ryanne Dolan <ryannedolan@gmail.com>","date":"2019-05-17 11:46:03","modifiedFileCount":"9","status":"B","submitter":"Konstantine Karantasis"},{"authorTime":"2020-06-10 00:41:11","codes":[{"authorDate":"2020-06-10 00:41:11","commitOrder":2,"curCode":"    public void testLostAssignmentHandlingWhenWorkerLeavesPermanently() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        assertTrue(assignor.candidateWorkersForReassignment.isEmpty());\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        Map<String, WorkerLoad> configuredAssignment = new HashMap<>();\n        configuredAssignment.put(\"worker0\", workerLoad(\"worker0\", 0, 2, 0, 4));\n        configuredAssignment.put(\"worker1\", workerLoad(\"worker1\", 2, 2, 4, 4));\n        configuredAssignment.put(\"worker2\", workerLoad(\"worker2\", 4, 2, 8, 4));\n        memberConfigs = memberConfigs(leader, offset, 0, 2);\n\n        ConnectorsAndTasks newSubmissions = new ConnectorsAndTasks.Builder().build();\n\n        \r\n        assignor.handleLostAssignments(new ConnectorsAndTasks.Builder().build(),\n                newSubmissions,\n                new ArrayList<>(configuredAssignment.values()),\n                memberConfigs);\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        assignor.previousMembers = new HashSet<>(memberConfigs.keySet());\n        String removedWorker = \"worker1\";\n        WorkerLoad lostLoad = workerLoad(removedWorker, 2, 2, 4, 4);\n        memberConfigs.remove(removedWorker);\n\n        ConnectorsAndTasks lostAssignments = new ConnectorsAndTasks.Builder()\n                .withCopies(lostLoad.connectors(), lostLoad.tasks()).build();\n\n        \r\n        assignor.handleLostAssignments(lostAssignments, newSubmissions,\n                new ArrayList<>(configuredAssignment.values()), memberConfigs);\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        assignor.previousMembers = new HashSet<>(memberConfigs.keySet());\n        time.sleep(rebalanceDelay / 2);\n        rebalanceDelay /= 2;\n\n        \r\n        assignor.handleLostAssignments(lostAssignments, newSubmissions,\n                new ArrayList<>(configuredAssignment.values()), memberConfigs);\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        time.sleep(rebalanceDelay);\n\n        assignor.handleLostAssignments(lostAssignments, newSubmissions,\n                new ArrayList<>(configuredAssignment.values()), memberConfigs);\n\n        assertTrue(\"Wrong assignment of lost connectors\",\n                newSubmissions.connectors().containsAll(lostAssignments.connectors()));\n        assertTrue(\"Wrong assignment of lost tasks\",\n                newSubmissions.tasks().containsAll(lostAssignments.tasks()));\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n    }\n","date":"2020-06-10 00:41:11","endLine":910,"groupId":"104809","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLostAssignmentHandlingWhenWorkerLeavesPermanently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/72ce9913df5300c4cb442eda7946159599e989.src","preCode":"    public void testLostAssignmentHandlingWhenWorkerLeavesPermanently() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        assertTrue(assignor.candidateWorkersForReassignment.isEmpty());\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        Map<String, WorkerLoad> configuredAssignment = new HashMap<>();\n        configuredAssignment.put(\"worker0\", workerLoad(\"worker0\", 0, 2, 0, 4));\n        configuredAssignment.put(\"worker2\", workerLoad(\"worker2\", 4, 2, 8, 4));\n\n        ConnectorsAndTasks newSubmissions = new ConnectorsAndTasks.Builder().build();\n\n        \r\n        assignor.handleLostAssignments(new ConnectorsAndTasks.Builder().build(),\n                newSubmissions,\n                new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        String removedWorker = \"worker1\";\n        WorkerLoad lostLoad = workerLoad(removedWorker, 2, 2, 4, 4);\n\n        ConnectorsAndTasks lostAssignments = new ConnectorsAndTasks.Builder()\n                .withCopies(lostLoad.connectors(), lostLoad.tasks()).build();\n\n        \r\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        time.sleep(rebalanceDelay / 2);\n        rebalanceDelay /= 2;\n\n        \r\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        time.sleep(rebalanceDelay);\n\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertTrue(\"Wrong assignment of lost connectors\",\n                newSubmissions.connectors().containsAll(lostAssignments.connectors()));\n        assertTrue(\"Wrong assignment of lost tasks\",\n                newSubmissions.tasks().containsAll(lostAssignments.tasks()));\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":835,"status":"M"},{"authorDate":"2020-06-10 00:41:11","commitOrder":2,"curCode":"    public void testLostAssignmentHandlingWhenWorkerBouncesBackButFinallyLeaves() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        assertTrue(assignor.candidateWorkersForReassignment.isEmpty());\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        Map<String, WorkerLoad> configuredAssignment = new HashMap<>();\n        configuredAssignment.put(\"worker0\", workerLoad(\"worker0\", 0, 2, 0, 4));\n        configuredAssignment.put(\"worker1\", workerLoad(\"worker1\", 2, 2, 4, 4));\n        configuredAssignment.put(\"worker2\", workerLoad(\"worker2\", 4, 2, 8, 4));\n        memberConfigs = memberConfigs(leader, offset, 0, 2);\n\n        ConnectorsAndTasks newSubmissions = new ConnectorsAndTasks.Builder().build();\n\n        \r\n        assignor.handleLostAssignments(new ConnectorsAndTasks.Builder().build(),\n                newSubmissions,\n                new ArrayList<>(configuredAssignment.values()),\n                memberConfigs);\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        assignor.previousMembers = new HashSet<>(memberConfigs.keySet());\n        String veryFlakyWorker = \"worker1\";\n        WorkerLoad lostLoad = workerLoad(veryFlakyWorker, 2, 2, 4, 4);\n        memberConfigs.remove(veryFlakyWorker);\n\n        ConnectorsAndTasks lostAssignments = new ConnectorsAndTasks.Builder()\n                .withCopies(lostLoad.connectors(), lostLoad.tasks()).build();\n\n        \r\n        assignor.handleLostAssignments(lostAssignments, newSubmissions,\n                new ArrayList<>(configuredAssignment.values()), memberConfigs);\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        assignor.previousMembers = new HashSet<>(memberConfigs.keySet());\n        time.sleep(rebalanceDelay / 2);\n        rebalanceDelay /= 2;\n\n        \r\n        configuredAssignment.put(veryFlakyWorker, new WorkerLoad.Builder(veryFlakyWorker).build());\n        memberConfigs.put(veryFlakyWorker, new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.handleLostAssignments(lostAssignments, newSubmissions,\n                new ArrayList<>(configuredAssignment.values()), memberConfigs);\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.singleton(veryFlakyWorker),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        assignor.previousMembers = new HashSet<>(memberConfigs.keySet());\n        time.sleep(rebalanceDelay);\n\n        \r\n        configuredAssignment.remove(veryFlakyWorker);\n        memberConfigs.remove(veryFlakyWorker);\n        assignor.handleLostAssignments(lostAssignments, newSubmissions,\n                new ArrayList<>(configuredAssignment.values()), memberConfigs);\n\n        assertTrue(\"Wrong assignment of lost connectors\",\n                newSubmissions.connectors().containsAll(lostAssignments.connectors()));\n        assertTrue(\"Wrong assignment of lost tasks\",\n                newSubmissions.tasks().containsAll(lostAssignments.tasks()));\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n    }\n","date":"2020-06-10 00:41:11","endLine":1090,"groupId":"104809","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLostAssignmentHandlingWhenWorkerBouncesBackButFinallyLeaves","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/72ce9913df5300c4cb442eda7946159599e989.src","preCode":"    public void testLostAssignmentHandlingWhenWorkerBouncesBackButFinallyLeaves() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        assertTrue(assignor.candidateWorkersForReassignment.isEmpty());\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        Map<String, WorkerLoad> configuredAssignment = new HashMap<>();\n        configuredAssignment.put(\"worker0\", workerLoad(\"worker0\", 0, 2, 0, 4));\n        configuredAssignment.put(\"worker2\", workerLoad(\"worker2\", 4, 2, 8, 4));\n\n        ConnectorsAndTasks newSubmissions = new ConnectorsAndTasks.Builder().build();\n\n        \r\n        assignor.handleLostAssignments(new ConnectorsAndTasks.Builder().build(),\n                newSubmissions,\n                new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n\n        String veryFlakyWorker = \"worker1\";\n        WorkerLoad lostLoad = workerLoad(veryFlakyWorker, 2, 2, 4, 4);\n\n        ConnectorsAndTasks lostAssignments = new ConnectorsAndTasks.Builder()\n                .withCopies(lostLoad.connectors(), lostLoad.tasks()).build();\n\n        \r\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        time.sleep(rebalanceDelay / 2);\n        rebalanceDelay /= 2;\n\n        \r\n        configuredAssignment.put(veryFlakyWorker, new WorkerLoad.Builder(veryFlakyWorker).build());\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.singleton(veryFlakyWorker),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(time.milliseconds() + rebalanceDelay, assignor.scheduledRebalance);\n        assertEquals(rebalanceDelay, assignor.delay);\n\n        time.sleep(rebalanceDelay);\n\n        \r\n        configuredAssignment.remove(veryFlakyWorker);\n        assignor.handleLostAssignments(lostAssignments, newSubmissions, new ArrayList<>(configuredAssignment.values()));\n\n        assertTrue(\"Wrong assignment of lost connectors\",\n                newSubmissions.connectors().containsAll(lostAssignments.connectors()));\n        assertTrue(\"Wrong assignment of lost tasks\",\n                newSubmissions.tasks().containsAll(lostAssignments.tasks()));\n        assertThat(\"Wrong set of workers for reassignments\",\n                Collections.emptySet(),\n                is(assignor.candidateWorkersForReassignment));\n        assertEquals(0, assignor.scheduledRebalance);\n        assertEquals(0, assignor.delay);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1009,"status":"M"}],"commitId":"09b22e7e67e3ddfa319b723e00105fb0af2bd48b","commitMessage":"@@@KAFKA-9848: Avoid triggering scheduled rebalance delay when task assignment fails but Connect workers remain in the group (#8805)\n\nIn the first version of the incremental cooperative protocol.  in the presence of a failed sync request by the leader.  the assignor was designed to treat the unapplied assignments as lost and trigger a rebalance delay. \n\nThis commit applies optimizations in these cases to avoid the unnecessary activation of the rebalancing delay. First.  if the worker that loses the sync group request or response is the leader.  then it detects this failure by checking the what is the expected generation when it performs task assignments. If it's not the expected one.  it resets its view of the previous assignment because it wasn't successfully applied and it doesn't represent a correct state. Furthermore.  if the worker that has missed the assignment sync is an ordinary worker.  then the leader is able to detect that there are lost assignments and instead of triggering a rebalance delay among the same members of the group.  it treats the lost tasks as new tasks and reassigns them immediately. If the lost assignment included revocations that were not applied.  the leader reapplies these revocations again. \n\nExisting unit tests and integration tests are adapted to test the proposed optimizations. \n\nReviewers: Randall Hauch <rhauch@gmail.com>","date":"2020-06-10 00:41:11","modifiedFileCount":"8","status":"M","submitter":"Konstantine Karantasis"}]
