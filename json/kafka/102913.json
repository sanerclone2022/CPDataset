[{"authorTime":"2020-08-22 09:29:40","codes":[{"authorDate":"2018-08-04 04:19:46","commitOrder":8,"curCode":"    public KeyValueIterator<K, V> range(final K from, final K to) {\n        Objects.requireNonNull(from);\n        Objects.requireNonNull(to);\n        final NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>> nextIteratorFunction = new NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>>() {\n            @Override\n            public KeyValueIterator<K, V> apply(final ReadOnlyKeyValueStore<K, V> store) {\n                try {\n                    return store.range(from, to);\n                } catch (final InvalidStateStoreException e) {\n                    throw new InvalidStateStoreException(\"State store is not available anymore and may have been migrated to another instance; please re-discover its location from the state metadata.\");\n                }\n            }\n        };\n        final List<ReadOnlyKeyValueStore<K, V>> stores = storeProvider.stores(storeName, storeType);\n        return new DelegatingPeekingKeyValueIterator<>(storeName, new CompositeKeyValueIterator<>(stores.iterator(), nextIteratorFunction));\n    }\n","date":"2018-08-04 04:19:46","endLine":83,"groupId":"21052","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"range","params":"(finalKfrom@finalKto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c7/90b89b13f65c28911f8b6238522cf4699f057a.src","preCode":"    public KeyValueIterator<K, V> range(final K from, final K to) {\n        Objects.requireNonNull(from);\n        Objects.requireNonNull(to);\n        final NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>> nextIteratorFunction = new NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>>() {\n            @Override\n            public KeyValueIterator<K, V> apply(final ReadOnlyKeyValueStore<K, V> store) {\n                try {\n                    return store.range(from, to);\n                } catch (final InvalidStateStoreException e) {\n                    throw new InvalidStateStoreException(\"State store is not available anymore and may have been migrated to another instance; please re-discover its location from the state metadata.\");\n                }\n            }\n        };\n        final List<ReadOnlyKeyValueStore<K, V>> stores = storeProvider.stores(storeName, storeType);\n        return new DelegatingPeekingKeyValueIterator<>(storeName, new CompositeKeyValueIterator<>(stores.iterator(), nextIteratorFunction));\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"NB"},{"authorDate":"2020-08-22 09:29:40","commitOrder":8,"curCode":"    public KeyValueIterator<K, V> reverseRange(final K from, final K to) {\n        Objects.requireNonNull(from);\n        Objects.requireNonNull(to);\n        final NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>> nextIteratorFunction = new NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>>() {\n            @Override\n            public KeyValueIterator<K, V> apply(final ReadOnlyKeyValueStore<K, V> store) {\n                try {\n                    return store.reverseRange(from, to);\n                } catch (final InvalidStateStoreException e) {\n                    throw new InvalidStateStoreException(\"State store is not available anymore and may have been migrated to another instance; please re-discover its location from the state metadata.\");\n                }\n            }\n        };\n        final List<ReadOnlyKeyValueStore<K, V>> stores = storeProvider.stores(storeName, storeType);\n        return new DelegatingPeekingKeyValueIterator<>(\n            storeName,\n            new CompositeKeyValueIterator<>(stores.iterator(), nextIteratorFunction));\n    }\n","date":"2020-08-22 09:29:40","endLine":105,"groupId":"21052","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"reverseRange","params":"(finalKfrom@finalKto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/e5f1e4f243accb2c95de571662be6418cf45fb.src","preCode":"    public KeyValueIterator<K, V> reverseRange(final K from, final K to) {\n        Objects.requireNonNull(from);\n        Objects.requireNonNull(to);\n        final NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>> nextIteratorFunction = new NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>>() {\n            @Override\n            public KeyValueIterator<K, V> apply(final ReadOnlyKeyValueStore<K, V> store) {\n                try {\n                    return store.reverseRange(from, to);\n                } catch (final InvalidStateStoreException e) {\n                    throw new InvalidStateStoreException(\"State store is not available anymore and may have been migrated to another instance; please re-discover its location from the state metadata.\");\n                }\n            }\n        };\n        final List<ReadOnlyKeyValueStore<K, V>> stores = storeProvider.stores(storeName, storeType);\n        return new DelegatingPeekingKeyValueIterator<>(\n            storeName,\n            new CompositeKeyValueIterator<>(stores.iterator(), nextIteratorFunction));\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"}],"commitId":"89d06780a0f5f27a7420fc2cd8063294367f6693","commitMessage":"@@@KAFKA-9929: Support reverse iterator on KeyValueStore (#9137)\n\nAdd new methods to KeyValueStore interfaces to support reverse iteration.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-08-22 09:29:40","modifiedFileCount":"43","status":"M","submitter":"Jorge Esteban Quilcate Otoya"},{"authorTime":"2021-07-30 10:52:16","codes":[{"authorDate":"2021-07-30 10:52:16","commitOrder":9,"curCode":"    public KeyValueIterator<K, V> range(final K from, final K to) {\n        final NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>> nextIteratorFunction = new NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>>() {\n            @Override\n            public KeyValueIterator<K, V> apply(final ReadOnlyKeyValueStore<K, V> store) {\n                try {\n                    return store.range(from, to);\n                } catch (final InvalidStateStoreException e) {\n                    throw new InvalidStateStoreException(\"State store is not available anymore and may have been migrated to another instance; please re-discover its location from the state metadata.\");\n                }\n            }\n        };\n        final List<ReadOnlyKeyValueStore<K, V>> stores = storeProvider.stores(storeName, storeType);\n        return new DelegatingPeekingKeyValueIterator<>(\n            storeName,\n            new CompositeKeyValueIterator<>(stores.iterator(), nextIteratorFunction));\n    }\n","date":"2021-07-30 10:52:16","endLine":84,"groupId":"102913","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"range","params":"(finalKfrom@finalKto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f7/711e3abfdcfeec8809a74c4525712e5f60f381.src","preCode":"    public KeyValueIterator<K, V> range(final K from, final K to) {\n        Objects.requireNonNull(from);\n        Objects.requireNonNull(to);\n        final NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>> nextIteratorFunction = new NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>>() {\n            @Override\n            public KeyValueIterator<K, V> apply(final ReadOnlyKeyValueStore<K, V> store) {\n                try {\n                    return store.range(from, to);\n                } catch (final InvalidStateStoreException e) {\n                    throw new InvalidStateStoreException(\"State store is not available anymore and may have been migrated to another instance; please re-discover its location from the state metadata.\");\n                }\n            }\n        };\n        final List<ReadOnlyKeyValueStore<K, V>> stores = storeProvider.stores(storeName, storeType);\n        return new DelegatingPeekingKeyValueIterator<>(\n            storeName,\n            new CompositeKeyValueIterator<>(stores.iterator(), nextIteratorFunction));\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2021-07-30 10:52:16","commitOrder":9,"curCode":"    public KeyValueIterator<K, V> reverseRange(final K from, final K to) {\n        final NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>> nextIteratorFunction = new NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>>() {\n            @Override\n            public KeyValueIterator<K, V> apply(final ReadOnlyKeyValueStore<K, V> store) {\n                try {\n                    return store.reverseRange(from, to);\n                } catch (final InvalidStateStoreException e) {\n                    throw new InvalidStateStoreException(\"State store is not available anymore and may have been migrated to another instance; please re-discover its location from the state metadata.\");\n                }\n            }\n        };\n        final List<ReadOnlyKeyValueStore<K, V>> stores = storeProvider.stores(storeName, storeType);\n        return new DelegatingPeekingKeyValueIterator<>(\n            storeName,\n            new CompositeKeyValueIterator<>(stores.iterator(), nextIteratorFunction));\n    }\n","date":"2021-07-30 10:52:16","endLine":102,"groupId":"102913","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"reverseRange","params":"(finalKfrom@finalKto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f7/711e3abfdcfeec8809a74c4525712e5f60f381.src","preCode":"    public KeyValueIterator<K, V> reverseRange(final K from, final K to) {\n        Objects.requireNonNull(from);\n        Objects.requireNonNull(to);\n        final NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>> nextIteratorFunction = new NextIteratorFunction<K, V, ReadOnlyKeyValueStore<K, V>>() {\n            @Override\n            public KeyValueIterator<K, V> apply(final ReadOnlyKeyValueStore<K, V> store) {\n                try {\n                    return store.reverseRange(from, to);\n                } catch (final InvalidStateStoreException e) {\n                    throw new InvalidStateStoreException(\"State store is not available anymore and may have been migrated to another instance; please re-discover its location from the state metadata.\");\n                }\n            }\n        };\n        final List<ReadOnlyKeyValueStore<K, V>> stores = storeProvider.stores(storeName, storeType);\n        return new DelegatingPeekingKeyValueIterator<>(\n            storeName,\n            new CompositeKeyValueIterator<>(stores.iterator(), nextIteratorFunction));\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"22541361b7c62913bc848fb03e5f807e152a1023","commitMessage":"@@@Add support for infinite endpoints for range queries (#11120)\n\nAdd support to open endpoint range queries in key-value stores\n\nImplements: KIP-763\n\nReviewers: Almog Gavra <almog@confluent.io>.  Luke Chen <showuon@gmail.com>.  John Roesler <vvcephei@apache.org>","date":"2021-07-30 10:52:16","modifiedFileCount":"14","status":"M","submitter":"Patrick Stuedi"}]
