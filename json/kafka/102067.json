[{"authorTime":"2020-06-25 09:57:38","codes":[{"authorDate":"2020-06-17 22:24:07","commitOrder":2,"curCode":"    public void shouldUnregisterMetricsInCloseDirty() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(false, \"100\"), consumer);\n\n        task.suspend();\n        assertThat(getTaskMetrics(), not(empty()));\n        task.closeDirty();\n        assertThat(getTaskMetrics(), empty());\n    }\n","date":"2020-06-17 22:24:07","endLine":1752,"groupId":"3196","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUnregisterMetricsInCloseDirty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/59/e96d40d4c1c6e748f59ac86fc2126574a8f2cb.src","preCode":"    public void shouldUnregisterMetricsInCloseDirty() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(false, \"100\"), consumer);\n\n        task.suspend();\n        assertThat(getTaskMetrics(), not(empty()));\n        task.closeDirty();\n        assertThat(getTaskMetrics(), empty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1741,"status":"NB"},{"authorDate":"2020-06-25 09:57:38","commitOrder":2,"curCode":"    public void shouldUnregisterMetricsInCloseCleanAndRecycleState() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(false, \"100\"), consumer);\n\n        task.suspend();\n        assertThat(getTaskMetrics(), not(empty()));\n        task.closeCleanAndRecycleState();\n        assertThat(getTaskMetrics(), empty());\n    }\n","date":"2020-06-25 09:57:38","endLine":1767,"groupId":"3196","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUnregisterMetricsInCloseCleanAndRecycleState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/0747047cfc4f7f9fa0c6234f70996e3c26fdd4.src","preCode":"    public void shouldUnregisterMetricsInCloseCleanAndRecycleState() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(false, \"100\"), consumer);\n\n        task.suspend();\n        assertThat(getTaskMetrics(), not(empty()));\n        task.closeCleanAndRecycleState();\n        assertThat(getTaskMetrics(), empty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1756,"status":"B"}],"commitId":"3348fc49d8824155e737b866f633e14684da5fe9","commitMessage":"@@@KAFKA-10198: guard against recycling dirty state (#8924)\n\nWe just needed to add the check in StreamTask#closeClean to closeAndRecycleState as well. I also renamed closeAndRecycleState to closeCleanAndRecycleState to drive this point home: it needs to be clean.\n\nThis should be cherry-picked back to the 2.6 branch\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>.  ","date":"2020-06-25 09:57:38","modifiedFileCount":"8","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2021-01-07 06:01:02","codes":[{"authorDate":"2021-01-07 06:01:02","commitOrder":3,"curCode":"    public void shouldUnregisterMetricsInCloseDirty() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(\"100\"), consumer);\n\n        task.suspend();\n        assertThat(getTaskMetrics(), not(empty()));\n        task.closeDirty();\n        assertThat(getTaskMetrics(), empty());\n    }\n","date":"2021-01-07 06:01:02","endLine":1989,"groupId":"102067","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUnregisterMetricsInCloseDirty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void shouldUnregisterMetricsInCloseDirty() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(false, \"100\"), consumer);\n\n        task.suspend();\n        assertThat(getTaskMetrics(), not(empty()));\n        task.closeDirty();\n        assertThat(getTaskMetrics(), empty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1978,"status":"M"},{"authorDate":"2021-01-07 06:01:02","commitOrder":3,"curCode":"    public void shouldUnregisterMetricsInCloseCleanAndRecycleState() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(\"100\"), consumer);\n\n        task.suspend();\n        assertThat(getTaskMetrics(), not(empty()));\n        task.closeCleanAndRecycleState();\n        assertThat(getTaskMetrics(), empty());\n    }\n","date":"2021-01-07 06:01:02","endLine":2003,"groupId":"102067","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUnregisterMetricsInCloseCleanAndRecycleState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void shouldUnregisterMetricsInCloseCleanAndRecycleState() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(false, \"100\"), consumer);\n\n        task.suspend();\n        assertThat(getTaskMetrics(), not(empty()));\n        task.closeCleanAndRecycleState();\n        assertThat(getTaskMetrics(), empty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1992,"status":"M"}],"commitId":"22e8e71156762b40ac93e2cbd42eacba00dbfb0c","commitMessage":"@@@KAFKA-9274: Fix commit-TimeoutException handling for EOS (#9800)\n\nIf EOS is enabled and the TX commit fails with a timeout. \nwe should not process more messages (what is ok for non-EOS)\nbecause we don't really know the status of the TX.\nIf the commit was indeed successful.  we won't have an open TX\ncan calling send() would fail with an fatal error.\n\nInstead.  we should retry the (idempotent) commit of the TX. \nand start a new TX afterwards.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  John Roesler <john@confluent.io>","date":"2021-01-07 06:01:02","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"}]
