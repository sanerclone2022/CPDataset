[{"authorTime":"2019-04-18 07:21:59","codes":[{"authorDate":"2019-05-30 03:06:13","commitOrder":2,"curCode":"    public void shouldNotExceptionIfFetchReturnsNull() {\n        EasyMock.expect(innerStoreMock.fetch(Bytes.wrap(\"a\".getBytes()), 0)).andReturn(null);\n        EasyMock.replay(innerStoreMock);\n\n        store.init(context, store);\n        assertNull(store.fetch(\"a\", 0));\n    }\n","date":"2019-05-30 03:06:13","endLine":93,"groupId":"3119","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotExceptionIfFetchReturnsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e3/378faf885f0b3be51b681ed3bc0f6937c5e849.src","preCode":"    public void shouldNotExceptionIfFetchReturnsNull() {\n        EasyMock.expect(innerStoreMock.fetch(Bytes.wrap(\"a\".getBytes()), 0)).andReturn(null);\n        EasyMock.replay(innerStoreMock);\n\n        store.init(context, store);\n        assertNull(store.fetch(\"a\", 0));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"B"},{"authorDate":"2019-04-18 07:21:59","commitOrder":2,"curCode":"    public void shouldNotThrowNullPointerExceptionIfFetchReturnsNull() {\n        expect(innerStoreMock.fetch(Bytes.wrap(\"a\".getBytes()), 0)).andReturn(null);\n        replay(innerStoreMock);\n\n        store.init(context, store);\n        assertNull(store.fetch(\"a\", 0));\n    }\n","date":"2019-04-18 07:21:59","endLine":187,"groupId":"4731","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotThrowNullPointerExceptionIfFetchReturnsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c0/ed7f634017effccd61044325ff7eb26c9504fe.src","preCode":"    public void shouldNotThrowNullPointerExceptionIfFetchReturnsNull() {\n        expect(innerStoreMock.fetch(Bytes.wrap(\"a\".getBytes()), 0)).andReturn(null);\n        replay(innerStoreMock);\n\n        store.init(context, store);\n        assertNull(store.fetch(\"a\", 0));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"NB"}],"commitId":"e7da042d76e413d9d5c95c1bd75f2c7e3ede1aad","commitMessage":"@@@MINOR: Rename unit test class for `MeteredTimestampedWindowStore` (#6826)\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   Bill Bejeck <bbejeck@gmail.com>","date":"2019-05-30 03:06:13","modifiedFileCount":"0","status":"M","submitter":"cadonna"},{"authorTime":"2020-10-03 07:49:12","codes":[{"authorDate":"2020-10-03 07:49:12","commitOrder":3,"curCode":"    public void shouldNotExceptionIfFetchReturnsNull() {\n        EasyMock.expect(innerStoreMock.fetch(Bytes.wrap(\"a\".getBytes()), 0)).andReturn(null);\n        EasyMock.replay(innerStoreMock);\n\n        store.init((StateStoreContext) context, store);\n        assertNull(store.fetch(\"a\", 0));\n    }\n","date":"2020-10-03 07:49:12","endLine":159,"groupId":"10886","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotExceptionIfFetchReturnsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/9d763d144e554eee0a7124d11bb6c3d933dbd8.src","preCode":"    public void shouldNotExceptionIfFetchReturnsNull() {\n        EasyMock.expect(innerStoreMock.fetch(Bytes.wrap(\"a\".getBytes()), 0)).andReturn(null);\n        EasyMock.replay(innerStoreMock);\n\n        store.init(context, store);\n        assertNull(store.fetch(\"a\", 0));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"},{"authorDate":"2020-10-03 07:49:12","commitOrder":3,"curCode":"    public void shouldNotThrowNullPointerExceptionIfFetchReturnsNull() {\n        expect(innerStoreMock.fetch(Bytes.wrap(\"a\".getBytes()), 0)).andReturn(null);\n        replay(innerStoreMock);\n\n        store.init((StateStoreContext) context, store);\n        assertNull(store.fetch(\"a\", 0));\n    }\n","date":"2020-10-03 07:49:12","endLine":361,"groupId":"10886","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotThrowNullPointerExceptionIfFetchReturnsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/0169476f3403154f62b6a95917630b44046bff.src","preCode":"    public void shouldNotThrowNullPointerExceptionIfFetchReturnsNull() {\n        expect(innerStoreMock.fetch(Bytes.wrap(\"a\".getBytes()), 0)).andReturn(null);\n        replay(innerStoreMock);\n\n        store.init(context, store);\n        assertNull(store.fetch(\"a\", 0));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":355,"status":"M"}],"commitId":"69790a1463bafc1f63e3c288a6636b3f4586c1b4","commitMessage":"@@@KAFKA-10535: Split ProcessorContext into Processor/StateStore/Record Contexts (#9361)\n\nMigrate different components of the old ProcessorContext interface\ninto separate interfaces that are more appropriate for their usages.\nSee KIP-478 for the details.\n\nReviewers: Guozhang Wang <guozhang@apache.org>.  Paul Whalen <pgwhalen@gmail.com>","date":"2020-10-03 07:49:12","modifiedFileCount":"71","status":"M","submitter":"John Roesler"}]
