[{"authorTime":"2017-09-07 16:39:46","codes":[{"authorDate":"2017-09-07 16:39:46","commitOrder":1,"curCode":"    public void setUp() throws Exception {\n\n        EasyMock.expect(supplier.get()).andReturn(inner);\n        EasyMock.expect(supplier.name()).andReturn(\"name\");\n        EasyMock.replay(supplier);\n\n        builder = new SessionStoreBuilder<>(supplier,\n                                            Serdes.String(),\n                                            Serdes.String(),\n                                            new MockTime()\n        );\n    }\n","date":"2017-09-07 16:39:46","endLine":61,"groupId":"18694","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/1a1c20e8ae385767adc1ce95447cb7b81ba14c.src","preCode":"    public void setUp() throws Exception {\n\n        EasyMock.expect(supplier.get()).andReturn(inner);\n        EasyMock.expect(supplier.name()).andReturn(\"name\");\n        EasyMock.replay(supplier);\n\n        builder = new SessionStoreBuilder<>(supplier,\n                                            Serdes.String(),\n                                            Serdes.String(),\n                                            new MockTime()\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionStoreBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"},{"authorDate":"2017-09-07 16:39:46","commitOrder":1,"curCode":"    public void setUp() throws Exception {\n        EasyMock.expect(supplier.get()).andReturn(inner);\n        EasyMock.expect(supplier.name()).andReturn(\"name\");\n        EasyMock.replay(supplier);\n        builder = new KeyValueStoreBuilder<>(supplier,\n                                             Serdes.String(),\n                                             Serdes.String(),\n                                             new MockTime()\n        );\n\n    }\n","date":"2017-09-07 16:39:46","endLine":60,"groupId":"18694","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2d/378d89f4179c7d5aa85d9125f1efc27d956b6d.src","preCode":"    public void setUp() throws Exception {\n        EasyMock.expect(supplier.get()).andReturn(inner);\n        EasyMock.expect(supplier.name()).andReturn(\"name\");\n        EasyMock.replay(supplier);\n        builder = new KeyValueStoreBuilder<>(supplier,\n                                             Serdes.String(),\n                                             Serdes.String(),\n                                             new MockTime()\n        );\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueStoreBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"}],"commitId":"9cbb9f0939c88868bf33ae340c5fa756ee2965e8","commitMessage":"@@@KAFKA-5650; add StateStoreBuilder interface and implementations\n\nPart of KIP-182\n\n- Add `StateStoreBuilder` interface and `WindowStateStoreBuilder`.  `KeyValueStateStoreBuilder`.  and `SessionStateStoreBuilder` implementations\n- Add `StoreSupplier`.  `WindowBytesStoreSupplier`.  `KeyValueBytesStoreSupplier`.  `SessionBytesStoreSupplier` interfaces and implementations\n- Add new methods to `Stores` to create the newly added `StoreSupplier` and `StateStoreBuilder` implementations\n- Update `Topology` and `InternalTopology` to use the interfaces\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3767 from dguy/kafka-5650\n","date":"2017-09-07 16:39:46","modifiedFileCount":"13","status":"B","submitter":"Damian Guy"},{"authorTime":"2018-07-19 00:30:52","codes":[{"authorDate":"2017-09-07 16:39:46","commitOrder":2,"curCode":"    public void setUp() throws Exception {\n\n        EasyMock.expect(supplier.get()).andReturn(inner);\n        EasyMock.expect(supplier.name()).andReturn(\"name\");\n        EasyMock.replay(supplier);\n\n        builder = new SessionStoreBuilder<>(supplier,\n                                            Serdes.String(),\n                                            Serdes.String(),\n                                            new MockTime()\n        );\n    }\n","date":"2017-09-07 16:39:46","endLine":61,"groupId":"18694","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/1a1c20e8ae385767adc1ce95447cb7b81ba14c.src","preCode":"    public void setUp() throws Exception {\n\n        EasyMock.expect(supplier.get()).andReturn(inner);\n        EasyMock.expect(supplier.name()).andReturn(\"name\");\n        EasyMock.replay(supplier);\n\n        builder = new SessionStoreBuilder<>(supplier,\n                                            Serdes.String(),\n                                            Serdes.String(),\n                                            new MockTime()\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionStoreBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"},{"authorDate":"2018-07-19 00:30:52","commitOrder":2,"curCode":"    public void setUp() {\n        EasyMock.expect(supplier.get()).andReturn(inner);\n        EasyMock.expect(supplier.name()).andReturn(\"name\");\n        EasyMock.replay(supplier);\n        builder = new KeyValueStoreBuilder<>(supplier,\n                                             Serdes.String(),\n                                             Serdes.String(),\n                                             new MockTime()\n        );\n\n    }\n","date":"2018-07-19 00:30:52","endLine":60,"groupId":"18694","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/84/8bba6fd19948d876c74a4413773e3ee80bcde0.src","preCode":"    public void setUp() throws Exception {\n        EasyMock.expect(supplier.get()).andReturn(inner);\n        EasyMock.expect(supplier.name()).andReturn(\"name\");\n        EasyMock.replay(supplier);\n        builder = new KeyValueStoreBuilder<>(supplier,\n                                             Serdes.String(),\n                                             Serdes.String(),\n                                             new MockTime()\n        );\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueStoreBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"06d96628f0e098d93aecc650534c9e9965127d92","commitMessage":"@@@MINOR: remove unused MeteredKeyValueStore (#5380)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2018-07-19 00:30:52","modifiedFileCount":"7","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-07-19 00:30:52","codes":[{"authorDate":"2019-05-13 06:31:44","commitOrder":3,"curCode":"    public void setUp() throws Exception {\n\n        expect(supplier.get()).andReturn(inner);\n        expect(supplier.name()).andReturn(\"name\");\n        replay(supplier);\n\n        builder = new SessionStoreBuilder<>(\n            supplier,\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime());\n    }\n","date":"2019-05-13 06:31:44","endLine":65,"groupId":"18219","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/3c1a7f9a496e004eff9057f290d61d945108d5.src","preCode":"    public void setUp() throws Exception {\n\n        EasyMock.expect(supplier.get()).andReturn(inner);\n        EasyMock.expect(supplier.name()).andReturn(\"name\");\n        EasyMock.replay(supplier);\n\n        builder = new SessionStoreBuilder<>(supplier,\n                                            Serdes.String(),\n                                            Serdes.String(),\n                                            new MockTime()\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionStoreBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2018-07-19 00:30:52","commitOrder":3,"curCode":"    public void setUp() {\n        EasyMock.expect(supplier.get()).andReturn(inner);\n        EasyMock.expect(supplier.name()).andReturn(\"name\");\n        EasyMock.replay(supplier);\n        builder = new KeyValueStoreBuilder<>(supplier,\n                                             Serdes.String(),\n                                             Serdes.String(),\n                                             new MockTime()\n        );\n\n    }\n","date":"2018-07-19 00:30:52","endLine":60,"groupId":"18694","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/84/8bba6fd19948d876c74a4413773e3ee80bcde0.src","preCode":"    public void setUp() {\n        EasyMock.expect(supplier.get()).andReturn(inner);\n        EasyMock.expect(supplier.name()).andReturn(\"name\");\n        EasyMock.replay(supplier);\n        builder = new KeyValueStoreBuilder<>(supplier,\n                                             Serdes.String(),\n                                             Serdes.String(),\n                                             new MockTime()\n        );\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueStoreBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"8a237f599afa539868a138b5a2534dbf884cb4ec","commitMessage":"@@@KAFKA-6455: Session Aggregation should use window-end-time as record timestamp (#6645)\n\nFor session-windows.  the result record should have the window-end timestamp as record timestamp.\n\nRebased to resolve merge conflicts. Removed unused classes TupleForwarder and ForwardingCacheFlushListener (replace with TimestampedTupleForwarder.  SessionTupleForwarder.  TimestampedCacheFlushListerner.  and SessionCacheFlushListener)\n\nReviewers: John Roesler <john@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-13 06:31:44","modifiedFileCount":"14","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-10-08 10:08:31","codes":[{"authorDate":"2020-10-08 10:08:31","commitOrder":4,"curCode":"    public void setUp() {\n        expect(supplier.get()).andReturn(inner);\n        expect(supplier.name()).andReturn(\"name\");\n        expect(supplier.metricsScope()).andReturn(\"metricScope\");\n        replay(supplier);\n\n        builder = new SessionStoreBuilder<>(\n            supplier,\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime());\n    }\n","date":"2020-10-08 10:08:31","endLine":65,"groupId":"101086","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/35/2b0cbe7779a772dbf3943b595518c1c1bef982.src","preCode":"    public void setUp() throws Exception {\n\n        expect(supplier.get()).andReturn(inner);\n        expect(supplier.name()).andReturn(\"name\");\n        replay(supplier);\n\n        builder = new SessionStoreBuilder<>(\n            supplier,\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/SessionStoreBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-10-08 10:08:31","commitOrder":4,"curCode":"    public void setUp() {\n        EasyMock.expect(supplier.get()).andReturn(inner);\n        EasyMock.expect(supplier.name()).andReturn(\"name\");\n        expect(supplier.metricsScope()).andReturn(\"metricScope\");\n        EasyMock.replay(supplier);\n        builder = new KeyValueStoreBuilder<>(\n            supplier,\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime()\n        );\n    }\n","date":"2020-10-08 10:08:31","endLine":66,"groupId":"101086","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cb/6d848dd2e027f0e9cbd47b1d13b9338ce50146.src","preCode":"    public void setUp() {\n        EasyMock.expect(supplier.get()).andReturn(inner);\n        EasyMock.expect(supplier.name()).andReturn(\"name\");\n        EasyMock.replay(supplier);\n        builder = new KeyValueStoreBuilder<>(\n            supplier,\n            Serdes.String(),\n            Serdes.String(),\n            new MockTime()\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueStoreBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"8d4bbf22ad1918dd03300fa48221b71563286f8e","commitMessage":"@@@MINOR: trivial cleanups.  javadoc errors.  omitted StateStore tests.  etc. (#8130)\n\nReviewers: Manikumar Reddy <manikumar.reddy@gmail.com>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-10-08 10:08:31","modifiedFileCount":"23","status":"M","submitter":"Lee Dongjin"}]
