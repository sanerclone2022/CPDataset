[{"authorTime":"2017-05-17 14:05:35","codes":[{"authorDate":"2017-05-17 14:05:35","commitOrder":1,"curCode":"    public void castWholeRecordValueWithSchemaInt64() {\n        final Cast<SourceRecord> xform = new Cast.Value<>();\n        xform.configure(Collections.singletonMap(Cast.SPEC_CONFIG, \"int64\"));\n        SourceRecord transformed = xform.apply(new SourceRecord(null, null, \"topic\", 0,\n                Schema.INT32_SCHEMA, 42));\n\n        assertEquals(Schema.Type.INT64, transformed.valueSchema().type());\n        assertEquals((long) 42, transformed.value());\n    }\n","date":"2017-05-17 14:05:35","endLine":121,"groupId":"21347","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"castWholeRecordValueWithSchemaInt64","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/88/afafcb6ab67bf4bdfd89c1ea9875da4d37b562.src","preCode":"    public void castWholeRecordValueWithSchemaInt64() {\n        final Cast<SourceRecord> xform = new Cast.Value<>();\n        xform.configure(Collections.singletonMap(Cast.SPEC_CONFIG, \"int64\"));\n        SourceRecord transformed = xform.apply(new SourceRecord(null, null, \"topic\", 0,\n                Schema.INT32_SCHEMA, 42));\n\n        assertEquals(Schema.Type.INT64, transformed.valueSchema().type());\n        assertEquals((long) 42, transformed.value());\n    }\n","realPath":"connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"},{"authorDate":"2017-05-17 14:05:35","commitOrder":1,"curCode":"    public void castWholeRecordValueWithSchemaFloat64() {\n        final Cast<SourceRecord> xform = new Cast.Value<>();\n        xform.configure(Collections.singletonMap(Cast.SPEC_CONFIG, \"float64\"));\n        SourceRecord transformed = xform.apply(new SourceRecord(null, null, \"topic\", 0,\n                Schema.INT32_SCHEMA, 42));\n\n        assertEquals(Schema.Type.FLOAT64, transformed.valueSchema().type());\n        assertEquals(42., transformed.value());\n    }\n","date":"2017-05-17 14:05:35","endLine":143,"groupId":"21347","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"castWholeRecordValueWithSchemaFloat64","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/88/afafcb6ab67bf4bdfd89c1ea9875da4d37b562.src","preCode":"    public void castWholeRecordValueWithSchemaFloat64() {\n        final Cast<SourceRecord> xform = new Cast.Value<>();\n        xform.configure(Collections.singletonMap(Cast.SPEC_CONFIG, \"float64\"));\n        SourceRecord transformed = xform.apply(new SourceRecord(null, null, \"topic\", 0,\n                Schema.INT32_SCHEMA, 42));\n\n        assertEquals(Schema.Type.FLOAT64, transformed.valueSchema().type());\n        assertEquals(42., transformed.value());\n    }\n","realPath":"connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":135,"status":"B"}],"commitId":"1cea4d8f5a51cc5795ddd3af2ea015b9e14d937d","commitMessage":"@@@KAFKA-4714; Flatten and Cast single message transforms (KIP-66)\n\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Shikhar Bhushan <shikhar@confluent.io>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2458 from ewencp/kafka-3209-even-more-transforms\n","date":"2017-05-17 14:05:35","modifiedFileCount":"4","status":"B","submitter":"Ewen Cheslack-Postava"},{"authorTime":"2017-07-20 01:51:28","codes":[{"authorDate":"2017-07-20 01:51:28","commitOrder":2,"curCode":"    public void castWholeRecordValueWithSchemaInt64() {\n        xformValue.configure(Collections.singletonMap(Cast.SPEC_CONFIG, \"int64\"));\n        SourceRecord transformed = xformValue.apply(new SourceRecord(null, null, \"topic\", 0,\n                Schema.INT32_SCHEMA, 42));\n\n        assertEquals(Schema.Type.INT64, transformed.valueSchema().type());\n        assertEquals((long) 42, transformed.value());\n    }\n","date":"2017-07-20 01:51:28","endLine":120,"groupId":"105436","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"castWholeRecordValueWithSchemaInt64","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b1/90189b35d9a477d030f7852a32ef8ff74fc36f.src","preCode":"    public void castWholeRecordValueWithSchemaInt64() {\n        final Cast<SourceRecord> xform = new Cast.Value<>();\n        xform.configure(Collections.singletonMap(Cast.SPEC_CONFIG, \"int64\"));\n        SourceRecord transformed = xform.apply(new SourceRecord(null, null, \"topic\", 0,\n                Schema.INT32_SCHEMA, 42));\n\n        assertEquals(Schema.Type.INT64, transformed.valueSchema().type());\n        assertEquals((long) 42, transformed.value());\n    }\n","realPath":"connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2017-07-20 01:51:28","commitOrder":2,"curCode":"    public void castWholeRecordValueWithSchemaFloat64() {\n        xformValue.configure(Collections.singletonMap(Cast.SPEC_CONFIG, \"float64\"));\n        SourceRecord transformed = xformValue.apply(new SourceRecord(null, null, \"topic\", 0,\n                Schema.INT32_SCHEMA, 42));\n\n        assertEquals(Schema.Type.FLOAT64, transformed.valueSchema().type());\n        assertEquals(42., transformed.value());\n    }\n","date":"2017-07-20 01:51:28","endLine":140,"groupId":"105436","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"castWholeRecordValueWithSchemaFloat64","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b1/90189b35d9a477d030f7852a32ef8ff74fc36f.src","preCode":"    public void castWholeRecordValueWithSchemaFloat64() {\n        final Cast<SourceRecord> xform = new Cast.Value<>();\n        xform.configure(Collections.singletonMap(Cast.SPEC_CONFIG, \"float64\"));\n        SourceRecord transformed = xform.apply(new SourceRecord(null, null, \"topic\", 0,\n                Schema.INT32_SCHEMA, 42));\n\n        assertEquals(Schema.Type.FLOAT64, transformed.valueSchema().type());\n        assertEquals(42., transformed.value());\n    }\n","realPath":"connect/transforms/src/test/java/org/apache/kafka/connect/transforms/CastTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"f87d58b796977fdaefb089d17cb30b2071cd4485","commitMessage":"@@@MINOR: Code Cleanup\n\nClean up includes:\n\n- Switching try-catch-finally blocks to try-with-resources when possible\n- Removing some seemingly unnecessary `SuppressWarnings` annotations\n- Resolving some Java warnings\n- Closing unclosed Closable objects\n- Removing unused code\n\nAuthor: Vahid Hashemian <vahidhashemian@us.ibm.com>\n\nReviewers: Balint Molnar <balintmolnar91@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>.  Matthias J. Sax <matthias@confluent.io>.  Ismael Juma <ismael@juma.me.uk>.  Jason Gustafson <jason@confluent.io>\n\nCloses #3222 from vahidhashemian/minor/code_cleanup_1706\n","date":"2017-07-20 01:51:28","modifiedFileCount":"62","status":"M","submitter":"Vahid Hashemian"}]
