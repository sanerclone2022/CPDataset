[{"authorTime":"2019-01-26 05:17:39","codes":[{"authorDate":"2018-10-04 00:52:13","commitOrder":5,"curCode":"    public void windowedZeroTimeLimitShouldImmediatelyEmit() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ZERO, unbounded()), timeWindowedSerdeFrom(String.class, 100L), Long());\n        final MockInternalProcessorContext context = harness.context;\n        final KTableSuppressProcessor<Windowed<String>, Long> processor = harness.processor;\n\n        final long timestamp = ARBITRARY_LONG;\n        context.setRecordMetadata(\"\", 0, 0L, null, timestamp);\n        context.setStreamTime(timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new TimeWindow(0L, 100L));\n        final Change<Long> value = ARBITRARY_CHANGE;\n        processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","date":"2018-10-04 00:52:13","endLine":129,"groupId":"13663","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"windowedZeroTimeLimitShouldImmediatelyEmit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/00/2ace2ed287836522e60601ed217e9ed9bfa58f.src","preCode":"    public void windowedZeroTimeLimitShouldImmediatelyEmit() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ZERO, unbounded()), timeWindowedSerdeFrom(String.class, 100L), Long());\n        final MockInternalProcessorContext context = harness.context;\n        final KTableSuppressProcessor<Windowed<String>, Long> processor = harness.processor;\n\n        final long timestamp = ARBITRARY_LONG;\n        context.setRecordMetadata(\"\", 0, 0L, null, timestamp);\n        context.setStreamTime(timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new TimeWindow(0L, 100L));\n        final Change<Long> value = ARBITRARY_CHANGE;\n        processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/suppress/KTableSuppressProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"NB"},{"authorDate":"2019-01-26 05:17:39","commitOrder":5,"curCode":"    public void suppressShouldNotDropTombstonesForSessionWindows() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ofMillis(0), maxRecords(0)), sessionWindowedSerdeFrom(String.class), Long());\n        final MockInternalProcessorContext context = harness.context;\n        final KTableSuppressProcessor<Windowed<String>, Long> processor = harness.processor;\n\n        final long timestamp = 100L;\n        context.setRecordMetadata(\"\", 0, 0L, null, timestamp);\n        context.setStreamTime(timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new SessionWindow(0L, 0L));\n        final Change<Long> value = new Change<>(null, ARBITRARY_LONG);\n        processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","date":"2019-01-26 05:17:39","endLine":348,"groupId":"12805","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"suppressShouldNotDropTombstonesForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0f/2b36b605aadfa8dde99f4c8024c219f1022a88.src","preCode":"    public void suppressShouldNotDropTombstonesForSessionWindows() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ofMillis(0), maxRecords(0)), sessionWindowedSerdeFrom(String.class), Long());\n        final MockInternalProcessorContext context = harness.context;\n        final KTableSuppressProcessor<Windowed<String>, Long> processor = harness.processor;\n\n        final long timestamp = 100L;\n        context.setRecordMetadata(\"\", 0, 0L, null, timestamp);\n        context.setStreamTime(timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new SessionWindow(0L, 0L));\n        final Change<Long> value = new Change<>(null, ARBITRARY_LONG);\n        processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/suppress/KTableSuppressProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"B"}],"commitId":"a65940cd820c68ee9613c7ff54676560cd01f88a","commitMessage":"@@@MINOR: clarify why suppress can sometimes drop tombstones (#6195)\n\nReviewers: Jonathan Gordon.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-01-26 05:17:39","modifiedFileCount":"3","status":"M","submitter":"John Roesler"},{"authorTime":"2019-02-19 02:14:37","codes":[{"authorDate":"2019-02-19 02:14:37","commitOrder":6,"curCode":"    public void windowedZeroTimeLimitShouldImmediatelyEmit() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ZERO, unbounded()), timeWindowedSerdeFrom(String.class, 100L), Long());\n        final MockInternalProcessorContext context = harness.context;\n        final KTableSuppressProcessor<Windowed<String>, Long> processor = harness.processor;\n\n        final long timestamp = ARBITRARY_LONG;\n        context.setRecordMetadata(\"\", 0, 0L, null, timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new TimeWindow(0L, 100L));\n        final Change<Long> value = ARBITRARY_CHANGE;\n        processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","date":"2019-02-19 02:14:37","endLine":134,"groupId":"13663","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"windowedZeroTimeLimitShouldImmediatelyEmit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/35/4fdd5e95541a529229ba57d51ccfd71060f9e6.src","preCode":"    public void windowedZeroTimeLimitShouldImmediatelyEmit() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ZERO, unbounded()), timeWindowedSerdeFrom(String.class, 100L), Long());\n        final MockInternalProcessorContext context = harness.context;\n        final KTableSuppressProcessor<Windowed<String>, Long> processor = harness.processor;\n\n        final long timestamp = ARBITRARY_LONG;\n        context.setRecordMetadata(\"\", 0, 0L, null, timestamp);\n        context.setStreamTime(timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new TimeWindow(0L, 100L));\n        final Change<Long> value = ARBITRARY_CHANGE;\n        processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/suppress/KTableSuppressProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2019-02-19 02:14:37","commitOrder":6,"curCode":"    public void suppressShouldNotDropTombstonesForSessionWindows() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ofMillis(0), maxRecords(0)), sessionWindowedSerdeFrom(String.class), Long());\n        final MockInternalProcessorContext context = harness.context;\n        final KTableSuppressProcessor<Windowed<String>, Long> processor = harness.processor;\n\n        final long timestamp = 100L;\n        context.setRecordMetadata(\"\", 0, 0L, null, timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new SessionWindow(0L, 0L));\n        final Change<Long> value = new Change<>(null, ARBITRARY_LONG);\n        processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","date":"2019-02-19 02:14:37","endLine":334,"groupId":"12805","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"suppressShouldNotDropTombstonesForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/35/4fdd5e95541a529229ba57d51ccfd71060f9e6.src","preCode":"    public void suppressShouldNotDropTombstonesForSessionWindows() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ofMillis(0), maxRecords(0)), sessionWindowedSerdeFrom(String.class), Long());\n        final MockInternalProcessorContext context = harness.context;\n        final KTableSuppressProcessor<Windowed<String>, Long> processor = harness.processor;\n\n        final long timestamp = 100L;\n        context.setRecordMetadata(\"\", 0, 0L, null, timestamp);\n        context.setStreamTime(timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new SessionWindow(0L, 0L));\n        final Change<Long> value = new Change<>(null, ARBITRARY_LONG);\n        processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/suppress/KTableSuppressProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"0846f590dac5d3893d41e262d67ee8a228dcc332","commitMessage":"@@@KAFKA-7895: Fix stream-time reckoning for suppress (#6278)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-02-19 02:14:37","modifiedFileCount":"26","status":"M","submitter":"John Roesler"},{"authorTime":"2019-05-31 06:42:04","codes":[{"authorDate":"2019-05-31 06:42:04","commitOrder":7,"curCode":"    public void windowedZeroTimeLimitShouldImmediatelyEmit() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ZERO, unbounded()), timeWindowedSerdeFrom(String.class, 100L), Long());\n        final MockInternalProcessorContext context = harness.context;\n\n        final long timestamp = ARBITRARY_LONG;\n        context.setRecordMetadata(\"\", 0, 0L, null, timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new TimeWindow(0L, 100L));\n        final Change<Long> value = ARBITRARY_CHANGE;\n        harness.processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","date":"2019-05-31 06:42:04","endLine":131,"groupId":"13663","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"windowedZeroTimeLimitShouldImmediatelyEmit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d8/cb858f5f91e6944459ec137920f3483d209480.src","preCode":"    public void windowedZeroTimeLimitShouldImmediatelyEmit() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ZERO, unbounded()), timeWindowedSerdeFrom(String.class, 100L), Long());\n        final MockInternalProcessorContext context = harness.context;\n        final KTableSuppressProcessor<Windowed<String>, Long> processor = harness.processor;\n\n        final long timestamp = ARBITRARY_LONG;\n        context.setRecordMetadata(\"\", 0, 0L, null, timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new TimeWindow(0L, 100L));\n        final Change<Long> value = ARBITRARY_CHANGE;\n        processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/suppress/KTableSuppressProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2019-05-31 06:42:04","commitOrder":7,"curCode":"    public void suppressShouldNotDropTombstonesForSessionWindows() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ofMillis(0), maxRecords(0)), sessionWindowedSerdeFrom(String.class), Long());\n        final MockInternalProcessorContext context = harness.context;\n\n        final long timestamp = 100L;\n        context.setRecordMetadata(\"\", 0, 0L, null, timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new SessionWindow(0L, 0L));\n        final Change<Long> value = new Change<>(null, ARBITRARY_LONG);\n        harness.processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","date":"2019-05-31 06:42:04","endLine":322,"groupId":"16428","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"suppressShouldNotDropTombstonesForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d8/cb858f5f91e6944459ec137920f3483d209480.src","preCode":"    public void suppressShouldNotDropTombstonesForSessionWindows() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ofMillis(0), maxRecords(0)), sessionWindowedSerdeFrom(String.class), Long());\n        final MockInternalProcessorContext context = harness.context;\n        final KTableSuppressProcessor<Windowed<String>, Long> processor = harness.processor;\n\n        final long timestamp = 100L;\n        context.setRecordMetadata(\"\", 0, 0L, null, timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new SessionWindow(0L, 0L));\n        final Change<Long> value = new Change<>(null, ARBITRARY_LONG);\n        processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/suppress/KTableSuppressProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"}],"commitId":"efa6410611aa0862065ad804323c280a4d8a372d","commitMessage":"@@@KAFKA-8199: Implement ValueGetter for Suppress (#6781)\n\nSee also #6684\n\nKTable processors must be supplied with a KTableProcessorSupplier.  which in turn requires implementing a ValueGetter.  for use with joins and groupings.\n\nFor suppression.  a correct view only includes the previously emitted values (not the currently buffered ones).  so this change also involves pushing the Change value type into the suppression buffer's interface.  so that it can get the prior value upon first buffering (which is also the previously emitted value).\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-05-31 06:42:04","modifiedFileCount":"10","status":"M","submitter":"John Roesler"},{"authorTime":"2021-06-10 13:51:36","codes":[{"authorDate":"2021-06-10 13:51:36","commitOrder":8,"curCode":"    public void windowedZeroTimeLimitShouldImmediatelyEmit() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ZERO, unbounded()), timeWindowedSerdeFrom(String.class, 100L), Long());\n        final MockInternalProcessorContext context = harness.context;\n\n        final long timestamp = ARBITRARY_LONG;\n        context.setRecordMetadata(\"\", 0, 0L, new RecordHeaders(), timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new TimeWindow(0L, 100L));\n        final Change<Long> value = ARBITRARY_CHANGE;\n        harness.processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","date":"2021-06-10 13:51:36","endLine":132,"groupId":"13663","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"windowedZeroTimeLimitShouldImmediatelyEmit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/1996588e5919c37967ca0e765fd7ba8416dc8b.src","preCode":"    public void windowedZeroTimeLimitShouldImmediatelyEmit() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ZERO, unbounded()), timeWindowedSerdeFrom(String.class, 100L), Long());\n        final MockInternalProcessorContext context = harness.context;\n\n        final long timestamp = ARBITRARY_LONG;\n        context.setRecordMetadata(\"\", 0, 0L, null, timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new TimeWindow(0L, 100L));\n        final Change<Long> value = ARBITRARY_CHANGE;\n        harness.processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/suppress/KTableSuppressProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"},{"authorDate":"2021-06-10 13:51:36","commitOrder":8,"curCode":"    public void suppressShouldNotDropTombstonesForSessionWindows() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ofMillis(0), maxRecords(0)), sessionWindowedSerdeFrom(String.class), Long());\n        final MockInternalProcessorContext context = harness.context;\n\n        final long timestamp = 100L;\n        context.setRecordMetadata(\"\", 0, 0L, new RecordHeaders(), timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new SessionWindow(0L, 0L));\n        final Change<Long> value = new Change<>(null, ARBITRARY_LONG);\n        harness.processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","date":"2021-06-10 13:51:36","endLine":323,"groupId":"16428","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"suppressShouldNotDropTombstonesForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/1996588e5919c37967ca0e765fd7ba8416dc8b.src","preCode":"    public void suppressShouldNotDropTombstonesForSessionWindows() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ofMillis(0), maxRecords(0)), sessionWindowedSerdeFrom(String.class), Long());\n        final MockInternalProcessorContext context = harness.context;\n\n        final long timestamp = 100L;\n        context.setRecordMetadata(\"\", 0, 0L, null, timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new SessionWindow(0L, 0L));\n        final Change<Long> value = new Change<>(null, ARBITRARY_LONG);\n        harness.processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/suppress/KTableSuppressProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"}],"commitId":"953ec9810099d6e5f41541de46c0ceebf4372790","commitMessage":"@@@MINOR: Improve Kafka Streams JavaDocs with regard to record metadata (#10810)\n\nReviewers: Luke Chen <howuon@gmail.com>.  Josep Prat <josep.prat@aiven.io>.  John Roesler <john@confluent.io>","date":"2021-06-10 13:51:36","modifiedFileCount":"28","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-09-08 06:17:44","codes":[{"authorDate":"2021-09-08 06:17:44","commitOrder":9,"curCode":"    public void windowedZeroTimeLimitShouldImmediatelyEmit() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ZERO, unbounded()), timeWindowedSerdeFrom(String.class, 100L), Long());\n        final MockInternalNewProcessorContext<Windowed<String>, Change<Long>> context = harness.context;\n\n        final long timestamp = ARBITRARY_LONG;\n        context.setRecordMetadata(\"\", 0, 0L);\n        context.setTimestamp(timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new TimeWindow(0L, 100L));\n        final Change<Long> value = ARBITRARY_CHANGE;\n        harness.processor.process(new Record<>(key, value, timestamp));\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.record(), is(new Record<>(key, value, timestamp)));\n    }\n","date":"2021-09-08 06:17:44","endLine":134,"groupId":"101778","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"windowedZeroTimeLimitShouldImmediatelyEmit","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/05d0d54bd03c7f8003547fb23024a320164241.src","preCode":"    public void windowedZeroTimeLimitShouldImmediatelyEmit() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ZERO, unbounded()), timeWindowedSerdeFrom(String.class, 100L), Long());\n        final MockInternalProcessorContext context = harness.context;\n\n        final long timestamp = ARBITRARY_LONG;\n        context.setRecordMetadata(\"\", 0, 0L, new RecordHeaders(), timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new TimeWindow(0L, 100L));\n        final Change<Long> value = ARBITRARY_CHANGE;\n        harness.processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/suppress/KTableSuppressProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2021-09-08 06:17:44","commitOrder":9,"curCode":"    public void suppressShouldNotDropTombstonesForSessionWindows() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ofMillis(0), maxRecords(0)), sessionWindowedSerdeFrom(String.class), Long());\n        final MockInternalNewProcessorContext<Windowed<String>, Change<Long>> context = harness.context;\n\n        final long timestamp = 100L;\n        context.setRecordMetadata(\"\", 0, 0L);\n        context.setTimestamp(timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new SessionWindow(0L, 0L));\n        final Change<Long> value = new Change<>(null, ARBITRARY_LONG);\n        harness.processor.process(new Record<>(key, value, timestamp));\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.record(), is(new Record<>(key, value, timestamp)));\n    }\n","date":"2021-09-08 06:17:44","endLine":333,"groupId":"101778","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"suppressShouldNotDropTombstonesForSessionWindows","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/05d0d54bd03c7f8003547fb23024a320164241.src","preCode":"    public void suppressShouldNotDropTombstonesForSessionWindows() {\n        final Harness<Windowed<String>, Long> harness =\n            new Harness<>(untilTimeLimit(ofMillis(0), maxRecords(0)), sessionWindowedSerdeFrom(String.class), Long());\n        final MockInternalProcessorContext context = harness.context;\n\n        final long timestamp = 100L;\n        context.setRecordMetadata(\"\", 0, 0L, new RecordHeaders(), timestamp);\n        final Windowed<String> key = new Windowed<>(\"hey\", new SessionWindow(0L, 0L));\n        final Change<Long> value = new Change<>(null, ARBITRARY_LONG);\n        harness.processor.process(key, value);\n\n        assertThat(context.forwarded(), hasSize(1));\n        final MockProcessorContext.CapturedForward capturedForward = context.forwarded().get(0);\n        assertThat(capturedForward.keyValue(), is(new KeyValue<>(key, value)));\n        assertThat(capturedForward.timestamp(), is(timestamp));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/suppress/KTableSuppressProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"5f89ce5f202bf560214e00fa1ac7add7a27248cf","commitMessage":"@@@KAFKA-13201: Convert KTable suppress to new PAPI (#11213)\n\nMigrate Suppress as part of the migration of KStream/KTable\n operations to the new Processor API (KAFKA-8410)\n\nReviewers: John Roesler <vvcephei@apache.org>","date":"2021-09-08 06:17:44","modifiedFileCount":"8","status":"M","submitter":"Jorge Esteban Quilcate Otoya"}]
