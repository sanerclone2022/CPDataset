[{"authorTime":"2016-01-21 08:10:43","codes":[{"authorDate":"2016-01-21 08:10:43","commitOrder":1,"curCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<Entry<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new Entry<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 3);\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.directorySuffix(4L), inner.directorySuffix(5L), inner.directorySuffix(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2016-01-21 08:10:43","endLine":527,"groupId":"20547","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/ad67f43197fe83e50d527af1d0aa5c57146fe2.src","preCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<Entry<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new Entry<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 3);\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.directorySuffix(4L), inner.directorySuffix(5L), inner.directorySuffix(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"B"},{"authorDate":"2016-01-21 08:10:43","commitOrder":1,"curCode":"    public void testRestore() throws IOException {\n        final List<Entry<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new Entry<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            try {\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                context.setTime(startTime + incr * 3);\n                store.put(3, \"three\");\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new Entry<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(\"window\", changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.directorySuffix(4L), inner.directorySuffix(5L), inner.directorySuffix(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","date":"2016-01-21 08:10:43","endLine":635,"groupId":"19050","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/ad67f43197fe83e50d527af1d0aa5c57146fe2.src","preCode":"    public void testRestore() throws IOException {\n        final List<Entry<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new Entry<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            try {\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                context.setTime(startTime + incr * 3);\n                store.put(3, \"three\");\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new Entry<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(\"window\", changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.directorySuffix(4L), inner.directorySuffix(5L), inner.directorySuffix(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"B"}],"commitId":"959cf09e8653f4b8255f49c6f4c258ed1a5ec38e","commitMessage":"@@@KAFKA-3121: Remove aggregatorSupplier and add Reduce functions\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Yasuhiro Matsuda\n\nCloses #795 from guozhangwang/K3121s1\n","date":"2016-01-21 08:10:43","modifiedFileCount":"15","status":"B","submitter":"Guozhang Wang"},{"authorTime":"2016-01-23 05:00:00","codes":[{"authorDate":"2016-01-23 05:00:00","commitOrder":2,"curCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 3);\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.directorySuffix(4L), inner.directorySuffix(5L), inner.directorySuffix(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2016-01-23 05:00:00","endLine":527,"groupId":"20547","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/45/448e5597bc5960dcd5dace406e102ff9064667.src","preCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<Entry<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new Entry<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 3);\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.directorySuffix(4L), inner.directorySuffix(5L), inner.directorySuffix(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"M"},{"authorDate":"2016-01-23 05:00:00","commitOrder":2,"curCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            try {\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                context.setTime(startTime + incr * 3);\n                store.put(3, \"three\");\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(\"window\", changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.directorySuffix(4L), inner.directorySuffix(5L), inner.directorySuffix(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","date":"2016-01-23 05:00:00","endLine":635,"groupId":"13866","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/45/448e5597bc5960dcd5dace406e102ff9064667.src","preCode":"    public void testRestore() throws IOException {\n        final List<Entry<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new Entry<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            try {\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                context.setTime(startTime + incr * 3);\n                store.put(3, \"three\");\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new Entry<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(\"window\", changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.directorySuffix(4L), inner.directorySuffix(5L), inner.directorySuffix(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"M"}],"commitId":"21c6cfe50dbe818a392c28f48ce8891f7f99aaf6","commitMessage":"@@@KAFKA-3136: Rename KafkaStreaming to KafkaStreams\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Gwen Shapira\n\nCloses #800 from guozhangwang/KRename\n","date":"2016-01-23 05:00:00","modifiedFileCount":"50","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2016-02-09 08:48:06","codes":[{"authorDate":"2016-02-09 08:48:06","commitOrder":3,"curCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 3);\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2016-02-09 08:48:06","endLine":531,"groupId":"20547","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/da1be1298d8849d400835bd8deeb765d55dd9b.src","preCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 3);\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.directorySuffix(4L), inner.directorySuffix(5L), inner.directorySuffix(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":420,"status":"M"},{"authorDate":"2016-02-09 08:48:06","commitOrder":3,"curCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            try {\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                context.setTime(startTime + incr * 3);\n                store.put(3, \"three\");\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","date":"2016-02-09 08:48:06","endLine":639,"groupId":"8588","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/da1be1298d8849d400835bd8deeb765d55dd9b.src","preCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            try {\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                context.setTime(startTime + incr * 3);\n                store.put(3, \"three\");\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(\"window\", changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.directorySuffix(4L), inner.directorySuffix(5L), inner.directorySuffix(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":534,"status":"M"}],"commitId":"feda3f68e98b5269431db9f2a5f131c03a16f651","commitMessage":"@@@HOTFIX: open window segments on init\n\nguozhangwang\n\nA window store should open all existing segments. This is important for segment cleanup.  and it also ensures that the first fetch() call returns the hits.  the values in the search range. (previously.  it missed the hits in fetch() immediately after initialization).\n\nAuthor: Yasuhiro Matsuda <yasuhiro@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #886 from ymatsuda/hotfix3\n","date":"2016-02-09 08:48:06","modifiedFileCount":"3","status":"M","submitter":"Yasuhiro Matsuda"},{"authorTime":"2016-03-18 06:41:59","codes":[{"authorDate":"2016-03-18 06:41:59","commitOrder":4,"curCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 3);\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2016-03-18 06:41:59","endLine":530,"groupId":"20547","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ff/c97c3e7a4d77f2095bc2a6ef5993d20f1946c1.src","preCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 3);\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"},{"authorDate":"2016-03-18 06:41:59","commitOrder":4,"curCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            try {\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                context.setTime(startTime + incr * 3);\n                store.put(3, \"three\");\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","date":"2016-03-18 06:41:59","endLine":638,"groupId":"11425","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ff/c97c3e7a4d77f2095bc2a6ef5993d20f1946c1.src","preCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            try {\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                context.setTime(startTime + incr * 3);\n                store.put(3, \"three\");\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerializer, byteArraySerializer);\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerializer, byteArrayDeserializer, byteArraySerializer, byteArrayDeserializer,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":533,"status":"M"}],"commitId":"dea0719e99211684775780f5da8b93835d7a5dac","commitMessage":"@@@KAFKA-3336: Unify Serializer and Deserializer into Serialization\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Michael G. Noll.  Ismael Juma\n\nCloses #1066 from guozhangwang/K3336\n","date":"2016-03-18 06:41:59","modifiedFileCount":"70","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2016-03-19 03:39:41","codes":[{"authorDate":"2016-03-19 03:39:41","commitOrder":5,"curCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 3);\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2016-03-19 03:39:41","endLine":532,"groupId":"20547","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/50/2870b2a54483c308eff75a51b90e20e99bece6.src","preCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 3);\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":421,"status":"M"},{"authorDate":"2016-03-19 03:39:41","commitOrder":5,"curCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context);\n            try {\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                context.setTime(startTime + incr * 3);\n                store.put(3, \"three\");\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","date":"2016-03-19 03:39:41","endLine":640,"groupId":"11425","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/50/2870b2a54483c308eff75a51b90e20e99bece6.src","preCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            try {\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                context.setTime(startTime + incr * 3);\n                store.put(3, \"three\");\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context, serdes);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":535,"status":"M"}],"commitId":"5d0cd7667f7e584f05ab4e76ed139fbafa81e042","commitMessage":"@@@KAFKA-3422: Add overloading functions without serdes in Streams DSL\n\nAlso include:\n\n1) remove streams specific configs before passing to producer and consumer to avoid warning message;\n2) add `ConsumerRecord` timestamp extractor and set as the default extractor.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Michael G. Noll.  Ewen Cheslack-Postava\n\nCloses #1093 from guozhangwang/KConfigWarn\n","date":"2016-03-19 03:39:41","modifiedFileCount":"24","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2016-09-07 02:38:53","codes":[{"authorDate":"2016-09-07 02:38:53","commitOrder":6,"curCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 3);\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2016-09-07 02:38:53","endLine":572,"groupId":"20547","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/84/c032060b80ac6d57661d5bfced4dd726da3741.src","preCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 3);\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"M"},{"authorDate":"2016-09-07 02:38:53","commitOrder":6,"curCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context);\n            try {\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                context.setTime(startTime + incr * 3);\n                store.put(3, \"three\");\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","date":"2016-09-07 02:38:53","endLine":680,"groupId":"11425","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/84/c032060b80ac6d57661d5bfced4dd726da3741.src","preCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context);\n            try {\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                context.setTime(startTime + incr * 3);\n                store.put(3, \"three\");\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer) {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"M"}],"commitId":"ed639e8263d9409a9836a55938174122d6ff3ffa","commitMessage":"@@@KAFKA-4023: Add thread id and task id for logging prefix in Streams\n\nAuthor: bbejeck <bbejeck@gmail.com>\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>\n\nCloses #1803 from bbejeck/KAFKA-4023_add_thread_id_prefix_for_logging\n","date":"2016-09-07 02:38:53","modifiedFileCount":"14","status":"M","submitter":"Bill Bejeck"},{"authorTime":"2016-09-17 00:58:36","codes":[{"authorDate":"2016-09-17 00:58:36","commitOrder":7,"curCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2016-09-17 00:58:36","endLine":565,"groupId":"16812","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/89dd69fd76d058b9048e8674b5da4914549db2.src","preCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 3);\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":456,"status":"M"},{"authorDate":"2016-09-17 00:58:36","commitOrder":7,"curCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                context.setRecordContext(createRecordContext(startTime + incr * 3));\n                store.put(3, \"three\");\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","date":"2016-09-17 00:58:36","endLine":673,"groupId":"11425","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/89dd69fd76d058b9048e8674b5da4914549db2.src","preCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context);\n            try {\n                context.setTime(startTime);\n                store.put(0, \"zero\");\n                context.setTime(startTime + incr);\n                store.put(1, \"one\");\n                context.setTime(startTime + incr * 2);\n                store.put(2, \"two\");\n                context.setTime(startTime + incr * 3);\n                store.put(3, \"three\");\n                context.setTime(startTime + incr * 4);\n                store.put(4, \"four\");\n                context.setTime(startTime + incr * 5);\n                store.put(5, \"five\");\n                context.setTime(startTime + incr * 6);\n                store.put(6, \"six\");\n                context.setTime(startTime + incr * 7);\n                store.put(7, \"seven\");\n                context.setTime(startTime + incr * 8);\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector);\n\n            WindowStore<Integer, String> store = createWindowStore(context);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":568,"status":"M"}],"commitId":"86aa0eb0f274c6e44eb190ce250433419e011a67","commitMessage":"@@@KAFKA-3776: Unify store and downstream caching in streams\n\nThis is joint work between dguy and enothereska. The work implements KIP-63. Overview of main changes:\n\n- New byte-based cache that acts as a buffer for any persistent store and for forwarding changes downstream.\n- Forwarding record path changes: previously a record in a task completed end-to-end. Now it may be buffered in a processor node while other records complete in the task.\n- Cleanup and state stores and decoupling of cache from state store and forwarding.\n- More than 80 new unit and integration tests.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\nAuthor: Eno Thereska <eno.thereska@gmail.com>\n\nReviewers: Matthias J. Sax.  Guozhang Wang\n\nCloses #1752 from enothereska/KAFKA-3776-poc\n","date":"2016-09-17 00:58:36","modifiedFileCount":"77","status":"M","submitter":"Damian Guy"},{"authorTime":"2016-12-07 03:49:54","codes":[{"authorDate":"2016-12-07 03:49:54","commitOrder":8,"curCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2016-12-07 03:49:54","endLine":568,"groupId":"16812","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b1/5ebab55645853450df942806b68ad601083042.src","preCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"M"},{"authorDate":"2016-12-07 03:49:54","commitOrder":8,"curCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                context.setRecordContext(createRecordContext(startTime + incr * 3));\n                store.put(3, \"three\");\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","date":"2016-12-07 03:49:54","endLine":676,"groupId":"11425","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b1/5ebab55645853450df942806b68ad601083042.src","preCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                context.setRecordContext(createRecordContext(startTime + incr * 3));\n                store.put(3, \"three\");\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollector(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":571,"status":"M"}],"commitId":"a4592a18641f84a1983c5fe7e697a8b0ab43eb25","commitMessage":"@@@KAFKA-4488: UnsupportedOperationException during initialization of StandbyTask\n\nInstead of throwing `UnsupportedOperationException` from `StandbyTask.recordCollector()` return a No-op implementation of `RecordCollector`.\nRefactored `RecordCollector` to have an interface and impl.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Eno Thereska.  Guozhang Wang\n\nCloses #2212 from dguy/standby-task\n","date":"2016-12-07 03:49:54","modifiedFileCount":"13","status":"M","submitter":"Damian Guy"},{"authorTime":"2017-01-07 02:12:30","codes":[{"authorDate":"2017-01-07 02:12:30","commitOrder":9,"curCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                \r\n                final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2017-01-07 02:12:30","endLine":583,"groupId":"12153","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/307405ca7fcfbf8e2c2185c5e861c291752018.src","preCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(2L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                \r\n                assertEquals(Utils.mkSet(2L, 3L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(2L, 3L, 4L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(3L, 4L, 5L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":460,"status":"M"},{"authorDate":"2017-01-07 02:12:30","commitOrder":9,"curCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                context.setRecordContext(createRecordContext(startTime + incr * 3));\n                store.put(3, \"three\");\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","date":"2017-01-07 02:12:30","endLine":688,"groupId":"21312","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/307405ca7fcfbf8e2c2185c5e861c291752018.src","preCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                context.setRecordContext(createRecordContext(startTime + incr * 3));\n                store.put(3, \"three\");\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkSet(4L, 5L, 6L), inner.segmentIds());\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(inner.segmentName(4L), inner.segmentName(5L), inner.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":587,"status":"M"}],"commitId":"e0de3a4211a3701c98230b115fadfb67b655e3cf","commitMessage":"@@@KAFKA-3452: Support session windows\n\nAdd support for SessionWindows based on design detailed in https://cwiki.apache.org/confluence/display/KAFKA/KIP-94+Session+Windows.\nThis includes refactoring of the RocksDBWindowStore such that functionality common with the RocksDBSessionStore isn't duplicated.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Eno Thereska <eno.thereska@gmail.com>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #2166 from dguy/kafka-3452-session-merge\n","date":"2017-01-07 02:12:30","modifiedFileCount":"45","status":"M","submitter":"Damian Guy"},{"authorTime":"2017-01-12 03:34:58","codes":[{"authorDate":"2017-01-12 03:34:58","commitOrder":10,"curCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                \r\n                final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2017-01-12 04:06:18","endLine":595,"groupId":"12153","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a5/225926e27ed776a79f7502639556a8859dcd44.src","preCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                \r\n                final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"M"},{"authorDate":"2017-01-12 03:34:58","commitOrder":10,"curCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                context.setRecordContext(createRecordContext(startTime + incr * 3));\n                store.put(3, \"three\");\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","date":"2017-01-12 04:06:18","endLine":700,"groupId":"21312","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a5/225926e27ed776a79f7502639556a8859dcd44.src","preCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                context.setRecordContext(createRecordContext(startTime + incr * 3));\n                store.put(3, \"three\");\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, new ThreadCache(DEFAULT_CACHE_SIZE_BYTES));\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":599,"status":"M"}],"commitId":"ecff8544dd45e8cf0fcf04f5e0e716d3e21c9f20","commitMessage":"@@@KAFKA-3715: Add granular metrics to Kafka Streams and add hierarhical logging levels to Metrics\n\nKafka Streams: add granular metrics per node and per task.  also expose ability to register non latency metrics in StreamsMetrics\nAlso added different recording levels to Metrics.\n\nThis is joint contribution from Eno Thereska and Aarti Gupta.\n\nfrom https://github.com/apache/kafka/pull/1362#issuecomment-218326690-------\nWe can consider adding metrics for process / punctuate / commit rate at the granularity of each processor node in addition to the global rate mentioned above. This is very helpful in debugging.\n\nWe can consider adding rate / total cumulated metrics for context.forward indicating how many records were forwarded downstream from this processor node as well. This is helpful in debugging.\n\nWe can consider adding metrics for each stream partition timestamp.\nThis is helpful in debugging.\n## Besides the latency metrics.  we can also add throughput latency in terms of source records consumed.\n\nMore discussions here https://issues.apache.org/jira/browse/KAFKA-3715.  KIP-104.  KIP-105\n\nAuthor: Eno Thereska <eno@confluent.io>\nAuthor: Aarti Gupta <aartiguptaa@gmail.com>\n\nReviewers: Greg Fodor.  Ismael Juma.  Damian Guy.  Guozhang Wang\n\nCloses #1446 from aartigupta/trunk\n","date":"2017-01-12 04:06:18","modifiedFileCount":"46","status":"M","submitter":"Eno Thereska"},{"authorTime":"2017-01-12 03:34:58","codes":[{"authorDate":"2017-01-18 06:13:46","commitOrder":11,"curCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                \r\n                final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2017-01-18 06:13:46","endLine":593,"groupId":"12153","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/79/223dee81ab302d8d6be5b0f75f3833d63b82c8.src","preCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            RocksDBWindowStore<Integer, String> inner =\n                    (RocksDBWindowStore<Integer, String>) ((MeteredWindowStore<Integer, String>) store).inner();\n            try {\n                \r\n                final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"M"},{"authorDate":"2017-01-12 03:34:58","commitOrder":11,"curCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                context.setRecordContext(createRecordContext(startTime + incr * 3));\n                store.put(3, \"three\");\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","date":"2017-01-12 04:06:18","endLine":700,"groupId":"21312","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a5/225926e27ed776a79f7502639556a8859dcd44.src","preCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                context.setRecordContext(createRecordContext(startTime + incr * 3));\n                store.put(3, \"three\");\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":599,"status":"N"}],"commitId":"73b7ae0019d387407375f3865e263225c986a6ce","commitMessage":"@@@KAFKA-3452 Follow-up: Refactoring StateStore hierarchies\n\nThis is a follow up of https://github.com/apache/kafka/pull/2166 - refactoring the store hierarchies as requested\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>\n\nCloses #2360 from dguy/state-store-refactor\n","date":"2017-01-18 06:13:46","modifiedFileCount":"24","status":"M","submitter":"Damian Guy"},{"authorTime":"2017-01-18 12:29:55","codes":[{"authorDate":"2017-01-18 12:29:55","commitOrder":12,"curCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                \r\n                final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2017-01-18 12:31:31","endLine":593,"groupId":"12153","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ee/846f7383c107cced048d8c84a20e4ff00064a3.src","preCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                \r\n                final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"M"},{"authorDate":"2017-01-18 12:29:55","commitOrder":12,"curCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                context.setRecordContext(createRecordContext(startTime + incr * 3));\n                store.put(3, \"three\");\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","date":"2017-01-18 12:31:31","endLine":698,"groupId":"21312","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ee/846f7383c107cced048d8c84a20e4ff00064a3.src","preCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                context.setRecordContext(createRecordContext(startTime + incr * 3));\n                store.put(3, \"three\");\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    null, baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":597,"status":"M"}],"commitId":"1974e1b0e54abe5fdebd8ff3338df864b7ab60f3","commitMessage":"@@@KAFKA-3502; move RocksDB options construction to init()\n\nIn RocksDBStore.  options / wOptions / fOptions are constructed in the constructor.  which needs to be dismissed in the close() call; however in some tests.  the generated topology is not initialized at all.  and hence the corresponding state stores are supposed to not be able to be closed as well since their `init` function is not called. This could cause the above option objects to be not released.\n\nThis is fixed in this patch to move the logic out of constructor and inside `init` functions.  so that no RocksDB objects will be created in the constructor only. Also some minor cleanups:\n\n1. In KStreamTestDriver.close().  we lost the logic to close the state stores but only call `flush`; it is now changed back to call both.\n2. Moved the forwarding logic from KStreamTestDriver to MockProcessorContext to remove the mutual dependency: these functions should really be in ProcessorContext.  not the test driver.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Matthias J. Sax <matthias@confluent.io>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2381 from guozhangwang/K3502-pure-virtual-function-unit-tests\n","date":"2017-01-18 12:31:31","modifiedFileCount":"22","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2017-01-25 08:36:31","codes":[{"authorDate":"2017-01-25 08:36:31","commitOrder":13,"curCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(final String topic,\n                                          K1 key,\n                                          V1 value,\n                                          Integer partition,\n                                          Long timestamp,\n                                          Serializer<K1> keySerializer,\n                                          Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(topic, key),\n                                    valueSerializer.serialize(topic, value))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                \r\n                final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2017-01-25 08:36:31","endLine":634,"groupId":"12153","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d6/06e84eb8f5a2f0647c1620ca63fcf5b03f84fc.src","preCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                \r\n                final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"M"},{"authorDate":"2017-01-25 08:36:31","commitOrder":13,"curCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(final String topic,\n                                          K1 key,\n                                          V1 value,\n                                          Integer partition,\n                                          Long timestamp,\n                                          Serializer<K1> keySerializer,\n                                          Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(topic, key),\n                                    valueSerializer.serialize(topic, value))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                context.setRecordContext(createRecordContext(startTime + incr * 3));\n                store.put(3, \"three\");\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(final String topic,\n                                          K1 key,\n                                          V1 value,\n                                          Integer partition,\n                                          Long timestamp,\n                                          Serializer<K1> keySerializer,\n                                          Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(topic, key),\n                                    valueSerializer.serialize(topic, value))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","date":"2017-01-25 08:36:31","endLine":751,"groupId":"21312","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d6/06e84eb8f5a2f0647c1620ca63fcf5b03f84fc.src","preCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                context.setRecordContext(createRecordContext(startTime + incr * 3));\n                store.put(3, \"three\");\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(ProducerRecord<K1, V1> record, Serializer<K1> keySerializer, Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(record.topic(), record.key()),\n                                    valueSerializer.serialize(record.topic(), record.value()))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":638,"status":"M"}],"commitId":"abe19fe693d81ea65a018041f157c58ebecd014d","commitMessage":"@@@KAFKA-3835; Streams is creating two ProducerRecords for each send via RecordCollector\n\nAuthor: Jeyhun Karimov <je.karimov@gmail.com>\n\nReviewers: Matthias J. Sax.  Guozhang Wang\n\nCloses #2417 from jeyhunkarimov/KAFKA-3835\n","date":"2017-01-25 08:36:31","modifiedFileCount":"17","status":"M","submitter":"Jeyhun Karimov"},{"authorTime":"2017-02-04 03:12:49","codes":[{"authorDate":"2017-02-04 03:12:49","commitOrder":14,"curCode":"    public void testRolling() throws IOException {\n        WindowStore<Integer, String> store = createWindowStore(context, false, true);\n\n        try {\n            \r\n            final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n            long startTime = segmentSize * 2;\n            long incr = segmentSize / 2;\n            context.setRecordContext(createRecordContext(startTime));\n            store.put(0, \"zero\");\n            assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n            context.setRecordContext(createRecordContext(startTime + incr));\n            store.put(1, \"one\");\n            assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n            context.setRecordContext(createRecordContext(startTime + incr * 2));\n            store.put(2, \"two\");\n            assertEquals(Utils.mkSet(segments.segmentName(2),\n                    segments.segmentName(3)), segmentDirs(baseDir));\n\n            context.setRecordContext(createRecordContext(startTime + incr * 4));\n            store.put(4, \"four\");\n            assertEquals(Utils.mkSet(segments.segmentName(2),\n                    segments.segmentName(3),\n                    segments.segmentName(4)), segmentDirs(baseDir));\n\n\n            context.setRecordContext(createRecordContext(startTime + incr * 5));\n            store.put(5, \"five\");\n            assertEquals(Utils.mkSet(segments.segmentName(2),\n                    segments.segmentName(3),\n                    segments.segmentName(4)), segmentDirs(baseDir));\n\n            assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n            assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n            assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n            assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n            assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n            context.setRecordContext(createRecordContext(startTime + incr * 6));\n            store.put(6, \"six\");\n            assertEquals(Utils.mkSet(segments.segmentName(3),\n                    segments.segmentName(4),\n                    segments.segmentName(5)), segmentDirs(baseDir));\n\n\n            assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n            assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n            assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n            assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n            assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n            context.setRecordContext(createRecordContext(startTime + incr * 7));\n            store.put(7, \"seven\");\n            assertEquals(Utils.mkSet(segments.segmentName(3),\n                    segments.segmentName(4),\n                    segments.segmentName(5)), segmentDirs(baseDir));\n\n            assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n            assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n            assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n            assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n            assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n            assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n            context.setRecordContext(createRecordContext(startTime + incr * 8));\n            store.put(8, \"eight\");\n            assertEquals(Utils.mkSet(segments.segmentName(4),\n                    segments.segmentName(5),\n                    segments.segmentName(6)), segmentDirs(baseDir));\n\n\n            assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n            assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n            assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n            assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n            assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n            assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n            \r\n            store.flush();\n            assertEquals(Utils.mkSet(segments.segmentName(4),\n                    segments.segmentName(5),\n                    segments.segmentName(6)), segmentDirs(baseDir));\n\n        } finally {\n            store.close();\n        }\n    }\n","date":"2017-02-04 03:12:49","endLine":423,"groupId":"12153","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/86dde8fc91ad15b50ed615f7a15d6f758144cc.src","preCode":"    public void testRolling() throws IOException {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRolling\") {\n                @Override\n                public <K1, V1> void send(final String topic,\n                                          K1 key,\n                                          V1 value,\n                                          Integer partition,\n                                          Long timestamp,\n                                          Serializer<K1> keySerializer,\n                                          Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(topic, key),\n                                    valueSerializer.serialize(topic, value))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                \r\n                final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n                long startTime = segmentSize * 2;\n                long incr = segmentSize / 2;\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                assertEquals(Utils.mkSet(segments.segmentName(2),\n                                         segments.segmentName(3),\n                                         segments.segmentName(4)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                assertEquals(Utils.mkSet(segments.segmentName(3),\n                                         segments.segmentName(4),\n                                         segments.segmentName(5)), segmentDirs(baseDir));\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(Utils.mkSet(segments.segmentName(4),\n                                         segments.segmentName(5),\n                                         segments.segmentName(6)), segmentDirs(baseDir));\n\n            } finally {\n                store.close();\n            }\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"},{"authorDate":"2017-02-04 03:12:49","commitOrder":14,"curCode":"    public void testRestore() throws IOException {\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        WindowStore<Integer, String> store = createWindowStore(context, false, true);\n        try {\n            context.setRecordContext(createRecordContext(startTime));\n            store.put(0, \"zero\");\n            context.setRecordContext(createRecordContext(startTime + incr));\n            store.put(1, \"one\");\n            context.setRecordContext(createRecordContext(startTime + incr * 2));\n            store.put(2, \"two\");\n            context.setRecordContext(createRecordContext(startTime + incr * 3));\n            store.put(3, \"three\");\n            context.setRecordContext(createRecordContext(startTime + incr * 4));\n            store.put(4, \"four\");\n            context.setRecordContext(createRecordContext(startTime + incr * 5));\n            store.put(5, \"five\");\n            context.setRecordContext(createRecordContext(startTime + incr * 6));\n            store.put(6, \"six\");\n            context.setRecordContext(createRecordContext(startTime + incr * 7));\n            store.put(7, \"seven\");\n            context.setRecordContext(createRecordContext(startTime + incr * 8));\n            store.put(8, \"eight\");\n            store.flush();\n\n        } finally {\n            store.close();\n        }\n\n        \r\n        Utils.delete(baseDir);\n\n        WindowStore<Integer, String> store2 = createWindowStore(context, false, true);\n        assertEquals(Utils.mkList(), toList(store2.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n        try {\n            context.restore(windowName, changeLog);\n\n            assertEquals(Utils.mkList(), toList(store2.fetch(0, startTime - windowSize, startTime + windowSize)));\n            assertEquals(Utils.mkList(), toList(store2.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n            assertEquals(Utils.mkList(), toList(store2.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n            assertEquals(Utils.mkList(), toList(store2.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n            assertEquals(Utils.mkList(\"four\"), toList(store2.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n            assertEquals(Utils.mkList(\"five\"), toList(store2.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n            assertEquals(Utils.mkList(\"six\"), toList(store2.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n            assertEquals(Utils.mkList(\"seven\"), toList(store2.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n            assertEquals(Utils.mkList(\"eight\"), toList(store2.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n            \r\n            store2.flush();\n            assertEquals(\n                    Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                    segmentDirs(baseDir)\n            );\n        } finally {\n            store2.close();\n        }\n    }\n","date":"2017-02-04 03:12:49","endLine":493,"groupId":"20214","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/86dde8fc91ad15b50ed615f7a15d6f758144cc.src","preCode":"    public void testRestore() throws IOException {\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestore\") {\n                @Override\n                public <K1, V1> void send(final String topic,\n                                          K1 key,\n                                          V1 value,\n                                          Integer partition,\n                                          Long timestamp,\n                                          Serializer<K1> keySerializer,\n                                          Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(topic, key),\n                                    valueSerializer.serialize(topic, value))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n            try {\n                context.setRecordContext(createRecordContext(startTime));\n                store.put(0, \"zero\");\n                context.setRecordContext(createRecordContext(startTime + incr));\n                store.put(1, \"one\");\n                context.setRecordContext(createRecordContext(startTime + incr * 2));\n                store.put(2, \"two\");\n                context.setRecordContext(createRecordContext(startTime + incr * 3));\n                store.put(3, \"three\");\n                context.setRecordContext(createRecordContext(startTime + incr * 4));\n                store.put(4, \"four\");\n                context.setRecordContext(createRecordContext(startTime + incr * 5));\n                store.put(5, \"five\");\n                context.setRecordContext(createRecordContext(startTime + incr * 6));\n                store.put(6, \"six\");\n                context.setRecordContext(createRecordContext(startTime + incr * 7));\n                store.put(7, \"seven\");\n                context.setRecordContext(createRecordContext(startTime + incr * 8));\n                store.put(8, \"eight\");\n                store.flush();\n\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n\n        File baseDir2 = Files.createTempDirectory(\"test\").toFile();\n        try {\n            Producer<byte[], byte[]> producer = new MockProducer<>(true, byteArraySerde.serializer(), byteArraySerde.serializer());\n            RecordCollector recordCollector = new RecordCollectorImpl(producer, \"RocksDBWindowStoreTest-TestRestoreII\") {\n                @Override\n                public <K1, V1> void send(final String topic,\n                                          K1 key,\n                                          V1 value,\n                                          Integer partition,\n                                          Long timestamp,\n                                          Serializer<K1> keySerializer,\n                                          Serializer<V1> valueSerializer) {\n                    changeLog.add(new KeyValue<>(\n                                    keySerializer.serialize(topic, key),\n                                    valueSerializer.serialize(topic, value))\n                    );\n                }\n            };\n\n            MockProcessorContext context = new MockProcessorContext(\n                    baseDir,\n                    byteArraySerde, byteArraySerde,\n                    recordCollector, cache);\n\n            WindowStore<Integer, String> store = createWindowStore(context, false, true);\n\n            try {\n                context.restore(windowName, changeLog);\n\n                assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n                assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n                assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n                assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n                assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n                assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n                assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n                \r\n                store.flush();\n                assertEquals(\n                        Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                        segmentDirs(baseDir)\n                );\n            } finally {\n                store.close();\n            }\n\n\n        } finally {\n            Utils.delete(baseDir2);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"M"}],"commitId":"7ebc5da606fb806bde8b7176fed0e60243e0f7f3","commitMessage":"@@@KAFKA-3452 Follow-up: Optimize ByteStore Scenarios\n\nThis is a refactoring follow-up of https://github.com/apache/kafka/pull/2166. Main refactoring changes:\n\n1. Extract `InMemoryKeyValueStore` out of `InMemoryKeyValueStoreSupplier` and remove its duplicates in test package.\n\n2. Add two abstract classes `AbstractKeyValueIterator` and `AbstractKeyValueStore` to collapse common functional logics.\n\n3. Added specialized `BytesXXStore` to accommodate cases where key value types are Bytes / byte[] so that we can save calling the dummy serdes.\n\n4. Make the key type in `ThreadCache` from byte[] to Bytes.  as SessionStore / WindowStore's result serialized bytes are in the form of Bytes anyways.  so that we can save unnecessary `Bytes.get()` and `Bytes.wrap(bytes)`.\n\nEach of these should arguably be a separate PR and I apologize for the mess.  this is because this branch was extracted from a rather large diff that has multiple refactoring mingled together and dguy and myself have already put lots of efforts to break it down to a few separate PRs.  and this is the only left-over work. Such PR won't happen in the future.\n\nPing dguy enothereska mjsax for reviews\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy.  Matthias J. Sax.  Jun Rao\n\nCloses #2333 from guozhangwang/K3452-followup-state-store-refactor\n","date":"2017-02-04 03:12:49","modifiedFileCount":"56","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2017-03-15 05:21:03","codes":[{"authorDate":"2017-03-15 05:21:03","commitOrder":15,"curCode":"    public void testRolling() throws IOException {\n        windowStore = createWindowStore(context, false, true);\n\n        \r\n        final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr));\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 2));\n        windowStore.put(2, \"two\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 4));\n        windowStore.put(4, \"four\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3),\n                                 segments.segmentName(4)), segmentDirs(baseDir));\n\n\n        context.setRecordContext(createRecordContext(startTime + incr * 5));\n        windowStore.put(5, \"five\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3),\n                                 segments.segmentName(4)), segmentDirs(baseDir));\n\n        assertEquals(Utils.mkList(\"zero\"), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(\"one\"), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 6));\n        windowStore.put(6, \"six\");\n        assertEquals(Utils.mkSet(segments.segmentName(3),\n                                 segments.segmentName(4),\n                                 segments.segmentName(5)), segmentDirs(baseDir));\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n        context.setRecordContext(createRecordContext(startTime + incr * 7));\n        windowStore.put(7, \"seven\");\n        assertEquals(Utils.mkSet(segments.segmentName(3),\n                                 segments.segmentName(4),\n                                 segments.segmentName(5)), segmentDirs(baseDir));\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 8));\n        windowStore.put(8, \"eight\");\n        assertEquals(Utils.mkSet(segments.segmentName(4),\n                                 segments.segmentName(5),\n                                 segments.segmentName(6)), segmentDirs(baseDir));\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(Utils.mkSet(segments.segmentName(4),\n                                 segments.segmentName(5),\n                                 segments.segmentName(6)), segmentDirs(baseDir));\n\n\n    }\n","date":"2017-03-15 05:21:03","endLine":414,"groupId":"12153","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/52673c3de78522dab5d3cc14c5d9158f36e2e3.src","preCode":"    public void testRolling() throws IOException {\n        WindowStore<Integer, String> store = createWindowStore(context, false, true);\n\n        try {\n            \r\n            final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n            long startTime = segmentSize * 2;\n            long incr = segmentSize / 2;\n            context.setRecordContext(createRecordContext(startTime));\n            store.put(0, \"zero\");\n            assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n            context.setRecordContext(createRecordContext(startTime + incr));\n            store.put(1, \"one\");\n            assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n            context.setRecordContext(createRecordContext(startTime + incr * 2));\n            store.put(2, \"two\");\n            assertEquals(Utils.mkSet(segments.segmentName(2),\n                    segments.segmentName(3)), segmentDirs(baseDir));\n\n            context.setRecordContext(createRecordContext(startTime + incr * 4));\n            store.put(4, \"four\");\n            assertEquals(Utils.mkSet(segments.segmentName(2),\n                    segments.segmentName(3),\n                    segments.segmentName(4)), segmentDirs(baseDir));\n\n\n            context.setRecordContext(createRecordContext(startTime + incr * 5));\n            store.put(5, \"five\");\n            assertEquals(Utils.mkSet(segments.segmentName(2),\n                    segments.segmentName(3),\n                    segments.segmentName(4)), segmentDirs(baseDir));\n\n            assertEquals(Utils.mkList(\"zero\"), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n            assertEquals(Utils.mkList(\"one\"), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n            assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n            assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n            assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n            context.setRecordContext(createRecordContext(startTime + incr * 6));\n            store.put(6, \"six\");\n            assertEquals(Utils.mkSet(segments.segmentName(3),\n                    segments.segmentName(4),\n                    segments.segmentName(5)), segmentDirs(baseDir));\n\n\n            assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n            assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n            assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n            assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n            assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n            context.setRecordContext(createRecordContext(startTime + incr * 7));\n            store.put(7, \"seven\");\n            assertEquals(Utils.mkSet(segments.segmentName(3),\n                    segments.segmentName(4),\n                    segments.segmentName(5)), segmentDirs(baseDir));\n\n            assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n            assertEquals(Utils.mkList(\"two\"), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n            assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n            assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n            assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n            assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n            context.setRecordContext(createRecordContext(startTime + incr * 8));\n            store.put(8, \"eight\");\n            assertEquals(Utils.mkSet(segments.segmentName(4),\n                    segments.segmentName(5),\n                    segments.segmentName(6)), segmentDirs(baseDir));\n\n\n            assertEquals(Utils.mkList(), toList(store.fetch(0, startTime - windowSize, startTime + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n            assertEquals(Utils.mkList(), toList(store.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n            assertEquals(Utils.mkList(\"four\"), toList(store.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n            assertEquals(Utils.mkList(\"five\"), toList(store.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n            assertEquals(Utils.mkList(\"six\"), toList(store.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n            assertEquals(Utils.mkList(\"seven\"), toList(store.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n            assertEquals(Utils.mkList(\"eight\"), toList(store.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n            \r\n            store.flush();\n            assertEquals(Utils.mkSet(segments.segmentName(4),\n                    segments.segmentName(5),\n                    segments.segmentName(6)), segmentDirs(baseDir));\n\n        } finally {\n            store.close();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"},{"authorDate":"2017-03-15 05:21:03","commitOrder":15,"curCode":"    public void testRestore() throws IOException {\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        windowStore = createWindowStore(context, false, true);\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        context.setRecordContext(createRecordContext(startTime + incr));\n        windowStore.put(1, \"one\");\n        context.setRecordContext(createRecordContext(startTime + incr * 2));\n        windowStore.put(2, \"two\");\n        context.setRecordContext(createRecordContext(startTime + incr * 3));\n        windowStore.put(3, \"three\");\n        context.setRecordContext(createRecordContext(startTime + incr * 4));\n        windowStore.put(4, \"four\");\n        context.setRecordContext(createRecordContext(startTime + incr * 5));\n        windowStore.put(5, \"five\");\n        context.setRecordContext(createRecordContext(startTime + incr * 6));\n        windowStore.put(6, \"six\");\n        context.setRecordContext(createRecordContext(startTime + incr * 7));\n        windowStore.put(7, \"seven\");\n        context.setRecordContext(createRecordContext(startTime + incr * 8));\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context, false, true);\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n                Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                segmentDirs(baseDir)\n        );\n    }\n","date":"2017-03-15 05:21:03","endLine":478,"groupId":"21340","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/52673c3de78522dab5d3cc14c5d9158f36e2e3.src","preCode":"    public void testRestore() throws IOException {\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        WindowStore<Integer, String> store = createWindowStore(context, false, true);\n        try {\n            context.setRecordContext(createRecordContext(startTime));\n            store.put(0, \"zero\");\n            context.setRecordContext(createRecordContext(startTime + incr));\n            store.put(1, \"one\");\n            context.setRecordContext(createRecordContext(startTime + incr * 2));\n            store.put(2, \"two\");\n            context.setRecordContext(createRecordContext(startTime + incr * 3));\n            store.put(3, \"three\");\n            context.setRecordContext(createRecordContext(startTime + incr * 4));\n            store.put(4, \"four\");\n            context.setRecordContext(createRecordContext(startTime + incr * 5));\n            store.put(5, \"five\");\n            context.setRecordContext(createRecordContext(startTime + incr * 6));\n            store.put(6, \"six\");\n            context.setRecordContext(createRecordContext(startTime + incr * 7));\n            store.put(7, \"seven\");\n            context.setRecordContext(createRecordContext(startTime + incr * 8));\n            store.put(8, \"eight\");\n            store.flush();\n\n        } finally {\n            store.close();\n        }\n\n        \r\n        Utils.delete(baseDir);\n\n        WindowStore<Integer, String> store2 = createWindowStore(context, false, true);\n        assertEquals(Utils.mkList(), toList(store2.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n        assertEquals(Utils.mkList(), toList(store2.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n        try {\n            context.restore(windowName, changeLog);\n\n            assertEquals(Utils.mkList(), toList(store2.fetch(0, startTime - windowSize, startTime + windowSize)));\n            assertEquals(Utils.mkList(), toList(store2.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n            assertEquals(Utils.mkList(), toList(store2.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n            assertEquals(Utils.mkList(), toList(store2.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n            assertEquals(Utils.mkList(\"four\"), toList(store2.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n            assertEquals(Utils.mkList(\"five\"), toList(store2.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n            assertEquals(Utils.mkList(\"six\"), toList(store2.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n            assertEquals(Utils.mkList(\"seven\"), toList(store2.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n            assertEquals(Utils.mkList(\"eight\"), toList(store2.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n            \r\n            store2.flush();\n            assertEquals(\n                    Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                    segmentDirs(baseDir)\n            );\n        } finally {\n            store2.close();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"}],"commitId":"9e4548df30d50a56ae99cb3383f1a3f97bbe77bb","commitMessage":"@@@KAFKA-4863; Querying window store may return unwanted keys\n\nMake sure that the iterator returned from `WindowStore.fetch(..)` only returns matching keys.  rather than all keys that are a prefix match.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Eno Thereska.  Guozhang Wang\n\nCloses #2662 from dguy/kafka-4863\n","date":"2017-03-15 05:21:03","modifiedFileCount":"5","status":"M","submitter":"Damian Guy"},{"authorTime":"2017-05-19 08:02:51","codes":[{"authorDate":"2017-05-19 08:02:51","commitOrder":16,"curCode":"    public void testRolling() throws IOException {\n        windowStore = createWindowStore(context, false, true);\n\n        \r\n        final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr));\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 2));\n        windowStore.put(2, \"two\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 4));\n        windowStore.put(4, \"four\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3),\n                                 segments.segmentName(4)), segmentDirs(baseDir));\n\n\n        context.setRecordContext(createRecordContext(startTime + incr * 5));\n        windowStore.put(5, \"five\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3),\n                                 segments.segmentName(4)), segmentDirs(baseDir));\n\n        assertEquals(Utils.mkList(\"zero\"), toList(windowStore.fetch(0, startTime - WINDOW_SIZE, startTime + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"one\"), toList(windowStore.fetch(1, startTime + incr - WINDOW_SIZE, startTime + incr + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - WINDOW_SIZE, startTime + incr * 2 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - WINDOW_SIZE, startTime + incr * 3 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - WINDOW_SIZE, startTime + incr * 4 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - WINDOW_SIZE, startTime + incr * 5 + WINDOW_SIZE)));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 6));\n        windowStore.put(6, \"six\");\n        assertEquals(Utils.mkSet(segments.segmentName(3),\n                                 segments.segmentName(4),\n                                 segments.segmentName(5)), segmentDirs(baseDir));\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - WINDOW_SIZE, startTime + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - WINDOW_SIZE, startTime + incr + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - WINDOW_SIZE, startTime + incr * 2 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - WINDOW_SIZE, startTime + incr * 3 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - WINDOW_SIZE, startTime + incr * 4 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - WINDOW_SIZE, startTime + incr * 5 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - WINDOW_SIZE, startTime + incr * 6 + WINDOW_SIZE)));\n\n\n        context.setRecordContext(createRecordContext(startTime + incr * 7));\n        windowStore.put(7, \"seven\");\n        assertEquals(Utils.mkSet(segments.segmentName(3),\n                                 segments.segmentName(4),\n                                 segments.segmentName(5)), segmentDirs(baseDir));\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - WINDOW_SIZE, startTime + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - WINDOW_SIZE, startTime + incr + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - WINDOW_SIZE, startTime + incr * 2 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - WINDOW_SIZE, startTime + incr * 3 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - WINDOW_SIZE, startTime + incr * 4 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - WINDOW_SIZE, startTime + incr * 5 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - WINDOW_SIZE, startTime + incr * 6 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - WINDOW_SIZE, startTime + incr * 7 + WINDOW_SIZE)));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 8));\n        windowStore.put(8, \"eight\");\n        assertEquals(Utils.mkSet(segments.segmentName(4),\n                                 segments.segmentName(5),\n                                 segments.segmentName(6)), segmentDirs(baseDir));\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - WINDOW_SIZE, startTime + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - WINDOW_SIZE, startTime + incr + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - WINDOW_SIZE, startTime + incr * 2 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - WINDOW_SIZE, startTime + incr * 3 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - WINDOW_SIZE, startTime + incr * 4 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - WINDOW_SIZE, startTime + incr * 5 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - WINDOW_SIZE, startTime + incr * 6 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - WINDOW_SIZE, startTime + incr * 7 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + incr * 8 - WINDOW_SIZE, startTime + incr * 8 + WINDOW_SIZE)));\n\n        \r\n        windowStore.flush();\n        assertEquals(Utils.mkSet(segments.segmentName(4),\n                                 segments.segmentName(5),\n                                 segments.segmentName(6)), segmentDirs(baseDir));\n\n\n    }\n","date":"2017-05-19 08:02:51","endLine":468,"groupId":"12153","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/04/0def68513f4db2188462bddedeeeb55cddc1b4.src","preCode":"    public void testRolling() throws IOException {\n        windowStore = createWindowStore(context, false, true);\n\n        \r\n        final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr));\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 2));\n        windowStore.put(2, \"two\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 4));\n        windowStore.put(4, \"four\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3),\n                                 segments.segmentName(4)), segmentDirs(baseDir));\n\n\n        context.setRecordContext(createRecordContext(startTime + incr * 5));\n        windowStore.put(5, \"five\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3),\n                                 segments.segmentName(4)), segmentDirs(baseDir));\n\n        assertEquals(Utils.mkList(\"zero\"), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(\"one\"), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 6));\n        windowStore.put(6, \"six\");\n        assertEquals(Utils.mkSet(segments.segmentName(3),\n                                 segments.segmentName(4),\n                                 segments.segmentName(5)), segmentDirs(baseDir));\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n        context.setRecordContext(createRecordContext(startTime + incr * 7));\n        windowStore.put(7, \"seven\");\n        assertEquals(Utils.mkSet(segments.segmentName(3),\n                                 segments.segmentName(4),\n                                 segments.segmentName(5)), segmentDirs(baseDir));\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 8));\n        windowStore.put(8, \"eight\");\n        assertEquals(Utils.mkSet(segments.segmentName(4),\n                                 segments.segmentName(5),\n                                 segments.segmentName(6)), segmentDirs(baseDir));\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(Utils.mkSet(segments.segmentName(4),\n                                 segments.segmentName(5),\n                                 segments.segmentName(6)), segmentDirs(baseDir));\n\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":373,"status":"M"},{"authorDate":"2017-05-19 08:02:51","commitOrder":16,"curCode":"    public void testRestore() throws IOException {\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        windowStore = createWindowStore(context, false, true);\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        context.setRecordContext(createRecordContext(startTime + incr));\n        windowStore.put(1, \"one\");\n        context.setRecordContext(createRecordContext(startTime + incr * 2));\n        windowStore.put(2, \"two\");\n        context.setRecordContext(createRecordContext(startTime + incr * 3));\n        windowStore.put(3, \"three\");\n        context.setRecordContext(createRecordContext(startTime + incr * 4));\n        windowStore.put(4, \"four\");\n        context.setRecordContext(createRecordContext(startTime + incr * 5));\n        windowStore.put(5, \"five\");\n        context.setRecordContext(createRecordContext(startTime + incr * 6));\n        windowStore.put(6, \"six\");\n        context.setRecordContext(createRecordContext(startTime + incr * 7));\n        windowStore.put(7, \"seven\");\n        context.setRecordContext(createRecordContext(startTime + incr * 8));\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context, false, true);\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - WINDOW_SIZE, startTime + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - WINDOW_SIZE, startTime + incr + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - WINDOW_SIZE, startTime + incr * 2 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - WINDOW_SIZE, startTime + incr * 3 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(4, startTime + incr * 4 - WINDOW_SIZE, startTime + incr * 4 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(5, startTime + incr * 5 - WINDOW_SIZE, startTime + incr * 5 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(6, startTime + incr * 6 - WINDOW_SIZE, startTime + incr * 6 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(7, startTime + incr * 7 - WINDOW_SIZE, startTime + incr * 7 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(8, startTime + incr * 8 - WINDOW_SIZE, startTime + incr * 8 + WINDOW_SIZE)));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - WINDOW_SIZE, startTime + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - WINDOW_SIZE, startTime + incr + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - WINDOW_SIZE, startTime + incr * 2 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - WINDOW_SIZE, startTime + incr * 3 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - WINDOW_SIZE, startTime + incr * 4 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - WINDOW_SIZE, startTime + incr * 5 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - WINDOW_SIZE, startTime + incr * 6 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - WINDOW_SIZE, startTime + incr * 7 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + incr * 8 - WINDOW_SIZE, startTime + incr * 8 + WINDOW_SIZE)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n                Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                segmentDirs(baseDir)\n        );\n    }\n","date":"2017-05-19 08:02:51","endLine":532,"groupId":"21340","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/04/0def68513f4db2188462bddedeeeb55cddc1b4.src","preCode":"    public void testRestore() throws IOException {\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        windowStore = createWindowStore(context, false, true);\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        context.setRecordContext(createRecordContext(startTime + incr));\n        windowStore.put(1, \"one\");\n        context.setRecordContext(createRecordContext(startTime + incr * 2));\n        windowStore.put(2, \"two\");\n        context.setRecordContext(createRecordContext(startTime + incr * 3));\n        windowStore.put(3, \"three\");\n        context.setRecordContext(createRecordContext(startTime + incr * 4));\n        windowStore.put(4, \"four\");\n        context.setRecordContext(createRecordContext(startTime + incr * 5));\n        windowStore.put(5, \"five\");\n        context.setRecordContext(createRecordContext(startTime + incr * 6));\n        windowStore.put(6, \"six\");\n        context.setRecordContext(createRecordContext(startTime + incr * 7));\n        windowStore.put(7, \"seven\");\n        context.setRecordContext(createRecordContext(startTime + incr * 8));\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context, false, true);\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n                Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":473,"status":"M"}],"commitId":"e28752357705568219315375c666f8e500db9c12","commitMessage":"@@@KAFKA-5192: add WindowStore range scan (KIP-155)\n\nImplements range scan for keys in windowed and session stores\n\nModifies caching session and windowed stores to use segmented cache keys.\nCache keys are internally prefixed with their segment id to ensure key ordering in the cache matches the ordering in the underlying store for keys spread across multiple segments.\nThis should also result in fewer cache keys getting scanned for queries spanning only some segments.\n\nAuthor: Xavier L?aut? <xavier@confluent.io>\n\nReviewers: Damian Guy.  Guozhang Wang\n\nCloses #3027 from xvrl/windowstore-range-scan\n","date":"2017-05-19 08:02:51","modifiedFileCount":"40","status":"M","submitter":"Xavier L?aut?"},{"authorTime":"2018-03-02 01:27:11","codes":[{"authorDate":"2018-03-02 01:27:11","commitOrder":17,"curCode":"    public void testRolling() {\n        windowStore = createWindowStore(context);\n\n        \r\n        final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr));\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 2));\n        windowStore.put(2, \"two\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 4));\n        windowStore.put(4, \"four\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3),\n                                 segments.segmentName(4)), segmentDirs(baseDir));\n\n\n        context.setRecordContext(createRecordContext(startTime + incr * 5));\n        windowStore.put(5, \"five\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3),\n                                 segments.segmentName(4)), segmentDirs(baseDir));\n\n        assertEquals(Utils.mkList(\"zero\"), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(\"one\"), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 6));\n        windowStore.put(6, \"six\");\n        assertEquals(Utils.mkSet(segments.segmentName(3),\n                                 segments.segmentName(4),\n                                 segments.segmentName(5)), segmentDirs(baseDir));\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n        context.setRecordContext(createRecordContext(startTime + incr * 7));\n        windowStore.put(7, \"seven\");\n        assertEquals(Utils.mkSet(segments.segmentName(3),\n                                 segments.segmentName(4),\n                                 segments.segmentName(5)), segmentDirs(baseDir));\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 8));\n        windowStore.put(8, \"eight\");\n        assertEquals(Utils.mkSet(segments.segmentName(4),\n                                 segments.segmentName(5),\n                                 segments.segmentName(6)), segmentDirs(baseDir));\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(Utils.mkSet(segments.segmentName(4),\n                                 segments.segmentName(5),\n                                 segments.segmentName(6)), segmentDirs(baseDir));\n\n\n    }\n","date":"2018-03-02 01:27:11","endLine":529,"groupId":"12153","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f7/572987f39a817f9402ab1bd59a615ff0d8200e.src","preCode":"    public void testRolling() throws IOException {\n        windowStore = createWindowStore(context, false, true);\n\n        \r\n        final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr));\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 2));\n        windowStore.put(2, \"two\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 4));\n        windowStore.put(4, \"four\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3),\n                                 segments.segmentName(4)), segmentDirs(baseDir));\n\n\n        context.setRecordContext(createRecordContext(startTime + incr * 5));\n        windowStore.put(5, \"five\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3),\n                                 segments.segmentName(4)), segmentDirs(baseDir));\n\n        assertEquals(Utils.mkList(\"zero\"), toList(windowStore.fetch(0, startTime - WINDOW_SIZE, startTime + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"one\"), toList(windowStore.fetch(1, startTime + incr - WINDOW_SIZE, startTime + incr + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - WINDOW_SIZE, startTime + incr * 2 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - WINDOW_SIZE, startTime + incr * 3 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - WINDOW_SIZE, startTime + incr * 4 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - WINDOW_SIZE, startTime + incr * 5 + WINDOW_SIZE)));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 6));\n        windowStore.put(6, \"six\");\n        assertEquals(Utils.mkSet(segments.segmentName(3),\n                                 segments.segmentName(4),\n                                 segments.segmentName(5)), segmentDirs(baseDir));\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - WINDOW_SIZE, startTime + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - WINDOW_SIZE, startTime + incr + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - WINDOW_SIZE, startTime + incr * 2 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - WINDOW_SIZE, startTime + incr * 3 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - WINDOW_SIZE, startTime + incr * 4 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - WINDOW_SIZE, startTime + incr * 5 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - WINDOW_SIZE, startTime + incr * 6 + WINDOW_SIZE)));\n\n\n        context.setRecordContext(createRecordContext(startTime + incr * 7));\n        windowStore.put(7, \"seven\");\n        assertEquals(Utils.mkSet(segments.segmentName(3),\n                                 segments.segmentName(4),\n                                 segments.segmentName(5)), segmentDirs(baseDir));\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - WINDOW_SIZE, startTime + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - WINDOW_SIZE, startTime + incr + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - WINDOW_SIZE, startTime + incr * 2 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - WINDOW_SIZE, startTime + incr * 3 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - WINDOW_SIZE, startTime + incr * 4 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - WINDOW_SIZE, startTime + incr * 5 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - WINDOW_SIZE, startTime + incr * 6 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - WINDOW_SIZE, startTime + incr * 7 + WINDOW_SIZE)));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 8));\n        windowStore.put(8, \"eight\");\n        assertEquals(Utils.mkSet(segments.segmentName(4),\n                                 segments.segmentName(5),\n                                 segments.segmentName(6)), segmentDirs(baseDir));\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - WINDOW_SIZE, startTime + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - WINDOW_SIZE, startTime + incr + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - WINDOW_SIZE, startTime + incr * 2 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - WINDOW_SIZE, startTime + incr * 3 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - WINDOW_SIZE, startTime + incr * 4 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - WINDOW_SIZE, startTime + incr * 5 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - WINDOW_SIZE, startTime + incr * 6 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - WINDOW_SIZE, startTime + incr * 7 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + incr * 8 - WINDOW_SIZE, startTime + incr * 8 + WINDOW_SIZE)));\n\n        \r\n        windowStore.flush();\n        assertEquals(Utils.mkSet(segments.segmentName(4),\n                                 segments.segmentName(5),\n                                 segments.segmentName(6)), segmentDirs(baseDir));\n\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":434,"status":"M"},{"authorDate":"2018-03-02 01:27:11","commitOrder":17,"curCode":"    public void testRestore() throws IOException {\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        windowStore = createWindowStore(context);\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        context.setRecordContext(createRecordContext(startTime + incr));\n        windowStore.put(1, \"one\");\n        context.setRecordContext(createRecordContext(startTime + incr * 2));\n        windowStore.put(2, \"two\");\n        context.setRecordContext(createRecordContext(startTime + incr * 3));\n        windowStore.put(3, \"three\");\n        context.setRecordContext(createRecordContext(startTime + incr * 4));\n        windowStore.put(4, \"four\");\n        context.setRecordContext(createRecordContext(startTime + incr * 5));\n        windowStore.put(5, \"five\");\n        context.setRecordContext(createRecordContext(startTime + incr * 6));\n        windowStore.put(6, \"six\");\n        context.setRecordContext(createRecordContext(startTime + incr * 7));\n        windowStore.put(7, \"seven\");\n        context.setRecordContext(createRecordContext(startTime + incr * 8));\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context);\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n                Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                segmentDirs(baseDir)\n        );\n    }\n","date":"2018-03-02 01:27:11","endLine":591,"groupId":"21340","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f7/572987f39a817f9402ab1bd59a615ff0d8200e.src","preCode":"    public void testRestore() throws IOException {\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        windowStore = createWindowStore(context, false, true);\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        context.setRecordContext(createRecordContext(startTime + incr));\n        windowStore.put(1, \"one\");\n        context.setRecordContext(createRecordContext(startTime + incr * 2));\n        windowStore.put(2, \"two\");\n        context.setRecordContext(createRecordContext(startTime + incr * 3));\n        windowStore.put(3, \"three\");\n        context.setRecordContext(createRecordContext(startTime + incr * 4));\n        windowStore.put(4, \"four\");\n        context.setRecordContext(createRecordContext(startTime + incr * 5));\n        windowStore.put(5, \"five\");\n        context.setRecordContext(createRecordContext(startTime + incr * 6));\n        windowStore.put(6, \"six\");\n        context.setRecordContext(createRecordContext(startTime + incr * 7));\n        windowStore.put(7, \"seven\");\n        context.setRecordContext(createRecordContext(startTime + incr * 8));\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context, false, true);\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - WINDOW_SIZE, startTime + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - WINDOW_SIZE, startTime + incr + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - WINDOW_SIZE, startTime + incr * 2 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - WINDOW_SIZE, startTime + incr * 3 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(4, startTime + incr * 4 - WINDOW_SIZE, startTime + incr * 4 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(5, startTime + incr * 5 - WINDOW_SIZE, startTime + incr * 5 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(6, startTime + incr * 6 - WINDOW_SIZE, startTime + incr * 6 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(7, startTime + incr * 7 - WINDOW_SIZE, startTime + incr * 7 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(8, startTime + incr * 8 - WINDOW_SIZE, startTime + incr * 8 + WINDOW_SIZE)));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - WINDOW_SIZE, startTime + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - WINDOW_SIZE, startTime + incr + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - WINDOW_SIZE, startTime + incr * 2 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - WINDOW_SIZE, startTime + incr * 3 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - WINDOW_SIZE, startTime + incr * 4 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - WINDOW_SIZE, startTime + incr * 5 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - WINDOW_SIZE, startTime + incr * 6 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - WINDOW_SIZE, startTime + incr * 7 + WINDOW_SIZE)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + incr * 8 - WINDOW_SIZE, startTime + incr * 8 + WINDOW_SIZE)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n                Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":532,"status":"M"}],"commitId":"eb449fe7c55a0816328a851fc1102dfeac6d8616","commitMessage":"@@@KAFKA-6560: Replace range query with newly added single point query in Windowed Aggregation (#4578)\n\n* Add a new fetch(K key.  long window-start-timestamp) API into ReadOnlyWindowStore.\n* Use the new API to replace the range fetch API in KStreamWindowedAggregate and KStreamWindowedReduce.\n* Added corresponding unit tests.\n* Also removed some redundant byte serdes in byte stores.","date":"2018-03-02 01:27:11","modifiedFileCount":"15","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-04-18 04:13:15","codes":[{"authorDate":"2018-04-18 04:13:15","commitOrder":18,"curCode":"    public void testRolling() {\n        windowStore = createWindowStore(context);\n\n        \r\n        final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n        final long startTime = segmentSize * 2;\n        final long increment = segmentSize / 2;\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + increment));\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + increment * 2));\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        context.setRecordContext(createRecordContext(startTime + increment * 4));\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        context.setRecordContext(createRecordContext(startTime + increment * 5));\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(\"zero\"), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(\"one\"), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n\n        context.setRecordContext(createRecordContext(startTime + increment * 6));\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n\n\n        context.setRecordContext(createRecordContext(startTime + increment * 7));\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n\n        context.setRecordContext(createRecordContext(startTime + increment * 8));\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n    }\n","date":"2018-04-18 04:13:15","endLine":567,"groupId":"13115","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/4169e529f8953d5da9fef8316aed77bfa85f48.src","preCode":"    public void testRolling() {\n        windowStore = createWindowStore(context);\n\n        \r\n        final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr));\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 2));\n        windowStore.put(2, \"two\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 4));\n        windowStore.put(4, \"four\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3),\n                                 segments.segmentName(4)), segmentDirs(baseDir));\n\n\n        context.setRecordContext(createRecordContext(startTime + incr * 5));\n        windowStore.put(5, \"five\");\n        assertEquals(Utils.mkSet(segments.segmentName(2),\n                                 segments.segmentName(3),\n                                 segments.segmentName(4)), segmentDirs(baseDir));\n\n        assertEquals(Utils.mkList(\"zero\"), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(\"one\"), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 6));\n        windowStore.put(6, \"six\");\n        assertEquals(Utils.mkSet(segments.segmentName(3),\n                                 segments.segmentName(4),\n                                 segments.segmentName(5)), segmentDirs(baseDir));\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n\n\n        context.setRecordContext(createRecordContext(startTime + incr * 7));\n        windowStore.put(7, \"seven\");\n        assertEquals(Utils.mkSet(segments.segmentName(3),\n                                 segments.segmentName(4),\n                                 segments.segmentName(5)), segmentDirs(baseDir));\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n\n        context.setRecordContext(createRecordContext(startTime + incr * 8));\n        windowStore.put(8, \"eight\");\n        assertEquals(Utils.mkSet(segments.segmentName(4),\n                                 segments.segmentName(5),\n                                 segments.segmentName(6)), segmentDirs(baseDir));\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(Utils.mkSet(segments.segmentName(4),\n                                 segments.segmentName(5),\n                                 segments.segmentName(6)), segmentDirs(baseDir));\n\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":437,"status":"M"},{"authorDate":"2018-04-18 04:13:15","commitOrder":18,"curCode":"    public void testRestore() throws IOException {\n        final long startTime = segmentSize * 2;\n        final long increment = segmentSize / 2;\n\n        windowStore = createWindowStore(context);\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        context.setRecordContext(createRecordContext(startTime + increment));\n        windowStore.put(1, \"one\");\n        context.setRecordContext(createRecordContext(startTime + increment * 2));\n        windowStore.put(2, \"two\");\n        context.setRecordContext(createRecordContext(startTime + increment * 3));\n        windowStore.put(3, \"three\");\n        context.setRecordContext(createRecordContext(startTime + increment * 4));\n        windowStore.put(4, \"four\");\n        context.setRecordContext(createRecordContext(startTime + increment * 5));\n        windowStore.put(5, \"five\");\n        context.setRecordContext(createRecordContext(startTime + increment * 6));\n        windowStore.put(6, \"six\");\n        context.setRecordContext(createRecordContext(startTime + increment * 7));\n        windowStore.put(7, \"seven\");\n        context.setRecordContext(createRecordContext(startTime + increment * 8));\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context);\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","date":"2018-04-18 04:13:15","endLine":629,"groupId":"13113","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/4169e529f8953d5da9fef8316aed77bfa85f48.src","preCode":"    public void testRestore() throws IOException {\n        long startTime = segmentSize * 2;\n        long incr = segmentSize / 2;\n\n        windowStore = createWindowStore(context);\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        context.setRecordContext(createRecordContext(startTime + incr));\n        windowStore.put(1, \"one\");\n        context.setRecordContext(createRecordContext(startTime + incr * 2));\n        windowStore.put(2, \"two\");\n        context.setRecordContext(createRecordContext(startTime + incr * 3));\n        windowStore.put(3, \"three\");\n        context.setRecordContext(createRecordContext(startTime + incr * 4));\n        windowStore.put(4, \"four\");\n        context.setRecordContext(createRecordContext(startTime + incr * 5));\n        windowStore.put(5, \"five\");\n        context.setRecordContext(createRecordContext(startTime + incr * 6));\n        windowStore.put(6, \"six\");\n        context.setRecordContext(createRecordContext(startTime + incr * 7));\n        windowStore.put(7, \"seven\");\n        context.setRecordContext(createRecordContext(startTime + incr * 8));\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context);\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + incr - windowSize, startTime + incr + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + incr * 2 - windowSize, startTime + incr * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + incr * 3 - windowSize, startTime + incr * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + incr * 4 - windowSize, startTime + incr * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + incr * 5 - windowSize, startTime + incr * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + incr * 6 - windowSize, startTime + incr * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + incr * 7 - windowSize, startTime + incr * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + incr * 8 - windowSize, startTime + incr * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n                Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n                segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"M"}],"commitId":"ac9c3ed0b43ee848e6e555a01c55ea2eee78540a","commitMessage":"@@@KAFKA-6376: preliminary cleanup (#4872)\n\nGeneral cleanup of Streams code.  mostly resolving compiler warnings and re-formatting.\n\nThe regular testing suite should be sufficient.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-04-18 04:13:15","modifiedFileCount":"57","status":"M","submitter":"John Roesler"},{"authorTime":"2018-06-21 09:40:48","codes":[{"authorDate":"2018-06-21 09:40:48","commitOrder":19,"curCode":"    public void testRolling() {\n        windowStore = createWindowStore(context, false);\n\n        \r\n        final long startTime = segmentSize * 2;\n        final long increment = segmentSize / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(\"zero\"), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(\"one\"), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n    }\n","date":"2018-06-21 09:40:48","endLine":572,"groupId":"13100","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2a/84a7b12e98ba58f18fac2947a2e47211511147.src","preCode":"    public void testRolling() {\n        windowStore = createWindowStore(context);\n\n        \r\n        final Segments segments = new Segments(windowName, retentionPeriod, numSegments);\n        final long startTime = segmentSize * 2;\n        final long increment = segmentSize / 2;\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + increment));\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        context.setRecordContext(createRecordContext(startTime + increment * 2));\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        context.setRecordContext(createRecordContext(startTime + increment * 4));\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        context.setRecordContext(createRecordContext(startTime + increment * 5));\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(\"zero\"), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(\"one\"), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n\n        context.setRecordContext(createRecordContext(startTime + increment * 6));\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n\n\n        context.setRecordContext(createRecordContext(startTime + increment * 7));\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n\n        context.setRecordContext(createRecordContext(startTime + increment * 8));\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"M"},{"authorDate":"2018-06-21 09:40:48","commitOrder":19,"curCode":"    public void testRestore() throws IOException {\n        final long startTime = segmentSize * 2;\n        final long increment = segmentSize / 2;\n\n        windowStore = createWindowStore(context, false);\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context, false);\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","date":"2018-06-21 09:40:48","endLine":634,"groupId":"13113","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2a/84a7b12e98ba58f18fac2947a2e47211511147.src","preCode":"    public void testRestore() throws IOException {\n        final long startTime = segmentSize * 2;\n        final long increment = segmentSize / 2;\n\n        windowStore = createWindowStore(context);\n        context.setRecordContext(createRecordContext(startTime));\n        windowStore.put(0, \"zero\");\n        context.setRecordContext(createRecordContext(startTime + increment));\n        windowStore.put(1, \"one\");\n        context.setRecordContext(createRecordContext(startTime + increment * 2));\n        windowStore.put(2, \"two\");\n        context.setRecordContext(createRecordContext(startTime + increment * 3));\n        windowStore.put(3, \"three\");\n        context.setRecordContext(createRecordContext(startTime + increment * 4));\n        windowStore.put(4, \"four\");\n        context.setRecordContext(createRecordContext(startTime + increment * 5));\n        windowStore.put(5, \"five\");\n        context.setRecordContext(createRecordContext(startTime + increment * 6));\n        windowStore.put(6, \"six\");\n        context.setRecordContext(createRecordContext(startTime + increment * 7));\n        windowStore.put(7, \"seven\");\n        context.setRecordContext(createRecordContext(startTime + increment * 8));\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context);\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"M"}],"commitId":"6732593bbad3d1e07f1ec7c2d00a2e1eabf382f2","commitMessage":"@@@KAFKA-7072: clean up segments only after they expire (#5253)\n\nSignificant refactor of Segments to use stream-time as the basis of segment expiration.\nPreviously Segments assumed that the current record time was representative of stream time.\n\nIn the event of a \"future\" event (one whose record time is greater than the stream time).  this\nwould inappropriately drop live segments. Now.  Segments will provision the new segment\nto house the future event and drop old segments only after they expire.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-06-21 09:40:48","modifiedFileCount":"19","status":"M","submitter":"John Roesler"},{"authorTime":"2018-07-03 07:07:38","codes":[{"authorDate":"2018-07-03 07:07:38","commitOrder":20,"curCode":"    public void testRolling() {\n        windowStore = createWindowStore(context, false);\n\n        \r\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(\"zero\"), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(\"one\"), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n    }\n","date":"2018-07-03 07:07:38","endLine":567,"groupId":"13100","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ac/481a747ba021fbbbc30ed2ab43a05ef0445e8c.src","preCode":"    public void testRolling() {\n        windowStore = createWindowStore(context, false);\n\n        \r\n        final long startTime = segmentSize * 2;\n        final long increment = segmentSize / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(\"zero\"), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(\"one\"), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":438,"status":"M"},{"authorDate":"2018-07-03 07:07:38","commitOrder":20,"curCode":"    public void testRestore() throws IOException {\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n\n        windowStore = createWindowStore(context, false);\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context, false);\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","date":"2018-07-03 07:07:38","endLine":629,"groupId":"13113","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ac/481a747ba021fbbbc30ed2ab43a05ef0445e8c.src","preCode":"    public void testRestore() throws IOException {\n        final long startTime = segmentSize * 2;\n        final long increment = segmentSize / 2;\n\n        windowStore = createWindowStore(context, false);\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context, false);\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":570,"status":"M"}],"commitId":"64fff8bfcc9b92769640bfaa692e19d0db8861a6","commitMessage":"@@@KAFKA-7080: replace numSegments with segmentInterval (#5257)\n\nSee also KIP-319.\n\nReplace number-of-segments parameters with segment-interval-ms parameters in various places. The latter was always the parameter that several components needed.  and we accidentally supplied the former because it was the one available.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-07-03 07:07:38","modifiedFileCount":"20","status":"M","submitter":"John Roesler"},{"authorTime":"2018-10-05 04:51:39","codes":[{"authorDate":"2018-10-05 04:51:39","commitOrder":21,"curCode":"    public void testRolling() {\n        windowStore = createWindowStore(context, false);\n\n        \r\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(\"zero\"), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(Utils.mkList(\"one\"), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, ofEpochMilli(startTime + increment * 8 - windowSize), ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n    }\n","date":"2018-10-05 04:51:39","endLine":573,"groupId":"524","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/08/f019feffac307b56eb2d1177a9cd4e7c80dcb9.src","preCode":"    public void testRolling() {\n        windowStore = createWindowStore(context, false);\n\n        \r\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(\"zero\"), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(\"one\"), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":444,"status":"M"},{"authorDate":"2018-10-05 04:51:39","commitOrder":21,"curCode":"    public void testRestore() throws IOException {\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n\n        windowStore = createWindowStore(context, false);\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context, false);\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(8, ofEpochMilli(startTime + increment * 8 - windowSize), ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, ofEpochMilli(startTime + increment * 8 - windowSize), ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","date":"2018-10-05 04:51:39","endLine":635,"groupId":"521","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/08/f019feffac307b56eb2d1177a9cd4e7c80dcb9.src","preCode":"    public void testRestore() throws IOException {\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n\n        windowStore = createWindowStore(context, false);\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context, false);\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, startTime - windowSize, startTime + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, startTime + increment - windowSize, startTime + increment + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, startTime + increment * 2 - windowSize, startTime + increment * 2 + windowSize)));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, startTime + increment * 3 - windowSize, startTime + increment * 3 + windowSize)));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, startTime + increment * 4 - windowSize, startTime + increment * 4 + windowSize)));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, startTime + increment * 5 - windowSize, startTime + increment * 5 + windowSize)));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, startTime + increment * 6 - windowSize, startTime + increment * 6 + windowSize)));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, startTime + increment * 7 - windowSize, startTime + increment * 7 + windowSize)));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, startTime + increment * 8 - windowSize, startTime + increment * 8 + windowSize)));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"M"}],"commitId":"ca641b3e2e48c14ff308181c775775408f5f35f7","commitMessage":"@@@KAFKA-7277: Migrate Streams API to Duration instead of longMs times (#5682)\n\nReviewers: Johne Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-10-05 04:51:39","modifiedFileCount":"97","status":"M","submitter":"Nikolay"},{"authorTime":"2018-11-13 14:18:59","codes":[{"authorDate":"2018-11-13 14:18:59","commitOrder":22,"curCode":"    public void testRolling() {\n        windowStore = createWindowStore(context, false);\n\n        \r\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(asList(\"zero\"), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(asList(\"one\"), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(asList(\"two\"), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(asList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(asList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(asList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(asList(\"two\"), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(asList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(asList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(asList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(asList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(asList(\"two\"), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(asList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(asList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(asList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(asList(\"seven\"), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(asList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(asList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(asList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(asList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(asList(\"seven\"), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(asList(\"eight\"), toList(windowStore.fetch(8, ofEpochMilli(startTime + increment * 8 - windowSize), ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n    }\n","date":"2018-11-13 14:18:59","endLine":574,"groupId":"22455","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/09/c5e5b78e5a60d433644240024a46b9429d6b3f.src","preCode":"    public void testRolling() {\n        windowStore = createWindowStore(context, false);\n\n        \r\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(\"zero\"), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(Utils.mkList(\"one\"), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(Utils.mkList(\"two\"), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, ofEpochMilli(startTime + increment * 8 - windowSize), ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"M"},{"authorDate":"2018-11-13 14:18:59","commitOrder":22,"curCode":"    public void testRestore() throws IOException {\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n\n        windowStore = createWindowStore(context, false);\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context, false);\n        assertEquals(asList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(8, ofEpochMilli(startTime + increment * 8 - windowSize), ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(asList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(asList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(asList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(asList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(asList(\"seven\"), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(asList(\"eight\"), toList(windowStore.fetch(8, ofEpochMilli(startTime + increment * 8 - windowSize), ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","date":"2018-11-13 14:18:59","endLine":636,"groupId":"22455","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/09/c5e5b78e5a60d433644240024a46b9429d6b3f.src","preCode":"    public void testRestore() throws IOException {\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n\n        windowStore = createWindowStore(context, false);\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context, false);\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(8, ofEpochMilli(startTime + increment * 8 - windowSize), ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(Utils.mkList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(Utils.mkList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(Utils.mkList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(Utils.mkList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(Utils.mkList(\"seven\"), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(Utils.mkList(\"eight\"), toList(windowStore.fetch(8, ofEpochMilli(startTime + increment * 8 - windowSize), ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":577,"status":"M"}],"commitId":"12f310d50e7f5b1c18c4f61a119a6cd830da3bc0","commitMessage":"@@@KAFKA-7612: Fix javac warnings and enable warnings as errors (#5900)\n\n- Use Xlint:all with 3 exclusions (filed KAFKA-7613 to remove the exclusions)\n- Use the same javac options when compiling tests (seems accidental that\nwe didn't do this before)\n- Replaced several deprecated method calls with non-deprecated ones:\n  - `KafkaConsumer.poll(long)` and `KafkaConsumer.close(long)`\n  - `Class.newInstance` and `new Integer/Long` (deprecated since Java 9)\n  - `scala.Console` (deprecated in Scala 2.11)\n  - `PartitionData` taking a timestamp (one of them seemingly a bug)\n  - `JsonMappingException` single parameter constructor\n- Fix unnecessary usage of raw types in several places.\n- Add @SuppressWarnings for deprecations.  unchecked and switch fallthrough in\nseveral places.\n- Scala clean-ups (var -> val.  ETA expansion warnings.  avoid reflective calls)\n- Use lambdas to simplify code in a few places\n- Add @SafeVarargs.  fix varargs usage and remove unnecessary `Utils.mkList` method\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Manikumar Reddy <manikumar.reddy@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Stanislav Kozlovski <stanislav_kozlovski@outlook.com>","date":"2018-11-13 14:18:59","modifiedFileCount":"146","status":"M","submitter":"Ismael Juma"},{"authorTime":"2019-01-15 05:36:36","codes":[{"authorDate":"2019-01-15 05:36:36","commitOrder":23,"curCode":"    public void testRolling() {\n        windowStore = createWindowStore(context, false);\n\n        \r\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            Collections.singletonList(\"zero\"),\n            toList(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - windowSize),\n                ofEpochMilli(startTime + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"one\"),\n            toList(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - windowSize),\n                ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"two\"),\n            toList(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - windowSize),\n                ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - windowSize),\n                ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"four\"),\n            toList(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - windowSize),\n                ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"five\"),\n            toList(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - windowSize),\n                ofEpochMilli(startTime + increment * 5 + windowSize))));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - windowSize),\n                ofEpochMilli(startTime + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - windowSize),\n                ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"two\"),\n            toList(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - windowSize),\n                ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - windowSize),\n                ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(Collections.singletonList(\"four\"),\n            toList(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - windowSize),\n                ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"five\"),\n            toList(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - windowSize),\n                ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"six\"),\n            toList(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - windowSize),\n                ofEpochMilli(startTime + increment * 6 + windowSize))));\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - windowSize),\n                ofEpochMilli(startTime + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - windowSize),\n                ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"two\"),\n            toList(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - windowSize),\n                ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - windowSize),\n                ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"four\"),\n            toList(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - windowSize),\n                ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"five\"),\n            toList(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - windowSize),\n                ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"six\"),\n            toList(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - windowSize),\n                ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"seven\"),\n            toList(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - windowSize),\n                ofEpochMilli(startTime + increment * 7 + windowSize))));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - windowSize),\n                ofEpochMilli(startTime + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - windowSize),\n                ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - windowSize),\n                ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - windowSize),\n                ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"four\"),\n            toList(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - windowSize),\n                ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"five\"),\n            toList(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - windowSize),\n                ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"six\"),\n            toList(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - windowSize),\n                ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"seven\"),\n            toList(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - windowSize),\n                ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"eight\"),\n            toList(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - windowSize),\n                ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n    }\n","date":"2019-01-15 05:36:36","endLine":1009,"groupId":"17158","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/55a83420b1683f47e61c041c079b0d3a01692b.src","preCode":"    public void testRolling() {\n        windowStore = createWindowStore(context, false);\n\n        \r\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(asList(\"zero\"), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(asList(\"one\"), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(asList(\"two\"), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(asList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(asList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(asList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(asList(\"two\"), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(asList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(asList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(asList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(asList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(asList(\"two\"), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(asList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(asList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(asList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(asList(\"seven\"), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n        assertEquals(asList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(asList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(asList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(asList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(asList(\"seven\"), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(asList(\"eight\"), toList(windowStore.fetch(8, ofEpochMilli(startTime + increment * 8 - windowSize), ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":735,"status":"M"},{"authorDate":"2019-01-15 05:36:36","commitOrder":23,"curCode":"    public void testRestore() throws Exception {\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n\n        windowStore = createWindowStore(context, false);\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context, false);\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - windowSize),\n                ofEpochMilli(startTime + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - windowSize),\n                ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - windowSize),\n                ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - windowSize),\n                ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - windowSize),\n                ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - windowSize),\n                ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - windowSize),\n                ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - windowSize),\n                ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - windowSize),\n                ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - windowSize),\n                ofEpochMilli(startTime + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - windowSize),\n                ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - windowSize),\n                ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - windowSize),\n                ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"four\"),\n            toList(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - windowSize),\n                ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"five\"),\n            toList(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - windowSize),\n                ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"six\"),\n            toList(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - windowSize),\n                ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"seven\"),\n            toList(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - windowSize),\n                ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"eight\"),\n            toList(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - windowSize),\n                ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4L),\n                segments.segmentName(5L),\n                segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","date":"2019-01-15 05:36:36","endLine":1164,"groupId":"17159","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/55a83420b1683f47e61c041c079b0d3a01692b.src","preCode":"    public void testRestore() throws IOException {\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n\n        windowStore = createWindowStore(context, false);\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context, false);\n        assertEquals(asList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(8, ofEpochMilli(startTime + increment * 8 - windowSize), ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(asList(), toList(windowStore.fetch(0, ofEpochMilli(startTime - windowSize), ofEpochMilli(startTime + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(1, ofEpochMilli(startTime + increment - windowSize), ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(2, ofEpochMilli(startTime + increment * 2 - windowSize), ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(asList(), toList(windowStore.fetch(3, ofEpochMilli(startTime + increment * 3 - windowSize), ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(asList(\"four\"), toList(windowStore.fetch(4, ofEpochMilli(startTime + increment * 4 - windowSize), ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(asList(\"five\"), toList(windowStore.fetch(5, ofEpochMilli(startTime + increment * 5 - windowSize), ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(asList(\"six\"), toList(windowStore.fetch(6, ofEpochMilli(startTime + increment * 6 - windowSize), ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(asList(\"seven\"), toList(windowStore.fetch(7, ofEpochMilli(startTime + increment * 7 - windowSize), ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(asList(\"eight\"), toList(windowStore.fetch(8, ofEpochMilli(startTime + increment * 8 - windowSize), ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(segments.segmentName(4L), segments.segmentName(5L), segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1012,"status":"M"}],"commitId":"82d1db635826246570287cfb4c0b3572e3b011b4","commitMessage":"@@@MINOR: code cleanup (#6054)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Ryanne Dolan <ryannedolan@gmail.com>.  Ismael Juma <ismael@confuent.io>","date":"2019-01-15 05:36:36","modifiedFileCount":"22","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-05-12 02:20:15","codes":[{"authorDate":"2019-05-12 02:20:15","commitOrder":24,"curCode":"    public void testRolling() {\n\n        \r\n        final long startTime = SEGMENT_INTERVAL * 2;\n        final long increment = SEGMENT_INTERVAL / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"zero\")),\n            toSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"one\")),\n            toSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            toSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            toSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            toSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            toSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            toSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            toSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            toSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            toSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            toSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            toSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            toSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            toSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            toSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            toSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            toSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            toSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"eight\")),\n            toSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n    }\n","date":"2019-05-12 02:20:14","endLine":377,"groupId":"12238","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/da/f309a6c0a0e47f75f5d6a2e021e52bd7a1e1ce.src","preCode":"    public void testRolling() {\n        windowStore = createWindowStore(context, false);\n\n        \r\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            Collections.singletonList(\"zero\"),\n            toList(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - windowSize),\n                ofEpochMilli(startTime + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"one\"),\n            toList(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - windowSize),\n                ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"two\"),\n            toList(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - windowSize),\n                ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - windowSize),\n                ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"four\"),\n            toList(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - windowSize),\n                ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"five\"),\n            toList(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - windowSize),\n                ofEpochMilli(startTime + increment * 5 + windowSize))));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - windowSize),\n                ofEpochMilli(startTime + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - windowSize),\n                ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"two\"),\n            toList(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - windowSize),\n                ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - windowSize),\n                ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(Collections.singletonList(\"four\"),\n            toList(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - windowSize),\n                ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"five\"),\n            toList(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - windowSize),\n                ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"six\"),\n            toList(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - windowSize),\n                ofEpochMilli(startTime + increment * 6 + windowSize))));\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - windowSize),\n                ofEpochMilli(startTime + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - windowSize),\n                ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"two\"),\n            toList(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - windowSize),\n                ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - windowSize),\n                ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"four\"),\n            toList(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - windowSize),\n                ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"five\"),\n            toList(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - windowSize),\n                ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"six\"),\n            toList(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - windowSize),\n                ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"seven\"),\n            toList(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - windowSize),\n                ofEpochMilli(startTime + increment * 7 + windowSize))));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - windowSize),\n                ofEpochMilli(startTime + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - windowSize),\n                ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - windowSize),\n                ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - windowSize),\n                ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"four\"),\n            toList(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - windowSize),\n                ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"five\"),\n            toList(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - windowSize),\n                ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"six\"),\n            toList(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - windowSize),\n                ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"seven\"),\n            toList(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - windowSize),\n                ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"eight\"),\n            toList(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - windowSize),\n                ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2019-05-12 02:20:15","commitOrder":24,"curCode":"    public void testRestore() throws Exception {\n        final long startTime = SEGMENT_INTERVAL * 2;\n        final long increment = SEGMENT_INTERVAL / 2;\n\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = buildWindowStore(RETENTION_PERIOD,\n                                       WINDOW_SIZE,\n                                       false,\n                                       Serdes.Integer(),\n                                       Serdes.String());\n        windowStore.init(context, windowStore);\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        context.restore(STORE_NAME, changeLog);\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            toSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            toSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            toSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            toSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"eight\")),\n            toSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4L),\n                segments.segmentName(5L),\n                segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","date":"2019-05-12 02:20:14","endLine":663,"groupId":"16094","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/da/f309a6c0a0e47f75f5d6a2e021e52bd7a1e1ce.src","preCode":"    public void testRestore() throws Exception {\n        final long startTime = segmentInterval * 2;\n        final long increment = segmentInterval / 2;\n\n        windowStore = createWindowStore(context, false);\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = createWindowStore(context, false);\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - windowSize),\n                ofEpochMilli(startTime + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - windowSize),\n                ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - windowSize),\n                ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - windowSize),\n                ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - windowSize),\n                ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - windowSize),\n                ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - windowSize),\n                ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - windowSize),\n                ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - windowSize),\n                ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        context.restore(windowName, changeLog);\n\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - windowSize),\n                ofEpochMilli(startTime + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - windowSize),\n                ofEpochMilli(startTime + increment + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - windowSize),\n                ofEpochMilli(startTime + increment * 2 + windowSize))));\n        assertEquals(\n            Collections.emptyList(),\n            toList(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - windowSize),\n                ofEpochMilli(startTime + increment * 3 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"four\"),\n            toList(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - windowSize),\n                ofEpochMilli(startTime + increment * 4 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"five\"),\n            toList(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - windowSize),\n                ofEpochMilli(startTime + increment * 5 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"six\"),\n            toList(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - windowSize),\n                ofEpochMilli(startTime + increment * 6 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"seven\"),\n            toList(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - windowSize),\n                ofEpochMilli(startTime + increment * 7 + windowSize))));\n        assertEquals(\n            Collections.singletonList(\"eight\"),\n            toList(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - windowSize),\n                ofEpochMilli(startTime + increment * 8 + windowSize))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4L),\n                segments.segmentName(5L),\n                segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":506,"status":"M"}],"commitId":"5236a3e5ec35b02ad3b40e904997b91b82e9f36d","commitMessage":"@@@[MINOR] Consolidate in-memory/rocksdb unit tests for window & session store (#6677)\n\nConsolidated the unit tests by having {RocksDB/InMemory}{Window/Session}StoreTest extend {Window/Session}BytesStoreTest. Besides some implementation-specific tests (eg involving segment maintenance) all tests were moved to the abstract XXXBytesStoreTest class. The test coverage now is a superset of the original test coverage for each store type.\n\nThe only difference made to existing tests (besides moving them) was to switch from list-based equality comparison to set based.  in order to reflect that the stores make no guarantees regarding the ordering of records returned from a range fetch.\n\nThere are some implementation-specific tests that were left in the corresponding test class. The RocksDBWindowStoreTest.  for example.  had several tests pertaining to segments and/or the underlying filesystem. Another key difference is that the in-memory versions should delete expired records aggressively.  while the RocksDB versions should only remove entirely expired segments.\n\n\nReviewers: John Roesler <john@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-12 02:20:14","modifiedFileCount":"4","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2019-12-17 08:37:40","codes":[{"authorDate":"2019-12-17 08:37:40","commitOrder":25,"curCode":"    public void testRolling() {\n\n        \r\n        final long startTime = SEGMENT_INTERVAL * 2;\n        final long increment = SEGMENT_INTERVAL / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"zero\")),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"one\")),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"eight\")),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n    }\n","date":"2019-12-17 08:37:40","endLine":384,"groupId":"12238","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/23/b3adc9e674ee6eba5e7c02f5c58b7be0f68649.src","preCode":"    public void testRolling() {\n\n        \r\n        final long startTime = SEGMENT_INTERVAL * 2;\n        final long increment = SEGMENT_INTERVAL / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"zero\")),\n            toSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"one\")),\n            toSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            toSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            toSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            toSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            toSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            toSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            toSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            toSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            toSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            toSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            toSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            toSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            toSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            toSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            toSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            toSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            toSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"eight\")),\n            toSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2019-12-17 08:37:40","commitOrder":25,"curCode":"    public void testRestore() throws Exception {\n        final long startTime = SEGMENT_INTERVAL * 2;\n        final long increment = SEGMENT_INTERVAL / 2;\n\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = buildWindowStore(RETENTION_PERIOD,\n                                       WINDOW_SIZE,\n                                       false,\n                                       Serdes.Integer(),\n                                       Serdes.String());\n        windowStore.init(context, windowStore);\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        for (final ProducerRecord<Object, Object> record : recordCollector.collected()) {\n            changeLog.add(new KeyValue<>(((Bytes) record.key()).get(), (byte[]) record.value()));\n        }\n\n        context.restore(STORE_NAME, changeLog);\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"eight\")),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4L),\n                segments.segmentName(5L),\n                segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","date":"2019-12-17 08:37:40","endLine":677,"groupId":"21923","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/23/b3adc9e674ee6eba5e7c02f5c58b7be0f68649.src","preCode":"    public void testRestore() throws Exception {\n        final long startTime = SEGMENT_INTERVAL * 2;\n        final long increment = SEGMENT_INTERVAL / 2;\n\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = buildWindowStore(RETENTION_PERIOD,\n                                       WINDOW_SIZE,\n                                       false,\n                                       Serdes.Integer(),\n                                       Serdes.String());\n        windowStore.init(context, windowStore);\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        context.restore(STORE_NAME, changeLog);\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            toSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            toSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            toSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            toSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            toSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"eight\")),\n            toSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4L),\n                segments.segmentName(5L),\n                segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":515,"status":"M"}],"commitId":"a87decb9e4df5bfa092c26ae4346f65c426f1321","commitMessage":"@@@KAFKA-9113: Extract clients from tasks to record collectors (#7833)\n\nThis is part1 of a series of PRs for task management cleanup:\n\n1. Primarily cleanup MockRecordCollectors: remove unnecessary anonymous inheritance but just consolidate on the NoOpRecordCollector -> renamed to MockRecordCollector. Most relevant changes are unit tests that would be relying on this MockRecordCollector.\n\n2. Let StandbyContextImpl#recordCollector() to return null instead of returning a no-op collector.  since in standby tasks we should ALWAYS bypass the logging logic and only use the inner store for restoreBatch. Returning null helps us to realize this assertion failed as NPE as early as possible whereas a no-op collector just hides the bug.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2019-12-17 08:37:40","modifiedFileCount":"25","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-10-03 07:49:12","codes":[{"authorDate":"2019-12-17 08:37:40","commitOrder":26,"curCode":"    public void testRolling() {\n\n        \r\n        final long startTime = SEGMENT_INTERVAL * 2;\n        final long increment = SEGMENT_INTERVAL / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"zero\")),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"one\")),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"eight\")),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n    }\n","date":"2019-12-17 08:37:40","endLine":384,"groupId":"12238","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/23/b3adc9e674ee6eba5e7c02f5c58b7be0f68649.src","preCode":"    public void testRolling() {\n\n        \r\n        final long startTime = SEGMENT_INTERVAL * 2;\n        final long increment = SEGMENT_INTERVAL / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"zero\")),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"one\")),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"eight\")),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"N"},{"authorDate":"2020-10-03 07:49:12","commitOrder":26,"curCode":"    public void testRestore() throws Exception {\n        final long startTime = SEGMENT_INTERVAL * 2;\n        final long increment = SEGMENT_INTERVAL / 2;\n\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = buildWindowStore(RETENTION_PERIOD,\n                                       WINDOW_SIZE,\n                                       false,\n                                       Serdes.Integer(),\n                                       Serdes.String());\n        windowStore.init((StateStoreContext) context, windowStore);\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        for (final ProducerRecord<Object, Object> record : recordCollector.collected()) {\n            changeLog.add(new KeyValue<>(((Bytes) record.key()).get(), (byte[]) record.value()));\n        }\n\n        context.restore(STORE_NAME, changeLog);\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"eight\")),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4L),\n                segments.segmentName(5L),\n                segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","date":"2020-10-03 07:49:12","endLine":678,"groupId":"21923","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9e/9b0b4c312c6a72621d210e35204fc59a1e129a.src","preCode":"    public void testRestore() throws Exception {\n        final long startTime = SEGMENT_INTERVAL * 2;\n        final long increment = SEGMENT_INTERVAL / 2;\n\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = buildWindowStore(RETENTION_PERIOD,\n                                       WINDOW_SIZE,\n                                       false,\n                                       Serdes.Integer(),\n                                       Serdes.String());\n        windowStore.init(context, windowStore);\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        for (final ProducerRecord<Object, Object> record : recordCollector.collected()) {\n            changeLog.add(new KeyValue<>(((Bytes) record.key()).get(), (byte[]) record.value()));\n        }\n\n        context.restore(STORE_NAME, changeLog);\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"eight\")),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4L),\n                segments.segmentName(5L),\n                segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":516,"status":"M"}],"commitId":"69790a1463bafc1f63e3c288a6636b3f4586c1b4","commitMessage":"@@@KAFKA-10535: Split ProcessorContext into Processor/StateStore/Record Contexts (#9361)\n\nMigrate different components of the old ProcessorContext interface\ninto separate interfaces that are more appropriate for their usages.\nSee KIP-478 for the details.\n\nReviewers: Guozhang Wang <guozhang@apache.org>.  Paul Whalen <pgwhalen@gmail.com>","date":"2020-10-03 07:49:12","modifiedFileCount":"71","status":"M","submitter":"John Roesler"},{"authorTime":"2021-04-10 02:49:37","codes":[{"authorDate":"2021-04-10 02:49:37","commitOrder":27,"curCode":"    public void testRolling() {\n\n        \r\n        final long startTime = SEGMENT_INTERVAL * 2;\n        final long increment = SEGMENT_INTERVAL / 2;\n        windowStore.put(0, \"zero\", startTime);\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        windowStore.put(1, \"one\", startTime + increment);\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        windowStore.put(2, \"two\", startTime + increment * 2);\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        windowStore.put(4, \"four\", startTime + increment * 4);\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        windowStore.put(5, \"five\", startTime + increment * 5);\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"zero\")),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"one\")),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n\n        windowStore.put(6, \"six\", startTime + increment * 6);\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n\n        windowStore.put(7, \"seven\", startTime + increment * 7);\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n\n        windowStore.put(8, \"eight\", startTime + increment * 8);\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"eight\")),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n    }\n","date":"2021-04-10 02:49:37","endLine":371,"groupId":"101355","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"testRolling","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ce/85893970c109c856decb1b1ca6fc00bd4a1668.src","preCode":"    public void testRolling() {\n\n        \r\n        final long startTime = SEGMENT_INTERVAL * 2;\n        final long increment = SEGMENT_INTERVAL / 2;\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        assertEquals(Utils.mkSet(segments.segmentName(2)), segmentDirs(baseDir));\n\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(2),\n                segments.segmentName(3),\n                segments.segmentName(4)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"zero\")),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"one\")),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(3),\n                segments.segmentName(4),\n                segments.segmentName(5)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"two\")),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"eight\")),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4),\n                segments.segmentName(5),\n                segments.segmentName(6)\n            ),\n            segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2021-04-10 02:49:37","commitOrder":27,"curCode":"    public void testRestore() throws Exception {\n        final long startTime = SEGMENT_INTERVAL * 2;\n        final long increment = SEGMENT_INTERVAL / 2;\n\n        windowStore.put(0, \"zero\", startTime);\n        windowStore.put(1, \"one\", startTime + increment);\n        windowStore.put(2, \"two\", startTime + increment * 2);\n        windowStore.put(3, \"three\", startTime + increment * 3);\n        windowStore.put(4, \"four\", startTime + increment * 4);\n        windowStore.put(5, \"five\", startTime + increment * 5);\n        windowStore.put(6, \"six\", startTime + increment * 6);\n        windowStore.put(7, \"seven\", startTime + increment * 7);\n        windowStore.put(8, \"eight\", startTime + increment * 8);\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = buildWindowStore(RETENTION_PERIOD,\n                                       WINDOW_SIZE,\n                                       false,\n                                       Serdes.Integer(),\n                                       Serdes.String());\n        windowStore.init((StateStoreContext) context, windowStore);\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        for (final ProducerRecord<Object, Object> record : recordCollector.collected()) {\n            changeLog.add(new KeyValue<>(((Bytes) record.key()).get(), (byte[]) record.value()));\n        }\n\n        context.restore(STORE_NAME, changeLog);\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"eight\")),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4L),\n                segments.segmentName(5L),\n                segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","date":"2021-04-10 02:49:37","endLine":648,"groupId":"101355","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ce/85893970c109c856decb1b1ca6fc00bd4a1668.src","preCode":"    public void testRestore() throws Exception {\n        final long startTime = SEGMENT_INTERVAL * 2;\n        final long increment = SEGMENT_INTERVAL / 2;\n\n        setCurrentTime(startTime);\n        windowStore.put(0, \"zero\");\n        setCurrentTime(startTime + increment);\n        windowStore.put(1, \"one\");\n        setCurrentTime(startTime + increment * 2);\n        windowStore.put(2, \"two\");\n        setCurrentTime(startTime + increment * 3);\n        windowStore.put(3, \"three\");\n        setCurrentTime(startTime + increment * 4);\n        windowStore.put(4, \"four\");\n        setCurrentTime(startTime + increment * 5);\n        windowStore.put(5, \"five\");\n        setCurrentTime(startTime + increment * 6);\n        windowStore.put(6, \"six\");\n        setCurrentTime(startTime + increment * 7);\n        windowStore.put(7, \"seven\");\n        setCurrentTime(startTime + increment * 8);\n        windowStore.put(8, \"eight\");\n        windowStore.flush();\n\n        windowStore.close();\n\n        \r\n        Utils.delete(baseDir);\n\n        windowStore = buildWindowStore(RETENTION_PERIOD,\n                                       WINDOW_SIZE,\n                                       false,\n                                       Serdes.Integer(),\n                                       Serdes.String());\n        windowStore.init((StateStoreContext) context, windowStore);\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        final List<KeyValue<byte[], byte[]>> changeLog = new ArrayList<>();\n        for (final ProducerRecord<Object, Object> record : recordCollector.collected()) {\n            changeLog.add(new KeyValue<>(((Bytes) record.key()).get(), (byte[]) record.value()));\n        }\n\n        context.restore(STORE_NAME, changeLog);\n\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                0,\n                ofEpochMilli(startTime - WINDOW_SIZE),\n                ofEpochMilli(startTime + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                1,\n                ofEpochMilli(startTime + increment - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                2,\n                ofEpochMilli(startTime + increment * 2 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 2 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.emptyList()),\n            valuesToSet(windowStore.fetch(\n                3,\n                ofEpochMilli(startTime + increment * 3 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 3 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"four\")),\n            valuesToSet(windowStore.fetch(\n                4,\n                ofEpochMilli(startTime + increment * 4 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 4 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"five\")),\n            valuesToSet(windowStore.fetch(\n                5,\n                ofEpochMilli(startTime + increment * 5 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 5 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"six\")),\n            valuesToSet(windowStore.fetch(\n                6,\n                ofEpochMilli(startTime + increment * 6 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 6 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"seven\")),\n            valuesToSet(windowStore.fetch(\n                7,\n                ofEpochMilli(startTime + increment * 7 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 7 + WINDOW_SIZE))));\n        assertEquals(\n            new HashSet<>(Collections.singletonList(\"eight\")),\n            valuesToSet(windowStore.fetch(\n                8,\n                ofEpochMilli(startTime + increment * 8 - WINDOW_SIZE),\n                ofEpochMilli(startTime + increment * 8 + WINDOW_SIZE))));\n\n        \r\n        windowStore.flush();\n        assertEquals(\n            Utils.mkSet(\n                segments.segmentName(4L),\n                segments.segmentName(5L),\n                segments.segmentName(6L)),\n            segmentDirs(baseDir)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":495,"status":"M"}],"commitId":"db0323e9ba3f767614415d833a2081a33825a284","commitMessage":"@@@KAFKA-12449: Remove deprecated WindowStore#put (#10293)\n\nRemoves `WindowStore#put(K. V)` that was deprecated via KIP-474.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-04-10 02:49:37","modifiedFileCount":"21","status":"M","submitter":"Jorge Esteban Quilcate Otoya"}]
