[{"authorTime":"2020-04-03 02:36:03","codes":[{"authorDate":"2020-04-03 02:36:03","commitOrder":1,"curCode":"    public void shouldNotAssignMoreThanMaxWarmupReplicas() {\n        maxWarmupReplicas = 1;\n        allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3));\n        client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS);\n\n        clientStates = getClientStatesWithTwoClients();\n        createTaskAssignor();\n        taskAssignor.assign();\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTaskCount(), equalTo(1));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n    }\n","date":"2020-04-03 02:36:03","endLine":582,"groupId":"15488","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotAssignMoreThanMaxWarmupReplicas","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5d/b6e360af56b1d77ec52988b0baa9b1f1748f02.src","preCode":"    public void shouldNotAssignMoreThanMaxWarmupReplicas() {\n        maxWarmupReplicas = 1;\n        allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3));\n        client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS);\n\n        clientStates = getClientStatesWithTwoClients();\n        createTaskAssignor();\n        taskAssignor.assign();\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTaskCount(), equalTo(1));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":567,"status":"B"},{"authorDate":"2020-04-03 02:36:03","commitOrder":1,"curCode":"    public void shouldNotAssignWarmupAndStandbyToTheSameClient() {\n        numStandbyReplicas = 1;\n        maxWarmupReplicas = 1;\n\n        allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3));\n        client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS);\n\n        clientStates = getClientStatesWithTwoClients();\n        createTaskAssignor();\n        taskAssignor.assign();\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n    }\n","date":"2020-04-03 02:36:03","endLine":602,"groupId":"15488","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotAssignWarmupAndStandbyToTheSameClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5d/b6e360af56b1d77ec52988b0baa9b1f1748f02.src","preCode":"    public void shouldNotAssignWarmupAndStandbyToTheSameClient() {\n        numStandbyReplicas = 1;\n        maxWarmupReplicas = 1;\n\n        allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3));\n        client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS);\n\n        clientStates = getClientStatesWithTwoClients();\n        createTaskAssignor();\n        taskAssignor.assign();\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":585,"status":"B"}],"commitId":"2322bc0a6fdf8b26619b6aa9f09355d6c25e6298","commitMessage":"@@@KAFKA-6145: Pt. 5 Implement high availability assignment (#8337)\n\nAdds a new TaskAssignor implementation.  currently hidden behind an internal feature flag.  that implements the high availability algorithm of KIP-441.\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-04-03 02:36:03","modifiedFileCount":"12","status":"B","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-04-22 06:09:59","codes":[{"authorDate":"2020-04-22 06:09:59","commitOrder":2,"curCode":"    public void shouldNotAssignMoreThanMaxWarmupReplicas() {\n        maxWarmupReplicas = 1;\n        allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3));\n        client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS);\n\n        clientStates = getClientStatesMap(client1, client2);\n        createTaskAssignor();\n        taskAssignor.assign();\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTaskCount(), equalTo(1));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n    }\n","date":"2020-04-22 06:09:59","endLine":320,"groupId":"15488","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotAssignMoreThanMaxWarmupReplicas","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/09/8c6508f53bc7afb3b650975fb1de69ea8579a5.src","preCode":"    public void shouldNotAssignMoreThanMaxWarmupReplicas() {\n        maxWarmupReplicas = 1;\n        allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3));\n        client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS);\n\n        clientStates = getClientStatesWithTwoClients();\n        createTaskAssignor();\n        taskAssignor.assign();\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTaskCount(), equalTo(1));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"},{"authorDate":"2020-04-22 06:09:59","commitOrder":2,"curCode":"    public void shouldNotAssignWarmupAndStandbyToTheSameClient() {\n        numStandbyReplicas = 1;\n        maxWarmupReplicas = 1;\n\n        allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3));\n        client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS);\n\n        clientStates = getClientStatesMap(client1, client2);\n        createTaskAssignor();\n        taskAssignor.assign();\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n    }\n","date":"2020-04-22 06:09:59","endLine":340,"groupId":"15488","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotAssignWarmupAndStandbyToTheSameClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/09/8c6508f53bc7afb3b650975fb1de69ea8579a5.src","preCode":"    public void shouldNotAssignWarmupAndStandbyToTheSameClient() {\n        numStandbyReplicas = 1;\n        maxWarmupReplicas = 1;\n\n        allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3));\n        client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS);\n\n        clientStates = getClientStatesWithTwoClients();\n        createTaskAssignor();\n        taskAssignor.assign();\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"5c548e5dfc223371f3109de14eddf0918b8dcad2","commitMessage":"@@@KAFKA-6145: KIP-441: Build state constrained assignment from balanced one (#8497)\n\nImplements: KIP-441\nReviewers: Bruno Cadonna <bruno@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-04-22 06:09:59","modifiedFileCount":"9","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-04-29 04:57:11","codes":[{"authorDate":"2020-04-29 04:57:11","commitOrder":3,"curCode":"    public void shouldNotAssignMoreThanMaxWarmupReplicas() {\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        final Set<TaskId> statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        final ClientState client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3), statefulTasks);\n        final ClientState client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS, statefulTasks);\n\n        final Map<UUID, ClientState> clientStates = getClientStatesMap(client1, client2);\n        final boolean probingRebalanceNeeded = new HighAvailabilityTaskAssignor().assign(\n            clientStates,\n            allTasks,\n            statefulTasks,\n            new AssignmentConfigs(\n                 100L,\n                 1,\n                 1,\n                 0,\n                 60 * 1000L\n            )\n        );\n\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTaskCount(), equalTo(1));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n        assertThat(probingRebalanceNeeded, is(true));\n    }\n","date":"2020-04-29 04:57:11","endLine":322,"groupId":"7034","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotAssignMoreThanMaxWarmupReplicas","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/17/d7c17f82cccc971f3750843487618947949fc4.src","preCode":"    public void shouldNotAssignMoreThanMaxWarmupReplicas() {\n        maxWarmupReplicas = 1;\n        allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3));\n        client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS);\n\n        clientStates = getClientStatesMap(client1, client2);\n        createTaskAssignor();\n        taskAssignor.assign();\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTaskCount(), equalTo(1));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"},{"authorDate":"2020-04-29 04:57:11","commitOrder":3,"curCode":"    public void shouldNotAssignWarmupAndStandbyToTheSameClient() {\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        final Set<TaskId> statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        final ClientState client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3), statefulTasks);\n        final ClientState client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS, statefulTasks);\n\n        final Map<UUID, ClientState> clientStates = getClientStatesMap(client1, client2);\n        final boolean probingRebalanceNeeded = new HighAvailabilityTaskAssignor().assign(\n            clientStates,\n            allTasks,\n            statefulTasks,\n            new AssignmentConfigs(\n                 100L,\n                 1,\n                 1,\n                 1,\n                 60 * 1000L\n            )\n        );\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n        assertThat(probingRebalanceNeeded, is(true));\n    }\n","date":"2020-04-29 04:57:11","endLine":350,"groupId":"7034","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotAssignWarmupAndStandbyToTheSameClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/17/d7c17f82cccc971f3750843487618947949fc4.src","preCode":"    public void shouldNotAssignWarmupAndStandbyToTheSameClient() {\n        numStandbyReplicas = 1;\n        maxWarmupReplicas = 1;\n\n        allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3));\n        client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS);\n\n        clientStates = getClientStatesMap(client1, client2);\n        createTaskAssignor();\n        taskAssignor.assign();\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"}],"commitId":"5bb3415c77cc61b7d1591ccfe028d10bbf9f2a7a","commitMessage":"@@@KAFKA-6145: KIP-441: Add TaskAssignor class config (#8541)\n\n* add a config to set the TaskAssignor\n* set the default assignor to HighAvailabilityTaskAssignor\n* fix broken tests (with some TODOs in the system tests)\n\nImplements: KIP-441\nReviewers: Bruno Cadonna <bruno@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2020-04-29 04:57:11","modifiedFileCount":"17","status":"M","submitter":"John Roesler"},{"authorTime":"2020-05-01 22:59:08","codes":[{"authorDate":"2020-05-01 22:59:08","commitOrder":4,"curCode":"    public void shouldNotAssignMoreThanMaxWarmupReplicas() {\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        final Set<TaskId> statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        final ClientState client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3), statefulTasks);\n        final ClientState client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS, statefulTasks);\n\n        final Map<UUID, ClientState> clientStates = getClientStatesMap(client1, client2);\n        final boolean probingRebalanceNeeded = new HighAvailabilityTaskAssignor().assign(\n            clientStates,\n            allTasks,\n            statefulTasks,\n            new AssignmentConfigs(\n                 100L,\n                 1,\n                 0,\n                 60 * 1000L\n            )\n        );\n\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTaskCount(), equalTo(1));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n        assertThat(probingRebalanceNeeded, is(true));\n    }\n","date":"2020-05-01 22:59:08","endLine":298,"groupId":"102191","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotAssignMoreThanMaxWarmupReplicas","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dd/9b79b80659ad953dffaa67c0a9ccfdc998f21b.src","preCode":"    public void shouldNotAssignMoreThanMaxWarmupReplicas() {\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        final Set<TaskId> statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        final ClientState client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3), statefulTasks);\n        final ClientState client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS, statefulTasks);\n\n        final Map<UUID, ClientState> clientStates = getClientStatesMap(client1, client2);\n        final boolean probingRebalanceNeeded = new HighAvailabilityTaskAssignor().assign(\n            clientStates,\n            allTasks,\n            statefulTasks,\n            new AssignmentConfigs(\n                 100L,\n                 1,\n                 1,\n                 0,\n                 60 * 1000L\n            )\n        );\n\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTaskCount(), equalTo(1));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n        assertThat(probingRebalanceNeeded, is(true));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"},{"authorDate":"2020-05-01 22:59:08","commitOrder":4,"curCode":"    public void shouldNotAssignWarmupAndStandbyToTheSameClient() {\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        final Set<TaskId> statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        final ClientState client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3), statefulTasks);\n        final ClientState client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS, statefulTasks);\n\n        final Map<UUID, ClientState> clientStates = getClientStatesMap(client1, client2);\n        final boolean probingRebalanceNeeded = new HighAvailabilityTaskAssignor().assign(\n            clientStates,\n            allTasks,\n            statefulTasks,\n            new AssignmentConfigs(\n                 100L,\n                 1,\n                 1,\n                 60 * 1000L\n            )\n        );\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n        assertThat(probingRebalanceNeeded, is(true));\n    }\n","date":"2020-05-01 22:59:08","endLine":325,"groupId":"102191","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotAssignWarmupAndStandbyToTheSameClient","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dd/9b79b80659ad953dffaa67c0a9ccfdc998f21b.src","preCode":"    public void shouldNotAssignWarmupAndStandbyToTheSameClient() {\n        final Set<TaskId> allTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        final Set<TaskId> statefulTasks = mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3);\n        final ClientState client1 = getMockClientWithPreviousCaughtUpTasks(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3), statefulTasks);\n        final ClientState client2 = getMockClientWithPreviousCaughtUpTasks(EMPTY_TASKS, statefulTasks);\n\n        final Map<UUID, ClientState> clientStates = getClientStatesMap(client1, client2);\n        final boolean probingRebalanceNeeded = new HighAvailabilityTaskAssignor().assign(\n            clientStates,\n            allTasks,\n            statefulTasks,\n            new AssignmentConfigs(\n                 100L,\n                 1,\n                 1,\n                 1,\n                 60 * 1000L\n            )\n        );\n\n        assertThat(client1.activeTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertThat(client2.standbyTasks(), equalTo(mkSet(TASK_0_0, TASK_0_1, TASK_0_2, TASK_0_3)));\n        assertHasNoStandbyTasks(client1);\n        assertHasNoActiveTasks(client2);\n        assertThat(probingRebalanceNeeded, is(true));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/HighAvailabilityTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"}],"commitId":"95edaba8615d4ca2d623722eee38eb78fc24d317","commitMessage":"@@@KAFKA-6145: KIP 441 remove balance factor (#8597)\n\nReviewers: John Roesler <vvcephei@apache.org>","date":"2020-05-01 22:59:08","modifiedFileCount":"13","status":"M","submitter":"A. Sophie Blee-Goldman"}]
