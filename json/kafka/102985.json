[{"authorTime":"2018-08-02 06:01:18","codes":[{"authorDate":"2018-08-02 06:01:18","commitOrder":2,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final Serializer<K> keySerializer = keySerde != null ? keySerde.serializer() : null;\n        final Deserializer<K> keyDeserializer = keySerde != null ? keySerde.deserializer() : null;\n\n        topologyBuilder.addInternalTopic(repartitionTopic);\n\n        topologyBuilder.addProcessor(\n            processorParameters.processorName(),\n            processorParameters.processorSupplier(),\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer,\n            getValueSerializer(),\n            null,\n            processorParameters.processorName()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer,\n            getValueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","date":"2018-08-02 06:01:18","endLine":95,"groupId":"735","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/98df09829b5754f8ac39cbe858fca3bdc5f56d.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final Serializer<K> keySerializer = keySerde != null ? keySerde.serializer() : null;\n        final Deserializer<K> keyDeserializer = keySerde != null ? keySerde.deserializer() : null;\n\n        topologyBuilder.addInternalTopic(repartitionTopic);\n\n        topologyBuilder.addProcessor(\n            processorParameters.processorName(),\n            processorParameters.processorSupplier(),\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer,\n            getValueSerializer(),\n            null,\n            processorParameters.processorName()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer,\n            getValueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/OptimizableRepartitionNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"MB"},{"authorDate":"2018-08-02 06:01:18","commitOrder":2,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final Serializer<K> keySerializer = keySerde != null ? keySerde.serializer() : null;\n        final Deserializer<K> keyDeserializer = keySerde != null ? keySerde.deserializer() : null;\n\n\n        topologyBuilder.addInternalTopic(repartitionTopic);\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer,\n            getValueSerializer(),\n            null,\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer,\n            getValueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","date":"2018-08-02 06:01:18","endLine":103,"groupId":"3577","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/fb69d7c2ae05f42466d01f55858f9c706a18c2.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final Serializer<K> keySerializer = keySerde != null ? keySerde.serializer() : null;\n        final Deserializer<K> keyDeserializer = keySerde != null ? keySerde.deserializer() : null;\n\n\n        topologyBuilder.addInternalTopic(repartitionTopic);\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer,\n            getValueSerializer(),\n            null,\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer,\n            getValueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/GroupedTableOperationRepartitionNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"MB"}],"commitId":"c19213ab4139aa1f56f89982448184a5c82f98a4","commitMessage":"@@@KAFKA-6761: Construct Physical Plan using Graph.  Reduce streams footprint part III (#5201)\n\nThe specific changes in this PR from the second PR include:\n\n1. Changed the types of graph nodes to names conveying more context\n2. Build the entire physical plan from the graph.  after StreamsBuilder.build() is called.\n\nOther changes are addressed directly as review comments on the PR.\n\nTesting consists of using all existing streams tests to validate building the physical plan with graph\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <vvcephei@users.noreply.github.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-08-02 06:01:18","modifiedFileCount":"37","status":"M","submitter":"Bill Bejeck"},{"authorTime":"2018-08-02 06:01:18","codes":[{"authorDate":"2019-10-04 06:59:31","commitOrder":3,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final Serializer<K> keySerializer = keySerde != null ? keySerde.serializer() : null;\n        final Deserializer<K> keyDeserializer = keySerde != null ? keySerde.deserializer() : null;\n\n        topologyBuilder.addInternalTopic(repartitionTopic);\n\n        topologyBuilder.addProcessor(\n            processorParameters.processorName(),\n            processorParameters.processorSupplier(),\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer,\n            getValueSerializer(),\n            partitioner,\n            processorParameters.processorName()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer,\n            getValueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","date":"2019-10-04 06:59:31","endLine":109,"groupId":"735","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e3/cf2b80d45ee2c80bae1025dc7e51d404d1bd93.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final Serializer<K> keySerializer = keySerde != null ? keySerde.serializer() : null;\n        final Deserializer<K> keyDeserializer = keySerde != null ? keySerde.deserializer() : null;\n\n        topologyBuilder.addInternalTopic(repartitionTopic);\n\n        topologyBuilder.addProcessor(\n            processorParameters.processorName(),\n            processorParameters.processorSupplier(),\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer,\n            getValueSerializer(),\n            null,\n            processorParameters.processorName()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer,\n            getValueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/OptimizableRepartitionNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2018-08-02 06:01:18","commitOrder":3,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final Serializer<K> keySerializer = keySerde != null ? keySerde.serializer() : null;\n        final Deserializer<K> keyDeserializer = keySerde != null ? keySerde.deserializer() : null;\n\n\n        topologyBuilder.addInternalTopic(repartitionTopic);\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer,\n            getValueSerializer(),\n            null,\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer,\n            getValueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","date":"2018-08-02 06:01:18","endLine":103,"groupId":"3577","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/fb69d7c2ae05f42466d01f55858f9c706a18c2.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final Serializer<K> keySerializer = keySerde != null ? keySerde.serializer() : null;\n        final Deserializer<K> keyDeserializer = keySerde != null ? keySerde.deserializer() : null;\n\n\n        topologyBuilder.addInternalTopic(repartitionTopic);\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer,\n            getValueSerializer(),\n            null,\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer,\n            getValueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/GroupedTableOperationRepartitionNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"N"}],"commitId":"c87fe9402cbebc460b42cd3dd7c268e5e6e659d9","commitMessage":"@@@KAFKA-3705 Added a foreignKeyJoin implementation for KTable. (#5527)\n\nhttps://issues.apache.org/jira/browse/KAFKA-3705\n\nAllows for a KTable to map its value to a given foreign key and join on another KTable keyed on that foreign key. Applies the joiner.  then returns the tuples keyed on the original key. This supports updates from both sides of the join.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Matthias J. Sax <mjsax@apache.org>.   John Roesler <john@confluent.io>.  Boyang Chen <boyang@confluent.io>.  Christopher Pettitt <cpettitt@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>.  Jan Filipiak <Jan.Filipiak@trivago.com>.  pgwhalen.  Alexei Daniline","date":"2019-10-04 06:59:31","modifiedFileCount":"15","status":"M","submitter":"Adam Bellemare"},{"authorTime":"2020-04-10 07:52:41","codes":[{"authorDate":"2020-04-10 07:52:41","commitOrder":4,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        topologyBuilder.addInternalTopic(repartitionTopic, internalTopicProperties);\n\n        topologyBuilder.addProcessor(\n            processorParameters.processorName(),\n            processorParameters.processorSupplier(),\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer(),\n            valueSerializer(),\n            partitioner,\n            processorParameters.processorName()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer(),\n            valueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","date":"2020-04-10 07:52:41","endLine":94,"groupId":"8214","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/24/dc8da9fd1bcb1bb9935d5542b4558f03bdbd44.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final Serializer<K> keySerializer = keySerde != null ? keySerde.serializer() : null;\n        final Deserializer<K> keyDeserializer = keySerde != null ? keySerde.deserializer() : null;\n\n        topologyBuilder.addInternalTopic(repartitionTopic);\n\n        topologyBuilder.addProcessor(\n            processorParameters.processorName(),\n            processorParameters.processorSupplier(),\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer,\n            getValueSerializer(),\n            partitioner,\n            processorParameters.processorName()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer,\n            getValueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/OptimizableRepartitionNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2020-04-10 07:52:41","commitOrder":4,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        topologyBuilder.addInternalTopic(repartitionTopic, internalTopicProperties);\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer(),\n            valueSerializer(),\n            null,\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer(),\n            valueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","date":"2020-04-10 07:52:41","endLine":102,"groupId":"9311","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/88f2cbf968a3364c5429f4a560011c0d18d6a6.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final Serializer<K> keySerializer = keySerde != null ? keySerde.serializer() : null;\n        final Deserializer<K> keyDeserializer = keySerde != null ? keySerde.deserializer() : null;\n\n\n        topologyBuilder.addInternalTopic(repartitionTopic);\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer,\n            getValueSerializer(),\n            null,\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer,\n            getValueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/GroupedTableOperationRepartitionNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"e131a9963484e46f45a7302267507ed54dab6871","commitMessage":"@@@KAFKA-8611: Add KStream#repartition operation (#7170)\n\nImplements KIP-221.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <john@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2020-04-10 07:52:41","modifiedFileCount":"23","status":"M","submitter":"Levani Kokhreidze"},{"authorTime":"2021-05-07 08:27:23","codes":[{"authorDate":"2021-05-07 08:27:23","commitOrder":5,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n        topologyBuilder.addInternalTopic(repartitionTopic, internalTopicProperties);\n\n        topologyBuilder.addProcessor(\n            processorParameters.processorName(),\n            processorParameters.processorSupplier(),\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer(),\n            valueSerializer(),\n            partitioner,\n            processorParameters.processorName()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer(),\n            valueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","date":"2021-05-07 08:27:23","endLine":96,"groupId":"8214","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder@finalPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c7/ee03d79910f78c5afc18d7f8adec29c55afc5c.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        topologyBuilder.addInternalTopic(repartitionTopic, internalTopicProperties);\n\n        topologyBuilder.addProcessor(\n            processorParameters.processorName(),\n            processorParameters.processorSupplier(),\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer(),\n            valueSerializer(),\n            partitioner,\n            processorParameters.processorName()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer(),\n            valueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/OptimizableRepartitionNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"},{"authorDate":"2021-05-07 08:27:23","commitOrder":5,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n        topologyBuilder.addInternalTopic(repartitionTopic, internalTopicProperties);\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer(),\n            valueSerializer(),\n            null,\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer(),\n            valueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","date":"2021-05-07 08:27:23","endLine":104,"groupId":"9311","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder@finalPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/11/17e5ec7fe7c446ced1d86d5ab2212fcb0ded3c.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        topologyBuilder.addInternalTopic(repartitionTopic, internalTopicProperties);\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer(),\n            valueSerializer(),\n            null,\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer(),\n            valueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/GroupedTableOperationRepartitionNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"45d7440c1577b838d4584d3860e5c4d691446f3f","commitMessage":"@@@KAFKA-10847: Set StreamsConfig on InternalTopologyDriver before writing topology (#10640)\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2021-05-07 08:27:23","modifiedFileCount":"20","status":"M","submitter":"Sergio Pe?a"},{"authorTime":"2021-08-27 08:19:03","codes":[{"authorDate":"2021-08-27 08:19:03","commitOrder":6,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        topologyBuilder.addInternalTopic(repartitionTopic, internalTopicProperties);\n\n        topologyBuilder.addProcessor(\n            processorParameters.processorName(),\n            processorParameters.processorSupplier(),\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer(),\n            valueSerializer(),\n            partitioner,\n            processorParameters.processorName()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer(),\n            valueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","date":"2021-08-27 08:19:03","endLine":94,"groupId":"102985","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a9/693ec814cb87202eac8729238ec93257d96c7f.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n        topologyBuilder.addInternalTopic(repartitionTopic, internalTopicProperties);\n\n        topologyBuilder.addProcessor(\n            processorParameters.processorName(),\n            processorParameters.processorSupplier(),\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer(),\n            valueSerializer(),\n            partitioner,\n            processorParameters.processorName()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer(),\n            valueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/OptimizableRepartitionNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2021-08-27 08:19:03","commitOrder":6,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        topologyBuilder.addInternalTopic(repartitionTopic, internalTopicProperties);\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer(),\n            valueSerializer(),\n            null,\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer(),\n            valueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","date":"2021-08-27 08:19:03","endLine":102,"groupId":"102985","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a7/ba30d1ffd0cbd48b51dd1a2812ee55d0a69743.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n        topologyBuilder.addInternalTopic(repartitionTopic, internalTopicProperties);\n\n        topologyBuilder.addSink(\n            sinkName,\n            repartitionTopic,\n            keySerializer(),\n            valueSerializer(),\n            null,\n            parentNodeNames()\n        );\n\n        topologyBuilder.addSource(\n            null,\n            sourceName,\n            new FailOnInvalidTimestamp(),\n            keyDeserializer(),\n            valueDeserializer(),\n            repartitionTopic\n        );\n\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/GroupedTableOperationRepartitionNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"d9bb98895453fa7cdf14eb3184e904fca884f9a1","commitMessage":"@@@MINOR: remove unused Properties from GraphNode#writeToTopology (#11263)\n\nThe GraphNode#writeToTopology method accepts a Properties input parameter.  but never uses it in any of its implementations. We can remove this parameter to clean things up and help make it clear that writing nodes to the topology doesn't involve the app properties.\n\nReviewers: Bruno Cadonna <cadonna@confluent.io>","date":"2021-08-27 08:19:03","modifiedFileCount":"18","status":"M","submitter":"A. Sophie Blee-Goldman"}]
