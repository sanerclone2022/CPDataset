[{"authorTime":"2020-01-17 06:25:48","codes":[{"authorDate":"2020-01-15 06:10:19","commitOrder":23,"curCode":"    public void before() throws Exception {\n        createTopics();\n        streamsConfiguration = new Properties();\n        final String applicationId = \"queryable-state-\" + testNo.incrementAndGet();\n\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(\"state-\" + applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        stringComparator = Comparator.comparing((KeyValue<String, String> o) -> o.key).thenComparing(o -> o.value);\n        stringLongComparator = Comparator.comparing((KeyValue<String, Long> o) -> o.key).thenComparingLong(o -> o.value);\n        inputValues = getInputValues();\n        inputValuesKeys = new HashSet<>();\n        for (final String sentence : inputValues) {\n            final String[] words = sentence.split(\"\\\\W+\");\n            numberOfWordsPerIteration += words.length;\n            Collections.addAll(inputValuesKeys, words);\n        }\n    }\n","date":"2020-01-16 03:47:40","endLine":217,"groupId":"21303","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f4/987f27f938b9c27b34e6238139a9e15561af0c.src","preCode":"    public void before() throws Exception {\n        createTopics();\n        streamsConfiguration = new Properties();\n        final String applicationId = \"queryable-state-\" + testNo.incrementAndGet();\n\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(\"state-\" + applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        stringComparator = Comparator.comparing((KeyValue<String, String> o) -> o.key).thenComparing(o -> o.value);\n        stringLongComparator = Comparator.comparing((KeyValue<String, Long> o) -> o.key).thenComparingLong(o -> o.value);\n        inputValues = getInputValues();\n        inputValuesKeys = new HashSet<>();\n        for (final String sentence : inputValues) {\n            final String[] words = sentence.split(\"\\\\W+\");\n            numberOfWordsPerIteration += words.length;\n            Collections.addAll(inputValuesKeys, words);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/QueryableStateIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"NB"},{"authorDate":"2020-01-17 06:25:48","commitOrder":23,"curCode":"    public void before() {\n        inputTopicName = \"input-topic-\" + name.getMethodName();\n        outputTopicName = \"output-topic-\" + name.getMethodName();\n        stateStoreName = \"lagfetch-test-store\" + name.getMethodName();\n\n        streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"lag-fetch-\" + name.getMethodName());\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        consumerConfiguration = new Properties();\n        consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, name.getMethodName() + \"-consumer\");\n        consumerConfiguration.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerConfiguration.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerConfiguration.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());\n    }\n","date":"2020-01-17 06:25:48","endLine":107,"groupId":"1351","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/8d64734d139ce038bd0a9ac0dc4c7a080acaa8.src","preCode":"    public void before() {\n        inputTopicName = \"input-topic-\" + name.getMethodName();\n        outputTopicName = \"output-topic-\" + name.getMethodName();\n        stateStoreName = \"lagfetch-test-store\" + name.getMethodName();\n\n        streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"lag-fetch-\" + name.getMethodName());\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        consumerConfiguration = new Properties();\n        consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, name.getMethodName() + \"-consumer\");\n        consumerConfiguration.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerConfiguration.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerConfiguration.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/LagFetchIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"}],"commitId":"bbd3348dcbcb01017914b64dbe6f16c00c1b7b61","commitMessage":"@@@KAFKA-9431: Expose API in KafkaStreams to fetch all local offset lags (#7961)\n\nAdd a new method to KafkaStreams to return an estimate of the lags for\nall partitions of all local stores.\n\nImplements: KIP-535\nCo-authored-by: Navinder Pal Singh Brar <navinder_brar@yahoo.com>\nReviewed-by: John Roesler <vvcephei@apache.org>","date":"2020-01-17 06:25:48","modifiedFileCount":"14","status":"M","submitter":"vinoth chandar"},{"authorTime":"2020-01-17 06:25:48","codes":[{"authorDate":"2020-04-02 07:16:13","commitOrder":24,"curCode":"    public void before() throws Exception {\n        createTopics();\n        streamsConfiguration = new Properties();\n        final String applicationId = \"queryable-state-\" + testNo.incrementAndGet();\n\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(\"state-\" + applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        stringComparator = Comparator.comparing((KeyValue<String, String> o) -> o.key).thenComparing(o -> o.value);\n        stringLongComparator = Comparator.comparing((KeyValue<String, Long> o) -> o.key).thenComparingLong(o -> o.value);\n        inputValues = getInputValues();\n        inputValuesKeys = new HashSet<>();\n        for (final String sentence : inputValues) {\n            final String[] words = sentence.split(\"\\\\W+\");\n            Collections.addAll(inputValuesKeys, words);\n        }\n    }\n","date":"2020-04-02 07:16:13","endLine":218,"groupId":"21303","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4c/33467628f6aff187c20641857d854ae5ded4bc.src","preCode":"    public void before() throws Exception {\n        createTopics();\n        streamsConfiguration = new Properties();\n        final String applicationId = \"queryable-state-\" + testNo.incrementAndGet();\n\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(\"state-\" + applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        stringComparator = Comparator.comparing((KeyValue<String, String> o) -> o.key).thenComparing(o -> o.value);\n        stringLongComparator = Comparator.comparing((KeyValue<String, Long> o) -> o.key).thenComparingLong(o -> o.value);\n        inputValues = getInputValues();\n        inputValuesKeys = new HashSet<>();\n        for (final String sentence : inputValues) {\n            final String[] words = sentence.split(\"\\\\W+\");\n            numberOfWordsPerIteration += words.length;\n            Collections.addAll(inputValuesKeys, words);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/QueryableStateIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"},{"authorDate":"2020-01-17 06:25:48","commitOrder":24,"curCode":"    public void before() {\n        inputTopicName = \"input-topic-\" + name.getMethodName();\n        outputTopicName = \"output-topic-\" + name.getMethodName();\n        stateStoreName = \"lagfetch-test-store\" + name.getMethodName();\n\n        streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"lag-fetch-\" + name.getMethodName());\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        consumerConfiguration = new Properties();\n        consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, name.getMethodName() + \"-consumer\");\n        consumerConfiguration.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerConfiguration.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerConfiguration.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());\n    }\n","date":"2020-01-17 06:25:48","endLine":107,"groupId":"1351","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/8d64734d139ce038bd0a9ac0dc4c7a080acaa8.src","preCode":"    public void before() {\n        inputTopicName = \"input-topic-\" + name.getMethodName();\n        outputTopicName = \"output-topic-\" + name.getMethodName();\n        stateStoreName = \"lagfetch-test-store\" + name.getMethodName();\n\n        streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"lag-fetch-\" + name.getMethodName());\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        consumerConfiguration = new Properties();\n        consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, name.getMethodName() + \"-consumer\");\n        consumerConfiguration.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerConfiguration.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerConfiguration.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/LagFetchIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"a2092ecd7a94ee390832a1fdcbe67ef7b70a4561","commitMessage":"@@@HOTFIX: remove redundant check for QueryableStateIntegrationTest\n","date":"2020-04-02 07:16:13","modifiedFileCount":"1","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-01-17 06:25:48","codes":[{"authorDate":"2020-04-23 05:29:23","commitOrder":25,"curCode":"    public void before() throws Exception {\n        createTopics();\n        streamsConfiguration = new Properties();\n        final String applicationId = \"queryable-state-\" + name.getMethodName();\n\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(\"state-\" + applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        stringComparator = Comparator.comparing((KeyValue<String, String> o) -> o.key).thenComparing(o -> o.value);\n        stringLongComparator = Comparator.comparing((KeyValue<String, Long> o) -> o.key).thenComparingLong(o -> o.value);\n        inputValues = getInputValues();\n        inputValuesKeys = new HashSet<>();\n        for (final String sentence : inputValues) {\n            final String[] words = sentence.split(\"\\\\W+\");\n            Collections.addAll(inputValuesKeys, words);\n        }\n    }\n","date":"2020-04-23 05:29:23","endLine":221,"groupId":"21303","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/65/92c3869b77c8c305463a954a513ff5c6072d31.src","preCode":"    public void before() throws Exception {\n        createTopics();\n        streamsConfiguration = new Properties();\n        final String applicationId = \"queryable-state-\" + testNo.incrementAndGet();\n\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(\"state-\" + applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        stringComparator = Comparator.comparing((KeyValue<String, String> o) -> o.key).thenComparing(o -> o.value);\n        stringLongComparator = Comparator.comparing((KeyValue<String, Long> o) -> o.key).thenComparingLong(o -> o.value);\n        inputValues = getInputValues();\n        inputValuesKeys = new HashSet<>();\n        for (final String sentence : inputValues) {\n            final String[] words = sentence.split(\"\\\\W+\");\n            Collections.addAll(inputValuesKeys, words);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/QueryableStateIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2020-01-17 06:25:48","commitOrder":25,"curCode":"    public void before() {\n        inputTopicName = \"input-topic-\" + name.getMethodName();\n        outputTopicName = \"output-topic-\" + name.getMethodName();\n        stateStoreName = \"lagfetch-test-store\" + name.getMethodName();\n\n        streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"lag-fetch-\" + name.getMethodName());\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        consumerConfiguration = new Properties();\n        consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, name.getMethodName() + \"-consumer\");\n        consumerConfiguration.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerConfiguration.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerConfiguration.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());\n    }\n","date":"2020-01-17 06:25:48","endLine":107,"groupId":"1351","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/8d64734d139ce038bd0a9ac0dc4c7a080acaa8.src","preCode":"    public void before() {\n        inputTopicName = \"input-topic-\" + name.getMethodName();\n        outputTopicName = \"output-topic-\" + name.getMethodName();\n        stateStoreName = \"lagfetch-test-store\" + name.getMethodName();\n\n        streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"lag-fetch-\" + name.getMethodName());\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        consumerConfiguration = new Properties();\n        consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, name.getMethodName() + \"-consumer\");\n        consumerConfiguration.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerConfiguration.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerConfiguration.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/LagFetchIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"fbd8cf0d861dec5b7bac237e8221cfae51bec14a","commitMessage":"@@@KAFKA-9388: Refactor integration tests to always use different application ids (#8530)\n\nWhen debugging KAFKA-9388.  I found the reason that the second test method test takes much longer (10s) than the previous one (~500ms) is because they used the same app.id. When the previous clients are shutdown.  they would not send leave-group and hence we are still depending on the session timeout (10s) for the members to be removed out of the group.\n\nWhen the second test is triggered.  they will join the same group because of the same application id.  and the prepare-rebalance phase would would for the full rebalance timeout before it kicks out the previous members.\n\nSetting different application ids could resolve such issues for integration tests --- I did a quick search and found some other integration tests have the same issue. And after this PR my local unit test runtime reduced from about 14min to 7min.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  John Roesler <john@confluent.io>","date":"2020-04-23 05:29:23","modifiedFileCount":"22","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-04-30 06:11:49","codes":[{"authorDate":"2020-04-30 06:11:49","commitOrder":26,"curCode":"    public void before() throws Exception {\n        createTopics();\n        streamsConfiguration = new Properties();\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        stringComparator = Comparator.comparing((KeyValue<String, String> o) -> o.key).thenComparing(o -> o.value);\n        stringLongComparator = Comparator.comparing((KeyValue<String, Long> o) -> o.key).thenComparingLong(o -> o.value);\n        inputValues = getInputValues();\n        inputValuesKeys = new HashSet<>();\n        for (final String sentence : inputValues) {\n            final String[] words = sentence.split(\"\\\\W+\");\n            Collections.addAll(inputValuesKeys, words);\n        }\n    }\n","date":"2020-04-30 06:11:49","endLine":220,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/eb/33107b3d3dbc7743a03ac90197cbd342114b6b.src","preCode":"    public void before() throws Exception {\n        createTopics();\n        streamsConfiguration = new Properties();\n        final String applicationId = \"queryable-state-\" + name.getMethodName();\n\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(\"state-\" + applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        stringComparator = Comparator.comparing((KeyValue<String, String> o) -> o.key).thenComparing(o -> o.value);\n        stringLongComparator = Comparator.comparing((KeyValue<String, Long> o) -> o.key).thenComparingLong(o -> o.value);\n        inputValues = getInputValues();\n        inputValuesKeys = new HashSet<>();\n        for (final String sentence : inputValues) {\n            final String[] words = sentence.split(\"\\\\W+\");\n            Collections.addAll(inputValuesKeys, words);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/QueryableStateIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2020-04-30 06:11:49","commitOrder":26,"curCode":"    public void before() {\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        inputTopicName = \"input-topic-\" + safeTestName;\n        outputTopicName = \"output-topic-\" + safeTestName;\n        stateStoreName = \"lagfetch-test-store\" + safeTestName;\n\n        streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        consumerConfiguration = new Properties();\n        consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerConfiguration.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerConfiguration.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerConfiguration.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());\n    }\n","date":"2020-04-30 06:11:49","endLine":115,"groupId":"1311","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/6d6c06f665f67097a788bb67c2ffa3a36edd3c.src","preCode":"    public void before() {\n        inputTopicName = \"input-topic-\" + name.getMethodName();\n        outputTopicName = \"output-topic-\" + name.getMethodName();\n        stateStoreName = \"lagfetch-test-store\" + name.getMethodName();\n\n        streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"lag-fetch-\" + name.getMethodName());\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        consumerConfiguration = new Properties();\n        consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, name.getMethodName() + \"-consumer\");\n        consumerConfiguration.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerConfiguration.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerConfiguration.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/LagFetchIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"dc4d439825b2d117707b01c7c64769e700246fc6","commitMessage":"@@@KAFKA-9875: Make integration tests more resilient (#8578)\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-04-30 06:11:49","modifiedFileCount":"25","status":"M","submitter":"John Roesler"},{"authorTime":"2020-04-30 06:11:49","codes":[{"authorDate":"2020-05-04 09:39:43","commitOrder":27,"curCode":"    public void before() throws Exception {\n        createTopics();\n        streamsConfiguration = new Properties();\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        stringComparator = Comparator.comparing((KeyValue<String, String> o) -> o.key).thenComparing(o -> o.value);\n        stringLongComparator = Comparator.comparing((KeyValue<String, Long> o) -> o.key).thenComparingLong(o -> o.value);\n        inputValues = getInputValues();\n        inputValuesKeys = new HashSet<>();\n        for (final String sentence : inputValues) {\n            final String[] words = sentence.split(\"\\\\W+\");\n            Collections.addAll(inputValuesKeys, words);\n        }\n    }\n","date":"2020-05-04 09:39:43","endLine":220,"groupId":"3657","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/bc3de80a3e6ec6a21d1d88bbfc450af4bd8d9d.src","preCode":"    public void before() throws Exception {\n        createTopics();\n        streamsConfiguration = new Properties();\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        stringComparator = Comparator.comparing((KeyValue<String, String> o) -> o.key).thenComparing(o -> o.value);\n        stringLongComparator = Comparator.comparing((KeyValue<String, Long> o) -> o.key).thenComparingLong(o -> o.value);\n        inputValues = getInputValues();\n        inputValuesKeys = new HashSet<>();\n        for (final String sentence : inputValues) {\n            final String[] words = sentence.split(\"\\\\W+\");\n            Collections.addAll(inputValuesKeys, words);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/QueryableStateIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2020-04-30 06:11:49","commitOrder":27,"curCode":"    public void before() {\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        inputTopicName = \"input-topic-\" + safeTestName;\n        outputTopicName = \"output-topic-\" + safeTestName;\n        stateStoreName = \"lagfetch-test-store\" + safeTestName;\n\n        streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        consumerConfiguration = new Properties();\n        consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerConfiguration.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerConfiguration.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerConfiguration.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());\n    }\n","date":"2020-04-30 06:11:49","endLine":115,"groupId":"1311","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/6d6c06f665f67097a788bb67c2ffa3a36edd3c.src","preCode":"    public void before() {\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        inputTopicName = \"input-topic-\" + safeTestName;\n        outputTopicName = \"output-topic-\" + safeTestName;\n        stateStoreName = \"lagfetch-test-store\" + safeTestName;\n\n        streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        consumerConfiguration = new Properties();\n        consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerConfiguration.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerConfiguration.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerConfiguration.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/LagFetchIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"}],"commitId":"34824b7bff64ba387a04466d74ac6bbbd10bf37c","commitMessage":"@@@KAFKA-9798: Send one round synchronously before starting the async producer (#8565)\n\nComparing all other test cases.  the shouldAllowConcurrentAccesses starts an async producer sending records throughout the test other than just synchronously sent and acked a few records before we start the streams application. Right after the streams app is started.  we check that at least one record is sent to the output topic (i.e. completed processing). However since only this test starts the producer async and did not wait for it to complete.  it is possible that the async producer gets too longer to produce some records and causing it to fail.\n\nTo follow what other tests did.  I let this test to first send one round of records synchronously before starting the async producing.\n\nAlso encountered some new scala warnings that I fixed along with this PR.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2020-05-04 09:39:43","modifiedFileCount":"1","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2021-05-22 06:05:39","codes":[{"authorDate":"2021-05-22 06:05:39","commitOrder":28,"curCode":"    public void before() throws Exception {\n        createTopics();\n        streamsConfiguration = new Properties();\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100L);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        stringComparator = Comparator.comparing((KeyValue<String, String> o) -> o.key).thenComparing(o -> o.value);\n        stringLongComparator = Comparator.comparing((KeyValue<String, Long> o) -> o.key).thenComparingLong(o -> o.value);\n        inputValues = getInputValues();\n        inputValuesKeys = new HashSet<>();\n        for (final String sentence : inputValues) {\n            final String[] words = sentence.split(\"\\\\W+\");\n            Collections.addAll(inputValuesKeys, words);\n        }\n    }\n","date":"2021-05-22 06:05:39","endLine":240,"groupId":"1311","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/7c05487de1a259aef1157a3a4ee817a29b4eca.src","preCode":"    public void before() throws Exception {\n        createTopics();\n        streamsConfiguration = new Properties();\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        stringComparator = Comparator.comparing((KeyValue<String, String> o) -> o.key).thenComparing(o -> o.value);\n        stringLongComparator = Comparator.comparing((KeyValue<String, Long> o) -> o.key).thenComparingLong(o -> o.value);\n        inputValues = getInputValues();\n        inputValuesKeys = new HashSet<>();\n        for (final String sentence : inputValues) {\n            final String[] words = sentence.split(\"\\\\W+\");\n            Collections.addAll(inputValuesKeys, words);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/QueryableStateIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2021-05-22 06:05:39","commitOrder":28,"curCode":"    public void before() {\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        inputTopicName = \"input-topic-\" + safeTestName;\n        outputTopicName = \"output-topic-\" + safeTestName;\n        stateStoreName = \"lagfetch-test-store\" + safeTestName;\n\n        streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100L);\n\n        consumerConfiguration = new Properties();\n        consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerConfiguration.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerConfiguration.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerConfiguration.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());\n    }\n","date":"2021-05-22 06:05:39","endLine":127,"groupId":"1311","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6a/024966d9f239075187155c9ef9aa2dd6af26bb.src","preCode":"    public void before() {\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        inputTopicName = \"input-topic-\" + safeTestName;\n        outputTopicName = \"output-topic-\" + safeTestName;\n        stateStoreName = \"lagfetch-test-store\" + safeTestName;\n\n        streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100);\n\n        consumerConfiguration = new Properties();\n        consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerConfiguration.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerConfiguration.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerConfiguration.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/LagFetchIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"ae8b7845374b6bb01e1ae9ca27f6ab967561e011","commitMessage":"@@@KAFKA-12499: add transaction timeout verification (#10482)\n\nThis PR tries to add the check for transaction timeout for a comparison against commit interval of streams. If transaction timeout is smaller than commit interval.  stream should crash and inform user to update their commit interval to be larger or equal to the given transaction timeout.  or vise versa.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2021-05-22 06:05:39","modifiedFileCount":"65","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-05-22 06:05:39","codes":[{"authorDate":"2021-06-10 06:09:31","commitOrder":29,"curCode":"    public void before() throws Exception {\n        createTopics();\n        streamsConfiguration = new Properties();\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100L);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 10000);\n\n        stringComparator = Comparator.comparing((KeyValue<String, String> o) -> o.key).thenComparing(o -> o.value);\n        stringLongComparator = Comparator.comparing((KeyValue<String, Long> o) -> o.key).thenComparingLong(o -> o.value);\n        inputValues = getInputValues();\n        inputValuesKeys = new HashSet<>();\n        for (final String sentence : inputValues) {\n            final String[] words = sentence.split(\"\\\\W+\");\n            Collections.addAll(inputValuesKeys, words);\n        }\n    }\n","date":"2021-06-10 06:09:31","endLine":241,"groupId":"102602","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4e/9b2b53ebc8c1a2e74ed605b5a3d510e137235e.src","preCode":"    public void before() throws Exception {\n        createTopics();\n        streamsConfiguration = new Properties();\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory().getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100L);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        stringComparator = Comparator.comparing((KeyValue<String, String> o) -> o.key).thenComparing(o -> o.value);\n        stringLongComparator = Comparator.comparing((KeyValue<String, Long> o) -> o.key).thenComparingLong(o -> o.value);\n        inputValues = getInputValues();\n        inputValuesKeys = new HashSet<>();\n        for (final String sentence : inputValues) {\n            final String[] words = sentence.split(\"\\\\W+\");\n            Collections.addAll(inputValuesKeys, words);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/QueryableStateIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2021-05-22 06:05:39","commitOrder":29,"curCode":"    public void before() {\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        inputTopicName = \"input-topic-\" + safeTestName;\n        outputTopicName = \"output-topic-\" + safeTestName;\n        stateStoreName = \"lagfetch-test-store\" + safeTestName;\n\n        streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100L);\n\n        consumerConfiguration = new Properties();\n        consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerConfiguration.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerConfiguration.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerConfiguration.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());\n    }\n","date":"2021-05-22 06:05:39","endLine":127,"groupId":"102602","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"before","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6a/024966d9f239075187155c9ef9aa2dd6af26bb.src","preCode":"    public void before() {\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        inputTopicName = \"input-topic-\" + safeTestName;\n        outputTopicName = \"output-topic-\" + safeTestName;\n        stateStoreName = \"lagfetch-test-store\" + safeTestName;\n\n        streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, \"app-\" + safeTestName);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 100L);\n\n        consumerConfiguration = new Properties();\n        consumerConfiguration.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerConfiguration.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerConfiguration.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerConfiguration.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        consumerConfiguration.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, LongDeserializer.class.getName());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/LagFetchIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"N"}],"commitId":"a75b5c635b3551d23da3fa66268b27c4801aef6e","commitMessage":"@@@KAFKA-12874; Increase default consumer session timeout to 45s (#10803)\n\nThis patch increases the default consumer session timeout to 45s as documented in KIP-735: https://cwiki.apache.org/confluence/display/KAFKA/KIP-735%3A+Increase+default+consumer+session+timeout.\n\nReviewers: Luke Chen <showuon@gmail.com>.  David Arthur <mumrah@gmail.com>.  David Jacot <djacot@confluent.io>","date":"2021-06-10 06:09:31","modifiedFileCount":"7","status":"M","submitter":"Jason Gustafson"}]
