[{"authorTime":"2019-09-06 14:07:42","codes":[{"authorDate":"2019-09-06 14:07:42","commitOrder":1,"curCode":"    public void testConstructor() {\n        Map<TopicPartition, CommittedOffset> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne),\n                            new CommittedOffset(\n                                offset,\n                                metadata,\n                                Optional.of((int) leaderEpoch)));\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo),\n                            new CommittedOffset(\n                                offset,\n                                metadata,\n                                Optional.of((int) leaderEpoch)));\n\n        TxnOffsetCommitRequest.Builder builder = new TxnOffsetCommitRequest.Builder(data);\n        Map<TopicPartition, Errors> errorsMap = new HashMap<>();\n        errorsMap.put(new TopicPartition(topicOne, partitionOne), Errors.NOT_COORDINATOR);\n        errorsMap.put(new TopicPartition(topicTwo, partitionTwo), Errors.NOT_COORDINATOR);\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            TxnOffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n            assertEquals(data.topics(), TxnOffsetCommitRequest.getTopics(request.offsets()));\n\n            TxnOffsetCommitResponse response =\n                request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(errorsMap, response.errors());\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","date":"2019-09-06 14:07:42","endLine":108,"groupId":"6536","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ff/1d1ab872b6cf9d1f60b3186f3ab964293c7c9f.src","preCode":"    public void testConstructor() {\n        Map<TopicPartition, CommittedOffset> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne),\n                            new CommittedOffset(\n                                offset,\n                                metadata,\n                                Optional.of((int) leaderEpoch)));\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo),\n                            new CommittedOffset(\n                                offset,\n                                metadata,\n                                Optional.of((int) leaderEpoch)));\n\n        TxnOffsetCommitRequest.Builder builder = new TxnOffsetCommitRequest.Builder(data);\n        Map<TopicPartition, Errors> errorsMap = new HashMap<>();\n        errorsMap.put(new TopicPartition(topicOne, partitionOne), Errors.NOT_COORDINATOR);\n        errorsMap.put(new TopicPartition(topicTwo, partitionTwo), Errors.NOT_COORDINATOR);\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            TxnOffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n            assertEquals(data.topics(), TxnOffsetCommitRequest.getTopics(request.offsets()));\n\n            TxnOffsetCommitResponse response =\n                request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(errorsMap, response.errors());\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/TxnOffsetCommitRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"},{"authorDate":"2019-09-06 14:07:42","commitOrder":1,"curCode":"    public void testConstructor() {\n        Map<TopicPartition, Long> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne), offset);\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo), offset);\n\n        OffsetCommitRequest.Builder builder = new OffsetCommitRequest.Builder(data);\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            OffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n\n            OffsetCommitResponse response = request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n\n            if (version >= 3) {\n                assertEquals(throttleTimeMs, response.throttleTimeMs());\n            } else {\n                assertEquals(DEFAULT_THROTTLE_TIME, response.throttleTimeMs());\n            }\n        }\n    }\n","date":"2019-09-06 14:07:42","endLine":107,"groupId":"4623","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c6/c5a7bea24c48ecd8666e431119aebaab0aefe5.src","preCode":"    public void testConstructor() {\n        Map<TopicPartition, Long> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne), offset);\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo), offset);\n\n        OffsetCommitRequest.Builder builder = new OffsetCommitRequest.Builder(data);\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            OffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n\n            OffsetCommitResponse response = request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n\n            if (version >= 3) {\n                assertEquals(throttleTimeMs, response.throttleTimeMs());\n            } else {\n                assertEquals(DEFAULT_THROTTLE_TIME, response.throttleTimeMs());\n            }\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/OffsetCommitRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"B"}],"commitId":"c0019e653891182d7a95464175c9b4ef63f8bae1","commitMessage":"@@@KAFKA-8590; Use automated TxnOffsetCommit type and add tests for OffsetCommit  (#6994)\n\nThis PR changes the TxnOffsetCommit protocol to auto-generated types.  and add more unit test coverage to the plain OffsetCommit protocol.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-09-06 14:07:42","modifiedFileCount":"11","status":"B","submitter":"Boyang Chen"},{"authorTime":"2019-11-19 09:32:23","codes":[{"authorDate":"2019-09-06 14:07:42","commitOrder":2,"curCode":"    public void testConstructor() {\n        Map<TopicPartition, CommittedOffset> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne),\n                            new CommittedOffset(\n                                offset,\n                                metadata,\n                                Optional.of((int) leaderEpoch)));\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo),\n                            new CommittedOffset(\n                                offset,\n                                metadata,\n                                Optional.of((int) leaderEpoch)));\n\n        TxnOffsetCommitRequest.Builder builder = new TxnOffsetCommitRequest.Builder(data);\n        Map<TopicPartition, Errors> errorsMap = new HashMap<>();\n        errorsMap.put(new TopicPartition(topicOne, partitionOne), Errors.NOT_COORDINATOR);\n        errorsMap.put(new TopicPartition(topicTwo, partitionTwo), Errors.NOT_COORDINATOR);\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            TxnOffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n            assertEquals(data.topics(), TxnOffsetCommitRequest.getTopics(request.offsets()));\n\n            TxnOffsetCommitResponse response =\n                request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(errorsMap, response.errors());\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","date":"2019-09-06 14:07:42","endLine":108,"groupId":"6536","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ff/1d1ab872b6cf9d1f60b3186f3ab964293c7c9f.src","preCode":"    public void testConstructor() {\n        Map<TopicPartition, CommittedOffset> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne),\n                            new CommittedOffset(\n                                offset,\n                                metadata,\n                                Optional.of((int) leaderEpoch)));\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo),\n                            new CommittedOffset(\n                                offset,\n                                metadata,\n                                Optional.of((int) leaderEpoch)));\n\n        TxnOffsetCommitRequest.Builder builder = new TxnOffsetCommitRequest.Builder(data);\n        Map<TopicPartition, Errors> errorsMap = new HashMap<>();\n        errorsMap.put(new TopicPartition(topicOne, partitionOne), Errors.NOT_COORDINATOR);\n        errorsMap.put(new TopicPartition(topicTwo, partitionTwo), Errors.NOT_COORDINATOR);\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            TxnOffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n            assertEquals(data.topics(), TxnOffsetCommitRequest.getTopics(request.offsets()));\n\n            TxnOffsetCommitResponse response =\n                request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(errorsMap, response.errors());\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/TxnOffsetCommitRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"N"},{"authorDate":"2019-11-19 09:32:23","commitOrder":2,"curCode":"    public void testConstructor() {\n        Map<TopicPartition, Long> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne), offset);\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo), offset);\n\n        OffsetCommitRequest.Builder builder = new OffsetCommitRequest.Builder(data);\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            OffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n\n            OffsetCommitResponse response = request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","date":"2019-11-19 09:32:23","endLine":101,"groupId":"4623","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/72/55b866cc6e386fe5bc5f47102f0396f47e4532.src","preCode":"    public void testConstructor() {\n        Map<TopicPartition, Long> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne), offset);\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo), offset);\n\n        OffsetCommitRequest.Builder builder = new OffsetCommitRequest.Builder(data);\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            OffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n\n            OffsetCommitResponse response = request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n\n            if (version >= 3) {\n                assertEquals(throttleTimeMs, response.throttleTimeMs());\n            } else {\n                assertEquals(DEFAULT_THROTTLE_TIME, response.throttleTimeMs());\n            }\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/OffsetCommitRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"32bf0774e9727e8f92ce168bc568f62d20968386","commitMessage":"@@@MINOR: Remove explicit version checks in getErrorResponse methods (#7708)\n\nThis patch removes the explicit version check pattern we used in `getErrorResponse`.  which is a pain to maintain (as seen by KAFKA-9200). We already check that requests have a valid version range in the `AbstractRequest` constructor.\n\nReviewers: Andrew Choi <andrewchoi5@users.noreply.github.com>.  Ismael Juma <ismael@juma.me.uk>","date":"2019-11-19 09:32:23","modifiedFileCount":"16","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2019-11-19 09:32:23","codes":[{"authorDate":"2020-01-23 05:48:36","commitOrder":3,"curCode":"    public void testConstructor() {\n        Map<TopicPartition, CommittedOffset> offsets = new HashMap<>();\n        offsets.put(new TopicPartition(topicOne, partitionOne),\n                            new CommittedOffset(\n                                offset,\n                                metadata,\n                                Optional.of((int) leaderEpoch)));\n        offsets.put(new TopicPartition(topicTwo, partitionTwo),\n                            new CommittedOffset(\n                                offset,\n                                metadata,\n                                Optional.of((int) leaderEpoch)));\n\n        TxnOffsetCommitRequest.Builder builder = new TxnOffsetCommitRequest.Builder(\n            transactionalId,\n            groupId,\n            producerId,\n            producerEpoch,\n            offsets);\n\n        TxnOffsetCommitRequest.Builder builderWithGroupMetadata = new TxnOffsetCommitRequest.Builder(\n            transactionalId,\n            groupId,\n            producerId,\n            producerEpoch,\n            offsets,\n            memberId,\n            generationId,\n            Optional.of(groupInstanceId));\n\n        Map<TopicPartition, Errors> errorsMap = new HashMap<>();\n        errorsMap.put(new TopicPartition(topicOne, partitionOne), Errors.NOT_COORDINATOR);\n        errorsMap.put(new TopicPartition(topicTwo, partitionTwo), Errors.NOT_COORDINATOR);\n\n        List<TxnOffsetCommitRequestTopic> expectedTopics = Arrays.asList(\n            new TxnOffsetCommitRequestTopic()\n                .setName(topicOne)\n                .setPartitions(Collections.singletonList(\n                    new TxnOffsetCommitRequestPartition()\n                        .setPartitionIndex(partitionOne)\n                        .setCommittedOffset(offset)\n                        .setCommittedLeaderEpoch(leaderEpoch)\n                        .setCommittedMetadata(metadata)\n                )),\n            new TxnOffsetCommitRequestTopic()\n                .setName(topicTwo)\n                .setPartitions(Collections.singletonList(\n                    new TxnOffsetCommitRequestPartition()\n                        .setPartitionIndex(partitionTwo)\n                        .setCommittedOffset(offset)\n                        .setCommittedLeaderEpoch(leaderEpoch)\n                        .setCommittedMetadata(metadata)\n                ))\n        );\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            final TxnOffsetCommitRequest request;\n            if (version < 3) {\n                request = builder.build(version);\n            } else {\n                request = builderWithGroupMetadata.build(version);\n            }\n            assertEquals(offsets, request.offsets());\n            assertEquals(expectedTopics, TxnOffsetCommitRequest.getTopics(request.offsets()));\n\n            TxnOffsetCommitResponse response =\n                request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(errorsMap, response.errors());\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","date":"2020-01-23 05:48:36","endLine":124,"groupId":"6536","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/d1df1b2f23d0d72308ba592216ebd374027e1f.src","preCode":"    public void testConstructor() {\n        Map<TopicPartition, CommittedOffset> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne),\n                            new CommittedOffset(\n                                offset,\n                                metadata,\n                                Optional.of((int) leaderEpoch)));\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo),\n                            new CommittedOffset(\n                                offset,\n                                metadata,\n                                Optional.of((int) leaderEpoch)));\n\n        TxnOffsetCommitRequest.Builder builder = new TxnOffsetCommitRequest.Builder(data);\n        Map<TopicPartition, Errors> errorsMap = new HashMap<>();\n        errorsMap.put(new TopicPartition(topicOne, partitionOne), Errors.NOT_COORDINATOR);\n        errorsMap.put(new TopicPartition(topicTwo, partitionTwo), Errors.NOT_COORDINATOR);\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            TxnOffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n            assertEquals(data.topics(), TxnOffsetCommitRequest.getTopics(request.offsets()));\n\n            TxnOffsetCommitResponse response =\n                request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(errorsMap, response.errors());\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/TxnOffsetCommitRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2019-11-19 09:32:23","commitOrder":3,"curCode":"    public void testConstructor() {\n        Map<TopicPartition, Long> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne), offset);\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo), offset);\n\n        OffsetCommitRequest.Builder builder = new OffsetCommitRequest.Builder(data);\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            OffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n\n            OffsetCommitResponse response = request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","date":"2019-11-19 09:32:23","endLine":101,"groupId":"4623","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/72/55b866cc6e386fe5bc5f47102f0396f47e4532.src","preCode":"    public void testConstructor() {\n        Map<TopicPartition, Long> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne), offset);\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo), offset);\n\n        OffsetCommitRequest.Builder builder = new OffsetCommitRequest.Builder(data);\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            OffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n\n            OffsetCommitResponse response = request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/OffsetCommitRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"}],"commitId":"de90175fc24357e20306c5a4de4f0f8ec8675ad2","commitMessage":"@@@KAFKA-9418; Add new sendOffsetsToTransaction API to KafkaProducer (#7952)\n\nThis patch adds a new API to the producer to implement transactional offset commit fencing through the group coordinator as proposed in KIP-447. This PR mainly changes on the Producer end for compatible paths to old `sendOffsetsToTxn(offsets.  groupId)` vs new `sendOffsetsToTxn(offsets.  groupMetadata)`.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2020-01-23 05:48:36","modifiedFileCount":"15","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-11-19 09:32:23","codes":[{"authorDate":"2020-04-03 12:48:37","commitOrder":4,"curCode":"    public void testConstructor() {\n\n        Map<TopicPartition, Errors> errorsMap = new HashMap<>();\n        errorsMap.put(new TopicPartition(topicOne, partitionOne), Errors.NOT_COORDINATOR);\n        errorsMap.put(new TopicPartition(topicTwo, partitionTwo), Errors.NOT_COORDINATOR);\n\n        List<TxnOffsetCommitRequestTopic> expectedTopics = Arrays.asList(\n            new TxnOffsetCommitRequestTopic()\n                .setName(topicOne)\n                .setPartitions(Collections.singletonList(\n                    new TxnOffsetCommitRequestPartition()\n                        .setPartitionIndex(partitionOne)\n                        .setCommittedOffset(offset)\n                        .setCommittedLeaderEpoch(leaderEpoch)\n                        .setCommittedMetadata(metadata)\n                )),\n            new TxnOffsetCommitRequestTopic()\n                .setName(topicTwo)\n                .setPartitions(Collections.singletonList(\n                    new TxnOffsetCommitRequestPartition()\n                        .setPartitionIndex(partitionTwo)\n                        .setCommittedOffset(offset)\n                        .setCommittedLeaderEpoch(leaderEpoch)\n                        .setCommittedMetadata(metadata)\n                ))\n        );\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            final TxnOffsetCommitRequest request;\n            if (version < 3) {\n                request = builder.build(version);\n            } else {\n                request = builderWithGroupMetadata.build(version);\n            }\n            assertEquals(offsets, request.offsets());\n            assertEquals(expectedTopics, TxnOffsetCommitRequest.getTopics(request.offsets()));\n\n            TxnOffsetCommitResponse response =\n                request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(errorsMap, response.errors());\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","date":"2020-04-03 12:48:37","endLine":136,"groupId":"6536","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/4753e4351565067ff04ecc3f96b4cede639d33.src","preCode":"    public void testConstructor() {\n        Map<TopicPartition, CommittedOffset> offsets = new HashMap<>();\n        offsets.put(new TopicPartition(topicOne, partitionOne),\n                            new CommittedOffset(\n                                offset,\n                                metadata,\n                                Optional.of((int) leaderEpoch)));\n        offsets.put(new TopicPartition(topicTwo, partitionTwo),\n                            new CommittedOffset(\n                                offset,\n                                metadata,\n                                Optional.of((int) leaderEpoch)));\n\n        TxnOffsetCommitRequest.Builder builder = new TxnOffsetCommitRequest.Builder(\n            transactionalId,\n            groupId,\n            producerId,\n            producerEpoch,\n            offsets);\n\n        TxnOffsetCommitRequest.Builder builderWithGroupMetadata = new TxnOffsetCommitRequest.Builder(\n            transactionalId,\n            groupId,\n            producerId,\n            producerEpoch,\n            offsets,\n            memberId,\n            generationId,\n            Optional.of(groupInstanceId));\n\n        Map<TopicPartition, Errors> errorsMap = new HashMap<>();\n        errorsMap.put(new TopicPartition(topicOne, partitionOne), Errors.NOT_COORDINATOR);\n        errorsMap.put(new TopicPartition(topicTwo, partitionTwo), Errors.NOT_COORDINATOR);\n\n        List<TxnOffsetCommitRequestTopic> expectedTopics = Arrays.asList(\n            new TxnOffsetCommitRequestTopic()\n                .setName(topicOne)\n                .setPartitions(Collections.singletonList(\n                    new TxnOffsetCommitRequestPartition()\n                        .setPartitionIndex(partitionOne)\n                        .setCommittedOffset(offset)\n                        .setCommittedLeaderEpoch(leaderEpoch)\n                        .setCommittedMetadata(metadata)\n                )),\n            new TxnOffsetCommitRequestTopic()\n                .setName(topicTwo)\n                .setPartitions(Collections.singletonList(\n                    new TxnOffsetCommitRequestPartition()\n                        .setPartitionIndex(partitionTwo)\n                        .setCommittedOffset(offset)\n                        .setCommittedLeaderEpoch(leaderEpoch)\n                        .setCommittedMetadata(metadata)\n                ))\n        );\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            final TxnOffsetCommitRequest request;\n            if (version < 3) {\n                request = builder.build(version);\n            } else {\n                request = builderWithGroupMetadata.build(version);\n            }\n            assertEquals(offsets, request.offsets());\n            assertEquals(expectedTopics, TxnOffsetCommitRequest.getTopics(request.offsets()));\n\n            TxnOffsetCommitResponse response =\n                request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(errorsMap, response.errors());\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/TxnOffsetCommitRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2019-11-19 09:32:23","commitOrder":4,"curCode":"    public void testConstructor() {\n        Map<TopicPartition, Long> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne), offset);\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo), offset);\n\n        OffsetCommitRequest.Builder builder = new OffsetCommitRequest.Builder(data);\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            OffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n\n            OffsetCommitResponse response = request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","date":"2019-11-19 09:32:23","endLine":101,"groupId":"4623","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/72/55b866cc6e386fe5bc5f47102f0396f47e4532.src","preCode":"    public void testConstructor() {\n        Map<TopicPartition, Long> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne), offset);\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo), offset);\n\n        OffsetCommitRequest.Builder builder = new OffsetCommitRequest.Builder(data);\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            OffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n\n            OffsetCommitResponse response = request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/OffsetCommitRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"N"}],"commitId":"7f640f13b4d486477035c3edb28466734f053beb","commitMessage":"@@@KAFKA-9776: Downgrade TxnCommit API v3 when broker doesn't support (#8375)\n\nRevert the decision for the sendOffsetsToTransaction(groupMetadata) API to fail with old version of brokers for the sake of making the application easier to adapt between versions. This PR silently downgrade the TxnOffsetCommit API when the build version is small than 3.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-04-03 12:48:37","modifiedFileCount":"12","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-03-05 00:22:57","codes":[{"authorDate":"2021-03-05 00:22:57","commitOrder":5,"curCode":"    public void testConstructor() {\n\n        Map<TopicPartition, Errors> errorsMap = new HashMap<>();\n        errorsMap.put(new TopicPartition(topicOne, partitionOne), Errors.NOT_COORDINATOR);\n        errorsMap.put(new TopicPartition(topicTwo, partitionTwo), Errors.NOT_COORDINATOR);\n\n        List<TxnOffsetCommitRequestTopic> expectedTopics = Arrays.asList(\n            new TxnOffsetCommitRequestTopic()\n                .setName(topicOne)\n                .setPartitions(Collections.singletonList(\n                    new TxnOffsetCommitRequestPartition()\n                        .setPartitionIndex(partitionOne)\n                        .setCommittedOffset(offset)\n                        .setCommittedLeaderEpoch(leaderEpoch)\n                        .setCommittedMetadata(metadata)\n                )),\n            new TxnOffsetCommitRequestTopic()\n                .setName(topicTwo)\n                .setPartitions(Collections.singletonList(\n                    new TxnOffsetCommitRequestPartition()\n                        .setPartitionIndex(partitionTwo)\n                        .setCommittedOffset(offset)\n                        .setCommittedLeaderEpoch(leaderEpoch)\n                        .setCommittedMetadata(metadata)\n                ))\n        );\n\n        for (short version : ApiKeys.TXN_OFFSET_COMMIT.allVersions()) {\n            final TxnOffsetCommitRequest request;\n            if (version < 3) {\n                request = builder.build(version);\n            } else {\n                request = builderWithGroupMetadata.build(version);\n            }\n            assertEquals(offsets, request.offsets());\n            assertEquals(expectedTopics, TxnOffsetCommitRequest.getTopics(request.offsets()));\n\n            TxnOffsetCommitResponse response =\n                request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(errorsMap, response.errors());\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","date":"2021-03-05 00:22:57","endLine":136,"groupId":"103187","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/03/7066e9a036d7f48a7522c0ca58fdda22525f86.src","preCode":"    public void testConstructor() {\n\n        Map<TopicPartition, Errors> errorsMap = new HashMap<>();\n        errorsMap.put(new TopicPartition(topicOne, partitionOne), Errors.NOT_COORDINATOR);\n        errorsMap.put(new TopicPartition(topicTwo, partitionTwo), Errors.NOT_COORDINATOR);\n\n        List<TxnOffsetCommitRequestTopic> expectedTopics = Arrays.asList(\n            new TxnOffsetCommitRequestTopic()\n                .setName(topicOne)\n                .setPartitions(Collections.singletonList(\n                    new TxnOffsetCommitRequestPartition()\n                        .setPartitionIndex(partitionOne)\n                        .setCommittedOffset(offset)\n                        .setCommittedLeaderEpoch(leaderEpoch)\n                        .setCommittedMetadata(metadata)\n                )),\n            new TxnOffsetCommitRequestTopic()\n                .setName(topicTwo)\n                .setPartitions(Collections.singletonList(\n                    new TxnOffsetCommitRequestPartition()\n                        .setPartitionIndex(partitionTwo)\n                        .setCommittedOffset(offset)\n                        .setCommittedLeaderEpoch(leaderEpoch)\n                        .setCommittedMetadata(metadata)\n                ))\n        );\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            final TxnOffsetCommitRequest request;\n            if (version < 3) {\n                request = builder.build(version);\n            } else {\n                request = builderWithGroupMetadata.build(version);\n            }\n            assertEquals(offsets, request.offsets());\n            assertEquals(expectedTopics, TxnOffsetCommitRequest.getTopics(request.offsets()));\n\n            TxnOffsetCommitResponse response =\n                request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(errorsMap, response.errors());\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/TxnOffsetCommitRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2021-03-05 00:22:57","commitOrder":5,"curCode":"    public void testConstructor() {\n        Map<TopicPartition, Long> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne), offset);\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo), offset);\n\n        OffsetCommitRequest.Builder builder = new OffsetCommitRequest.Builder(data);\n\n        for (short version : ApiKeys.TXN_OFFSET_COMMIT.allVersions()) {\n            OffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n\n            OffsetCommitResponse response = request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","date":"2021-03-05 00:22:57","endLine":103,"groupId":"103187","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testConstructor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/08/ae7a3fbd5729bb1d026f61c15439cd6990add1.src","preCode":"    public void testConstructor() {\n        Map<TopicPartition, Long> expectedOffsets = new HashMap<>();\n        expectedOffsets.put(new TopicPartition(topicOne, partitionOne), offset);\n        expectedOffsets.put(new TopicPartition(topicTwo, partitionTwo), offset);\n\n        OffsetCommitRequest.Builder builder = new OffsetCommitRequest.Builder(data);\n\n        for (short version = 0; version <= ApiKeys.TXN_OFFSET_COMMIT.latestVersion(); version++) {\n            OffsetCommitRequest request = builder.build(version);\n            assertEquals(expectedOffsets, request.offsets());\n\n            OffsetCommitResponse response = request.getErrorResponse(throttleTimeMs, Errors.NOT_COORDINATOR.exception());\n\n            assertEquals(Collections.singletonMap(Errors.NOT_COORDINATOR, 2), response.errorCounts());\n            assertEquals(throttleTimeMs, response.throttleTimeMs());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/OffsetCommitRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"be1476869fc93553b3099d387d26bfd0092a9d65","commitMessage":"@@@MINOR: make sure all generated data tests cover all versions (#10078)\n\nReviewers: David Jacot <djacot@confluent.io>","date":"2021-03-05 00:22:57","modifiedFileCount":"27","status":"M","submitter":"Chia-Ping Tsai"}]
