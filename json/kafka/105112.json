[{"authorTime":"2019-09-04 04:48:19","codes":[{"authorDate":"2018-11-13 14:18:59","commitOrder":5,"curCode":"    public void testPutTaskConfigs() throws Exception {\n        expectConfigure();\n        expectStart(Collections.emptyList(), Collections.emptyMap());\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(0), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(0),\n                \"properties\", SAMPLE_CONFIGS.get(0));\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(1), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(1),\n                \"properties\", SAMPLE_CONFIGS.get(1));\n        expectReadToEnd(new LinkedHashMap<String, byte[]>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(0), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(2),\n                \"tasks\", 2); \r\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)));\n        EasyMock.expectLastCall();\n\n        \r\n        LinkedHashMap<String, byte[]> serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(0));\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(1));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(2));\n        expectReadToEnd(serializedConfigs);\n\n        expectStop();\n\n        PowerMock.replayAll();\n\n        configStorage.setupAndCreateKafkaBasedLog(TOPIC, DEFAULT_DISTRIBUTED_CONFIG);\n        configStorage.start();\n\n        \r\n        whiteboxAddConnector(CONNECTOR_IDS.get(0), SAMPLE_CONFIGS.get(0), Collections.emptyList());\n\n        \r\n        ClusterConfigState configState = configStorage.snapshot();\n        assertEquals(-1, configState.offset());\n        assertNull(configState.taskConfig(TASK_IDS.get(0)));\n        assertNull(configState.taskConfig(TASK_IDS.get(1)));\n\n        \r\n        \r\n        List<Map<String, String>> taskConfigs = Arrays.asList(SAMPLE_CONFIGS.get(0), SAMPLE_CONFIGS.get(1));\n        configStorage.putTaskConfigs(\"connector1\", taskConfigs);\n\n        \r\n        configState = configStorage.snapshot();\n        assertEquals(3, configState.offset());\n        String connectorName = CONNECTOR_IDS.get(0);\n        assertEquals(Arrays.asList(connectorName), new ArrayList<>(configState.connectors()));\n        assertEquals(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)), configState.tasks(connectorName));\n        assertEquals(SAMPLE_CONFIGS.get(0), configState.taskConfig(TASK_IDS.get(0)));\n        assertEquals(SAMPLE_CONFIGS.get(1), configState.taskConfig(TASK_IDS.get(1)));\n        assertEquals(Collections.EMPTY_SET, configState.inconsistentConnectors());\n\n        configStorage.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-11-13 14:18:59","endLine":303,"groupId":"12004","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPutTaskConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/68/c447a1aebdd5e4df845df34514de421bb2dbe4.src","preCode":"    public void testPutTaskConfigs() throws Exception {\n        expectConfigure();\n        expectStart(Collections.emptyList(), Collections.emptyMap());\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(0), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(0),\n                \"properties\", SAMPLE_CONFIGS.get(0));\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(1), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(1),\n                \"properties\", SAMPLE_CONFIGS.get(1));\n        expectReadToEnd(new LinkedHashMap<String, byte[]>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(0), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(2),\n                \"tasks\", 2); \r\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)));\n        EasyMock.expectLastCall();\n\n        \r\n        LinkedHashMap<String, byte[]> serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(0));\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(1));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(2));\n        expectReadToEnd(serializedConfigs);\n\n        expectStop();\n\n        PowerMock.replayAll();\n\n        configStorage.setupAndCreateKafkaBasedLog(TOPIC, DEFAULT_DISTRIBUTED_CONFIG);\n        configStorage.start();\n\n        \r\n        whiteboxAddConnector(CONNECTOR_IDS.get(0), SAMPLE_CONFIGS.get(0), Collections.emptyList());\n\n        \r\n        ClusterConfigState configState = configStorage.snapshot();\n        assertEquals(-1, configState.offset());\n        assertNull(configState.taskConfig(TASK_IDS.get(0)));\n        assertNull(configState.taskConfig(TASK_IDS.get(1)));\n\n        \r\n        \r\n        List<Map<String, String>> taskConfigs = Arrays.asList(SAMPLE_CONFIGS.get(0), SAMPLE_CONFIGS.get(1));\n        configStorage.putTaskConfigs(\"connector1\", taskConfigs);\n\n        \r\n        configState = configStorage.snapshot();\n        assertEquals(3, configState.offset());\n        String connectorName = CONNECTOR_IDS.get(0);\n        assertEquals(Arrays.asList(connectorName), new ArrayList<>(configState.connectors()));\n        assertEquals(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)), configState.tasks(connectorName));\n        assertEquals(SAMPLE_CONFIGS.get(0), configState.taskConfig(TASK_IDS.get(0)));\n        assertEquals(SAMPLE_CONFIGS.get(1), configState.taskConfig(TASK_IDS.get(1)));\n        assertEquals(Collections.EMPTY_SET, configState.inconsistentConnectors());\n\n        configStorage.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaConfigBackingStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"NB"},{"authorDate":"2019-09-04 04:48:19","commitOrder":5,"curCode":"    public void testPutTaskConfigsStartsOnlyReconfiguredTasks() throws Exception {\n        expectConfigure();\n        expectStart(Collections.emptyList(), Collections.emptyMap());\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(0), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(0),\n                \"properties\", SAMPLE_CONFIGS.get(0));\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(1), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(1),\n                \"properties\", SAMPLE_CONFIGS.get(1));\n        expectReadToEnd(new LinkedHashMap<String, byte[]>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(0), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(2),\n                \"tasks\", 2); \r\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)));\n        EasyMock.expectLastCall();\n\n        \r\n        LinkedHashMap<String, byte[]> serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(0));\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(1));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(2));\n        expectReadToEnd(serializedConfigs);\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(2), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(3),\n                \"properties\", SAMPLE_CONFIGS.get(2));\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(1), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(4),\n                \"tasks\", 1); \r\n\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(2)));\n        EasyMock.expectLastCall();\n\n        \r\n        serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(2), CONFIGS_SERIALIZED.get(3));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(4));\n        expectReadToEnd(serializedConfigs);\n\n        expectStop();\n\n        PowerMock.replayAll();\n\n        configStorage.setupAndCreateKafkaBasedLog(TOPIC, DEFAULT_DISTRIBUTED_CONFIG);\n        configStorage.start();\n\n        \r\n        whiteboxAddConnector(CONNECTOR_IDS.get(0), SAMPLE_CONFIGS.get(0), Collections.emptyList());\n        whiteboxAddConnector(CONNECTOR_IDS.get(1), SAMPLE_CONFIGS.get(1), Collections.emptyList());\n\n        \r\n        ClusterConfigState configState = configStorage.snapshot();\n        assertEquals(-1, configState.offset());\n        assertNull(configState.taskConfig(TASK_IDS.get(0)));\n        assertNull(configState.taskConfig(TASK_IDS.get(1)));\n\n        \r\n        \r\n        List<Map<String, String>> taskConfigs = Arrays.asList(SAMPLE_CONFIGS.get(0), SAMPLE_CONFIGS.get(1));\n        configStorage.putTaskConfigs(\"connector1\", taskConfigs);\n        taskConfigs = Collections.singletonList(SAMPLE_CONFIGS.get(2));\n        configStorage.putTaskConfigs(\"connector2\", taskConfigs);\n\n        \r\n        configState = configStorage.snapshot();\n        assertEquals(5, configState.offset());\n        String connectorName1 = CONNECTOR_IDS.get(0);\n        String connectorName2 = CONNECTOR_IDS.get(1);\n        assertEquals(Arrays.asList(connectorName1, connectorName2), new ArrayList<>(configState.connectors()));\n        assertEquals(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)), configState.tasks(connectorName1));\n        assertEquals(Collections.singletonList(TASK_IDS.get(2)), configState.tasks(connectorName2));\n        assertEquals(SAMPLE_CONFIGS.get(0), configState.taskConfig(TASK_IDS.get(0)));\n        assertEquals(SAMPLE_CONFIGS.get(1), configState.taskConfig(TASK_IDS.get(1)));\n        assertEquals(SAMPLE_CONFIGS.get(2), configState.taskConfig(TASK_IDS.get(2)));\n        assertEquals(Collections.EMPTY_SET, configState.inconsistentConnectors());\n\n        configStorage.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-09-04 04:48:19","endLine":393,"groupId":"8024","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPutTaskConfigsStartsOnlyReconfiguredTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/358e06709581ada73bec5f7fe88e7a648b108a.src","preCode":"    public void testPutTaskConfigsStartsOnlyReconfiguredTasks() throws Exception {\n        expectConfigure();\n        expectStart(Collections.emptyList(), Collections.emptyMap());\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(0), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(0),\n                \"properties\", SAMPLE_CONFIGS.get(0));\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(1), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(1),\n                \"properties\", SAMPLE_CONFIGS.get(1));\n        expectReadToEnd(new LinkedHashMap<String, byte[]>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(0), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(2),\n                \"tasks\", 2); \r\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)));\n        EasyMock.expectLastCall();\n\n        \r\n        LinkedHashMap<String, byte[]> serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(0));\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(1));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(2));\n        expectReadToEnd(serializedConfigs);\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(2), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(3),\n                \"properties\", SAMPLE_CONFIGS.get(2));\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(1), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(4),\n                \"tasks\", 1); \r\n\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(2)));\n        EasyMock.expectLastCall();\n\n        \r\n        serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(2), CONFIGS_SERIALIZED.get(3));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(4));\n        expectReadToEnd(serializedConfigs);\n\n        expectStop();\n\n        PowerMock.replayAll();\n\n        configStorage.setupAndCreateKafkaBasedLog(TOPIC, DEFAULT_DISTRIBUTED_CONFIG);\n        configStorage.start();\n\n        \r\n        whiteboxAddConnector(CONNECTOR_IDS.get(0), SAMPLE_CONFIGS.get(0), Collections.emptyList());\n        whiteboxAddConnector(CONNECTOR_IDS.get(1), SAMPLE_CONFIGS.get(1), Collections.emptyList());\n\n        \r\n        ClusterConfigState configState = configStorage.snapshot();\n        assertEquals(-1, configState.offset());\n        assertNull(configState.taskConfig(TASK_IDS.get(0)));\n        assertNull(configState.taskConfig(TASK_IDS.get(1)));\n\n        \r\n        \r\n        List<Map<String, String>> taskConfigs = Arrays.asList(SAMPLE_CONFIGS.get(0), SAMPLE_CONFIGS.get(1));\n        configStorage.putTaskConfigs(\"connector1\", taskConfigs);\n        taskConfigs = Collections.singletonList(SAMPLE_CONFIGS.get(2));\n        configStorage.putTaskConfigs(\"connector2\", taskConfigs);\n\n        \r\n        configState = configStorage.snapshot();\n        assertEquals(5, configState.offset());\n        String connectorName1 = CONNECTOR_IDS.get(0);\n        String connectorName2 = CONNECTOR_IDS.get(1);\n        assertEquals(Arrays.asList(connectorName1, connectorName2), new ArrayList<>(configState.connectors()));\n        assertEquals(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)), configState.tasks(connectorName1));\n        assertEquals(Collections.singletonList(TASK_IDS.get(2)), configState.tasks(connectorName2));\n        assertEquals(SAMPLE_CONFIGS.get(0), configState.taskConfig(TASK_IDS.get(0)));\n        assertEquals(SAMPLE_CONFIGS.get(1), configState.taskConfig(TASK_IDS.get(1)));\n        assertEquals(SAMPLE_CONFIGS.get(2), configState.taskConfig(TASK_IDS.get(2)));\n        assertEquals(Collections.EMPTY_SET, configState.inconsistentConnectors());\n\n        configStorage.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaConfigBackingStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":306,"status":"B"}],"commitId":"74fc3323a5815fad80318e96a88dc2164c700809","commitMessage":"@@@MINOR: Add unit test for KAFKA-8676 to guard against unrequired task restarts (#7287)\n\nAdded unit test for recent fix of `KafkaConfigBackingStore`.\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\nReviewer: Randall Hauch <rhauch@gmail.com>","date":"2019-09-04 04:48:19","modifiedFileCount":"1","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2020-06-08 03:42:00","codes":[{"authorDate":"2020-06-08 03:42:00","commitOrder":6,"curCode":"    public void testPutTaskConfigs() throws Exception {\n        expectConfigure();\n        expectStart(Collections.emptyList(), Collections.emptyMap());\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(0), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(0),\n                \"properties\", SAMPLE_CONFIGS.get(0));\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(1), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(1),\n                \"properties\", SAMPLE_CONFIGS.get(1));\n        expectReadToEnd(new LinkedHashMap<String, byte[]>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(0), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(2),\n                \"tasks\", 2); \r\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)));\n        EasyMock.expectLastCall();\n\n        \r\n        LinkedHashMap<String, byte[]> serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(0));\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(1));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(2));\n        expectReadToEnd(serializedConfigs);\n\n        expectPartitionCount(1);\n        expectStop();\n\n        PowerMock.replayAll();\n\n        configStorage.setupAndCreateKafkaBasedLog(TOPIC, DEFAULT_DISTRIBUTED_CONFIG);\n        configStorage.start();\n\n        \r\n        whiteboxAddConnector(CONNECTOR_IDS.get(0), SAMPLE_CONFIGS.get(0), Collections.emptyList());\n\n        \r\n        ClusterConfigState configState = configStorage.snapshot();\n        assertEquals(-1, configState.offset());\n        assertNull(configState.taskConfig(TASK_IDS.get(0)));\n        assertNull(configState.taskConfig(TASK_IDS.get(1)));\n\n        \r\n        \r\n        List<Map<String, String>> taskConfigs = Arrays.asList(SAMPLE_CONFIGS.get(0), SAMPLE_CONFIGS.get(1));\n        configStorage.putTaskConfigs(\"connector1\", taskConfigs);\n\n        \r\n        configState = configStorage.snapshot();\n        assertEquals(3, configState.offset());\n        String connectorName = CONNECTOR_IDS.get(0);\n        assertEquals(Arrays.asList(connectorName), new ArrayList<>(configState.connectors()));\n        assertEquals(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)), configState.tasks(connectorName));\n        assertEquals(SAMPLE_CONFIGS.get(0), configState.taskConfig(TASK_IDS.get(0)));\n        assertEquals(SAMPLE_CONFIGS.get(1), configState.taskConfig(TASK_IDS.get(1)));\n        assertEquals(Collections.EMPTY_SET, configState.inconsistentConnectors());\n\n        configStorage.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-08 03:42:00","endLine":318,"groupId":"12004","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPutTaskConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a4/6f6fefcfe7382f99bd134a9766c152ff610998.src","preCode":"    public void testPutTaskConfigs() throws Exception {\n        expectConfigure();\n        expectStart(Collections.emptyList(), Collections.emptyMap());\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(0), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(0),\n                \"properties\", SAMPLE_CONFIGS.get(0));\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(1), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(1),\n                \"properties\", SAMPLE_CONFIGS.get(1));\n        expectReadToEnd(new LinkedHashMap<String, byte[]>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(0), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(2),\n                \"tasks\", 2); \r\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)));\n        EasyMock.expectLastCall();\n\n        \r\n        LinkedHashMap<String, byte[]> serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(0));\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(1));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(2));\n        expectReadToEnd(serializedConfigs);\n\n        expectStop();\n\n        PowerMock.replayAll();\n\n        configStorage.setupAndCreateKafkaBasedLog(TOPIC, DEFAULT_DISTRIBUTED_CONFIG);\n        configStorage.start();\n\n        \r\n        whiteboxAddConnector(CONNECTOR_IDS.get(0), SAMPLE_CONFIGS.get(0), Collections.emptyList());\n\n        \r\n        ClusterConfigState configState = configStorage.snapshot();\n        assertEquals(-1, configState.offset());\n        assertNull(configState.taskConfig(TASK_IDS.get(0)));\n        assertNull(configState.taskConfig(TASK_IDS.get(1)));\n\n        \r\n        \r\n        List<Map<String, String>> taskConfigs = Arrays.asList(SAMPLE_CONFIGS.get(0), SAMPLE_CONFIGS.get(1));\n        configStorage.putTaskConfigs(\"connector1\", taskConfigs);\n\n        \r\n        configState = configStorage.snapshot();\n        assertEquals(3, configState.offset());\n        String connectorName = CONNECTOR_IDS.get(0);\n        assertEquals(Arrays.asList(connectorName), new ArrayList<>(configState.connectors()));\n        assertEquals(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)), configState.tasks(connectorName));\n        assertEquals(SAMPLE_CONFIGS.get(0), configState.taskConfig(TASK_IDS.get(0)));\n        assertEquals(SAMPLE_CONFIGS.get(1), configState.taskConfig(TASK_IDS.get(1)));\n        assertEquals(Collections.EMPTY_SET, configState.inconsistentConnectors());\n\n        configStorage.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaConfigBackingStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"},{"authorDate":"2020-06-08 03:42:00","commitOrder":6,"curCode":"    public void testPutTaskConfigsStartsOnlyReconfiguredTasks() throws Exception {\n        expectConfigure();\n        expectStart(Collections.emptyList(), Collections.emptyMap());\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(0), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(0),\n                \"properties\", SAMPLE_CONFIGS.get(0));\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(1), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(1),\n                \"properties\", SAMPLE_CONFIGS.get(1));\n        expectReadToEnd(new LinkedHashMap<String, byte[]>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(0), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(2),\n                \"tasks\", 2); \r\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)));\n        EasyMock.expectLastCall();\n\n        \r\n        LinkedHashMap<String, byte[]> serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(0));\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(1));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(2));\n        expectReadToEnd(serializedConfigs);\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(2), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(3),\n                \"properties\", SAMPLE_CONFIGS.get(2));\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(1), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(4),\n                \"tasks\", 1); \r\n\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(2)));\n        EasyMock.expectLastCall();\n\n        \r\n        serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(2), CONFIGS_SERIALIZED.get(3));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(4));\n        expectReadToEnd(serializedConfigs);\n\n        expectPartitionCount(1);\n        expectStop();\n\n        PowerMock.replayAll();\n\n        configStorage.setupAndCreateKafkaBasedLog(TOPIC, DEFAULT_DISTRIBUTED_CONFIG);\n        configStorage.start();\n\n        \r\n        whiteboxAddConnector(CONNECTOR_IDS.get(0), SAMPLE_CONFIGS.get(0), Collections.emptyList());\n        whiteboxAddConnector(CONNECTOR_IDS.get(1), SAMPLE_CONFIGS.get(1), Collections.emptyList());\n\n        \r\n        ClusterConfigState configState = configStorage.snapshot();\n        assertEquals(-1, configState.offset());\n        assertNull(configState.taskConfig(TASK_IDS.get(0)));\n        assertNull(configState.taskConfig(TASK_IDS.get(1)));\n\n        \r\n        \r\n        List<Map<String, String>> taskConfigs = Arrays.asList(SAMPLE_CONFIGS.get(0), SAMPLE_CONFIGS.get(1));\n        configStorage.putTaskConfigs(\"connector1\", taskConfigs);\n        taskConfigs = Collections.singletonList(SAMPLE_CONFIGS.get(2));\n        configStorage.putTaskConfigs(\"connector2\", taskConfigs);\n\n        \r\n        configState = configStorage.snapshot();\n        assertEquals(5, configState.offset());\n        String connectorName1 = CONNECTOR_IDS.get(0);\n        String connectorName2 = CONNECTOR_IDS.get(1);\n        assertEquals(Arrays.asList(connectorName1, connectorName2), new ArrayList<>(configState.connectors()));\n        assertEquals(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)), configState.tasks(connectorName1));\n        assertEquals(Collections.singletonList(TASK_IDS.get(2)), configState.tasks(connectorName2));\n        assertEquals(SAMPLE_CONFIGS.get(0), configState.taskConfig(TASK_IDS.get(0)));\n        assertEquals(SAMPLE_CONFIGS.get(1), configState.taskConfig(TASK_IDS.get(1)));\n        assertEquals(SAMPLE_CONFIGS.get(2), configState.taskConfig(TASK_IDS.get(2)));\n        assertEquals(Collections.EMPTY_SET, configState.inconsistentConnectors());\n\n        configStorage.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-08 03:42:00","endLine":409,"groupId":"8024","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPutTaskConfigsStartsOnlyReconfiguredTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a4/6f6fefcfe7382f99bd134a9766c152ff610998.src","preCode":"    public void testPutTaskConfigsStartsOnlyReconfiguredTasks() throws Exception {\n        expectConfigure();\n        expectStart(Collections.emptyList(), Collections.emptyMap());\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(0), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(0),\n                \"properties\", SAMPLE_CONFIGS.get(0));\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(1), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(1),\n                \"properties\", SAMPLE_CONFIGS.get(1));\n        expectReadToEnd(new LinkedHashMap<String, byte[]>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(0), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(2),\n                \"tasks\", 2); \r\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)));\n        EasyMock.expectLastCall();\n\n        \r\n        LinkedHashMap<String, byte[]> serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(0));\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(1));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(2));\n        expectReadToEnd(serializedConfigs);\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(2), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(3),\n                \"properties\", SAMPLE_CONFIGS.get(2));\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(1), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(4),\n                \"tasks\", 1); \r\n\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(2)));\n        EasyMock.expectLastCall();\n\n        \r\n        serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(2), CONFIGS_SERIALIZED.get(3));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(4));\n        expectReadToEnd(serializedConfigs);\n\n        expectStop();\n\n        PowerMock.replayAll();\n\n        configStorage.setupAndCreateKafkaBasedLog(TOPIC, DEFAULT_DISTRIBUTED_CONFIG);\n        configStorage.start();\n\n        \r\n        whiteboxAddConnector(CONNECTOR_IDS.get(0), SAMPLE_CONFIGS.get(0), Collections.emptyList());\n        whiteboxAddConnector(CONNECTOR_IDS.get(1), SAMPLE_CONFIGS.get(1), Collections.emptyList());\n\n        \r\n        ClusterConfigState configState = configStorage.snapshot();\n        assertEquals(-1, configState.offset());\n        assertNull(configState.taskConfig(TASK_IDS.get(0)));\n        assertNull(configState.taskConfig(TASK_IDS.get(1)));\n\n        \r\n        \r\n        List<Map<String, String>> taskConfigs = Arrays.asList(SAMPLE_CONFIGS.get(0), SAMPLE_CONFIGS.get(1));\n        configStorage.putTaskConfigs(\"connector1\", taskConfigs);\n        taskConfigs = Collections.singletonList(SAMPLE_CONFIGS.get(2));\n        configStorage.putTaskConfigs(\"connector2\", taskConfigs);\n\n        \r\n        configState = configStorage.snapshot();\n        assertEquals(5, configState.offset());\n        String connectorName1 = CONNECTOR_IDS.get(0);\n        String connectorName2 = CONNECTOR_IDS.get(1);\n        assertEquals(Arrays.asList(connectorName1, connectorName2), new ArrayList<>(configState.connectors()));\n        assertEquals(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)), configState.tasks(connectorName1));\n        assertEquals(Collections.singletonList(TASK_IDS.get(2)), configState.tasks(connectorName2));\n        assertEquals(SAMPLE_CONFIGS.get(0), configState.taskConfig(TASK_IDS.get(0)));\n        assertEquals(SAMPLE_CONFIGS.get(1), configState.taskConfig(TASK_IDS.get(1)));\n        assertEquals(SAMPLE_CONFIGS.get(2), configState.taskConfig(TASK_IDS.get(2)));\n        assertEquals(Collections.EMPTY_SET, configState.inconsistentConnectors());\n\n        configStorage.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaConfigBackingStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"}],"commitId":"9a0b694a6686d0dc165d7dab54be0f77535582fa","commitMessage":"@@@KAFKA-9216: Enforce internal config topic settings for Connect workers during startup (#8270)\n\nCurrently.  Kafka Connect creates its config backing topic with a fire and forget approach.\nThis is fine unless someone has manually created that topic already with the wrong partition count.\n\nIn such a case Kafka Connect may run for some time. Especially if it's in standalone mode and once switched to distributed mode it will almost certainly fail.\n\nThis commits adds a check when the KafkaConfigBackingStore is starting.\nThis check will throw a ConfigException if there is more than one partition in the backing store.\n\nThis exception is then caught upstream and logged by either:\n- DistributedHerder#run\n- ConnectStandalone#main\n\nA unit tests was added in KafkaConfigBackingStoreTest to verify the behaviour.\n\nAuthor: Evelyn Bayes <evelyn@confluent.io>\nCo-authored-by: Randall Hauch <rhauch@gmail.com>\n\nReviewer: Konstantine Karantasis <konstantine@confluent.io>","date":"2020-06-08 03:42:00","modifiedFileCount":"3","status":"M","submitter":"Evelyn Bayes"},{"authorTime":"2021-02-05 09:08:56","codes":[{"authorDate":"2021-02-05 09:08:56","commitOrder":7,"curCode":"    public void testPutTaskConfigs() throws Exception {\n        expectConfigure();\n        expectStart(Collections.emptyList(), Collections.emptyMap());\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(0), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(0),\n                \"properties\", SAMPLE_CONFIGS.get(0));\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(1), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(1),\n                \"properties\", SAMPLE_CONFIGS.get(1));\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(0), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(2),\n                \"tasks\", 2); \r\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)));\n        EasyMock.expectLastCall();\n\n        \r\n        LinkedHashMap<String, byte[]> serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(0));\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(1));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(2));\n        expectReadToEnd(serializedConfigs);\n\n        expectPartitionCount(1);\n        expectStop();\n\n        PowerMock.replayAll();\n\n        configStorage.setupAndCreateKafkaBasedLog(TOPIC, DEFAULT_DISTRIBUTED_CONFIG);\n        configStorage.start();\n\n        \r\n        whiteboxAddConnector(CONNECTOR_IDS.get(0), SAMPLE_CONFIGS.get(0), Collections.emptyList());\n\n        \r\n        ClusterConfigState configState = configStorage.snapshot();\n        assertEquals(-1, configState.offset());\n        assertNull(configState.taskConfig(TASK_IDS.get(0)));\n        assertNull(configState.taskConfig(TASK_IDS.get(1)));\n\n        \r\n        \r\n        List<Map<String, String>> taskConfigs = Arrays.asList(SAMPLE_CONFIGS.get(0), SAMPLE_CONFIGS.get(1));\n        configStorage.putTaskConfigs(\"connector1\", taskConfigs);\n\n        \r\n        configState = configStorage.snapshot();\n        assertEquals(3, configState.offset());\n        String connectorName = CONNECTOR_IDS.get(0);\n        assertEquals(Arrays.asList(connectorName), new ArrayList<>(configState.connectors()));\n        assertEquals(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)), configState.tasks(connectorName));\n        assertEquals(SAMPLE_CONFIGS.get(0), configState.taskConfig(TASK_IDS.get(0)));\n        assertEquals(SAMPLE_CONFIGS.get(1), configState.taskConfig(TASK_IDS.get(1)));\n        assertEquals(Collections.EMPTY_SET, configState.inconsistentConnectors());\n\n        configStorage.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 09:08:56","endLine":316,"groupId":"105112","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPutTaskConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/a291e5a88560d36ab2b9941600bd96ef101dd7.src","preCode":"    public void testPutTaskConfigs() throws Exception {\n        expectConfigure();\n        expectStart(Collections.emptyList(), Collections.emptyMap());\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(0), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(0),\n                \"properties\", SAMPLE_CONFIGS.get(0));\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(1), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(1),\n                \"properties\", SAMPLE_CONFIGS.get(1));\n        expectReadToEnd(new LinkedHashMap<String, byte[]>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(0), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(2),\n                \"tasks\", 2); \r\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)));\n        EasyMock.expectLastCall();\n\n        \r\n        LinkedHashMap<String, byte[]> serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(0));\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(1));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(2));\n        expectReadToEnd(serializedConfigs);\n\n        expectPartitionCount(1);\n        expectStop();\n\n        PowerMock.replayAll();\n\n        configStorage.setupAndCreateKafkaBasedLog(TOPIC, DEFAULT_DISTRIBUTED_CONFIG);\n        configStorage.start();\n\n        \r\n        whiteboxAddConnector(CONNECTOR_IDS.get(0), SAMPLE_CONFIGS.get(0), Collections.emptyList());\n\n        \r\n        ClusterConfigState configState = configStorage.snapshot();\n        assertEquals(-1, configState.offset());\n        assertNull(configState.taskConfig(TASK_IDS.get(0)));\n        assertNull(configState.taskConfig(TASK_IDS.get(1)));\n\n        \r\n        \r\n        List<Map<String, String>> taskConfigs = Arrays.asList(SAMPLE_CONFIGS.get(0), SAMPLE_CONFIGS.get(1));\n        configStorage.putTaskConfigs(\"connector1\", taskConfigs);\n\n        \r\n        configState = configStorage.snapshot();\n        assertEquals(3, configState.offset());\n        String connectorName = CONNECTOR_IDS.get(0);\n        assertEquals(Arrays.asList(connectorName), new ArrayList<>(configState.connectors()));\n        assertEquals(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)), configState.tasks(connectorName));\n        assertEquals(SAMPLE_CONFIGS.get(0), configState.taskConfig(TASK_IDS.get(0)));\n        assertEquals(SAMPLE_CONFIGS.get(1), configState.taskConfig(TASK_IDS.get(1)));\n        assertEquals(Collections.EMPTY_SET, configState.inconsistentConnectors());\n\n        configStorage.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaConfigBackingStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":254,"status":"M"},{"authorDate":"2021-02-05 09:08:56","commitOrder":7,"curCode":"    public void testPutTaskConfigsStartsOnlyReconfiguredTasks() throws Exception {\n        expectConfigure();\n        expectStart(Collections.emptyList(), Collections.emptyMap());\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(0), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(0),\n                \"properties\", SAMPLE_CONFIGS.get(0));\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(1), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(1),\n                \"properties\", SAMPLE_CONFIGS.get(1));\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(0), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(2),\n                \"tasks\", 2); \r\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)));\n        EasyMock.expectLastCall();\n\n        \r\n        LinkedHashMap<String, byte[]> serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(0));\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(1));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(2));\n        expectReadToEnd(serializedConfigs);\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(2), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(3),\n                \"properties\", SAMPLE_CONFIGS.get(2));\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(1), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(4),\n                \"tasks\", 1); \r\n\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(2)));\n        EasyMock.expectLastCall();\n\n        \r\n        serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(2), CONFIGS_SERIALIZED.get(3));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(4));\n        expectReadToEnd(serializedConfigs);\n\n        expectPartitionCount(1);\n        expectStop();\n\n        PowerMock.replayAll();\n\n        configStorage.setupAndCreateKafkaBasedLog(TOPIC, DEFAULT_DISTRIBUTED_CONFIG);\n        configStorage.start();\n\n        \r\n        whiteboxAddConnector(CONNECTOR_IDS.get(0), SAMPLE_CONFIGS.get(0), Collections.emptyList());\n        whiteboxAddConnector(CONNECTOR_IDS.get(1), SAMPLE_CONFIGS.get(1), Collections.emptyList());\n\n        \r\n        ClusterConfigState configState = configStorage.snapshot();\n        assertEquals(-1, configState.offset());\n        assertNull(configState.taskConfig(TASK_IDS.get(0)));\n        assertNull(configState.taskConfig(TASK_IDS.get(1)));\n\n        \r\n        \r\n        List<Map<String, String>> taskConfigs = Arrays.asList(SAMPLE_CONFIGS.get(0), SAMPLE_CONFIGS.get(1));\n        configStorage.putTaskConfigs(\"connector1\", taskConfigs);\n        taskConfigs = Collections.singletonList(SAMPLE_CONFIGS.get(2));\n        configStorage.putTaskConfigs(\"connector2\", taskConfigs);\n\n        \r\n        configState = configStorage.snapshot();\n        assertEquals(5, configState.offset());\n        String connectorName1 = CONNECTOR_IDS.get(0);\n        String connectorName2 = CONNECTOR_IDS.get(1);\n        assertEquals(Arrays.asList(connectorName1, connectorName2), new ArrayList<>(configState.connectors()));\n        assertEquals(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)), configState.tasks(connectorName1));\n        assertEquals(Collections.singletonList(TASK_IDS.get(2)), configState.tasks(connectorName2));\n        assertEquals(SAMPLE_CONFIGS.get(0), configState.taskConfig(TASK_IDS.get(0)));\n        assertEquals(SAMPLE_CONFIGS.get(1), configState.taskConfig(TASK_IDS.get(1)));\n        assertEquals(SAMPLE_CONFIGS.get(2), configState.taskConfig(TASK_IDS.get(2)));\n        assertEquals(Collections.EMPTY_SET, configState.inconsistentConnectors());\n\n        configStorage.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 09:08:56","endLine":407,"groupId":"105112","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPutTaskConfigsStartsOnlyReconfiguredTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/a291e5a88560d36ab2b9941600bd96ef101dd7.src","preCode":"    public void testPutTaskConfigsStartsOnlyReconfiguredTasks() throws Exception {\n        expectConfigure();\n        expectStart(Collections.emptyList(), Collections.emptyMap());\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(0), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(0),\n                \"properties\", SAMPLE_CONFIGS.get(0));\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(1), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(1),\n                \"properties\", SAMPLE_CONFIGS.get(1));\n        expectReadToEnd(new LinkedHashMap<String, byte[]>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(0), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(2),\n                \"tasks\", 2); \r\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)));\n        EasyMock.expectLastCall();\n\n        \r\n        LinkedHashMap<String, byte[]> serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(0));\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(1));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(0), CONFIGS_SERIALIZED.get(2));\n        expectReadToEnd(serializedConfigs);\n\n        \r\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                TASK_CONFIG_KEYS.get(2), KafkaConfigBackingStore.TASK_CONFIGURATION_V0, CONFIGS_SERIALIZED.get(3),\n                \"properties\", SAMPLE_CONFIGS.get(2));\n        expectReadToEnd(new LinkedHashMap<>());\n        expectConvertWriteRead(\n                COMMIT_TASKS_CONFIG_KEYS.get(1), KafkaConfigBackingStore.CONNECTOR_TASKS_COMMIT_V0, CONFIGS_SERIALIZED.get(4),\n                \"tasks\", 1); \r\n\n        \r\n        configUpdateListener.onTaskConfigUpdate(Arrays.asList(TASK_IDS.get(2)));\n        EasyMock.expectLastCall();\n\n        \r\n        serializedConfigs = new LinkedHashMap<>();\n        serializedConfigs.put(TASK_CONFIG_KEYS.get(2), CONFIGS_SERIALIZED.get(3));\n        serializedConfigs.put(COMMIT_TASKS_CONFIG_KEYS.get(1), CONFIGS_SERIALIZED.get(4));\n        expectReadToEnd(serializedConfigs);\n\n        expectPartitionCount(1);\n        expectStop();\n\n        PowerMock.replayAll();\n\n        configStorage.setupAndCreateKafkaBasedLog(TOPIC, DEFAULT_DISTRIBUTED_CONFIG);\n        configStorage.start();\n\n        \r\n        whiteboxAddConnector(CONNECTOR_IDS.get(0), SAMPLE_CONFIGS.get(0), Collections.emptyList());\n        whiteboxAddConnector(CONNECTOR_IDS.get(1), SAMPLE_CONFIGS.get(1), Collections.emptyList());\n\n        \r\n        ClusterConfigState configState = configStorage.snapshot();\n        assertEquals(-1, configState.offset());\n        assertNull(configState.taskConfig(TASK_IDS.get(0)));\n        assertNull(configState.taskConfig(TASK_IDS.get(1)));\n\n        \r\n        \r\n        List<Map<String, String>> taskConfigs = Arrays.asList(SAMPLE_CONFIGS.get(0), SAMPLE_CONFIGS.get(1));\n        configStorage.putTaskConfigs(\"connector1\", taskConfigs);\n        taskConfigs = Collections.singletonList(SAMPLE_CONFIGS.get(2));\n        configStorage.putTaskConfigs(\"connector2\", taskConfigs);\n\n        \r\n        configState = configStorage.snapshot();\n        assertEquals(5, configState.offset());\n        String connectorName1 = CONNECTOR_IDS.get(0);\n        String connectorName2 = CONNECTOR_IDS.get(1);\n        assertEquals(Arrays.asList(connectorName1, connectorName2), new ArrayList<>(configState.connectors()));\n        assertEquals(Arrays.asList(TASK_IDS.get(0), TASK_IDS.get(1)), configState.tasks(connectorName1));\n        assertEquals(Collections.singletonList(TASK_IDS.get(2)), configState.tasks(connectorName2));\n        assertEquals(SAMPLE_CONFIGS.get(0), configState.taskConfig(TASK_IDS.get(0)));\n        assertEquals(SAMPLE_CONFIGS.get(1), configState.taskConfig(TASK_IDS.get(1)));\n        assertEquals(SAMPLE_CONFIGS.get(2), configState.taskConfig(TASK_IDS.get(2)));\n        assertEquals(Collections.EMPTY_SET, configState.inconsistentConnectors());\n\n        configStorage.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaConfigBackingStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"07843cfbf4e3e7a2d26d63904bbf0da0fcd07ca2","commitMessage":"@@@KAFKA-10834: Remove redundant type casts in Connect (#10053)\n\nCleanup up to remove redundant type casts in Connect and use the diamond operator when needed \n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 09:08:56","modifiedFileCount":"41","status":"M","submitter":"Lev Zemlyanov"}]
