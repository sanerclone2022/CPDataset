[{"authorTime":"2017-01-13 03:46:02","codes":[{"authorDate":"2017-01-13 03:46:02","commitOrder":1,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() throws Exception {\n        stateManager.initialize(context);\n        final TheStateRestoreCallback stateRestoreCallback = new TheStateRestoreCallback();\n        \r\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, false, stateRestoreCallback);\n\n        stateManager.flush(context);\n    }\n","date":"2017-01-13 03:46:02","endLine":250,"groupId":"17261","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2d/10c138e956fc2f7b1830e4c362ae03cf145bdd.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() throws Exception {\n        stateManager.initialize(context);\n        final TheStateRestoreCallback stateRestoreCallback = new TheStateRestoreCallback();\n        \r\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, false, stateRestoreCallback);\n\n        stateManager.flush(context);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"B"},{"authorDate":"2017-01-13 03:46:02","commitOrder":1,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws Exception {\n        stateManager.initialize(context);\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, false, stateRestoreCallback);\n\n        stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n    }\n","date":"2017-01-13 03:46:02","endLine":293,"groupId":"2467","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2d/10c138e956fc2f7b1830e4c362ae03cf145bdd.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws Exception {\n        stateManager.initialize(context);\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, false, stateRestoreCallback);\n\n        stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"B"}],"commitId":"8079c980ac5c9c00d7577fa05857b4de6864dbb5","commitMessage":"@@@KAFKA-4490: Add Global Table support to Kafka Streams\n\nAdd Global Tables to KafkaStreams. Global Tables are fully replicated once-per instance of KafkaStreams. A single thread is used to update them. They can be used to join with KStreams.  KTables.  and other GlobalKTables. When participating in a join a GlobalKTable is only ever used to perform a lookup.  i.e..  it will never cause data to be forwarded to downstream processor nodes.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Matthias J. Sax.  Eno Thereska.  Guozhang Wang\n\nCloses #2244 from dguy/global-tables\n","date":"2017-01-13 03:46:02","modifiedFileCount":"63","status":"B","submitter":"Damian Guy"},{"authorTime":"2017-01-13 03:46:02","codes":[{"authorDate":"2017-04-22 04:10:05","commitOrder":2,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() throws Exception {\n        stateManager.initialize(context);\n        final TheStateRestoreCallback stateRestoreCallback = new TheStateRestoreCallback();\n        \r\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, false, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","date":"2017-04-22 04:10:05","endLine":250,"groupId":"17261","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/062fc78e8939f89eee96e7b507469b75242a72.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() throws Exception {\n        stateManager.initialize(context);\n        final TheStateRestoreCallback stateRestoreCallback = new TheStateRestoreCallback();\n        \r\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, false, stateRestoreCallback);\n\n        stateManager.flush(context);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2017-01-13 03:46:02","commitOrder":2,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws Exception {\n        stateManager.initialize(context);\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, false, stateRestoreCallback);\n\n        stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n    }\n","date":"2017-01-13 03:46:02","endLine":293,"groupId":"2467","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2d/10c138e956fc2f7b1830e4c362ae03cf145bdd.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws Exception {\n        stateManager.initialize(context);\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, false, stateRestoreCallback);\n\n        stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":282,"status":"N"}],"commitId":"cba0094f5a9833194bf2a13965eda678bd4a05ea","commitMessage":"@@@MINOR: improve test cleanup for Streams\n\n - call close() on Metrics to join created threads\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Eno Thereska.  Damian Guy.  Guozhang Wang\n\nCloses #2788 from mjsax/minor-improve-test-metric-cleanup\n","date":"2017-04-22 04:10:05","modifiedFileCount":"34","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2017-09-11 16:42:10","commitOrder":3,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize(context);\n        final TheStateRestoreCallback stateRestoreCallback = new TheStateRestoreCallback();\n        \r\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, false, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","date":"2017-09-11 16:42:10","endLine":250,"groupId":"17261","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/30d605e227b5381ab420dc24803c4aaf343c92.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() throws Exception {\n        stateManager.initialize(context);\n        final TheStateRestoreCallback stateRestoreCallback = new TheStateRestoreCallback();\n        \r\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, false, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":3,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize(context);\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, false, stateRestoreCallback);\n\n        stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n    }\n","date":"2017-09-11 16:42:10","endLine":291,"groupId":"2467","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/30d605e227b5381ab420dc24803c4aaf343c92.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws Exception {\n        stateManager.initialize(context);\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, false, stateRestoreCallback);\n\n        stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"}],"commitId":"c5464edbb7a6821e0a91a3712b1fe2fd92a22d68","commitMessage":"@@@KAFKA-5531; throw concrete exceptions in streams tests\n\n1. Now instead of just generic `Exception` methods declare more concrete\nexceptions throwing or don't declare any throwing at all.  if not needed.\n2. `SimpleBenchmark.run()` throws `RuntimeException`\n3. `SimpleBenchmark.produce()` throws `IllegalArgumentException`\n4. Expect `ProcessorStateException` in\n`StandbyTaskTest.testUpdateNonPersistentStore()`\n\n/cc enothereska\n\nAuthor: Evgeny Veretennikov <evg.veretennikov@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>\n\nCloses #3485 from evis/5531-throw-concrete-exceptions\n","date":"2017-09-11 16:42:10","modifiedFileCount":"106","status":"M","submitter":"Evgeny Veretennikov"},{"authorTime":"2017-09-28 18:00:31","codes":[{"authorDate":"2017-09-28 18:00:31","commitOrder":4,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize(context);\n        final TheStateRestoreCallback stateRestoreCallback = new TheStateRestoreCallback();\n        \r\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","date":"2017-09-28 18:00:31","endLine":273,"groupId":"17261","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/05/19fb0b87fba3fde7ff468a815be95961e888ce.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize(context);\n        final TheStateRestoreCallback stateRestoreCallback = new TheStateRestoreCallback();\n        \r\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, false, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"},{"authorDate":"2017-09-28 18:00:31","commitOrder":4,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize(context);\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n    }\n","date":"2017-09-28 18:00:31","endLine":314,"groupId":"2467","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/05/19fb0b87fba3fde7ff468a815be95961e888ce.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize(context);\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, false, stateRestoreCallback);\n\n        stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"}],"commitId":"e5f2471c548fc490a42dd0321bcf7fcdd4ddc52d","commitMessage":"@@@KAFKA-5949; User Callback Exceptions need to be handled properly\n\n - catch user exception in user callback (TimestampExtractor.  DeserializationHandler.  StateRestoreListener) and wrap with StreamsException\n\nAdditional cleanup:\n - rename globalRestoreListener to userRestoreListener\n - remove unnecessary interface -> collapse SourceNodeRecordDeserializer and RecordDeserializer\n - removed unused parameter loggingEnabled from ProcessorContext#register\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>.  Damian Guy <damian.guy@gmail.com>\n\nCloses #3939 from mjsax/kafka-5949-exceptions-user-callbacks\n","date":"2017-09-28 18:00:31","modifiedFileCount":"46","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-12-11 22:20:10","codes":[{"authorDate":"2017-12-11 22:20:10","commitOrder":5,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize();\n        \r\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","date":"2017-12-11 22:20:10","endLine":304,"groupId":"17261","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/df/8d2010d24abb759062fafd8698492ad9ed3f88.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize(context);\n        final TheStateRestoreCallback stateRestoreCallback = new TheStateRestoreCallback();\n        \r\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"},{"authorDate":"2017-12-11 22:20:10","commitOrder":5,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize();\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n    }\n","date":"2017-12-11 22:20:10","endLine":343,"groupId":"2467","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/df/8d2010d24abb759062fafd8698492ad9ed3f88.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize(context);\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"}],"commitId":"043951753b6fb6c8bae6d25d7a6a97e74b614cac","commitMessage":"@@@KAFKA-6121: Restore and global consumer should not use auto.offset.reset\n\n- set auto.offset.reste to \"none\" for restore and global consumer\n- handle InvalidOffsetException for restore and global consumer\n- add corresponding tests\n- some minor cleanup\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Damian Guy <damian.guy@gmail.com.  Bill Bejeck <bill@confluent.io>.  GuozhangWang <wangguoz@gmail.com>\n\nCloses #4215 from mjsax/kafka-6121-restore-global-consumer-handle-reset\n","date":"2017-12-11 22:20:10","modifiedFileCount":"29","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-01-20 14:54:26","codes":[{"authorDate":"2019-01-20 14:54:26","commitOrder":6,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize();\n        \r\n        initializeConsumer(1, 0, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","date":"2019-01-20 14:54:26","endLine":438,"groupId":"17261","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/160f5dfd2b606f86a4b7837db3737c00098b3e.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize();\n        \r\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"},{"authorDate":"2019-01-20 14:54:26","commitOrder":6,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize();\n        initializeConsumer(1, 0, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.close(Collections.emptyMap());\n    }\n","date":"2019-01-20 14:54:26","endLine":477,"groupId":"2467","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/160f5dfd2b606f86a4b7837db3737c00098b3e.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize();\n        initializeConsumer(1, 1, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.close(Collections.<TopicPartition, Long>emptyMap());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":466,"status":"M"}],"commitId":"ed7b67dd1135e213ed7eda8ee2d733de7c965519","commitMessage":"@@@KAFKA-3522: Add internal RecordConverter interface (#6150)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-01-20 14:54:26","modifiedFileCount":"8","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-02-23 13:49:28","codes":[{"authorDate":"2019-01-20 14:54:26","commitOrder":7,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize();\n        \r\n        initializeConsumer(1, 0, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","date":"2019-01-20 14:54:26","endLine":438,"groupId":"17261","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/160f5dfd2b606f86a4b7837db3737c00098b3e.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize();\n        \r\n        initializeConsumer(1, 0, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"N"},{"authorDate":"2019-02-23 13:49:28","commitOrder":7,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize();\n        initializeConsumer(1, 0, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.close(true);\n    }\n","date":"2019-02-23 13:49:28","endLine":391,"groupId":"2467","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5d/d5f8651cf9a44fed597025abbe64ba155a3912.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize();\n        initializeConsumer(1, 0, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.close(Collections.emptyMap());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"M"}],"commitId":"1f9aa01a5b3b59d90499a059d719af03483d5130","commitMessage":"@@@ KAFKA-7672 : force write checkpoint during StreamTask #suspend (#6115)\n\nThis fix is aiming for #2 issue pointed out within https://issues.apache.org/jira/browse/KAFKA-7672\nIn the current setup.  we do offset checkpoint file write when EOS is turned on during #suspend.  which introduces the potential race condition during StateManager #closeSuspend call. To mitigate the problem.  we attempt to always write checkpoint file in #suspend call.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Matthias J. Sax <mjsax@apache.org>.   John Roesler <john@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-02-23 13:49:28","modifiedFileCount":"15","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-02-05 13:06:39","codes":[{"authorDate":"2020-02-05 13:06:39","commitOrder":8,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize();\n        \r\n        initializeConsumer(1, 0, t1);\n        stateManager.registerStore(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","date":"2020-02-05 13:06:39","endLine":399,"groupId":"0","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/8714128a053bfa0169cfd073fc6a455525bece.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize();\n        \r\n        initializeConsumer(1, 0, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"M"},{"authorDate":"2020-02-05 13:06:39","commitOrder":8,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize();\n        initializeConsumer(1, 0, t1);\n        stateManager.registerStore(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.close();\n    }\n","date":"2020-02-05 13:06:39","endLine":427,"groupId":"0","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/8714128a053bfa0169cfd073fc6a455525bece.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize();\n        initializeConsumer(1, 0, t1);\n        stateManager.register(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.close(true);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"M"}],"commitId":"4090f9a2b0a95e4da127e4786007542276d97520","commitMessage":"@@@KAFKA-9113: Clean up task management and state management (#7997)\n\nThis PR is collaborated by Guozhang Wang and John Roesler. It is a significant tech debt cleanup on task management and state management.  and is broken down by several sub-tasks listed below:\n\nExtract embedded clients (producer and consumer) into RecordCollector from StreamTask.\nguozhangwang#2\nguozhangwang#5\n\nConsolidate the standby updating and active restoring logic into ChangelogReader and extract out of StreamThread.\nguozhangwang#3\nguozhangwang#4\n\nIntroduce Task state life cycle (created.  restoring.  running.  suspended.  closing).  and refactor the task operations based on the current state.\nguozhangwang#6\nguozhangwang#7\n\nConsolidate AssignedTasks into TaskManager and simplify the logic of changelog management and task management (since they are already moved in step 2) and 3)).\nguozhangwang#8\nguozhangwang#9\n\nAlso simplified the StreamThread logic a bit as the embedded clients / changelog restoration logic has been moved into step 1) and 2).\nguozhangwang#10\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-02-05 13:06:39","modifiedFileCount":"76","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-07-22 03:19:13","codes":[{"authorDate":"2020-07-22 03:19:13","commitOrder":9,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize();\n        \r\n        initializeConsumer(1, 0, t1);\n        stateManager.registerStore(new NoOpReadOnlyStore<Object, Object>(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","date":"2020-07-22 03:19:13","endLine":399,"groupId":"18750","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d8/229b5f37d0a667035600104cdab299b8896808.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize();\n        \r\n        initializeConsumer(1, 0, t1);\n        stateManager.registerStore(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"M"},{"authorDate":"2020-07-22 03:19:13","commitOrder":9,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize();\n        initializeConsumer(1, 0, t1);\n        stateManager.registerStore(new NoOpReadOnlyStore<Object, Object>(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.close();\n    }\n","date":"2020-07-22 03:19:13","endLine":427,"groupId":"19079","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d8/229b5f37d0a667035600104cdab299b8896808.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize();\n        initializeConsumer(1, 0, t1);\n        stateManager.registerStore(new NoOpReadOnlyStore(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.close();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"M"}],"commitId":"194c56fce2e1b35b518f54ff0d2e5a1104a8126a","commitMessage":"@@@KAFKA-9274: Mark `retries` config as deprecated and add new `task.timeout.ms` config (#8864)\n\n - part of KIP-572\n - deprecates producer config `retries` (still in use)\n - deprecates admin config `retries` (still in use)\n - deprecates Kafka Streams config `retries` (will be ignored)\n - adds new Kafka Streams config `task.timeout.ms` (follow up PRs will leverage this new config)\n\nReviewers: John Roesler <john@confluent.io>.  Jason Gustafson <jason@confluent.io>.  Randall Hauch <randall@confluent.io>","date":"2020-07-22 03:19:13","modifiedFileCount":"23","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-01-10 20:20:13","codes":[{"authorDate":"2021-01-10 20:20:13","commitOrder":10,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize();\n        \r\n        initializeConsumer(1, 0, t1);\n        stateManager.registerStore(new NoOpReadOnlyStore<Object, Object>(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n        assertThrows(StreamsException.class, stateManager::flush);\n    }\n","date":"2021-01-10 20:20:13","endLine":413,"groupId":"18750","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/58/4cc9456ee5a91e3b9a159d2771526d808f2b61.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize();\n        \r\n        initializeConsumer(1, 0, t1);\n        stateManager.registerStore(new NoOpReadOnlyStore<Object, Object>(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.flush();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"M"},{"authorDate":"2021-01-10 20:20:13","commitOrder":10,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize();\n        initializeConsumer(1, 0, t1);\n        stateManager.registerStore(new NoOpReadOnlyStore<Object, Object>(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        assertThrows(ProcessorStateException.class, stateManager::close);\n    }\n","date":"2021-01-10 20:20:13","endLine":441,"groupId":"19079","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/58/4cc9456ee5a91e3b9a159d2771526d808f2b61.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize();\n        initializeConsumer(1, 0, t1);\n        stateManager.registerStore(new NoOpReadOnlyStore<Object, Object>(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        stateManager.close();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"M"}],"commitId":"913a019d6c9b03eb44706deb7fb164f79c1f601f","commitMessage":"@@@MINOR: replace test \"expected\" parameter by assertThrows (#9520)\n\nThis PR includes following changes.\n\n1. @Test(expected = Exception.class) is replaced by assertThrows\n2. remove reference to org.scalatest.Assertions\n3. change the magic code from 1 to 2 for testAppendAtInvalidOffset to test ZSTD\n4. rename testMaybeAddPartitionToTransactionXXXX to testNotReadyForSendXXX\n5. increase maxBlockMs from 1s to 3s to avoid unexpected timeout from TransactionsTest#testTimeout\n\nReviewers: Ismael Juma <ismael@confluent.io>","date":"2021-01-10 20:20:13","modifiedFileCount":"166","status":"M","submitter":"Chia-Ping Tsai"},{"authorTime":"2021-06-29 05:10:25","codes":[{"authorDate":"2021-01-10 20:20:13","commitOrder":11,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize();\n        \r\n        initializeConsumer(1, 0, t1);\n        stateManager.registerStore(new NoOpReadOnlyStore<Object, Object>(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n        assertThrows(StreamsException.class, stateManager::flush);\n    }\n","date":"2021-01-10 20:20:13","endLine":413,"groupId":"102109","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/58/4cc9456ee5a91e3b9a159d2771526d808f2b61.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreFlushFailed() {\n        stateManager.initialize();\n        \r\n        initializeConsumer(1, 0, t1);\n        stateManager.registerStore(new NoOpReadOnlyStore<Object, Object>(store1.name()) {\n            @Override\n            public void flush() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n        assertThrows(StreamsException.class, stateManager::flush);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"N"},{"authorDate":"2021-06-29 05:10:25","commitOrder":11,"curCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() {\n        stateManager.initialize();\n        initializeConsumer(1, 0, t1);\n        stateManager.registerStore(new NoOpReadOnlyStore<Object, Object>(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        assertThrows(ProcessorStateException.class, stateManager::close);\n    }\n","date":"2021-06-29 05:10:25","endLine":416,"groupId":"102109","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0a/d905727bdfe1339d5da8fdafe5d6c7d486a873.src","preCode":"    public void shouldThrowProcessorStateStoreExceptionIfStoreCloseFailed() throws IOException {\n        stateManager.initialize();\n        initializeConsumer(1, 0, t1);\n        stateManager.registerStore(new NoOpReadOnlyStore<Object, Object>(store1.name()) {\n            @Override\n            public void close() {\n                throw new RuntimeException(\"KABOOM!\");\n            }\n        }, stateRestoreCallback);\n\n        assertThrows(ProcessorStateException.class, stateManager::close);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateManagerImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":405,"status":"M"}],"commitId":"670630ae5b81d8d1cd32defe8824640dd865a538","commitMessage":"@@@KAFKA-12951: restore must terminate for tx global topic (#10894)\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Luke Chen <showuon@gmail.com>.  Gasparina Damien <d.gasparina@gmail.com>","date":"2021-06-29 05:10:25","modifiedFileCount":"3","status":"M","submitter":"Matthias J. Sax"}]
