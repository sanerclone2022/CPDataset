[{"authorTime":"2017-10-07 06:38:23","codes":[{"authorDate":"2017-10-07 06:38:23","commitOrder":1,"curCode":"    public <K, V> KStream<K, V> stream(final Collection<String> topics,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        internalTopologyBuilder.addSource(consumed.offsetResetPolicy(),\n                                          name,\n                                          consumed.timestampExtractor(),\n                                          consumed.keySerde() == null ? null : consumed.keySerde().deserializer(),\n                                          consumed.valueSerde() == null ? null : consumed.valueSerde().deserializer(),\n                                          topics.toArray(new String[topics.size()]));\n\n        return new KStreamImpl<>(this, name, Collections.singleton(name), false);\n    }\n","date":"2017-10-07 06:38:23","endLine":57,"groupId":"8155","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"stream","params":"(finalCollection<String>topics@finalConsumedInternal<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/43/08e5d0c50778c2bb5751a41da4a8c260bb3c7c.src","preCode":"    public <K, V> KStream<K, V> stream(final Collection<String> topics,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        internalTopologyBuilder.addSource(consumed.offsetResetPolicy(),\n                                          name,\n                                          consumed.timestampExtractor(),\n                                          consumed.keySerde() == null ? null : consumed.keySerde().deserializer(),\n                                          consumed.valueSerde() == null ? null : consumed.valueSerde().deserializer(),\n                                          topics.toArray(new String[topics.size()]));\n\n        return new KStreamImpl<>(this, name, Collections.singleton(name), false);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"},{"authorDate":"2017-10-07 06:38:23","commitOrder":1,"curCode":"    public <K, V> KStream<K, V> stream(final Pattern topicPattern, final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        internalTopologyBuilder.addSource(consumed.offsetResetPolicy(),\n                                          name,\n                                          consumed.timestampExtractor(),\n                                          consumed.keySerde() == null ? null : consumed.keySerde().deserializer(),\n                                          consumed.valueSerde() == null ? null : consumed.valueSerde().deserializer(),\n                                          topicPattern);\n\n        return new KStreamImpl<>(this, name, Collections.singleton(name), false);\n    }\n","date":"2017-10-07 06:38:23","endLine":70,"groupId":"8155","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"stream","params":"(finalPatterntopicPattern@finalConsumedInternal<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/43/08e5d0c50778c2bb5751a41da4a8c260bb3c7c.src","preCode":"    public <K, V> KStream<K, V> stream(final Pattern topicPattern, final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        internalTopologyBuilder.addSource(consumed.offsetResetPolicy(),\n                                          name,\n                                          consumed.timestampExtractor(),\n                                          consumed.keySerde() == null ? null : consumed.keySerde().deserializer(),\n                                          consumed.valueSerde() == null ? null : consumed.valueSerde().deserializer(),\n                                          topicPattern);\n\n        return new KStreamImpl<>(this, name, Collections.singleton(name), false);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"B"}],"commitId":"23a014052d39521a3af471b3f95809c2164820f7","commitMessage":"@@@KAFKA-5651; Follow-up: add with method to Materialized\n\nAdd a `with(Serde keySerde.  Serde valSerde)` to `Materialized` for cases where people don't care about the state store name.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Ismael Juma <ismael@juma.me.uk>.  Matthias J. Sax <matthias@confluent.io>\n\nCloses #4009 from dguy/materialized\n","date":"2017-10-07 06:38:23","modifiedFileCount":"22","status":"B","submitter":"Damian Guy"},{"authorTime":"2018-02-13 12:54:30","codes":[{"authorDate":"2018-02-13 12:54:30","commitOrder":2,"curCode":"    public <K, V> KStream<K, V> stream(final Collection<String> topics,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        internalTopologyBuilder.addSource(consumed.offsetResetPolicy(),\n                                          name,\n                                          consumed.timestampExtractor(),\n                                          consumed.keyDeserializer(),\n                                          consumed.valueDeserializer(),\n                                          topics.toArray(new String[topics.size()]));\n\n        return new KStreamImpl<>(this, name, Collections.singleton(name), false);\n    }\n","date":"2018-02-13 12:54:30","endLine":56,"groupId":"3404","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"stream","params":"(finalCollection<String>topics@finalConsumedInternal<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fa/47444c3c8f4c9ceed2870f310a3fa948fbbea4.src","preCode":"    public <K, V> KStream<K, V> stream(final Collection<String> topics,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        internalTopologyBuilder.addSource(consumed.offsetResetPolicy(),\n                                          name,\n                                          consumed.timestampExtractor(),\n                                          consumed.keySerde() == null ? null : consumed.keySerde().deserializer(),\n                                          consumed.valueSerde() == null ? null : consumed.valueSerde().deserializer(),\n                                          topics.toArray(new String[topics.size()]));\n\n        return new KStreamImpl<>(this, name, Collections.singleton(name), false);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2018-02-13 12:54:30","commitOrder":2,"curCode":"    public <K, V> KStream<K, V> stream(final Pattern topicPattern, final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        internalTopologyBuilder.addSource(consumed.offsetResetPolicy(),\n                                          name,\n                                          consumed.timestampExtractor(),\n                                          consumed.keyDeserializer(),\n                                          consumed.valueDeserializer(),\n                                          topicPattern);\n\n        return new KStreamImpl<>(this, name, Collections.singleton(name), false);\n    }\n","date":"2018-02-13 12:54:30","endLine":69,"groupId":"19072","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"stream","params":"(finalPatterntopicPattern@finalConsumedInternal<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fa/47444c3c8f4c9ceed2870f310a3fa948fbbea4.src","preCode":"    public <K, V> KStream<K, V> stream(final Pattern topicPattern, final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        internalTopologyBuilder.addSource(consumed.offsetResetPolicy(),\n                                          name,\n                                          consumed.timestampExtractor(),\n                                          consumed.keySerde() == null ? null : consumed.keySerde().deserializer(),\n                                          consumed.valueSerde() == null ? null : consumed.valueSerde().deserializer(),\n                                          topicPattern);\n\n        return new KStreamImpl<>(this, name, Collections.singleton(name), false);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"83b058a0d13955ade43440963f480c7fe3d94c6a","commitMessage":"@@@MINOR: Code cleanup (#4229)\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Damian Guy <damian@confluent.io>.  Paolo Patierno <ppatierno@live.com>.  Ismael Juma <ismael@juma.me.uk>","date":"2018-02-13 12:54:30","modifiedFileCount":"3","status":"M","submitter":"Kamal C"},{"authorTime":"2018-06-19 01:58:26","codes":[{"authorDate":"2018-06-19 01:58:26","commitOrder":3,"curCode":"    public <K, V> KStream<K, V> stream(final Collection<String> topics,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        StreamSourceNode<K, V> streamSourceNode = new StreamSourceNode<>(name,\n                                                                         topics,\n                                                                         consumed);\n\n        root.addChildNode(streamSourceNode);\n\n        internalTopologyBuilder.addSource(consumed.offsetResetPolicy(),\n                                          name,\n                                          consumed.timestampExtractor(),\n                                          consumed.keyDeserializer(),\n                                          consumed.valueDeserializer(),\n                                          topics.toArray(new String[topics.size()]));\n\n        return new KStreamImpl<>(this, name, Collections.singleton(name), false, streamSourceNode);\n    }\n","date":"2018-06-19 01:58:26","endLine":74,"groupId":"3404","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"stream","params":"(finalCollection<String>topics@finalConsumedInternal<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c4/2a93ec7412914e9c65f65cd0ec88daf52e08e7.src","preCode":"    public <K, V> KStream<K, V> stream(final Collection<String> topics,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        internalTopologyBuilder.addSource(consumed.offsetResetPolicy(),\n                                          name,\n                                          consumed.timestampExtractor(),\n                                          consumed.keyDeserializer(),\n                                          consumed.valueDeserializer(),\n                                          topics.toArray(new String[topics.size()]));\n\n        return new KStreamImpl<>(this, name, Collections.singleton(name), false);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2018-06-19 01:58:26","commitOrder":3,"curCode":"    public <K, V> KStream<K, V> stream(final Pattern topicPattern,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        StreamSourceNode<K, V> streamPatternSourceNode = new StreamSourceNode<>(name,\n                                                                                topicPattern,\n                                                                                consumed);\n        root.addChildNode(streamPatternSourceNode);\n\n        internalTopologyBuilder.addSource(consumed.offsetResetPolicy(),\n                                          name,\n                                          consumed.timestampExtractor(),\n                                          consumed.keyDeserializer(),\n                                          consumed.valueDeserializer(),\n                                          topicPattern);\n\n        return new KStreamImpl<>(this,\n                                 name,\n                                 Collections.singleton(name),\n                                 false,\n                                 streamPatternSourceNode);\n    }\n","date":"2018-06-19 01:58:26","endLine":97,"groupId":"19072","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"stream","params":"(finalPatterntopicPattern@finalConsumedInternal<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c4/2a93ec7412914e9c65f65cd0ec88daf52e08e7.src","preCode":"    public <K, V> KStream<K, V> stream(final Pattern topicPattern, final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        internalTopologyBuilder.addSource(consumed.offsetResetPolicy(),\n                                          name,\n                                          consumed.timestampExtractor(),\n                                          consumed.keyDeserializer(),\n                                          consumed.valueDeserializer(),\n                                          topicPattern);\n\n        return new KStreamImpl<>(this, name, Collections.singleton(name), false);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"1354371d4f4dd208458c776e1f27715ec5f77f47","commitMessage":"@@@KAFKA-6761: Construct logical Streams Graph in DSL Parsing (#4983)\n\nThis version is a WIP and intentionally leaves out some additional required changes to keep the reviewing effort more manageable. This version of the process includes\n\n1. Cleaning up the graph objects to reduce the number of parameters and make the naming conventions more clear.\n2. Intercepting all calls to the InternalToplogyBuilder and capturing all details required for possible optimizations and building the final topology.\n\nThis PR does not include writing out the current physical plan.  so no tests included. The next PR will include additional changes to building the graph and writing the topology out without optimizations.  using the current streams tests.\n\nReviewers: John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-06-19 01:58:26","modifiedFileCount":"11","status":"M","submitter":"Bill Bejeck"},{"authorTime":"2018-08-02 06:01:18","codes":[{"authorDate":"2018-08-02 06:01:18","commitOrder":4,"curCode":"    public <K, V> KStream<K, V> stream(final Collection<String> topics,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        final StreamSourceNode<K, V> streamSourceNode = new StreamSourceNode<>(name,\n                                                                              topics,\n                                                                              consumed);\n        addGraphNode(root, streamSourceNode);\n\n        return new KStreamImpl<>(this, name, Collections.singleton(name), false, streamSourceNode);\n    }\n","date":"2018-08-02 06:01:18","endLine":77,"groupId":"15625","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"stream","params":"(finalCollection<String>topics@finalConsumedInternal<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/02153bb52fec88e605050cf613f1caf8d51ecb.src","preCode":"    public <K, V> KStream<K, V> stream(final Collection<String> topics,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        StreamSourceNode<K, V> streamSourceNode = new StreamSourceNode<>(name,\n                                                                         topics,\n                                                                         consumed);\n\n        root.addChildNode(streamSourceNode);\n\n        internalTopologyBuilder.addSource(consumed.offsetResetPolicy(),\n                                          name,\n                                          consumed.timestampExtractor(),\n                                          consumed.keyDeserializer(),\n                                          consumed.valueDeserializer(),\n                                          topics.toArray(new String[topics.size()]));\n\n        return new KStreamImpl<>(this, name, Collections.singleton(name), false, streamSourceNode);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"},{"authorDate":"2018-08-02 06:01:18","commitOrder":4,"curCode":"    public <K, V> KStream<K, V> stream(final Pattern topicPattern,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        final StreamSourceNode<K, V> streamPatternSourceNode = new StreamSourceNode<>(name,\n                                                                                      topicPattern,\n                                                                                      consumed);\n\n        addGraphNode(root, streamPatternSourceNode);\n\n        return new KStreamImpl<>(this,\n                                 name,\n                                 Collections.singleton(name),\n                                 false,\n                                 streamPatternSourceNode);\n    }\n","date":"2018-08-02 06:01:18","endLine":94,"groupId":"21733","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"stream","params":"(finalPatterntopicPattern@finalConsumedInternal<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/02153bb52fec88e605050cf613f1caf8d51ecb.src","preCode":"    public <K, V> KStream<K, V> stream(final Pattern topicPattern,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        StreamSourceNode<K, V> streamPatternSourceNode = new StreamSourceNode<>(name,\n                                                                                topicPattern,\n                                                                                consumed);\n        root.addChildNode(streamPatternSourceNode);\n\n        internalTopologyBuilder.addSource(consumed.offsetResetPolicy(),\n                                          name,\n                                          consumed.timestampExtractor(),\n                                          consumed.keyDeserializer(),\n                                          consumed.valueDeserializer(),\n                                          topicPattern);\n\n        return new KStreamImpl<>(this,\n                                 name,\n                                 Collections.singleton(name),\n                                 false,\n                                 streamPatternSourceNode);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"c19213ab4139aa1f56f89982448184a5c82f98a4","commitMessage":"@@@KAFKA-6761: Construct Physical Plan using Graph.  Reduce streams footprint part III (#5201)\n\nThe specific changes in this PR from the second PR include:\n\n1. Changed the types of graph nodes to names conveying more context\n2. Build the entire physical plan from the graph.  after StreamsBuilder.build() is called.\n\nOther changes are addressed directly as review comments on the PR.\n\nTesting consists of using all existing streams tests to validate building the physical plan with graph\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <vvcephei@users.noreply.github.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-08-02 06:01:18","modifiedFileCount":"37","status":"M","submitter":"Bill Bejeck"},{"authorTime":"2018-10-02 07:24:12","codes":[{"authorDate":"2018-10-02 07:24:12","commitOrder":5,"curCode":"    public <K, V> KStream<K, V> stream(final Collection<String> topics,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n        final StreamSourceNode<K, V> streamSourceNode = new StreamSourceNode<>(name, topics, consumed);\n\n        addGraphNode(root, streamSourceNode);\n\n        return new KStreamImpl<>(name,\n                                 consumed.keySerde(),\n                                 consumed.valueSerde(),\n                                 Collections.singleton(name),\n                                 false,\n                                 streamSourceNode,\n                                 this);\n    }\n","date":"2018-10-02 07:24:12","endLine":93,"groupId":"15625","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"stream","params":"(finalCollection<String>topics@finalConsumedInternal<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8f/767408fb4c43d960c04e812a01f7b09764f837.src","preCode":"    public <K, V> KStream<K, V> stream(final Collection<String> topics,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        final StreamSourceNode<K, V> streamSourceNode = new StreamSourceNode<>(name,\n                                                                              topics,\n                                                                              consumed);\n        addGraphNode(root, streamSourceNode);\n\n        return new KStreamImpl<>(this, name, Collections.singleton(name), false, streamSourceNode);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2018-10-02 07:24:12","commitOrder":5,"curCode":"    public <K, V> KStream<K, V> stream(final Pattern topicPattern,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n        final StreamSourceNode<K, V> streamPatternSourceNode = new StreamSourceNode<>(name, topicPattern, consumed);\n\n        addGraphNode(root, streamPatternSourceNode);\n\n        return new KStreamImpl<>(name,\n                                 consumed.keySerde(),\n                                 consumed.valueSerde(),\n                                 Collections.singleton(name),\n                                 false,\n                                 streamPatternSourceNode,\n                                 this);\n    }\n","date":"2018-10-02 07:24:12","endLine":109,"groupId":"21733","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"stream","params":"(finalPatterntopicPattern@finalConsumedInternal<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8f/767408fb4c43d960c04e812a01f7b09764f837.src","preCode":"    public <K, V> KStream<K, V> stream(final Pattern topicPattern,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n\n        final StreamSourceNode<K, V> streamPatternSourceNode = new StreamSourceNode<>(name,\n                                                                                      topicPattern,\n                                                                                      consumed);\n\n        addGraphNode(root, streamPatternSourceNode);\n\n        return new KStreamImpl<>(this,\n                                 name,\n                                 Collections.singleton(name),\n                                 false,\n                                 streamPatternSourceNode);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"d568f73fc6ece3d29989413174eee0195d3d0a4a","commitMessage":"@@@KAFKA-7456: Serde Inheritance in DSL (#5521)\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-10-02 07:24:12","modifiedFileCount":"20","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-10-02 07:24:12","codes":[{"authorDate":"2019-04-19 06:45:34","commitOrder":6,"curCode":"    public <K, V> KStream<K, V> stream(final Collection<String> topics,\n                                       final ConsumedInternal<K, V> consumed) {\n\n        final String name = new NamedInternal(consumed.name()).orElseGenerateWithPrefix(this, KStreamImpl.SOURCE_NAME);\n        final StreamSourceNode<K, V> streamSourceNode = new StreamSourceNode<>(name, topics, consumed);\n\n        addGraphNode(root, streamSourceNode);\n\n        return new KStreamImpl<>(name,\n                                 consumed.keySerde(),\n                                 consumed.valueSerde(),\n                                 Collections.singleton(name),\n                                 false,\n                                 streamSourceNode,\n                                 this);\n    }\n","date":"2019-04-19 06:45:33","endLine":95,"groupId":"15625","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"stream","params":"(finalCollection<String>topics@finalConsumedInternal<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/0b0302dcfb5f2a4bd8768f98d9fc94a552d4cf.src","preCode":"    public <K, V> KStream<K, V> stream(final Collection<String> topics,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n        final StreamSourceNode<K, V> streamSourceNode = new StreamSourceNode<>(name, topics, consumed);\n\n        addGraphNode(root, streamSourceNode);\n\n        return new KStreamImpl<>(name,\n                                 consumed.keySerde(),\n                                 consumed.valueSerde(),\n                                 Collections.singleton(name),\n                                 false,\n                                 streamSourceNode,\n                                 this);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2018-10-02 07:24:12","commitOrder":6,"curCode":"    public <K, V> KStream<K, V> stream(final Pattern topicPattern,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n        final StreamSourceNode<K, V> streamPatternSourceNode = new StreamSourceNode<>(name, topicPattern, consumed);\n\n        addGraphNode(root, streamPatternSourceNode);\n\n        return new KStreamImpl<>(name,\n                                 consumed.keySerde(),\n                                 consumed.valueSerde(),\n                                 Collections.singleton(name),\n                                 false,\n                                 streamPatternSourceNode,\n                                 this);\n    }\n","date":"2018-10-02 07:24:12","endLine":109,"groupId":"21733","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"stream","params":"(finalPatterntopicPattern@finalConsumedInternal<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8f/767408fb4c43d960c04e812a01f7b09764f837.src","preCode":"    public <K, V> KStream<K, V> stream(final Pattern topicPattern,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n        final StreamSourceNode<K, V> streamPatternSourceNode = new StreamSourceNode<>(name, topicPattern, consumed);\n\n        addGraphNode(root, streamPatternSourceNode);\n\n        return new KStreamImpl<>(name,\n                                 consumed.keySerde(),\n                                 consumed.valueSerde(),\n                                 Collections.singleton(name),\n                                 false,\n                                 streamPatternSourceNode,\n                                 this);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"}],"commitId":"075b368d47ad3144518e4d425f9155e35f15f418","commitMessage":"@@@KAFKA-6958: Allow to name operation using parameter classes (#6410)\n\nThis is the 2nd PR for the KIP-307\nReviewers: Matthias J. Sax <mjsax@apache.org>.   John Roesler <john@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-04-19 06:45:33","modifiedFileCount":"17","status":"M","submitter":"Florian Hussonnois"},{"authorTime":"2021-06-25 00:07:22","codes":[{"authorDate":"2019-04-19 06:45:34","commitOrder":7,"curCode":"    public <K, V> KStream<K, V> stream(final Collection<String> topics,\n                                       final ConsumedInternal<K, V> consumed) {\n\n        final String name = new NamedInternal(consumed.name()).orElseGenerateWithPrefix(this, KStreamImpl.SOURCE_NAME);\n        final StreamSourceNode<K, V> streamSourceNode = new StreamSourceNode<>(name, topics, consumed);\n\n        addGraphNode(root, streamSourceNode);\n\n        return new KStreamImpl<>(name,\n                                 consumed.keySerde(),\n                                 consumed.valueSerde(),\n                                 Collections.singleton(name),\n                                 false,\n                                 streamSourceNode,\n                                 this);\n    }\n","date":"2019-04-19 06:45:33","endLine":95,"groupId":"113027","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"stream","params":"(finalCollection<String>topics@finalConsumedInternal<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/0b0302dcfb5f2a4bd8768f98d9fc94a552d4cf.src","preCode":"    public <K, V> KStream<K, V> stream(final Collection<String> topics,\n                                       final ConsumedInternal<K, V> consumed) {\n\n        final String name = new NamedInternal(consumed.name()).orElseGenerateWithPrefix(this, KStreamImpl.SOURCE_NAME);\n        final StreamSourceNode<K, V> streamSourceNode = new StreamSourceNode<>(name, topics, consumed);\n\n        addGraphNode(root, streamSourceNode);\n\n        return new KStreamImpl<>(name,\n                                 consumed.keySerde(),\n                                 consumed.valueSerde(),\n                                 Collections.singleton(name),\n                                 false,\n                                 streamSourceNode,\n                                 this);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"},{"authorDate":"2021-06-25 00:07:22","commitOrder":7,"curCode":"    public <K, V> KStream<K, V> stream(final Pattern topicPattern,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = new NamedInternal(consumed.name()).orElseGenerateWithPrefix(this, KStreamImpl.SOURCE_NAME);\n        final StreamSourceNode<K, V> streamPatternSourceNode = new StreamSourceNode<>(name, topicPattern, consumed);\n\n        addGraphNode(root, streamPatternSourceNode);\n\n        return new KStreamImpl<>(name,\n                                 consumed.keySerde(),\n                                 consumed.valueSerde(),\n                                 Collections.singleton(name),\n                                 false,\n                                 streamPatternSourceNode,\n                                 this);\n    }\n","date":"2021-06-25 00:07:22","endLine":117,"groupId":"113027","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"stream","params":"(finalPatterntopicPattern@finalConsumedInternal<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/03/ee8bbff08c969208a350b534d5ab10dfa3fb8f.src","preCode":"    public <K, V> KStream<K, V> stream(final Pattern topicPattern,\n                                       final ConsumedInternal<K, V> consumed) {\n        final String name = newProcessorName(KStreamImpl.SOURCE_NAME);\n        final StreamSourceNode<K, V> streamPatternSourceNode = new StreamSourceNode<>(name, topicPattern, consumed);\n\n        addGraphNode(root, streamPatternSourceNode);\n\n        return new KStreamImpl<>(name,\n                                 consumed.keySerde(),\n                                 consumed.valueSerde(),\n                                 Collections.singleton(name),\n                                 false,\n                                 streamPatternSourceNode,\n                                 this);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"b0cfd1f4ca83e1bc3a324e5d4081b2731c420733","commitMessage":"@@@KAFKA-12336 Custom stream naming does not work while calling stream[K? (#10190)\n\nCustom stream naming does not work while calling stream[K.  V](topicPattern: Pattern)\n\nReviewers: Bill Bejeck <bbejeck@apache.org>","date":"2021-06-25 00:07:22","modifiedFileCount":"1","status":"M","submitter":"Geordie"}]
