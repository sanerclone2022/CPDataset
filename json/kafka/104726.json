[{"authorTime":"2017-11-22 08:01:16","codes":[{"authorDate":"2016-02-04 03:28:58","commitOrder":3,"curCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","date":"2016-02-04 03:28:58","endLine":472,"groupId":"6541","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"expectInitializeTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3b/f653e98313648e5dce60b26d0ae1b71e887e7a.src","preCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskThreadedTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"NB"},{"authorDate":"2017-11-22 08:01:16","commitOrder":3,"curCode":"    public void testTopicsRegex() throws Exception {\n        Map<String, String> props = new HashMap<>(TASK_PROPS);\n        props.remove(\"topics\");\n        props.put(\"topics.regex\", \"te.*\");\n        TaskConfig taskConfig = new TaskConfig(props);\n\n        createTask(TargetState.PAUSED);\n\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n        consumer.subscribe(EasyMock.capture(topicsRegex), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(props);\n        PowerMock.expectLastCall();\n\n        expectPollInitialAssignment();\n\n        Set<TopicPartition> partitions = new HashSet<>(asList(TOPIC_PARTITION, TOPIC_PARTITION2));\n        EasyMock.expect(consumer.assignment()).andReturn(partitions);\n        consumer.pause(partitions);\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(taskConfig);\n        workerTask.initializeAndStart();\n        workerTask.iteration();\n        time.sleep(10000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-11-22 08:01:16","endLine":1181,"groupId":"11724","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopicsRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/d87405dc12b9f4f823b41bf92704b1334b9e83.src","preCode":"    public void testTopicsRegex() throws Exception {\n        Map<String, String> props = new HashMap<>(TASK_PROPS);\n        props.remove(\"topics\");\n        props.put(\"topics.regex\", \"te.*\");\n        TaskConfig taskConfig = new TaskConfig(props);\n\n        createTask(TargetState.PAUSED);\n\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n        consumer.subscribe(EasyMock.capture(topicsRegex), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(props);\n        PowerMock.expectLastCall();\n\n        expectPollInitialAssignment();\n\n        Set<TopicPartition> partitions = new HashSet<>(asList(TOPIC_PARTITION, TOPIC_PARTITION2));\n        EasyMock.expect(consumer.assignment()).andReturn(partitions);\n        consumer.pause(partitions);\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(taskConfig);\n        workerTask.initializeAndStart();\n        workerTask.iteration();\n        time.sleep(10000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1149,"status":"B"}],"commitId":"049342e440a5ca045771f3eb5b4c72d3e52ffac6","commitMessage":"@@@KAFKA-3073: Add topic regex support for Connect sinks\n\nThere are more methods that had to be touched than I anticipated when writing [the KIP](https://cwiki.apache.org/confluence/display/KAFKA/KIP-215%3A+Add+topic+regex+support+for+Connect+sinks).\n\nThe implementation here is now complete and includes a test that verifies that there's a call to `consumer.subscribe(Pattern.  RebalanceHandler)` when `topics.regex` is provided.\n\nAuthor: Jeff Klukas <jeff@klukas.net>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4151 from jklukas/connect-topics.regex\n","date":"2017-11-22 08:01:16","modifiedFileCount":"10","status":"M","submitter":"Jeff Klukas"},{"authorTime":"2018-11-30 15:38:50","codes":[{"authorDate":"2018-11-30 15:38:50","commitOrder":4,"curCode":"    private void expectInitializeTask() throws Exception {\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","date":"2018-11-30 15:38:50","endLine":519,"groupId":"104726","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"expectInitializeTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6e/2b01ce7bc195ba3757a0d53c0b0f2abf769d21.src","preCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskThreadedTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"M"},{"authorDate":"2018-11-30 15:38:50","commitOrder":4,"curCode":"    public void testTopicsRegex() throws Exception {\n        Map<String, String> props = new HashMap<>(TASK_PROPS);\n        props.remove(\"topics\");\n        props.put(\"topics.regex\", \"te.*\");\n        TaskConfig taskConfig = new TaskConfig(props);\n\n        createTask(TargetState.PAUSED);\n\n        consumer.subscribe(EasyMock.capture(topicsRegex), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(props);\n        PowerMock.expectLastCall();\n\n        expectPollInitialAssignment();\n\n        Set<TopicPartition> partitions = new HashSet<>(asList(TOPIC_PARTITION, TOPIC_PARTITION2));\n        EasyMock.expect(consumer.assignment()).andReturn(partitions);\n        consumer.pause(partitions);\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(taskConfig);\n        workerTask.initializeAndStart();\n        workerTask.iteration();\n        time.sleep(10000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-11-30 15:38:50","endLine":1192,"groupId":"104726","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTopicsRegex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/047ff9ed5ceff0da0cef8be6dde765cbbc441c.src","preCode":"    public void testTopicsRegex() throws Exception {\n        Map<String, String> props = new HashMap<>(TASK_PROPS);\n        props.remove(\"topics\");\n        props.put(\"topics.regex\", \"te.*\");\n        TaskConfig taskConfig = new TaskConfig(props);\n\n        createTask(TargetState.PAUSED);\n\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n        consumer.subscribe(EasyMock.capture(topicsRegex), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(props);\n        PowerMock.expectLastCall();\n\n        expectPollInitialAssignment();\n\n        Set<TopicPartition> partitions = new HashSet<>(asList(TOPIC_PARTITION, TOPIC_PARTITION2));\n        EasyMock.expect(consumer.assignment()).andReturn(partitions);\n        consumer.pause(partitions);\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        workerTask.initialize(taskConfig);\n        workerTask.initializeAndStart();\n        workerTask.iteration();\n        time.sleep(10000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1161,"status":"M"}],"commitId":"ace4dd00566afb7d04235bbbcc50097191af0fec","commitMessage":"@@@KAFKA-7551: Refactor to create producer & consumer in the worker\n\nThis is minor refactoring that brings in the creation of producer and consumer to the Worker. Currently.  the consumer is created in the WorkerSinkTask. This should not affect any functionality and it just makes the code structure easier to understand.\n\nAuthor: Magesh Nandakumar <magesh.n.kumar@gmail.com>\n\nReviewers: Ryanne Dolan <ryannedolan@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Robert Yokota <rayokota@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #5842 from mageshn/KAFKA-7551\n","date":"2018-11-30 15:38:50","modifiedFileCount":"6","status":"M","submitter":"Magesh Nandakumar"}]
