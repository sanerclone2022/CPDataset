[{"authorTime":"2019-11-20 02:05:09","codes":[{"authorDate":"2019-11-20 02:05:09","commitOrder":1,"curCode":"    public void shouldGetSuppressionEmitSensor() {\n        final String metricNamePrefix = \"suppression-emit\";\n        final String descriptionOfCount = \"The total number of emitted records from the suppression buffer\";\n        final String descriptionOfRate = \"The average number of emitted records from the suppression buffer per second\";\n        expect(streamsMetrics.nodeLevelSensor(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID, metricNamePrefix, RecordingLevel.DEBUG))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.nodeLevelTagMap(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            StreamsMetricsImpl.PROCESSOR_NODE_LEVEL_GROUP,\n            tagMap,\n            metricNamePrefix,\n            descriptionOfRate,\n            descriptionOfCount\n        );\n\n        verifySensor(\n            () -> ProcessorNodeMetrics.suppressionEmitSensor(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID, streamsMetrics));\n    }\n","date":"2019-11-20 02:05:09","endLine":98,"groupId":"16362","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSuppressionEmitSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/69/26ec436837f76a3b594ec5b2dfcdf507468418.src","preCode":"    public void shouldGetSuppressionEmitSensor() {\n        final String metricNamePrefix = \"suppression-emit\";\n        final String descriptionOfCount = \"The total number of emitted records from the suppression buffer\";\n        final String descriptionOfRate = \"The average number of emitted records from the suppression buffer per second\";\n        expect(streamsMetrics.nodeLevelSensor(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID, metricNamePrefix, RecordingLevel.DEBUG))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.nodeLevelTagMap(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            StreamsMetricsImpl.PROCESSOR_NODE_LEVEL_GROUP,\n            tagMap,\n            metricNamePrefix,\n            descriptionOfRate,\n            descriptionOfCount\n        );\n\n        verifySensor(\n            () -> ProcessorNodeMetrics.suppressionEmitSensor(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID, streamsMetrics));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ProcessorNodeMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"B"},{"authorDate":"2019-11-20 02:05:09","commitOrder":1,"curCode":"    private void setUpThroughputSensor(final String metricNamePrefix,\n                                       final String descriptionOfRate,\n                                       final String descriptionOfCount,\n                                       final RecordingLevel recordingLevel,\n                                       final Sensor... parentSensors) {\n        expect(streamsMetrics.nodeLevelSensor(\n            THREAD_ID,\n            TASK_ID,\n            PROCESSOR_NODE_ID,\n            metricNamePrefix,\n            recordingLevel,\n            parentSensors\n        )).andReturn(expectedSensor);\n        expect(streamsMetrics.nodeLevelTagMap(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            StreamsMetricsImpl.PROCESSOR_NODE_LEVEL_GROUP,\n            tagMap,\n            metricNamePrefix,\n            descriptionOfRate,\n            descriptionOfCount\n        );\n    }\n","date":"2019-11-20 02:05:09","endLine":373,"groupId":"16362","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUpThroughputSensor","params":"(finalStringmetricNamePrefix@finalStringdescriptionOfRate@finalStringdescriptionOfCount@finalRecordingLevelrecordingLevel@finalSensor...parentSensors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/69/26ec436837f76a3b594ec5b2dfcdf507468418.src","preCode":"    private void setUpThroughputSensor(final String metricNamePrefix,\n                                       final String descriptionOfRate,\n                                       final String descriptionOfCount,\n                                       final RecordingLevel recordingLevel,\n                                       final Sensor... parentSensors) {\n        expect(streamsMetrics.nodeLevelSensor(\n            THREAD_ID,\n            TASK_ID,\n            PROCESSOR_NODE_ID,\n            metricNamePrefix,\n            recordingLevel,\n            parentSensors\n        )).andReturn(expectedSensor);\n        expect(streamsMetrics.nodeLevelTagMap(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            StreamsMetricsImpl.PROCESSOR_NODE_LEVEL_GROUP,\n            tagMap,\n            metricNamePrefix,\n            descriptionOfRate,\n            descriptionOfCount\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ProcessorNodeMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"B"}],"commitId":"19681f6b95a5076af7020475f46d0bbe9f6015e1","commitMessage":"@@@KAFKA-9086: Refactor processor-node-level metrics (#7615)\n\nRefactors metrics according to KIP-444\nIntroduces ProcessorNodeMetrics as a central provider for processor node metrics\n\nReviewers:  Guozhang Wang <wangguoz@gmail.com>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-11-20 02:05:09","modifiedFileCount":"22","status":"B","submitter":"Bruno Cadonna"},{"authorTime":"2020-06-17 22:24:07","codes":[{"authorDate":"2020-06-17 22:24:07","commitOrder":2,"curCode":"    public void shouldGetSuppressionEmitSensor() {\n        final String metricNamePrefix = \"suppression-emit\";\n        final String descriptionOfCount = \"The total number of emitted records from the suppression buffer\";\n        final String descriptionOfRate = \"The average number of emitted records from the suppression buffer per second\";\n        expect(streamsMetrics.nodeLevelSensor(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID, metricNamePrefix, RecordingLevel.DEBUG))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.nodeLevelTagMap(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            PROCESSOR_NODE_LEVEL_GROUP,\n            tagMap,\n            metricNamePrefix,\n            descriptionOfRate,\n            descriptionOfCount\n        );\n\n        verifySensor(\n            () -> ProcessorNodeMetrics.suppressionEmitSensor(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID, streamsMetrics));\n    }\n","date":"2020-06-17 22:24:07","endLine":99,"groupId":"16362","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSuppressionEmitSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/08/131e6309ca649d3f7390b5671412a734175711.src","preCode":"    public void shouldGetSuppressionEmitSensor() {\n        final String metricNamePrefix = \"suppression-emit\";\n        final String descriptionOfCount = \"The total number of emitted records from the suppression buffer\";\n        final String descriptionOfRate = \"The average number of emitted records from the suppression buffer per second\";\n        expect(streamsMetrics.nodeLevelSensor(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID, metricNamePrefix, RecordingLevel.DEBUG))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.nodeLevelTagMap(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            StreamsMetricsImpl.PROCESSOR_NODE_LEVEL_GROUP,\n            tagMap,\n            metricNamePrefix,\n            descriptionOfRate,\n            descriptionOfCount\n        );\n\n        verifySensor(\n            () -> ProcessorNodeMetrics.suppressionEmitSensor(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID, streamsMetrics));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ProcessorNodeMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2020-06-17 22:24:07","commitOrder":2,"curCode":"    private void setUpThroughputSensor(final String metricNamePrefix,\n                                       final String descriptionOfRate,\n                                       final String descriptionOfCount,\n                                       final RecordingLevel recordingLevel,\n                                       final Sensor... parentSensors) {\n        expect(streamsMetrics.nodeLevelSensor(\n            THREAD_ID,\n            TASK_ID,\n            PROCESSOR_NODE_ID,\n            metricNamePrefix,\n            recordingLevel,\n            parentSensors\n        )).andReturn(expectedSensor);\n        expect(streamsMetrics.nodeLevelTagMap(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            PROCESSOR_NODE_LEVEL_GROUP,\n            tagMap,\n            metricNamePrefix,\n            descriptionOfRate,\n            descriptionOfCount\n        );\n    }\n","date":"2020-06-17 22:24:07","endLine":396,"groupId":"16362","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUpThroughputSensor","params":"(finalStringmetricNamePrefix@finalStringdescriptionOfRate@finalStringdescriptionOfCount@finalRecordingLevelrecordingLevel@finalSensor...parentSensors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/08/131e6309ca649d3f7390b5671412a734175711.src","preCode":"    private void setUpThroughputSensor(final String metricNamePrefix,\n                                       final String descriptionOfRate,\n                                       final String descriptionOfCount,\n                                       final RecordingLevel recordingLevel,\n                                       final Sensor... parentSensors) {\n        expect(streamsMetrics.nodeLevelSensor(\n            THREAD_ID,\n            TASK_ID,\n            PROCESSOR_NODE_ID,\n            metricNamePrefix,\n            recordingLevel,\n            parentSensors\n        )).andReturn(expectedSensor);\n        expect(streamsMetrics.nodeLevelTagMap(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            StreamsMetricsImpl.PROCESSOR_NODE_LEVEL_GROUP,\n            tagMap,\n            metricNamePrefix,\n            descriptionOfRate,\n            descriptionOfCount\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ProcessorNodeMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":374,"status":"M"}],"commitId":"147ffb9a968d62ef78ac6b330a20023ed49ddbb8","commitMessage":"@@@KAFKA-10165: Remove Percentiles from e2e metrics (#8882)\n\n* Remove problematic Percentiles measurements until the implementation is fixed\n* Fix leaking e2e metrics when task is closed\n* Fix leaking metrics when tasks are recycled\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2020-06-17 22:24:07","modifiedFileCount":"12","status":"M","submitter":"John Roesler"},{"authorTime":"2021-06-11 04:21:46","codes":[{"authorDate":"2021-06-11 04:21:46","commitOrder":3,"curCode":"    public void shouldGetSuppressionEmitSensor() {\n        final String metricNamePrefix = \"suppression-emit\";\n        final String descriptionOfCount = \"The total number of emitted records from the suppression buffer\";\n        final String descriptionOfRate = \"The average number of emitted records from the suppression buffer per second\";\n        when(streamsMetrics.nodeLevelSensor(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID, metricNamePrefix, RecordingLevel.DEBUG))\n                .thenReturn(expectedSensor);\n        when(streamsMetrics.nodeLevelTagMap(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID)).thenReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n                expectedSensor,\n                PROCESSOR_NODE_LEVEL_GROUP,\n                tagMap,\n                metricNamePrefix,\n                descriptionOfRate,\n                descriptionOfCount\n        );\n\n        verifySensor(\n                () -> ProcessorNodeMetrics.suppressionEmitSensor(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID, streamsMetrics));\n    }\n","date":"2021-06-11 04:21:46","endLine":66,"groupId":"102365","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSuppressionEmitSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/58/3d9f6caeca832f007565ed71fd5d94b1429dcf.src","preCode":"    public void shouldGetSuppressionEmitSensor() {\n        final String metricNamePrefix = \"suppression-emit\";\n        final String descriptionOfCount = \"The total number of emitted records from the suppression buffer\";\n        final String descriptionOfRate = \"The average number of emitted records from the suppression buffer per second\";\n        expect(streamsMetrics.nodeLevelSensor(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID, metricNamePrefix, RecordingLevel.DEBUG))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.nodeLevelTagMap(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            PROCESSOR_NODE_LEVEL_GROUP,\n            tagMap,\n            metricNamePrefix,\n            descriptionOfRate,\n            descriptionOfCount\n        );\n\n        verifySensor(\n            () -> ProcessorNodeMetrics.suppressionEmitSensor(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID, streamsMetrics));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ProcessorNodeMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2021-06-11 04:21:46","commitOrder":3,"curCode":"    private void setUpThroughputSensor(final String metricNamePrefix,\n                                           final String descriptionOfRate,\n                                           final String descriptionOfCount,\n                                           final RecordingLevel recordingLevel,\n                                           final Sensor... parentSensors) {\n        when(streamsMetrics.nodeLevelSensor(\n                THREAD_ID,\n                TASK_ID,\n                PROCESSOR_NODE_ID,\n                metricNamePrefix,\n                recordingLevel,\n                parentSensors\n        )).thenReturn(expectedSensor);\n        when(streamsMetrics.nodeLevelTagMap(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID)).thenReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            PROCESSOR_NODE_LEVEL_GROUP,\n            tagMap,\n            metricNamePrefix,\n            descriptionOfRate,\n            descriptionOfCount\n        );\n    }\n","date":"2021-06-11 04:21:46","endLine":192,"groupId":"102365","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUpThroughputSensor","params":"(finalStringmetricNamePrefix@finalStringdescriptionOfRate@finalStringdescriptionOfCount@finalRecordingLevelrecordingLevel@finalSensor...parentSensors)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/58/3d9f6caeca832f007565ed71fd5d94b1429dcf.src","preCode":"    private void setUpThroughputSensor(final String metricNamePrefix,\n                                       final String descriptionOfRate,\n                                       final String descriptionOfCount,\n                                       final RecordingLevel recordingLevel,\n                                       final Sensor... parentSensors) {\n        expect(streamsMetrics.nodeLevelSensor(\n            THREAD_ID,\n            TASK_ID,\n            PROCESSOR_NODE_ID,\n            metricNamePrefix,\n            recordingLevel,\n            parentSensors\n        )).andReturn(expectedSensor);\n        expect(streamsMetrics.nodeLevelTagMap(THREAD_ID, TASK_ID, PROCESSOR_NODE_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            PROCESSOR_NODE_LEVEL_GROUP,\n            tagMap,\n            metricNamePrefix,\n            descriptionOfRate,\n            descriptionOfCount\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ProcessorNodeMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"69d507590efc0588a61214c35e0bb552744aae05","commitMessage":"@@@KAFKA-12924 Replace EasyMock and PowerMock with Mockito in streams metrics tests (#10850)\n\nReviewers: John Roesler <vvcephei@apache.org>.  Ismael Juma <ijuma@apache.org>","date":"2021-06-11 04:21:46","modifiedFileCount":"7","status":"M","submitter":"wycccccc"}]
