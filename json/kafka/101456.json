[{"authorTime":"2015-12-17 07:37:53","codes":[{"authorDate":"2015-12-17 07:37:53","commitOrder":1,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n\n            KStreamBuilder builder = new KStreamBuilder();\n\n            final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n            KTable<Integer, String> table1;\n            KTable<Integer, String> table2;\n            KTable<Integer, String> joined;\n            MockProcessorSupplier<Integer, String> proc;\n\n            table1 = builder.table(keySerializer, valSerializer, keyDeserializer, valDeserializer, topic1);\n            table2 = builder.table(keySerializer, valSerializer, keyDeserializer, valDeserializer, topic2);\n            joined = table1.outerJoin(table2, joiner);\n\n            proc = new MockProcessorSupplier<>();\n            builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n            KStreamTestDriver driver = new KStreamTestDriver(builder, baseDir);\n            driver.setTime(0L);\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n            \r\n\n            for (int i = 1; i < 3; i++) {\n                driver.process(topic1, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2015-12-17 07:37:53","endLine":271,"groupId":"18397","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/67/b83f52f9be565eeac633617398d24e6aae29dd.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n\n            KStreamBuilder builder = new KStreamBuilder();\n\n            final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n            KTable<Integer, String> table1;\n            KTable<Integer, String> table2;\n            KTable<Integer, String> joined;\n            MockProcessorSupplier<Integer, String> proc;\n\n            table1 = builder.table(keySerializer, valSerializer, keyDeserializer, valDeserializer, topic1);\n            table2 = builder.table(keySerializer, valSerializer, keyDeserializer, valDeserializer, topic2);\n            joined = table1.outerJoin(table2, joiner);\n\n            proc = new MockProcessorSupplier<>();\n            builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n            KStreamTestDriver driver = new KStreamTestDriver(builder, baseDir);\n            driver.setTime(0L);\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n            \r\n\n            for (int i = 1; i < 3; i++) {\n                driver.process(topic1, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"},{"authorDate":"2015-12-17 07:37:53","commitOrder":1,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n\n            KStreamBuilder builder = new KStreamBuilder();\n\n            final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n            KTable<Integer, String> table1;\n            KTable<Integer, String> table2;\n            KTable<Integer, String> joined;\n            MockProcessorSupplier<Integer, String> proc;\n\n            table1 = builder.table(keySerializer, valSerializer, keyDeserializer, valDeserializer, topic1);\n            table2 = builder.table(keySerializer, valSerializer, keyDeserializer, valDeserializer, topic2);\n            joined = table1.leftJoin(table2, joiner);\n\n            proc = new MockProcessorSupplier<>();\n            builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n            KStreamTestDriver driver = new KStreamTestDriver(builder, baseDir);\n            driver.setTime(0L);\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2015-12-17 07:37:53","endLine":263,"groupId":"18397","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/27f17b2fb4cffc9b9a561f84730de1c1ae91a8.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n\n            KStreamBuilder builder = new KStreamBuilder();\n\n            final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n            KTable<Integer, String> table1;\n            KTable<Integer, String> table2;\n            KTable<Integer, String> joined;\n            MockProcessorSupplier<Integer, String> proc;\n\n            table1 = builder.table(keySerializer, valSerializer, keyDeserializer, valDeserializer, topic1);\n            table2 = builder.table(keySerializer, valSerializer, keyDeserializer, valDeserializer, topic2);\n            joined = table1.leftJoin(table2, joiner);\n\n            proc = new MockProcessorSupplier<>();\n            builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n            KStreamTestDriver driver = new KStreamTestDriver(builder, baseDir);\n            driver.setTime(0L);\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"}],"commitId":"587a2f4efd7994d4d3af82ed91304f939514294a","commitMessage":"@@@KAFKA-2984: KTable should send old values when required\n\nguozhangwang\n\nAt DAG level.  `KTable<K. V>` sends (key.  (new value.  old value)) to down stream.  This is done by wrapping the new value and the old value in an instance of `Change<V>` class and sending it as a \"value\" part of the stream. The old value is omitted (set to null) by default for optimization. When any downstream processor needs to use the old value.  the framework should enable it (see `KTableImpl.enableSendingOldValues()` and implementations of `KTableProcessorSupplier.enableSensingOldValues()`).\n\nNOTE: This is meant to be used by aggregation. But.  if there is a use case like a SQL database trigger.  we can add a new KTable method to expose this.\n\nAuthor: Yasuhiro Matsuda <yasuhiro@confluent.io>\n\nReviewers: Guozhang Wang\n\nCloses #672 from ymatsuda/trigger\n","date":"2015-12-17 07:37:53","modifiedFileCount":"17","status":"B","submitter":"Yasuhiro Matsuda"},{"authorTime":"2016-03-18 06:41:59","codes":[{"authorDate":"2016-03-18 06:41:59","commitOrder":2,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n\n            KStreamBuilder builder = new KStreamBuilder();\n\n            final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n            KTable<Integer, String> table1;\n            KTable<Integer, String> table2;\n            KTable<Integer, String> joined;\n            MockProcessorSupplier<Integer, String> proc;\n\n            table1 = builder.table(intSerde, stringSerde, topic1);\n            table2 = builder.table(intSerde, stringSerde, topic2);\n            joined = table1.outerJoin(table2, joiner);\n\n            proc = new MockProcessorSupplier<>();\n            builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n            KStreamTestDriver driver = new KStreamTestDriver(builder, baseDir);\n            driver.setTime(0L);\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n            \r\n\n            for (int i = 1; i < 3; i++) {\n                driver.process(topic1, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2016-03-18 06:41:59","endLine":267,"groupId":"18397","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6c/c77e0b1b0c6ae36a1debfdd2a3adfa8134f1df.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n\n            KStreamBuilder builder = new KStreamBuilder();\n\n            final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n            KTable<Integer, String> table1;\n            KTable<Integer, String> table2;\n            KTable<Integer, String> joined;\n            MockProcessorSupplier<Integer, String> proc;\n\n            table1 = builder.table(keySerializer, valSerializer, keyDeserializer, valDeserializer, topic1);\n            table2 = builder.table(keySerializer, valSerializer, keyDeserializer, valDeserializer, topic2);\n            joined = table1.outerJoin(table2, joiner);\n\n            proc = new MockProcessorSupplier<>();\n            builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n            KStreamTestDriver driver = new KStreamTestDriver(builder, baseDir);\n            driver.setTime(0L);\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n            \r\n\n            for (int i = 1; i < 3; i++) {\n                driver.process(topic1, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2016-03-18 06:41:59","commitOrder":2,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n\n            KStreamBuilder builder = new KStreamBuilder();\n\n            final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n            KTable<Integer, String> table1;\n            KTable<Integer, String> table2;\n            KTable<Integer, String> joined;\n            MockProcessorSupplier<Integer, String> proc;\n\n            table1 = builder.table(intSerde, stringSerde, topic1);\n            table2 = builder.table(intSerde, stringSerde, topic2);\n            joined = table1.leftJoin(table2, joiner);\n\n            proc = new MockProcessorSupplier<>();\n            builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n            KStreamTestDriver driver = new KStreamTestDriver(builder, baseDir);\n            driver.setTime(0L);\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2016-03-18 06:41:59","endLine":255,"groupId":"18397","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f9/2c5ca81414fd572c8f270d47ae910ff6cfe2f4.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n\n            KStreamBuilder builder = new KStreamBuilder();\n\n            final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n            KTable<Integer, String> table1;\n            KTable<Integer, String> table2;\n            KTable<Integer, String> joined;\n            MockProcessorSupplier<Integer, String> proc;\n\n            table1 = builder.table(keySerializer, valSerializer, keyDeserializer, valDeserializer, topic1);\n            table2 = builder.table(keySerializer, valSerializer, keyDeserializer, valDeserializer, topic2);\n            joined = table1.leftJoin(table2, joiner);\n\n            proc = new MockProcessorSupplier<>();\n            builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n            KStreamTestDriver driver = new KStreamTestDriver(builder, baseDir);\n            driver.setTime(0L);\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"dea0719e99211684775780f5da8b93835d7a5dac","commitMessage":"@@@KAFKA-3336: Unify Serializer and Deserializer into Serialization\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Michael G. Noll.  Ismael Juma\n\nCloses #1066 from guozhangwang/K3336\n","date":"2016-03-18 06:41:59","modifiedFileCount":"70","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2016-04-08 23:59:50","codes":[{"authorDate":"2016-04-08 23:59:50","commitOrder":3,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n\n            KStreamBuilder builder = new KStreamBuilder();\n\n            final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n            KTable<Integer, String> table1;\n            KTable<Integer, String> table2;\n            KTable<Integer, String> joined;\n            MockProcessorSupplier<Integer, String> proc;\n\n            table1 = builder.table(intSerde, stringSerde, topic1);\n            table2 = builder.table(intSerde, stringSerde, topic2);\n            joined = table1.outerJoin(table2, joiner);\n\n            proc = new MockProcessorSupplier<>();\n            builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n            KStreamTestDriver driver = new KStreamTestDriver(builder, baseDir);\n            driver.setTime(0L);\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n            \r\n\n            for (int i = 1; i < 3; i++) {\n                driver.process(topic1, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2016-04-08 23:59:50","endLine":267,"groupId":"18397","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ea/7476ae2e1b3177b391ec8ad26830349483cf43.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n\n            KStreamBuilder builder = new KStreamBuilder();\n\n            final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n            KTable<Integer, String> table1;\n            KTable<Integer, String> table2;\n            KTable<Integer, String> joined;\n            MockProcessorSupplier<Integer, String> proc;\n\n            table1 = builder.table(intSerde, stringSerde, topic1);\n            table2 = builder.table(intSerde, stringSerde, topic2);\n            joined = table1.outerJoin(table2, joiner);\n\n            proc = new MockProcessorSupplier<>();\n            builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n            KStreamTestDriver driver = new KStreamTestDriver(builder, baseDir);\n            driver.setTime(0L);\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n            \r\n\n            for (int i = 1; i < 3; i++) {\n                driver.process(topic1, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2016-04-08 23:59:50","commitOrder":3,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n\n            KStreamBuilder builder = new KStreamBuilder();\n\n            final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n            KTable<Integer, String> table1;\n            KTable<Integer, String> table2;\n            KTable<Integer, String> joined;\n            MockProcessorSupplier<Integer, String> proc;\n\n            table1 = builder.table(intSerde, stringSerde, topic1);\n            table2 = builder.table(intSerde, stringSerde, topic2);\n            joined = table1.leftJoin(table2, joiner);\n\n            proc = new MockProcessorSupplier<>();\n            builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n            KStreamTestDriver driver = new KStreamTestDriver(builder, baseDir);\n            driver.setTime(0L);\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","date":"2016-04-08 23:59:50","endLine":255,"groupId":"18397","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/9ea0501f439211c835617c43bb47dfd12d3e12.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n\n            KStreamBuilder builder = new KStreamBuilder();\n\n            final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n            KTable<Integer, String> table1;\n            KTable<Integer, String> table2;\n            KTable<Integer, String> joined;\n            MockProcessorSupplier<Integer, String> proc;\n\n            table1 = builder.table(intSerde, stringSerde, topic1);\n            table2 = builder.table(intSerde, stringSerde, topic2);\n            joined = table1.leftJoin(table2, joiner);\n\n            proc = new MockProcessorSupplier<>();\n            builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n            KStreamTestDriver driver = new KStreamTestDriver(builder, baseDir);\n            driver.setTime(0L);\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"3a58407e2e0aee0bb2c5e343fbe98c7f28fc6f3e","commitMessage":"@@@KAFKA-3505: Fix punctuate generated record metadata\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Anna Povzner <anna@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1190 from guozhangwang/K3505\n","date":"2016-04-08 23:59:50","modifiedFileCount":"23","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2016-04-27 02:39:49","codes":[{"authorDate":"2016-04-27 02:39:49","commitOrder":4,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1);\n        table2 = builder.table(intSerde, stringSerde, topic2);\n        joined = table1.outerJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","date":"2016-04-27 02:39:49","endLine":258,"groupId":"18397","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/31/2455682f8168c2f7892967a2a32f8b31391cdb.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n\n            KStreamBuilder builder = new KStreamBuilder();\n\n            final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n            KTable<Integer, String> table1;\n            KTable<Integer, String> table2;\n            KTable<Integer, String> joined;\n            MockProcessorSupplier<Integer, String> proc;\n\n            table1 = builder.table(intSerde, stringSerde, topic1);\n            table2 = builder.table(intSerde, stringSerde, topic2);\n            joined = table1.outerJoin(table2, joiner);\n\n            proc = new MockProcessorSupplier<>();\n            builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n            KStreamTestDriver driver = new KStreamTestDriver(builder, baseDir);\n            driver.setTime(0L);\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n            \r\n\n            for (int i = 1; i < 3; i++) {\n                driver.process(topic1, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"},{"authorDate":"2016-04-27 02:39:49","commitOrder":4,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1);\n        table2 = builder.table(intSerde, stringSerde, topic2);\n        joined = table1.leftJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","date":"2016-04-27 02:39:49","endLine":237,"groupId":"18397","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/51/32ce30b3e6b88117b675d6d5b0a5b74cc790e3.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        File baseDir = Files.createTempDirectory(\"test\").toFile();\n        try {\n\n            KStreamBuilder builder = new KStreamBuilder();\n\n            final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n            KTable<Integer, String> table1;\n            KTable<Integer, String> table2;\n            KTable<Integer, String> joined;\n            MockProcessorSupplier<Integer, String> proc;\n\n            table1 = builder.table(intSerde, stringSerde, topic1);\n            table2 = builder.table(intSerde, stringSerde, topic2);\n            joined = table1.leftJoin(table2, joiner);\n\n            proc = new MockProcessorSupplier<>();\n            builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n            KStreamTestDriver driver = new KStreamTestDriver(builder, baseDir);\n            driver.setTime(0L);\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n\n            for (int i = 0; i < 2; i++) {\n                driver.process(topic2, expectedKeys[i], null);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n\n            for (int i = 0; i < expectedKeys.length; i++) {\n                driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n            }\n\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        } finally {\n            Utils.delete(baseDir);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"1a73629bb43bbc781e5a968a61f6079365bc75b7","commitMessage":"@@@KAFKA-3607: Close KStreamTestDriver upon completing; follow-up fixes to be tracked in KAFKA-3623\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Eno Thereska.  Michael G. Noll.  Ismael Juma\n\nCloses #1258 from guozhangwang/K3607\n","date":"2016-04-27 02:39:49","modifiedFileCount":"30","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2016-07-19 03:12:51","codes":[{"authorDate":"2016-07-19 03:12:51","commitOrder":5,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","date":"2016-07-19 03:12:51","endLine":260,"groupId":"18397","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/dfb04021b0726a05be8f2b180a2678efe5eb78.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1);\n        table2 = builder.table(intSerde, stringSerde, topic2);\n        joined = table1.outerJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2016-07-19 03:12:51","commitOrder":5,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","date":"2016-07-19 03:12:51","endLine":239,"groupId":"18397","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/07116dc38340888cf6741eb187b1d2b3b79cc9.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1);\n        table2 = builder.table(intSerde, stringSerde, topic2);\n        joined = table1.leftJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"fbc5185543fd4895c7c81ff55b3c8b4c25ac7600","commitMessage":"@@@KAFKA-3870: Expose state store names in DSL\n\nAuthor: Eno Thereska <eno.thereska@gmail.com>\n\nReviewers: Damian Guy.  Matthias J. Sax.  Michael G. Noll.  Guozhang Wang\n\nCloses #1526 from enothereska/expose-names-dsl\n","date":"2016-07-19 03:12:51","modifiedFileCount":"39","status":"M","submitter":"Eno Thereska"},{"authorTime":"2016-09-17 00:58:36","codes":[{"authorDate":"2016-09-17 00:58:36","commitOrder":6,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","date":"2016-09-17 00:58:36","endLine":258,"groupId":"12202","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a6/249bc2ece8398b8ee2c9e718539bafdb9bac92.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2016-09-17 00:58:36","commitOrder":6,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","date":"2016-09-17 00:58:36","endLine":240,"groupId":"12202","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/846785e7baa30b358a87ff57d4144404615218.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"86aa0eb0f274c6e44eb190ce250433419e011a67","commitMessage":"@@@KAFKA-3776: Unify store and downstream caching in streams\n\nThis is joint work between dguy and enothereska. The work implements KIP-63. Overview of main changes:\n\n- New byte-based cache that acts as a buffer for any persistent store and for forwarding changes downstream.\n- Forwarding record path changes: previously a record in a task completed end-to-end. Now it may be buffered in a processor node while other records complete in the task.\n- Cleanup and state stores and decoupling of cache from state store and forwarding.\n- More than 80 new unit and integration tests.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\nAuthor: Eno Thereska <eno.thereska@gmail.com>\n\nReviewers: Matthias J. Sax.  Guozhang Wang\n\nCloses #1752 from enothereska/KAFKA-3776-poc\n","date":"2016-09-17 00:58:36","modifiedFileCount":"77","status":"M","submitter":"Damian Guy"},{"authorTime":"2016-10-21 04:06:25","codes":[{"authorDate":"2016-10-21 04:06:25","commitOrder":7,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","date":"2016-10-21 04:06:25","endLine":258,"groupId":"12202","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/1c70a35eab9ed7998d4bb8510a51efe41ce2a6.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2016-10-21 04:06:25","commitOrder":7,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","date":"2016-10-21 04:06:25","endLine":240,"groupId":"12202","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/81/6979a2f59021f3fd3887c8d176939f725b3f5d.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"62c0972efc525cc0677bd3fd470bd9fbbd70b004","commitMessage":"@@@KAFKA-4001: Improve Kafka Streams Join Semantics (KIP-77)\n\n - fixed leftJoin -> outerJoin test bug\n - simplified to only use values\n - fixed inner KTable-KTable join\n - fixed left KTable-KTable join\n - fixed outer KTable-KTable join\n - fixed inner.  left.  and outer left KStream-KStream joins\n - added inner KStream-KTable join\n - fixed left KStream-KTable join\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #1777 from mjsax/kafka-4001-joins\n","date":"2016-10-21 04:06:25","modifiedFileCount":"16","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-01-11 03:53:03","codes":[{"authorDate":"2017-01-11 03:53:03","commitOrder":8,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","date":"2017-01-11 03:53:03","endLine":258,"groupId":"6990","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/86/732401fc6f3e6a70af6070bb728e5cd2ec4cf6.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2017-01-11 03:53:03","commitOrder":8,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","date":"2017-01-11 03:53:03","endLine":245,"groupId":"12202","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/1fa1e52c922161a21e2d4fef4913eaf466d100.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic2, expectedKeys[i], \"YY\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topic1, expectedKeys[i], \"XX\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"75469a3b602c26ea81d6fc0a409d39d321195ea4","commitMessage":"@@@MINOR: Replacing for with foreach loop in stream test classes\n\nAuthor: Prabhat Kashyap <prabhat.kashyap@knoldus.in>\n\nReviewers: Ismael Juma.  Damian Guy.  Guozhang Wang\n\nCloses #2305 from PKOfficial/code-refactor\n","date":"2017-01-11 03:53:03","modifiedFileCount":"17","status":"M","submitter":"Prabhat Kashyap"},{"authorTime":"2017-01-12 01:11:18","codes":[{"authorDate":"2017-01-12 01:11:18","commitOrder":9,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","date":"2017-01-12 01:11:18","endLine":258,"groupId":"6990","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/e4e605a4991cbee21699d36016e190a9894cf1.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2017-01-12 01:11:18","commitOrder":9,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","date":"2017-01-12 01:11:18","endLine":245,"groupId":"12202","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cb/f1da4aed8a7347f23f15d814f8505def76c370.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.STRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"a95170f822227c50414c57860e8547dc2e9d84cb","commitMessage":"@@@KAFKA-4481: relax streams api type contraints\n\nMake appropriate methods contravariant in key and value types.\n\nAuthor: Xavier L?aut? <xavier@confluent.io>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #2205 from xvrl/streams-contravariance\n","date":"2017-01-12 01:11:18","modifiedFileCount":"69","status":"M","submitter":"Xavier L?aut?"},{"authorTime":"2017-08-01 06:28:59","codes":[{"authorDate":"2017-08-01 06:28:59","commitOrder":10,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","date":"2017-08-01 06:28:59","endLine":261,"groupId":"6990","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/a86dd56ff7105d185b4d3f0f005156dd5b6b36.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"},{"authorDate":"2017-08-01 06:28:59","commitOrder":10,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","date":"2017-08-01 06:28:59","endLine":248,"groupId":"12202","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/79/1390200694c944ae9a0437ded5acd96b22f412.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"}],"commitId":"da2205578be3228ce40eb5e59f6bbcb0c8da0aba","commitMessage":"@@@KAFKA-5671: Add StreamsBuilder and Deprecate KStreamBuilder\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3602 from mjsax/kafka-5671-add-streamsbuilder\n","date":"2017-08-01 06:28:59","modifiedFileCount":"83","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-08-02 07:16:34","codes":[{"authorDate":"2017-08-02 07:16:34","commitOrder":11,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","date":"2017-08-02 07:16:34","endLine":253,"groupId":"6990","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/10/7e76ac3beb47cb9bd7de43e2b74d46404f152d.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"},{"authorDate":"2017-08-02 07:16:34","commitOrder":11,"curCode":"    public void testNotSendingOldValue() throws Exception {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","date":"2017-08-02 07:16:34","endLine":240,"groupId":"12202","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/bf9484de9ee8ddac09aa410f58da920e51ea9f.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver = new KStreamTestDriver(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"}],"commitId":"edcefccfd7bd83110746fa81669e0d69ece5bb4b","commitMessage":"@@@KAFKA-3623: KStreamTestDriver extends ExternalResource\n\nIn the streams project.  there are a number of unit tests that has duplicate\ncode with respect to the tearDown() method.  in which it tries to close the\nKStreamTestDriver connection. The goal of this changeset is to eliminate\nthis duplication by converting the KStreamTestDriver class to an ExternalResource\nclass which is the base class of JUnit Rule.\n\nIn every unit tests that calls KStreamTestDriver.  we annotate the KStreamTestDriver\nusing Rule annotation. In the KStreamTestDriver class.  we override the after()\nmethod. This after() method in turn calls the close() method which was previously\ncalled in the tearDown() method in the unit tests. By annotating the KStreamTestDriver\nas a Rule.  the after() method will be called automatically after every testcase.\n\nAuthor: johnma14 <mariamj@us.ibm.com>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3589 from johnma14/bug/KAFKA-3623\n","date":"2017-08-02 07:16:34","modifiedFileCount":"34","status":"M","submitter":"Mariam John"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2017-09-11 16:42:10","commitOrder":12,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","date":"2017-09-11 16:42:10","endLine":254,"groupId":"6990","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/8a3ea1e5d2cf8108b57d17fab929fab880170a.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":12,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","date":"2017-09-11 16:42:10","endLine":242,"groupId":"12202","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9c/dc782e9b237ad09aaa4c2220b21a13fc2647fd.src","preCode":"    public void testNotSendingOldValue() throws Exception {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"c5464edbb7a6821e0a91a3712b1fe2fd92a22d68","commitMessage":"@@@KAFKA-5531; throw concrete exceptions in streams tests\n\n1. Now instead of just generic `Exception` methods declare more concrete\nexceptions throwing or don't declare any throwing at all.  if not needed.\n2. `SimpleBenchmark.run()` throws `RuntimeException`\n3. `SimpleBenchmark.produce()` throws `IllegalArgumentException`\n4. Expect `ProcessorStateException` in\n`StandbyTaskTest.testUpdateNonPersistentStore()`\n\n/cc enothereska\n\nAuthor: Evgeny Veretennikov <evg.veretennikov@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>\n\nCloses #3485 from evis/5531-throw-concrete-exceptions\n","date":"2017-09-11 16:42:10","modifiedFileCount":"106","status":"M","submitter":"Evgeny Veretennikov"},{"authorTime":"2017-09-18 22:53:44","codes":[{"authorDate":"2017-09-18 22:53:44","commitOrder":13,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","date":"2017-09-18 22:53:44","endLine":256,"groupId":"6990","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d6/ab6136aec62340bf1dc24362c901af32621602.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2017-09-18 22:53:44","commitOrder":13,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","date":"2017-09-18 22:53:44","endLine":244,"groupId":"12202","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ca/0c81c82e18635c3e1d57c0c29c8a3c4e8f263f.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(intSerde, stringSerde, topic1, storeName1);\n        table2 = builder.table(intSerde, stringSerde, topic2, storeName2);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"f2b74aa1c36bf2882006c14f7cbd56b493f39d26","commitMessage":"@@@KAFKA-5873; add materialized overloads to StreamsBuilder\n\nAdd overloads for `table` and `globalTable` that use `Materialized`\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3837 from dguy/kafka-5873\n","date":"2017-09-18 22:53:44","modifiedFileCount":"36","status":"M","submitter":"Damian Guy"},{"authorTime":"2018-04-18 04:13:15","codes":[{"authorDate":"2018-04-18 04:13:15","commitOrder":14,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","date":"2018-04-18 04:13:15","endLine":253,"groupId":"6990","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/945918d1be84f3bfe5fd04895bb59179763af9.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        KTable<Integer, String> table1;\n        KTable<Integer, String> table2;\n        KTable<Integer, String> joined;\n        MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"},{"authorDate":"2018-04-18 04:13:15","commitOrder":14,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","date":"2018-04-18 04:13:15","endLine":241,"groupId":"12202","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/72/61ae06eac5dc5b584ebf0ffb152fd6f0d57be6.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"ac9c3ed0b43ee848e6e555a01c55ea2eee78540a","commitMessage":"@@@KAFKA-6376: preliminary cleanup (#4872)\n\nGeneral cleanup of Streams code.  mostly resolving compiler warnings and re-formatting.\n\nThe regular testing suite should be sufficient.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-04-18 04:13:15","modifiedFileCount":"57","status":"M","submitter":"John Roesler"},{"authorTime":"2018-05-04 23:42:01","codes":[{"authorDate":"2018-05-04 23:42:01","commitOrder":15,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n\n        final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","date":"2018-05-04 23:42:01","endLine":264,"groupId":"6990","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cf/3321f8f4bde436eac311567f82a133d0ad6fdc.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"},{"authorDate":"2018-05-04 23:42:01","commitOrder":15,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n        driver.setTime(0L);\n\n        final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","date":"2018-05-04 23:42:01","endLine":251,"groupId":"12202","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/ef302c7786145b13ac2ce719c352b82304021d.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> proc;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        proc = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", proc, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n        driver.setTime(0L);\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"}],"commitId":"af983267be7a2d0f81527f5a348af377f30caee4","commitMessage":"@@@MINOR: Removed deprecated schedule function (#4908)\n\nWhile working on this.  I also refactored the MockProcessor out of the MockProcessorSupplier to cleanup the unit test paths.\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-05-04 23:42:01","modifiedFileCount":"62","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-02-15 07:06:47","codes":[{"authorDate":"2019-02-15 07:06:47","commitOrder":16,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n            \r\n            for (int i = 1; i < 3; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n        }\n    }\n","date":"2019-02-15 07:06:47","endLine":234,"groupId":"15390","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/09/2b5a14b8f42a25583ad5337b50a401a60ed343.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n\n        final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (int i = 1; i < 3; i++) {\n            driver.process(topic1, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2019-02-15 07:06:47","commitOrder":16,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n        }\n    }\n","date":"2019-02-15 07:06:47","endLine":225,"groupId":"18169","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/60/9b07043d89e4bb12ef63eaeadb5d1d906bef6b.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n        driver.setTime(0L);\n\n        final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"c1918a2b9a9ba282efe92ddb867abef3d6d9b98c","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [part 4] (#5433)\n\nReviewer: John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-02-15 07:06:47","modifiedFileCount":"3","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2019-03-20 08:27:32","codes":[{"authorDate":"2019-03-20 08:27:32","commitOrder":17,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 0)\", \"1:(X1+null<-null) (ts: 0)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 0)\", \"1:(X1+Y1<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 0)\", \"1:(X1+Y1<-null) (ts: 0)\", \"2:(X2+null<-null) (ts: 0)\", \"3:(X3+null<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null) (ts: 0)\", \"1:(X1+YY1<-null) (ts: 0)\", \"2:(X2+YY2<-null) (ts: 0)\", \"3:(X3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null) (ts: 0)\", \"1:(X1+YY1<-null) (ts: 0)\", \"2:(X2+YY2<-null) (ts: 0)\", \"3:(X3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 0)\", \"1:(X1+null<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null) (ts: 0)\", \"1:(XX1+null<-null) (ts: 0)\", \"2:(XX2+YY2<-null) (ts: 0)\", \"3:(XX3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (int i = 1; i < 3; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"1:(null<-null) (ts: 0)\", \"2:(null+YY2<-null) (ts: 0)\");\n        }\n    }\n","date":"2019-03-20 08:27:32","endLine":234,"groupId":"15390","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/a055d875f297750d85ba5790a2fa1a8107e2cb.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n            \r\n            for (int i = 1; i < 3; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"1:(null<-null)\", \"2:(null+YY2<-null)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"M"},{"authorDate":"2019-03-20 08:27:32","commitOrder":17,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 0)\", \"1:(X1+null<-null) (ts: 0)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 0)\", \"1:(X1+Y1<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 0)\", \"1:(X1+Y1<-null) (ts: 0)\", \"2:(X2+null<-null) (ts: 0)\", \"3:(X3+null<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null) (ts: 0)\", \"1:(X1+YY1<-null) (ts: 0)\", \"2:(X2+YY2<-null) (ts: 0)\", \"3:(X3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null) (ts: 0)\", \"1:(X1+YY1<-null) (ts: 0)\", \"2:(X2+YY2<-null) (ts: 0)\", \"3:(X3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 0)\", \"1:(X1+null<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null) (ts: 0)\", \"1:(XX1+null<-null) (ts: 0)\", \"2:(XX2+YY2<-null) (ts: 0)\", \"3:(XX3+YY3<-null) (ts: 0)\");\n        }\n    }\n","date":"2019-03-20 08:27:32","endLine":225,"groupId":"18169","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/c03f40a6894c46224c2f434c17fc69c6eb6c0f.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"b5ce093a24d0fe212b5d1374330fc720b4913bee","commitMessage":"@@@MINOR: capture result timestamps in Kafka Streams DSL tests (#6447)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2019-03-20 08:27:32","modifiedFileCount":"29","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-05-18 07:48:07","codes":[{"authorDate":"2019-05-18 07:48:07","commitOrder":18,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 5)\", \"1:(X1+null<-null) (ts: 6)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 5)\", \"1:(X1+Y1<-null) (ts: 10)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XX0+Y0<-null) (ts: 7)\", \"1:(XX1+Y1<-null) (ts: 10)\",\n                \"2:(XX2+null<-null) (ts: 7)\", \"3:(XX3+null<-null) (ts: 7)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XX0+YY0<-null) (ts: 7)\", \"1:(XX1+YY1<-null) (ts: 7)\",\n                \"2:(XX2+YY2<-null) (ts: 10)\", \"3:(XX3+YY3<-null) (ts: 15)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XXX0+YY0<-null) (ts: 6)\", \"1:(XXX1+YY1<-null) (ts: 6)\",\n                \"2:(XXX2+YY2<-null) (ts: 10)\", \"3:(XXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(XXX0+null<-null) (ts: 6)\", \"1:(XXX1+null<-null) (ts: 7)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XXXX0+null<-null) (ts: 13)\", \"1:(XXXX1+null<-null) (ts: 13)\",\n                \"2:(XXXX2+YY2<-null) (ts: 13)\", \"3:(XXXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(null<-null) (ts: 0)\", \"1:(null<-null) (ts: 42)\",\n                \"2:(null+YY2<-null) (ts: 10)\", \"3:(null+YY3<-null) (ts: 20)\");\n        }\n    }\n","date":"2019-05-18 07:48:07","endLine":281,"groupId":"6990","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/38/c90ce0656d7d44de1952ae371d9a82047b55c3.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 0)\", \"1:(X1+null<-null) (ts: 0)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 0)\", \"1:(X1+Y1<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 0)\", \"1:(X1+Y1<-null) (ts: 0)\", \"2:(X2+null<-null) (ts: 0)\", \"3:(X3+null<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null) (ts: 0)\", \"1:(X1+YY1<-null) (ts: 0)\", \"2:(X2+YY2<-null) (ts: 0)\", \"3:(X3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null) (ts: 0)\", \"1:(X1+YY1<-null) (ts: 0)\", \"2:(X2+YY2<-null) (ts: 0)\", \"3:(X3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 0)\", \"1:(X1+null<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null) (ts: 0)\", \"1:(XX1+null<-null) (ts: 0)\", \"2:(XX2+YY2<-null) (ts: 0)\", \"3:(XX3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (int i = 1; i < 3; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"1:(null<-null) (ts: 0)\", \"2:(null+YY2<-null) (ts: 0)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"},{"authorDate":"2019-05-18 07:48:07","commitOrder":18,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 5)\", \"1:(X1+null<-null) (ts: 6)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 5)\", \"1:(X1+Y1<-null) (ts: 10)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XX0+Y0<-null) (ts: 7)\", \"1:(XX1+Y1<-null) (ts: 10)\",\n                \"2:(XX2+null<-null) (ts: 7)\", \"3:(XX3+null<-null) (ts: 7)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XX0+YY0<-null) (ts: 7)\", \"1:(XX1+YY1<-null) (ts: 7)\",\n                \"2:(XX2+YY2<-null) (ts: 10)\", \"3:(XX3+YY3<-null) (ts: 15)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XXX0+YY0<-null) (ts: 6)\", \"1:(XXX1+YY1<-null) (ts: 6)\",\n                \"2:(XXX2+YY2<-null) (ts: 10)\", \"3:(XXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(XXX0+null<-null) (ts: 6)\", \"1:(XXX1+null<-null) (ts: 7)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XXXX0+null<-null) (ts: 13)\", \"1:(XXXX1+null<-null) (ts: 13)\",\n                \"2:(XXXX2+YY2<-null) (ts: 13)\", \"3:(XXXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(null<-null) (ts: 0)\", \"1:(null<-null) (ts: 42)\",\n                \"2:(null<-null) (ts: 10)\", \"3:(null<-null) (ts: 20)\");\n        }\n    }\n","date":"2019-05-18 07:48:07","endLine":286,"groupId":"6990","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/ff514e163ca139759b15d2c21ee83b6aa2fdb1.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 0)\", \"1:(X1+null<-null) (ts: 0)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 0)\", \"1:(X1+Y1<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 0)\", \"1:(X1+Y1<-null) (ts: 0)\", \"2:(X2+null<-null) (ts: 0)\", \"3:(X3+null<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null) (ts: 0)\", \"1:(X1+YY1<-null) (ts: 0)\", \"2:(X2+YY2<-null) (ts: 0)\", \"3:(X3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null) (ts: 0)\", \"1:(X1+YY1<-null) (ts: 0)\", \"2:(X2+YY2<-null) (ts: 0)\", \"3:(X3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 0)\", \"1:(X1+null<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null) (ts: 0)\", \"1:(XX1+null<-null) (ts: 0)\", \"2:(XX2+YY2<-null) (ts: 0)\", \"3:(XX3+YY3<-null) (ts: 0)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"}],"commitId":"6a2749faa63397caa93dae7bfdc3f1d0573a2ff4","commitMessage":"@@@KAFKA-6455: Improve DSL operator timestamp semantics (#6725)\n\nBasic idea:\nKTable-KTable join: set max(left-ts. right-ts) for result\n#agg(...) (stream/table windowed/non-windowed): set max(ts1.  ts2.  ts3. ...) of all input records that contribute to the aggregation result\nfor all stateless transformation: input-ts -> output-ts\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   John Roesler <john@confluent.io>.  Andy Coates <andy@confluent.io>.   Bill Bejeck <bbejeck@gmail.com","date":"2019-05-18 07:48:07","modifiedFileCount":"61","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-07-16 22:16:15","codes":[{"authorDate":"2019-07-16 22:16:15","commitOrder":19,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                    new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                    new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                    new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                    new KeyValueTimestamp<>(2, new Change<>(\"null+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"null+YY3\", null), 20));\n        }\n    }\n","date":"2019-07-16 22:16:15","endLine":283,"groupId":"2712","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/95/68c73d5b08e657bea3be0c36c9d497b9b7667b.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 5)\", \"1:(X1+null<-null) (ts: 6)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 5)\", \"1:(X1+Y1<-null) (ts: 10)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XX0+Y0<-null) (ts: 7)\", \"1:(XX1+Y1<-null) (ts: 10)\",\n                \"2:(XX2+null<-null) (ts: 7)\", \"3:(XX3+null<-null) (ts: 7)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XX0+YY0<-null) (ts: 7)\", \"1:(XX1+YY1<-null) (ts: 7)\",\n                \"2:(XX2+YY2<-null) (ts: 10)\", \"3:(XX3+YY3<-null) (ts: 15)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XXX0+YY0<-null) (ts: 6)\", \"1:(XXX1+YY1<-null) (ts: 6)\",\n                \"2:(XXX2+YY2<-null) (ts: 10)\", \"3:(XXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(XXX0+null<-null) (ts: 6)\", \"1:(XXX1+null<-null) (ts: 7)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XXXX0+null<-null) (ts: 13)\", \"1:(XXXX1+null<-null) (ts: 13)\",\n                \"2:(XXXX2+YY2<-null) (ts: 13)\", \"3:(XXXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(null<-null) (ts: 0)\", \"1:(null<-null) (ts: 42)\",\n                \"2:(null+YY2<-null) (ts: 10)\", \"3:(null+YY3<-null) (ts: 20)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"},{"authorDate":"2019-07-16 22:16:15","commitOrder":19,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","date":"2019-07-16 22:16:15","endLine":295,"groupId":"2712","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/417e92ba988461737b542550eb5a5ca31c018f.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 5)\", \"1:(X1+null<-null) (ts: 6)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 5)\", \"1:(X1+Y1<-null) (ts: 10)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XX0+Y0<-null) (ts: 7)\", \"1:(XX1+Y1<-null) (ts: 10)\",\n                \"2:(XX2+null<-null) (ts: 7)\", \"3:(XX3+null<-null) (ts: 7)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XX0+YY0<-null) (ts: 7)\", \"1:(XX1+YY1<-null) (ts: 7)\",\n                \"2:(XX2+YY2<-null) (ts: 10)\", \"3:(XX3+YY3<-null) (ts: 15)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XXX0+YY0<-null) (ts: 6)\", \"1:(XXX1+YY1<-null) (ts: 6)\",\n                \"2:(XXX2+YY2<-null) (ts: 10)\", \"3:(XXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(XXX0+null<-null) (ts: 6)\", \"1:(XXX1+null<-null) (ts: 7)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XXXX0+null<-null) (ts: 13)\", \"1:(XXXX1+null<-null) (ts: 13)\",\n                \"2:(XXXX2+YY2<-null) (ts: 13)\", \"3:(XXXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(null<-null) (ts: 0)\", \"1:(null<-null) (ts: 42)\",\n                \"2:(null<-null) (ts: 10)\", \"3:(null<-null) (ts: 20)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"00757cd99f6d8bf2760c3708d307347f4cde65f6","commitMessage":"@@@KAFKA-8450: Using KeyValueTimeStamp in MockProcessor (#6933)\n\nThis PR is to use KeyValueTimeStamp Object in MockProcessor Test file instead of String and change all the dependency files with broken test cases.\n\nReviewers: Kamal Chandraprakash.  Matthias J. Sax <mjsax@apache.org>.   Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-07-16 22:16:15","modifiedFileCount":"28","status":"M","submitter":"SuryaTeja Duggi"},{"authorTime":"2019-10-07 16:01:58","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":20,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"X\" + expectedKeys[i], 5L + i);\n            }\n            \r\n            inputTopic1.pipeInput(null, \"SomeVal\", 42L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                    new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i);\n            }\n            \r\n            inputTopic2.pipeInput(null, \"AnotherVal\", 73L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                    new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XX\" + expectedKey, 7L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"YY\" + expectedKey, expectedKey * 5L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXX\" + expectedKey, 6L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n            \r\n            inputTopic2.pipeInput(expectedKeys[0], null, 5L);\n            inputTopic2.pipeInput(expectedKeys[1], null, 7L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXXX\" + expectedKey, 13L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n            \r\n            inputTopic1.pipeInput(expectedKeys[0], null, 0L);\n            inputTopic1.pipeInput(expectedKeys[1], null, 42L);\n            inputTopic1.pipeInput(expectedKeys[2], null, 5L);\n            inputTopic1.pipeInput(expectedKeys[3], null, 20L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                    new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                    new KeyValueTimestamp<>(2, new Change<>(\"null+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"null+YY3\", null), 20));\n        }\n    }\n","date":"2019-10-07 16:01:58","endLine":294,"groupId":"8108","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0a/b8418891a132faeca6d3d0fc8450e3214ef566.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                    new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                    new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                    new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                    new KeyValueTimestamp<>(2, new Change<>(\"null+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"null+YY3\", null), 20));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"},{"authorDate":"2019-10-07 16:01:58","commitOrder":20,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"X\" + expectedKeys[i], 5L + i);\n            }\n            \r\n            inputTopic1.pipeInput(null, \"SomeVal\", 42L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i);\n            }\n            \r\n            inputTopic2.pipeInput(null, \"AnotherVal\", 73L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XX\" + expectedKey, 7L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"YY\" + expectedKey, expectedKey * 5L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXX\" + expectedKey, 6L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            inputTopic2.pipeInput(expectedKeys[0], null, 5L);\n            inputTopic2.pipeInput(expectedKeys[1], null, 7L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXXX\" + expectedKey, 13L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n\n            \r\n            inputTopic1.pipeInput(expectedKeys[0], null, 0L);\n            inputTopic1.pipeInput(expectedKeys[1], null, 42L);\n            inputTopic1.pipeInput(expectedKeys[2], null, 5L);\n            inputTopic1.pipeInput(expectedKeys[3], null, 20L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","date":"2019-10-07 16:01:58","endLine":307,"groupId":"8108","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/95/8c8969c27d571cdfae7e4b908c72faea349a9f.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"a5a6938c69f4310f7ec519036f0df77d8022326a","commitMessage":"@@@KAFKA-8233: TopologyTestDriver test input and output usability improvements (#7378)\n\nImplements KIP-470\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-07 16:01:58","modifiedFileCount":"47","status":"M","submitter":"Jukka Karvanen"},{"authorTime":"2020-09-10 01:37:21","codes":[{"authorDate":"2020-09-10 01:37:21","commitOrder":21,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockApiProcessorSupplier<Integer, String, Void, Void> supplier = new MockApiProcessorSupplier<>();\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockApiProcessor<Integer, String, Void, Void> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"X\" + expectedKeys[i], 5L + i);\n            }\n            \r\n            inputTopic1.pipeInput(null, \"SomeVal\", 42L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                    new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i);\n            }\n            \r\n            inputTopic2.pipeInput(null, \"AnotherVal\", 73L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                    new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XX\" + expectedKey, 7L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"YY\" + expectedKey, expectedKey * 5L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXX\" + expectedKey, 6L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n            \r\n            inputTopic2.pipeInput(expectedKeys[0], null, 5L);\n            inputTopic2.pipeInput(expectedKeys[1], null, 7L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXXX\" + expectedKey, 13L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n            \r\n            inputTopic1.pipeInput(expectedKeys[0], null, 0L);\n            inputTopic1.pipeInput(expectedKeys[1], null, 42L);\n            inputTopic1.pipeInput(expectedKeys[2], null, 5L);\n            inputTopic1.pipeInput(expectedKeys[3], null, 20L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                    new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                    new KeyValueTimestamp<>(2, new Change<>(\"null+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"null+YY3\", null), 20));\n        }\n    }\n","date":"2020-09-10 01:37:21","endLine":294,"groupId":"101456","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/89fea19dcd367d73e56c31e246040a415851fc.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.outerJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertTrue(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"X\" + expectedKeys[i], 5L + i);\n            }\n            \r\n            inputTopic1.pipeInput(null, \"SomeVal\", 42L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                    new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i);\n            }\n            \r\n            inputTopic2.pipeInput(null, \"AnotherVal\", 73L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                    new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XX\" + expectedKey, 7L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"YY\" + expectedKey, expectedKey * 5L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXX\" + expectedKey, 6L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n            \r\n            inputTopic2.pipeInput(expectedKeys[0], null, 5L);\n            inputTopic2.pipeInput(expectedKeys[1], null, 7L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXXX\" + expectedKey, 13L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                    new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                    new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                    new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n            \r\n            inputTopic1.pipeInput(expectedKeys[0], null, 0L);\n            inputTopic1.pipeInput(expectedKeys[1], null, 42L);\n            inputTopic1.pipeInput(expectedKeys[2], null, 5L);\n            inputTopic1.pipeInput(expectedKeys[3], null, 20L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                    new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                    new KeyValueTimestamp<>(2, new Change<>(\"null+YY2\", null), 10),\n                    new KeyValueTimestamp<>(3, new Change<>(\"null+YY3\", null), 20));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2020-09-10 01:37:21","commitOrder":21,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockApiProcessorSupplier<Integer, String, Void, Void> supplier = new MockApiProcessorSupplier<>();\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockApiProcessor<Integer, String, Void, Void> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"X\" + expectedKeys[i], 5L + i);\n            }\n            \r\n            inputTopic1.pipeInput(null, \"SomeVal\", 42L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i);\n            }\n            \r\n            inputTopic2.pipeInput(null, \"AnotherVal\", 73L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XX\" + expectedKey, 7L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"YY\" + expectedKey, expectedKey * 5L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXX\" + expectedKey, 6L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            inputTopic2.pipeInput(expectedKeys[0], null, 5L);\n            inputTopic2.pipeInput(expectedKeys[1], null, 7L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXXX\" + expectedKey, 13L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n\n            \r\n            inputTopic1.pipeInput(expectedKeys[0], null, 0L);\n            inputTopic1.pipeInput(expectedKeys[1], null, 42L);\n            inputTopic1.pipeInput(expectedKeys[2], null, 5L);\n            inputTopic1.pipeInput(expectedKeys[3], null, 20L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","date":"2020-09-10 01:37:21","endLine":307,"groupId":"101456","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e6/add21fc79a02cba4ed786febd9e95d873b64f4.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"X\" + expectedKeys[i], 5L + i);\n            }\n            \r\n            inputTopic1.pipeInput(null, \"SomeVal\", 42L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i);\n            }\n            \r\n            inputTopic2.pipeInput(null, \"AnotherVal\", 73L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XX\" + expectedKey, 7L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"YY\" + expectedKey, expectedKey * 5L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXX\" + expectedKey, 6L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            inputTopic2.pipeInput(expectedKeys[0], null, 5L);\n            inputTopic2.pipeInput(expectedKeys[1], null, 7L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXXX\" + expectedKey, 13L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n\n            \r\n            inputTopic1.pipeInput(expectedKeys[0], null, 0L);\n            inputTopic1.pipeInput(expectedKeys[1], null, 42L);\n            inputTopic1.pipeInput(expectedKeys[2], null, 5L);\n            inputTopic1.pipeInput(expectedKeys[3], null, 20L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"09d1498e3065eccc26a2d396ea13e7c8b553b974","commitMessage":"@@@KAFKA-10436: Implement KIP-478 Topology changes (#9221)\n\nConvert Topology#addProcessor and #addGlobalStore\nAlso.  convert some of the internals in support of addProcessor\n\nReviewers: Bill Bejeck <bbejeck@apache.org>","date":"2020-09-10 01:37:21","modifiedFileCount":"45","status":"M","submitter":"John Roesler"}]
