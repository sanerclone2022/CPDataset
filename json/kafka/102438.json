[{"authorTime":"2020-02-25 00:49:56","codes":[{"authorDate":"2020-02-25 00:49:56","commitOrder":1,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            null,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener.onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2020-02-25 00:49:56","endLine":1614,"groupId":"17722","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingTaskLost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c4/e89868b3e4e6c475afdca2484559c8cd5230b4.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            null,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener.onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1573,"status":"B"},{"authorDate":"2020-02-25 00:49:56","commitOrder":1,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            null,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener.onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2020-02-25 00:49:56","endLine":1658,"groupId":"22600","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingRevocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c4/e89868b3e4e6c475afdca2484559c8cd5230b4.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            null,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener.onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1617,"status":"B"}],"commitId":"1de9981fe38f3e46dcc98cd8b5d3378f7ce0f6a8","commitMessage":"@@@KAFKA-9581: Remove rebalance exception withholding (#8145)\n\nThe rebalance exception withholding is no longer necessary as we have better mechanism for catching and wrapping these exceptions. Throw them directly should be fine and simplify our current error handling.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-02-25 00:49:56","modifiedFileCount":"4","status":"B","submitter":"Boyang Chen"},{"authorTime":"2020-03-06 04:20:46","codes":[{"authorDate":"2020-03-06 04:20:46","commitOrder":2,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener.onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2020-03-06 04:20:46","endLine":1675,"groupId":"17722","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingTaskLost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/a669d0112a00c69b3d075d65f625339c67ea15.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            null,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener.onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1636,"status":"M"},{"authorDate":"2020-03-06 04:20:46","commitOrder":2,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener.onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2020-03-06 04:20:46","endLine":1717,"groupId":"22600","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingRevocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/a669d0112a00c69b3d075d65f625339c67ea15.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            null,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener.onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1678,"status":"M"}],"commitId":"78374a15492cfb6df49353bd166d8c45ac9abdb2","commitMessage":"@@@KAFKA-9615: Clean up task/producer create and close (#8213)\n\n* Consolidate task/producer management. Now.  exactly one component manages\n  the creation and destruction of Producers.  whether they are per-thread or per-task.\n* Add missing test coverage on TaskManagerTest\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Boyang Chen <boyang@confluent.io>","date":"2020-03-06 04:20:46","modifiedFileCount":"12","status":"M","submitter":"John Roesler"},{"authorTime":"2020-04-09 02:02:30","codes":[{"authorDate":"2020-04-09 02:02:30","commitOrder":3,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener.onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2020-04-09 02:02:30","endLine":1860,"groupId":"17722","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingTaskLost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/db/d43488bfec99e1ba2fc7eb89b43737f3a11171.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener.onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1820,"status":"M"},{"authorDate":"2020-04-09 02:02:30","commitOrder":3,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener.onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2020-04-09 02:02:30","endLine":1903,"groupId":"22600","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingRevocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/db/d43488bfec99e1ba2fc7eb89b43737f3a11171.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger()\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener.onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1863,"status":"M"}],"commitId":"98ea773a22f84eb21c318fa1da78d2e6b323e8de","commitMessage":"@@@KAFKA-6145: KIP-441 Pt. 6 Trigger probing rebalances until group is stable (#8409)\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-04-09 02:02:30","modifiedFileCount":"8","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-06-19 02:28:49","codes":[{"authorDate":"2020-06-19 02:28:49","commitOrder":4,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2020-06-19 02:28:49","endLine":1872,"groupId":"17722","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingTaskLost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/7dd69305c671c2acad16423a8120f34a9ec787.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener.onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1832,"status":"M"},{"authorDate":"2020-06-19 02:28:49","commitOrder":4,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2020-06-19 02:28:49","endLine":1915,"groupId":"22600","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingRevocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/7dd69305c671c2acad16423a8120f34a9ec787.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener.onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1875,"status":"M"}],"commitId":"d8cc6fe8e36329c647736773d9d66de89c447409","commitMessage":"@@@KAFKA-10167: use the admin client to read end-offset (#8876)\n\nSince admin client allows use to use flexible offset-spec.  we can always set to use read-uncommitted regardless of the EOS config.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-06-19 02:28:49","modifiedFileCount":"11","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-08-14 03:40:40","codes":[{"authorDate":"2020-08-14 03:40:40","commitOrder":5,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2020-08-14 03:40:40","endLine":1984,"groupId":"11458","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingTaskLost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/39/366402426362b2d3a235c20b0f2deebde697bc.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1943,"status":"M"},{"authorDate":"2020-08-14 03:40:40","commitOrder":5,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2020-08-14 03:40:40","endLine":2028,"groupId":"10956","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingRevocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/39/366402426362b2d3a235c20b0f2deebde697bc.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1987,"status":"M"}],"commitId":"5645d906fa319206a9270c080926a21dfddc852a","commitMessage":"@@@KAFKA-9924: Prepare RocksDB and metrics for RocksDB properties recording (#9098)\n\nRefactor the RocksDB store and the metrics infrastructure in Streams\nin preparation of the recordings of the RocksDB properties specified in KIP-607.\n\nThe refactoring includes:\n* wrapper around BlockedBasedTableConfig to make the cache accessible to the\n  RocksDB metrics recorder\n* RocksDB metrics recorder now takes also the DB instance and the cache in addition\n  to the statistics\n* The value providers for the metrics are added to the RockDB metrics recorder also if\n  the recording level is INFO.\n* The creation of the RocksDB metrics recording trigger is moved to StreamsMetricsImpl\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <vvcephei@apache.org>\n","date":"2020-08-14 03:40:40","modifiedFileCount":"27","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-11-18 14:55:09","codes":[{"authorDate":"2020-11-18 14:55:09","commitOrder":6,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2020-11-18 14:55:09","endLine":2011,"groupId":"11458","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingTaskLost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/039ef024aa5fce13f7fccbaeebb94fce3b843c.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1968,"status":"M"},{"authorDate":"2020-11-18 14:55:09","commitOrder":6,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2020-11-18 14:55:09","endLine":2057,"groupId":"10956","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingRevocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/039ef024aa5fce13f7fccbaeebb94fce3b843c.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE)\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2014,"status":"M"}],"commitId":"5899f5fc4a9557c33e466e58d7555990ee742a2b","commitMessage":"@@@KAFKA-9331: Add a streams specific uncaught exception handler (#9487)\n\nThis PR introduces a streams specific uncaught exception handler that currently has the option to close the client or the application. If the new handler is set as well as the old handler (java thread handler) will be ignored and an error will be logged.\nThe application shutdown is achieved through the rebalance protocol.\n\nReviewers: Bruno Cadonna <cadonna@confluent.io>.  Leah Thomas <lthomas@confluent.io>.  John Roesler <john@confluent.io>.  Anna Sophie Blee-Goldman <ableegoldman@apache.org>","date":"2020-11-18 14:55:09","modifiedFileCount":"34","status":"M","submitter":"Walker Carlson"},{"authorTime":"2020-11-19 07:45:40","codes":[{"authorDate":"2020-11-19 07:45:40","commitOrder":7,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2020-11-19 07:45:40","endLine":2019,"groupId":"11458","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingTaskLost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/361f0b760db4c3e1a9889e0084561c58f9f203.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1975,"status":"M"},{"authorDate":"2020-11-19 07:45:40","commitOrder":7,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2020-11-19 07:45:40","endLine":2066,"groupId":"10956","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingRevocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/361f0b760db4c3e1a9889e0084561c58f9f203.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2022,"status":"M"}],"commitId":"d12fbb7c0077fba23282adb84ff87635d6e44e5e","commitMessage":"@@@KAFKA-10500: Allow resizing of StreamThread state store caches (#9572)\n\n - part of KIP-663\n\nReviewer: Bruno Cadonna <bruno@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-11-19 07:45:40","modifiedFileCount":"5","status":"M","submitter":"Walker Carlson"},{"authorTime":"2021-06-26 00:31:49","codes":[{"authorDate":"2021-06-26 00:31:49","commitOrder":8,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet());\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2021-06-26 00:31:49","endLine":2203,"groupId":"11458","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingTaskLost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/eb26d85af4db8a9cbd2343dd4a474a25fe9620.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2158,"status":"M"},{"authorDate":"2021-06-26 00:31:49","commitOrder":8,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet());\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2021-06-26 00:31:49","endLine":2251,"groupId":"10956","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingRevocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/eb26d85af4db8a9cbd2343dd4a474a25fe9620.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2206,"status":"M"}],"commitId":"6655a09e99125aff34cb96188924fca1df3387ad","commitMessage":"@@@KAFKA-12849: KIP-744 TaskMetadata ThreadMetadata StreamsMetadata as API (#10840)\n\nImplementation of KIP-744.\n\nCreates new Interfaces for TaskMetadata.  ThreadMetadata.  and\nStreamsMetadata.  providing internal implementations for each of them.\n\nDeprecates current TaskMetadata.  ThreadMetadata under o.a.k.s.processor. \nand SreamsMetadata under a.o.k.s.state.\n\nUpdates references on internal classes from deprecated classes to new interfaces.\n\nDeprecates methods on KafkaStreams returning deprecated ThreadMeatada and\nStreamsMetadata.  and provides new ones returning the new interfaces.\n\nUpdate Javadocs referencing to deprecated classes and methods to point\nto the right ones.\n\nCo-authored-by: Bruno Cadonna <cadonna@apache.org>\n\nReviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>.  Bruno Cadonna <cadonna@apache.org>","date":"2021-06-26 00:31:49","modifiedFileCount":"29","status":"M","submitter":"Josep Prat"},{"authorTime":"2021-07-29 02:18:56","codes":[{"authorDate":"2021-07-29 02:18:56","commitOrder":9,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet());\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            new TopologyMetadata(internalTopologyBuilder, config),\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2021-07-29 02:18:56","endLine":2207,"groupId":"102438","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingTaskLost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/da8f3d05b33ab4a0fd78d50b5bdf27db2eac9e.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingTaskLost() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet());\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleLostAll();\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Task lost exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsLost(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2162,"status":"M"},{"authorDate":"2021-07-29 02:18:56","commitOrder":9,"curCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet());\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            new TopologyMetadata(internalTopologyBuilder, config),\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","date":"2021-07-29 02:18:56","endLine":2255,"groupId":"102438","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldThrowTaskMigratedExceptionHandlingRevocation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/da8f3d05b33ab4a0fd78d50b5bdf27db2eac9e.src","preCode":"    public void shouldThrowTaskMigratedExceptionHandlingRevocation() {\n        final Set<TopicPartition> assignedPartitions = Collections.singleton(t1p1);\n\n        final TaskManager taskManager = EasyMock.createNiceMock(TaskManager.class);\n        expect(taskManager.producerClientIds()).andStubReturn(Collections.emptySet());\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<>(OffsetResetStrategy.LATEST);\n        consumer.assign(assignedPartitions);\n        consumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        consumer.updateEndOffsets(Collections.singletonMap(t1p1, 10L));\n\n        taskManager.handleRevocation(assignedPartitions);\n        EasyMock.expectLastCall()\n            .andThrow(new TaskMigratedException(\"Revocation non fatal exception\", new RuntimeException()));\n\n        EasyMock.replay(taskManager);\n\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, CLIENT_ID, StreamsConfig.METRICS_LATEST, mockTime);\n        final StreamThread thread = new StreamThread(\n            mockTime,\n            config,\n            null,\n            consumer,\n            consumer,\n            null,\n            null,\n            taskManager,\n            streamsMetrics,\n            internalTopologyBuilder,\n            CLIENT_ID,\n            new LogContext(\"\"),\n            new AtomicInteger(),\n            new AtomicLong(Long.MAX_VALUE),\n            null,\n            HANDLER,\n            null\n        ).updateThreadMetadata(getSharedAdminClientId(CLIENT_ID));\n\n        consumer.schedulePollTask(() -> {\n            thread.setState(StreamThread.State.PARTITIONS_REVOKED);\n            thread.rebalanceListener().onPartitionsRevoked(assignedPartitions);\n        });\n\n        thread.setState(StreamThread.State.STARTING);\n        assertThrows(TaskMigratedException.class, thread::runOnce);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2210,"status":"M"}],"commitId":"4710a491463a91ec12c670ea50c139fc14134e80","commitMessage":"@@@KAFKA-12648: Pt. 2 - Introduce TopologyMetadata to wrap InternalTopologyBuilders of named topologies (#10683)\n\nPt. 1: #10609\nPt. 2: #10683\nPt. 3: #10788\n\nThe TopologyMetadata is next up after Pt. 1 #10609. This PR sets up the basic architecture for running an app with multiple NamedTopologies.  though the APIs to add/remove them dynamically are not implemented until Pt. 3\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Walker Carlson <wcarlson@confluent.io>","date":"2021-07-29 02:18:56","modifiedFileCount":"56","status":"M","submitter":"A. Sophie Blee-Goldman"}]
