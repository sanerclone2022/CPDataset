[{"authorTime":"2017-08-18 05:02:10","codes":[{"authorDate":"2017-08-18 05:02:10","commitOrder":2,"curCode":"    public void shouldRestoreThenDeleteOnRestoreAll() throws Exception {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        subject.init(context, subject);\n        \n        context.restore(subject.name(), entries);\n\n        assertEquals(subject.get(\"1\"), \"a\");\n        assertEquals(subject.get(\"2\"), \"b\");\n        assertEquals(subject.get(\"3\"), \"c\");\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), (byte[]) null));\n\n        context.restore(subject.name(), entries);\n\n        final KeyValueIterator<String, String> iterator = subject.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(iterator.next().key);\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","date":"2017-08-18 05:02:10","endLine":267,"groupId":"16426","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRestoreThenDeleteOnRestoreAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/8762d249fe2b1b6838e1ee21b7a67ae5ff96a9.src","preCode":"    public void shouldRestoreThenDeleteOnRestoreAll() throws Exception {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        subject.init(context, subject);\n        \n        context.restore(subject.name(), entries);\n\n        assertEquals(subject.get(\"1\"), \"a\");\n        assertEquals(subject.get(\"2\"), \"b\");\n        assertEquals(subject.get(\"3\"), \"c\");\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), (byte[]) null));\n\n        context.restore(subject.name(), entries);\n\n        final KeyValueIterator<String, String> iterator = subject.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(iterator.next().key);\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"MB"},{"authorDate":"2017-08-18 05:02:10","commitOrder":2,"curCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() throws UnsupportedEncodingException {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), \"a\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        return entries;\n    }\n","date":"2017-08-18 05:02:10","endLine":339,"groupId":"18991","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getKeyValueEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/8762d249fe2b1b6838e1ee21b7a67ae5ff96a9.src","preCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() throws UnsupportedEncodingException {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), \"a\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        return entries;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"B"}],"commitId":"efe4f6540a3c26371c88b3f956bbd4abfe9dc52e","commitMessage":"@@@KAFKA-5733: RocksDB bulk load with lower number of levels\n\nThis is to complete Bill's PR #3664 on KAFKA-5733.  incorporating the suggestion in https://github.com/facebook/rocksdb/issues/2734.\n\nSome minor changes: move `open = true` in `openDB`.\n\nAuthor: Bill Bejeck <bill@confluent.io>\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Damian Guy <damian.guy@gmail.com>\n\nCloses #3681 from guozhangwang/K5733-rocksdb-bulk-load\n","date":"2017-08-18 05:02:10","modifiedFileCount":"3","status":"M","submitter":"Bill Bejeck"},{"authorTime":"2017-08-18 05:02:10","codes":[{"authorDate":"2018-02-09 05:21:56","commitOrder":3,"curCode":"    public void shouldRestoreThenDeleteOnRestoreAll() throws Exception {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        subject.init(context, subject);\n\n        context.restore(subject.name(), entries);\n\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                subject.get(new Bytes(stringSerializer.serialize(null, \"1\")))),\n            \"a\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                subject.get(new Bytes(stringSerializer.serialize(null, \"2\")))),\n            \"b\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                subject.get(new Bytes(stringSerializer.serialize(null, \"3\")))),\n            \"c\");\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), (byte[]) null));\n\n        context.restore(subject.name(), entries);\n\n        final KeyValueIterator<Bytes, byte[]> iterator = subject.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(stringDeserializer.deserialize(null, iterator.next().key.get()));\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","date":"2018-02-09 05:21:56","endLine":322,"groupId":"6647","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRestoreThenDeleteOnRestoreAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/e893b62351f51bd21543a624cab6c5a131bfb8.src","preCode":"    public void shouldRestoreThenDeleteOnRestoreAll() throws Exception {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        subject.init(context, subject);\n\n        context.restore(subject.name(), entries);\n\n        assertEquals(subject.get(\"1\"), \"a\");\n        assertEquals(subject.get(\"2\"), \"b\");\n        assertEquals(subject.get(\"3\"), \"c\");\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), (byte[]) null));\n\n        context.restore(subject.name(), entries);\n\n        final KeyValueIterator<String, String> iterator = subject.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(iterator.next().key);\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"},{"authorDate":"2017-08-18 05:02:10","commitOrder":3,"curCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() throws UnsupportedEncodingException {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), \"a\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        return entries;\n    }\n","date":"2017-08-18 05:02:10","endLine":339,"groupId":"18991","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getKeyValueEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/8762d249fe2b1b6838e1ee21b7a67ae5ff96a9.src","preCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() throws UnsupportedEncodingException {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), \"a\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        return entries;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"N"}],"commitId":"a1352f8c5a96c8e861c17c8105557428a47f4334","commitMessage":"@@@MINOR: Add missing generics and surpress warning annotations (#4518)\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2018-02-09 05:21:56","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-08-18 05:02:10","codes":[{"authorDate":"2018-02-21 04:46:36","commitOrder":4,"curCode":"    public void shouldRestoreThenDeleteOnRestoreAll() throws Exception {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        rocksDBStore.init(context, rocksDBStore);\n\n        context.restore(rocksDBStore.name(), entries);\n\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"1\")))),\n            \"a\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"2\")))),\n            \"b\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"3\")))),\n            \"c\");\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), (byte[]) null));\n\n        context.restore(rocksDBStore.name(), entries);\n\n        final KeyValueIterator<Bytes, byte[]> iterator = rocksDBStore.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(stringDeserializer.deserialize(null, iterator.next().key.get()));\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","date":"2018-02-21 04:46:36","endLine":335,"groupId":"22024","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRestoreThenDeleteOnRestoreAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/8733656e25e74f791c281e6b9f08377b27c700.src","preCode":"    public void shouldRestoreThenDeleteOnRestoreAll() throws Exception {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        subject.init(context, subject);\n\n        context.restore(subject.name(), entries);\n\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                subject.get(new Bytes(stringSerializer.serialize(null, \"1\")))),\n            \"a\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                subject.get(new Bytes(stringSerializer.serialize(null, \"2\")))),\n            \"b\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                subject.get(new Bytes(stringSerializer.serialize(null, \"3\")))),\n            \"c\");\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), (byte[]) null));\n\n        context.restore(subject.name(), entries);\n\n        final KeyValueIterator<Bytes, byte[]> iterator = subject.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(stringDeserializer.deserialize(null, iterator.next().key.get()));\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"},{"authorDate":"2017-08-18 05:02:10","commitOrder":4,"curCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() throws UnsupportedEncodingException {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), \"a\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        return entries;\n    }\n","date":"2017-08-18 05:02:10","endLine":339,"groupId":"18991","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getKeyValueEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/8762d249fe2b1b6838e1ee21b7a67ae5ff96a9.src","preCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() throws UnsupportedEncodingException {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), \"a\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        return entries;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"N"}],"commitId":"256708dbbb7204e4025f2ca74eceea1170236255","commitMessage":"@@@KAFKA-4651: improve test coverage of stores (#4555)\n\nWorking on increasing the coverage of stores in unit tests.  \nStarted with `InMemoryKeyValueLoggedStore` \n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-02-21 04:46:36","modifiedFileCount":"7","status":"M","submitter":"Bill Bejeck"},{"authorTime":"2017-08-18 05:02:10","codes":[{"authorDate":"2018-06-13 02:12:07","commitOrder":5,"curCode":"    public void shouldRestoreThenDeleteOnRestoreAll() throws Exception {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        rocksDBStore.init(context, rocksDBStore);\n\n        context.restore(rocksDBStore.name(), entries);\n\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"1\")))),\n            \"a\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"2\")))),\n            \"b\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"3\")))),\n            \"c\");\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), null));\n\n        context.restore(rocksDBStore.name(), entries);\n\n        final KeyValueIterator<Bytes, byte[]> iterator = rocksDBStore.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(stringDeserializer.deserialize(null, iterator.next().key.get()));\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","date":"2018-06-13 02:12:07","endLine":346,"groupId":"20173","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRestoreThenDeleteOnRestoreAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/d877af5d6e14344b22815857ef7322983ec322.src","preCode":"    public void shouldRestoreThenDeleteOnRestoreAll() throws Exception {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        rocksDBStore.init(context, rocksDBStore);\n\n        context.restore(rocksDBStore.name(), entries);\n\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"1\")))),\n            \"a\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"2\")))),\n            \"b\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"3\")))),\n            \"c\");\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), (byte[]) null));\n\n        context.restore(rocksDBStore.name(), entries);\n\n        final KeyValueIterator<Bytes, byte[]> iterator = rocksDBStore.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(stringDeserializer.deserialize(null, iterator.next().key.get()));\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"},{"authorDate":"2017-08-18 05:02:10","commitOrder":5,"curCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() throws UnsupportedEncodingException {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), \"a\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        return entries;\n    }\n","date":"2017-08-18 05:02:10","endLine":339,"groupId":"18991","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getKeyValueEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/8762d249fe2b1b6838e1ee21b7a67ae5ff96a9.src","preCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() throws UnsupportedEncodingException {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), \"a\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        return entries;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"N"}],"commitId":"7a590612524bd8e899c8d6bbb73daece7f352d46","commitMessage":"@@@KAFKA-7023: Add unit test (#5197)\n\nAdd a unit test that validates after restoreStart.  the options are set with bulk loading configs; and after restoreEnd.  it resumes to the customized configs\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2018-06-13 02:12:07","modifiedFileCount":"3","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-09-19 05:19:41","codes":[{"authorDate":"2018-09-19 05:19:41","commitOrder":6,"curCode":"    public void shouldRestoreThenDeleteOnRestoreAll() {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        rocksDBStore.init(context, rocksDBStore);\n\n        context.restore(rocksDBStore.name(), entries);\n\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"1\")))),\n            \"a\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"2\")))),\n            \"b\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"3\")))),\n            \"c\");\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(UTF_8), \"b\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"3\".getBytes(UTF_8), \"c\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"1\".getBytes(UTF_8), null));\n\n        context.restore(rocksDBStore.name(), entries);\n\n        final KeyValueIterator<Bytes, byte[]> iterator = rocksDBStore.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(stringDeserializer.deserialize(null, iterator.next().key.get()));\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","date":"2018-09-19 05:19:41","endLine":346,"groupId":"20173","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRestoreThenDeleteOnRestoreAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/7b02dda26a48983cbd3120d41ac78adb9f5f01.src","preCode":"    public void shouldRestoreThenDeleteOnRestoreAll() throws Exception {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        rocksDBStore.init(context, rocksDBStore);\n\n        context.restore(rocksDBStore.name(), entries);\n\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"1\")))),\n            \"a\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"2\")))),\n            \"b\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"3\")))),\n            \"c\");\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), null));\n\n        context.restore(rocksDBStore.name(), entries);\n\n        final KeyValueIterator<Bytes, byte[]> iterator = rocksDBStore.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(stringDeserializer.deserialize(null, iterator.next().key.get()));\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":307,"status":"M"},{"authorDate":"2018-09-19 05:19:41","commitOrder":6,"curCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(UTF_8), \"a\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"2\".getBytes(UTF_8), \"b\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"3\".getBytes(UTF_8), \"c\".getBytes(UTF_8)));\n        return entries;\n    }\n","date":"2018-09-19 05:19:41","endLine":432,"groupId":"16309","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getKeyValueEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/7b02dda26a48983cbd3120d41ac78adb9f5f01.src","preCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() throws UnsupportedEncodingException {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(\"UTF-8\"), \"a\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"2\".getBytes(\"UTF-8\"), \"b\".getBytes(\"UTF-8\")));\n        entries.add(new KeyValue<>(\"3\".getBytes(\"UTF-8\"), \"c\".getBytes(\"UTF-8\")));\n        return entries;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"M"}],"commitId":"88823c6016ea2e306340938994d9e122abf3c6c0","commitMessage":"@@@MINOR: cleanup some state store code (#5656)\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2018-09-19 05:19:41","modifiedFileCount":"9","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-09-19 05:19:41","codes":[{"authorDate":"2019-01-31 08:13:19","commitOrder":7,"curCode":"    public void shouldRestoreThenDeleteOnRestoreAll() {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        rocksDBStore.init(context, rocksDBStore);\n\n        context.restore(rocksDBStore.name(), entries);\n\n        assertEquals(\n            \"a\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"1\")))));\n        assertEquals(\n            \"b\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"2\")))));\n        assertEquals(\n            \"c\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"3\")))));\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(UTF_8), \"b\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"3\".getBytes(UTF_8), \"c\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"1\".getBytes(UTF_8), null));\n\n        context.restore(rocksDBStore.name(), entries);\n\n        final KeyValueIterator<Bytes, byte[]> iterator = rocksDBStore.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(stringDeserializer.deserialize(null, iterator.next().key.get()));\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","date":"2019-01-31 08:13:19","endLine":361,"groupId":"16945","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRestoreThenDeleteOnRestoreAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/47/85673a1503c6f46c47178f8abe320d246a9e58.src","preCode":"    public void shouldRestoreThenDeleteOnRestoreAll() {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        rocksDBStore.init(context, rocksDBStore);\n\n        context.restore(rocksDBStore.name(), entries);\n\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"1\")))),\n            \"a\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"2\")))),\n            \"b\");\n        assertEquals(\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"3\")))),\n            \"c\");\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(UTF_8), \"b\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"3\".getBytes(UTF_8), \"c\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"1\".getBytes(UTF_8), null));\n\n        context.restore(rocksDBStore.name(), entries);\n\n        final KeyValueIterator<Bytes, byte[]> iterator = rocksDBStore.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(stringDeserializer.deserialize(null, iterator.next().key.get()));\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"M"},{"authorDate":"2018-09-19 05:19:41","commitOrder":7,"curCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(UTF_8), \"a\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"2\".getBytes(UTF_8), \"b\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"3\".getBytes(UTF_8), \"c\".getBytes(UTF_8)));\n        return entries;\n    }\n","date":"2018-09-19 05:19:41","endLine":432,"groupId":"16309","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getKeyValueEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/7b02dda26a48983cbd3120d41ac78adb9f5f01.src","preCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(UTF_8), \"a\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"2\".getBytes(UTF_8), \"b\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"3\".getBytes(UTF_8), \"c\".getBytes(UTF_8)));\n        return entries;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"N"}],"commitId":"73565b7f679c281f83a5df11e662b0f27cb1e55d","commitMessage":"@@@KAFKA-3522: Add RocksDBTimestampedStore (#6149)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-01-31 08:13:19","modifiedFileCount":"5","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-09-19 05:19:41","codes":[{"authorDate":"2020-10-03 07:49:12","commitOrder":8,"curCode":"    public void shouldRestoreThenDeleteOnRestoreAll() {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n\n        context.restore(rocksDBStore.name(), entries);\n\n        assertEquals(\n            \"a\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"1\")))));\n        assertEquals(\n            \"b\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"2\")))));\n        assertEquals(\n            \"c\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"3\")))));\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(UTF_8), \"b\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"3\".getBytes(UTF_8), \"c\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"1\".getBytes(UTF_8), null));\n\n        context.restore(rocksDBStore.name(), entries);\n\n        final KeyValueIterator<Bytes, byte[]> iterator = rocksDBStore.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(stringDeserializer.deserialize(null, iterator.next().key.get()));\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","date":"2020-10-03 07:49:12","endLine":486,"groupId":"16945","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRestoreThenDeleteOnRestoreAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/ad979d0ddf835cbf47352392024e135584ff88.src","preCode":"    public void shouldRestoreThenDeleteOnRestoreAll() {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        rocksDBStore.init(context, rocksDBStore);\n\n        context.restore(rocksDBStore.name(), entries);\n\n        assertEquals(\n            \"a\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"1\")))));\n        assertEquals(\n            \"b\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"2\")))));\n        assertEquals(\n            \"c\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"3\")))));\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(UTF_8), \"b\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"3\".getBytes(UTF_8), \"c\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"1\".getBytes(UTF_8), null));\n\n        context.restore(rocksDBStore.name(), entries);\n\n        final KeyValueIterator<Bytes, byte[]> iterator = rocksDBStore.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(stringDeserializer.deserialize(null, iterator.next().key.get()));\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":447,"status":"M"},{"authorDate":"2018-09-19 05:19:41","commitOrder":8,"curCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(UTF_8), \"a\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"2\".getBytes(UTF_8), \"b\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"3\".getBytes(UTF_8), \"c\".getBytes(UTF_8)));\n        return entries;\n    }\n","date":"2018-09-19 05:19:41","endLine":432,"groupId":"16309","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getKeyValueEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/7b02dda26a48983cbd3120d41ac78adb9f5f01.src","preCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(UTF_8), \"a\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"2\".getBytes(UTF_8), \"b\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"3\".getBytes(UTF_8), \"c\".getBytes(UTF_8)));\n        return entries;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"N"}],"commitId":"69790a1463bafc1f63e3c288a6636b3f4586c1b4","commitMessage":"@@@KAFKA-10535: Split ProcessorContext into Processor/StateStore/Record Contexts (#9361)\n\nMigrate different components of the old ProcessorContext interface\ninto separate interfaces that are more appropriate for their usages.\nSee KIP-478 for the details.\n\nReviewers: Guozhang Wang <guozhang@apache.org>.  Paul Whalen <pgwhalen@gmail.com>","date":"2020-10-03 07:49:12","modifiedFileCount":"71","status":"M","submitter":"John Roesler"},{"authorTime":"2018-09-19 05:19:41","codes":[{"authorDate":"2021-07-27 07:23:04","commitOrder":9,"curCode":"    public void shouldRestoreThenDeleteOnRestoreAll() {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n\n        context.restore(rocksDBStore.name(), entries);\n\n        assertEquals(\n            \"a\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"1\")))));\n        assertEquals(\n            \"b\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"2\")))));\n        assertEquals(\n            \"c\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"3\")))));\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(UTF_8), \"b\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"3\".getBytes(UTF_8), \"c\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"1\".getBytes(UTF_8), null));\n\n        context.restore(rocksDBStore.name(), entries);\n\n        try (final KeyValueIterator<Bytes, byte[]> iterator = rocksDBStore.all()) {\n            final Set<String> keys = new HashSet<>();\n\n            while (iterator.hasNext()) {\n                keys.add(stringDeserializer.deserialize(null, iterator.next().key.get()));\n            }\n\n            assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n        }\n    }\n","date":"2021-07-27 07:23:04","endLine":662,"groupId":"101299","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRestoreThenDeleteOnRestoreAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/3cbe61a6518ec874fca3d88fd03a031ce3cd72.src","preCode":"    public void shouldRestoreThenDeleteOnRestoreAll() {\n        final List<KeyValue<byte[], byte[]>> entries = getKeyValueEntries();\n\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n\n        context.restore(rocksDBStore.name(), entries);\n\n        assertEquals(\n            \"a\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"1\")))));\n        assertEquals(\n            \"b\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"2\")))));\n        assertEquals(\n            \"c\",\n            stringDeserializer.deserialize(\n                null,\n                rocksDBStore.get(new Bytes(stringSerializer.serialize(null, \"3\")))));\n\n        entries.clear();\n\n        entries.add(new KeyValue<>(\"2\".getBytes(UTF_8), \"b\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"3\".getBytes(UTF_8), \"c\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"1\".getBytes(UTF_8), null));\n\n        context.restore(rocksDBStore.name(), entries);\n\n        final KeyValueIterator<Bytes, byte[]> iterator = rocksDBStore.all();\n        final Set<String> keys = new HashSet<>();\n\n        while (iterator.hasNext()) {\n            keys.add(stringDeserializer.deserialize(null, iterator.next().key.get()));\n        }\n\n        assertThat(keys, equalTo(Utils.mkSet(\"2\", \"3\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":622,"status":"M"},{"authorDate":"2018-09-19 05:19:41","commitOrder":9,"curCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(UTF_8), \"a\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"2\".getBytes(UTF_8), \"b\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"3\".getBytes(UTF_8), \"c\".getBytes(UTF_8)));\n        return entries;\n    }\n","date":"2018-09-19 05:19:41","endLine":432,"groupId":"101299","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getKeyValueEntries","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/7b02dda26a48983cbd3120d41ac78adb9f5f01.src","preCode":"    private List<KeyValue<byte[], byte[]>> getKeyValueEntries() {\n        final List<KeyValue<byte[], byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\"1\".getBytes(UTF_8), \"a\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"2\".getBytes(UTF_8), \"b\".getBytes(UTF_8)));\n        entries.add(new KeyValue<>(\"3\".getBytes(UTF_8), \"c\".getBytes(UTF_8)));\n        return entries;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":426,"status":"N"}],"commitId":"f9aeebed054000934af7555f39085f5caecf34bc","commitMessage":"@@@KAFKA-13123: close KeyValueIterator instances in example code and tests (#11105)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-07-27 07:23:04","modifiedFileCount":"10","status":"M","submitter":"Luke Chen"}]
