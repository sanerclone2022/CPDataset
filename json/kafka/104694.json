[{"authorTime":"2016-08-27 05:00:16","codes":[{"authorDate":"2016-08-27 05:00:16","commitOrder":6,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(connectorFactory.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n        \n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        workerTask.initialize(new TaskConfig(origProps));\n        EasyMock.expectLastCall();\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), connectorFactory, config, offsetBackingStore);\n        worker.start();\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-08-27 05:00:42","endLine":494,"groupId":"6169","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/e29be6499766278af9bb6080ef57edcfa87055.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(connectorFactory.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n        \n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        workerTask.initialize(new TaskConfig(origProps));\n        EasyMock.expectLastCall();\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), connectorFactory, config, offsetBackingStore);\n        worker.start();\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"MB"},{"authorDate":"2016-08-27 05:00:16","commitOrder":6,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(connectorFactory.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        workerTask.initialize(new TaskConfig(origProps));\n        EasyMock.expectLastCall();\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), connectorFactory, config, offsetBackingStore);\n        worker.start();\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-08-27 05:00:42","endLine":560,"groupId":"608","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/e29be6499766278af9bb6080ef57edcfa87055.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(connectorFactory.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        workerTask.initialize(new TaskConfig(origProps));\n        EasyMock.expectLastCall();\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), connectorFactory, config, offsetBackingStore);\n        worker.start();\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":497,"status":"MB"}],"commitId":"71f7e7c3a29e8f7339430837065126256907bd2a","commitMessage":"@@@KAFKA-4042: Contain connector & task start/stop failures within the Worker\n\nInvoke the statusListener.onFailure() callback on start failures so that the statusBackingStore is updated. This involved a fix to the putSafe() functionality which prevented any update that was not preceded by a (non-safe) put() from completing.  so here when a connector or task is transitioning directly to FAILED.\n\nWorker start methods can still throw if the same connector name or task ID is already registered with the worker.  as this condition should not happen.\n\nAuthor: Shikhar Bhushan <shikhar@confluent.io>\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1778 from shikhar/distherder-stayup-take4\n","date":"2016-08-27 05:00:42","modifiedFileCount":"11","status":"M","submitter":"Shikhar Bhushan"},{"authorTime":"2017-01-13 08:14:53","codes":[{"authorDate":"2017-01-13 08:14:53","commitOrder":7,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(connectorFactory.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n        \n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        workerTask.initialize(new TaskConfig(origProps));\n        EasyMock.expectLastCall();\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), connectorFactory, config, offsetBackingStore);\n        worker.start();\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-01-13 08:14:53","endLine":482,"groupId":"605","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4e/90b450127488c2efeac63192cfcf7480a4c189.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(connectorFactory.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n        \n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        workerTask.initialize(new TaskConfig(origProps));\n        EasyMock.expectLastCall();\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), connectorFactory, config, offsetBackingStore);\n        worker.start();\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"},{"authorDate":"2017-01-13 08:14:53","commitOrder":7,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(connectorFactory.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        workerTask.initialize(new TaskConfig(origProps));\n        EasyMock.expectLastCall();\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), connectorFactory, config, offsetBackingStore);\n        worker.start();\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-01-13 08:14:53","endLine":549,"groupId":"608","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4e/90b450127488c2efeac63192cfcf7480a4c189.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(connectorFactory.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        workerTask.initialize(new TaskConfig(origProps));\n        EasyMock.expectLastCall();\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), connectorFactory, config, offsetBackingStore);\n        worker.start();\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":485,"status":"M"}],"commitId":"2f904883237c476fd82a202f7ddda93fe56eef36","commitMessage":"@@@KAFKA-3209: KIP-66: single message transforms\n\nBesides API and runtime changes.  this PR also includes 2 data transformations (`InsertField`.  `HoistToStruct`) and 1 routing transformation (`TimestampRouter`).\n\nThere is some gnarliness in `ConnectorConfig` / `ConfigDef` around creating.  parsing and validating a dynamic `ConfigDef`.\n\nAuthor: Shikhar Bhushan <shikhar@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #2299 from shikhar/smt-2017\n","date":"2017-01-13 08:14:53","modifiedFileCount":"16","status":"M","submitter":"Shikhar Bhushan"},{"authorTime":"2017-05-19 01:39:15","codes":[{"authorDate":"2017-05-19 01:39:15","commitOrder":8,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        workerTask.initialize(new TaskConfig(origProps));\n        EasyMock.expectLastCall();\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-05-19 01:39:15","endLine":588,"groupId":"622","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cc/c7e15a4e8db6a3a529425dc3bdd4b91dfb0cf0.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(connectorFactory.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n        \n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        workerTask.initialize(new TaskConfig(origProps));\n        EasyMock.expectLastCall();\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), connectorFactory, config, offsetBackingStore);\n        worker.start();\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":524,"status":"M"},{"authorDate":"2017-05-19 01:39:15","commitOrder":8,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        workerTask.initialize(new TaskConfig(origProps));\n        EasyMock.expectLastCall();\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-05-19 01:39:15","endLine":669,"groupId":"622","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cc/c7e15a4e8db6a3a529425dc3bdd4b91dfb0cf0.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(connectorFactory.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        workerTask.initialize(new TaskConfig(origProps));\n        EasyMock.expectLastCall();\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), connectorFactory, config, offsetBackingStore);\n        worker.start();\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"M"}],"commitId":"45f2261763eac5caaebf860daab32ef5337c9293","commitMessage":"@@@KAFKA-3487: Support classloading isolation in Connect (KIP-146)\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3028 from kkonstantine/KAFKA-3487-Support-classloading-isolation-in-Connect\n","date":"2017-05-19 01:39:15","modifiedFileCount":"26","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2017-06-14 09:32:17","codes":[{"authorDate":"2017-06-14 09:32:17","commitOrder":9,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-06-14 09:34:18","endLine":626,"groupId":"622","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7f/ad7c1862b570ee993027359f15d1e7785aa294.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n        workerTask.initialize(new TaskConfig(origProps));\n        EasyMock.expectLastCall();\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":550,"status":"M"},{"authorDate":"2017-06-14 09:32:17","commitOrder":9,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-06-14 09:34:18","endLine":719,"groupId":"622","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7f/ad7c1862b570ee993027359f15d1e7785aa294.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        workerTask.initialize(new TaskConfig(origProps));\n        EasyMock.expectLastCall();\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"M"}],"commitId":"179d574a39fe6ab13501de23c0689356da3e19aa","commitMessage":"@@@MINOR: Verify mocks in all WorkerTest tests and don't unnecessarily mockStatic the Plugins class\n\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Randall Hauch <rhauch@gmail.com>.  Ismael Juma <ismael@juma.me.uk>\n\nCloses #3319 from ewencp/minor-worker-test-cleanup\n","date":"2017-06-14 09:34:18","modifiedFileCount":"1","status":"M","submitter":"Ewen Cheslack-Postava"},{"authorTime":"2017-06-14 09:32:17","codes":[{"authorDate":"2017-09-22 11:12:08","commitOrder":10,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters(true);\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-22 11:12:08","endLine":629,"groupId":"622","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/b07beb62dcbb1568908923e5a09459fbaccb99.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"M"},{"authorDate":"2017-06-14 09:32:17","commitOrder":10,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-06-14 09:34:18","endLine":719,"groupId":"622","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7f/ad7c1862b570ee993027359f15d1e7785aa294.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"N"}],"commitId":"7c988a3c8bc9429c1f28f9c29dafed185cec1a67","commitMessage":"@@@KAFKA-5330: Use per-task converters in Connect\n\nInstead of sharing the same converter instance within the worker.  use a converter per task.\n\nMore details:\n- https://github.com/confluentinc/schema-registry/issues/514\n- https://issues.apache.org/jira/browse/KAFKA-5330\n\nAuthor: Thibaud Chardonnens <Thibaud.Chardonnens@swisscom.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3196 from tbcdns/KAFKA-5330\n","date":"2017-09-22 11:12:08","modifiedFileCount":"2","status":"M","submitter":"Thibaud Chardonnens"},{"authorTime":"2017-09-27 13:23:37","codes":[{"authorDate":"2017-09-27 13:23:37","commitOrder":11,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters(true);\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-27 13:23:37","endLine":639,"groupId":"622","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/23b0960e2379de1f2f65401bd4d3b7bdee829d.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters(true);\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":562,"status":"M"},{"authorDate":"2017-09-27 13:23:37","commitOrder":11,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-09-27 13:23:37","endLine":733,"groupId":"622","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/23b0960e2379de1f2f65401bd4d3b7bdee829d.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":642,"status":"M"}],"commitId":"73cc416664dbc8e1442f70cb3c4cd8f4d365ea50","commitMessage":"@@@KAFKA-5900: Add task metrics common to both sink and source tasks\n\nAdded metrics that are common to both sink and source tasks.\n\nMarked as \"**WIP**\" since this PR is built upon #3864.  and will need to be rebased once that has been merged into `trunk`. However.  I would still appreciate initial reviews since this PR is largely additive.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3911 from rhauch/kafka-5900\n","date":"2017-09-27 13:23:37","modifiedFileCount":"16","status":"M","submitter":"Randall Hauch"},{"authorTime":"2017-10-06 02:23:11","codes":[{"authorDate":"2017-10-06 02:23:11","commitOrder":12,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters(true);\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":685,"groupId":"622","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/c65df7ff4fa66761652de4c0aaa85b5e3e155f.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters(true);\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        worker.stop();\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"M"},{"authorDate":"2017-10-06 02:23:11","commitOrder":12,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":783,"groupId":"622","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/c65df7ff4fa66761652de4c0aaa85b5e3e155f.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":688,"status":"M"}],"commitId":"a47bfbcae050659d32f777ed2f4b26dda5fbdbbd","commitMessage":"@@@KAFKA-5903: Added Connect metrics to the worker and distributed herder (KIP-196)\n\nAdded metrics to the Connect worker and rebalancing metrics to the distributed herder.\n\nThis is built on top of #3987.  and I can rebase this PR once that is merged.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4011 from rhauch/kafka-5903\n","date":"2017-10-06 02:23:11","modifiedFileCount":"13","status":"M","submitter":"Randall Hauch"},{"authorTime":"2018-02-01 02:40:24","codes":[{"authorDate":"2018-02-01 02:40:24","commitOrder":13,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters(true);\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-02-01 02:40:24","endLine":675,"groupId":"622","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2c/04b88c6d2e717f653733699f86bcbc6508dc4a.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters(true);\n        expectStartStorage();\n\n        \r\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":597,"status":"M"},{"authorDate":"2018-02-01 02:40:24","commitOrder":13,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-02-01 02:40:24","endLine":773,"groupId":"622","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2c/04b88c6d2e717f653733699f86bcbc6508dc4a.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        TestSourceTask task = PowerMock.createMock(TestSourceTask.class);\n        WorkerSourceTask workerTask = PowerMock.createMock(WorkerSourceTask.class);\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":678,"status":"M"}],"commitId":"4c48942f9d9e1428e21f934746cb7ce22b3df746","commitMessage":"@@@KAFKA-5142: Add Connect support for message headers (KIP-145)\n\n**[KIP-145](https://cwiki.apache.org/confluence/display/KAFKA/KIP-145+-+Expose+Record+Headers+in+Kafka+Connect) has been accepted.  and this PR implements KIP-145 except without the SMTs.**\n\nChanged the Connect API and runtime to support message headers as described in [KIP-145](https://cwiki.apache.org/confluence/display/KAFKA/KIP-145+-+Expose+Record+Headers+in+Kafka+Connect).\n\nThe new `Header` interface defines an immutable representation of a Kafka header (key-value pair) with support for the Connect value types and schemas. This interface provides methods for easily converting between many of the built-in primitive.  structured.  and logical data types.\n\nThe new `Headers` interface defines an ordered collection of headers and is used to track all headers associated with a `ConnectRecord` (and thus `SourceRecord` and `SinkRecord`). This does allow multiple headers with the same key. The `Headers` contains methods for adding.  removing.  finding.  and modifying headers. Convenience methods allow connectors and transforms to easily use and modify the headers for a record.\n\nA new `HeaderConverter` interface is also defined to enable the Connect runtime framework to be able to serialize and deserialize headers between the in-memory representation and Kafka?s byte[] representation. A new `SimpleHeaderConverter` implementation has been added.  and this serializes to strings and deserializes by inferring the schemas (`Struct` header values are serialized without the schemas.  so they can only be deserialized as `Map` instances without a schema.) The `StringConverter`.  `JsonConverter`.  and `ByteArrayConverter` have all been extended to also be `HeaderConverter` implementations. Each connector can be configured with a different header converter.  although by default the `SimpleHeaderConverter` is used to serialize header values as strings without schemas.\n\nUnit and integration tests are added for `ConnectHeader` and `ConnectHeaders`.  the two implementation classes for headers. Additional test methods are added for the methods added to the `Converter` implementations. Finally.  the `ConnectRecord` object is already used heavily.  so only limited tests need to be added while quite a few of the existing tests already cover the changes.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Arjun Satish <arjun@confluent.io>.  Ted Yu <yuzhihong@gmail.com>.  Magesh Nandakumar <magesh.n.kumar@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4319 from rhauch/kafka-5142-b\n","date":"2018-02-01 02:40:24","modifiedFileCount":"21","status":"M","submitter":"Randall Hauch"},{"authorTime":"2018-02-10 07:44:55","codes":[{"authorDate":"2018-02-10 07:44:55","commitOrder":14,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-02-10 07:47:44","endLine":694,"groupId":"16568","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f0/62436f0e01d90fe39df1a2eb81c811ec28a66b.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters(true);\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":610,"status":"M"},{"authorDate":"2018-02-10 07:44:55","commitOrder":14,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-02-10 07:47:44","endLine":796,"groupId":"16568","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f0/62436f0e01d90fe39df1a2eb81c811ec28a66b.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                EasyMock.anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                EasyMock.anyObject(KafkaProducer.class),\n                EasyMock.anyObject(OffsetStorageReader.class),\n                EasyMock.anyObject(OffsetStorageWriter.class),\n                EasyMock.anyObject(WorkerConfig.class),\n                EasyMock.anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                EasyMock.anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n        \r\n        \r\n        \r\n        \r\n        \r\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n        assertEquals(\"foo\", keyConverter.getValue().configs.get(\"extra.config\"));\n        assertEquals(\"bar\", valueConverter.getValue().configs.get(\"extra.config\"));\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":697,"status":"M"}],"commitId":"976a3b0cc858d4a13cf8b34b325aefc8d706be9e","commitMessage":"@@@KAFKA-6513: Corrected how Converters and HeaderConverters are instantiated and configured\n\nThe commits for KIP-145 (KAFKA-5142) changed how the Connect workers instantiate and configure the Converters.  and also added the ability to do the same for the new HeaderConverters. However.  the last few commits removed the default value for the `converter.type` property for Converters and HeaderConverters.  and this broke how the internal converters were being created.\n\nThis change corrects the behavior so that the `converter.type` property is always set by the worker (or by the Plugins class).  which means the existing Converter implementations will not have to do this. The built-in JsonConverter.  ByteArrayConverter.  and StringConverter also implement HeaderConverter which implements Configurable.  but the Worker and Plugins methods do not yet use the `Configurable.configure(Map)` method and instead still use the `Converter.configure(Map. boolean)`.\n\nSeveral tests were modified.  and a new PluginsTest was added to verify the new behavior in Plugins for instantiating and configuring the Converter and HeaderConverter instances.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4512 from rhauch/kafka-6513\n","date":"2018-02-10 07:47:44","modifiedFileCount":"6","status":"M","submitter":"Randall Hauch"},{"authorTime":"2018-05-31 02:39:45","codes":[{"authorDate":"2018-05-31 02:39:45","commitOrder":15,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain(Collections.emptyList(), RetryWithToleranceOperator.NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-05-31 02:39:45","endLine":697,"groupId":"16568","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d2/9eef5ed691621c1374ac7e9b7ccc541fdeae37.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":612,"status":"M"},{"authorDate":"2018-05-31 02:39:45","commitOrder":15,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain(Collections.emptyList(), RetryWithToleranceOperator.NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-05-31 02:39:45","endLine":800,"groupId":"16568","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d2/9eef5ed691621c1374ac7e9b7ccc541fdeae37.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(TransformationChain.<SourceRecord>noOp()),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":700,"status":"M"}],"commitId":"f8dfbb067caa797c19494e12da6b4c6786980f73","commitMessage":"@@@KAFKA-6738: Implement error handling for source and sink tasks (KIP-298)\n\nThis PR implements the features described in this KIP: https://cwiki.apache.org/confluence/display/KAFKA/KIP-298%3A+Error+Handling+in+Connect\n\nThis PR changes the Connect framework to allow it to automatically deal with errors encountered while processing records in a Connector. The following behavior changes are introduced here:\n\n**Retry on Failure**: Retry the failed operation a configurable number of times.  with backoff between each retry.\n**Task Tolerance Limits**: Tolerate a configurable number of failures in a task.\n\nWe also add the following ways to report errors.  along with sufficient context to simplify the debugging process:\n\n**Log Error Context**: The error information along with processing context is logged along with standard application logs.\n**Dead Letter Queue**: Produce the original message into a Kafka topic (applicable only to sink connectors).\n\nNew **metrics** which will monitor the number of failures.  and the behavior of the response handler are added.\n\nThe changes proposed here **are backward compatible**. The current behavior in Connect is to kill the task on the first error in any stage. This will remain the default behavior if the connector does not override any of the new configurations which are provided as part of this feature.\n\nTesting: added multiple unit tests to test the retry and tolerance logic.\n\nAuthor: Arjun Satish <arjun@confluent.io>\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Magesh Nandakumar <magesh.n.kumar@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #5065 from wicknicks/KAFKA-6378\n","date":"2018-05-31 02:39:45","modifiedFileCount":"12","status":"M","submitter":"Arjun Satish"},{"authorTime":"2018-05-31 05:43:11","codes":[{"authorDate":"2018-05-31 05:43:11","commitOrder":16,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain(Collections.emptyList(), RetryWithToleranceOperator.NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-05-31 05:43:11","endLine":700,"groupId":"16568","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6f/a7ed11b9e1ba1a50e799a350b99629aef92dd6.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain(Collections.emptyList(), RetryWithToleranceOperator.NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":614,"status":"M"},{"authorDate":"2018-05-31 05:43:11","commitOrder":16,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain(Collections.emptyList(), RetryWithToleranceOperator.NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-05-31 05:43:11","endLine":804,"groupId":"16568","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6f/a7ed11b9e1ba1a50e799a350b99629aef92dd6.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain(Collections.emptyList(), RetryWithToleranceOperator.NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":703,"status":"M"}],"commitId":"08e8facdc9fce3a9195f5f646b49f55ffa043c73","commitMessage":"@@@KAFKA-6886: Externalize secrets from Connect configs (KIP-297)\n\nThis commit allows secrets in Connect configs to be externalized and replaced with variable references of the form `${provider:[path:]key}`.  where the \"path\" is optional.\n\nThere are 2 main additions to `org.apache.kafka.common.config`: a `ConfigProvider` and a `ConfigTransformer`.  The `ConfigProvider` is an interface that allows key-value pairs to be provided by an external source for a given \"path\".  An a TTL can be associated with the key-value pairs returned from the path.  The `ConfigTransformer` will use instances of `ConfigProvider` to replace variable references in a set of configuration values.\n\nIn the Connect framework.  `ConfigProvider` classes can be specified in the worker config.  and then variable references can be used in the connector config.  In addition.  the herder can be configured to restart connectors (or not) based on the TTL returned from a `ConfigProvider`.  The main class that performs restarts and transformations is `WorkerConfigTransformer`.\n\nFinally.  a `configs()` method has been added to both `SourceTaskContext` and `SinkTaskContext`.  This allows connectors to get configs with variables replaced by the latest values from instances of `ConfigProvider`.\n\nMost of the other changes in the Connect framework are threading various objects through classes to enable the above functionality.\n\nAuthor: Robert Yokota <rayokota@gmail.com>\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #5068 from rayokota/KAFKA-6886-connect-secrets\n","date":"2018-05-31 05:43:11","modifiedFileCount":"30","status":"M","submitter":"Robert Yokota"},{"authorTime":"2018-06-06 04:59:15","codes":[{"authorDate":"2018-06-06 04:59:15","commitOrder":17,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-06-06 04:59:15","endLine":701,"groupId":"16568","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/77/238e9aaad11d734a0493febaec1987269e4737.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain(Collections.emptyList(), RetryWithToleranceOperator.NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":615,"status":"M"},{"authorDate":"2018-06-06 04:59:15","commitOrder":17,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-06-06 04:59:15","endLine":805,"groupId":"16568","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/77/238e9aaad11d734a0493febaec1987269e4737.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain(Collections.emptyList(), RetryWithToleranceOperator.NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"M"}],"commitId":"faa15b8b758ed4e3f93aaa4d49a941562bdc86bb","commitMessage":"@@@KAFKA-6981: Move the error handling configuration properties into the ConnectorConfig and SinkConnectorConfig classes (KIP-298)\n\nMove the error handling configuration properties into the ConnectorConfig and SinkConnectorConfig classes.  and refactor the tests and classes to use these new properties.\n\nTesting: Unit tests and running the connect-standalone script with a file sink connector.\n\nAuthor: Arjun Satish <arjun@confluent.io>\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Magesh Nandakumar <magesh.n.kumar@gmail.com>.  Robert Yokota <rayokota@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #5125 from wicknicks/KAFKA-6981\n","date":"2018-06-06 04:59:15","modifiedFileCount":"17","status":"M","submitter":"Arjun Satish"},{"authorTime":"2018-11-13 14:18:59","codes":[{"authorDate":"2018-11-13 14:18:59","commitOrder":18,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-11-13 14:18:59","endLine":701,"groupId":"16568","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/cacc469daf7144b8ba708c34870986c5429648.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":615,"status":"M"},{"authorDate":"2018-11-13 14:18:59","commitOrder":18,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-11-13 14:18:59","endLine":805,"groupId":"16568","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/cacc469daf7144b8ba708c34870986c5429648.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":704,"status":"M"}],"commitId":"12f310d50e7f5b1c18c4f61a119a6cd830da3bc0","commitMessage":"@@@KAFKA-7612: Fix javac warnings and enable warnings as errors (#5900)\n\n- Use Xlint:all with 3 exclusions (filed KAFKA-7613 to remove the exclusions)\n- Use the same javac options when compiling tests (seems accidental that\nwe didn't do this before)\n- Replaced several deprecated method calls with non-deprecated ones:\n  - `KafkaConsumer.poll(long)` and `KafkaConsumer.close(long)`\n  - `Class.newInstance` and `new Integer/Long` (deprecated since Java 9)\n  - `scala.Console` (deprecated in Scala 2.11)\n  - `PartitionData` taking a timestamp (one of them seemingly a bug)\n  - `JsonMappingException` single parameter constructor\n- Fix unnecessary usage of raw types in several places.\n- Add @SuppressWarnings for deprecations.  unchecked and switch fallthrough in\nseveral places.\n- Scala clean-ups (var -> val.  ETA expansion warnings.  avoid reflective calls)\n- Use lambdas to simplify code in a few places\n- Add @SafeVarargs.  fix varargs usage and remove unnecessary `Utils.mkList` method\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Manikumar Reddy <manikumar.reddy@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Stanislav Kozlovski <stanislav_kozlovski@outlook.com>","date":"2018-11-13 14:18:59","modifiedFileCount":"146","status":"M","submitter":"Ismael Juma"},{"authorTime":"2019-04-04 04:00:05","codes":[{"authorDate":"2019-04-04 04:00:05","commitOrder":19,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-04-04 04:00:05","endLine":724,"groupId":"16568","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ee/f10f0d59094f5283ec95028b3b8b26d65c757d.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":639,"status":"M"},{"authorDate":"2019-04-04 04:00:05","commitOrder":19,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-04-04 04:00:05","endLine":827,"groupId":"16568","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ee/f10f0d59094f5283ec95028b3b8b26d65c757d.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        workerTask.run();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":727,"status":"M"}],"commitId":"d3316bc6a7834db9eef6dde21728891ba6b07b37","commitMessage":"@@@KAFKA-8126: Flaky Test org.apache.kafka.connect.runtime.WorkerTest.testAddRemoveTask (#6475)\n\nChanged the WorkerTest to use a mock Executor.\n\nAuthor: Attila Doroszlai <adoroszlai@apache.org>\nReviewer: Randall Hauch <rhauch@gmail.com>","date":"2019-04-04 04:00:05","modifiedFileCount":"2","status":"M","submitter":"Doroszlai Attila"},{"authorTime":"2019-05-17 16:37:32","codes":[{"authorDate":"2019-05-17 16:37:32","commitOrder":20,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-05-17 16:37:32","endLine":734,"groupId":"16568","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9c/b83eb5e87714874f25ed2b293e47e6b790a02f.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":647,"status":"M"},{"authorDate":"2019-05-17 16:37:32","commitOrder":20,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-05-17 16:37:32","endLine":840,"groupId":"16568","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9c/b83eb5e87714874f25ed2b293e47e6b790a02f.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":737,"status":"M"}],"commitId":"2e91a310d7bf9e7d4d46b0bc0ca0c11cb4531e10","commitMessage":"@@@KAFKA-8265: Initial implementation for ConnectorClientConfigPolicy to enable overrides (KIP-458) (#6624)\n\nImplementation to enable policy for Connector Client config overrides. This is\nimplemented per the KIP-458.\n\nReviewers: Randall Hauch <rhauch@gmail.com>","date":"2019-05-17 16:37:32","modifiedFileCount":"22","status":"M","submitter":"Magesh Nandakumar"},{"authorTime":"2020-01-30 13:54:21","codes":[{"authorDate":"2020-01-30 13:54:21","commitOrder":21,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class),\n                anyObject(StatusBackingStore.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-01-30 13:54:21","endLine":919,"groupId":"19531","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/16/a0a765ac9fa7e29dd8ec161b0f9b59668c460f.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":830,"status":"M"},{"authorDate":"2020-01-30 13:54:21","commitOrder":21,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class),\n                anyObject(StatusBackingStore.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-01-30 13:54:21","endLine":1027,"groupId":"19531","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/16/a0a765ac9fa7e29dd8ec161b0f9b59668c460f.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":922,"status":"M"}],"commitId":"7746301c2643e0037bff3bcb84c41d512937e4c9","commitMessage":"@@@KAFKA-9422: Track the set of topics a connector is using (KIP-558) (#8017)\n\nThis feature corresponds to KIP-558 and extends how the internal status topic (set via `status.storage.topic` distributed worker config) is used to include information that allows Kafka Connect to keep track which topics a connector is using.\n\nThe set of topics a connector is actively using.  is exposed via a new endpoint that is added to the REST API of Connect workers.\n* A `GET /connectors/{name}/topics` request will return the set of topics that have been recorded as active since a connector started or since the set of topics was reset for this connector.\n\nAn additional endpoints allows users to reset the set of active topics for a connector via the second endpoint that this feature is adding:\n* A `PUT /connectors/{name}/topics/reset` request clears the set of active topics. An operator may enable or disable this feature by setting `topic.tracking.enable` (true by default).\n\nThe `topic.tracking.enable` worker config property (true by default) allows an operator to enable/disable the entire feature. Or if the feature is enabled.  the `topic.tracking.allow.reset` worker config property (true by default) allows an operator to control whether reset requests submitted to the Connect REST API are allowed.\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\nReviewer: Randall Hauch <rhauch@gmail.com>","date":"2020-01-30 13:54:21","modifiedFileCount":"17","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2020-05-01 01:33:10","codes":[{"authorDate":"2020-05-01 01:33:10","commitOrder":22,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class),\n                anyObject(StatusBackingStore.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-01 01:33:10","endLine":947,"groupId":"19531","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/8c0bccaffd3155860b183e57fb194c0ae41592.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class),\n                anyObject(StatusBackingStore.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":857,"status":"M"},{"authorDate":"2020-05-01 01:33:10","commitOrder":22,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class),\n                anyObject(StatusBackingStore.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-01 01:33:10","endLine":1056,"groupId":"19531","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/8c0bccaffd3155860b183e57fb194c0ae41592.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class),\n                anyObject(StatusBackingStore.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":950,"status":"M"}],"commitId":"f92cc85c9f018f353da69a24d950bc281f721781","commitMessage":"@@@KAFKA-9633: Ensure ConfigProviders are closed (#8204)\n\nConfigProvider extends Closeable.  but were not closed in the following contexts:\n* AbstractConfig\n* WorkerConfigTransformer\n* Worker\n\nThis commit ensures that ConfigProviders are close in the above contexts. \n\nIt also adds MockFileConfigProvider.assertClosed()\nGradle executes test classes concurrently.  so MockFileConfigProvider\ncan't simply use a static field to hold its closure state.\nInstead use a protocol whereby the MockFileConfigProvider is configured\nwith some unique ket identifying the test which also used when calling\nassertClosed().\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>","date":"2020-05-01 01:33:10","modifiedFileCount":"6","status":"M","submitter":"Tom Bentley"},{"authorTime":"2020-05-27 13:07:34","codes":[{"authorDate":"2020-05-27 13:07:34","commitOrder":23,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        expectNewWorkerTask();\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-27 13:07:34","endLine":884,"groupId":"19531","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e3/2fcb0d9cefb7b57f4b49865ecaf1d4ed5393bc.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                anyObject(JsonConverter.class),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class),\n                anyObject(StatusBackingStore.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":813,"status":"M"},{"authorDate":"2020-05-27 13:07:34","commitOrder":23,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        expectNewWorkerTask();\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-27 13:07:34","endLine":970,"groupId":"19531","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e3/2fcb0d9cefb7b57f4b49865ecaf1d4ed5393bc.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        Capture<TestConverter> keyConverter = EasyMock.newCapture();\n        Capture<TestConfigurableConverter> valueConverter = EasyMock.newCapture();\n        Capture<HeaderConverter> headerConverter = EasyMock.newCapture();\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        PowerMock.expectNew(\n                WorkerSourceTask.class, EasyMock.eq(TASK_ID),\n                EasyMock.eq(task),\n                anyObject(TaskStatus.Listener.class),\n                EasyMock.eq(TargetState.STARTED),\n                EasyMock.capture(keyConverter),\n                EasyMock.capture(valueConverter),\n                EasyMock.capture(headerConverter),\n                EasyMock.eq(new TransformationChain<>(Collections.emptyList(), NOOP_OPERATOR)),\n                anyObject(KafkaProducer.class),\n                anyObject(OffsetStorageReader.class),\n                anyObject(OffsetStorageWriter.class),\n                anyObject(WorkerConfig.class),\n                anyObject(ClusterConfigState.class),\n                anyObject(ConnectMetrics.class),\n                EasyMock.eq(pluginLoader),\n                anyObject(Time.class),\n                anyObject(RetryWithToleranceOperator.class),\n                anyObject(StatusBackingStore.class))\n                .andReturn(workerTask);\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":887,"status":"M"}],"commitId":"371f14c3c12d2e341ac96bd52393b43a10acfa84","commitMessage":"@@@KAFKA-5295: Allow source connectors to specify topic-specific settings for new topics (KIP-158) (#8722)\n\nKafka Connect workers have been able to create Connect's internal topics using the new admin client for some time now (see KAFKA-4667 for details). However.  tasks of source connectors are still relying upon the broker to auto-create topics with default config settings if they don't exist.  or expect these topics to exist before the connector is deployed.  if their configuration needs to be specialized. \n\nWith the implementation of KIP-158 here.  if `topic.creation.enable=true`.  Kafka Connect will supply the source tasks of connectors that are configured to create topics with an admin client that will allow them to create new topics on-the-fly before writing the first source records to a new topic. Additionally.  each source connector has the opportunity to customize the topic-specific settings of these new topics by defining groups of topic configurations. \n\nThis feature is tested here via unit tests (old tests that have been adjusted and new ones) as well as integration tests.\n\nReviewers: Randall Hauch <rhauch@gmail.com>","date":"2020-05-27 13:07:34","modifiedFileCount":"23","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2020-05-28 09:18:36","codes":[{"authorDate":"2020-05-28 09:18:36","commitOrder":24,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        expectNewWorkerTask();\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n        expectClusterId();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-28 09:18:36","endLine":909,"groupId":"19531","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/ab58f11c3e1da38f9598cd20e229fb716da953.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        expectNewWorkerTask();\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":837,"status":"M"},{"authorDate":"2020-05-28 09:18:36","commitOrder":24,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        expectNewWorkerTask();\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n        expectClusterId();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-05-28 09:18:36","endLine":996,"groupId":"19531","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/ab58f11c3e1da38f9598cd20e229fb716da953.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        expectNewWorkerTask();\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":912,"status":"M"}],"commitId":"9c833f665f349e5c292228f75188f5521282835d","commitMessage":"@@@KAFKA-9960: implement KIP-606 to add metadata context to MetricsReporter (#8691)\n\nImplemented KIP-606 to add metadata context to MetricsReporter.\n\nAuthor: Xiaodong Du <xdu@confluent.io>\nReviewers: David Arthur <mumrah@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Xavier L?aut? <xavier@confluent.io>.  Ryan Pridgeon <ryan.n.pridgeon@gmail.com>","date":"2020-05-28 09:18:36","modifiedFileCount":"35","status":"M","submitter":"xiaodongdu"},{"authorTime":"2020-06-11 11:03:25","codes":[{"authorDate":"2020-06-11 11:03:25","commitOrder":25,"curCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        expectNewWorkerTask();\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        workerTask.removeMetrics();\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n        expectClusterId();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-11 11:03:25","endLine":918,"groupId":"104694","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"testCleanupTasksOnStop","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/51/77acf96ccaaf4f3a7ab0373c351fb546883afb.src","preCode":"    public void testCleanupTasksOnStop() throws Exception {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        expectNewWorkerTask();\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andReturn(true);\n        \r\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n        expectClusterId();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, anyConnectorConfigMap(), origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":843,"status":"M"},{"authorDate":"2020-06-11 11:03:25","commitOrder":25,"curCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        expectNewWorkerTask();\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        workerTask.removeMetrics();\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n        expectClusterId();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-11 11:03:25","endLine":1008,"groupId":"104694","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"testConverterOverrides","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/51/77acf96ccaaf4f3a7ab0373c351fb546883afb.src","preCode":"    public void testConverterOverrides() throws Exception {\n        expectConverters();\n        expectStartStorage();\n        expectFileConfigProvider();\n\n        EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);\n\n        EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);\n        expectNewWorkerTask();\n        Map<String, String> origProps = new HashMap<>();\n        origProps.put(TaskConfig.TASK_CLASS_CONFIG, TestSourceTask.class.getName());\n\n        TaskConfig taskConfig = new TaskConfig(origProps);\n        \r\n        \r\n        \r\n        EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);\n        EasyMock.expect(task.version()).andReturn(\"1.0\");\n\n        workerTask.initialize(taskConfig);\n        EasyMock.expectLastCall();\n\n        \r\n        assertNotNull(taskKeyConverter);\n        assertNotNull(taskValueConverter);\n        assertNotNull(taskHeaderConverter);\n        expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskKeyConverters(ClassLoaderUsage.PLUGINS, taskKeyConverter);\n        expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskValueConverters(ClassLoaderUsage.PLUGINS, taskValueConverter);\n        expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER, null);\n        expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS, taskHeaderConverter);\n\n        EasyMock.expect(executorService.submit(workerTask)).andReturn(null);\n\n        EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);\n        EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName()))\n                .andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader)\n                .times(2);\n\n        EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);\n\n        EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader)\n                .times(2);\n        plugins.connectorClass(WorkerTestConnector.class.getName());\n        EasyMock.expectLastCall().andReturn(WorkerTestConnector.class);\n\n        \r\n        workerTask.stop();\n        EasyMock.expectLastCall();\n        EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);\n        EasyMock.expectLastCall();\n\n        expectStopStorage();\n        expectClusterId();\n\n        PowerMock.replayAll();\n\n        worker = new Worker(WORKER_ID, new MockTime(), plugins, config, offsetBackingStore, executorService,\n                            noneConnectorClientConfigOverridePolicy);\n        worker.herder = herder;\n        worker.start();\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        Map<String, String> connProps = anyConnectorConfigMap();\n        connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG, TestConverter.class.getName());\n        connProps.put(\"key.converter.extra.config\", \"foo\");\n        connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG, TestConfigurableConverter.class.getName());\n        connProps.put(\"value.converter.extra.config\", \"bar\");\n        worker.startTask(TASK_ID, ClusterConfigState.EMPTY, connProps, origProps, taskStatusListener, TargetState.STARTED);\n        assertStatistics(worker, 0, 1);\n        assertEquals(new HashSet<>(Arrays.asList(TASK_ID)), worker.taskIds());\n        worker.stopAndAwaitTask(TASK_ID);\n        assertStatistics(worker, 0, 0);\n        assertEquals(Collections.emptySet(), worker.taskIds());\n        \r\n        worker.stop();\n        assertStatistics(worker, 0, 0);\n\n        \r\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":921,"status":"M"}],"commitId":"775f0d484b6fccc3d985a9d53d86d7a3710c0b22","commitMessage":"@@@KAFKA-9066: Retain metrics for failed tasks (#8502)\n\nAuthor: Chris Egerton <chrise@confluent.io>\nReviewers: Nigel Liang <nigel@nigelliang.com>.  Randall Hauch <rhauch@gmail.com>","date":"2020-06-11 11:03:25","modifiedFileCount":"7","status":"M","submitter":"Chris Egerton"}]
