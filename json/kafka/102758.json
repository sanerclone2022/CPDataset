[{"authorTime":"2018-01-13 07:40:59","codes":[{"authorDate":"2018-01-13 07:40:59","commitOrder":1,"curCode":"    public void testLeftOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-outer\");\n\n        if (cacheEnabled) {\n            leftTable.leftJoin(rightTable, valueJoiner)\n                    .outerJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .peek(new CountingPeek(true))\n                    .to(OUTPUT_TOPIC);\n            runTest(expectedFinalMultiJoinResult, storeName);\n        } else {\n            List<List<String>> expectedResult = Arrays.asList(\n                    null,\n                    null,\n                    null,\n                    Arrays.asList(\"A-null-null\", \"A-a-a\", \"A-a-a\"),\n                    Collections.singletonList(\"B-a-a\"),\n                    Arrays.asList(\"B-b-b\", \"B-b-b\"),\n                    Collections.singletonList(\"null-b\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"C-null-null\", \"C-c-c\", \"C-c-c\"),\n                    Arrays.asList(\"C-null-null\", \"C-null-null\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    null,\n                    Arrays.asList(\"null-d\", \"D-d-d\")\n            );\n\n            leftTable.leftJoin(rightTable, valueJoiner)\n                    .outerJoin(rightTable, valueJoiner, materialized)\n                    .toStream().to(OUTPUT_TOPIC);\n\n            runTest(expectedResult, storeName);\n        }\n    }\n","date":"2018-01-13 07:40:59","endLine":417,"groupId":"19577","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeftOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/eceb097356c4e2f2335829b600dd09e9b799c1.src","preCode":"    public void testLeftOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-outer\");\n\n        if (cacheEnabled) {\n            leftTable.leftJoin(rightTable, valueJoiner)\n                    .outerJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .peek(new CountingPeek(true))\n                    .to(OUTPUT_TOPIC);\n            runTest(expectedFinalMultiJoinResult, storeName);\n        } else {\n            List<List<String>> expectedResult = Arrays.asList(\n                    null,\n                    null,\n                    null,\n                    Arrays.asList(\"A-null-null\", \"A-a-a\", \"A-a-a\"),\n                    Collections.singletonList(\"B-a-a\"),\n                    Arrays.asList(\"B-b-b\", \"B-b-b\"),\n                    Collections.singletonList(\"null-b\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"C-null-null\", \"C-c-c\", \"C-c-c\"),\n                    Arrays.asList(\"C-null-null\", \"C-null-null\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    null,\n                    Arrays.asList(\"null-d\", \"D-d-d\")\n            );\n\n            leftTable.leftJoin(rightTable, valueJoiner)\n                    .outerJoin(rightTable, valueJoiner, materialized)\n                    .toStream().to(OUTPUT_TOPIC);\n\n            runTest(expectedResult, storeName);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"B"},{"authorDate":"2018-01-13 07:40:59","commitOrder":1,"curCode":"    public void testOuterLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-left\");\n\n        if (cacheEnabled) {\n            leftTable.outerJoin(rightTable, valueJoiner)\n                    .leftJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .peek(new CountingPeek(true))\n                    .to(OUTPUT_TOPIC);\n            runTest(expectedFinalMultiJoinResult, storeName);\n        } else {\n            List<List<String>> expectedResult = Arrays.asList(\n                    null,\n                    null,\n                    null,\n                    Arrays.asList(\"A-null-null\", \"A-a-a\", \"A-a-a\"),\n                    Collections.singletonList(\"B-a-a\"),\n                    Arrays.asList(\"B-b-b\", \"B-b-b\"),\n                    Collections.singletonList(\"null-b-b\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"C-null-null\", \"C-c-c\", \"C-c-c\"),\n                    Arrays.asList(\"C-null-null\", \"C-null-null\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"null-d-d\", \"null-d-d\"),\n                    Collections.singletonList(\"D-d-d\")\n            );\n\n            leftTable.outerJoin(rightTable, valueJoiner)\n                    .leftJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .to(OUTPUT_TOPIC);\n\n            runTest(expectedResult, storeName);\n        }\n    }\n","date":"2018-01-13 07:40:59","endLine":495,"groupId":"19577","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOuterLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/eceb097356c4e2f2335829b600dd09e9b799c1.src","preCode":"    public void testOuterLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-left\");\n\n        if (cacheEnabled) {\n            leftTable.outerJoin(rightTable, valueJoiner)\n                    .leftJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .peek(new CountingPeek(true))\n                    .to(OUTPUT_TOPIC);\n            runTest(expectedFinalMultiJoinResult, storeName);\n        } else {\n            List<List<String>> expectedResult = Arrays.asList(\n                    null,\n                    null,\n                    null,\n                    Arrays.asList(\"A-null-null\", \"A-a-a\", \"A-a-a\"),\n                    Collections.singletonList(\"B-a-a\"),\n                    Arrays.asList(\"B-b-b\", \"B-b-b\"),\n                    Collections.singletonList(\"null-b-b\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"C-null-null\", \"C-c-c\", \"C-c-c\"),\n                    Arrays.asList(\"C-null-null\", \"C-null-null\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"null-d-d\", \"null-d-d\"),\n                    Collections.singletonList(\"D-d-d\")\n            );\n\n            leftTable.outerJoin(rightTable, valueJoiner)\n                    .leftJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .to(OUTPUT_TOPIC);\n\n            runTest(expectedResult, storeName);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"B"}],"commitId":"3e21e17a7d3613bfab8c34555c0f598a07cf0675","commitMessage":"@@@MINOR: Improve Join integration test coverage.  PART I\n\n0. Rename `JoinIntegrationTest` to `StreamStreamJoinIntegrationTest`.  which is only for KStream-KStream joins.\n1. Extract the `AbstractJoinIntegrationTest` which is going to be used for all the join integration test classes.  parameterized with and without caching.\n2. Merge `KStreamRepartitionJoinTest.java` into `StreamStreamJoinIntegrationTest.java` with augmented stream-stream join.\n3. Add `TableTableJoinIntegrationTest` with detailed per-step expected results and removed `KTableKTableJoinIntegrationTest`.\n\nFindings of the integration test:\n\n1. Confirmed KAFKA-4309 with caching turned on.\n2. Found bug KAFKA-6398.\n3. Found bug KAFKA-6443.\n4. Found a bug that in CachingKeyValueStore.  we would flush before putting the record into the underlying store.  when the store is going to be used in the downstream processors with flushing it would result in incorrect results.  fixed the issue along with this PR.\n5. Consider a new optimization described in KAFKA-6286.\n\nFuture works including stream-table joins will be in other PRs.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Bill Bejeck <bill@confluent.io>\n\nCloses #4331 from guozhangwang/KMinor-join-integration-tests\n","date":"2018-01-13 07:40:59","modifiedFileCount":"2","status":"B","submitter":"Guozhang Wang"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2018-08-04 04:19:46","commitOrder":2,"curCode":"    public void testLeftOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-outer\");\n\n        if (cacheEnabled) {\n            leftTable.leftJoin(rightTable, valueJoiner)\n                    .outerJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .peek(new CountingPeek(true))\n                    .to(OUTPUT_TOPIC);\n            runTest(expectedFinalMultiJoinResult, storeName);\n        } else {\n            final List<List<String>> expectedResult = Arrays.asList(\n                    null,\n                    null,\n                    null,\n                    Arrays.asList(\"A-null-null\", \"A-a-a\", \"A-a-a\"),\n                    Collections.singletonList(\"B-a-a\"),\n                    Arrays.asList(\"B-b-b\", \"B-b-b\"),\n                    Collections.singletonList(\"null-b\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"C-null-null\", \"C-c-c\", \"C-c-c\"),\n                    Arrays.asList(\"C-null-null\", \"C-null-null\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    null,\n                    Arrays.asList(\"null-d\", \"D-d-d\")\n            );\n\n            leftTable.leftJoin(rightTable, valueJoiner)\n                    .outerJoin(rightTable, valueJoiner, materialized)\n                    .toStream().to(OUTPUT_TOPIC);\n\n            runTest(expectedResult, storeName);\n        }\n    }\n","date":"2018-08-04 04:19:46","endLine":417,"groupId":"19577","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeftOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/d1e3d315af5dce0bfeb0d3cb801e5cf3d97fcd.src","preCode":"    public void testLeftOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-outer\");\n\n        if (cacheEnabled) {\n            leftTable.leftJoin(rightTable, valueJoiner)\n                    .outerJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .peek(new CountingPeek(true))\n                    .to(OUTPUT_TOPIC);\n            runTest(expectedFinalMultiJoinResult, storeName);\n        } else {\n            List<List<String>> expectedResult = Arrays.asList(\n                    null,\n                    null,\n                    null,\n                    Arrays.asList(\"A-null-null\", \"A-a-a\", \"A-a-a\"),\n                    Collections.singletonList(\"B-a-a\"),\n                    Arrays.asList(\"B-b-b\", \"B-b-b\"),\n                    Collections.singletonList(\"null-b\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"C-null-null\", \"C-c-c\", \"C-c-c\"),\n                    Arrays.asList(\"C-null-null\", \"C-null-null\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    null,\n                    Arrays.asList(\"null-d\", \"D-d-d\")\n            );\n\n            leftTable.leftJoin(rightTable, valueJoiner)\n                    .outerJoin(rightTable, valueJoiner, materialized)\n                    .toStream().to(OUTPUT_TOPIC);\n\n            runTest(expectedResult, storeName);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"M"},{"authorDate":"2018-08-04 04:19:46","commitOrder":2,"curCode":"    public void testOuterLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-left\");\n\n        if (cacheEnabled) {\n            leftTable.outerJoin(rightTable, valueJoiner)\n                    .leftJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .peek(new CountingPeek(true))\n                    .to(OUTPUT_TOPIC);\n            runTest(expectedFinalMultiJoinResult, storeName);\n        } else {\n            final List<List<String>> expectedResult = Arrays.asList(\n                    null,\n                    null,\n                    null,\n                    Arrays.asList(\"A-null-null\", \"A-a-a\", \"A-a-a\"),\n                    Collections.singletonList(\"B-a-a\"),\n                    Arrays.asList(\"B-b-b\", \"B-b-b\"),\n                    Collections.singletonList(\"null-b-b\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"C-null-null\", \"C-c-c\", \"C-c-c\"),\n                    Arrays.asList(\"C-null-null\", \"C-null-null\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"null-d-d\", \"null-d-d\"),\n                    Collections.singletonList(\"D-d-d\")\n            );\n\n            leftTable.outerJoin(rightTable, valueJoiner)\n                    .leftJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .to(OUTPUT_TOPIC);\n\n            runTest(expectedResult, storeName);\n        }\n    }\n","date":"2018-08-04 04:19:46","endLine":495,"groupId":"19577","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOuterLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/d1e3d315af5dce0bfeb0d3cb801e5cf3d97fcd.src","preCode":"    public void testOuterLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-left\");\n\n        if (cacheEnabled) {\n            leftTable.outerJoin(rightTable, valueJoiner)\n                    .leftJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .peek(new CountingPeek(true))\n                    .to(OUTPUT_TOPIC);\n            runTest(expectedFinalMultiJoinResult, storeName);\n        } else {\n            List<List<String>> expectedResult = Arrays.asList(\n                    null,\n                    null,\n                    null,\n                    Arrays.asList(\"A-null-null\", \"A-a-a\", \"A-a-a\"),\n                    Collections.singletonList(\"B-a-a\"),\n                    Arrays.asList(\"B-b-b\", \"B-b-b\"),\n                    Collections.singletonList(\"null-b-b\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"C-null-null\", \"C-c-c\", \"C-c-c\"),\n                    Arrays.asList(\"C-null-null\", \"C-null-null\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"null-d-d\", \"null-d-d\"),\n                    Collections.singletonList(\"D-d-d\")\n            );\n\n            leftTable.outerJoin(rightTable, valueJoiner)\n                    .leftJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .to(OUTPUT_TOPIC);\n\n            runTest(expectedResult, storeName);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":459,"status":"M"}],"commitId":"3637b2c374d48e99e0a7be37605d3c79f2661007","commitMessage":"@@@MINOR: Require final variables in Streams (#5452)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-08-04 04:19:46","modifiedFileCount":"212","status":"M","submitter":"John Roesler"},{"authorTime":"2019-05-31 00:46:12","codes":[{"authorDate":"2019-05-31 00:46:12","commitOrder":3,"curCode":"    public void testLeftOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-outer\");\n\n        if (cacheEnabled) {\n            leftTable.leftJoin(rightTable, valueJoiner)\n                    .outerJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .peek(new CountingPeek(true))\n                    .to(OUTPUT_TOPIC);\n            runTest(expectedFinalMultiJoinResult, storeName);\n        } else {\n            final List<List<KeyValueTimestamp<Long, String>>> expectedResult = Arrays.asList(\n                null,\n                null,\n                null,\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-null-null\", 3L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-a-a\", 4L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-a-a\", 4L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-a-a\", 5L)),\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-b-b\", 6L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-b-b\", 6L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"null-b\", 7L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, null, 8L)),\n                null,\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-null-null\", 9L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-c-c\", 10L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-c-c\", 10L)),\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-null-null\", 11L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-null-null\", 11L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, null, 12L)),\n                null,\n                null,\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"null-d\", 14L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-d-d\", 15L))\n            );\n\n            leftTable.leftJoin(rightTable, valueJoiner)\n                    .outerJoin(rightTable, valueJoiner, materialized)\n                    .toStream().to(OUTPUT_TOPIC);\n\n            runTest(expectedResult, storeName);\n        }\n    }\n","date":"2019-05-31 00:46:12","endLine":470,"groupId":"5415","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeftOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2b/685f9e63fe2cf7808d65f43ada016771615011.src","preCode":"    public void testLeftOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-outer\");\n\n        if (cacheEnabled) {\n            leftTable.leftJoin(rightTable, valueJoiner)\n                    .outerJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .peek(new CountingPeek(true))\n                    .to(OUTPUT_TOPIC);\n            runTest(expectedFinalMultiJoinResult, storeName);\n        } else {\n            final List<List<String>> expectedResult = Arrays.asList(\n                    null,\n                    null,\n                    null,\n                    Arrays.asList(\"A-null-null\", \"A-a-a\", \"A-a-a\"),\n                    Collections.singletonList(\"B-a-a\"),\n                    Arrays.asList(\"B-b-b\", \"B-b-b\"),\n                    Collections.singletonList(\"null-b\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"C-null-null\", \"C-c-c\", \"C-c-c\"),\n                    Arrays.asList(\"C-null-null\", \"C-null-null\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    null,\n                    Arrays.asList(\"null-d\", \"D-d-d\")\n            );\n\n            leftTable.leftJoin(rightTable, valueJoiner)\n                    .outerJoin(rightTable, valueJoiner, materialized)\n                    .toStream().to(OUTPUT_TOPIC);\n\n            runTest(expectedResult, storeName);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"M"},{"authorDate":"2019-05-31 00:46:12","commitOrder":3,"curCode":"    public void testOuterLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-left\");\n\n        if (cacheEnabled) {\n            leftTable.outerJoin(rightTable, valueJoiner)\n                    .leftJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .peek(new CountingPeek(true))\n                    .to(OUTPUT_TOPIC);\n            runTest(expectedFinalMultiJoinResult, storeName);\n        } else {\n            final List<List<KeyValueTimestamp<Long, String>>> expectedResult = Arrays.asList(\n                null,\n                null,\n                null,\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-null-null\", 3L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-a-a\", 4L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-a-a\", 4L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-a-a\", 5L)),\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-b-b\", 6L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-b-b\", 6L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"null-b-b\", 7L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, null, 8L)),\n                null,\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-null-null\", 9L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-c-c\", 10L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-c-c\", 10L)),\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-null-null\", 11L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-null-null\", 11L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, null, 12L)),\n                null,\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"null-d-d\", 14L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"null-d-d\", 14L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-d-d\", 15L))\n            );\n\n            leftTable.outerJoin(rightTable, valueJoiner)\n                    .leftJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .to(OUTPUT_TOPIC);\n\n            runTest(expectedResult, storeName);\n        }\n    }\n","date":"2019-05-31 00:46:12","endLine":568,"groupId":"5415","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOuterLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2b/685f9e63fe2cf7808d65f43ada016771615011.src","preCode":"    public void testOuterLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-left\");\n\n        if (cacheEnabled) {\n            leftTable.outerJoin(rightTable, valueJoiner)\n                    .leftJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .peek(new CountingPeek(true))\n                    .to(OUTPUT_TOPIC);\n            runTest(expectedFinalMultiJoinResult, storeName);\n        } else {\n            final List<List<String>> expectedResult = Arrays.asList(\n                    null,\n                    null,\n                    null,\n                    Arrays.asList(\"A-null-null\", \"A-a-a\", \"A-a-a\"),\n                    Collections.singletonList(\"B-a-a\"),\n                    Arrays.asList(\"B-b-b\", \"B-b-b\"),\n                    Collections.singletonList(\"null-b-b\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"C-null-null\", \"C-c-c\", \"C-c-c\"),\n                    Arrays.asList(\"C-null-null\", \"C-null-null\"),\n                    Collections.singletonList((String) null),\n                    null,\n                    Arrays.asList(\"null-d-d\", \"null-d-d\"),\n                    Collections.singletonList(\"D-d-d\")\n            );\n\n            leftTable.outerJoin(rightTable, valueJoiner)\n                    .leftJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .to(OUTPUT_TOPIC);\n\n            runTest(expectedResult, storeName);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":520,"status":"M"}],"commitId":"77e6e8ec054608a30626271b4952b63294a93c3b","commitMessage":"@@@KAFKA-6455: Update integration tests to verify result timestamps (#6751)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2019-05-31 00:46:12","modifiedFileCount":"12","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-12-06 05:06:09","codes":[{"authorDate":"2019-12-06 05:06:09","commitOrder":4,"curCode":"    public void testLeftOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-outer\");\n\n        leftTable.leftJoin(rightTable, valueJoiner)\n                 .outerJoin(rightTable, valueJoiner, materialized)\n                 .toStream()\n                 .to(OUTPUT_TOPIC);\n\n        if (cacheEnabled) {\n            runTestWithDriver(expectedFinalMultiJoinResult, storeName);\n        } else {\n            final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n                null,\n                null,\n                null,\n                Arrays.asList(\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"A-null-null\", null,  3L),\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"A-a-a\", null,  4L),\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"A-a-a\", null,  4L)),\n                Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a-a\", null,  5L)),\n                Arrays.asList(\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"B-b-b\", null,  6L),\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"B-b-b\", null,  6L)),\n                Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"null-b\", null, 7L)),\n                Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, null, null,  8L)),\n                null,\n                Arrays.asList(\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"C-null-null\", null,  9L),\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"C-c-c\", null,  10L),\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"C-c-c\", null,  10L)),\n                Arrays.asList(\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"C-null-null\", null,  11L),\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"C-null-null\", null,  11L)),\n                Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, null, null,  12L)),\n                null,\n                null,\n                Arrays.asList(\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"null-d\", null, 14L),\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"D-d-d\", null,  15L))\n            );\n\n            runTestWithDriver(expectedResult, storeName);\n        }\n    }\n","date":"2019-12-06 05:06:09","endLine":421,"groupId":"102758","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeftOuter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7e/dce8797427ff8c89b2168b4c7f1cbbc9a5a3b7.src","preCode":"    public void testLeftOuter() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-outer\");\n\n        if (cacheEnabled) {\n            leftTable.leftJoin(rightTable, valueJoiner)\n                    .outerJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .peek(new CountingPeek(true))\n                    .to(OUTPUT_TOPIC);\n            runTest(expectedFinalMultiJoinResult, storeName);\n        } else {\n            final List<List<KeyValueTimestamp<Long, String>>> expectedResult = Arrays.asList(\n                null,\n                null,\n                null,\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-null-null\", 3L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-a-a\", 4L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-a-a\", 4L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-a-a\", 5L)),\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-b-b\", 6L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-b-b\", 6L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"null-b\", 7L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, null, 8L)),\n                null,\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-null-null\", 9L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-c-c\", 10L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-c-c\", 10L)),\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-null-null\", 11L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-null-null\", 11L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, null, 12L)),\n                null,\n                null,\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"null-d\", 14L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-d-d\", 15L))\n            );\n\n            leftTable.leftJoin(rightTable, valueJoiner)\n                    .outerJoin(rightTable, valueJoiner, materialized)\n                    .toStream().to(OUTPUT_TOPIC);\n\n            runTest(expectedResult, storeName);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"M"},{"authorDate":"2019-12-06 05:06:09","commitOrder":4,"curCode":"    public void testOuterLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-left\");\n\n        leftTable.outerJoin(rightTable, valueJoiner)\n                 .leftJoin(rightTable, valueJoiner, materialized)\n                 .toStream()\n                 .to(OUTPUT_TOPIC);\n\n        if (cacheEnabled) {\n            runTestWithDriver(expectedFinalMultiJoinResult, storeName);\n        } else {\n            final List<List<TestRecord<Long, String>>> expectedResult = Arrays.asList(\n                null,\n                null,\n                null,\n                Arrays.asList(\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"A-null-null\", null,  3L),\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"A-a-a\", null,  4L),\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"A-a-a\", null,  4L)),\n                Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"B-a-a\", null,  5L)),\n                Arrays.asList(\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"B-b-b\", null,  6L),\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"B-b-b\", null,  6L)),\n                Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"null-b-b\", null, 7L)),\n                Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, null, null,  8L)),\n                null,\n                Arrays.asList(\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"C-null-null\", null,  9L),\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"C-c-c\", null,  10L),\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"C-c-c\", null,  10L)),\n                Arrays.asList(\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"C-null-null\", null,  11L),\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"C-null-null\", null,  11L)),\n                Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, null, null,  12L)),\n                null,\n                Arrays.asList(\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"null-d-d\", null, 14L),\n                    new TestRecord<>(ANY_UNIQUE_KEY, \"null-d-d\", null, 14L)),\n                Collections.singletonList(new TestRecord<>(ANY_UNIQUE_KEY, \"D-d-d\", null,  15L))\n            );\n\n            runTestWithDriver(expectedResult, storeName);\n        }\n    }\n","date":"2019-12-06 05:06:09","endLine":509,"groupId":"102758","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testOuterLeft","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7e/dce8797427ff8c89b2168b4c7f1cbbc9a5a3b7.src","preCode":"    public void testOuterLeft() throws Exception {\n        STREAMS_CONFIG.put(StreamsConfig.APPLICATION_ID_CONFIG, appID + \"-inner-left\");\n\n        if (cacheEnabled) {\n            leftTable.outerJoin(rightTable, valueJoiner)\n                    .leftJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .peek(new CountingPeek(true))\n                    .to(OUTPUT_TOPIC);\n            runTest(expectedFinalMultiJoinResult, storeName);\n        } else {\n            final List<List<KeyValueTimestamp<Long, String>>> expectedResult = Arrays.asList(\n                null,\n                null,\n                null,\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-null-null\", 3L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-a-a\", 4L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"A-a-a\", 4L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-a-a\", 5L)),\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-b-b\", 6L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"B-b-b\", 6L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"null-b-b\", 7L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, null, 8L)),\n                null,\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-null-null\", 9L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-c-c\", 10L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-c-c\", 10L)),\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-null-null\", 11L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"C-null-null\", 11L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, null, 12L)),\n                null,\n                Arrays.asList(\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"null-d-d\", 14L),\n                    new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"null-d-d\", 14L)),\n                Collections.singletonList(new KeyValueTimestamp<>(ANY_UNIQUE_KEY, \"D-d-d\", 15L))\n            );\n\n            leftTable.outerJoin(rightTable, valueJoiner)\n                    .leftJoin(rightTable, valueJoiner, materialized)\n                    .toStream()\n                    .to(OUTPUT_TOPIC);\n\n            runTest(expectedResult, storeName);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/TableTableJoinIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":466,"status":"M"}],"commitId":"04cd1457aee94e3aa3eda1b80e354d1be1b3b240","commitMessage":"@@@MINOR: Convert last streams join test to TTD (#7777)\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-12-06 05:06:09","modifiedFileCount":"2","status":"M","submitter":"Bill Bejeck"}]
