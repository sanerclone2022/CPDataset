[{"authorTime":"2020-09-23 02:32:44","codes":[{"authorDate":"2020-09-23 02:32:44","commitOrder":1,"curCode":"    public void testLeaderToUnattached() throws IOException {\n        int otherNodeId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        QuorumState state = initializeEmptyState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        state.transitionToCandidate();\n        state.candidateStateOrThrow().recordGrantedVote(otherNodeId);\n        state.transitionToLeader(0L);\n        state.transitionToUnattached(5);\n        assertEquals(5, state.epoch());\n        assertEquals(OptionalInt.empty(), state.leaderId());\n        assertEquals(ElectionState.withUnknownLeader(5, voters), store.readElectionState());\n    }\n","date":"2020-09-23 02:32:44","endLine":379,"groupId":"12706","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeaderToUnattached","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8c/56e16d43af8827a5bcb302daa03bc6bbbf19ff.src","preCode":"    public void testLeaderToUnattached() throws IOException {\n        int otherNodeId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        QuorumState state = initializeEmptyState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        state.transitionToCandidate();\n        state.candidateStateOrThrow().recordGrantedVote(otherNodeId);\n        state.transitionToLeader(0L);\n        state.transitionToUnattached(5);\n        assertEquals(5, state.epoch());\n        assertEquals(OptionalInt.empty(), state.leaderId());\n        assertEquals(ElectionState.withUnknownLeader(5, voters), store.readElectionState());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/QuorumStateTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":367,"status":"B"},{"authorDate":"2020-09-23 02:32:44","commitOrder":1,"curCode":"    public void testLeaderToVoted() throws IOException {\n        int otherNodeId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        QuorumState state = initializeEmptyState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        state.transitionToCandidate();\n        state.candidateStateOrThrow().recordGrantedVote(otherNodeId);\n        state.transitionToLeader(0L);\n        state.transitionToVoted(5, otherNodeId);\n\n        assertEquals(5, state.epoch());\n        assertEquals(OptionalInt.empty(), state.leaderId());\n        VotedState votedState = state.votedStateOrThrow();\n        assertEquals(otherNodeId, votedState.votedId());\n        assertEquals(ElectionState.withVotedCandidate(5, otherNodeId, voters), store.readElectionState());\n    }\n","date":"2020-09-23 02:32:44","endLine":397,"groupId":"12709","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeaderToVoted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8c/56e16d43af8827a5bcb302daa03bc6bbbf19ff.src","preCode":"    public void testLeaderToVoted() throws IOException {\n        int otherNodeId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        QuorumState state = initializeEmptyState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        state.transitionToCandidate();\n        state.candidateStateOrThrow().recordGrantedVote(otherNodeId);\n        state.transitionToLeader(0L);\n        state.transitionToVoted(5, otherNodeId);\n\n        assertEquals(5, state.epoch());\n        assertEquals(OptionalInt.empty(), state.leaderId());\n        VotedState votedState = state.votedStateOrThrow();\n        assertEquals(otherNodeId, votedState.votedId());\n        assertEquals(ElectionState.withVotedCandidate(5, otherNodeId, voters), store.readElectionState());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/QuorumStateTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"B"}],"commitId":"b7c8490cf47b0c18253d6a776b2b35c76c71c65d","commitMessage":"@@@KAFKA-10492; Core Kafka Raft Implementation (KIP-595) (#9130)\n\nThis is the core Raft implementation specified by KIP-595: https://cwiki.apache.org/confluence/display/KAFKA/KIP-595%3A+A+Raft+Protocol+for+the+Metadata+Quorum. We have created a separate \"raft\" module where most of the logic resides. The new APIs introduced in this patch in order to support Raft election and such are disabled in the server until the integration with the controller is complete. Until then.  there is a standalone server which can be used for testing the performance of the Raft implementation. See `raft/README.md` for details.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Boyang Chen <boyang@confluent.io>\n\nCo-authored-by: Boyang Chen <boyang@confluent.io>\nCo-authored-by: Guozhang Wang <wangguoz@gmail.com> ","date":"2020-09-23 02:32:44","modifiedFileCount":"24","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2021-04-30 00:25:21","codes":[{"authorDate":"2021-04-30 00:25:21","commitOrder":2,"curCode":"    public void testLeaderToUnattached() throws IOException {\n        int otherNodeId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        QuorumState state = initializeEmptyState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        state.transitionToCandidate();\n        state.candidateStateOrThrow().recordGrantedVote(otherNodeId);\n        state.transitionToLeader(0L, accumulator);\n        state.transitionToUnattached(5);\n        assertEquals(5, state.epoch());\n        assertEquals(OptionalInt.empty(), state.leaderId());\n        assertEquals(ElectionState.withUnknownLeader(5, voters), store.readElectionState());\n    }\n","date":"2021-04-30 00:25:21","endLine":442,"groupId":"104375","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLeaderToUnattached","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/ebfac0e26bff082d6745d71f99c18dce1cbbf4.src","preCode":"    public void testLeaderToUnattached() throws IOException {\n        int otherNodeId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        QuorumState state = initializeEmptyState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        state.transitionToCandidate();\n        state.candidateStateOrThrow().recordGrantedVote(otherNodeId);\n        state.transitionToLeader(0L);\n        state.transitionToUnattached(5);\n        assertEquals(5, state.epoch());\n        assertEquals(OptionalInt.empty(), state.leaderId());\n        assertEquals(ElectionState.withUnknownLeader(5, voters), store.readElectionState());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/QuorumStateTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":430,"status":"M"},{"authorDate":"2021-04-30 00:25:21","commitOrder":2,"curCode":"    public void testLeaderToVoted() throws IOException {\n        int otherNodeId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        QuorumState state = initializeEmptyState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        state.transitionToCandidate();\n        state.candidateStateOrThrow().recordGrantedVote(otherNodeId);\n        state.transitionToLeader(0L, accumulator);\n        state.transitionToVoted(5, otherNodeId);\n\n        assertEquals(5, state.epoch());\n        assertEquals(OptionalInt.empty(), state.leaderId());\n        VotedState votedState = state.votedStateOrThrow();\n        assertEquals(otherNodeId, votedState.votedId());\n        assertEquals(ElectionState.withVotedCandidate(5, otherNodeId, voters), store.readElectionState());\n    }\n","date":"2021-04-30 00:25:21","endLine":460,"groupId":"104375","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLeaderToVoted","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/ebfac0e26bff082d6745d71f99c18dce1cbbf4.src","preCode":"    public void testLeaderToVoted() throws IOException {\n        int otherNodeId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, otherNodeId);\n        QuorumState state = initializeEmptyState(voters);\n        state.initialize(new OffsetAndEpoch(0L, logEndEpoch));\n        state.transitionToCandidate();\n        state.candidateStateOrThrow().recordGrantedVote(otherNodeId);\n        state.transitionToLeader(0L);\n        state.transitionToVoted(5, otherNodeId);\n\n        assertEquals(5, state.epoch());\n        assertEquals(OptionalInt.empty(), state.leaderId());\n        VotedState votedState = state.votedStateOrThrow();\n        assertEquals(otherNodeId, votedState.votedId());\n        assertEquals(ElectionState.withVotedCandidate(5, otherNodeId, voters), store.readElectionState());\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/QuorumStateTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"M"}],"commitId":"a855f6ac37149d6908499c68df46671a2754d21a","commitMessage":"@@@KAFKA-12265; Move the BatchAccumulator in KafkaRaftClient to LeaderState (#10480)\n\nThe KafkaRaftClient has a field for the BatchAccumulator that is only used and set when it is the leader. In other cases.  leader specific information was stored in LeaderState. In a recent change EpochState.  which LeaderState implements.  was changed to be a Closable. QuorumState makes sure to always close the previous state before transitioning to the next state. This redesign was used to move the BatchAccumulator to the LeaderState and simplify some of the handling in KafkaRaftClient.\n\nReviewers: Jos? Armando Garc?a Sancio <jsancio@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2021-04-30 00:25:21","modifiedFileCount":"13","status":"M","submitter":"Ryan"}]
