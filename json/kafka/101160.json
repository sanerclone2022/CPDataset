[{"authorTime":"2020-09-03 06:17:07","codes":[{"authorDate":"2020-01-15 06:10:19","commitOrder":5,"curCode":"    public void emptyIteratorNextShouldThrowNoSuchElementException() {\n        final StateStoreProvider storeProvider = EasyMock.createNiceMock(StateStoreProvider.class);\n        EasyMock.expect(storeProvider.stores(anyString(), anyObject())).andReturn(emptyList());\n        EasyMock.replay(storeProvider);\n\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(\n            storeProvider,\n            QueryableStoreTypes.windowStore(),\n            \"foo\"\n        );\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", ofEpochMilli(1), ofEpochMilli(10));\n        assertThrows(NoSuchElementException.class, windowStoreIterator::next);\n    }\n","date":"2020-01-16 03:47:40","endLine":200,"groupId":"17318","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"emptyIteratorNextShouldThrowNoSuchElementException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/64/95d8070916dd1f5c149df16bb7bb3380ad46de.src","preCode":"    public void emptyIteratorNextShouldThrowNoSuchElementException() {\n        final StateStoreProvider storeProvider = EasyMock.createNiceMock(StateStoreProvider.class);\n        EasyMock.expect(storeProvider.stores(anyString(), anyObject())).andReturn(emptyList());\n        EasyMock.replay(storeProvider);\n\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(\n            storeProvider,\n            QueryableStoreTypes.windowStore(),\n            \"foo\"\n        );\n        final WindowStoreIterator<Object> windowStoreIterator = store.fetch(\"key\", ofEpochMilli(1), ofEpochMilli(10));\n        assertThrows(NoSuchElementException.class, windowStoreIterator::next);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"NB"},{"authorDate":"2020-09-03 06:17:07","commitOrder":5,"curCode":"    public void emptyBackwardIteratorNextShouldThrowNoSuchElementException() {\n        final StateStoreProvider storeProvider = EasyMock.createNiceMock(StateStoreProvider.class);\n        EasyMock.expect(storeProvider.stores(anyString(), anyObject())).andReturn(emptyList());\n        EasyMock.replay(storeProvider);\n\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(\n            storeProvider,\n            QueryableStoreTypes.windowStore(),\n            \"foo\"\n        );\n        final WindowStoreIterator<Object> windowStoreIterator =\n            store.backwardFetch(\"key\", ofEpochMilli(1), ofEpochMilli(10));\n        assertThrows(NoSuchElementException.class, windowStoreIterator::next);\n    }\n","date":"2020-09-03 06:17:07","endLine":339,"groupId":"17318","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"emptyBackwardIteratorNextShouldThrowNoSuchElementException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7b/b726805210066d14694de22d249b67d31fb839.src","preCode":"    public void emptyBackwardIteratorNextShouldThrowNoSuchElementException() {\n        final StateStoreProvider storeProvider = EasyMock.createNiceMock(StateStoreProvider.class);\n        EasyMock.expect(storeProvider.stores(anyString(), anyObject())).andReturn(emptyList());\n        EasyMock.replay(storeProvider);\n\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(\n            storeProvider,\n            QueryableStoreTypes.windowStore(),\n            \"foo\"\n        );\n        final WindowStoreIterator<Object> windowStoreIterator =\n            store.backwardFetch(\"key\", ofEpochMilli(1), ofEpochMilli(10));\n        assertThrows(NoSuchElementException.class, windowStoreIterator::next);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"B"}],"commitId":"4f06d9e7d083c30912c810f9deadea809fd74edf","commitMessage":"@@@KAFKA-9929: Support backward iterator on WindowStore (#9138)\n\nImplements KIP-617 on WindowStore that depends on #9137.\n\nTesting strategy: extend existing tests to validate reverse operations are supported.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-09-03 06:17:07","modifiedFileCount":"47","status":"M","submitter":"Jorge Esteban Quilcate Otoya"},{"authorTime":"2021-07-27 07:26:02","codes":[{"authorDate":"2021-07-27 07:26:02","commitOrder":6,"curCode":"    public void emptyIteratorNextShouldThrowNoSuchElementException() {\n        final StateStoreProvider storeProvider = EasyMock.createNiceMock(StateStoreProvider.class);\n        EasyMock.expect(storeProvider.stores(anyString(), anyObject())).andReturn(emptyList());\n        EasyMock.replay(storeProvider);\n\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(\n            storeProvider,\n            QueryableStoreTypes.windowStore(),\n            \"foo\"\n        );\n        try (final WindowStoreIterator<Object> windowStoreIterator =\n                 store.fetch(\"key\", ofEpochMilli(1), ofEpochMilli(10))) {\n            assertThrows(NoSuchElementException.class, windowStoreIterator::next);\n        }\n    }\n","date":"2021-07-27 07:26:02","endLine":332,"groupId":"101160","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"emptyIteratorNextShouldThrowNoSuchElementException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/486c34fd60f3e2e3f381d15d9f83c37c243ae5.src","preCode":"    public void emptyIteratorNextShouldThrowNoSuchElementException() {\n        final StateStoreProvider storeProvider = EasyMock.createNiceMock(StateStoreProvider.class);\n        EasyMock.expect(storeProvider.stores(anyString(), anyObject())).andReturn(emptyList());\n        EasyMock.replay(storeProvider);\n\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(\n            storeProvider,\n            QueryableStoreTypes.windowStore(),\n            \"foo\"\n        );\n        final WindowStoreIterator<Object> windowStoreIterator =\n            store.fetch(\"key\", ofEpochMilli(1), ofEpochMilli(10));\n        assertThrows(NoSuchElementException.class, windowStoreIterator::next);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"},{"authorDate":"2021-07-27 07:26:02","commitOrder":6,"curCode":"    public void emptyBackwardIteratorNextShouldThrowNoSuchElementException() {\n        final StateStoreProvider storeProvider = EasyMock.createNiceMock(StateStoreProvider.class);\n        EasyMock.expect(storeProvider.stores(anyString(), anyObject())).andReturn(emptyList());\n        EasyMock.replay(storeProvider);\n\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(\n            storeProvider,\n            QueryableStoreTypes.windowStore(),\n            \"foo\"\n        );\n        try (final WindowStoreIterator<Object> windowStoreIterator =\n                 store.backwardFetch(\"key\", ofEpochMilli(1), ofEpochMilli(10))) {\n            assertThrows(NoSuchElementException.class, windowStoreIterator::next);\n        }\n    }\n","date":"2021-07-27 07:26:02","endLine":349,"groupId":"101160","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"emptyBackwardIteratorNextShouldThrowNoSuchElementException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/486c34fd60f3e2e3f381d15d9f83c37c243ae5.src","preCode":"    public void emptyBackwardIteratorNextShouldThrowNoSuchElementException() {\n        final StateStoreProvider storeProvider = EasyMock.createNiceMock(StateStoreProvider.class);\n        EasyMock.expect(storeProvider.stores(anyString(), anyObject())).andReturn(emptyList());\n        EasyMock.replay(storeProvider);\n\n        final CompositeReadOnlyWindowStore<Object, Object> store = new CompositeReadOnlyWindowStore<>(\n            storeProvider,\n            QueryableStoreTypes.windowStore(),\n            \"foo\"\n        );\n        final WindowStoreIterator<Object> windowStoreIterator =\n            store.backwardFetch(\"key\", ofEpochMilli(1), ofEpochMilli(10));\n        assertThrows(NoSuchElementException.class, windowStoreIterator::next);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CompositeReadOnlyWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"}],"commitId":"818cbfba6ddf8252b7da314bbaac74201951dfb3","commitMessage":"@@@KAFKA-13125: close KeyValueIterator instances in internals tests (part 2) (#11107)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-07-27 07:26:02","modifiedFileCount":"8","status":"M","submitter":"Luke Chen"}]
