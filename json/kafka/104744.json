[{"authorTime":"2016-04-19 01:50:58","codes":[{"authorDate":"2016-04-19 01:50:58","commitOrder":1,"curCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(CONNECTOR_NAME, BogusSourceConnector.class, BogusSourceTask.class, false);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-04-19 01:50:58","endLine":178,"groupId":"7719","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestartConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/05/a64a157e288bccaf62f5c434de3b79e82168a2.src","preCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(CONNECTOR_NAME, BogusSourceConnector.class, BogusSourceTask.class, false);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"B"},{"authorDate":"2016-04-19 01:50:58","commitOrder":1,"curCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(CONNECTOR_NAME, BogusSourceConnector.class, BogusSourceTask.class, false);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        RuntimeException e = new RuntimeException();\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder));\n        EasyMock.expectLastCall().andThrow(e);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(e, exception.getCause());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-04-19 01:50:58","endLine":232,"groupId":"7719","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartConnectorFailureOnStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/05/a64a157e288bccaf62f5c434de3b79e82168a2.src","preCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(CONNECTOR_NAME, BogusSourceConnector.class, BogusSourceTask.class, false);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        RuntimeException e = new RuntimeException();\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder));\n        EasyMock.expectLastCall().andThrow(e);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(e, exception.getCause());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"B"}],"commitId":"89c67727c2793bf56b0b005a7d758beebedb5aed","commitMessage":"@@@KAFKA-3506: Kafka Connect restart APIs\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1189 from hachikuji/KAFKA-3506\n","date":"2016-04-19 01:50:58","modifiedFileCount":"12","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2016-04-21 05:09:59","codes":[{"authorDate":"2016-04-21 05:09:59","commitOrder":2,"curCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(CONNECTOR_NAME, BogusSourceConnector.class, BogusSourceTask.class, false);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-04-21 05:09:59","endLine":180,"groupId":"7719","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestartConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/10/e51946cd11fe56585d6d3f1edff31f79426ab6.src","preCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(CONNECTOR_NAME, BogusSourceConnector.class, BogusSourceTask.class, false);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2016-04-21 05:09:59","commitOrder":2,"curCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(CONNECTOR_NAME, BogusSourceConnector.class, BogusSourceTask.class, false);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        RuntimeException e = new RuntimeException();\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andThrow(e);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(e, exception.getCause());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-04-21 05:09:59","endLine":234,"groupId":"7719","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartConnectorFailureOnStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/10/e51946cd11fe56585d6d3f1edff31f79426ab6.src","preCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(CONNECTOR_NAME, BogusSourceConnector.class, BogusSourceTask.class, false);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        RuntimeException e = new RuntimeException();\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder));\n        EasyMock.expectLastCall().andThrow(e);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(e, exception.getCause());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"c9485b78a6e43747daf1314ae9532839fb7bc810","commitMessage":"@@@KAFKA-2370: kafka connect pause/resume API\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Liquan Pei <liquanpei@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1087 from hachikuji/KAFKA-2370\n","date":"2016-04-21 05:09:59","modifiedFileCount":"29","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-05-09 13:26:26","codes":[{"authorDate":"2016-05-09 13:26:26","commitOrder":3,"curCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(CONNECTOR_NAME, BogusSourceConnector.class, BogusSourceTask.class, false);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class, false))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class, false), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-05-09 13:26:26","endLine":180,"groupId":"7719","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestartConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/0b968d420c1a8822d806d8b97fd6d83485115f.src","preCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(CONNECTOR_NAME, BogusSourceConnector.class, BogusSourceTask.class, false);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2016-05-09 13:26:26","commitOrder":3,"curCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(CONNECTOR_NAME, BogusSourceConnector.class, BogusSourceTask.class, false);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        RuntimeException e = new RuntimeException();\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class, false))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andThrow(e);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class, false), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(e, exception.getCause());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-05-09 13:26:26","endLine":234,"groupId":"7719","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartConnectorFailureOnStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/0b968d420c1a8822d806d8b97fd6d83485115f.src","preCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(CONNECTOR_NAME, BogusSourceConnector.class, BogusSourceTask.class, false);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        RuntimeException e = new RuntimeException();\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andThrow(e);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(e, exception.getCause());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"d1bb2b9df105169c47f16d057c887acb7f8fe818","commitMessage":"@@@KAFKA 3671: Move topics to SinkConnectorConfig\n\nAuthor: Liquan Pei <liquanpei@gmail.com>\n\nReviewers: Dan Norwood <norwood@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1335 from Ishiihara/sink-connector-config\n","date":"2016-05-09 13:26:26","modifiedFileCount":"7","status":"M","submitter":"Liquan Pei"},{"authorTime":"2016-08-19 11:56:31","codes":[{"authorDate":"2016-08-19 11:56:31","commitOrder":4,"curCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(SourceSink.SOURCE))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(SourceSink.SOURCE), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-08-19 11:56:31","endLine":184,"groupId":"7719","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestartConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/37/72586bbe587e14fac7e2d1dc15bbf1ad0e813e.src","preCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(CONNECTOR_NAME, BogusSourceConnector.class, BogusSourceTask.class, false);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class, false))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class, false), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2016-08-19 11:56:31","commitOrder":4,"curCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        RuntimeException e = new RuntimeException();\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(SourceSink.SOURCE))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andThrow(e);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(SourceSink.SOURCE), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(e, exception.getCause());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-08-19 11:56:31","endLine":238,"groupId":"7719","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartConnectorFailureOnStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/37/72586bbe587e14fac7e2d1dc15bbf1ad0e813e.src","preCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(CONNECTOR_NAME, BogusSourceConnector.class, BogusSourceTask.class, false);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        RuntimeException e = new RuntimeException();\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class, false))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andThrow(e);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(CONNECTOR_NAME, BogusSourceConnector.class, false), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(e, exception.getCause());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"}],"commitId":"05ed54bf2b80691d413dbfa05065eb3afe33972f","commitMessage":"@@@KAFKA-3845: KIP-75: Add per-connector converters\n\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Shikhar Bhushan.  Gwen Shapira\n\nCloses #1721 from ewencp/kafka-3845-per-connector-converters\n","date":"2016-08-19 11:56:31","modifiedFileCount":"8","status":"M","submitter":"Ewen Cheslack-Postava"},{"authorTime":"2016-08-27 05:00:16","codes":[{"authorDate":"2016-08-27 05:00:16","commitOrder":5,"curCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall().andReturn(true);\n\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(connectorConfig(SourceSink.SOURCE)),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andReturn(true);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(SourceSink.SOURCE), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-08-27 05:00:42","endLine":185,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestartConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/1d84f96596826e26f3cbed798cca7aea2f1c66.src","preCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(SourceSink.SOURCE))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(SourceSink.SOURCE), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2016-08-27 05:00:16","commitOrder":5,"curCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall().andReturn(true);\n\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(connectorConfig(SourceSink.SOURCE)),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andReturn(false);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(SourceSink.SOURCE), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(ConnectException.class, exception.getCause().getClass());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-08-27 05:00:42","endLine":212,"groupId":"6414","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartConnectorFailureOnStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/1d84f96596826e26f3cbed798cca7aea2f1c66.src","preCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        RuntimeException e = new RuntimeException();\n        worker.startConnector(EasyMock.eq(new ConnectorConfig(connectorConfig(SourceSink.SOURCE))),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andThrow(e);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(SourceSink.SOURCE), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(e, exception.getCause());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"}],"commitId":"71f7e7c3a29e8f7339430837065126256907bd2a","commitMessage":"@@@KAFKA-4042: Contain connector & task start/stop failures within the Worker\n\nInvoke the statusListener.onFailure() callback on start failures so that the statusBackingStore is updated. This involved a fix to the putSafe() functionality which prevented any update that was not preceded by a (non-safe) put() from completing.  so here when a connector or task is transitioning directly to FAILED.\n\nWorker start methods can still throw if the same connector name or task ID is already registered with the worker.  as this condition should not happen.\n\nAuthor: Shikhar Bhushan <shikhar@confluent.io>\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1778 from shikhar/distherder-stayup-take4\n","date":"2016-08-27 05:00:42","modifiedFileCount":"11","status":"M","submitter":"Shikhar Bhushan"},{"authorTime":"2016-11-13 08:11:04","codes":[{"authorDate":"2016-11-13 08:11:04","commitOrder":6,"curCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        Map<String, String> config = connectorConfig(SourceSink.SOURCE);\n        expectConfigValidation(config);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall().andReturn(true);\n\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(config),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andReturn(true);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, config, false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-11-13 08:11:28","endLine":258,"groupId":"6413","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestartConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0b/c3d5cf9e3f8b6f9f83102f94ba75f868bd0a40.src","preCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall().andReturn(true);\n\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(connectorConfig(SourceSink.SOURCE)),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andReturn(true);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(SourceSink.SOURCE), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"},{"authorDate":"2016-11-13 08:11:04","commitOrder":6,"curCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        Map<String, String> config = connectorConfig(SourceSink.SOURCE);\n        expectConfigValidation(config);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall().andReturn(true);\n\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(config),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andReturn(false);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, config, false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(ConnectException.class, exception.getCause().getClass());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-11-13 08:11:28","endLine":288,"groupId":"6414","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartConnectorFailureOnStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0b/c3d5cf9e3f8b6f9f83102f94ba75f868bd0a40.src","preCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall().andReturn(true);\n\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(connectorConfig(SourceSink.SOURCE)),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andReturn(false);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, connectorConfig(SourceSink.SOURCE), false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(ConnectException.class, exception.getCause().getClass());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"}],"commitId":"b7d36b7261ddefea68667a65cc5e2ee0734ed4a1","commitMessage":"@@@KAFKA-3829: Ensure valid configuration prior to creating connector\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Shikhar Bhushan <shikhar@schmizz.net>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1911 from hachikuji/KAFKA-3829\n","date":"2016-11-13 08:11:28","modifiedFileCount":"15","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2018-02-06 01:46:07","codes":[{"authorDate":"2018-02-06 01:46:07","commitOrder":7,"curCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        Map<String, String> config = connectorConfig(SourceSink.SOURCE);\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        expectConfigValidation(connectorMock, true, config);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall().andReturn(true);\n\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(config),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andReturn(true);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, config, false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-02-06 01:46:07","endLine":295,"groupId":"6413","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestartConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fd/330f280098a56757080bb1f49b39dc67aadca3.src","preCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        Map<String, String> config = connectorConfig(SourceSink.SOURCE);\n        expectConfigValidation(config);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall().andReturn(true);\n\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(config),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andReturn(true);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, config, false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"},{"authorDate":"2018-02-06 01:46:07","commitOrder":7,"curCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        Map<String, String> config = connectorConfig(SourceSink.SOURCE);\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        expectConfigValidation(connectorMock, true, config);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall().andReturn(true);\n\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(config),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andReturn(false);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, config, false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(ConnectException.class, exception.getCause().getClass());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-02-06 01:46:07","endLine":326,"groupId":"6414","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartConnectorFailureOnStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fd/330f280098a56757080bb1f49b39dc67aadca3.src","preCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        Map<String, String> config = connectorConfig(SourceSink.SOURCE);\n        expectConfigValidation(config);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall().andReturn(true);\n\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(config),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andReturn(false);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, config, false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(ConnectException.class, exception.getCause().getClass());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"}],"commitId":"eb3fef760e1c876b936f175e0eb9a1446cf5bdcf","commitMessage":"@@@KAFKA-6253: Improve sink connector topic regex validation\n\nKAFKA-3073 added topic regex support for sink connectors. The addition requires that you only specify one of topics or topics.regex settings. This is being validated in one place.  but not during submission of connectors. This PR adds validation at `AbstractHerder.validateConnectorConfig` and `WorkerConnector.initialize`.\n\nThis adds a test of the new behavior to `AbstractHerderTest`.\n\nAuthor: Jeff Klukas <jeff@klukas.net>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4251 from jklukas/connect-topics-validation\n","date":"2018-02-06 01:46:07","modifiedFileCount":"7","status":"M","submitter":"Jeff Klukas"},{"authorTime":"2020-06-11 16:29:23","codes":[{"authorDate":"2020-06-11 16:29:23","commitOrder":8,"curCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        Map<String, String> config = connectorConfig(SourceSink.SOURCE);\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        expectConfigValidation(connectorMock, true, config);\n\n        worker.stopAndAwaitConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        Capture<Callback<TargetState>> onStart = EasyMock.newCapture();\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(config), EasyMock.anyObject(HerderConnectorContext.class),\n            EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED), EasyMock.capture(onStart));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Boolean>() {\n            @Override\n            public Boolean answer() throws Throwable {\n                onStart.getValue().onCompletion(null, TargetState.STARTED);\n                return true;\n            }\n        });\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, config, false, createCallback);\n        Herder.Created<ConnectorInfo> connectorInfo = createCallback.get(1000L, TimeUnit.SECONDS);\n        assertEquals(createdInfo(SourceSink.SOURCE), connectorInfo.result());\n\n        FutureCallback<Void> restartCallback = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, restartCallback);\n        restartCallback.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-11 16:29:23","endLine":320,"groupId":"12560","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestartConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/7ae196c025489aa68e6440df5298d3d6c27d1d.src","preCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        Map<String, String> config = connectorConfig(SourceSink.SOURCE);\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        expectConfigValidation(connectorMock, true, config);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall().andReturn(true);\n\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(config),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andReturn(true);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, config, false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        cb.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"},{"authorDate":"2020-06-11 16:29:23","commitOrder":8,"curCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        Map<String, String> config = connectorConfig(SourceSink.SOURCE);\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        expectConfigValidation(connectorMock, true, config);\n\n        worker.stopAndAwaitConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        Capture<Callback<TargetState>> onStart = EasyMock.newCapture();\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(config), EasyMock.anyObject(HerderConnectorContext.class),\n            EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED), EasyMock.capture(onStart));\n        Exception exception = new ConnectException(\"Failed to start connector\");\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Boolean>() {\n            @Override\n            public Boolean answer() throws Throwable {\n                onStart.getValue().onCompletion(exception, null);\n                return true;\n            }\n        });\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, config, false, createCallback);\n        Herder.Created<ConnectorInfo> connectorInfo = createCallback.get(1000L, TimeUnit.SECONDS);\n        assertEquals(createdInfo(SourceSink.SOURCE), connectorInfo.result());\n\n        FutureCallback<Void> restartCallback = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, restartCallback);\n        try {\n            restartCallback.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException e) {\n            assertEquals(exception, e.getCause());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-11 16:29:23","endLine":361,"groupId":"16882","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartConnectorFailureOnStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/7ae196c025489aa68e6440df5298d3d6c27d1d.src","preCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        Map<String, String> config = connectorConfig(SourceSink.SOURCE);\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        expectConfigValidation(connectorMock, true, config);\n\n        worker.stopConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall().andReturn(true);\n\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(config),\n                EasyMock.anyObject(HerderConnectorContext.class), EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED));\n        EasyMock.expectLastCall().andReturn(false);\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, config, false, createCallback);\n\n        FutureCallback<Void> cb = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, cb);\n        try {\n            cb.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException exception) {\n            assertEquals(ConnectException.class, exception.getCause().getClass());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"}],"commitId":"7f4fc76e968a6b2cf4a73364c93bfdea03f81af3","commitMessage":"@@@KAFKA-9374: Make connector interactions asynchronous (#8069)\n\nThese changes allow herders to continue to function even when a connector they are running hangs in its start.  stop.  initialize.  validate.  and/or config methods.\n\nThe main idea is to make these connector interactions asynchronous and accept a callback that can be invoked upon the completion (successful or otherwise) of these interactions. The distributed herder handles any follow-up logic by adding a new herder request to its queue in that callback.  which helps preserve some synchronization and ordering guarantees provided by the current tick model.\n\nIf any connector refuses to shut down within a graceful timeout period.  the framework will abandon it and potentially start a new connector in its place (in cases such as connector restart or reconfiguration).\n\nExisting unit tests for the distributed herder and worker have been modified to reflect these changes.  and a new integration test named `BlockingConnectorTest` has been added to ensure that they work in practice.\n\nReviewers: Greg Harris <gregh@confluent.io>.  Nigel Liang <nigel@nigelliang.com>.  Randall Hauch <rhauch@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>","date":"2020-06-11 16:29:23","modifiedFileCount":"18","status":"M","submitter":"Chris Egerton"},{"authorTime":"2021-02-05 01:15:49","codes":[{"authorDate":"2021-02-05 01:15:49","commitOrder":9,"curCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        Map<String, String> config = connectorConfig(SourceSink.SOURCE);\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        expectConfigValidation(connectorMock, true, config);\n\n        worker.stopAndAwaitConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        Capture<Callback<TargetState>> onStart = EasyMock.newCapture();\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(config), EasyMock.anyObject(HerderConnectorContext.class),\n            EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED), EasyMock.capture(onStart));\n        EasyMock.expectLastCall().andAnswer(() -> {\n            onStart.getValue().onCompletion(null, TargetState.STARTED);\n            return true;\n        });\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, config, false, createCallback);\n        Herder.Created<ConnectorInfo> connectorInfo = createCallback.get(1000L, TimeUnit.SECONDS);\n        assertEquals(createdInfo(SourceSink.SOURCE), connectorInfo.result());\n\n        FutureCallback<Void> restartCallback = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, restartCallback);\n        restartCallback.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 01:15:49","endLine":306,"groupId":"104744","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestartConnector","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/3988292968a946f73bb76a448aac0e08b89836.src","preCode":"    public void testRestartConnector() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        Map<String, String> config = connectorConfig(SourceSink.SOURCE);\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        expectConfigValidation(connectorMock, true, config);\n\n        worker.stopAndAwaitConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        Capture<Callback<TargetState>> onStart = EasyMock.newCapture();\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(config), EasyMock.anyObject(HerderConnectorContext.class),\n            EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED), EasyMock.capture(onStart));\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Boolean>() {\n            @Override\n            public Boolean answer() throws Throwable {\n                onStart.getValue().onCompletion(null, TargetState.STARTED);\n                return true;\n            }\n        });\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, config, false, createCallback);\n        Herder.Created<ConnectorInfo> connectorInfo = createCallback.get(1000L, TimeUnit.SECONDS);\n        assertEquals(createdInfo(SourceSink.SOURCE), connectorInfo.result());\n\n        FutureCallback<Void> restartCallback = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, restartCallback);\n        restartCallback.get(1000L, TimeUnit.MILLISECONDS);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"},{"authorDate":"2021-02-05 01:15:49","commitOrder":9,"curCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        Map<String, String> config = connectorConfig(SourceSink.SOURCE);\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        expectConfigValidation(connectorMock, true, config);\n\n        worker.stopAndAwaitConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        Capture<Callback<TargetState>> onStart = EasyMock.newCapture();\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(config), EasyMock.anyObject(HerderConnectorContext.class),\n            EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED), EasyMock.capture(onStart));\n        Exception exception = new ConnectException(\"Failed to start connector\");\n        EasyMock.expectLastCall().andAnswer(() -> {\n            onStart.getValue().onCompletion(exception, null);\n            return true;\n        });\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, config, false, createCallback);\n        Herder.Created<ConnectorInfo> connectorInfo = createCallback.get(1000L, TimeUnit.SECONDS);\n        assertEquals(createdInfo(SourceSink.SOURCE), connectorInfo.result());\n\n        FutureCallback<Void> restartCallback = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, restartCallback);\n        try {\n            restartCallback.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException e) {\n            assertEquals(exception, e.getCause());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 01:15:49","endLine":344,"groupId":"104744","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartConnectorFailureOnStart","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/3988292968a946f73bb76a448aac0e08b89836.src","preCode":"    public void testRestartConnectorFailureOnStart() throws Exception {\n        expectAdd(SourceSink.SOURCE);\n\n        Map<String, String> config = connectorConfig(SourceSink.SOURCE);\n        Connector connectorMock = PowerMock.createMock(SourceConnector.class);\n        expectConfigValidation(connectorMock, true, config);\n\n        worker.stopAndAwaitConnector(CONNECTOR_NAME);\n        EasyMock.expectLastCall();\n\n        Capture<Callback<TargetState>> onStart = EasyMock.newCapture();\n        worker.startConnector(EasyMock.eq(CONNECTOR_NAME), EasyMock.eq(config), EasyMock.anyObject(HerderConnectorContext.class),\n            EasyMock.eq(herder), EasyMock.eq(TargetState.STARTED), EasyMock.capture(onStart));\n        Exception exception = new ConnectException(\"Failed to start connector\");\n        EasyMock.expectLastCall().andAnswer(new IAnswer<Boolean>() {\n            @Override\n            public Boolean answer() throws Throwable {\n                onStart.getValue().onCompletion(exception, null);\n                return true;\n            }\n        });\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONNECTOR_NAME, config, false, createCallback);\n        Herder.Created<ConnectorInfo> connectorInfo = createCallback.get(1000L, TimeUnit.SECONDS);\n        assertEquals(createdInfo(SourceSink.SOURCE), connectorInfo.result());\n\n        FutureCallback<Void> restartCallback = new FutureCallback<>();\n        herder.restartConnector(CONNECTOR_NAME, restartCallback);\n        try {\n            restartCallback.get(1000L, TimeUnit.MILLISECONDS);\n            fail();\n        } catch (ExecutionException e) {\n            assertEquals(exception, e.getCause());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"M"}],"commitId":"c19a35d1b740c85559a7ff4e882fc95b4737808d","commitMessage":"@@@KAFKA-10835: Replace Runnable and Callable overrides with lambdas in Connect (#9867)\n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 01:15:49","modifiedFileCount":"50","status":"M","submitter":"Lev Zemlyanov"}]
