[{"authorTime":"2017-11-30 02:45:14","codes":[{"authorDate":"2017-11-30 02:45:14","commitOrder":1,"curCode":"    public KeyValueIterator<Windowed<K>, V> all() {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (long now : data.keySet()) {\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {\n\n            }\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"remove() not supported in \" + getClass().getName());\n            }\n        };\n    }\n","date":"2017-11-30 02:55:43","endLine":110,"groupId":"7997","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"all","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/25/6df33a5a6fac4763ae5802404f4b7ad0038668.src","preCode":"    public KeyValueIterator<Windowed<K>, V> all() {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (long now : data.keySet()) {\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {\n\n            }\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"remove() not supported in \" + getClass().getName());\n            }\n        };\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"},{"authorDate":"2017-11-30 02:45:14","commitOrder":1,"curCode":"    public KeyValueIterator<Windowed<K>, V> fetchAll(long timeFrom, long timeTo) {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (long now : data.keySet()) {\n            if (!(now >= timeFrom && now <= timeTo)) continue;\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {\n\n            }\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"remove() not supported in \" + getClass().getName());\n            }\n        };\n    }\n","date":"2017-11-30 02:55:43","endLine":156,"groupId":"7997","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchAll","params":"(longtimeFrom@longtimeTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/25/6df33a5a6fac4763ae5802404f4b7ad0038668.src","preCode":"    public KeyValueIterator<Windowed<K>, V> fetchAll(long timeFrom, long timeTo) {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (long now : data.keySet()) {\n            if (!(now >= timeFrom && now <= timeTo)) continue;\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {\n\n            }\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"remove() not supported in \" + getClass().getName());\n            }\n        };\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"B"}],"commitId":"0cc32abc17d26c5faf6fdc3b63a01016e05a65b9","commitMessage":"@@@KAFKA-4499: Add all() and fetchAll() API for querying window store\n\nA rebased version of the code.\n\nAuthor: RichardYuSTUG <yohan.richard.yu2@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #4258 from ConcurrencyPractitioner/trunk\n\nAdd EmptyWindowStoreIterator to NoOpWindowStore\n","date":"2017-11-30 02:55:43","modifiedFileCount":"26","status":"B","submitter":"Richard Yu"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2018-08-04 04:19:46","commitOrder":2,"curCode":"    public KeyValueIterator<Windowed<K>, V> all() {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (final long now : data.keySet()) {\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (final Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {\n\n            }\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"remove() not supported in \" + getClass().getName());\n            }\n        };\n    }\n","date":"2018-08-04 04:19:46","endLine":119,"groupId":"7997","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"all","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/18d0990f2ad7d0b19560bbe9b727b309a4b477.src","preCode":"    public KeyValueIterator<Windowed<K>, V> all() {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (long now : data.keySet()) {\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {\n\n            }\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"remove() not supported in \" + getClass().getName());\n            }\n        };\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2018-08-04 04:19:46","commitOrder":2,"curCode":"    public KeyValueIterator<Windowed<K>, V> fetchAll(final long timeFrom, final long timeTo) {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (final long now : data.keySet()) {\n            if (!(now >= timeFrom && now <= timeTo)) continue;\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (final Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {\n\n            }\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"remove() not supported in \" + getClass().getName());\n            }\n        };\n    }\n","date":"2018-08-04 04:19:46","endLine":165,"groupId":"7997","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchAll","params":"(finallongtimeFrom@finallongtimeTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/18d0990f2ad7d0b19560bbe9b727b309a4b477.src","preCode":"    public KeyValueIterator<Windowed<K>, V> fetchAll(long timeFrom, long timeTo) {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (long now : data.keySet()) {\n            if (!(now >= timeFrom && now <= timeTo)) continue;\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {\n\n            }\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"remove() not supported in \" + getClass().getName());\n            }\n        };\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"3637b2c374d48e99e0a7be37605d3c79f2661007","commitMessage":"@@@MINOR: Require final variables in Streams (#5452)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-08-04 04:19:46","modifiedFileCount":"212","status":"M","submitter":"John Roesler"},{"authorTime":"2018-12-11 17:54:41","codes":[{"authorDate":"2018-08-04 04:19:46","commitOrder":3,"curCode":"    public KeyValueIterator<Windowed<K>, V> all() {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (final long now : data.keySet()) {\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (final Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {\n\n            }\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"remove() not supported in \" + getClass().getName());\n            }\n        };\n    }\n","date":"2018-08-04 04:19:46","endLine":119,"groupId":"7997","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"all","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/18d0990f2ad7d0b19560bbe9b727b309a4b477.src","preCode":"    public KeyValueIterator<Windowed<K>, V> all() {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (final long now : data.keySet()) {\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (final Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {\n\n            }\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"remove() not supported in \" + getClass().getName());\n            }\n        };\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"},{"authorDate":"2018-12-11 17:54:41","commitOrder":3,"curCode":"    public KeyValueIterator<Windowed<K>, V> fetchAll(final long timeFrom, final long timeTo) {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (final long now : data.keySet()) {\n            if (!(now >= timeFrom && now <= timeTo)) {\n                continue;\n            }\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (final Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {}\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"remove() not supported in \" + getClass().getName());\n            }\n        };\n    }\n","date":"2018-12-11 17:54:41","endLine":177,"groupId":"7997","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchAll","params":"(finallongtimeFrom@finallongtimeTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/aa/d7403871890138c1f1b994c6db268fb8a62b94.src","preCode":"    public KeyValueIterator<Windowed<K>, V> fetchAll(final long timeFrom, final long timeTo) {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (final long now : data.keySet()) {\n            if (!(now >= timeFrom && now <= timeTo)) continue;\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (final Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {\n\n            }\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"remove() not supported in \" + getClass().getName());\n            }\n        };\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"046b0087bd76637bbfd813ccef31693fa358ff2d","commitMessage":"@@@MINOR: improve Streams checkstyle and code cleanup (#5954)\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Nikolay Izhikov <nIzhikov@gmail.com>.  Ismael Juma <ismael@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2018-12-11 17:54:41","modifiedFileCount":"74","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-08-14 07:30:48","codes":[{"authorDate":"2019-08-14 07:30:48","commitOrder":4,"curCode":"    public KeyValueIterator<Windowed<K>, V> all() {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (final long now : data.keySet()) {\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (final Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {}\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n        };\n    }\n","date":"2019-08-14 07:30:48","endLine":125,"groupId":"7997","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"all","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/46/8d551d793c00f83740c095222a97c5f06ecc8d.src","preCode":"    public KeyValueIterator<Windowed<K>, V> all() {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (final long now : data.keySet()) {\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (final Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {}\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"remove() not supported in \" + getClass().getName());\n            }\n        };\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2019-08-14 07:30:48","commitOrder":4,"curCode":"    public KeyValueIterator<Windowed<K>, V> fetchAll(final long timeFrom, final long timeTo) {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (final long now : data.keySet()) {\n            if (!(now >= timeFrom && now <= timeTo)) {\n                continue;\n            }\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (final Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {}\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n        };\n    }\n","date":"2019-08-14 07:30:48","endLine":167,"groupId":"7997","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchAll","params":"(finallongtimeFrom@finallongtimeTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/46/8d551d793c00f83740c095222a97c5f06ecc8d.src","preCode":"    public KeyValueIterator<Windowed<K>, V> fetchAll(final long timeFrom, final long timeTo) {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (final long now : data.keySet()) {\n            if (!(now >= timeFrom && now <= timeTo)) {\n                continue;\n            }\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (final Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {}\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException(\"remove() not supported in \" + getClass().getName());\n            }\n        };\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"e07b46dd0424717829f5e12fb0fa91065b943fcd","commitMessage":"@@@MINOR: remove unnecessary #remove overrides (#7178)\n\nIterator#remove has a default implementation that throws UnsupportedOperatorException so there's no need to override it with the same thing.\n\nShould be cherry-picked back to whenever we switched to Java 8\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-08-14 07:30:48","modifiedFileCount":"23","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2021-05-05 00:23:30","codes":[{"authorDate":"2019-08-14 07:30:48","commitOrder":5,"curCode":"    public KeyValueIterator<Windowed<K>, V> all() {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (final long now : data.keySet()) {\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (final Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {}\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n        };\n    }\n","date":"2019-08-14 07:30:48","endLine":125,"groupId":"10836","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"all","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/46/8d551d793c00f83740c095222a97c5f06ecc8d.src","preCode":"    public KeyValueIterator<Windowed<K>, V> all() {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (final long now : data.keySet()) {\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (final Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {}\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n        };\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"},{"authorDate":"2021-05-05 00:23:30","commitOrder":5,"curCode":"    public KeyValueIterator<Windowed<K>, V> fetchAll(final Instant timeFrom, final Instant timeTo) {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (final long now : data.keySet()) {\n            if (!(now >= timeFrom.toEpochMilli() && now <= timeTo.toEpochMilli())) {\n                continue;\n            }\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (final Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {\n            }\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n        };\n    }\n","date":"2021-05-05 00:23:30","endLine":214,"groupId":"10836","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"fetchAll","params":"(finalInstanttimeFrom@finalInstanttimeTo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/79/d22296fad8849aace93309d451d7fb35693634.src","preCode":"    public KeyValueIterator<Windowed<K>, V> fetchAll(final long timeFrom, final long timeTo) {\n        if (!open) {\n            throw new InvalidStateStoreException(\"Store is not open\");\n        }\n        final List<KeyValue<Windowed<K>, V>> results = new ArrayList<>();\n        for (final long now : data.keySet()) {\n            if (!(now >= timeFrom && now <= timeTo)) {\n                continue;\n            }\n            final NavigableMap<K, V> kvMap = data.get(now);\n            if (kvMap != null) {\n                for (final Entry<K, V> entry : kvMap.entrySet()) {\n                    results.add(new KeyValue<>(new Windowed<>(entry.getKey(), new TimeWindow(now, now + windowSize)), entry.getValue()));\n                }\n            }\n        }\n        final Iterator<KeyValue<Windowed<K>, V>> iterator = results.iterator();\n\n        return new KeyValueIterator<Windowed<K>, V>() {\n            @Override\n            public void close() {\n            }\n\n            @Override\n            public Windowed<K> peekNextKey() {\n                throw new UnsupportedOperationException(\"peekNextKey() not supported in \" + getClass().getName());\n            }\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public KeyValue<Windowed<K>, V> next() {\n                return iterator.next();\n            }\n\n        };\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ReadOnlyWindowStoreStub.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"45f24c41954e5bfeeec5b7050ee8fb873dd8104a","commitMessage":"@@@KAFKA-12450: Remove deprecated methods from ReadOnlyWindowStore (#10294)\n\nImplement first part of https://cwiki.apache.org/confluence/display/KAFKA/KIP-667%3A+Remove+deprecated+methods+from+ReadOnlyWindowStore.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2021-05-05 00:23:30","modifiedFileCount":"7","status":"M","submitter":"Jorge Esteban Quilcate Otoya"}]
