[{"authorTime":"2018-01-19 05:12:44","codes":[{"authorDate":"2018-01-19 05:12:44","commitOrder":1,"curCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\").filter(MockPredicate.<Bytes, String>allGoodPredicate());\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n\n        driver.setUp(builder, TestUtils.tempDirectory());\n\n        ProcessorTopology topology = builder.internalTopologyBuilder.build();\n\n        assertThat(topology.stateStores().size(), equalTo(1));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty(), is(true));\n    }\n","date":"2018-01-19 05:12:44","endLine":80,"groupId":"13944","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAllowJoinUnmaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4a/496b8dd282d65b04239b95be3f8389f465d4e1.src","preCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\").filter(MockPredicate.<Bytes, String>allGoodPredicate());\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n\n        driver.setUp(builder, TestUtils.tempDirectory());\n\n        ProcessorTopology topology = builder.internalTopologyBuilder.build();\n\n        assertThat(topology.stateStores().size(), equalTo(1));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty(), is(true));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"},{"authorDate":"2018-01-19 05:12:44","commitOrder":1,"curCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\")\n                .filter(MockPredicate.<Bytes, String>allGoodPredicate(), Materialized.<Bytes, String, KeyValueStore<Bytes, byte[]>>as(\"store\"));\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n\n        driver.setUp(builder, TestUtils.tempDirectory());\n\n        ProcessorTopology topology = builder.internalTopologyBuilder.build();\n\n        assertThat(topology.stateStores().size(), equalTo(2));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(\"store\")));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"), equalTo(Collections.singleton(\"store\")));\n    }\n","date":"2018-01-19 05:12:44","endLine":95,"groupId":"18933","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAllowJoinMaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4a/496b8dd282d65b04239b95be3f8389f465d4e1.src","preCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\")\n                .filter(MockPredicate.<Bytes, String>allGoodPredicate(), Materialized.<Bytes, String, KeyValueStore<Bytes, byte[]>>as(\"store\"));\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n\n        driver.setUp(builder, TestUtils.tempDirectory());\n\n        ProcessorTopology topology = builder.internalTopologyBuilder.build();\n\n        assertThat(topology.stateStores().size(), equalTo(2));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(\"store\")));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"), equalTo(Collections.singleton(\"store\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"75e37d7e2063b726aa0185f4b695f32cde69d95c","commitMessage":"@@@KAFKA-6398: Return value getter based on KTable materialization status\n\nThis is a bug fix that is composed of two parts:\n\n1. The major part is.  for all operators that is generating a KTable.  we should construct its value getter based on whether the KTable itself is materialized.\n1.a If yes.  then query the materialized store directly for value getter.\n1.b If not.  then hand over to its parents value getter (recursively) and apply the computation to return.\n\n2. The minor part is.  in KStreamImpl.  when joining with a table.  we should connect with table's `valueGetterSupplier().storeNames()`.  not the `internalStoreName()` as the latter always assume that the KTable is materialized.  but that is not always true.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>\n\nCloses #4421 from guozhangwang/K6398-KTableValueGetter\n","date":"2018-01-19 05:12:44","modifiedFileCount":"17","status":"B","submitter":"Guozhang Wang"},{"authorTime":"2018-04-27 02:30:42","codes":[{"authorDate":"2018-04-27 02:30:42","commitOrder":2,"curCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\").filter(MockPredicate.<Bytes, String>allGoodPredicate());\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.build();\n\n        assertThat(topology.stateStores().size(), equalTo(1));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty(), is(true));\n    }\n","date":"2018-04-27 02:30:42","endLine":99,"groupId":"13944","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAllowJoinUnmaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d3/e01faf32ba21c69eb7ed9be4241386ac2c3684.src","preCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\").filter(MockPredicate.<Bytes, String>allGoodPredicate());\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n\n        driver.setUp(builder, TestUtils.tempDirectory());\n\n        ProcessorTopology topology = builder.internalTopologyBuilder.build();\n\n        assertThat(topology.stateStores().size(), equalTo(1));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty(), is(true));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2018-04-27 02:30:42","commitOrder":2,"curCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\")\n                .filter(MockPredicate.<Bytes, String>allGoodPredicate(), Materialized.<Bytes, String, KeyValueStore<Bytes, byte[]>>as(\"store\"));\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.build();\n\n        assertThat(topology.stateStores().size(), equalTo(2));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(\"store\")));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"), equalTo(Collections.singleton(\"store\")));\n    }\n","date":"2018-04-27 02:30:42","endLine":112,"groupId":"18933","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAllowJoinMaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d3/e01faf32ba21c69eb7ed9be4241386ac2c3684.src","preCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\")\n                .filter(MockPredicate.<Bytes, String>allGoodPredicate(), Materialized.<Bytes, String, KeyValueStore<Bytes, byte[]>>as(\"store\"));\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n\n        driver.setUp(builder, TestUtils.tempDirectory());\n\n        ProcessorTopology topology = builder.internalTopologyBuilder.build();\n\n        assertThat(topology.stateStores().size(), equalTo(2));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(\"store\")));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"), equalTo(Collections.singleton(\"store\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"885abbfcd40aab57acec278d976956f07be15090","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [partial] (#4832)\n\n* Remove ProcessorTopologyTestDriver from TopologyTest\n* Fix ProcessorTopologyTest\n* Remove ProcessorTopologyTestDriver and InternalTopologyAccessor\n* Partially refactored StreamsBuilderTest but missing one test\n* Refactor KStreamBuilderTest\n* Refactor AbstractStreamTest\n* Further cleanup of AbstractStreamTest\n* Refactor GlobalKTableJoinsTest\n* Refactor InternalStreamsBuilderTest\n* Fix circular dependency in build.gradle\n* Refactor KGroupedStreamImplTest\n* Partial modifications to KGroupedTableImplTest\n* Refactor KGroupedTableImplTest\n* Refactor KStreamBranchTest\n* Refactor KStreamFilterTest\n* Refactor KStreamFlatMapTest KStreamFlatMapValuesTest\n* Refactor KStreamForeachTest\n* Refactor KStreamGlobalKTableJoinTest\n* Refactor KStreamGlobalKTableLeftJoinTest\n* Refactor KStreamImplTest\n* Refactor KStreamImplTest\n* Refactor KStreamKStreamJoinTest\n* Refactor KStreamKStreamLeftJoinTest\n* Refactor KStreamKTableJoinTest\n* Refactor KStreamKTableLeftJoinTest\n* Refactor KStreamMapTest and KStreamMapValuesTest\n* Refactor KStreamPeekTest and KStreamTransformTest\n* Refactor KStreamSelectKeyTest\n* Refactor KStreamTransformValuesTest\n* Refactor KStreamWindowAggregateTest\n* Add Depercation anotation to KStreamTestDriver and rollback failing tests in StreamsBuilderTest and KTableAggregateTest\n* Refactor KTableFilterTest\n* Refactor KTableForeachTest\n* Add getter for ProcessorTopology.  and simplify tests in StreamsBuilderTest\n* Refactor KTableImplTest\n* Remove unused imports\n* Refactor KTableAggregateTest\n* Fix style errors\n* Fix gradle build\n* Address reviewer comments:\n  - Remove properties new instance\n  - Remove extraneous line\n  - Remove unnecessary TopologyTestDriver instances from StreamsBuilderTest\n  - Move props.clear() to @After\n  - Clarify use of timestamp in KStreamFlatMapValuesTest\n  - Keep test using old Punctuator in KStreamTransformTest\n  - Add comment to clarify clock advances in KStreamTransformTest\n  - Add TopologyTestDriverWrapper class to access the protected constructor of TopologyTestDriver\n  - Revert KTableImplTest.testRepartition to KStreamTestDriver to avoid exposing the TopologyTestDriver processor topology\n  - Revert partially migrated classes: KTableAggregateTest.  KTableFilterTest.  and KTableImplTest\n* Rebase on current trunk an fix conflicts\n\nReviewers: Matthias J Sax <matthias@confluentio>.  Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2018-04-27 02:30:42","modifiedFileCount":"33","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-08-02 06:01:18","codes":[{"authorDate":"2018-08-02 06:01:18","commitOrder":3,"curCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\").filter(MockPredicate.<Bytes, String>allGoodPredicate());\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.build();\n\n        assertThat(topology.stateStores().size(), equalTo(1));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty(), is(true));\n    }\n","date":"2018-08-02 06:01:18","endLine":69,"groupId":"13944","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAllowJoinUnmaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/56/e6a6dc1c9f56d8f93e4301bcc4b7b681f7a9c0.src","preCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\").filter(MockPredicate.<Bytes, String>allGoodPredicate());\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.build();\n\n        assertThat(topology.stateStores().size(), equalTo(1));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty(), is(true));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2018-08-02 06:01:18","commitOrder":3,"curCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\")\n                .filter(MockPredicate.<Bytes, String>allGoodPredicate(), Materialized.<Bytes, String, KeyValueStore<Bytes, byte[]>>as(\"store\"));\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.build();\n\n        assertThat(topology.stateStores().size(), equalTo(2));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(\"store\")));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"), equalTo(Collections.singleton(\"store\")));\n    }\n","date":"2018-08-02 06:01:18","endLine":83,"groupId":"18933","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAllowJoinMaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/56/e6a6dc1c9f56d8f93e4301bcc4b7b681f7a9c0.src","preCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\")\n                .filter(MockPredicate.<Bytes, String>allGoodPredicate(), Materialized.<Bytes, String, KeyValueStore<Bytes, byte[]>>as(\"store\"));\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.build();\n\n        assertThat(topology.stateStores().size(), equalTo(2));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(\"store\")));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"), equalTo(Collections.singleton(\"store\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"c19213ab4139aa1f56f89982448184a5c82f98a4","commitMessage":"@@@KAFKA-6761: Construct Physical Plan using Graph.  Reduce streams footprint part III (#5201)\n\nThe specific changes in this PR from the second PR include:\n\n1. Changed the types of graph nodes to names conveying more context\n2. Build the entire physical plan from the graph.  after StreamsBuilder.build() is called.\n\nOther changes are addressed directly as review comments on the PR.\n\nTesting consists of using all existing streams tests to validate building the physical plan with graph\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <vvcephei@users.noreply.github.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-08-02 06:01:18","modifiedFileCount":"37","status":"M","submitter":"Bill Bejeck"},{"authorTime":"2018-08-18 00:35:38","codes":[{"authorDate":"2018-08-18 00:35:38","commitOrder":4,"curCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\").filter(MockPredicate.<Bytes, String>allGoodPredicate());\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(topology.stateStores().size(), equalTo(1));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty(), is(true));\n    }\n","date":"2018-08-18 00:35:38","endLine":69,"groupId":"13944","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAllowJoinUnmaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/ab4ff87f1b103dd6aa441461f88dfeb77a28b1.src","preCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\").filter(MockPredicate.<Bytes, String>allGoodPredicate());\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.build();\n\n        assertThat(topology.stateStores().size(), equalTo(1));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty(), is(true));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2018-08-18 00:35:38","commitOrder":4,"curCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\")\n                .filter(MockPredicate.<Bytes, String>allGoodPredicate(), Materialized.<Bytes, String, KeyValueStore<Bytes, byte[]>>as(\"store\"));\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(topology.stateStores().size(), equalTo(2));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(\"store\")));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"), equalTo(Collections.singleton(\"store\")));\n    }\n","date":"2018-08-18 00:35:38","endLine":83,"groupId":"18933","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAllowJoinMaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/ab4ff87f1b103dd6aa441461f88dfeb77a28b1.src","preCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\")\n                .filter(MockPredicate.<Bytes, String>allGoodPredicate(), Materialized.<Bytes, String, KeyValueStore<Bytes, byte[]>>as(\"store\"));\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.build();\n\n        assertThat(topology.stateStores().size(), equalTo(2));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(\"store\")));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"), equalTo(Collections.singleton(\"store\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"0d778987ee3b920b5c876696385c0792671adef8","commitMessage":"@@@KAFKA-6998: Disable Caching when max.cache.bytes are zero. (#5488)\n\n1) As titled.  add a rewriteTopology that 1) sets application id.  2) maybe disable caching.  3) adjust for source KTable. This optimization can hence be applied for both DSL or PAPI generated Topology.\n\n2) Defer the building of globalStateStores in rewriteTopology so that we can also disable caching. But we still need to build the state stores before InternalTopologyBuilder.build() since we should only build global stores once for all threads.\n\n3) Added withCachingDisabled to StoreBuilder.  it is a public API change.\n\n4) [Optional] Fixed unit test config setting functionalities.  and set the necessary config to shorten the unit test latency (now it reduces from 5min to 3.5min on my laptop).\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Ted Yu <yuzhihong@gmail.com>","date":"2018-08-18 00:35:38","modifiedFileCount":"59","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-12-09 14:49:48","codes":[{"authorDate":"2018-12-09 14:49:48","commitOrder":5,"curCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\").filter(MockPredicate.allGoodPredicate());\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(topology.stateStores().size(), equalTo(1));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty(), is(true));\n    }\n","date":"2018-12-09 14:49:48","endLine":76,"groupId":"13944","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAllowJoinUnmaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/89/4b561b0c5df305fc42216bc97b1e6ba373cd7f.src","preCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\").filter(MockPredicate.<Bytes, String>allGoodPredicate());\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(topology.stateStores().size(), equalTo(1));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty(), is(true));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2018-12-09 14:49:48","commitOrder":5,"curCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\")\n                .filter(MockPredicate.allGoodPredicate(), Materialized.as(\"store\"));\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(topology.stateStores().size(), equalTo(1));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(\"store\")));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"), equalTo(Collections.singleton(\"store\")));\n    }\n","date":"2018-12-09 14:49:48","endLine":90,"groupId":"18933","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAllowJoinMaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/89/4b561b0c5df305fc42216bc97b1e6ba373cd7f.src","preCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\")\n                .filter(MockPredicate.<Bytes, String>allGoodPredicate(), Materialized.<Bytes, String, KeyValueStore<Bytes, byte[]>>as(\"store\"));\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(topology.stateStores().size(), equalTo(2));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(\"store\")));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"), equalTo(Collections.singleton(\"store\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"c0353d8ddce88bac6fc04f85dd40cb95b8ca5cf9","commitMessage":"@@@KAFKA-6036: Local Materialization for Source KTable (#5779)\n\nRefactor the materialization for source KTables in the way that:\n\nIf Materialized.as(queryableName) is specified.  materialize;\nIf the downstream operator requires to fetch from this KTable via ValueGetters.  materialize;\nIf the downstream operator requires to send old values.  materialize.\nOtherwise do not materialize the KTable. E.g. builder.table(\"topic\").filter().toStream().to(\"topic\") would not create any state stores.\n\nThere's a couple of minor changes along with PR as well:\n\nKTableImpl's queryableStoreName and isQueryable are merged into queryableStoreName only.  and if it is null it means not queryable. As long as it is not null.  it should be queryable (i.e. internally generated names will not be used any more).\nTo achieve this.  splitted MaterializedInternal.storeName() and MaterializedInternal.queryableName(). The former can be internally generated and will not be exposed to users. QueryableName can be modified to set to the internal store name if we decide to materialize it during the DSL parsing / physical topology generation phase. And only if queryableName is specified the corresponding KTable is determined to be materialized.\n\nFound some overlapping unit tests among KTableImplTest.  and KTableXXTest.  removed them.\n\nThere are a few typing bugs found along the way.  fixed them as well.\n\n-----------------------\n\nThis PR is an illustration of experimenting a poc towards logical materializations.\n\nToday we've logically materialized the KTable for filter / mapValues / transformValues if queryableName is not specified via Materialized.  but whenever users specify queryableName we will still always materialize. My original goal is to also consider logically materialize for queryable stores.  but when implementing it via a wrapped store to apply the transformations on the fly I realized it is tougher than I thought.  because we not only need to support fetch or get.  but also needs to support range queries.  approximateNumEntries.  and isOpen etc as well.  which are not efficient to support. So in the end I'd suggest we still stick with the rule of always materializing if queryableName is specified.  and only consider logical materialization otherwise.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <mjsax@apache.org>","date":"2018-12-09 14:49:48","modifiedFileCount":"32","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-12-09 14:49:48","codes":[{"authorDate":"2019-01-09 05:32:53","commitOrder":6,"curCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder\n            .<Bytes, String>table(\"table-topic\")\n            .filter(MockPredicate.allGoodPredicate());\n        builder\n            .<Bytes, String>stream(\"stream-topic\")\n            .join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology =\n            builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(\n            topology.stateStores().size(),\n            equalTo(1));\n        assertThat(\n            topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"),\n            equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertTrue(\n            topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty());\n    }\n","date":"2019-01-09 05:32:53","endLine":86,"groupId":"13944","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAllowJoinUnmaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9e/88a87b402019f25993b4b848040adc7dd12811.src","preCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\").filter(MockPredicate.allGoodPredicate());\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(topology.stateStores().size(), equalTo(1));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty(), is(true));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2018-12-09 14:49:48","commitOrder":6,"curCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\")\n                .filter(MockPredicate.allGoodPredicate(), Materialized.as(\"store\"));\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(topology.stateStores().size(), equalTo(1));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(\"store\")));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"), equalTo(Collections.singleton(\"store\")));\n    }\n","date":"2018-12-09 14:49:48","endLine":90,"groupId":"18933","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAllowJoinMaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/89/4b561b0c5df305fc42216bc97b1e6ba373cd7f.src","preCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder.<Bytes, String>table(\"table-topic\")\n                .filter(MockPredicate.allGoodPredicate(), Materialized.as(\"store\"));\n        builder.<Bytes, String>stream(\"stream-topic\").join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology = builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(topology.stateStores().size(), equalTo(1));\n        assertThat(topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"), equalTo(Collections.singleton(\"store\")));\n        assertThat(topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"), equalTo(Collections.singleton(\"store\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"N"}],"commitId":"3991d81f6c645bdf36c58e3d56b829ff92dbff3a","commitMessage":"@@@MINOR: code cleanup (#6056)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-01-09 05:32:53","modifiedFileCount":"19","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-04-19 06:45:34","codes":[{"authorDate":"2019-04-19 06:45:34","commitOrder":7,"curCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder\n            .<Bytes, String>table(TABLE_TOPIC)\n            .filter(MockPredicate.allGoodPredicate());\n        builder\n            .<Bytes, String>stream(STREAM_TOPIC)\n            .join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology =\n            builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(\n            topology.stateStores().size(),\n            equalTo(1));\n        assertThat(\n            topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"),\n            equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertTrue(\n            topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty());\n    }\n","date":"2019-04-19 06:45:33","endLine":99,"groupId":"13944","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAllowJoinUnmaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/66/9cece85425f13625400b25b8601f212305aae6.src","preCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder\n            .<Bytes, String>table(\"table-topic\")\n            .filter(MockPredicate.allGoodPredicate());\n        builder\n            .<Bytes, String>stream(\"stream-topic\")\n            .join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology =\n            builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(\n            topology.stateStores().size(),\n            equalTo(1));\n        assertThat(\n            topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"),\n            equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertTrue(\n            topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2019-04-19 06:45:34","commitOrder":7,"curCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder\n            .<Bytes, String>table(TABLE_TOPIC)\n            .filter(MockPredicate.allGoodPredicate(), Materialized.as(\"store\"));\n        builder\n            .<Bytes, String>stream(STREAM_TOPIC)\n            .join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology =\n            builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(\n            topology.stateStores().size(),\n            equalTo(1));\n        assertThat(\n            topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"),\n            equalTo(Collections.singleton(\"store\")));\n        assertThat(\n            topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"),\n            equalTo(Collections.singleton(\"store\")));\n    }\n","date":"2019-04-19 06:45:33","endLine":123,"groupId":"1405","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAllowJoinMaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/66/9cece85425f13625400b25b8601f212305aae6.src","preCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder\n            .<Bytes, String>table(\"table-topic\")\n            .filter(MockPredicate.allGoodPredicate(), Materialized.as(\"store\"));\n        builder\n            .<Bytes, String>stream(\"stream-topic\")\n            .join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology =\n            builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(\n            topology.stateStores().size(),\n            equalTo(1));\n        assertThat(\n            topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"),\n            equalTo(Collections.singleton(\"store\")));\n        assertThat(\n            topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"),\n            equalTo(Collections.singleton(\"store\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"}],"commitId":"075b368d47ad3144518e4d425f9155e35f15f418","commitMessage":"@@@KAFKA-6958: Allow to name operation using parameter classes (#6410)\n\nThis is the 2nd PR for the KIP-307\nReviewers: Matthias J. Sax <mjsax@apache.org>.   John Roesler <john@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-04-19 06:45:33","modifiedFileCount":"17","status":"M","submitter":"Florian Hussonnois"},{"authorTime":"2020-02-26 07:28:01","codes":[{"authorDate":"2020-02-26 07:28:01","commitOrder":8,"curCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder\n            .<Bytes, String>table(TABLE_TOPIC)\n            .filter(MockPredicate.allGoodPredicate());\n        builder\n            .<Bytes, String>stream(STREAM_TOPIC)\n            .join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology =\n            builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n\n        assertThat(\n            topology.stateStores().size(),\n            equalTo(1));\n        assertThat(\n            topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"),\n            equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertTrue(\n            topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty());\n    }\n","date":"2020-02-26 07:28:01","endLine":109,"groupId":"102550","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAllowJoinUnmaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bf/848299f2be953a52bb3b6d437fc665b316e0d2.src","preCode":"    public void shouldAllowJoinUnmaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder\n            .<Bytes, String>table(TABLE_TOPIC)\n            .filter(MockPredicate.allGoodPredicate());\n        builder\n            .<Bytes, String>stream(STREAM_TOPIC)\n            .join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology =\n            builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(\n            topology.stateStores().size(),\n            equalTo(1));\n        assertThat(\n            topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"),\n            equalTo(Collections.singleton(topology.stateStores().get(0).name())));\n        assertTrue(\n            topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\").isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2020-02-26 07:28:01","commitOrder":8,"curCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder\n            .<Bytes, String>table(TABLE_TOPIC)\n            .filter(MockPredicate.allGoodPredicate(), Materialized.as(\"store\"));\n        builder\n            .<Bytes, String>stream(STREAM_TOPIC)\n            .join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology =\n            builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).buildTopology();\n\n        assertThat(\n            topology.stateStores().size(),\n            equalTo(1));\n        assertThat(\n            topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"),\n            equalTo(Collections.singleton(\"store\")));\n        assertThat(\n            topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"),\n            equalTo(Collections.singleton(\"store\")));\n    }\n","date":"2020-02-26 07:28:01","endLine":133,"groupId":"102550","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAllowJoinMaterializedFilteredKTable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bf/848299f2be953a52bb3b6d437fc665b316e0d2.src","preCode":"    public void shouldAllowJoinMaterializedFilteredKTable() {\n        final KTable<Bytes, String> filteredKTable = builder\n            .<Bytes, String>table(TABLE_TOPIC)\n            .filter(MockPredicate.allGoodPredicate(), Materialized.as(\"store\"));\n        builder\n            .<Bytes, String>stream(STREAM_TOPIC)\n            .join(filteredKTable, MockValueJoiner.TOSTRING_JOINER);\n        builder.build();\n\n        final ProcessorTopology topology =\n            builder.internalTopologyBuilder.rewriteTopology(new StreamsConfig(props)).build();\n\n        assertThat(\n            topology.stateStores().size(),\n            equalTo(1));\n        assertThat(\n            topology.processorConnectedStateStores(\"KSTREAM-JOIN-0000000005\"),\n            equalTo(Collections.singleton(\"store\")));\n        assertThat(\n            topology.processorConnectedStateStores(\"KTABLE-FILTER-0000000003\"),\n            equalTo(Collections.singleton(\"store\")));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"a28447a06582bf8e6de427f047f3d3ba4e2219a1","commitMessage":"@@@MINOR: don't assign standby tasks with no logged state (#8147)\n\nRight now the task assignor just blindly assigns N standby tasks per active task (where N = num.standbys) and attempts to distribute them evenly across all instances/threads. But only standby tasks that are stateful.  and whose stores are changelog-enabled.  will ever actually be created.\n\nThis can result in a less-balanced assignment.  and should be cleaned up in particular before implementing KIP-441 to remove the noise of ghost standbys.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-02-26 07:28:01","modifiedFileCount":"16","status":"M","submitter":"A. Sophie Blee-Goldman"}]
