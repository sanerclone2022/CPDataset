[{"authorTime":"2016-02-10 13:10:06","codes":[{"authorDate":"2016-02-10 13:10:06","commitOrder":1,"curCode":"    public void testInterceptorConstructClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<String, String>(\n                    props, new StringSerializer(), new StringSerializer());\n            Assert.assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            producer.close();\n            Assert.assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","date":"2016-02-10 13:10:06","endLine":97,"groupId":"18366","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInterceptorConstructClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2d/ada8c02819cea843313451c7a7549d5ea5eed7.src","preCode":"    public void testInterceptorConstructClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<String, String>(\n                    props, new StringSerializer(), new StringSerializer());\n            Assert.assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            producer.close();\n            Assert.assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2016-02-10 13:10:06","commitOrder":1,"curCode":"    public void testInterceptorConstructorClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            Assert.assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            Assert.assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","date":"2016-02-10 13:10:06","endLine":118,"groupId":"18366","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInterceptorConstructorClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c6/5fd736cd0f490bbad74d933ca034a2581c0105.src","preCode":"    public void testInterceptorConstructorClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            Assert.assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            Assert.assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"B"}],"commitId":"d5b43b19bb06e9cdc606312c8bcf87ed267daf44","commitMessage":"@@@KAFKA-3162: Added producer and consumer interceptors\n\nThis is the most of the KIP-42: Producer and consumer interceptor. (Except exposing CRC and record sizes to the interceptor.  which is coming as a separate PR; tracked by KAFKA-3196).\n\nThis PR includes:\n1. Add ProducerInterceptor interface and call its callbacks from appropriate places in Kafka Producer.\n2. Add ConsumerInterceptor interface and call its callbacks from appropriate places in Kafka Consumer.\n3. Add unit tests for interceptor changes\n4. Add integration test for both mutable consumer and producer interceptors.\n\nAuthor: Anna Povzner <anna@confluent.io>\n\nReviewers: Jason Gustavson.  Ismael Juma.  Gwen Shapira\n\nCloses #854 from apovzner/kip42\n","date":"2016-02-10 13:10:06","modifiedFileCount":"9","status":"B","submitter":"Anna Povzner"},{"authorTime":"2016-03-19 07:07:20","codes":[{"authorDate":"2016-02-10 13:10:06","commitOrder":2,"curCode":"    public void testInterceptorConstructClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<String, String>(\n                    props, new StringSerializer(), new StringSerializer());\n            Assert.assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            producer.close();\n            Assert.assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","date":"2016-02-10 13:10:06","endLine":97,"groupId":"18366","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInterceptorConstructClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2d/ada8c02819cea843313451c7a7549d5ea5eed7.src","preCode":"    public void testInterceptorConstructClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<String, String>(\n                    props, new StringSerializer(), new StringSerializer());\n            Assert.assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            producer.close();\n            Assert.assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"},{"authorDate":"2016-03-19 07:07:20","commitOrder":2,"curCode":"    public void testInterceptorConstructorClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","date":"2016-03-19 07:07:20","endLine":114,"groupId":"5799","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInterceptorConstructorClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ff/07461ac7845779b910fe4ae517ad6373290eec.src","preCode":"    public void testInterceptorConstructorClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            Assert.assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            Assert.assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"4332175c11dda5deb491f27a6ecf66661676ca47","commitMessage":"@@@KAFKA-3006: standardize KafkaConsumer API to use Collection\n\nAuthor: Pierre-Yves Ritschard <pyr@spootnik.org>\n\nReviewers: Jason Gustafson.  Gwen Shapira\n\nCloses #1098 from hachikuji/KAFKA-3006\n","date":"2016-03-19 07:07:20","modifiedFileCount":"17","status":"M","submitter":"Pierre-Yves Ritschard"},{"authorTime":"2016-09-17 11:10:13","codes":[{"authorDate":"2016-09-17 11:10:13","commitOrder":3,"curCode":"    public void testInterceptorConstructClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<String, String>(\n                    props, new StringSerializer(), new StringSerializer());\n            Assert.assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            \r\n            Assert.assertNull(MockProducerInterceptor.CLUSTER_META.get());\n\n            producer.close();\n            Assert.assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","date":"2016-09-17 14:53:25","endLine":117,"groupId":"18366","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testInterceptorConstructClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/3fbfd3c62408baba637c225be6989a3d80a4f1.src","preCode":"    public void testInterceptorConstructClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<String, String>(\n                    props, new StringSerializer(), new StringSerializer());\n            Assert.assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            producer.close();\n            Assert.assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2016-09-17 11:10:13","commitOrder":3,"curCode":"    public void testInterceptorConstructorClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n            \r\n            Assert.assertNull(MockConsumerInterceptor.CLUSTER_META.get());\n\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","date":"2016-09-17 14:53:25","endLine":301,"groupId":"5799","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testInterceptorConstructorClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a9/10f2fecd7c131eda79ff2ab21821a6670e7992.src","preCode":"    public void testInterceptorConstructorClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"ecc1fb10fad39c2da82731a36552cb5dd9ac2858","commitMessage":"@@@KAFKA-4093; Cluster Id (KIP-78)\n\nThis PR implements  KIP-78:Cluster Identifiers [(link)](https://cwiki.apache.org/confluence/display/KAFKA/KIP-78%3A+Cluster+Id#KIP-78:ClusterId-Overview) and includes the following changes:\n\n1. Changes to broker code\n\t- generate cluster id and store it in Zookeeper\n\t- update protocol to add cluster id to metadata request and response\n\t- add ClusterResourceListener interface.  ClusterResource class and ClusterMetadataListeners utility class\n\t- send ClusterResource events to the metric reporters\n2. Changes to client code\n\t- update Cluster and Metadata code to support cluster id\n\t- update clients for sending ClusterResource events to interceptors.  (de)serializers and metric reporters\n3. Integration tests for interceptors.  (de)serializers and metric reporters for clients and for protocol changes and metric reporters for broker.\n4. System tests for upgrading from previous versions.\n\nAuthor: Sumit Arrawatia <sumit.arrawatia@gmail.com>\nAuthor: Ismael Juma <ismael@juma.me.uk>\n\nReviewers: Jun Rao <junrao@gmail.com>.  Ismael Juma <ismael@juma.me.uk>\n\nCloses #1830 from arrawatia/kip-78\n","date":"2016-09-17 14:53:25","modifiedFileCount":"31","status":"M","submitter":"Sumit Arrawatia"},{"authorTime":"2016-09-17 11:10:13","codes":[{"authorDate":"2017-05-13 01:36:44","commitOrder":4,"curCode":"    public void testInterceptorConstructClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<String, String>(\n                    props, new StringSerializer(), new StringSerializer());\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            \r\n            Assert.assertNull(MockProducerInterceptor.CLUSTER_META.get());\n\n            producer.close();\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","date":"2017-05-13 01:36:44","endLine":144,"groupId":"5799","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testInterceptorConstructClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3a/6426a13afe39f9cde543d74afafde4dca7ca7d.src","preCode":"    public void testInterceptorConstructClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<String, String>(\n                    props, new StringSerializer(), new StringSerializer());\n            Assert.assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            \r\n            Assert.assertNull(MockProducerInterceptor.CLUSTER_META.get());\n\n            producer.close();\n            Assert.assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            Assert.assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2016-09-17 11:10:13","commitOrder":4,"curCode":"    public void testInterceptorConstructorClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n            \r\n            Assert.assertNull(MockConsumerInterceptor.CLUSTER_META.get());\n\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","date":"2016-09-17 14:53:25","endLine":301,"groupId":"5799","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testInterceptorConstructorClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a9/10f2fecd7c131eda79ff2ab21821a6670e7992.src","preCode":"    public void testInterceptorConstructorClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n            \r\n            Assert.assertNull(MockConsumerInterceptor.CLUSTER_META.get());\n\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"N"}],"commitId":"1c2bbaa501c2d0fd4db9c2dacacc3ff7f5236d3d","commitMessage":"@@@MINOR: Fix consumer and producer to actually support metrics recording level\n\nAlso add tests and a few clean-ups.\n\nAuthor: Ismael Juma <ismael@juma.me.uk>\n\nReviewers: Eno Thereska <eno.thereska@gmail.com>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2937 from ijuma/metrics-recording-level-producer\n","date":"2017-05-13 01:36:44","modifiedFileCount":"6","status":"M","submitter":"Ismael Juma"},{"authorTime":"2018-02-15 02:52:46","codes":[{"authorDate":"2017-05-13 01:36:44","commitOrder":5,"curCode":"    public void testInterceptorConstructClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<String, String>(\n                    props, new StringSerializer(), new StringSerializer());\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            \r\n            Assert.assertNull(MockProducerInterceptor.CLUSTER_META.get());\n\n            producer.close();\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","date":"2017-05-13 01:36:44","endLine":144,"groupId":"5799","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testInterceptorConstructClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3a/6426a13afe39f9cde543d74afafde4dca7ca7d.src","preCode":"    public void testInterceptorConstructClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<String, String>(\n                    props, new StringSerializer(), new StringSerializer());\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            \r\n            Assert.assertNull(MockProducerInterceptor.CLUSTER_META.get());\n\n            producer.close();\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"},{"authorDate":"2018-02-15 02:52:46","commitOrder":5,"curCode":"    public void testInterceptorConstructorClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n            \r\n            Assert.assertNull(MockConsumerInterceptor.CLUSTER_META.get());\n\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","date":"2018-02-15 02:52:46","endLine":301,"groupId":"14405","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testInterceptorConstructorClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8c/147a58f770e0b6dec37c8bafd31798ab712ea3.src","preCode":"    public void testInterceptorConstructorClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n            \r\n            Assert.assertNull(MockConsumerInterceptor.CLUSTER_META.get());\n\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"6d18d882b850a8d757c32bb124b1e42e60587c69","commitMessage":"@@@KAFKA-6397: Consumer should not block setting positions of unavailable partitions (#4557)\n\nPrior to this patch.  the consumer always blocks in poll() if there are any partitions which are awaiting their initial positions. This behavior was inconsistent with normal fetch behavior since we allow fetching on available partitions even if one or more of the assigned partitions becomes unavailable _after_ initial offset lookup. With this patch.  the consumer will do offset resets asynchronously.  which allows other partitions to make progress even if the initial positions for some partitions cannot be found.\n\nI have added several new unit tests in `FetcherTest` and `KafkaConsumerTest` to verify the new behavior. One minor compatibility implication worth mentioning is apparent from the change I made in `DynamicBrokerReconfigurationTest`. Previously it was possible to assume that all partitions had a fetch position after `poll()` completed with a non-empty assignment. This assumption is no longer generally true.  but you can force the positions to be updated using the `position()` API which still blocks indefinitely until a position is available.\n\nNote that this this patch also removes the logic to cache committed offsets in `SubscriptionState` since it was no longer needed (the consumer's `committed()` API always does an offset lookup anyway). In addition to avoiding the complexity of maintaining the cache.  this avoids wasteful offset lookups to refresh the cache when `commitAsync()` is used.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>","date":"2018-02-15 02:52:46","modifiedFileCount":"12","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2018-02-15 02:52:46","codes":[{"authorDate":"2018-08-23 21:40:33","commitOrder":6,"curCode":"    public void testInterceptorConstructClose() {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<>(\n                    props, new StringSerializer(), new StringSerializer());\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            \r\n            Assert.assertNull(MockProducerInterceptor.CLUSTER_META.get());\n\n            producer.close();\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","date":"2018-08-23 21:40:33","endLine":154,"groupId":"13080","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testInterceptorConstructClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/22/fa0a1bfc0f4c02dedce9afbe6a2ef225714ea8.src","preCode":"    public void testInterceptorConstructClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<String, String>(\n                    props, new StringSerializer(), new StringSerializer());\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            \r\n            Assert.assertNull(MockProducerInterceptor.CLUSTER_META.get());\n\n            producer.close();\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2018-02-15 02:52:46","commitOrder":6,"curCode":"    public void testInterceptorConstructorClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n            \r\n            Assert.assertNull(MockConsumerInterceptor.CLUSTER_META.get());\n\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","date":"2018-02-15 02:52:46","endLine":301,"groupId":"14405","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testInterceptorConstructorClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8c/147a58f770e0b6dec37c8bafd31798ab712ea3.src","preCode":"    public void testInterceptorConstructorClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n            \r\n            Assert.assertNull(MockConsumerInterceptor.CLUSTER_META.get());\n\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"N"}],"commitId":"b1090e52a3c7ea83ef2d79cc4b6ff7084a5070a4","commitMessage":"@@@MINOR: Eliminate warnings from KafkaProducerTest (#5548)\n\nAnd code clean-ups in the same file.\n\nReviewers: Kamal Chandraprakash <kamal.chandraprakash@gmail.com>.  Ismael Juma <ismael@juma.me.uk>\n","date":"2018-08-23 21:40:33","modifiedFileCount":"1","status":"M","submitter":"Viktor Somogyi"},{"authorTime":"2020-06-06 06:53:13","codes":[{"authorDate":"2018-08-23 21:40:33","commitOrder":7,"curCode":"    public void testInterceptorConstructClose() {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<>(\n                    props, new StringSerializer(), new StringSerializer());\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            \r\n            Assert.assertNull(MockProducerInterceptor.CLUSTER_META.get());\n\n            producer.close();\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","date":"2018-08-23 21:40:33","endLine":154,"groupId":"13080","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testInterceptorConstructClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/22/fa0a1bfc0f4c02dedce9afbe6a2ef225714ea8.src","preCode":"    public void testInterceptorConstructClose() {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<>(\n                    props, new StringSerializer(), new StringSerializer());\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            \r\n            Assert.assertNull(MockProducerInterceptor.CLUSTER_META.get());\n\n            producer.close();\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"N"},{"authorDate":"2020-06-06 06:53:13","commitOrder":7,"curCode":"    public void testInterceptorConstructorClose() {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n            \r\n            Assert.assertNull(MockConsumerInterceptor.CLUSTER_META.get());\n\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","date":"2020-06-06 06:53:13","endLine":369,"groupId":"14405","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testInterceptorConstructorClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e2/ec870b4ca8e8b3c17a521cb2f768f9a9fca77b.src","preCode":"    public void testInterceptorConstructorClose() throws Exception {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n            \r\n            Assert.assertNull(MockConsumerInterceptor.CLUSTER_META.get());\n\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"}],"commitId":"910f3179960067135ec8ad4ab83d4582ff3847b5","commitMessage":"@@@KAFKA-9840; Skip End Offset validation when the leader epoch is not reliable (#8486)\n\nThis PR provides two fixes:\n1. Skip offset validation if the current leader epoch cannot be reliably determined.\n2. Raise an out of range error if the leader returns an undefined offset in response to the OffsetsForLeaderEpoch request.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2020-06-06 06:53:13","modifiedFileCount":"14","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2021-01-14 08:17:45","commitOrder":8,"curCode":"    public void testInterceptorConstructClose() {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<>(\n                    props, new StringSerializer(), new StringSerializer());\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            \r\n            assertNull(MockProducerInterceptor.CLUSTER_META.get());\n\n            producer.close();\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","date":"2021-01-14 08:17:45","endLine":276,"groupId":"103710","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testInterceptorConstructClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a0/a43994c411ca3718f761e9b8569b846b8dd97c.src","preCode":"    public void testInterceptorConstructClose() {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, MockProducerInterceptor.class.getName());\n            props.setProperty(MockProducerInterceptor.APPEND_STRING_PROP, \"something\");\n\n            KafkaProducer<String, String> producer = new KafkaProducer<>(\n                    props, new StringSerializer(), new StringSerializer());\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockProducerInterceptor.CLOSE_COUNT.get());\n\n            \r\n            Assert.assertNull(MockProducerInterceptor.CLUSTER_META.get());\n\n            producer.close();\n            assertEquals(1, MockProducerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockProducerInterceptor.CLOSE_COUNT.get());\n        } finally {\n            \r\n            MockProducerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2021-01-14 08:17:45","commitOrder":8,"curCode":"    public void testInterceptorConstructorClose() {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n            \r\n            assertNull(MockConsumerInterceptor.CLUSTER_META.get());\n\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","date":"2021-01-14 08:17:45","endLine":386,"groupId":"103710","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testInterceptorConstructorClose","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/999534f79d51d468b71915dd651682d853f971.src","preCode":"    public void testInterceptorConstructorClose() {\n        try {\n            Properties props = new Properties();\n            \r\n            props.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n            props.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MockConsumerInterceptor.class.getName());\n\n            KafkaConsumer<String, String> consumer = new KafkaConsumer<>(\n                    props, new StringDeserializer(), new StringDeserializer());\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(0, MockConsumerInterceptor.CLOSE_COUNT.get());\n\n            consumer.close();\n            assertEquals(1, MockConsumerInterceptor.INIT_COUNT.get());\n            assertEquals(1, MockConsumerInterceptor.CLOSE_COUNT.get());\n            \r\n            Assert.assertNull(MockConsumerInterceptor.CLUSTER_META.get());\n\n        } finally {\n            \r\n            MockConsumerInterceptor.resetCounters();\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":364,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"}]
