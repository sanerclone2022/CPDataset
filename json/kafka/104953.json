[{"authorTime":"2019-05-17 05:29:30","codes":[{"authorDate":"2019-05-17 05:29:30","commitOrder":1,"curCode":"    public void testExpandConnectorsInfo() throws Throwable {\n        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(CONNECTOR2_NAME, CONNECTOR_NAME));\n        ConnectorInfo connector = EasyMock.mock(ConnectorInfo.class);\n        ConnectorInfo connector2 = EasyMock.mock(ConnectorInfo.class);\n        EasyMock.expect(herder.connectorInfo(CONNECTOR2_NAME)).andReturn(connector2);\n        EasyMock.expect(herder.connectorInfo(CONNECTOR_NAME)).andReturn(connector);\n\n        forward = EasyMock.mock(UriInfo.class);\n        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<>();\n        queryParams.putSingle(\"expand\", \"info\");\n        EasyMock.expect(forward.getQueryParameters()).andReturn(queryParams).anyTimes();\n        EasyMock.replay(forward);\n\n        PowerMock.replayAll();\n\n        Map<String, Map<String, Object>> expanded = (Map<String, Map<String, Object>>) connectorsResource.listConnectors(forward).getEntity();\n        \r\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_NAME, CONNECTOR2_NAME)), expanded.keySet());\n        assertEquals(connector2, expanded.get(CONNECTOR2_NAME).get(\"info\"));\n        assertEquals(connector, expanded.get(CONNECTOR_NAME).get(\"info\"));\n        PowerMock.verifyAll();\n    }\n","date":"2019-05-17 05:29:29","endLine":207,"groupId":"13991","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpandConnectorsInfo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5d/c7f1ee687b9acbf169d308726b8c6d8da7f536.src","preCode":"    public void testExpandConnectorsInfo() throws Throwable {\n        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(CONNECTOR2_NAME, CONNECTOR_NAME));\n        ConnectorInfo connector = EasyMock.mock(ConnectorInfo.class);\n        ConnectorInfo connector2 = EasyMock.mock(ConnectorInfo.class);\n        EasyMock.expect(herder.connectorInfo(CONNECTOR2_NAME)).andReturn(connector2);\n        EasyMock.expect(herder.connectorInfo(CONNECTOR_NAME)).andReturn(connector);\n\n        forward = EasyMock.mock(UriInfo.class);\n        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<>();\n        queryParams.putSingle(\"expand\", \"info\");\n        EasyMock.expect(forward.getQueryParameters()).andReturn(queryParams).anyTimes();\n        EasyMock.replay(forward);\n\n        PowerMock.replayAll();\n\n        Map<String, Map<String, Object>> expanded = (Map<String, Map<String, Object>>) connectorsResource.listConnectors(forward).getEntity();\n        \r\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_NAME, CONNECTOR2_NAME)), expanded.keySet());\n        assertEquals(connector2, expanded.get(CONNECTOR2_NAME).get(\"info\"));\n        assertEquals(connector, expanded.get(CONNECTOR_NAME).get(\"info\"));\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"B"},{"authorDate":"2019-05-17 05:29:30","commitOrder":1,"curCode":"    public void testExpandConnectorsWithConnectorNotFound() throws Throwable {\n        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(CONNECTOR2_NAME, CONNECTOR_NAME));\n        ConnectorStateInfo connector = EasyMock.mock(ConnectorStateInfo.class);\n        ConnectorStateInfo connector2 = EasyMock.mock(ConnectorStateInfo.class);\n        EasyMock.expect(herder.connectorStatus(CONNECTOR2_NAME)).andReturn(connector2);\n        EasyMock.expect(herder.connectorStatus(CONNECTOR_NAME)).andThrow(EasyMock.mock(NotFoundException.class));\n\n        forward = EasyMock.mock(UriInfo.class);\n        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<>();\n        queryParams.putSingle(\"expand\", \"status\");\n        EasyMock.expect(forward.getQueryParameters()).andReturn(queryParams).anyTimes();\n        EasyMock.replay(forward);\n\n        PowerMock.replayAll();\n\n        Map<String, Map<String, Object>> expanded = (Map<String, Map<String, Object>>) connectorsResource.listConnectors(forward).getEntity();\n        \r\n        assertEquals(Collections.singleton(CONNECTOR2_NAME), expanded.keySet());\n        assertEquals(connector2, expanded.get(CONNECTOR2_NAME).get(\"status\"));\n        PowerMock.verifyAll();\n    }\n","date":"2019-05-17 05:29:29","endLine":260,"groupId":"22301","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandConnectorsWithConnectorNotFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5d/c7f1ee687b9acbf169d308726b8c6d8da7f536.src","preCode":"    public void testExpandConnectorsWithConnectorNotFound() throws Throwable {\n        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(CONNECTOR2_NAME, CONNECTOR_NAME));\n        ConnectorStateInfo connector = EasyMock.mock(ConnectorStateInfo.class);\n        ConnectorStateInfo connector2 = EasyMock.mock(ConnectorStateInfo.class);\n        EasyMock.expect(herder.connectorStatus(CONNECTOR2_NAME)).andReturn(connector2);\n        EasyMock.expect(herder.connectorStatus(CONNECTOR_NAME)).andThrow(EasyMock.mock(NotFoundException.class));\n\n        forward = EasyMock.mock(UriInfo.class);\n        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<>();\n        queryParams.putSingle(\"expand\", \"status\");\n        EasyMock.expect(forward.getQueryParameters()).andReturn(queryParams).anyTimes();\n        EasyMock.replay(forward);\n\n        PowerMock.replayAll();\n\n        Map<String, Map<String, Object>> expanded = (Map<String, Map<String, Object>>) connectorsResource.listConnectors(forward).getEntity();\n        \r\n        assertEquals(Collections.singleton(CONNECTOR2_NAME), expanded.keySet());\n        assertEquals(connector2, expanded.get(CONNECTOR2_NAME).get(\"status\"));\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"B"}],"commitId":"5a95c2e1cd555d5f3ec148cc7c765d1bb7d716f9","commitMessage":"@@@Add '?expand' query param for additional info on '/connectors'. (#6658)\n\nPer KIP-465.  kept existing behavior of `/connectors` resource in the Connect's REST API.  but added the ability to specify `?expand` query parameter to get list of connectors with status details on each connector. Added unit tests.  and verified passing existing system tests (which use the older list form).\n\nSee https://cwiki.apache.org/confluence/display/KAFKA/KIP-465%3A+Add+Consolidated+Connector+Endpoint+to+Connect+REST+API.\n\nAuthor: Dan Norwood <norwood@confluent.io>\nReviewer: Randall Hauch <rhauch@gmail.com>","date":"2019-05-17 05:29:29","modifiedFileCount":"9","status":"B","submitter":"dan norwood"},{"authorTime":"2019-06-04 10:06:00","codes":[{"authorDate":"2019-06-04 10:06:00","commitOrder":2,"curCode":"    public void testExpandConnectorsInfo() throws Throwable {\n        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(CONNECTOR2_NAME, CONNECTOR_NAME));\n        ConnectorInfo connector = EasyMock.mock(ConnectorInfo.class);\n        ConnectorInfo connector2 = EasyMock.mock(ConnectorInfo.class);\n        EasyMock.expect(herder.connectorInfo(CONNECTOR2_NAME)).andReturn(connector2);\n        EasyMock.expect(herder.connectorInfo(CONNECTOR_NAME)).andReturn(connector);\n\n        forward = EasyMock.mock(UriInfo.class);\n        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<>();\n        queryParams.putSingle(\"expand\", \"info\");\n        EasyMock.expect(forward.getQueryParameters()).andReturn(queryParams).anyTimes();\n        EasyMock.replay(forward);\n\n        PowerMock.replayAll();\n\n        Map<String, Map<String, Object>> expanded = (Map<String, Map<String, Object>>) connectorsResource.listConnectors(forward, NULL_HEADERS).getEntity();\n        \r\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_NAME, CONNECTOR2_NAME)), expanded.keySet());\n        assertEquals(connector2, expanded.get(CONNECTOR2_NAME).get(\"info\"));\n        assertEquals(connector, expanded.get(CONNECTOR_NAME).get(\"info\"));\n        PowerMock.verifyAll();\n    }\n","date":"2019-06-04 10:06:00","endLine":209,"groupId":"104953","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testExpandConnectorsInfo","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/90df03afb6d6b896a49f72d47a6b70d82ca8f9.src","preCode":"    public void testExpandConnectorsInfo() throws Throwable {\n        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(CONNECTOR2_NAME, CONNECTOR_NAME));\n        ConnectorInfo connector = EasyMock.mock(ConnectorInfo.class);\n        ConnectorInfo connector2 = EasyMock.mock(ConnectorInfo.class);\n        EasyMock.expect(herder.connectorInfo(CONNECTOR2_NAME)).andReturn(connector2);\n        EasyMock.expect(herder.connectorInfo(CONNECTOR_NAME)).andReturn(connector);\n\n        forward = EasyMock.mock(UriInfo.class);\n        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<>();\n        queryParams.putSingle(\"expand\", \"info\");\n        EasyMock.expect(forward.getQueryParameters()).andReturn(queryParams).anyTimes();\n        EasyMock.replay(forward);\n\n        PowerMock.replayAll();\n\n        Map<String, Map<String, Object>> expanded = (Map<String, Map<String, Object>>) connectorsResource.listConnectors(forward).getEntity();\n        \r\n        assertEquals(new HashSet<>(Arrays.asList(CONNECTOR_NAME, CONNECTOR2_NAME)), expanded.keySet());\n        assertEquals(connector2, expanded.get(CONNECTOR2_NAME).get(\"info\"));\n        assertEquals(connector, expanded.get(CONNECTOR_NAME).get(\"info\"));\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2019-06-04 10:06:00","commitOrder":2,"curCode":"    public void testExpandConnectorsWithConnectorNotFound() throws Throwable {\n        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(CONNECTOR2_NAME, CONNECTOR_NAME));\n        ConnectorStateInfo connector = EasyMock.mock(ConnectorStateInfo.class);\n        ConnectorStateInfo connector2 = EasyMock.mock(ConnectorStateInfo.class);\n        EasyMock.expect(herder.connectorStatus(CONNECTOR2_NAME)).andReturn(connector2);\n        EasyMock.expect(herder.connectorStatus(CONNECTOR_NAME)).andThrow(EasyMock.mock(NotFoundException.class));\n\n        forward = EasyMock.mock(UriInfo.class);\n        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<>();\n        queryParams.putSingle(\"expand\", \"status\");\n        EasyMock.expect(forward.getQueryParameters()).andReturn(queryParams).anyTimes();\n        EasyMock.replay(forward);\n\n        PowerMock.replayAll();\n\n        Map<String, Map<String, Object>> expanded = (Map<String, Map<String, Object>>) connectorsResource.listConnectors(forward, NULL_HEADERS).getEntity();\n        \r\n        assertEquals(Collections.singleton(CONNECTOR2_NAME), expanded.keySet());\n        assertEquals(connector2, expanded.get(CONNECTOR2_NAME).get(\"status\"));\n        PowerMock.verifyAll();\n    }\n","date":"2019-06-04 10:06:00","endLine":262,"groupId":"104953","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testExpandConnectorsWithConnectorNotFound","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/90df03afb6d6b896a49f72d47a6b70d82ca8f9.src","preCode":"    public void testExpandConnectorsWithConnectorNotFound() throws Throwable {\n        EasyMock.expect(herder.connectors()).andReturn(Arrays.asList(CONNECTOR2_NAME, CONNECTOR_NAME));\n        ConnectorStateInfo connector = EasyMock.mock(ConnectorStateInfo.class);\n        ConnectorStateInfo connector2 = EasyMock.mock(ConnectorStateInfo.class);\n        EasyMock.expect(herder.connectorStatus(CONNECTOR2_NAME)).andReturn(connector2);\n        EasyMock.expect(herder.connectorStatus(CONNECTOR_NAME)).andThrow(EasyMock.mock(NotFoundException.class));\n\n        forward = EasyMock.mock(UriInfo.class);\n        MultivaluedMap<String, String> queryParams = new MultivaluedHashMap<>();\n        queryParams.putSingle(\"expand\", \"status\");\n        EasyMock.expect(forward.getQueryParameters()).andReturn(queryParams).anyTimes();\n        EasyMock.replay(forward);\n\n        PowerMock.replayAll();\n\n        Map<String, Map<String, Object>> expanded = (Map<String, Map<String, Object>>) connectorsResource.listConnectors(forward).getEntity();\n        \r\n        assertEquals(Collections.singleton(CONNECTOR2_NAME), expanded.keySet());\n        assertEquals(connector2, expanded.get(CONNECTOR2_NAME).get(\"status\"));\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"1a3fe9aa52555eb24ce692963e4461d6f05b771d","commitMessage":"@@@KAFKA-8404: Add HttpHeader to RestClient HTTP Request and Connector REST API (#6791)\n\nWhen Connect forwards a REST request from one worker to another.  the Authorization header was not forwarded. This commit changes the Connect framework to add include the authorization header when forwarding requests to other workers.\n\nAuthor: Hai-Dang Dam <damquanghaidang@gmail.com>\nReviewers: Robert Yokota <rayokota@gmail.com>.  Randall Hauch <rhauch@gmail.com>\n","date":"2019-06-04 10:06:00","modifiedFileCount":"7","status":"M","submitter":"Hai-Dang Dam"}]
