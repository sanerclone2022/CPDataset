[{"authorTime":"2020-02-26 07:28:01","codes":[{"authorDate":"2020-02-26 07:28:01","commitOrder":1,"curCode":"    public void testAssignWithStandbyReplicasAndStatelessTasks() {\n        final Map<String, Object> props = configProps();\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"1\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n        final UUID uuid1 = UUID.randomUUID();\n        final UUID uuid2 = UUID.randomUUID();\n\n        createMockTaskManager(mkSet(task0_0), Collections.emptySet(), uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n        partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer));\n\n        subscriptions.put(\"consumer10\",\n            new ConsumerPartitionAssignor.Subscription(\n                topics,\n                getInfo(uuid1, mkSet(task0_0), Collections.emptySet(), \"any:9096\").encode()));\n        subscriptions.put(\"consumer20\",\n            new ConsumerPartitionAssignor.Subscription(\n                topics,\n                getInfo(uuid2, mkSet(task0_2), Collections.emptySet(), \"any:9097\").encode()));\n\n        final Map<String, ConsumerPartitionAssignor.Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","date":"2020-02-26 07:28:01","endLine":926,"groupId":"1229","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithStandbyReplicasAndStatelessTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f0/0f93332e2a6b810d83f4d01f92392e89735594.src","preCode":"    public void testAssignWithStandbyReplicasAndStatelessTasks() {\n        final Map<String, Object> props = configProps();\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"1\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n        final UUID uuid1 = UUID.randomUUID();\n        final UUID uuid2 = UUID.randomUUID();\n\n        createMockTaskManager(mkSet(task0_0), Collections.emptySet(), uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n        partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer));\n\n        subscriptions.put(\"consumer10\",\n            new ConsumerPartitionAssignor.Subscription(\n                topics,\n                getInfo(uuid1, mkSet(task0_0), Collections.emptySet(), \"any:9096\").encode()));\n        subscriptions.put(\"consumer20\",\n            new ConsumerPartitionAssignor.Subscription(\n                topics,\n                getInfo(uuid2, mkSet(task0_2), Collections.emptySet(), \"any:9097\").encode()));\n\n        final Map<String, ConsumerPartitionAssignor.Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":891,"status":"B"},{"authorDate":"2020-02-26 07:28:01","commitOrder":1,"curCode":"    public void testAssignWithStandbyReplicasAndLoggingDisabled() {\n        final Map<String, Object> props = configProps();\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"1\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false).withLoggingDisabled(), \"processor\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n        final UUID uuid1 = UUID.randomUUID();\n        final UUID uuid2 = UUID.randomUUID();\n\n        createMockTaskManager(mkSet(task0_0), Collections.emptySet(), uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n        partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer));\n\n        subscriptions.put(\"consumer10\",\n            new ConsumerPartitionAssignor.Subscription(\n                topics,\n                getInfo(uuid1, mkSet(task0_0), Collections.emptySet(), \"any:9096\").encode()));\n        subscriptions.put(\"consumer20\",\n            new ConsumerPartitionAssignor.Subscription(\n                topics,\n                getInfo(uuid2, mkSet(task0_2), Collections.emptySet(), \"any:9097\").encode()));\n\n        final Map<String, ConsumerPartitionAssignor.Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","date":"2020-02-26 07:28:01","endLine":965,"groupId":"1229","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithStandbyReplicasAndLoggingDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f0/0f93332e2a6b810d83f4d01f92392e89735594.src","preCode":"    public void testAssignWithStandbyReplicasAndLoggingDisabled() {\n        final Map<String, Object> props = configProps();\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"1\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false).withLoggingDisabled(), \"processor\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n        final UUID uuid1 = UUID.randomUUID();\n        final UUID uuid2 = UUID.randomUUID();\n\n        createMockTaskManager(mkSet(task0_0), Collections.emptySet(), uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n        partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer));\n\n        subscriptions.put(\"consumer10\",\n            new ConsumerPartitionAssignor.Subscription(\n                topics,\n                getInfo(uuid1, mkSet(task0_0), Collections.emptySet(), \"any:9096\").encode()));\n        subscriptions.put(\"consumer20\",\n            new ConsumerPartitionAssignor.Subscription(\n                topics,\n                getInfo(uuid2, mkSet(task0_2), Collections.emptySet(), \"any:9097\").encode()));\n\n        final Map<String, ConsumerPartitionAssignor.Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":929,"status":"B"}],"commitId":"a28447a06582bf8e6de427f047f3d3ba4e2219a1","commitMessage":"@@@MINOR: don't assign standby tasks with no logged state (#8147)\n\nRight now the task assignor just blindly assigns N standby tasks per active task (where N = num.standbys) and attempts to distribute them evenly across all instances/threads. But only standby tasks that are stateful.  and whose stores are changelog-enabled.  will ever actually be created.\n\nThis can result in a less-balanced assignment.  and should be cleaned up in particular before implementing KIP-441 to remove the noise of ghost standbys.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-02-26 07:28:01","modifiedFileCount":"16","status":"B","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-03-06 23:19:04","codes":[{"authorDate":"2020-03-06 23:19:04","commitOrder":2,"curCode":"    public void testAssignWithStandbyReplicasAndStatelessTasks() {\n        final Map<String, Object> props = configProps();\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"1\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n        final UUID uuid1 = UUID.randomUUID();\n        final UUID uuid2 = UUID.randomUUID();\n\n        createMockTaskManager(mkSet(task0_0), Collections.emptySet(), uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n        partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(uuid1, getTaskOffsetSums(mkSet(task0_0), Collections.emptySet()), \"any:9096\").encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(uuid2, getTaskOffsetSums(mkSet(task0_2), Collections.emptySet()), \"any:9097\").encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","date":"2020-03-06 23:19:04","endLine":921,"groupId":"1229","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithStandbyReplicasAndStatelessTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3d/ba29a62286047914eb771f687b3ec5cc0bd36c.src","preCode":"    public void testAssignWithStandbyReplicasAndStatelessTasks() {\n        final Map<String, Object> props = configProps();\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"1\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n        final UUID uuid1 = UUID.randomUUID();\n        final UUID uuid2 = UUID.randomUUID();\n\n        createMockTaskManager(mkSet(task0_0), Collections.emptySet(), uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n        partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer));\n\n        subscriptions.put(\"consumer10\",\n            new ConsumerPartitionAssignor.Subscription(\n                topics,\n                getInfo(uuid1, mkSet(task0_0), Collections.emptySet(), \"any:9096\").encode()));\n        subscriptions.put(\"consumer20\",\n            new ConsumerPartitionAssignor.Subscription(\n                topics,\n                getInfo(uuid2, mkSet(task0_2), Collections.emptySet(), \"any:9097\").encode()));\n\n        final Map<String, ConsumerPartitionAssignor.Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":886,"status":"M"},{"authorDate":"2020-03-06 23:19:04","commitOrder":2,"curCode":"    public void testAssignWithStandbyReplicasAndLoggingDisabled() {\n        final Map<String, Object> props = configProps();\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"1\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false).withLoggingDisabled(), \"processor\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n        final UUID uuid1 = UUID.randomUUID();\n        final UUID uuid2 = UUID.randomUUID();\n\n        createMockTaskManager(mkSet(task0_0), Collections.emptySet(), uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n        partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(uuid1, getTaskOffsetSums(mkSet(task0_0), Collections.emptySet()), \"any:9096\").encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(uuid2, getTaskOffsetSums(mkSet(task0_2), Collections.emptySet()), \"any:9097\").encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","date":"2020-03-06 23:19:04","endLine":960,"groupId":"1229","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithStandbyReplicasAndLoggingDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3d/ba29a62286047914eb771f687b3ec5cc0bd36c.src","preCode":"    public void testAssignWithStandbyReplicasAndLoggingDisabled() {\n        final Map<String, Object> props = configProps();\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"1\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false).withLoggingDisabled(), \"processor\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n        final UUID uuid1 = UUID.randomUUID();\n        final UUID uuid2 = UUID.randomUUID();\n\n        createMockTaskManager(mkSet(task0_0), Collections.emptySet(), uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n        partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer));\n\n        subscriptions.put(\"consumer10\",\n            new ConsumerPartitionAssignor.Subscription(\n                topics,\n                getInfo(uuid1, mkSet(task0_0), Collections.emptySet(), \"any:9096\").encode()));\n        subscriptions.put(\"consumer20\",\n            new ConsumerPartitionAssignor.Subscription(\n                topics,\n                getInfo(uuid2, mkSet(task0_2), Collections.emptySet(), \"any:9097\").encode()));\n\n        final Map<String, ConsumerPartitionAssignor.Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":924,"status":"M"}],"commitId":"674360f5b3a7e5e05b626fd55c277f7c03f27b9e","commitMessage":"@@@KAFKA-6145: Encode task positions in SubscriptionInfo (#8121)\n\n* Replace Prev/Standby task lists with a representation of the current poasition\n  of all tasks.  where each task is encoded as the sum of the positions of all the\n  changelogs in that task.\n* Only the protocol change is implemented.  not actual positions.  and the\n  assignor is updated to translate the new protocol back to lists of Prev/Standby\n  tasks so that the current assignment protocol still functions without modification.\n\nImplements: KIP-441\n\nReviewers: John Roesler <vvcephei@apache.org>.  Bruno Cadonna <bruno@confluent.io>","date":"2020-03-06 23:19:04","modifiedFileCount":"12","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-03-18 13:14:00","codes":[{"authorDate":"2020-03-18 13:14:00","commitOrder":3,"curCode":"    public void testAssignWithStandbyReplicasAndStatelessTasks() {\n        final Map<String, Object> props = configProps();\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"1\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(task0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n        partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(uuid1, mkSet(task0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(uuid2, mkSet(task0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","date":"2020-03-18 13:14:00","endLine":853,"groupId":"4200","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithStandbyReplicasAndStatelessTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/062f68002ac0156eb4068b9882430c17b927ab.src","preCode":"    public void testAssignWithStandbyReplicasAndStatelessTasks() {\n        final Map<String, Object> props = configProps();\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"1\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n        final UUID uuid1 = UUID.randomUUID();\n        final UUID uuid2 = UUID.randomUUID();\n\n        createMockTaskManager(mkSet(task0_0), Collections.emptySet(), uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n        partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(uuid1, getTaskOffsetSums(mkSet(task0_0), Collections.emptySet()), \"any:9096\").encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(uuid2, getTaskOffsetSums(mkSet(task0_2), Collections.emptySet()), \"any:9097\").encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":822,"status":"M"},{"authorDate":"2020-03-18 13:14:00","commitOrder":3,"curCode":"    public void testAssignWithStandbyReplicasAndLoggingDisabled() {\n        final Map<String, Object> props = configProps();\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"1\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false).withLoggingDisabled(), \"processor\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(task0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n        partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(uuid1, mkSet(task0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(uuid2, mkSet(task0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","date":"2020-03-18 13:14:00","endLine":888,"groupId":"4200","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithStandbyReplicasAndLoggingDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/062f68002ac0156eb4068b9882430c17b927ab.src","preCode":"    public void testAssignWithStandbyReplicasAndLoggingDisabled() {\n        final Map<String, Object> props = configProps();\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"1\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false).withLoggingDisabled(), \"processor\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n        final UUID uuid1 = UUID.randomUUID();\n        final UUID uuid2 = UUID.randomUUID();\n\n        createMockTaskManager(mkSet(task0_0), Collections.emptySet(), uuid1, builder);\n        EasyMock.replay(taskManager);\n        streamsMetadataState = EasyMock.createNiceMock(StreamsMetadataState.class);\n        configurePartitionAssignor(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n        partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(uuid1, getTaskOffsetSums(mkSet(task0_0), Collections.emptySet()), \"any:9096\").encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(uuid2, getTaskOffsetSums(mkSet(task0_2), Collections.emptySet()), \"any:9097\").encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":856,"status":"M"}],"commitId":"d38e97e319b1ca90ce951b8a153fa51953bba43e","commitMessage":"@@@MINOR: clean up required setup for StreamsPartitionAssignorTest (#8306)\n\nNo logical or behavioral changes.  just a bit of cleanup in this class before we have to write and fix a lot of these tests for KIP-441:\n\n* Moved creation of streamsMetadata mock to setUp (in exactly one test it will be overwritten with a strict mock)\n* Tried to clean up the use of helper methods for configuring the assignor.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-03-18 13:14:00","modifiedFileCount":"2","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-03-22 02:40:34","codes":[{"authorDate":"2020-03-22 02:40:34","commitOrder":4,"curCode":"    public void testAssignWithStandbyReplicasAndStatelessTasks() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(task0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(uuid1, mkSet(task0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(uuid2, mkSet(task0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","date":"2020-03-22 02:40:34","endLine":910,"groupId":"8025","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithStandbyReplicasAndStatelessTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/8e13f70b47672686e0be80e043dc33be95b392.src","preCode":"    public void testAssignWithStandbyReplicasAndStatelessTasks() {\n        final Map<String, Object> props = configProps();\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"1\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(task0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n        partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(uuid1, mkSet(task0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(uuid2, mkSet(task0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":884,"status":"M"},{"authorDate":"2020-03-22 02:40:34","commitOrder":4,"curCode":"    public void testAssignWithStandbyReplicasAndLoggingDisabled() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false).withLoggingDisabled(), \"processor\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(task0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(uuid1, mkSet(task0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(uuid2, mkSet(task0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","date":"2020-03-22 02:40:34","endLine":940,"groupId":"8025","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithStandbyReplicasAndLoggingDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/8e13f70b47672686e0be80e043dc33be95b392.src","preCode":"    public void testAssignWithStandbyReplicasAndLoggingDisabled() {\n        final Map<String, Object> props = configProps();\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, \"1\");\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false).withLoggingDisabled(), \"processor\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(task0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n        partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig, mockClientSupplier.restoreConsumer));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(uuid1, mkSet(task0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(uuid2, mkSet(task0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":913,"status":"M"}],"commitId":"6cf27c9c771900baf43cc47f9b010dbf7a86fa22","commitMessage":"@@@KAFKA-6145: Pt 2.5 Compute overall task lag per client (#8252)\n\nOnce we have encoded the offset sums per task for each client.  we can compute the overall lag during assign by fetching the end offsets for all changelog and subtracting.\n\nIf the listOffsets request fails.  we simply return a \"completely sticky\" assignment.  ie all active tasks are given to previous owners regardless of balance.\n\nBuilds (but does not yet use) the statefulTasksToRankedCandidates map with the ranking:\nRank -1: active running task\nRank 0: standby or restoring task whose overall lag is within acceptableRecoveryLag\nRank 1: tasks whose lag is unknown (eg during version probing)\nRank 1+: all other tasks are ranked according to their actual total lag\n\nImplements: KIP-441\nReviewers: Bruno Cadonna <bruno@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-03-22 02:40:34","modifiedFileCount":"12","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-04-04 02:53:51","codes":[{"authorDate":"2020-04-04 02:53:51","commitOrder":5,"curCode":"    public void testAssignWithStandbyReplicasAndStatelessTasks() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(TASK_0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(UUID_1, mkSet(TASK_0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(UUID_2, mkSet(TASK_0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","date":"2020-04-04 02:53:51","endLine":921,"groupId":"8025","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithStandbyReplicasAndStatelessTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a4/a93a4f243a7b7c33226b6fff0a3685fa4cafff.src","preCode":"    public void testAssignWithStandbyReplicasAndStatelessTasks() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(task0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(uuid1, mkSet(task0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(uuid2, mkSet(task0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":895,"status":"M"},{"authorDate":"2020-04-04 02:53:51","commitOrder":5,"curCode":"    public void testAssignWithStandbyReplicasAndLoggingDisabled() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false).withLoggingDisabled(), \"processor\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(TASK_0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(UUID_1, mkSet(TASK_0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(UUID_2, mkSet(TASK_0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","date":"2020-04-04 02:53:51","endLine":951,"groupId":"8025","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithStandbyReplicasAndLoggingDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a4/a93a4f243a7b7c33226b6fff0a3685fa4cafff.src","preCode":"    public void testAssignWithStandbyReplicasAndLoggingDisabled() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false).withLoggingDisabled(), \"processor\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(task0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(uuid1, mkSet(task0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(uuid2, mkSet(task0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":924,"status":"M"}],"commitId":"6e0d553350cef876f4fd2de0e3b8e6e40ce6be44","commitMessage":"@@@MINOR: clean up Streams assignment classes and tests (#8406)\n\nFirst set of cleanup pushed to followup PR after KIP-441 Pt. 5. Main changes are:\n\n1. Moved `RankedClient` and the static `buildClientRankingsByTask` to a new file\n2. Moved `Movement` and the static `getMovements` to a new file (also renamed to `TaskMovement`)\n3. Consolidated the many common variables throughout the assignment tests to the new `AssignmentTestUtils` \n4. New utility to generate comparable/predictable UUIDs for tests.  and removed the generic from `TaskAssignor` and all related classes\n\nReviewers: John Roesler <vvcephei@apache.org>.  Andrew Choi <a24choi@edu.uwaterloo.ca>","date":"2020-04-04 02:53:51","modifiedFileCount":"16","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-08-07 02:28:07","codes":[{"authorDate":"2020-08-07 02:28:07","commitOrder":6,"curCode":"    public void testAssignWithStandbyReplicasAndStatelessTasks() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier<>(), \"source1\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(TASK_0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(UUID_1, mkSet(TASK_0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(UUID_2, mkSet(TASK_0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","date":"2020-08-07 02:28:07","endLine":924,"groupId":"8025","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithStandbyReplicasAndStatelessTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/a865bdca5247690999077274c34f0fe34dba3b.src","preCode":"    public void testAssignWithStandbyReplicasAndStatelessTasks() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(TASK_0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(UUID_1, mkSet(TASK_0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(UUID_2, mkSet(TASK_0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":898,"status":"M"},{"authorDate":"2020-08-07 02:28:07","commitOrder":6,"curCode":"    public void testAssignWithStandbyReplicasAndLoggingDisabled() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier<>(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false).withLoggingDisabled(), \"processor\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(TASK_0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(UUID_1, mkSet(TASK_0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(UUID_2, mkSet(TASK_0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","date":"2020-08-07 02:28:07","endLine":954,"groupId":"8025","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithStandbyReplicasAndLoggingDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/a865bdca5247690999077274c34f0fe34dba3b.src","preCode":"    public void testAssignWithStandbyReplicasAndLoggingDisabled() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false).withLoggingDisabled(), \"processor\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(TASK_0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(UUID_1, mkSet(TASK_0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(UUID_2, mkSet(TASK_0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":927,"status":"M"}],"commitId":"990301323cc5a774e17b0a5d373aff8439cda489","commitMessage":"@@@KAFKA-9274: Remove `retries` from InternalTopicManager (#9060)\n\n - part of KIP-572\n - replace `retries` in InternalTopicManager with infinite retires plus a new timeout.  based on consumer config MAX_POLL_INTERVAL_MS\n\nReviewers: David Jacot <djacot@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-08-07 02:28:07","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-09-10 01:37:21","codes":[{"authorDate":"2020-09-10 01:37:21","commitOrder":7,"curCode":"    public void testAssignWithStandbyReplicasAndStatelessTasks() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockApiProcessorSupplier<>(), \"source1\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(TASK_0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(UUID_1, mkSet(TASK_0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(UUID_2, mkSet(TASK_0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","date":"2020-09-10 01:37:21","endLine":924,"groupId":"102498","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testAssignWithStandbyReplicasAndStatelessTasks","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/eb563d9120f1bfd01ba273531233c0a330923c.src","preCode":"    public void testAssignWithStandbyReplicasAndStatelessTasks() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier<>(), \"source1\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(TASK_0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(UUID_1, mkSet(TASK_0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(UUID_2, mkSet(TASK_0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":898,"status":"M"},{"authorDate":"2020-09-10 01:37:21","commitOrder":7,"curCode":"    public void testAssignWithStandbyReplicasAndLoggingDisabled() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockApiProcessorSupplier<>(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false).withLoggingDisabled(), \"processor\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(TASK_0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(UUID_1, mkSet(TASK_0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(UUID_2, mkSet(TASK_0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","date":"2020-09-10 01:37:21","endLine":954,"groupId":"102498","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testAssignWithStandbyReplicasAndLoggingDisabled","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/eb563d9120f1bfd01ba273531233c0a330923c.src","preCode":"    public void testAssignWithStandbyReplicasAndLoggingDisabled() {\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\", \"topic2\");\n        builder.addProcessor(\"processor\", new MockProcessorSupplier<>(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false).withLoggingDisabled(), \"processor\");\n\n        final List<String> topics = asList(\"topic1\", \"topic2\");\n\n        createMockTaskManager(mkSet(TASK_0_0), emptySet());\n        configurePartitionAssignorWith(Collections.singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1));\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                topics,\n                getInfo(UUID_1, mkSet(TASK_0_0), emptySet()).encode()));\n        subscriptions.put(\"consumer20\",\n            new Subscription(\n                topics,\n                getInfo(UUID_2, mkSet(TASK_0_2), emptySet()).encode()));\n\n        final Map<String, Assignment> assignments =\n            partitionAssignor.assign(metadata, new GroupSubscription(subscriptions)).groupAssignment();\n\n        final AssignmentInfo info10 = checkAssignment(allTopics, assignments.get(\"consumer10\"));\n        assertTrue(info10.standbyTasks().isEmpty());\n\n        final AssignmentInfo info20 = checkAssignment(allTopics, assignments.get(\"consumer20\"));\n        assertTrue(info20.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":927,"status":"M"}],"commitId":"09d1498e3065eccc26a2d396ea13e7c8b553b974","commitMessage":"@@@KAFKA-10436: Implement KIP-478 Topology changes (#9221)\n\nConvert Topology#addProcessor and #addGlobalStore\nAlso.  convert some of the internals in support of addProcessor\n\nReviewers: Bill Bejeck <bbejeck@apache.org>","date":"2020-09-10 01:37:21","modifiedFileCount":"45","status":"M","submitter":"John Roesler"}]
