[{"authorTime":"2016-03-01 04:46:03","codes":[{"authorDate":"2016-02-02 08:11:13","commitOrder":4,"curCode":"    public void testPutGetRange() {\n        \r\n        KeyValueStoreTestDriver<Integer, String> driver = KeyValueStoreTestDriver.create(Integer.class, String.class);\n        KeyValueStore<Integer, String> store = createKeyValueStore(driver.context(), Integer.class, String.class, false);\n        try {\n\n            \r\n            store.put(0, \"zero\");\n            store.put(1, \"one\");\n            store.put(2, \"two\");\n            store.put(4, \"four\");\n            store.put(5, \"five\");\n            assertEquals(5, driver.sizeOf(store));\n            assertEquals(\"zero\", store.get(0));\n            assertEquals(\"one\", store.get(1));\n            assertEquals(\"two\", store.get(2));\n            assertNull(store.get(3));\n            assertEquals(\"four\", store.get(4));\n            assertEquals(\"five\", store.get(5));\n            store.delete(5);\n\n            \r\n            store.flush();\n            assertEquals(\"zero\", driver.flushedEntryStored(0));\n            assertEquals(\"one\", driver.flushedEntryStored(1));\n            assertEquals(\"two\", driver.flushedEntryStored(2));\n            assertEquals(\"four\", driver.flushedEntryStored(4));\n            assertEquals(null, driver.flushedEntryStored(5));\n\n            assertEquals(false, driver.flushedEntryRemoved(0));\n            assertEquals(false, driver.flushedEntryRemoved(1));\n            assertEquals(false, driver.flushedEntryRemoved(2));\n            assertEquals(false, driver.flushedEntryRemoved(4));\n            assertEquals(true, driver.flushedEntryRemoved(5));\n\n            \r\n            try (KeyValueIterator<Integer, String> iter = store.range(2, 4)) {\n                while (iter.hasNext()) {\n                    KeyValue<Integer, String> entry = iter.next();\n                    if (entry.key.equals(2))\n                        assertEquals(\"two\", entry.value);\n                    else if (entry.key.equals(4))\n                        assertEquals(\"four\", entry.value);\n                    else\n                        fail(\"Unexpected entry: \" + entry);\n                }\n            }\n\n            \r\n            try (KeyValueIterator<Integer, String> iter = store.range(2, 6)) {\n                while (iter.hasNext()) {\n                    KeyValue<Integer, String> entry = iter.next();\n                    if (entry.key.equals(2))\n                        assertEquals(\"two\", entry.value);\n                    else if (entry.key.equals(4))\n                        assertEquals(\"four\", entry.value);\n                    else\n                        fail(\"Unexpected entry: \" + entry);\n                }\n            }\n        } finally {\n            store.close();\n        }\n    }\n","date":"2016-02-02 08:11:13","endLine":101,"groupId":"18103","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPutGetRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ee/343e818a6e4e241c17273032dd841f00bd3606.src","preCode":"    public void testPutGetRange() {\n        \r\n        KeyValueStoreTestDriver<Integer, String> driver = KeyValueStoreTestDriver.create(Integer.class, String.class);\n        KeyValueStore<Integer, String> store = createKeyValueStore(driver.context(), Integer.class, String.class, false);\n        try {\n\n            \r\n            store.put(0, \"zero\");\n            store.put(1, \"one\");\n            store.put(2, \"two\");\n            store.put(4, \"four\");\n            store.put(5, \"five\");\n            assertEquals(5, driver.sizeOf(store));\n            assertEquals(\"zero\", store.get(0));\n            assertEquals(\"one\", store.get(1));\n            assertEquals(\"two\", store.get(2));\n            assertNull(store.get(3));\n            assertEquals(\"four\", store.get(4));\n            assertEquals(\"five\", store.get(5));\n            store.delete(5);\n\n            \r\n            store.flush();\n            assertEquals(\"zero\", driver.flushedEntryStored(0));\n            assertEquals(\"one\", driver.flushedEntryStored(1));\n            assertEquals(\"two\", driver.flushedEntryStored(2));\n            assertEquals(\"four\", driver.flushedEntryStored(4));\n            assertEquals(null, driver.flushedEntryStored(5));\n\n            assertEquals(false, driver.flushedEntryRemoved(0));\n            assertEquals(false, driver.flushedEntryRemoved(1));\n            assertEquals(false, driver.flushedEntryRemoved(2));\n            assertEquals(false, driver.flushedEntryRemoved(4));\n            assertEquals(true, driver.flushedEntryRemoved(5));\n\n            \r\n            try (KeyValueIterator<Integer, String> iter = store.range(2, 4)) {\n                while (iter.hasNext()) {\n                    KeyValue<Integer, String> entry = iter.next();\n                    if (entry.key.equals(2))\n                        assertEquals(\"two\", entry.value);\n                    else if (entry.key.equals(4))\n                        assertEquals(\"four\", entry.value);\n                    else\n                        fail(\"Unexpected entry: \" + entry);\n                }\n            }\n\n            \r\n            try (KeyValueIterator<Integer, String> iter = store.range(2, 6)) {\n                while (iter.hasNext()) {\n                    KeyValue<Integer, String> entry = iter.next();\n                    if (entry.key.equals(2))\n                        assertEquals(\"two\", entry.value);\n                    else if (entry.key.equals(4))\n                        assertEquals(\"four\", entry.value);\n                    else\n                        fail(\"Unexpected entry: \" + entry);\n                }\n            }\n        } finally {\n            store.close();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"NB"},{"authorDate":"2016-03-01 04:46:03","commitOrder":4,"curCode":"    public void testPutIfAbsent() {\n        \r\n        KeyValueStoreTestDriver<Integer, String> driver = KeyValueStoreTestDriver.create(Integer.class, String.class);\n        KeyValueStore<Integer, String> store = createKeyValueStore(driver.context(), Integer.class, String.class, true);\n        try {\n\n            \r\n            assertNull(store.putIfAbsent(0, \"zero\"));\n            assertNull(store.putIfAbsent(1, \"one\"));\n            assertNull(store.putIfAbsent(2, \"two\"));\n            assertNull(store.putIfAbsent(4, \"four\"));\n            assertEquals(\"four\", store.putIfAbsent(4, \"unexpected value\"));\n            assertEquals(4, driver.sizeOf(store));\n            assertEquals(\"zero\", store.get(0));\n            assertEquals(\"one\", store.get(1));\n            assertEquals(\"two\", store.get(2));\n            assertNull(store.get(3));\n            assertEquals(\"four\", store.get(4));\n\n            \r\n            store.flush();\n            assertEquals(\"zero\", driver.flushedEntryStored(0));\n            assertEquals(\"one\", driver.flushedEntryStored(1));\n            assertEquals(\"two\", driver.flushedEntryStored(2));\n            assertEquals(\"four\", driver.flushedEntryStored(4));\n\n            assertEquals(false, driver.flushedEntryRemoved(0));\n            assertEquals(false, driver.flushedEntryRemoved(1));\n            assertEquals(false, driver.flushedEntryRemoved(2));\n            assertEquals(false, driver.flushedEntryRemoved(4));\n        } finally {\n            store.close();\n        }\n    }\n","date":"2016-03-01 04:46:03","endLine":231,"groupId":"19462","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPutIfAbsent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fb/0efc9d25bfa607eedf002d98f9be73bf9af995.src","preCode":"    public void testPutIfAbsent() {\n        \r\n        KeyValueStoreTestDriver<Integer, String> driver = KeyValueStoreTestDriver.create(Integer.class, String.class);\n        KeyValueStore<Integer, String> store = createKeyValueStore(driver.context(), Integer.class, String.class, true);\n        try {\n\n            \r\n            assertNull(store.putIfAbsent(0, \"zero\"));\n            assertNull(store.putIfAbsent(1, \"one\"));\n            assertNull(store.putIfAbsent(2, \"two\"));\n            assertNull(store.putIfAbsent(4, \"four\"));\n            assertEquals(\"four\", store.putIfAbsent(4, \"unexpected value\"));\n            assertEquals(4, driver.sizeOf(store));\n            assertEquals(\"zero\", store.get(0));\n            assertEquals(\"one\", store.get(1));\n            assertEquals(\"two\", store.get(2));\n            assertNull(store.get(3));\n            assertEquals(\"four\", store.get(4));\n\n            \r\n            store.flush();\n            assertEquals(\"zero\", driver.flushedEntryStored(0));\n            assertEquals(\"one\", driver.flushedEntryStored(1));\n            assertEquals(\"two\", driver.flushedEntryStored(2));\n            assertEquals(\"four\", driver.flushedEntryStored(4));\n\n            assertEquals(false, driver.flushedEntryRemoved(0));\n            assertEquals(false, driver.flushedEntryRemoved(1));\n            assertEquals(false, driver.flushedEntryRemoved(2));\n            assertEquals(false, driver.flushedEntryRemoved(4));\n        } finally {\n            store.close();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"B"}],"commitId":"d501cc62ddcbbddcb114a40527d3e4f71f501286","commitMessage":"@@@KAFKA-3133: Add putIfAbsent function to KeyValueStore\n\nguozhangwang\n\nAuthor: Kim Christensen <kich@mvno.dk>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #912 from kichristensen/KAFKA-3133\n","date":"2016-03-01 04:46:03","modifiedFileCount":"7","status":"M","submitter":"Kim Christensen"},{"authorTime":"2016-09-08 09:02:24","codes":[{"authorDate":"2016-09-08 09:02:24","commitOrder":5,"curCode":"    public void testPutGetRange() {\n        \r\n        store.put(0, \"zero\");\n        store.put(1, \"one\");\n        store.put(2, \"two\");\n        store.put(4, \"four\");\n        store.put(5, \"five\");\n        assertEquals(5, driver.sizeOf(store));\n        assertEquals(\"zero\", store.get(0));\n        assertEquals(\"one\", store.get(1));\n        assertEquals(\"two\", store.get(2));\n        assertNull(store.get(3));\n        assertEquals(\"four\", store.get(4));\n        assertEquals(\"five\", store.get(5));\n        store.delete(5);\n\n        \r\n        store.flush();\n        assertEquals(\"zero\", driver.flushedEntryStored(0));\n        assertEquals(\"one\", driver.flushedEntryStored(1));\n        assertEquals(\"two\", driver.flushedEntryStored(2));\n        assertEquals(\"four\", driver.flushedEntryStored(4));\n        assertEquals(null, driver.flushedEntryStored(5));\n\n        assertEquals(false, driver.flushedEntryRemoved(0));\n        assertEquals(false, driver.flushedEntryRemoved(1));\n        assertEquals(false, driver.flushedEntryRemoved(2));\n        assertEquals(false, driver.flushedEntryRemoved(4));\n        assertEquals(true, driver.flushedEntryRemoved(5));\n\n        \r\n        try (KeyValueIterator<Integer, String> iter = store.range(2, 4)) {\n            while (iter.hasNext()) {\n                KeyValue<Integer, String> entry = iter.next();\n                if (entry.key.equals(2))\n                    assertEquals(\"two\", entry.value);\n                else if (entry.key.equals(4))\n                    assertEquals(\"four\", entry.value);\n                else\n                    fail(\"Unexpected entry: \" + entry);\n            }\n        }\n\n        \r\n        try (KeyValueIterator<Integer, String> iter = store.range(2, 6)) {\n            while (iter.hasNext()) {\n                KeyValue<Integer, String> entry = iter.next();\n                if (entry.key.equals(2))\n                    assertEquals(\"two\", entry.value);\n                else if (entry.key.equals(4))\n                    assertEquals(\"four\", entry.value);\n                else\n                    fail(\"Unexpected entry: \" + entry);\n            }\n        }\n    }\n","date":"2016-09-08 09:02:24","endLine":114,"groupId":"18103","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPutGetRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/70/0655ec23cd19785f3d66e63b9991a881cf5dd2.src","preCode":"    public void testPutGetRange() {\n        \r\n        KeyValueStoreTestDriver<Integer, String> driver = KeyValueStoreTestDriver.create(Integer.class, String.class);\n        KeyValueStore<Integer, String> store = createKeyValueStore(driver.context(), Integer.class, String.class, false);\n        try {\n\n            \r\n            store.put(0, \"zero\");\n            store.put(1, \"one\");\n            store.put(2, \"two\");\n            store.put(4, \"four\");\n            store.put(5, \"five\");\n            assertEquals(5, driver.sizeOf(store));\n            assertEquals(\"zero\", store.get(0));\n            assertEquals(\"one\", store.get(1));\n            assertEquals(\"two\", store.get(2));\n            assertNull(store.get(3));\n            assertEquals(\"four\", store.get(4));\n            assertEquals(\"five\", store.get(5));\n            store.delete(5);\n\n            \r\n            store.flush();\n            assertEquals(\"zero\", driver.flushedEntryStored(0));\n            assertEquals(\"one\", driver.flushedEntryStored(1));\n            assertEquals(\"two\", driver.flushedEntryStored(2));\n            assertEquals(\"four\", driver.flushedEntryStored(4));\n            assertEquals(null, driver.flushedEntryStored(5));\n\n            assertEquals(false, driver.flushedEntryRemoved(0));\n            assertEquals(false, driver.flushedEntryRemoved(1));\n            assertEquals(false, driver.flushedEntryRemoved(2));\n            assertEquals(false, driver.flushedEntryRemoved(4));\n            assertEquals(true, driver.flushedEntryRemoved(5));\n\n            \r\n            try (KeyValueIterator<Integer, String> iter = store.range(2, 4)) {\n                while (iter.hasNext()) {\n                    KeyValue<Integer, String> entry = iter.next();\n                    if (entry.key.equals(2))\n                        assertEquals(\"two\", entry.value);\n                    else if (entry.key.equals(4))\n                        assertEquals(\"four\", entry.value);\n                    else\n                        fail(\"Unexpected entry: \" + entry);\n                }\n            }\n\n            \r\n            try (KeyValueIterator<Integer, String> iter = store.range(2, 6)) {\n                while (iter.hasNext()) {\n                    KeyValue<Integer, String> entry = iter.next();\n                    if (entry.key.equals(2))\n                        assertEquals(\"two\", entry.value);\n                    else if (entry.key.equals(4))\n                        assertEquals(\"four\", entry.value);\n                    else\n                        fail(\"Unexpected entry: \" + entry);\n                }\n            }\n        } finally {\n            store.close();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2016-09-08 09:02:24","commitOrder":5,"curCode":"    public void testPutIfAbsent() {\n        \r\n        assertNull(store.putIfAbsent(0, \"zero\"));\n        assertNull(store.putIfAbsent(1, \"one\"));\n        assertNull(store.putIfAbsent(2, \"two\"));\n        assertNull(store.putIfAbsent(4, \"four\"));\n        assertEquals(\"four\", store.putIfAbsent(4, \"unexpected value\"));\n        assertEquals(4, driver.sizeOf(store));\n        assertEquals(\"zero\", store.get(0));\n        assertEquals(\"one\", store.get(1));\n        assertEquals(\"two\", store.get(2));\n        assertNull(store.get(3));\n        assertEquals(\"four\", store.get(4));\n\n        \r\n        store.flush();\n        assertEquals(\"zero\", driver.flushedEntryStored(0));\n        assertEquals(\"one\", driver.flushedEntryStored(1));\n        assertEquals(\"two\", driver.flushedEntryStored(2));\n        assertEquals(\"four\", driver.flushedEntryStored(4));\n\n        assertEquals(false, driver.flushedEntryRemoved(0));\n        assertEquals(false, driver.flushedEntryRemoved(1));\n        assertEquals(false, driver.flushedEntryRemoved(2));\n        assertEquals(false, driver.flushedEntryRemoved(4));\n    }\n","date":"2016-09-08 09:02:24","endLine":214,"groupId":"19462","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPutIfAbsent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/70/0655ec23cd19785f3d66e63b9991a881cf5dd2.src","preCode":"    public void testPutIfAbsent() {\n        \r\n        KeyValueStoreTestDriver<Integer, String> driver = KeyValueStoreTestDriver.create(Integer.class, String.class);\n        KeyValueStore<Integer, String> store = createKeyValueStore(driver.context(), Integer.class, String.class, true);\n        try {\n\n            \r\n            assertNull(store.putIfAbsent(0, \"zero\"));\n            assertNull(store.putIfAbsent(1, \"one\"));\n            assertNull(store.putIfAbsent(2, \"two\"));\n            assertNull(store.putIfAbsent(4, \"four\"));\n            assertEquals(\"four\", store.putIfAbsent(4, \"unexpected value\"));\n            assertEquals(4, driver.sizeOf(store));\n            assertEquals(\"zero\", store.get(0));\n            assertEquals(\"one\", store.get(1));\n            assertEquals(\"two\", store.get(2));\n            assertNull(store.get(3));\n            assertEquals(\"four\", store.get(4));\n\n            \r\n            store.flush();\n            assertEquals(\"zero\", driver.flushedEntryStored(0));\n            assertEquals(\"one\", driver.flushedEntryStored(1));\n            assertEquals(\"two\", driver.flushedEntryStored(2));\n            assertEquals(\"four\", driver.flushedEntryStored(4));\n\n            assertEquals(false, driver.flushedEntryRemoved(0));\n            assertEquals(false, driver.flushedEntryRemoved(1));\n            assertEquals(false, driver.flushedEntryRemoved(2));\n            assertEquals(false, driver.flushedEntryRemoved(4));\n        } finally {\n            store.close();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"69ebf6f7be2fc0e471ebd5b7a166468017ff2651","commitMessage":"@@@KAFKA-3595: window stores use compact. delete config for changelogs\n\nchangelogs of window stores now configure cleanup.policy=compact. delete with retention.ms set to window maintainMs + StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG\nStoreChangeLogger produces messages with context.timestamp().\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Eno Thereska.  Guozhang Wang\n\nCloses #1792 from dguy/kafka-3595\n","date":"2016-09-08 09:02:24","modifiedFileCount":"24","status":"M","submitter":"Damian Guy"},{"authorTime":"2016-09-08 09:02:24","codes":[{"authorDate":"2018-02-02 08:14:22","commitOrder":6,"curCode":"    public void testPutGetRange() {\n        \r\n        store.put(0, \"zero\");\n        store.put(1, \"one\");\n        store.put(2, \"two\");\n        store.put(4, \"four\");\n        store.put(5, \"five\");\n        assertEquals(5, driver.sizeOf(store));\n        assertEquals(\"zero\", store.get(0));\n        assertEquals(\"one\", store.get(1));\n        assertEquals(\"two\", store.get(2));\n        assertNull(store.get(3));\n        assertEquals(\"four\", store.get(4));\n        assertEquals(\"five\", store.get(5));\n        store.delete(5);\n        assertEquals(4, driver.sizeOf(store));\n\n        \r\n        store.flush();\n        assertEquals(\"zero\", driver.flushedEntryStored(0));\n        assertEquals(\"one\", driver.flushedEntryStored(1));\n        assertEquals(\"two\", driver.flushedEntryStored(2));\n        assertEquals(\"four\", driver.flushedEntryStored(4));\n        assertEquals(null, driver.flushedEntryStored(5));\n\n        assertEquals(false, driver.flushedEntryRemoved(0));\n        assertEquals(false, driver.flushedEntryRemoved(1));\n        assertEquals(false, driver.flushedEntryRemoved(2));\n        assertEquals(false, driver.flushedEntryRemoved(4));\n        assertEquals(true, driver.flushedEntryRemoved(5));\n\n        final HashMap<Integer, String> expectedContents = new HashMap<>();\n        expectedContents.put(2, \"two\");\n        expectedContents.put(4, \"four\");\n\n        \r\n        assertEquals(expectedContents, getContents(store.range(2, 4)));\n        assertEquals(expectedContents, getContents(store.range(2, 6)));\n\n        \r\n        expectedContents.put(0, \"zero\");\n        expectedContents.put(1, \"one\");\n        assertEquals(expectedContents, getContents(store.all()));\n    }\n","date":"2018-02-02 08:14:22","endLine":114,"groupId":"14369","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPutGetRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/39/8c4c5062c824b88c769d8e16f725f5bf50cf64.src","preCode":"    public void testPutGetRange() {\n        \r\n        store.put(0, \"zero\");\n        store.put(1, \"one\");\n        store.put(2, \"two\");\n        store.put(4, \"four\");\n        store.put(5, \"five\");\n        assertEquals(5, driver.sizeOf(store));\n        assertEquals(\"zero\", store.get(0));\n        assertEquals(\"one\", store.get(1));\n        assertEquals(\"two\", store.get(2));\n        assertNull(store.get(3));\n        assertEquals(\"four\", store.get(4));\n        assertEquals(\"five\", store.get(5));\n        store.delete(5);\n\n        \r\n        store.flush();\n        assertEquals(\"zero\", driver.flushedEntryStored(0));\n        assertEquals(\"one\", driver.flushedEntryStored(1));\n        assertEquals(\"two\", driver.flushedEntryStored(2));\n        assertEquals(\"four\", driver.flushedEntryStored(4));\n        assertEquals(null, driver.flushedEntryStored(5));\n\n        assertEquals(false, driver.flushedEntryRemoved(0));\n        assertEquals(false, driver.flushedEntryRemoved(1));\n        assertEquals(false, driver.flushedEntryRemoved(2));\n        assertEquals(false, driver.flushedEntryRemoved(4));\n        assertEquals(true, driver.flushedEntryRemoved(5));\n\n        \r\n        try (KeyValueIterator<Integer, String> iter = store.range(2, 4)) {\n            while (iter.hasNext()) {\n                KeyValue<Integer, String> entry = iter.next();\n                if (entry.key.equals(2))\n                    assertEquals(\"two\", entry.value);\n                else if (entry.key.equals(4))\n                    assertEquals(\"four\", entry.value);\n                else\n                    fail(\"Unexpected entry: \" + entry);\n            }\n        }\n\n        \r\n        try (KeyValueIterator<Integer, String> iter = store.range(2, 6)) {\n            while (iter.hasNext()) {\n                KeyValue<Integer, String> entry = iter.next();\n                if (entry.key.equals(2))\n                    assertEquals(\"two\", entry.value);\n                else if (entry.key.equals(4))\n                    assertEquals(\"four\", entry.value);\n                else\n                    fail(\"Unexpected entry: \" + entry);\n            }\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2016-09-08 09:02:24","commitOrder":6,"curCode":"    public void testPutIfAbsent() {\n        \r\n        assertNull(store.putIfAbsent(0, \"zero\"));\n        assertNull(store.putIfAbsent(1, \"one\"));\n        assertNull(store.putIfAbsent(2, \"two\"));\n        assertNull(store.putIfAbsent(4, \"four\"));\n        assertEquals(\"four\", store.putIfAbsent(4, \"unexpected value\"));\n        assertEquals(4, driver.sizeOf(store));\n        assertEquals(\"zero\", store.get(0));\n        assertEquals(\"one\", store.get(1));\n        assertEquals(\"two\", store.get(2));\n        assertNull(store.get(3));\n        assertEquals(\"four\", store.get(4));\n\n        \r\n        store.flush();\n        assertEquals(\"zero\", driver.flushedEntryStored(0));\n        assertEquals(\"one\", driver.flushedEntryStored(1));\n        assertEquals(\"two\", driver.flushedEntryStored(2));\n        assertEquals(\"four\", driver.flushedEntryStored(4));\n\n        assertEquals(false, driver.flushedEntryRemoved(0));\n        assertEquals(false, driver.flushedEntryRemoved(1));\n        assertEquals(false, driver.flushedEntryRemoved(2));\n        assertEquals(false, driver.flushedEntryRemoved(4));\n    }\n","date":"2016-09-08 09:02:24","endLine":214,"groupId":"19462","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPutIfAbsent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/70/0655ec23cd19785f3d66e63b9991a881cf5dd2.src","preCode":"    public void testPutIfAbsent() {\n        \r\n        assertNull(store.putIfAbsent(0, \"zero\"));\n        assertNull(store.putIfAbsent(1, \"one\"));\n        assertNull(store.putIfAbsent(2, \"two\"));\n        assertNull(store.putIfAbsent(4, \"four\"));\n        assertEquals(\"four\", store.putIfAbsent(4, \"unexpected value\"));\n        assertEquals(4, driver.sizeOf(store));\n        assertEquals(\"zero\", store.get(0));\n        assertEquals(\"one\", store.get(1));\n        assertEquals(\"two\", store.get(2));\n        assertNull(store.get(3));\n        assertEquals(\"four\", store.get(4));\n\n        \r\n        store.flush();\n        assertEquals(\"zero\", driver.flushedEntryStored(0));\n        assertEquals(\"one\", driver.flushedEntryStored(1));\n        assertEquals(\"two\", driver.flushedEntryStored(2));\n        assertEquals(\"four\", driver.flushedEntryStored(4));\n\n        assertEquals(false, driver.flushedEntryRemoved(0));\n        assertEquals(false, driver.flushedEntryRemoved(1));\n        assertEquals(false, driver.flushedEntryRemoved(2));\n        assertEquals(false, driver.flushedEntryRemoved(4));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"N"}],"commitId":"b0132c31e91bb090ff012c726ac4ed92566ce7fb","commitMessage":"@@@KAFKA-6487: ChangeLoggingKeyValueBytesStore does not propagate delete (#4495)\n\nThe ChangeLoggingKeyValueBytesStore used to write null to its underlying store instead of propagating the delete.  which has two drawbacks:\n\n* an iterator will see null values\n* unbounded memory growth of the underlying in-memory keyvalue store\n\nThe fix will just propagate the delete instead of performing put(key.  null).\n\nThe changes to the tests:\n\n*extra test whether the key is really gone after delete by calling the approximateEntries on the underlying store. This number is exact because we know the underlying store in the test is of type InMemoryKeyValueStore\n* extra test to check a delete is logged as <key.  null> (the existing test would also succeed if the key is just absent)\n\nWhile also updating the corresponding tests of the ChangeLoggingKeyValueStore I noticed the class is nowhere used anymore so I removed it from the source code for clarity.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-02-02 08:14:22","modifiedFileCount":"4","status":"M","submitter":"bartdevylder"},{"authorTime":"2019-02-13 14:36:40","codes":[{"authorDate":"2019-02-13 14:36:40","commitOrder":7,"curCode":"    public void testPutGetRange() {\n        \r\n        store.put(0, \"zero\");\n        store.put(1, \"one\");\n        store.put(2, \"two\");\n        store.put(4, \"four\");\n        store.put(5, \"five\");\n        assertEquals(5, driver.sizeOf(store));\n        assertEquals(\"zero\", store.get(0));\n        assertEquals(\"one\", store.get(1));\n        assertEquals(\"two\", store.get(2));\n        assertNull(store.get(3));\n        assertEquals(\"four\", store.get(4));\n        assertEquals(\"five\", store.get(5));\n        \r\n        store.flush();\n        store.delete(5);\n        assertEquals(4, driver.sizeOf(store));\n\n        \r\n        store.flush();\n        assertEquals(\"zero\", driver.flushedEntryStored(0));\n        assertEquals(\"one\", driver.flushedEntryStored(1));\n        assertEquals(\"two\", driver.flushedEntryStored(2));\n        assertEquals(\"four\", driver.flushedEntryStored(4));\n        assertNull(driver.flushedEntryStored(5));\n\n        assertFalse(driver.flushedEntryRemoved(0));\n        assertFalse(driver.flushedEntryRemoved(1));\n        assertFalse(driver.flushedEntryRemoved(2));\n        assertFalse(driver.flushedEntryRemoved(4));\n        assertTrue(driver.flushedEntryRemoved(5));\n\n        final HashMap<Integer, String> expectedContents = new HashMap<>();\n        expectedContents.put(2, \"two\");\n        expectedContents.put(4, \"four\");\n\n        \r\n        assertEquals(expectedContents, getContents(store.range(2, 4)));\n        assertEquals(expectedContents, getContents(store.range(2, 6)));\n\n        \r\n        expectedContents.put(0, \"zero\");\n        expectedContents.put(1, \"one\");\n        assertEquals(expectedContents, getContents(store.all()));\n    }\n","date":"2019-02-13 14:36:40","endLine":186,"groupId":"10897","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPutGetRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ad/87b608aa80380e5ad90b7badff881b5a7d010d.src","preCode":"    public void testPutGetRange() {\n        \r\n        store.put(0, \"zero\");\n        store.put(1, \"one\");\n        store.put(2, \"two\");\n        store.put(4, \"four\");\n        store.put(5, \"five\");\n        assertEquals(5, driver.sizeOf(store));\n        assertEquals(\"zero\", store.get(0));\n        assertEquals(\"one\", store.get(1));\n        assertEquals(\"two\", store.get(2));\n        assertNull(store.get(3));\n        assertEquals(\"four\", store.get(4));\n        assertEquals(\"five\", store.get(5));\n        store.delete(5);\n        assertEquals(4, driver.sizeOf(store));\n\n        \r\n        store.flush();\n        assertEquals(\"zero\", driver.flushedEntryStored(0));\n        assertEquals(\"one\", driver.flushedEntryStored(1));\n        assertEquals(\"two\", driver.flushedEntryStored(2));\n        assertEquals(\"four\", driver.flushedEntryStored(4));\n        assertEquals(null, driver.flushedEntryStored(5));\n\n        assertEquals(false, driver.flushedEntryRemoved(0));\n        assertEquals(false, driver.flushedEntryRemoved(1));\n        assertEquals(false, driver.flushedEntryRemoved(2));\n        assertEquals(false, driver.flushedEntryRemoved(4));\n        assertEquals(true, driver.flushedEntryRemoved(5));\n\n        final HashMap<Integer, String> expectedContents = new HashMap<>();\n        expectedContents.put(2, \"two\");\n        expectedContents.put(4, \"four\");\n\n        \r\n        assertEquals(expectedContents, getContents(store.range(2, 4)));\n        assertEquals(expectedContents, getContents(store.range(2, 6)));\n\n        \r\n        expectedContents.put(0, \"zero\");\n        expectedContents.put(1, \"one\");\n        assertEquals(expectedContents, getContents(store.all()));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2019-02-13 14:36:40","commitOrder":7,"curCode":"    public void testPutIfAbsent() {\n        \r\n        assertNull(store.putIfAbsent(0, \"zero\"));\n        assertNull(store.putIfAbsent(1, \"one\"));\n        assertNull(store.putIfAbsent(2, \"two\"));\n        assertNull(store.putIfAbsent(4, \"four\"));\n        assertEquals(\"four\", store.putIfAbsent(4, \"unexpected value\"));\n        assertEquals(4, driver.sizeOf(store));\n        assertEquals(\"zero\", store.get(0));\n        assertEquals(\"one\", store.get(1));\n        assertEquals(\"two\", store.get(2));\n        assertNull(store.get(3));\n        assertEquals(\"four\", store.get(4));\n\n        \r\n        store.flush();\n        assertEquals(\"zero\", driver.flushedEntryStored(0));\n        assertEquals(\"one\", driver.flushedEntryStored(1));\n        assertEquals(\"two\", driver.flushedEntryStored(2));\n        assertEquals(\"four\", driver.flushedEntryStored(4));\n\n        assertFalse(driver.flushedEntryRemoved(0));\n        assertFalse(driver.flushedEntryRemoved(1));\n        assertFalse(driver.flushedEntryRemoved(2));\n        assertFalse(driver.flushedEntryRemoved(4));\n    }\n","date":"2019-02-13 14:36:40","endLine":290,"groupId":"10897","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPutIfAbsent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ad/87b608aa80380e5ad90b7badff881b5a7d010d.src","preCode":"    public void testPutIfAbsent() {\n        \r\n        assertNull(store.putIfAbsent(0, \"zero\"));\n        assertNull(store.putIfAbsent(1, \"one\"));\n        assertNull(store.putIfAbsent(2, \"two\"));\n        assertNull(store.putIfAbsent(4, \"four\"));\n        assertEquals(\"four\", store.putIfAbsent(4, \"unexpected value\"));\n        assertEquals(4, driver.sizeOf(store));\n        assertEquals(\"zero\", store.get(0));\n        assertEquals(\"one\", store.get(1));\n        assertEquals(\"two\", store.get(2));\n        assertNull(store.get(3));\n        assertEquals(\"four\", store.get(4));\n\n        \r\n        store.flush();\n        assertEquals(\"zero\", driver.flushedEntryStored(0));\n        assertEquals(\"one\", driver.flushedEntryStored(1));\n        assertEquals(\"two\", driver.flushedEntryStored(2));\n        assertEquals(\"four\", driver.flushedEntryStored(4));\n\n        assertEquals(false, driver.flushedEntryRemoved(0));\n        assertEquals(false, driver.flushedEntryRemoved(1));\n        assertEquals(false, driver.flushedEntryRemoved(2));\n        assertEquals(false, driver.flushedEntryRemoved(4));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/AbstractKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":265,"status":"M"}],"commitId":"0a1c26934757afae4dce49ff3ee038311ca6dd4a","commitMessage":"@@@KAFKA-7652: Part III; Put to underlying before Flush (#6191)\n\n1. In the caching layer's flush listener call.  we should always write to the underlying store.  before flushing (see #4331 's point 4) for detailed explanation). When fixing 4331.  it only touches on KV stores.  but it turns out that we should fix for window and session store as well.\n\n2. Also apply the optimization that was in session-store already: when the new value bytes and old value bytes are all null (this is possible e.g. if there is a put(K.  V) followed by a remove(K) or put(K.  null) and these two operations only hit the cache).  upon flushing this mean the underlying store does not have this value at all and also no intermediate value has been sent to downstream as well. We can skip both putting a null to the underlying store as well as calling the flush listener sending `null -> null` in this case.\n\nModifies corresponding unit tests.\n\nReviewers: John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2019-02-13 14:36:40","modifiedFileCount":"13","status":"M","submitter":"Guozhang Wang"}]
