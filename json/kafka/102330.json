[{"authorTime":"2020-03-03 00:22:01","codes":[{"authorDate":"2020-04-07 06:30:29","commitOrder":10,"curCode":"    public void shouldGetPollRecordsSensor() {\n        final String operation = \"poll-records\";\n        final String avgDescription = \"The average number of records polled from consumer within an iteration\";\n        final String maxDescription = \"The maximum number of records polled from consumer within an iteration\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            avgDescription,\n            maxDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.pollRecordsSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2020-04-07 06:30:29","endLine":216,"groupId":"3630","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetPollRecordsSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1a/545c0a0d4a83ea35342b777177746274763272.src","preCode":"    public void shouldGetPollRecordsSensor() {\n        final String operation = \"poll-records\";\n        final String avgDescription = \"The average number of records polled from consumer within an iteration\";\n        final String maxDescription = \"The maximum number of records polled from consumer within an iteration\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            avgDescription,\n            maxDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.pollRecordsSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"B"},{"authorDate":"2020-03-03 00:22:01","commitOrder":10,"curCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2020-03-03 00:22:01","endLine":299,"groupId":"3630","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetSkipRecordSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d7/059a87fd8868d279052c39cd1fc9211836eb22.src","preCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"NB"}],"commitId":"82dff1db5486647b27e5297e4c839bd2a905c1d9","commitMessage":"@@@KAFKA-9753: A few more metrics to add (#8371)\n\nInstance-level:\n* number of alive stream threads\n\nThread-level:\n* avg / max number of records polled from the consumer per runOnce.  INFO\n* avg / max number of records processed by the task manager (i.e. across all tasks) per runOnce.  INFO\n\nTask-level:\n* number of current buffered records at the moment (i.e. it is just a dynamic gauge).  DEBUG.\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  John Roesler <john@confluent.io>","date":"2020-04-07 06:30:29","modifiedFileCount":"16","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":11,"curCode":"    public void shouldGetPollRecordsSensor() {\n        final String operation = \"poll-records\";\n        final String avgDescription = \"The average number of records polled from consumer within an iteration\";\n        final String maxDescription = \"The maximum number of records polled from consumer within an iteration\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            avgDescription,\n            maxDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.pollRecordsSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-01 20:05:08","endLine":194,"groupId":"3630","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetPollRecordsSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7a/9a0945ca9a7370bf3454c94c3c5df88a01c3f5.src","preCode":"    public void shouldGetPollRecordsSensor() {\n        final String operation = \"poll-records\";\n        final String avgDescription = \"The average number of records polled from consumer within an iteration\";\n        final String maxDescription = \"The maximum number of records polled from consumer within an iteration\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            avgDescription,\n            maxDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.pollRecordsSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":11,"curCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-01 20:05:08","endLine":386,"groupId":"3630","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetSkipRecordSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7a/9a0945ca9a7370bf3454c94c3c5df88a01c3f5.src","preCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-11 04:21:46","codes":[{"authorDate":"2021-06-11 04:21:46","commitOrder":12,"curCode":"    public void shouldGetPollRecordsSensor() {\n        final String operation = \"poll-records\";\n        final String avgDescription = \"The average number of records polled from consumer within an iteration\";\n        final String maxDescription = \"The maximum number of records polled from consumer within an iteration\";\n        when(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).thenReturn(expectedSensor);\n        when(streamsMetrics.threadLevelTagMap(THREAD_ID)).thenReturn(tagMap);\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            avgDescription,\n            maxDescription\n        );\n\n        final Sensor sensor = ThreadMetrics.pollRecordsSensor(THREAD_ID, streamsMetrics);\n\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-11 04:21:46","endLine":166,"groupId":"102330","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetPollRecordsSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ae/0eae43f6b36d107e68ddc0587cd4369f1c407c.src","preCode":"    public void shouldGetPollRecordsSensor() {\n        final String operation = \"poll-records\";\n        final String avgDescription = \"The average number of records polled from consumer within an iteration\";\n        final String maxDescription = \"The maximum number of records polled from consumer within an iteration\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            avgDescription,\n            maxDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.pollRecordsSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2021-06-11 04:21:46","commitOrder":12,"curCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        when(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n                .thenReturn(expectedSensor);\n        when(streamsMetrics.threadLevelTagMap(THREAD_ID)).thenReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-11 04:21:46","endLine":344,"groupId":"102330","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetSkipRecordSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ae/0eae43f6b36d107e68ddc0587cd4369f1c407c.src","preCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"}],"commitId":"69d507590efc0588a61214c35e0bb552744aae05","commitMessage":"@@@KAFKA-12924 Replace EasyMock and PowerMock with Mockito in streams metrics tests (#10850)\n\nReviewers: John Roesler <vvcephei@apache.org>.  Ismael Juma <ijuma@apache.org>","date":"2021-06-11 04:21:46","modifiedFileCount":"7","status":"M","submitter":"wycccccc"}]
