[{"authorTime":"2019-06-22 03:44:45","codes":[{"authorDate":"2019-06-22 03:44:45","commitOrder":1,"curCode":"    public void testInvalidHeaderKey() {\n        byte attributes = 0;\n        long timestampDelta = 2;\n        int offsetDelta = 1;\n        int sizeOfBodyInBytes = 100;\n\n        ByteBuffer buf = ByteBuffer.allocate(sizeOfBodyInBytes + ByteUtils.sizeOfVarint(sizeOfBodyInBytes));\n        ByteUtils.writeVarint(sizeOfBodyInBytes, buf);\n        buf.put(attributes);\n        ByteUtils.writeVarlong(timestampDelta, buf);\n        ByteUtils.writeVarint(offsetDelta, buf);\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(1, buf);\n        ByteUtils.writeVarint(105, buf); \r\n        buf.position(buf.limit());\n\n        buf.flip();\n        DefaultRecord.readFrom(buf, 0L, 0L, RecordBatch.NO_SEQUENCE, null);\n    }\n","date":"2019-06-22 03:44:45","endLine":292,"groupId":"7017","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidHeaderKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/8f9945d3f168b249b28c7aa15503b49d1ad4e5.src","preCode":"    public void testInvalidHeaderKey() {\n        byte attributes = 0;\n        long timestampDelta = 2;\n        int offsetDelta = 1;\n        int sizeOfBodyInBytes = 100;\n\n        ByteBuffer buf = ByteBuffer.allocate(sizeOfBodyInBytes + ByteUtils.sizeOfVarint(sizeOfBodyInBytes));\n        ByteUtils.writeVarint(sizeOfBodyInBytes, buf);\n        buf.put(attributes);\n        ByteUtils.writeVarlong(timestampDelta, buf);\n        ByteUtils.writeVarint(offsetDelta, buf);\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(1, buf);\n        ByteUtils.writeVarint(105, buf); \r\n        buf.position(buf.limit());\n\n        buf.flip();\n        DefaultRecord.readFrom(buf, 0L, 0L, RecordBatch.NO_SEQUENCE, null);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/DefaultRecordTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"B"},{"authorDate":"2019-06-22 03:44:45","commitOrder":1,"curCode":"    public void testInvalidHeaderValue() {\n        byte attributes = 0;\n        long timestampDelta = 2;\n        int offsetDelta = 1;\n        int sizeOfBodyInBytes = 100;\n\n        ByteBuffer buf = ByteBuffer.allocate(sizeOfBodyInBytes + ByteUtils.sizeOfVarint(sizeOfBodyInBytes));\n        ByteUtils.writeVarint(sizeOfBodyInBytes, buf);\n        buf.put(attributes);\n        ByteUtils.writeVarlong(timestampDelta, buf);\n        ByteUtils.writeVarint(offsetDelta, buf);\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(1, buf);\n        ByteUtils.writeVarint(1, buf);\n        buf.put((byte) 1);\n        ByteUtils.writeVarint(105, buf); \r\n        buf.position(buf.limit());\n\n        buf.flip();\n        DefaultRecord.readFrom(buf, 0L, 0L, RecordBatch.NO_SEQUENCE, null);\n    }\n","date":"2019-06-22 03:44:45","endLine":384,"groupId":"7017","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidHeaderValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/8f9945d3f168b249b28c7aa15503b49d1ad4e5.src","preCode":"    public void testInvalidHeaderValue() {\n        byte attributes = 0;\n        long timestampDelta = 2;\n        int offsetDelta = 1;\n        int sizeOfBodyInBytes = 100;\n\n        ByteBuffer buf = ByteBuffer.allocate(sizeOfBodyInBytes + ByteUtils.sizeOfVarint(sizeOfBodyInBytes));\n        ByteUtils.writeVarint(sizeOfBodyInBytes, buf);\n        buf.put(attributes);\n        ByteUtils.writeVarlong(timestampDelta, buf);\n        ByteUtils.writeVarint(offsetDelta, buf);\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(1, buf);\n        ByteUtils.writeVarint(1, buf);\n        buf.put((byte) 1);\n        ByteUtils.writeVarint(105, buf); \r\n        buf.position(buf.limit());\n\n        buf.flip();\n        DefaultRecord.readFrom(buf, 0L, 0L, RecordBatch.NO_SEQUENCE, null);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/DefaultRecordTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"B"}],"commitId":"3e9d1c1411c5268de382f9dfcc95bdf66d0063a0","commitMessage":"@@@KAFKA-8106: Skipping ByteBuffer allocation of key / value / headers in logValidator (#6785)\n\n* KAFKA-8106:Reducing the allocation and copying of ByteBuffer when logValidator do validation.\n\n* KAFKA-8106:Reducing the allocation and copying of ByteBuffer when logValidator do validation.\n\n* github comments\n\n* use batch.skipKeyValueIterator\n\n* cleanups\n\n* no need to skip kv for uncompressed iterator\n\n* checkstyle fixes\n\n* fix findbugs\n\n* adding unit tests\n\n* reuse decompression buffer; and using streaming iterator\n\n* checkstyle\n\n* add unit tests\n\n* remove reusing buffer supplier\n\n* fix unit tests\n\n* add unit tests\n\n* use streaming iterator\n\n* minor refactoring\n\n* rename\n\n* github comments\n\n* github comments\n\n* reuse buffer at DefaultRecord caller\n\n* some further optimization\n\n* major refactoring\n\n* further refactoring\n\n* update comment\n\n* github comments\n\n* minor fix\n\n* add jmh benchmarks\n\n* update jmh\n\n* github comments\n\n* minor fix\n\n* github comments\n","date":"2019-06-22 03:44:45","modifiedFileCount":"12","status":"B","submitter":"Guozhang Wang"},{"authorTime":"2021-01-10 20:20:13","codes":[{"authorDate":"2021-01-10 20:20:13","commitOrder":2,"curCode":"    public void testInvalidHeaderKey() {\n        byte attributes = 0;\n        long timestampDelta = 2;\n        int offsetDelta = 1;\n        int sizeOfBodyInBytes = 100;\n\n        ByteBuffer buf = ByteBuffer.allocate(sizeOfBodyInBytes + ByteUtils.sizeOfVarint(sizeOfBodyInBytes));\n        ByteUtils.writeVarint(sizeOfBodyInBytes, buf);\n        buf.put(attributes);\n        ByteUtils.writeVarlong(timestampDelta, buf);\n        ByteUtils.writeVarint(offsetDelta, buf);\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(1, buf);\n        ByteUtils.writeVarint(105, buf); \r\n        buf.position(buf.limit());\n\n        buf.flip();\n        assertThrows(InvalidRecordException.class,\n            () ->  DefaultRecord.readFrom(buf, 0L, 0L, RecordBatch.NO_SEQUENCE, null));\n    }\n","date":"2021-01-10 20:20:13","endLine":296,"groupId":"103331","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInvalidHeaderKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a4/c4aeccd909264edde2063c4b34cae3ec99b700.src","preCode":"    public void testInvalidHeaderKey() {\n        byte attributes = 0;\n        long timestampDelta = 2;\n        int offsetDelta = 1;\n        int sizeOfBodyInBytes = 100;\n\n        ByteBuffer buf = ByteBuffer.allocate(sizeOfBodyInBytes + ByteUtils.sizeOfVarint(sizeOfBodyInBytes));\n        ByteUtils.writeVarint(sizeOfBodyInBytes, buf);\n        buf.put(attributes);\n        ByteUtils.writeVarlong(timestampDelta, buf);\n        ByteUtils.writeVarint(offsetDelta, buf);\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(1, buf);\n        ByteUtils.writeVarint(105, buf); \r\n        buf.position(buf.limit());\n\n        buf.flip();\n        DefaultRecord.readFrom(buf, 0L, 0L, RecordBatch.NO_SEQUENCE, null);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/DefaultRecordTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":276,"status":"M"},{"authorDate":"2021-01-10 20:20:13","commitOrder":2,"curCode":"    public void testInvalidHeaderValue() {\n        byte attributes = 0;\n        long timestampDelta = 2;\n        int offsetDelta = 1;\n        int sizeOfBodyInBytes = 100;\n\n        ByteBuffer buf = ByteBuffer.allocate(sizeOfBodyInBytes + ByteUtils.sizeOfVarint(sizeOfBodyInBytes));\n        ByteUtils.writeVarint(sizeOfBodyInBytes, buf);\n        buf.put(attributes);\n        ByteUtils.writeVarlong(timestampDelta, buf);\n        ByteUtils.writeVarint(offsetDelta, buf);\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(1, buf);\n        ByteUtils.writeVarint(1, buf);\n        buf.put((byte) 1);\n        ByteUtils.writeVarint(105, buf); \r\n        buf.position(buf.limit());\n\n        buf.flip();\n        assertThrows(InvalidRecordException.class,\n            () -> DefaultRecord.readFrom(buf, 0L, 0L, RecordBatch.NO_SEQUENCE, null));\n    }\n","date":"2021-01-10 20:20:13","endLine":392,"groupId":"103331","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidHeaderValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a4/c4aeccd909264edde2063c4b34cae3ec99b700.src","preCode":"    public void testInvalidHeaderValue() {\n        byte attributes = 0;\n        long timestampDelta = 2;\n        int offsetDelta = 1;\n        int sizeOfBodyInBytes = 100;\n\n        ByteBuffer buf = ByteBuffer.allocate(sizeOfBodyInBytes + ByteUtils.sizeOfVarint(sizeOfBodyInBytes));\n        ByteUtils.writeVarint(sizeOfBodyInBytes, buf);\n        buf.put(attributes);\n        ByteUtils.writeVarlong(timestampDelta, buf);\n        ByteUtils.writeVarint(offsetDelta, buf);\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(-1, buf); \r\n        ByteUtils.writeVarint(1, buf);\n        ByteUtils.writeVarint(1, buf);\n        buf.put((byte) 1);\n        ByteUtils.writeVarint(105, buf); \r\n        buf.position(buf.limit());\n\n        buf.flip();\n        DefaultRecord.readFrom(buf, 0L, 0L, RecordBatch.NO_SEQUENCE, null);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/DefaultRecordTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":370,"status":"M"}],"commitId":"913a019d6c9b03eb44706deb7fb164f79c1f601f","commitMessage":"@@@MINOR: replace test \"expected\" parameter by assertThrows (#9520)\n\nThis PR includes following changes.\n\n1. @Test(expected = Exception.class) is replaced by assertThrows\n2. remove reference to org.scalatest.Assertions\n3. change the magic code from 1 to 2 for testAppendAtInvalidOffset to test ZSTD\n4. rename testMaybeAddPartitionToTransactionXXXX to testNotReadyForSendXXX\n5. increase maxBlockMs from 1s to 3s to avoid unexpected timeout from TransactionsTest#testTimeout\n\nReviewers: Ismael Juma <ismael@confluent.io>","date":"2021-01-10 20:20:13","modifiedFileCount":"166","status":"M","submitter":"Chia-Ping Tsai"}]
