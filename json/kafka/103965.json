[{"authorTime":"2019-04-22 07:24:18","codes":[{"authorDate":"2019-03-08 08:29:19","commitOrder":2,"curCode":"    private void buildDependencies(MetricConfig metricConfig, OffsetResetStrategy offsetResetStrategy) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, Long.MAX_VALUE, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        metrics = new Metrics(metricConfig, time);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n        metricsRegistry = new FetcherMetricsRegistry(metricConfig.tags().keySet(), \"consumer\" + groupId);\n    }\n","date":"2019-03-08 08:29:19","endLine":3237,"groupId":"20506","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildDependencies","params":"(MetricConfigmetricConfig@OffsetResetStrategyoffsetResetStrategy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3f/e7ca05c0c67d0b72786aad7f9bd09a11025ac3.src","preCode":"    private void buildDependencies(MetricConfig metricConfig, OffsetResetStrategy offsetResetStrategy) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, Long.MAX_VALUE, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        metrics = new Metrics(metricConfig, time);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n        metricsRegistry = new FetcherMetricsRegistry(metricConfig.tags().keySet(), \"consumer\" + groupId);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3226,"status":"NB"},{"authorDate":"2019-04-22 07:24:18","commitOrder":2,"curCode":"    private void buildDependencies(OffsetResetStrategy offsetResetStrategy) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, Long.MAX_VALUE, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n    }\n","date":"2019-04-22 07:24:18","endLine":165,"groupId":"20506","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildDependencies","params":"(OffsetResetStrategyoffsetResetStrategy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ee/00e484206ef469d67fff65b6087146fea4361a.src","preCode":"    private void buildDependencies(OffsetResetStrategy offsetResetStrategy) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, Long.MAX_VALUE, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/OffsetForLeaderEpochClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"}],"commitId":"409fabc5610443f36574bdea2e2994b6c20e2829","commitMessage":"@@@KAFKA-7747; Check for truncation after leader changes [KIP-320] (#6371)\n\nAfter the client detects a leader change we need to check the offset of the current leader for truncation. These changes were part of KIP-320: https://cwiki.apache.org/confluence/display/KAFKA/KIP-320%3A+Allow+fetchers+to+detect+and+handle+log+truncation.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-04-22 07:24:18","modifiedFileCount":"14","status":"M","submitter":"David Arthur"},{"authorTime":"2019-05-09 00:31:05","codes":[{"authorDate":"2019-05-09 00:31:05","commitOrder":3,"curCode":"    private void buildDependencies(MetricConfig metricConfig, OffsetResetStrategy offsetResetStrategy) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, Long.MAX_VALUE, false, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        metrics = new Metrics(metricConfig, time);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n        metricsRegistry = new FetcherMetricsRegistry(metricConfig.tags().keySet(), \"consumer\" + groupId);\n    }\n","date":"2019-05-09 00:31:05","endLine":3405,"groupId":"20506","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildDependencies","params":"(MetricConfigmetricConfig@OffsetResetStrategyoffsetResetStrategy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/30/c9a04849858adac5b168931153a312627fe823.src","preCode":"    private void buildDependencies(MetricConfig metricConfig, OffsetResetStrategy offsetResetStrategy) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, Long.MAX_VALUE, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        metrics = new Metrics(metricConfig, time);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n        metricsRegistry = new FetcherMetricsRegistry(metricConfig.tags().keySet(), \"consumer\" + groupId);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3394,"status":"M"},{"authorDate":"2019-05-09 00:31:05","commitOrder":3,"curCode":"    private void buildDependencies(OffsetResetStrategy offsetResetStrategy) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, Long.MAX_VALUE, false, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n    }\n","date":"2019-05-09 00:31:05","endLine":165,"groupId":"20506","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildDependencies","params":"(OffsetResetStrategyoffsetResetStrategy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/b8754ac95842b7c6fe36d94caa7481aa9e4172.src","preCode":"    private void buildDependencies(OffsetResetStrategy offsetResetStrategy) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, Long.MAX_VALUE, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/OffsetForLeaderEpochClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"e6cff21fd8c5add0eb7e55417a91f0530a7d3a32","commitMessage":"@@@KAFKA-7320; Add consumer configuration to disable auto topic creation [KIP-361] (#5542)\n\nImplements KIP-361 to provide a consumer configuration to specify whether subscribing or assigning a non-existent topic would result in it being automatically created or not.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-05-09 00:31:05","modifiedFileCount":"17","status":"M","submitter":"Dhruvil Shah"},{"authorTime":"2019-05-09 00:31:05","codes":[{"authorDate":"2019-05-18 13:45:46","commitOrder":4,"curCode":"    private void buildDependencies(MetricConfig metricConfig, OffsetResetStrategy offsetResetStrategy, long metadataExpireMs) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, metadataExpireMs, false, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        metrics = new Metrics(metricConfig, time);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n        metricsRegistry = new FetcherMetricsRegistry(metricConfig.tags().keySet(), \"consumer\" + groupId);\n    }\n","date":"2019-05-18 13:45:45","endLine":3509,"groupId":"20506","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"buildDependencies","params":"(MetricConfigmetricConfig@OffsetResetStrategyoffsetResetStrategy@longmetadataExpireMs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1d/fdf231d764ce16817ec0dd145acac68763a329.src","preCode":"    private void buildDependencies(MetricConfig metricConfig, OffsetResetStrategy offsetResetStrategy) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, Long.MAX_VALUE, false, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        metrics = new Metrics(metricConfig, time);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n        metricsRegistry = new FetcherMetricsRegistry(metricConfig.tags().keySet(), \"consumer\" + groupId);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3498,"status":"M"},{"authorDate":"2019-05-09 00:31:05","commitOrder":4,"curCode":"    private void buildDependencies(OffsetResetStrategy offsetResetStrategy) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, Long.MAX_VALUE, false, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n    }\n","date":"2019-05-09 00:31:05","endLine":165,"groupId":"20506","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildDependencies","params":"(OffsetResetStrategyoffsetResetStrategy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/b8754ac95842b7c6fe36d94caa7481aa9e4172.src","preCode":"    private void buildDependencies(OffsetResetStrategy offsetResetStrategy) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, Long.MAX_VALUE, false, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/OffsetForLeaderEpochClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"}],"commitId":"e2847e8603fe19a87ff03584fb38954e4bd3a59e","commitMessage":"@@@KAFKA-8365; Consumer and protocol support for follower fetching (#6731)\n\nThis patch includes API changes for follower fetching per [KIP-392](https://cwiki.apache.org/confluence/display/KAFKA/KIP-392%3A+Allow+consumers+to+fetch+from+closest+replica) as well as the consumer implementation. After this patch.  consumers will continue to fetch only from the leader.  since the broker implementation to select an alternate read replica is not included here.\n\nAdds new `client.rack` consumer configuration property is added which allows the consumer to indicate its rack. This is just an arbitrary string to indicate some relative location.  it doesn't have to actually represent a physical rack. We are keeping the naming consistent with the broker property (`broker.rack`).\n\nFetchRequest now includes `rack_id` which can optionally be specified by the consumer. FetchResponse includes an optional `preferred_read_replica` field for each partition in the response. OffsetForLeaderEpochRequest also adds new `replica_id` field which is similar to the same field in FetchRequest.\n\nWhen the consumer sees a `preferred_read_replica` in a fetch response.  it will use the Node with that ID for the next fetch.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-05-18 13:45:45","modifiedFileCount":"16","status":"M","submitter":"David Arthur"},{"authorTime":"2019-05-09 00:31:05","codes":[{"authorDate":"2019-05-30 06:59:08","commitOrder":5,"curCode":"    private void buildDependencies(MetricConfig metricConfig,\n                                   long metadataExpireMs,\n                                   SubscriptionState subscriptionState,\n                                   LogContext logContext) {\n        time = new MockTime(1);\n        subscriptions = subscriptionState;\n        metadata = new ConsumerMetadata(0, metadataExpireMs, false, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        metrics = new Metrics(metricConfig, time);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n        metricsRegistry = new FetcherMetricsRegistry(metricConfig.tags().keySet(), \"consumer\" + groupId);\n    }\n","date":"2019-05-30 06:59:08","endLine":3724,"groupId":"103965","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"buildDependencies","params":"(MetricConfigmetricConfig@longmetadataExpireMs@SubscriptionStatesubscriptionState@LogContextlogContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/64e3ba100155fe3a6193f4afc7c2f696fab6ef.src","preCode":"    private void buildDependencies(MetricConfig metricConfig, OffsetResetStrategy offsetResetStrategy, long metadataExpireMs) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, metadataExpireMs, false, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        metrics = new Metrics(metricConfig, time);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n        metricsRegistry = new FetcherMetricsRegistry(metricConfig.tags().keySet(), \"consumer\" + groupId);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3711,"status":"M"},{"authorDate":"2019-05-09 00:31:05","commitOrder":5,"curCode":"    private void buildDependencies(OffsetResetStrategy offsetResetStrategy) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, Long.MAX_VALUE, false, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n    }\n","date":"2019-05-09 00:31:05","endLine":165,"groupId":"103965","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"buildDependencies","params":"(OffsetResetStrategyoffsetResetStrategy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/b8754ac95842b7c6fe36d94caa7481aa9e4172.src","preCode":"    private void buildDependencies(OffsetResetStrategy offsetResetStrategy) {\n        LogContext logContext = new LogContext();\n        time = new MockTime(1);\n        subscriptions = new SubscriptionState(logContext, offsetResetStrategy);\n        metadata = new ConsumerMetadata(0, Long.MAX_VALUE, false, false,\n                subscriptions, logContext, new ClusterResourceListeners());\n        client = new MockClient(time, metadata);\n        consumerClient = new ConsumerNetworkClient(logContext, client, metadata, time,\n                100, 1000, Integer.MAX_VALUE);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/OffsetForLeaderEpochClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"}],"commitId":"e82e2e723a8a71e5e0a73af4ce408e60065c1356","commitMessage":"@@@KAFKA-7703; position() may return a wrong offset after seekToEnd (#6407)\n\nWhen poll is called which resets the offsets to the beginning.  followed by a seekToEnd and a position.  it could happen that the \"reset to earliest\" call in poll overrides the \"reset to latest\" initiated by seekToEnd in a very delicate way: \n\n1. both request has been issued and returned to the client side (listOffsetResponse has happened)\n2. in Fetcher.resetOffsetIfNeeded(TopicPartition.  Long.  OffsetData) the thread scheduler could prefer the heartbeat thread with the \"reset to earliest\" call.  overriding the offset to the earliest and setting the SubscriptionState with that position.\n3. The thread scheduler continues execution of the thread (application thread) with the \"reset to latest\" call and discards it as the \"reset to earliest\" already set the position - the wrong one.\n4. The blocking position call returns with the earliest offset instead of the latest.  despite it wasn't expected.\n\nThe fix makes SubscriptionState synchronized so that we can verify that the reset is expected while holding the lock. \n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-05-30 06:59:08","modifiedFileCount":"6","status":"M","submitter":"Viktor Somogyi"}]
