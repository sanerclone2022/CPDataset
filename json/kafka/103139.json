[{"authorTime":"2017-05-17 00:57:15","codes":[{"authorDate":"2017-05-17 00:57:15","commitOrder":1,"curCode":"    public void shouldBeFlaggedAsTransactionalWhenTransactionalRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withTransactionalRecords(0,\n                                                                                   CompressionType.NONE,\n                                                                                   1L,\n                                                                                   (short) 1,\n                                                                                   1,\n                                                                                   1,\n                                                                                   simpleRecord);\n        final ProduceRequest request = new ProduceRequest.Builder(RecordBatch.CURRENT_MAGIC_VALUE,\n                                                                  (short) -1,\n                                                                  10,\n                                                                  Collections.singletonMap(\n                                                                          new TopicPartition(\"topic\", 1), memoryRecords)).build();\n        assertTrue(request.isTransactional());\n    }\n","date":"2017-05-17 00:57:15","endLine":53,"groupId":"21498","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldBeFlaggedAsTransactionalWhenTransactionalRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0e/8f38261e41e91f1bd9332578b1535c65f251d0.src","preCode":"    public void shouldBeFlaggedAsTransactionalWhenTransactionalRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withTransactionalRecords(0,\n                                                                                   CompressionType.NONE,\n                                                                                   1L,\n                                                                                   (short) 1,\n                                                                                   1,\n                                                                                   1,\n                                                                                   simpleRecord);\n        final ProduceRequest request = new ProduceRequest.Builder(RecordBatch.CURRENT_MAGIC_VALUE,\n                                                                  (short) -1,\n                                                                  10,\n                                                                  Collections.singletonMap(\n                                                                          new TopicPartition(\"topic\", 1), memoryRecords)).build();\n        assertTrue(request.isTransactional());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"},{"authorDate":"2017-05-17 00:57:15","commitOrder":1,"curCode":"    public void shouldBeFlaggedAsIdempotentWhenIdempotentRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withIdempotentRecords(1,\n                                                                                CompressionType.NONE,\n                                                                                1L,\n                                                                                (short) 1,\n                                                                                1,\n                                                                                1,\n                                                                                simpleRecord);\n\n        final ProduceRequest request = new ProduceRequest.Builder(RecordBatch.CURRENT_MAGIC_VALUE,\n                                                                  (short) -1,\n                                                                  10,\n                                                                  Collections.singletonMap(\n                                                                          new TopicPartition(\"topic\", 1), memoryRecords)).build();\n        assertTrue(request.isIdempotent());\n\n    }\n","date":"2017-05-17 00:57:15","endLine":84,"groupId":"21498","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeFlaggedAsIdempotentWhenIdempotentRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0e/8f38261e41e91f1bd9332578b1535c65f251d0.src","preCode":"    public void shouldBeFlaggedAsIdempotentWhenIdempotentRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withIdempotentRecords(1,\n                                                                                CompressionType.NONE,\n                                                                                1L,\n                                                                                (short) 1,\n                                                                                1,\n                                                                                1,\n                                                                                simpleRecord);\n\n        final ProduceRequest request = new ProduceRequest.Builder(RecordBatch.CURRENT_MAGIC_VALUE,\n                                                                  (short) -1,\n                                                                  10,\n                                                                  Collections.singletonMap(\n                                                                          new TopicPartition(\"topic\", 1), memoryRecords)).build();\n        assertTrue(request.isIdempotent());\n\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"}],"commitId":"d66e7af6526f208900a5d6cb588cf47058800804","commitMessage":"@@@KAFKA-5129; Add ACL checks for Transactional APIs\n\nAdd ACL checks for Transactional APIs\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Apurva Mehta <apurva@confluent.io>.  Ismael Juma <ismael@juma.me.uk>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2979 from dguy/kafka-5129\n","date":"2017-05-17 00:57:15","modifiedFileCount":"15","status":"B","submitter":"Damian Guy"},{"authorTime":"2017-09-26 07:13:02","codes":[{"authorDate":"2017-09-26 07:13:02","commitOrder":2,"curCode":"    public void shouldBeFlaggedAsTransactionalWhenTransactionalRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withTransactionalRecords(0, CompressionType.NONE, 1L,\n                (short) 1, 1, 1, simpleRecord);\n        final ProduceRequest request = ProduceRequest.Builder.forCurrentMagic((short) -1,\n                10, Collections.singletonMap(new TopicPartition(\"topic\", 1), memoryRecords)).build();\n        assertTrue(request.isTransactional());\n    }\n","date":"2017-09-26 07:13:02","endLine":54,"groupId":"2342","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldBeFlaggedAsTransactionalWhenTransactionalRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ef/17c96c5ad015ea3da02467549fa3ab19416e1a.src","preCode":"    public void shouldBeFlaggedAsTransactionalWhenTransactionalRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withTransactionalRecords(0,\n                                                                                   CompressionType.NONE,\n                                                                                   1L,\n                                                                                   (short) 1,\n                                                                                   1,\n                                                                                   1,\n                                                                                   simpleRecord);\n        final ProduceRequest request = new ProduceRequest.Builder(RecordBatch.CURRENT_MAGIC_VALUE,\n                                                                  (short) -1,\n                                                                  10,\n                                                                  Collections.singletonMap(\n                                                                          new TopicPartition(\"topic\", 1), memoryRecords)).build();\n        assertTrue(request.isTransactional());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2017-09-26 07:13:02","commitOrder":2,"curCode":"    public void shouldBeFlaggedAsIdempotentWhenIdempotentRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withIdempotentRecords(1, CompressionType.NONE, 1L,\n                (short) 1, 1, 1, simpleRecord);\n        final ProduceRequest request = ProduceRequest.Builder.forCurrentMagic((short) -1, 10,\n                Collections.singletonMap(new TopicPartition(\"topic\", 1), memoryRecords)).build();\n        assertTrue(request.isIdempotent());\n    }\n","date":"2017-09-26 07:13:02","endLine":75,"groupId":"2342","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeFlaggedAsIdempotentWhenIdempotentRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ef/17c96c5ad015ea3da02467549fa3ab19416e1a.src","preCode":"    public void shouldBeFlaggedAsIdempotentWhenIdempotentRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withIdempotentRecords(1,\n                                                                                CompressionType.NONE,\n                                                                                1L,\n                                                                                (short) 1,\n                                                                                1,\n                                                                                1,\n                                                                                simpleRecord);\n\n        final ProduceRequest request = new ProduceRequest.Builder(RecordBatch.CURRENT_MAGIC_VALUE,\n                                                                  (short) -1,\n                                                                  10,\n                                                                  Collections.singletonMap(\n                                                                          new TopicPartition(\"topic\", 1), memoryRecords)).build();\n        assertTrue(request.isIdempotent());\n\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"852297efd99af04df28710b1b5c99530ab20a072","commitMessage":"@@@KAFKA-5960; Fix regression in produce version selection on old brokers\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Apurva Mehta <apurva@confluent.io>.  Ismael Juma <ismael@juma.me.uk>\n\nCloses #3944 from hachikuji/KAFKA-5960\n","date":"2017-09-26 07:13:02","modifiedFileCount":"15","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2019-01-23 00:35:14","codes":[{"authorDate":"2019-01-23 00:35:14","commitOrder":3,"curCode":"    public void shouldBeFlaggedAsTransactionalWhenTransactionalRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withTransactionalRecords(0, CompressionType.NONE, 1L,\n                (short) 1, 1, 1, simpleRecord);\n        final ProduceRequest request = ProduceRequest.Builder.forCurrentMagic((short) -1,\n                10, Collections.singletonMap(new TopicPartition(\"topic\", 1), memoryRecords)).build();\n        assertTrue(request.hasTransactionalRecords());\n    }\n","date":"2019-01-23 00:35:14","endLine":56,"groupId":"2342","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldBeFlaggedAsTransactionalWhenTransactionalRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/9d64f1e327b9dd703bdd497e65280c92fc627e.src","preCode":"    public void shouldBeFlaggedAsTransactionalWhenTransactionalRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withTransactionalRecords(0, CompressionType.NONE, 1L,\n                (short) 1, 1, 1, simpleRecord);\n        final ProduceRequest request = ProduceRequest.Builder.forCurrentMagic((short) -1,\n                10, Collections.singletonMap(new TopicPartition(\"topic\", 1), memoryRecords)).build();\n        assertTrue(request.isTransactional());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2019-01-23 00:35:14","commitOrder":3,"curCode":"    public void shouldBeFlaggedAsIdempotentWhenIdempotentRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withIdempotentRecords(1, CompressionType.NONE, 1L,\n                (short) 1, 1, 1, simpleRecord);\n        final ProduceRequest request = ProduceRequest.Builder.forCurrentMagic((short) -1, 10,\n                Collections.singletonMap(new TopicPartition(\"topic\", 1), memoryRecords)).build();\n        assertTrue(request.hasIdempotentRecords());\n    }\n","date":"2019-01-23 00:35:14","endLine":77,"groupId":"2342","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeFlaggedAsIdempotentWhenIdempotentRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/9d64f1e327b9dd703bdd497e65280c92fc627e.src","preCode":"    public void shouldBeFlaggedAsIdempotentWhenIdempotentRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withIdempotentRecords(1, CompressionType.NONE, 1L,\n                (short) 1, 1, 1, simpleRecord);\n        final ProduceRequest request = ProduceRequest.Builder.forCurrentMagic((short) -1, 10,\n                Collections.singletonMap(new TopicPartition(\"topic\", 1), memoryRecords)).build();\n        assertTrue(request.isIdempotent());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"523465b3c17fc2ef67b0de10c78f83aae56606ae","commitMessage":"@@@MINOR: Cleanup handling of mixed transactional/idempotent records (#6172)\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>.  Ismael Juma <ismael@juma.me.uk>.  Colin Patrick McCabe <colin@cmccabe.xyz>","date":"2019-01-23 00:35:14","modifiedFileCount":"3","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2020-11-19 05:44:21","codes":[{"authorDate":"2020-11-19 05:44:21","commitOrder":4,"curCode":"    public void shouldBeFlaggedAsTransactionalWhenTransactionalRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withTransactionalRecords(0, CompressionType.NONE, 1L,\n                (short) 1, 1, 1, simpleRecord);\n\n        final ProduceRequest request = ProduceRequest.forCurrentMagic(new ProduceRequestData()\n                .setTopicData(new ProduceRequestData.TopicProduceDataCollection(Collections.singletonList(\n                    new ProduceRequestData.TopicProduceData()\n                        .setName(\"topic\")\n                        .setPartitionData(Collections.singletonList(\n                            new ProduceRequestData.PartitionProduceData()\n                                .setIndex(1)\n                                .setRecords(memoryRecords)))).iterator()))\n                .setAcks((short) -1)\n                .setTimeoutMs(10)).build();\n        assertTrue(RequestUtils.hasTransactionalRecords(request));\n    }\n","date":"2020-11-19 05:44:21","endLine":63,"groupId":"20046","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldBeFlaggedAsTransactionalWhenTransactionalRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/6af86b537563e23abc7bcd64808fcbb807a1d1.src","preCode":"    public void shouldBeFlaggedAsTransactionalWhenTransactionalRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withTransactionalRecords(0, CompressionType.NONE, 1L,\n                (short) 1, 1, 1, simpleRecord);\n        final ProduceRequest request = ProduceRequest.Builder.forCurrentMagic((short) -1,\n                10, Collections.singletonMap(new TopicPartition(\"topic\", 1), memoryRecords)).build();\n        assertTrue(request.hasTransactionalRecords());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-11-19 05:44:21","commitOrder":4,"curCode":"    public void shouldBeFlaggedAsIdempotentWhenIdempotentRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withIdempotentRecords(1, CompressionType.NONE, 1L,\n                (short) 1, 1, 1, simpleRecord);\n        final ProduceRequest request = ProduceRequest.forCurrentMagic(new ProduceRequestData()\n                .setTopicData(new ProduceRequestData.TopicProduceDataCollection(Collections.singletonList(\n                    new ProduceRequestData.TopicProduceData()\n                        .setName(\"topic\")\n                        .setPartitionData(Collections.singletonList(\n                            new ProduceRequestData.PartitionProduceData()\n                                .setIndex(1)\n                                .setRecords(memoryRecords)))).iterator()))\n                .setAcks((short) -1)\n                .setTimeoutMs(10)).build();\n        assertTrue(RequestUtils.hasIdempotentRecords(request));\n    }\n","date":"2020-11-19 05:44:21","endLine":92,"groupId":"20046","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeFlaggedAsIdempotentWhenIdempotentRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/6af86b537563e23abc7bcd64808fcbb807a1d1.src","preCode":"    public void shouldBeFlaggedAsIdempotentWhenIdempotentRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withIdempotentRecords(1, CompressionType.NONE, 1L,\n                (short) 1, 1, 1, simpleRecord);\n        final ProduceRequest request = ProduceRequest.Builder.forCurrentMagic((short) -1, 10,\n                Collections.singletonMap(new TopicPartition(\"topic\", 1), memoryRecords)).build();\n        assertTrue(request.hasIdempotentRecords());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"30bc21ca35b165f04c472b4ce794893843809ccc","commitMessage":"@@@KAFKA-9628; Replace Produce request/response with automated protocol (#9401)\n\nThis patch rewrites `ProduceRequest` and `ProduceResponse` using the generated protocols. We have also added several new benchmarks to verify no regression in performance. A summary of results is included below:\n\n\n Benchmark\n\n1. loop **30** times\n1. calculate average\n\n\n# kafkatest.benchmarks.core.benchmark_test.Benchmark.test_producer_throughput\n\n> @cluster(num_nodes=5)\n> @parametrize(acks=-1.  topic=TOPIC_REP_THREE)\n\n- +0.3144915325 %\n- 28.08766667 ->  28.1715625 (mb_per_sec)\n\n> @cluster(num_nodes=5)\n> @matrix(acks=[1].  topic=[TOPIC_REP_THREE].  message_size=[100000]. compression_type=[\"none\"].  security_protocol=['PLAINTEXT'])\n\n- +4.220730323 %\n- 157.145 -> 163.7776667 (mb_per_sec)\n\n> @cluster(num_nodes=7)\n> @parametrize(acks=1.  topic=TOPIC_REP_THREE.  num_producers=3)\n\n- +5.996241145%\n- 57.64166667 -> 61.098 (mb_per_sec)\n\n> @cluster(num_nodes=5)\n> @parametrize(acks=1.  topic=TOPIC_REP_THREE)\n\n- +0.3979572536%\n- 44.05833333 -> 44.23366667 (mb_per_sec)\n\n> @cluster(num_nodes=5)\n> @parametrize(acks=1.  topic= TOPIC_REP_ONE)\n\n- +2.228235226%\n- 69.23266667 -> 70.77533333 (mb_per_sec)\n\n\n JMH results\n\nIn short.  most ops performance are regression since we have to convert data to protocol data. The cost is inevitable (like other request/response) before we use protocol data directly.\n\n\n JMH for ProduceRequest\n\n1. construction regression:\n    - 281.474 -> 454.935 ns/op\n    - 296.000 -> 1888.000 B/op\n1. toErrorResponse regression:\n    - 41.942 -> 107.528 ns/op\n    - 1216.000 -> 1616.000 B/op\n1. toStruct improvement:\n    - 255.185 -> 90.728 ns/op\n    - 864.000 -> 304.000 B/op\n\n**BEFORE**\n```\nBenchmark                                                                        Mode  Cnt     Score    Error   Units\nProducerRequestBenchmark.constructorErrorResponse                                avgt   15    41.942 ?  0.036   ns/op\nProducerRequestBenchmark.constructorErrorResponse:?gc.alloc.rate                 avgt   15  6409.263 ?  5.478  MB/sec\nProducerRequestBenchmark.constructorErrorResponse:?gc.alloc.rate.norm            avgt   15   296.000 ?  0.001    B/op\nProducerRequestBenchmark.constructorErrorResponse:?gc.churn.G1_Eden_Space        avgt   15  6416.420 ? 76.071  MB/sec\nProducerRequestBenchmark.constructorErrorResponse:?gc.churn.G1_Eden_Space.norm   avgt   15   296.331 ?  3.539    B/op\nProducerRequestBenchmark.constructorErrorResponse:?gc.churn.G1_Old_Gen           avgt   15     0.002 ?  0.002  MB/sec\nProducerRequestBenchmark.constructorErrorResponse:?gc.churn.G1_Old_Gen.norm      avgt   15    ? 10??             B/op\nProducerRequestBenchmark.constructorErrorResponse:?gc.count                      avgt   15   698.000           counts\nProducerRequestBenchmark.constructorErrorResponse:?gc.time                       avgt   15   378.000               ms\nProducerRequestBenchmark.constructorProduceRequest                               avgt   15   281.474 ?  3.286   ns/op\nProducerRequestBenchmark.constructorProduceRequest:?gc.alloc.rate                avgt   15  3923.868 ? 46.303  MB/sec\nProducerRequestBenchmark.constructorProduceRequest:?gc.alloc.rate.norm           avgt   15  1216.000 ?  0.001    B/op\nProducerRequestBenchmark.constructorProduceRequest:?gc.churn.G1_Eden_Space       avgt   15  3923.375 ? 59.568  MB/sec\nProducerRequestBenchmark.constructorProduceRequest:?gc.churn.G1_Eden_Space.norm  avgt   15  1215.844 ? 11.184    B/op\nProducerRequestBenchmark.constructorProduceRequest:?gc.churn.G1_Old_Gen          avgt   15     0.004 ?  0.001  MB/sec\nProducerRequestBenchmark.constructorProduceRequest:?gc.churn.G1_Old_Gen.norm     avgt   15     0.001 ?  0.001    B/op\nProducerRequestBenchmark.constructorProduceRequest:?gc.count                     avgt   15   515.000           counts\nProducerRequestBenchmark.constructorProduceRequest:?gc.time                      avgt   15   279.000               ms\nProducerRequestBenchmark.constructorStruct                                       avgt   15   255.185 ?  0.069   ns/op\nProducerRequestBenchmark.constructorStruct:?gc.alloc.rate                        avgt   15  3074.889 ?  0.823  MB/sec\nProducerRequestBenchmark.constructorStruct:?gc.alloc.rate.norm                   avgt   15   864.000 ?  0.001    B/op\nProducerRequestBenchmark.constructorStruct:?gc.churn.G1_Eden_Space               avgt   15  3077.737 ? 31.537  MB/sec\nProducerRequestBenchmark.constructorStruct:?gc.churn.G1_Eden_Space.norm          avgt   15   864.800 ?  8.823    B/op\nProducerRequestBenchmark.constructorStruct:?gc.churn.G1_Old_Gen                  avgt   15     0.003 ?  0.001  MB/sec\nProducerRequestBenchmark.constructorStruct:?gc.churn.G1_Old_Gen.norm             avgt   15     0.001 ?  0.001    B/op\nProducerRequestBenchmark.constructorStruct:?gc.count                             avgt   15   404.000           counts\nProducerRequestBenchmark.constructorStruct:?gc.time                              avgt   15   214.000               ms\n```\n\n**AFTER**\n```\nBenchmark                                                                        Mode  Cnt     Score    Error   Units\nProducerRequestBenchmark.constructorErrorResponse                                avgt   15   107.528 ?  0.270   ns/op\nProducerRequestBenchmark.constructorErrorResponse:?gc.alloc.rate                 avgt   15  4864.899 ? 12.132  MB/sec\nProducerRequestBenchmark.constructorErrorResponse:?gc.alloc.rate.norm            avgt   15   576.000 ?  0.001    B/op\nProducerRequestBenchmark.constructorErrorResponse:?gc.churn.G1_Eden_Space        avgt   15  4868.023 ? 61.943  MB/sec\nProducerRequestBenchmark.constructorErrorResponse:?gc.churn.G1_Eden_Space.norm   avgt   15   576.371 ?  7.331    B/op\nProducerRequestBenchmark.constructorErrorResponse:?gc.churn.G1_Old_Gen           avgt   15     0.005 ?  0.001  MB/sec\nProducerRequestBenchmark.constructorErrorResponse:?gc.churn.G1_Old_Gen.norm      avgt   15     0.001 ?  0.001    B/op\nProducerRequestBenchmark.constructorErrorResponse:?gc.count                      avgt   15   639.000           counts\nProducerRequestBenchmark.constructorErrorResponse:?gc.time                       avgt   15   339.000               ms\nProducerRequestBenchmark.constructorProduceRequest                               avgt   15   454.935 ?  0.332   ns/op\nProducerRequestBenchmark.constructorProduceRequest:?gc.alloc.rate                avgt   15  3769.014 ?  2.767  MB/sec\nProducerRequestBenchmark.constructorProduceRequest:?gc.alloc.rate.norm           avgt   15  1888.000 ?  0.001    B/op\nProducerRequestBenchmark.constructorProduceRequest:?gc.churn.G1_Eden_Space       avgt   15  3763.407 ? 31.530  MB/sec\nProducerRequestBenchmark.constructorProduceRequest:?gc.churn.G1_Eden_Space.norm  avgt   15  1885.190 ? 15.594    B/op\nProducerRequestBenchmark.constructorProduceRequest:?gc.churn.G1_Old_Gen          avgt   15     0.004 ?  0.001  MB/sec\nProducerRequestBenchmark.constructorProduceRequest:?gc.churn.G1_Old_Gen.norm     avgt   15     0.002 ?  0.001    B/op\nProducerRequestBenchmark.constructorProduceRequest:?gc.count                     avgt   15   494.000           counts\nProducerRequestBenchmark.constructorProduceRequest:?gc.time                      avgt   15   264.000               ms\nProducerRequestBenchmark.constructorStruct                                       avgt   15    90.728 ?  0.695   ns/op\nProducerRequestBenchmark.constructorStruct:?gc.alloc.rate                        avgt   15  3043.140 ? 23.246  MB/sec\nProducerRequestBenchmark.constructorStruct:?gc.alloc.rate.norm                   avgt   15   304.000 ?  0.001    B/op\nProducerRequestBenchmark.constructorStruct:?gc.churn.G1_Eden_Space               avgt   15  3047.251 ? 59.638  MB/sec\nProducerRequestBenchmark.constructorStruct:?gc.churn.G1_Eden_Space.norm          avgt   15   304.404 ?  5.034    B/op\nProducerRequestBenchmark.constructorStruct:?gc.churn.G1_Old_Gen                  avgt   15     0.003 ?  0.001  MB/sec\nProducerRequestBenchmark.constructorStruct:?gc.churn.G1_Old_Gen.norm             avgt   15    ? 10??             B/op\nProducerRequestBenchmark.constructorStruct:?gc.count                             avgt   15   400.000           counts\nProducerRequestBenchmark.constructorStruct:?gc.time                              avgt   15   205.000               ms\n```\n\n JMH for ProduceResponse\n\n1. construction regression:\n    - 3.293 -> 303.226 ns/op\n    - 24.000 -> 1848.000 B/op\n1. toStruct improvement:\n    - 825.889 -> 311.725 ns/op\n    - 2208.000 -> 896.000 B/op\n\n**BEFORE**\n\n```\nBenchmark                                                                          Mode  Cnt     Score    Error   Units\nProducerResponseBenchmark.constructorProduceResponse                               avgt   15     3.293 ?  0.004   ns/op\nProducerResponseBenchmark.constructorProduceResponse:?gc.alloc.rate                avgt   15  6619.731 ?  9.075  MB/sec\nProducerResponseBenchmark.constructorProduceResponse:?gc.alloc.rate.norm           avgt   15    24.000 ?  0.001    B/op\nProducerResponseBenchmark.constructorProduceResponse:?gc.churn.G1_Eden_Space       avgt   15  6618.648 ?  0.153  MB/sec\nProducerResponseBenchmark.constructorProduceResponse:?gc.churn.G1_Eden_Space.norm  avgt   15    23.996 ?  0.033    B/op\nProducerResponseBenchmark.constructorProduceResponse:?gc.churn.G1_Old_Gen          avgt   15     0.003 ?  0.002  MB/sec\nProducerResponseBenchmark.constructorProduceResponse:?gc.churn.G1_Old_Gen.norm     avgt   15    ? 10??             B/op\nProducerResponseBenchmark.constructorProduceResponse:?gc.count                     avgt   15   720.000           counts\nProducerResponseBenchmark.constructorProduceResponse:?gc.time                      avgt   15   383.000               ms\nProducerResponseBenchmark.constructorStruct                                        avgt   15   825.889 ?  0.638   ns/op\nProducerResponseBenchmark.constructorStruct:?gc.alloc.rate                         avgt   15  2428.000 ?  1.899  MB/sec\nProducerResponseBenchmark.constructorStruct:?gc.alloc.rate.norm                    avgt   15  2208.000 ?  0.001    B/op\nProducerResponseBenchmark.constructorStruct:?gc.churn.G1_Eden_Space                avgt   15  2430.196 ? 55.894  MB/sec\nProducerResponseBenchmark.constructorStruct:?gc.churn.G1_Eden_Space.norm           avgt   15  2210.001 ? 51.009    B/op\nProducerResponseBenchmark.constructorStruct:?gc.churn.G1_Old_Gen                   avgt   15     0.003 ?  0.001  MB/sec\nProducerResponseBenchmark.constructorStruct:?gc.churn.G1_Old_Gen.norm              avgt   15     0.002 ?  0.001    B/op\nProducerResponseBenchmark.constructorStruct:?gc.count                              avgt   15   319.000           counts\nProducerResponseBenchmark.constructorStruct:?gc.time                               avgt   15   166.000               ms\n```\n\n**AFTER**\n\n```\nBenchmark                                                                          Mode  Cnt     Score    Error   Units\nProducerResponseBenchmark.constructorProduceResponse                               avgt   15   303.226 ?  0.517   ns/op\nProducerResponseBenchmark.constructorProduceResponse:?gc.alloc.rate                avgt   15  5534.940 ?  9.439  MB/sec\nProducerResponseBenchmark.constructorProduceResponse:?gc.alloc.rate.norm           avgt   15  1848.000 ?  0.001    B/op\nProducerResponseBenchmark.constructorProduceResponse:?gc.churn.G1_Eden_Space       avgt   15  5534.046 ? 51.849  MB/sec\nProducerResponseBenchmark.constructorProduceResponse:?gc.churn.G1_Eden_Space.norm  avgt   15  1847.710 ? 18.105    B/op\nProducerResponseBenchmark.constructorProduceResponse:?gc.churn.G1_Old_Gen          avgt   15     0.007 ?  0.001  MB/sec\nProducerResponseBenchmark.constructorProduceResponse:?gc.churn.G1_Old_Gen.norm     avgt   15     0.002 ?  0.001    B/op\nProducerResponseBenchmark.constructorProduceResponse:?gc.count                     avgt   15   602.000           counts\nProducerResponseBenchmark.constructorProduceResponse:?gc.time                      avgt   15   318.000               ms\nProducerResponseBenchmark.constructorStruct                                        avgt   15   311.725 ?  3.132   ns/op\nProducerResponseBenchmark.constructorStruct:?gc.alloc.rate                         avgt   15  2610.602 ? 25.964  MB/sec\nProducerResponseBenchmark.constructorStruct:?gc.alloc.rate.norm                    avgt   15   896.000 ?  0.001    B/op\nProducerResponseBenchmark.constructorStruct:?gc.churn.G1_Eden_Space                avgt   15  2613.021 ? 42.965  MB/sec\nProducerResponseBenchmark.constructorStruct:?gc.churn.G1_Eden_Space.norm           avgt   15   896.824 ? 11.331    B/op\nProducerResponseBenchmark.constructorStruct:?gc.churn.G1_Old_Gen                   avgt   15     0.003 ?  0.001  MB/sec\nProducerResponseBenchmark.constructorStruct:?gc.churn.G1_Old_Gen.norm              avgt   15     0.001 ?  0.001    B/op\nProducerResponseBenchmark.constructorStruct:?gc.count                              avgt   15   343.000           counts\nProducerResponseBenchmark.constructorStruct:?gc.time                               avgt   15   194.000               ms\n```\n\nReviewers: David Jacot <djacot@confluent.io>.  Jason Gustafson <jason@confluent.io>\n","date":"2020-11-19 05:44:21","modifiedFileCount":"15","status":"M","submitter":"Chia-Ping Tsai"},{"authorTime":"2021-01-16 00:53:14","codes":[{"authorDate":"2020-11-19 05:44:21","commitOrder":5,"curCode":"    public void shouldBeFlaggedAsTransactionalWhenTransactionalRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withTransactionalRecords(0, CompressionType.NONE, 1L,\n                (short) 1, 1, 1, simpleRecord);\n\n        final ProduceRequest request = ProduceRequest.forCurrentMagic(new ProduceRequestData()\n                .setTopicData(new ProduceRequestData.TopicProduceDataCollection(Collections.singletonList(\n                    new ProduceRequestData.TopicProduceData()\n                        .setName(\"topic\")\n                        .setPartitionData(Collections.singletonList(\n                            new ProduceRequestData.PartitionProduceData()\n                                .setIndex(1)\n                                .setRecords(memoryRecords)))).iterator()))\n                .setAcks((short) -1)\n                .setTimeoutMs(10)).build();\n        assertTrue(RequestUtils.hasTransactionalRecords(request));\n    }\n","date":"2020-11-19 05:44:21","endLine":63,"groupId":"103139","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldBeFlaggedAsTransactionalWhenTransactionalRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/6af86b537563e23abc7bcd64808fcbb807a1d1.src","preCode":"    public void shouldBeFlaggedAsTransactionalWhenTransactionalRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withTransactionalRecords(0, CompressionType.NONE, 1L,\n                (short) 1, 1, 1, simpleRecord);\n\n        final ProduceRequest request = ProduceRequest.forCurrentMagic(new ProduceRequestData()\n                .setTopicData(new ProduceRequestData.TopicProduceDataCollection(Collections.singletonList(\n                    new ProduceRequestData.TopicProduceData()\n                        .setName(\"topic\")\n                        .setPartitionData(Collections.singletonList(\n                            new ProduceRequestData.PartitionProduceData()\n                                .setIndex(1)\n                                .setRecords(memoryRecords)))).iterator()))\n                .setAcks((short) -1)\n                .setTimeoutMs(10)).build();\n        assertTrue(RequestUtils.hasTransactionalRecords(request));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2021-01-16 00:53:14","commitOrder":5,"curCode":"    public void shouldBeFlaggedAsIdempotentWhenIdempotentRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withIdempotentRecords(1, CompressionType.NONE, 1L,\n                (short) 1, 1, 1, simpleRecord);\n        final ProduceRequest request = ProduceRequest.forCurrentMagic(new ProduceRequestData()\n                .setTopicData(new ProduceRequestData.TopicProduceDataCollection(Collections.singletonList(\n                    new ProduceRequestData.TopicProduceData()\n                        .setName(\"topic\")\n                        .setPartitionData(Collections.singletonList(\n                            new ProduceRequestData.PartitionProduceData()\n                                .setIndex(1)\n                                .setRecords(memoryRecords)))).iterator()))\n                .setAcks((short) -1)\n                .setTimeoutMs(10)).build();\n        assertTrue(RequestTestUtils.hasIdempotentRecords(request));\n    }\n","date":"2021-01-16 00:53:14","endLine":92,"groupId":"103139","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeFlaggedAsIdempotentWhenIdempotentRecords","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a2/367e4904285ddd196ab9d8ffaddc4d3c3ccfd6.src","preCode":"    public void shouldBeFlaggedAsIdempotentWhenIdempotentRecords() throws Exception {\n        final MemoryRecords memoryRecords = MemoryRecords.withIdempotentRecords(1, CompressionType.NONE, 1L,\n                (short) 1, 1, 1, simpleRecord);\n        final ProduceRequest request = ProduceRequest.forCurrentMagic(new ProduceRequestData()\n                .setTopicData(new ProduceRequestData.TopicProduceDataCollection(Collections.singletonList(\n                    new ProduceRequestData.TopicProduceData()\n                        .setName(\"topic\")\n                        .setPartitionData(Collections.singletonList(\n                            new ProduceRequestData.PartitionProduceData()\n                                .setIndex(1)\n                                .setRecords(memoryRecords)))).iterator()))\n                .setAcks((short) -1)\n                .setTimeoutMs(10)).build();\n        assertTrue(RequestUtils.hasIdempotentRecords(request));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/ProduceRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"9361a43cfa07ab8589336ddf831070284099be62","commitMessage":"@@@MINOR: remove unused flag 'hasIdempotentRecords' (#9884)\n\nReviewers: Ismael Juma <ismael@juma.me.uk>","date":"2021-01-16 00:53:14","modifiedFileCount":"4","status":"M","submitter":"Chia-Ping Tsai"}]
