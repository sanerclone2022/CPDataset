[{"authorTime":"2019-03-09 01:30:00","codes":[{"authorDate":"2019-03-09 01:30:00","commitOrder":3,"curCode":"    private WindowStore<String, Long> windowStoreMock() {\n        final WindowStore<String, Long> windowStore = mock(WindowStore.class);\n\n        initStateStoreMock(windowStore);\n\n        expect(windowStore.fetchAll(anyLong(), anyLong())).andReturn(iters.get(0));\n        expect(windowStore.fetch(anyString(), anyString(), anyLong(), anyLong())).andReturn(iters.get(1));\n        expect(windowStore.fetch(anyString(), anyLong(), anyLong())).andReturn(windowStoreIter);\n        expect(windowStore.fetch(anyString(), anyLong())).andReturn(VALUE);\n        expect(windowStore.all()).andReturn(iters.get(2));\n\n        windowStore.put(anyString(), anyLong());\n        expectLastCall().andAnswer(() -> {\n            putExecuted = true;\n            return null;\n        });\n\n        replay(windowStore);\n\n        return windowStore;\n    }\n","date":"2019-03-09 01:30:00","endLine":356,"groupId":"20133","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"windowStoreMock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9b/36ec7c8e8d423b50a20ed6d187e33df2066f63.src","preCode":"    private WindowStore<String, Long> windowStoreMock() {\n        final WindowStore<String, Long> windowStore = mock(WindowStore.class);\n\n        initStateStoreMock(windowStore);\n\n        expect(windowStore.fetchAll(anyLong(), anyLong())).andReturn(iters.get(0));\n        expect(windowStore.fetch(anyString(), anyString(), anyLong(), anyLong())).andReturn(iters.get(1));\n        expect(windowStore.fetch(anyString(), anyLong(), anyLong())).andReturn(windowStoreIter);\n        expect(windowStore.fetch(anyString(), anyLong())).andReturn(VALUE);\n        expect(windowStore.all()).andReturn(iters.get(2));\n\n        windowStore.put(anyString(), anyLong());\n        expectLastCall().andAnswer(() -> {\n            putExecuted = true;\n            return null;\n        });\n\n        replay(windowStore);\n\n        return windowStore;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorContextImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"MB"},{"authorDate":"2019-03-09 01:30:00","commitOrder":3,"curCode":"    private TimestampedWindowStore<String, Long> timestampedWindowStoreMock() {\n        final TimestampedWindowStore<String, Long> windowStore = mock(TimestampedWindowStore.class);\n\n        initStateStoreMock(windowStore);\n\n        expect(windowStore.fetchAll(anyLong(), anyLong())).andReturn(timestampedIters.get(0));\n        expect(windowStore.fetch(anyString(), anyString(), anyLong(), anyLong())).andReturn(timestampedIters.get(1));\n        expect(windowStore.fetch(anyString(), anyLong(), anyLong())).andReturn(windowStoreIter);\n        expect(windowStore.fetch(anyString(), anyLong())).andReturn(VALUE_AND_TIMESTAMP);\n        expect(windowStore.all()).andReturn(timestampedIters.get(2));\n\n        windowStore.put(anyString(), anyObject(ValueAndTimestamp.class));\n        expectLastCall().andAnswer(() -> {\n            putExecuted = true;\n            return null;\n        });\n\n        windowStore.put(anyString(), anyObject(ValueAndTimestamp.class), anyLong());\n        expectLastCall().andAnswer(() -> {\n            putWithTimestampExecuted = true;\n            return null;\n        });\n\n        replay(windowStore);\n\n        return windowStore;\n    }\n","date":"2019-03-09 01:30:00","endLine":385,"groupId":"20133","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"timestampedWindowStoreMock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9b/36ec7c8e8d423b50a20ed6d187e33df2066f63.src","preCode":"    private TimestampedWindowStore<String, Long> timestampedWindowStoreMock() {\n        final TimestampedWindowStore<String, Long> windowStore = mock(TimestampedWindowStore.class);\n\n        initStateStoreMock(windowStore);\n\n        expect(windowStore.fetchAll(anyLong(), anyLong())).andReturn(timestampedIters.get(0));\n        expect(windowStore.fetch(anyString(), anyString(), anyLong(), anyLong())).andReturn(timestampedIters.get(1));\n        expect(windowStore.fetch(anyString(), anyLong(), anyLong())).andReturn(windowStoreIter);\n        expect(windowStore.fetch(anyString(), anyLong())).andReturn(VALUE_AND_TIMESTAMP);\n        expect(windowStore.all()).andReturn(timestampedIters.get(2));\n\n        windowStore.put(anyString(), anyObject(ValueAndTimestamp.class));\n        expectLastCall().andAnswer(() -> {\n            putExecuted = true;\n            return null;\n        });\n\n        windowStore.put(anyString(), anyObject(ValueAndTimestamp.class), anyLong());\n        expectLastCall().andAnswer(() -> {\n            putWithTimestampExecuted = true;\n            return null;\n        });\n\n        replay(windowStore);\n\n        return windowStore;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorContextImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"B"}],"commitId":"04e206154ac614b7d4d34a7a1b6ba2c882f607b9","commitMessage":"@@@KAFKA-3522: Add TimestampedWindowStore builder/runtime classes (#6173)\n\nAdd TimestampedWindowStore builder/runtime classes\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Matthias J. Sax <mjsax@apache.org>.   John Roesler <john@confluent.io>.   Bill Bejeck <bbejeck@gmail.com>","date":"2019-03-09 01:30:00","modifiedFileCount":"8","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-04-10 02:49:37","codes":[{"authorDate":"2021-04-10 02:49:37","commitOrder":4,"curCode":"    private WindowStore<String, Long> windowStoreMock() {\n        final WindowStore<String, Long> windowStore = mock(WindowStore.class);\n\n        initStateStoreMock(windowStore);\n\n        expect(windowStore.fetchAll(anyLong(), anyLong())).andReturn(iters.get(0));\n        expect(windowStore.fetch(anyString(), anyString(), anyLong(), anyLong())).andReturn(iters.get(1));\n        expect(windowStore.fetch(anyString(), anyLong(), anyLong())).andReturn(windowStoreIter);\n        expect(windowStore.fetch(anyString(), anyLong())).andReturn(VALUE);\n        expect(windowStore.all()).andReturn(iters.get(2));\n\n        windowStore.put(anyString(), anyLong(), anyLong());\n        expectLastCall().andAnswer(() -> {\n            putExecuted = true;\n            return null;\n        });\n\n        replay(windowStore);\n\n        return windowStore;\n    }\n","date":"2021-04-10 02:49:37","endLine":649,"groupId":"102525","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"windowStoreMock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/56/94c520a9dcd18e4507994b18de45e92d6cb03e.src","preCode":"    private WindowStore<String, Long> windowStoreMock() {\n        final WindowStore<String, Long> windowStore = mock(WindowStore.class);\n\n        initStateStoreMock(windowStore);\n\n        expect(windowStore.fetchAll(anyLong(), anyLong())).andReturn(iters.get(0));\n        expect(windowStore.fetch(anyString(), anyString(), anyLong(), anyLong())).andReturn(iters.get(1));\n        expect(windowStore.fetch(anyString(), anyLong(), anyLong())).andReturn(windowStoreIter);\n        expect(windowStore.fetch(anyString(), anyLong())).andReturn(VALUE);\n        expect(windowStore.all()).andReturn(iters.get(2));\n\n        windowStore.put(anyString(), anyLong());\n        expectLastCall().andAnswer(() -> {\n            putExecuted = true;\n            return null;\n        });\n\n        replay(windowStore);\n\n        return windowStore;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorContextImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"M"},{"authorDate":"2021-04-10 02:49:37","commitOrder":4,"curCode":"    private TimestampedWindowStore<String, Long> timestampedWindowStoreMock() {\n        final TimestampedWindowStore<String, Long> windowStore = mock(TimestampedWindowStore.class);\n\n        initStateStoreMock(windowStore);\n\n        expect(windowStore.fetchAll(anyLong(), anyLong())).andReturn(timestampedIters.get(0));\n        expect(windowStore.fetch(anyString(), anyString(), anyLong(), anyLong())).andReturn(timestampedIters.get(1));\n        expect(windowStore.fetch(anyString(), anyLong(), anyLong())).andReturn(windowStoreIter);\n        expect(windowStore.fetch(anyString(), anyLong())).andReturn(VALUE_AND_TIMESTAMP);\n        expect(windowStore.all()).andReturn(timestampedIters.get(2));\n\n        windowStore.put(anyString(), anyObject(ValueAndTimestamp.class), anyLong());\n        expectLastCall().andAnswer(() -> {\n            putExecuted = true;\n            return null;\n        });\n\n        windowStore.put(anyString(), anyObject(ValueAndTimestamp.class), anyLong());\n        expectLastCall().andAnswer(() -> {\n            putWithTimestampExecuted = true;\n            return null;\n        });\n\n        replay(windowStore);\n\n        return windowStore;\n    }\n","date":"2021-04-10 02:49:37","endLine":678,"groupId":"102525","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"timestampedWindowStoreMock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/56/94c520a9dcd18e4507994b18de45e92d6cb03e.src","preCode":"    private TimestampedWindowStore<String, Long> timestampedWindowStoreMock() {\n        final TimestampedWindowStore<String, Long> windowStore = mock(TimestampedWindowStore.class);\n\n        initStateStoreMock(windowStore);\n\n        expect(windowStore.fetchAll(anyLong(), anyLong())).andReturn(timestampedIters.get(0));\n        expect(windowStore.fetch(anyString(), anyString(), anyLong(), anyLong())).andReturn(timestampedIters.get(1));\n        expect(windowStore.fetch(anyString(), anyLong(), anyLong())).andReturn(windowStoreIter);\n        expect(windowStore.fetch(anyString(), anyLong())).andReturn(VALUE_AND_TIMESTAMP);\n        expect(windowStore.all()).andReturn(timestampedIters.get(2));\n\n        windowStore.put(anyString(), anyObject(ValueAndTimestamp.class));\n        expectLastCall().andAnswer(() -> {\n            putExecuted = true;\n            return null;\n        });\n\n        windowStore.put(anyString(), anyObject(ValueAndTimestamp.class), anyLong());\n        expectLastCall().andAnswer(() -> {\n            putWithTimestampExecuted = true;\n            return null;\n        });\n\n        replay(windowStore);\n\n        return windowStore;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorContextImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":652,"status":"M"}],"commitId":"db0323e9ba3f767614415d833a2081a33825a284","commitMessage":"@@@KAFKA-12449: Remove deprecated WindowStore#put (#10293)\n\nRemoves `WindowStore#put(K. V)` that was deprecated via KIP-474.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-04-10 02:49:37","modifiedFileCount":"21","status":"M","submitter":"Jorge Esteban Quilcate Otoya"}]
