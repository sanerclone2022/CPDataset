[{"authorTime":"2020-03-24 06:58:14","codes":[{"authorDate":"2020-03-24 06:58:14","commitOrder":2,"curCode":"    public void shouldReturnUnknownOffsetSumForLagOfTaskWithUnknownOffset() {\n        final Map<TaskId, Long> taskOffsetSums = Collections.singletonMap(taskId01, UNKNOWN_OFFSET_SUM);\n        final Map<TaskId, Long> allTaskEndOffsetSums = Collections.singletonMap(taskId01, 500L);\n        client.addPreviousTasksAndOffsetSums(taskOffsetSums);\n        client.computeTaskLags(null, allTaskEndOffsetSums);\n        assertThat(client.lagFor(taskId01), equalTo(UNKNOWN_OFFSET_SUM));\n    }\n","date":"2020-03-24 06:58:14","endLine":233,"groupId":"773","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReturnUnknownOffsetSumForLagOfTaskWithUnknownOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/51/b28db9e1fc5a0c1e60f453826ee2ec8521e090.src","preCode":"    public void shouldReturnUnknownOffsetSumForLagOfTaskWithUnknownOffset() {\n        final Map<TaskId, Long> taskOffsetSums = Collections.singletonMap(taskId01, UNKNOWN_OFFSET_SUM);\n        final Map<TaskId, Long> allTaskEndOffsetSums = Collections.singletonMap(taskId01, 500L);\n        client.addPreviousTasksAndOffsetSums(taskOffsetSums);\n        client.computeTaskLags(null, allTaskEndOffsetSums);\n        assertThat(client.lagFor(taskId01), equalTo(UNKNOWN_OFFSET_SUM));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/ClientStateTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"MB"},{"authorDate":"2020-03-24 06:58:14","commitOrder":2,"curCode":"    public void shouldReturnEndOffsetSumIfOffsetSumIsGreaterThanEndOffsetSum() {\n        final Map<TaskId, Long> taskOffsetSums = Collections.singletonMap(taskId01, 5L);\n        final Map<TaskId, Long> allTaskEndOffsetSums = Collections.singletonMap(taskId01, 1L);\n        client.addPreviousTasksAndOffsetSums(taskOffsetSums);\n        client.computeTaskLags(null, allTaskEndOffsetSums);\n        assertThat(client.lagFor(taskId01), equalTo(1L));\n    }\n","date":"2020-03-24 06:58:14","endLine":242,"groupId":"773","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnEndOffsetSumIfOffsetSumIsGreaterThanEndOffsetSum","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/51/b28db9e1fc5a0c1e60f453826ee2ec8521e090.src","preCode":"    public void shouldReturnEndOffsetSumIfOffsetSumIsGreaterThanEndOffsetSum() {\n        final Map<TaskId, Long> taskOffsetSums = Collections.singletonMap(taskId01, 5L);\n        final Map<TaskId, Long> allTaskEndOffsetSums = Collections.singletonMap(taskId01, 1L);\n        client.addPreviousTasksAndOffsetSums(taskOffsetSums);\n        client.computeTaskLags(null, allTaskEndOffsetSums);\n        assertThat(client.lagFor(taskId01), equalTo(1L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/ClientStateTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"}],"commitId":"f538caf13819c79b37fcdd300d7dacd724180197","commitMessage":"@@@KAFKA-9742: Fix broken StandbyTaskEOSIntegrationTest (#8330)\n\nRelax the requirement that tasks' reported offsetSum is less than the endOffsetSum for those\ntasks. This was surfaced by a test for corrupted tasks.  but it can happen with real corrupted\ntasks. Rather than throw an exception on the leader.  we now de-prioritize the corrupted task.\nIdeally.  that instance will not get assigned the task and the stateDirCleaner will make\nthe problem \"go away\". If it does get assigned the task.  then it will detect the corruption and\ndelete the task directory before recovering the entire changelog. Thus.  the estimate we provide\naccurately reflects the amount of lag such a corrupted task would have to recover (the whole log).\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>.  Chia-Ping Tsai <chia7712@gmail.com>","date":"2020-03-24 06:58:14","modifiedFileCount":"4","status":"M","submitter":"John Roesler"},{"authorTime":"2020-04-04 02:53:51","codes":[{"authorDate":"2020-04-04 02:53:51","commitOrder":3,"curCode":"    public void shouldReturnUnknownOffsetSumForLagOfTaskWithUnknownOffset() {\n        final Map<TaskId, Long> taskOffsetSums = Collections.singletonMap(TASK_0_1, UNKNOWN_OFFSET_SUM);\n        final Map<TaskId, Long> allTaskEndOffsetSums = Collections.singletonMap(TASK_0_1, 500L);\n        client.addPreviousTasksAndOffsetSums(taskOffsetSums);\n        client.computeTaskLags(null, allTaskEndOffsetSums);\n        assertThat(client.lagFor(TASK_0_1), equalTo(UNKNOWN_OFFSET_SUM));\n    }\n","date":"2020-04-04 02:53:51","endLine":234,"groupId":"1153","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReturnUnknownOffsetSumForLagOfTaskWithUnknownOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cb/32155690c9f3d24d0f77489750444e1e253d24.src","preCode":"    public void shouldReturnUnknownOffsetSumForLagOfTaskWithUnknownOffset() {\n        final Map<TaskId, Long> taskOffsetSums = Collections.singletonMap(taskId01, UNKNOWN_OFFSET_SUM);\n        final Map<TaskId, Long> allTaskEndOffsetSums = Collections.singletonMap(taskId01, 500L);\n        client.addPreviousTasksAndOffsetSums(taskOffsetSums);\n        client.computeTaskLags(null, allTaskEndOffsetSums);\n        assertThat(client.lagFor(taskId01), equalTo(UNKNOWN_OFFSET_SUM));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/ClientStateTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"},{"authorDate":"2020-04-04 02:53:51","commitOrder":3,"curCode":"    public void shouldReturnEndOffsetSumIfOffsetSumIsGreaterThanEndOffsetSum() {\n        final Map<TaskId, Long> taskOffsetSums = Collections.singletonMap(TASK_0_1, 5L);\n        final Map<TaskId, Long> allTaskEndOffsetSums = Collections.singletonMap(TASK_0_1, 1L);\n        client.addPreviousTasksAndOffsetSums(taskOffsetSums);\n        client.computeTaskLags(null, allTaskEndOffsetSums);\n        assertThat(client.lagFor(TASK_0_1), equalTo(1L));\n    }\n","date":"2020-04-04 02:53:51","endLine":243,"groupId":"1153","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnEndOffsetSumIfOffsetSumIsGreaterThanEndOffsetSum","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cb/32155690c9f3d24d0f77489750444e1e253d24.src","preCode":"    public void shouldReturnEndOffsetSumIfOffsetSumIsGreaterThanEndOffsetSum() {\n        final Map<TaskId, Long> taskOffsetSums = Collections.singletonMap(taskId01, 5L);\n        final Map<TaskId, Long> allTaskEndOffsetSums = Collections.singletonMap(taskId01, 1L);\n        client.addPreviousTasksAndOffsetSums(taskOffsetSums);\n        client.computeTaskLags(null, allTaskEndOffsetSums);\n        assertThat(client.lagFor(taskId01), equalTo(1L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/ClientStateTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"6e0d553350cef876f4fd2de0e3b8e6e40ce6be44","commitMessage":"@@@MINOR: clean up Streams assignment classes and tests (#8406)\n\nFirst set of cleanup pushed to followup PR after KIP-441 Pt. 5. Main changes are:\n\n1. Moved `RankedClient` and the static `buildClientRankingsByTask` to a new file\n2. Moved `Movement` and the static `getMovements` to a new file (also renamed to `TaskMovement`)\n3. Consolidated the many common variables throughout the assignment tests to the new `AssignmentTestUtils` \n4. New utility to generate comparable/predictable UUIDs for tests.  and removed the generic from `TaskAssignor` and all related classes\n\nReviewers: John Roesler <vvcephei@apache.org>.  Andrew Choi <a24choi@edu.uwaterloo.ca>","date":"2020-04-04 02:53:51","modifiedFileCount":"16","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-06-10 22:56:06","codes":[{"authorDate":"2020-06-10 22:56:06","commitOrder":4,"curCode":"    public void shouldReturnUnknownOffsetSumForLagOfTaskWithUnknownOffset() {\n        final Map<TaskId, Long> taskOffsetSums = Collections.singletonMap(TASK_0_1, UNKNOWN_OFFSET_SUM);\n        final Map<TaskId, Long> allTaskEndOffsetSums = Collections.singletonMap(TASK_0_1, 500L);\n        client.addPreviousTasksAndOffsetSums(\"c1\", taskOffsetSums);\n        client.computeTaskLags(null, allTaskEndOffsetSums);\n        assertThat(client.lagFor(TASK_0_1), equalTo(UNKNOWN_OFFSET_SUM));\n    }\n","date":"2020-06-10 22:56:06","endLine":398,"groupId":"102173","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReturnUnknownOffsetSumForLagOfTaskWithUnknownOffset","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d5/0c00eae261775cf98ce1f81907f8dbee6fc7dd.src","preCode":"    public void shouldReturnUnknownOffsetSumForLagOfTaskWithUnknownOffset() {\n        final Map<TaskId, Long> taskOffsetSums = Collections.singletonMap(TASK_0_1, UNKNOWN_OFFSET_SUM);\n        final Map<TaskId, Long> allTaskEndOffsetSums = Collections.singletonMap(TASK_0_1, 500L);\n        client.addPreviousTasksAndOffsetSums(taskOffsetSums);\n        client.computeTaskLags(null, allTaskEndOffsetSums);\n        assertThat(client.lagFor(TASK_0_1), equalTo(UNKNOWN_OFFSET_SUM));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/ClientStateTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"},{"authorDate":"2020-06-10 22:56:06","commitOrder":4,"curCode":"    public void shouldReturnEndOffsetSumIfOffsetSumIsGreaterThanEndOffsetSum() {\n        final Map<TaskId, Long> taskOffsetSums = Collections.singletonMap(TASK_0_1, 5L);\n        final Map<TaskId, Long> allTaskEndOffsetSums = Collections.singletonMap(TASK_0_1, 1L);\n        client.addPreviousTasksAndOffsetSums(\"c1\", taskOffsetSums);\n        client.computeTaskLags(null, allTaskEndOffsetSums);\n        assertThat(client.lagFor(TASK_0_1), equalTo(1L));\n    }\n","date":"2020-06-10 22:56:06","endLine":407,"groupId":"102173","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnEndOffsetSumIfOffsetSumIsGreaterThanEndOffsetSum","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d5/0c00eae261775cf98ce1f81907f8dbee6fc7dd.src","preCode":"    public void shouldReturnEndOffsetSumIfOffsetSumIsGreaterThanEndOffsetSum() {\n        final Map<TaskId, Long> taskOffsetSums = Collections.singletonMap(TASK_0_1, 5L);\n        final Map<TaskId, Long> allTaskEndOffsetSums = Collections.singletonMap(TASK_0_1, 1L);\n        client.addPreviousTasksAndOffsetSums(taskOffsetSums);\n        client.computeTaskLags(null, allTaskEndOffsetSums);\n        assertThat(client.lagFor(TASK_0_1), equalTo(1L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/ClientStateTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"M"}],"commitId":"0f68dc7a640b26a8edea154ea4ea2b6d93b5104b","commitMessage":"@@@KAFKA-10079: improve thread-level stickiness (#8775)\n\nUses a similar (but slightly different) algorithm as in KAFKA-9987 to produce a maximally sticky -- and perfectly balanced -- assignment of tasks to threads within a single client. This is important for in-memory stores which get wiped out when transferred between threads.\n\nReviewers: John Roesler <vvcephei@apache.org>","date":"2020-06-10 22:56:06","modifiedFileCount":"5","status":"M","submitter":"A. Sophie Blee-Goldman"}]
