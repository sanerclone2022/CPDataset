[{"authorTime":"2017-06-03 01:02:40","codes":[{"authorDate":"2017-01-21 08:15:15","commitOrder":2,"curCode":"    public void schemaNameAndVersionUpdate() {\n        final Map<String, String> props = new HashMap<>();\n        props.put(\"schema.name\", \"foo\");\n        props.put(\"schema.version\", \"42\");\n\n        final SetSchemaMetadata<SinkRecord> xform = new SetSchemaMetadata.Value<>();\n        xform.configure(props);\n\n        final SinkRecord record = new SinkRecord(\"\", 0, null, null, SchemaBuilder.struct().build(), null, 0);\n\n        final SinkRecord updatedRecord = xform.apply(record);\n\n        assertEquals(\"foo\", updatedRecord.valueSchema().name());\n        assertEquals(new Integer(42), updatedRecord.valueSchema().version());\n    }\n","date":"2017-01-21 08:15:15","endLine":65,"groupId":"13433","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"schemaNameAndVersionUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2a/a790f0a2d82da9a7e95135c554015512fb50c8.src","preCode":"    public void schemaNameAndVersionUpdate() {\n        final Map<String, String> props = new HashMap<>();\n        props.put(\"schema.name\", \"foo\");\n        props.put(\"schema.version\", \"42\");\n\n        final SetSchemaMetadata<SinkRecord> xform = new SetSchemaMetadata.Value<>();\n        xform.configure(props);\n\n        final SinkRecord record = new SinkRecord(\"\", 0, null, null, SchemaBuilder.struct().build(), null, 0);\n\n        final SinkRecord updatedRecord = xform.apply(record);\n\n        assertEquals(\"foo\", updatedRecord.valueSchema().name());\n        assertEquals(new Integer(42), updatedRecord.valueSchema().version());\n    }\n","realPath":"connect/transforms/src/test/java/org/apache/kafka/connect/transforms/SetSchemaMetadataTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"NB"},{"authorDate":"2017-06-03 01:02:40","commitOrder":2,"curCode":"    public void schemaNameAndVersionUpdateWithStruct() {\n        final String fieldName1 = \"f1\";\n        final String fieldName2 = \"f2\";\n        final String fieldValue1 = \"value1\";\n        final int fieldValue2 = 1;\n        final Schema schema = SchemaBuilder.struct()\n                                      .name(\"my.orig.SchemaDefn\")\n                                      .field(fieldName1, Schema.STRING_SCHEMA)\n                                      .field(fieldName2, Schema.INT32_SCHEMA)\n                                      .build();\n        final Struct value = new Struct(schema).put(fieldName1, fieldValue1).put(fieldName2, fieldValue2);\n\n        final Map<String, String> props = new HashMap<>();\n        props.put(\"schema.name\", \"foo\");\n        props.put(\"schema.version\", \"42\");\n        final SetSchemaMetadata<SinkRecord> xform = new SetSchemaMetadata.Value<>();\n        xform.configure(props);\n\n        final SinkRecord record = new SinkRecord(\"\", 0, null, null, schema, value, 0);\n\n        final SinkRecord updatedRecord = xform.apply(record);\n\n        assertEquals(\"foo\", updatedRecord.valueSchema().name());\n        assertEquals(new Integer(42), updatedRecord.valueSchema().version());\n\n        \r\n        assertMatchingSchema((Struct) updatedRecord.value(), updatedRecord.valueSchema());\n    }\n","date":"2017-06-03 01:02:40","endLine":98,"groupId":"19194","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"schemaNameAndVersionUpdateWithStruct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/6c51edb852bd6635b6e9d0f83535212948b6d5.src","preCode":"    public void schemaNameAndVersionUpdateWithStruct() {\n        final String fieldName1 = \"f1\";\n        final String fieldName2 = \"f2\";\n        final String fieldValue1 = \"value1\";\n        final int fieldValue2 = 1;\n        final Schema schema = SchemaBuilder.struct()\n                                      .name(\"my.orig.SchemaDefn\")\n                                      .field(fieldName1, Schema.STRING_SCHEMA)\n                                      .field(fieldName2, Schema.INT32_SCHEMA)\n                                      .build();\n        final Struct value = new Struct(schema).put(fieldName1, fieldValue1).put(fieldName2, fieldValue2);\n\n        final Map<String, String> props = new HashMap<>();\n        props.put(\"schema.name\", \"foo\");\n        props.put(\"schema.version\", \"42\");\n        final SetSchemaMetadata<SinkRecord> xform = new SetSchemaMetadata.Value<>();\n        xform.configure(props);\n\n        final SinkRecord record = new SinkRecord(\"\", 0, null, null, schema, value, 0);\n\n        final SinkRecord updatedRecord = xform.apply(record);\n\n        assertEquals(\"foo\", updatedRecord.valueSchema().name());\n        assertEquals(new Integer(42), updatedRecord.valueSchema().version());\n\n        \r\n        assertMatchingSchema((Struct) updatedRecord.value(), updatedRecord.valueSchema());\n    }\n","realPath":"connect/transforms/src/test/java/org/apache/kafka/connect/transforms/SetSchemaMetadataTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"B"}],"commitId":"af85e05b98a41cd5f8ac45a853b2ddd28463c084","commitMessage":"@@@KAFKA-5164: Ensure SetSchemaMetadata updates key or value when Schema changes\n\nWhen the `SetSchemaMetadata` SMT is used to change the name and/or version of the key or value?s schema.  any references to the old schema in the key or value must be changed to reference the new schema. Only keys or values that are `Struct` have such references.  and so currently only these are adjusted.\n\nThis is based on `trunk` since the fix is expected to be targeted to the 0.11.1 release.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3198 from rhauch/kafka-5164\n","date":"2017-06-03 01:02:40","modifiedFileCount":"2","status":"M","submitter":"Randall Hauch"},{"authorTime":"2017-07-20 01:51:28","codes":[{"authorDate":"2017-07-20 01:51:28","commitOrder":3,"curCode":"    public void schemaNameAndVersionUpdate() {\n        final Map<String, String> props = new HashMap<>();\n        props.put(\"schema.name\", \"foo\");\n        props.put(\"schema.version\", \"42\");\n\n        xform.configure(props);\n\n        final SinkRecord record = new SinkRecord(\"\", 0, null, null, SchemaBuilder.struct().build(), null, 0);\n\n        final SinkRecord updatedRecord = xform.apply(record);\n\n        assertEquals(\"foo\", updatedRecord.valueSchema().name());\n        assertEquals(new Integer(42), updatedRecord.valueSchema().version());\n    }\n","date":"2017-07-20 01:51:28","endLine":72,"groupId":"13433","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"schemaNameAndVersionUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/25/7b382b9a07d0485023226fa98661a6207ec675.src","preCode":"    public void schemaNameAndVersionUpdate() {\n        final Map<String, String> props = new HashMap<>();\n        props.put(\"schema.name\", \"foo\");\n        props.put(\"schema.version\", \"42\");\n\n        final SetSchemaMetadata<SinkRecord> xform = new SetSchemaMetadata.Value<>();\n        xform.configure(props);\n\n        final SinkRecord record = new SinkRecord(\"\", 0, null, null, SchemaBuilder.struct().build(), null, 0);\n\n        final SinkRecord updatedRecord = xform.apply(record);\n\n        assertEquals(\"foo\", updatedRecord.valueSchema().name());\n        assertEquals(new Integer(42), updatedRecord.valueSchema().version());\n    }\n","realPath":"connect/transforms/src/test/java/org/apache/kafka/connect/transforms/SetSchemaMetadataTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2017-07-20 01:51:28","commitOrder":3,"curCode":"    public void schemaNameAndVersionUpdateWithStruct() {\n        final String fieldName1 = \"f1\";\n        final String fieldName2 = \"f2\";\n        final String fieldValue1 = \"value1\";\n        final int fieldValue2 = 1;\n        final Schema schema = SchemaBuilder.struct()\n                                      .name(\"my.orig.SchemaDefn\")\n                                      .field(fieldName1, Schema.STRING_SCHEMA)\n                                      .field(fieldName2, Schema.INT32_SCHEMA)\n                                      .build();\n        final Struct value = new Struct(schema).put(fieldName1, fieldValue1).put(fieldName2, fieldValue2);\n\n        final Map<String, String> props = new HashMap<>();\n        props.put(\"schema.name\", \"foo\");\n        props.put(\"schema.version\", \"42\");\n        xform.configure(props);\n\n        final SinkRecord record = new SinkRecord(\"\", 0, null, null, schema, value, 0);\n\n        final SinkRecord updatedRecord = xform.apply(record);\n\n        assertEquals(\"foo\", updatedRecord.valueSchema().name());\n        assertEquals(new Integer(42), updatedRecord.valueSchema().version());\n\n        \r\n        assertMatchingSchema((Struct) updatedRecord.value(), updatedRecord.valueSchema());\n    }\n","date":"2017-07-20 01:51:28","endLine":101,"groupId":"19194","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"schemaNameAndVersionUpdateWithStruct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/25/7b382b9a07d0485023226fa98661a6207ec675.src","preCode":"    public void schemaNameAndVersionUpdateWithStruct() {\n        final String fieldName1 = \"f1\";\n        final String fieldName2 = \"f2\";\n        final String fieldValue1 = \"value1\";\n        final int fieldValue2 = 1;\n        final Schema schema = SchemaBuilder.struct()\n                                      .name(\"my.orig.SchemaDefn\")\n                                      .field(fieldName1, Schema.STRING_SCHEMA)\n                                      .field(fieldName2, Schema.INT32_SCHEMA)\n                                      .build();\n        final Struct value = new Struct(schema).put(fieldName1, fieldValue1).put(fieldName2, fieldValue2);\n\n        final Map<String, String> props = new HashMap<>();\n        props.put(\"schema.name\", \"foo\");\n        props.put(\"schema.version\", \"42\");\n        final SetSchemaMetadata<SinkRecord> xform = new SetSchemaMetadata.Value<>();\n        xform.configure(props);\n\n        final SinkRecord record = new SinkRecord(\"\", 0, null, null, schema, value, 0);\n\n        final SinkRecord updatedRecord = xform.apply(record);\n\n        assertEquals(\"foo\", updatedRecord.valueSchema().name());\n        assertEquals(new Integer(42), updatedRecord.valueSchema().version());\n\n        \r\n        assertMatchingSchema((Struct) updatedRecord.value(), updatedRecord.valueSchema());\n    }\n","realPath":"connect/transforms/src/test/java/org/apache/kafka/connect/transforms/SetSchemaMetadataTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"f87d58b796977fdaefb089d17cb30b2071cd4485","commitMessage":"@@@MINOR: Code Cleanup\n\nClean up includes:\n\n- Switching try-catch-finally blocks to try-with-resources when possible\n- Removing some seemingly unnecessary `SuppressWarnings` annotations\n- Resolving some Java warnings\n- Closing unclosed Closable objects\n- Removing unused code\n\nAuthor: Vahid Hashemian <vahidhashemian@us.ibm.com>\n\nReviewers: Balint Molnar <balintmolnar91@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>.  Matthias J. Sax <matthias@confluent.io>.  Ismael Juma <ismael@juma.me.uk>.  Jason Gustafson <jason@confluent.io>\n\nCloses #3222 from vahidhashemian/minor/code_cleanup_1706\n","date":"2017-07-20 01:51:28","modifiedFileCount":"62","status":"M","submitter":"Vahid Hashemian"},{"authorTime":"2019-12-18 23:39:16","codes":[{"authorDate":"2019-12-18 23:39:16","commitOrder":4,"curCode":"    public void schemaNameAndVersionUpdate() {\n        final Map<String, String> props = new HashMap<>();\n        props.put(\"schema.name\", \"foo\");\n        props.put(\"schema.version\", \"42\");\n\n        xform.configure(props);\n\n        final SinkRecord record = new SinkRecord(\"\", 0, null, null, SchemaBuilder.struct().build(), null, 0);\n\n        final SinkRecord updatedRecord = xform.apply(record);\n\n        assertEquals(\"foo\", updatedRecord.valueSchema().name());\n        assertEquals(Integer.valueOf(42), updatedRecord.valueSchema().version());\n    }\n","date":"2019-12-18 23:39:16","endLine":72,"groupId":"105375","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"schemaNameAndVersionUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3a/05f1f802a17e4793080b3f62a7b0d726f2d396.src","preCode":"    public void schemaNameAndVersionUpdate() {\n        final Map<String, String> props = new HashMap<>();\n        props.put(\"schema.name\", \"foo\");\n        props.put(\"schema.version\", \"42\");\n\n        xform.configure(props);\n\n        final SinkRecord record = new SinkRecord(\"\", 0, null, null, SchemaBuilder.struct().build(), null, 0);\n\n        final SinkRecord updatedRecord = xform.apply(record);\n\n        assertEquals(\"foo\", updatedRecord.valueSchema().name());\n        assertEquals(new Integer(42), updatedRecord.valueSchema().version());\n    }\n","realPath":"connect/transforms/src/test/java/org/apache/kafka/connect/transforms/SetSchemaMetadataTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2019-12-18 23:39:16","commitOrder":4,"curCode":"    public void schemaNameAndVersionUpdateWithStruct() {\n        final String fieldName1 = \"f1\";\n        final String fieldName2 = \"f2\";\n        final String fieldValue1 = \"value1\";\n        final int fieldValue2 = 1;\n        final Schema schema = SchemaBuilder.struct()\n                                      .name(\"my.orig.SchemaDefn\")\n                                      .field(fieldName1, Schema.STRING_SCHEMA)\n                                      .field(fieldName2, Schema.INT32_SCHEMA)\n                                      .build();\n        final Struct value = new Struct(schema).put(fieldName1, fieldValue1).put(fieldName2, fieldValue2);\n\n        final Map<String, String> props = new HashMap<>();\n        props.put(\"schema.name\", \"foo\");\n        props.put(\"schema.version\", \"42\");\n        xform.configure(props);\n\n        final SinkRecord record = new SinkRecord(\"\", 0, null, null, schema, value, 0);\n\n        final SinkRecord updatedRecord = xform.apply(record);\n\n        assertEquals(\"foo\", updatedRecord.valueSchema().name());\n        assertEquals(Integer.valueOf(42), updatedRecord.valueSchema().version());\n\n        \r\n        assertMatchingSchema((Struct) updatedRecord.value(), updatedRecord.valueSchema());\n    }\n","date":"2019-12-18 23:39:16","endLine":101,"groupId":"105375","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"schemaNameAndVersionUpdateWithStruct","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3a/05f1f802a17e4793080b3f62a7b0d726f2d396.src","preCode":"    public void schemaNameAndVersionUpdateWithStruct() {\n        final String fieldName1 = \"f1\";\n        final String fieldName2 = \"f2\";\n        final String fieldValue1 = \"value1\";\n        final int fieldValue2 = 1;\n        final Schema schema = SchemaBuilder.struct()\n                                      .name(\"my.orig.SchemaDefn\")\n                                      .field(fieldName1, Schema.STRING_SCHEMA)\n                                      .field(fieldName2, Schema.INT32_SCHEMA)\n                                      .build();\n        final Struct value = new Struct(schema).put(fieldName1, fieldValue1).put(fieldName2, fieldValue2);\n\n        final Map<String, String> props = new HashMap<>();\n        props.put(\"schema.name\", \"foo\");\n        props.put(\"schema.version\", \"42\");\n        xform.configure(props);\n\n        final SinkRecord record = new SinkRecord(\"\", 0, null, null, schema, value, 0);\n\n        final SinkRecord updatedRecord = xform.apply(record);\n\n        assertEquals(\"foo\", updatedRecord.valueSchema().name());\n        assertEquals(new Integer(42), updatedRecord.valueSchema().version());\n\n        \r\n        assertMatchingSchema((Struct) updatedRecord.value(), updatedRecord.valueSchema());\n    }\n","realPath":"connect/transforms/src/test/java/org/apache/kafka/connect/transforms/SetSchemaMetadataTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"8c64aa080a9c49f84b62817b6d6a804af34d4f48","commitMessage":"@@@MINOR: trivial cleanups\n\n- Reformat header: `CustomDeserializerTest`.  `ReplicaVerificationToolTest`\n- Remove unused constructor: `ConsumerGroupDescription`\n- Remove unused variables in `TimeOrderedKeyValueBufferTest#shouldRestoreV2Format`\n- Remove deprecated `Number` consturctor calls; use `Number#valueOf` instread.\n\nAuthor: Lee Dongjin <dongjin@apache.org>\n\nReviewers: Stanislav Kozlovski <stanislav_kozlovski@outlook.com>.  Manikumar Reddy <manikumar.reddy@gmail.com>\n\nCloses #7202 from dongjinleekr/cleanup/201908\n","date":"2019-12-18 23:39:16","modifiedFileCount":"10","status":"M","submitter":"Lee Dongjin"}]
