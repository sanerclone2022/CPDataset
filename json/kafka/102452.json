[{"authorTime":"2020-02-05 13:06:39","codes":[{"authorDate":"2020-02-05 13:06:39","commitOrder":9,"curCode":"    public void shouldNotRegisterNonLoggedStore() {\n        final ProcessorStateManager stateMgr = new ProcessorStateManager(\n            taskId,\n            emptySet(),\n            Task.TaskType.STANDBY,\n            stateDirectory,\n            emptyMap(),\n            changelogReader,\n            logContext);\n\n        try {\n            stateMgr.registerStore(persistentStore, persistentStore.stateRestoreCallback);\n            assertFalse(changelogReader.isPartitionRegistered(persistentStorePartition));\n        } finally {\n            stateMgr.close();\n        }\n    }\n","date":"2020-02-05 13:06:39","endLine":302,"groupId":"20644","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotRegisterNonLoggedStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/3f166a0fad092d05eefc688977f13cabff80f9.src","preCode":"    public void shouldNotRegisterNonLoggedStore() {\n        final ProcessorStateManager stateMgr = new ProcessorStateManager(\n            taskId,\n            emptySet(),\n            Task.TaskType.STANDBY,\n            stateDirectory,\n            emptyMap(),\n            changelogReader,\n            logContext);\n\n        try {\n            stateMgr.registerStore(persistentStore, persistentStore.stateRestoreCallback);\n            assertFalse(changelogReader.isPartitionRegistered(persistentStorePartition));\n        } finally {\n            stateMgr.close();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"B"},{"authorDate":"2020-02-05 13:06:39","commitOrder":9,"curCode":"    public void shouldNotWriteCheckpointForStoresWithoutChangelogTopic() throws IOException {\n        final ProcessorStateManager stateMgr = new ProcessorStateManager(\n            taskId,\n            emptySet(),\n            Task.TaskType.STANDBY,\n            stateDirectory,\n            emptyMap(),\n            changelogReader,\n            logContext);\n\n        try {\n            stateMgr.registerStore(persistentStore, persistentStore.stateRestoreCallback);\n\n            stateMgr.checkpoint(singletonMap(persistentStorePartition, 987L));\n\n            final Map<TopicPartition, Long> read = checkpoint.read();\n            assertThat(read, equalTo(emptyMap()));\n        } finally {\n            stateMgr.close();\n        }\n    }\n","date":"2020-02-05 13:06:39","endLine":495,"groupId":"20644","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotWriteCheckpointForStoresWithoutChangelogTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/3f166a0fad092d05eefc688977f13cabff80f9.src","preCode":"    public void shouldNotWriteCheckpointForStoresWithoutChangelogTopic() throws IOException {\n        final ProcessorStateManager stateMgr = new ProcessorStateManager(\n            taskId,\n            emptySet(),\n            Task.TaskType.STANDBY,\n            stateDirectory,\n            emptyMap(),\n            changelogReader,\n            logContext);\n\n        try {\n            stateMgr.registerStore(persistentStore, persistentStore.stateRestoreCallback);\n\n            stateMgr.checkpoint(singletonMap(persistentStorePartition, 987L));\n\n            final Map<TopicPartition, Long> read = checkpoint.read();\n            assertThat(read, equalTo(emptyMap()));\n        } finally {\n            stateMgr.close();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":475,"status":"MB"}],"commitId":"4090f9a2b0a95e4da127e4786007542276d97520","commitMessage":"@@@KAFKA-9113: Clean up task management and state management (#7997)\n\nThis PR is collaborated by Guozhang Wang and John Roesler. It is a significant tech debt cleanup on task management and state management.  and is broken down by several sub-tasks listed below:\n\nExtract embedded clients (producer and consumer) into RecordCollector from StreamTask.\nguozhangwang#2\nguozhangwang#5\n\nConsolidate the standby updating and active restoring logic into ChangelogReader and extract out of StreamThread.\nguozhangwang#3\nguozhangwang#4\n\nIntroduce Task state life cycle (created.  restoring.  running.  suspended.  closing).  and refactor the task operations based on the current state.\nguozhangwang#6\nguozhangwang#7\n\nConsolidate AssignedTasks into TaskManager and simplify the logic of changelog management and task management (since they are already moved in step 2) and 3)).\nguozhangwang#8\nguozhangwang#9\n\nAlso simplified the StreamThread logic a bit as the embedded clients / changelog restoration logic has been moved into step 1) and 2).\nguozhangwang#10\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-02-05 13:06:39","modifiedFileCount":"76","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-03-07 07:38:55","codes":[{"authorDate":"2020-03-07 07:38:55","commitOrder":10,"curCode":"    public void shouldNotRegisterNonLoggedStore() {\n        final ProcessorStateManager stateMgr = new ProcessorStateManager(\n            taskId,\n            Task.TaskType.STANDBY,\n            false,\n            logContext,\n            stateDirectory,\n            changelogReader,\n            emptyMap(),\n            emptySet());\n\n        try {\n            stateMgr.registerStore(persistentStore, persistentStore.stateRestoreCallback);\n            assertFalse(changelogReader.isPartitionRegistered(persistentStorePartition));\n        } finally {\n            stateMgr.close();\n        }\n    }\n","date":"2020-03-07 07:38:55","endLine":305,"groupId":"20833","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotRegisterNonLoggedStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/09/78877f338735d26e5079c6bf8d1a04ed236ffe.src","preCode":"    public void shouldNotRegisterNonLoggedStore() {\n        final ProcessorStateManager stateMgr = new ProcessorStateManager(\n            taskId,\n            emptySet(),\n            Task.TaskType.STANDBY,\n            stateDirectory,\n            emptyMap(),\n            changelogReader,\n            logContext);\n\n        try {\n            stateMgr.registerStore(persistentStore, persistentStore.stateRestoreCallback);\n            assertFalse(changelogReader.isPartitionRegistered(persistentStorePartition));\n        } finally {\n            stateMgr.close();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"},{"authorDate":"2020-03-07 07:38:55","commitOrder":10,"curCode":"    public void shouldNotWriteCheckpointForStoresWithoutChangelogTopic() throws IOException {\n        final ProcessorStateManager stateMgr = new ProcessorStateManager(\n            taskId,\n            Task.TaskType.STANDBY,\n            false,\n            logContext,\n            stateDirectory,\n            changelogReader,\n            emptyMap(),\n            emptySet());\n\n        try {\n            stateMgr.registerStore(persistentStore, persistentStore.stateRestoreCallback);\n\n            stateMgr.checkpoint(singletonMap(persistentStorePartition, 987L));\n\n            final Map<TopicPartition, Long> read = checkpoint.read();\n            assertThat(read, equalTo(emptyMap()));\n        } finally {\n            stateMgr.close();\n        }\n    }\n","date":"2020-03-07 07:38:55","endLine":499,"groupId":"20833","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotWriteCheckpointForStoresWithoutChangelogTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/09/78877f338735d26e5079c6bf8d1a04ed236ffe.src","preCode":"    public void shouldNotWriteCheckpointForStoresWithoutChangelogTopic() throws IOException {\n        final ProcessorStateManager stateMgr = new ProcessorStateManager(\n            taskId,\n            emptySet(),\n            Task.TaskType.STANDBY,\n            stateDirectory,\n            emptyMap(),\n            changelogReader,\n            logContext);\n\n        try {\n            stateMgr.registerStore(persistentStore, persistentStore.stateRestoreCallback);\n\n            stateMgr.checkpoint(singletonMap(persistentStorePartition, 987L));\n\n            final Map<TopicPartition, Long> read = checkpoint.read();\n            assertThat(read, equalTo(emptyMap()));\n        } finally {\n            stateMgr.close();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":478,"status":"M"}],"commitId":"d3c067f35d184ca75e8cc59bedd56689cbc8269b","commitMessage":"@@@MINOR: Check store directory empty to decide whether throw task corrupted exception with EOS (#8180)\n\nBefore we register the stores (and hence create the store dirs).  we check if the task dir is empty except the lock / checkpoint files. Then later when loading the checkpoint files if we do not find the offsets AND the store dirs are not empty.  meaning that the stores may be not empty.  we treat it as task corrupted.\n\nReviewers: John Roesler <vvcephei@apache.org>","date":"2020-03-07 07:38:55","modifiedFileCount":"20","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-08-12 11:21:41","codes":[{"authorDate":"2020-03-07 07:38:55","commitOrder":11,"curCode":"    public void shouldNotRegisterNonLoggedStore() {\n        final ProcessorStateManager stateMgr = new ProcessorStateManager(\n            taskId,\n            Task.TaskType.STANDBY,\n            false,\n            logContext,\n            stateDirectory,\n            changelogReader,\n            emptyMap(),\n            emptySet());\n\n        try {\n            stateMgr.registerStore(persistentStore, persistentStore.stateRestoreCallback);\n            assertFalse(changelogReader.isPartitionRegistered(persistentStorePartition));\n        } finally {\n            stateMgr.close();\n        }\n    }\n","date":"2020-03-07 07:38:55","endLine":305,"groupId":"102452","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotRegisterNonLoggedStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/09/78877f338735d26e5079c6bf8d1a04ed236ffe.src","preCode":"    public void shouldNotRegisterNonLoggedStore() {\n        final ProcessorStateManager stateMgr = new ProcessorStateManager(\n            taskId,\n            Task.TaskType.STANDBY,\n            false,\n            logContext,\n            stateDirectory,\n            changelogReader,\n            emptyMap(),\n            emptySet());\n\n        try {\n            stateMgr.registerStore(persistentStore, persistentStore.stateRestoreCallback);\n            assertFalse(changelogReader.isPartitionRegistered(persistentStorePartition));\n        } finally {\n            stateMgr.close();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"N"},{"authorDate":"2020-08-12 11:21:41","commitOrder":11,"curCode":"    public void shouldNotWriteCheckpointForStoresWithoutChangelogTopic() throws IOException {\n        final ProcessorStateManager stateMgr = new ProcessorStateManager(\n            taskId,\n            Task.TaskType.STANDBY,\n            false,\n            logContext,\n            stateDirectory,\n            changelogReader,\n            emptyMap(),\n            emptySet());\n\n        try {\n            stateMgr.registerStore(persistentStore, persistentStore.stateRestoreCallback);\n\n            stateMgr.updateChangelogOffsets(singletonMap(persistentStorePartition, 987L));\n            stateMgr.checkpoint();\n\n            final Map<TopicPartition, Long> read = checkpoint.read();\n            assertThat(read, equalTo(emptyMap()));\n        } finally {\n            stateMgr.close();\n        }\n    }\n","date":"2020-08-12 11:21:41","endLine":671,"groupId":"102452","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotWriteCheckpointForStoresWithoutChangelogTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/8c2b1b4c715bddff74da1cb8941e42704db223.src","preCode":"    public void shouldNotWriteCheckpointForStoresWithoutChangelogTopic() throws IOException {\n        final ProcessorStateManager stateMgr = new ProcessorStateManager(\n            taskId,\n            Task.TaskType.STANDBY,\n            false,\n            logContext,\n            stateDirectory,\n            changelogReader,\n            emptyMap(),\n            emptySet());\n\n        try {\n            stateMgr.registerStore(persistentStore, persistentStore.stateRestoreCallback);\n\n            stateMgr.checkpoint(singletonMap(persistentStorePartition, 987L));\n\n            final Map<TopicPartition, Long> read = checkpoint.read();\n            assertThat(read, equalTo(emptyMap()));\n        } finally {\n            stateMgr.close();\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/ProcessorStateManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":649,"status":"M"}],"commitId":"7915d5e5f826a71c11e1c9183c84702410f7209a","commitMessage":"@@@KAFKA-9450: Decouple flushing state from commiting (#8964)\n\nIn Kafka Streams the source-of-truth of a state store is in its changelog.  therefore when committing a state store we only need to make sure its changelog records are all flushed and committed.  but we do not actually need to make sure that the materialized state have to be flushed and persisted since they can always be restored from changelog when necessary.\n\nOn the other hand.  flushing a state store too frequently may have side effects.  e.g. rocksDB flushing would gets the memtable into an L0 sstable.  leaving many small L0 files to be compacted later.  which introduces larger overhead.\n\nTherefore this PR decouples flushing from committing.  such that we do not always flush the state store upon committing.  but only when sufficient data has been written since last time flushed. The checkpoint file would then also be overwritten only along with flushing the state store indicating its current known snapshot. This is okay since: a) if EOS is not enabled.  then it is fine if the local persisted state is actually ahead of the checkpoint.  b) if EOS is enabled.  then we would never write a checkpoint file until close.\n\nHere's a more detailed change list of this PR:\n\n1. Do not always flush state stores when calling pre-commit; move stateMgr.flush into post-commit to couple together with checkpointing.\n\n2. In post-commit.  we checkpoint when: a) The state store's snapshot has progressed much further compared to the previous checkpoint.  b) When the task is being closed.  in which case we enforce checkpointing.\n\n3. There are some tricky obstacles that I'd have to work around in a bit hacky way: for cache / suppression buffer.  we still need to flush them in pre-commit to make sure all records sent via producers.  while the underlying state store should not be flushed. I've decided to introduce a new API in CachingStateStore to be triggered in pre-commit.\n\nI've also made some minor changes piggy-backed in this PR:\n\n4. Do not delete checkpoint file upon loading it.  and as a result simplify the checkpointNeeded logic.  initializing the snapshotLastFlush to the loaded offsets.\n\n5. In closing.  also follow the commit -> suspend -> close ordering as in revocation / assignment.\n\n6. If enforceCheckpoint == true during RUNNING.  still calls maybeCheckpoint even with EOS since that is the case for suspending / closing.\n\nReviewers: John Roesler <john@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-08-12 11:21:41","modifiedFileCount":"24","status":"M","submitter":"Guozhang Wang"}]
