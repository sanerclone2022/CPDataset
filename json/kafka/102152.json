[{"authorTime":"2019-11-02 01:03:55","codes":[{"authorDate":"2019-11-02 01:03:55","commitOrder":1,"curCode":"    public void shouldEncodeAndDecodeVersion2() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            processId,\n            activeTasks,\n            standbyTasks,\n            \"localhost:80\"\n        );\n        final SubscriptionInfo decoded = SubscriptionInfo.decode(info.encode());\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(processId, decoded.processId());\n        assertEquals(activeTasks, decoded.prevTasks());\n        assertEquals(standbyTasks, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","date":"2019-11-02 01:03:55","endLine":160,"groupId":"18945","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldEncodeAndDecodeVersion2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/976a596b9ae1e63c149e4cf180a5875d4b3a00.src","preCode":"    public void shouldEncodeAndDecodeVersion2() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            processId,\n            activeTasks,\n            standbyTasks,\n            \"localhost:80\"\n        );\n        final SubscriptionInfo decoded = SubscriptionInfo.decode(info.encode());\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(processId, decoded.processId());\n        assertEquals(activeTasks, decoded.prevTasks());\n        assertEquals(standbyTasks, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"},{"authorDate":"2019-11-02 01:03:55","commitOrder":1,"curCode":"    public void generatedVersion2ShouldBeDecodableByLegacyLogic() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            processId,\n            activeTasks,\n            standbyTasks,\n            \"localhost:80\"\n        );\n        final ByteBuffer buffer = info.encode();\n\n        final LegacySubscriptionInfoSerde decoded = LegacySubscriptionInfoSerde.decode(buffer);\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(processId, decoded.processId());\n        assertEquals(activeTasks, decoded.prevTasks());\n        assertEquals(standbyTasks, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","date":"2019-11-02 01:03:55","endLine":181,"groupId":"18945","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"generatedVersion2ShouldBeDecodableByLegacyLogic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/976a596b9ae1e63c149e4cf180a5875d4b3a00.src","preCode":"    public void generatedVersion2ShouldBeDecodableByLegacyLogic() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            processId,\n            activeTasks,\n            standbyTasks,\n            \"localhost:80\"\n        );\n        final ByteBuffer buffer = info.encode();\n\n        final LegacySubscriptionInfoSerde decoded = LegacySubscriptionInfoSerde.decode(buffer);\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(processId, decoded.processId());\n        assertEquals(activeTasks, decoded.prevTasks());\n        assertEquals(standbyTasks, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"B"}],"commitId":"4a5155c934b9d2045e1f7af09a0298bc4b413027","commitMessage":"@@@KAFKA-8868: Generate SubscriptionInfo protocol message (#7248)\n\nRather than maintain hand coded protocol serialization code.  Streams could use the same code-generation framework as Clients/Core.\n\nThere isn't a perfect match.  since the code generation framework includes an assumption that you're generating \"protocol messages\".  rather than just arbitrary blobs.  but I think it's close enough to justify using it.  and improving it over time.\n\nUsing the code generation allows us to drop a lot of detail-oriented.  brittle.  and hard-to-maintain serialization logic in favor of a schema spec.\n\nReviewers: Colin P. McCabe <cmccabe@apache.org>.  Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-11-02 01:03:55","modifiedFileCount":"7","status":"B","submitter":"John Roesler"},{"authorTime":"2020-03-06 23:19:04","codes":[{"authorDate":"2020-03-06 23:19:04","commitOrder":2,"curCode":"    public void shouldEncodeAndDecodeVersion2() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            processId,\n            \"localhost:80\",\n            TASK_OFFSET_SUMS\n        );\n        final SubscriptionInfo decoded = SubscriptionInfo.decode(info.encode());\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(processId, decoded.processId());\n        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","date":"2020-03-06 23:19:04","endLine":154,"groupId":"18945","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldEncodeAndDecodeVersion2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cf/79a5f301e451b130878d11fcfb0f6cdb606775.src","preCode":"    public void shouldEncodeAndDecodeVersion2() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            processId,\n            activeTasks,\n            standbyTasks,\n            \"localhost:80\"\n        );\n        final SubscriptionInfo decoded = SubscriptionInfo.decode(info.encode());\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(processId, decoded.processId());\n        assertEquals(activeTasks, decoded.prevTasks());\n        assertEquals(standbyTasks, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2020-03-06 23:19:04","commitOrder":2,"curCode":"    public void generatedVersion2ShouldBeDecodableByLegacyLogic() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            processId,\n            \"localhost:80\",\n            TASK_OFFSET_SUMS\n        );\n        final ByteBuffer buffer = info.encode();\n\n        final LegacySubscriptionInfoSerde decoded = LegacySubscriptionInfoSerde.decode(buffer);\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(processId, decoded.processId());\n        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","date":"2020-03-06 23:19:04","endLine":174,"groupId":"18945","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"generatedVersion2ShouldBeDecodableByLegacyLogic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cf/79a5f301e451b130878d11fcfb0f6cdb606775.src","preCode":"    public void generatedVersion2ShouldBeDecodableByLegacyLogic() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            processId,\n            activeTasks,\n            standbyTasks,\n            \"localhost:80\"\n        );\n        final ByteBuffer buffer = info.encode();\n\n        final LegacySubscriptionInfoSerde decoded = LegacySubscriptionInfoSerde.decode(buffer);\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(processId, decoded.processId());\n        assertEquals(activeTasks, decoded.prevTasks());\n        assertEquals(standbyTasks, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"674360f5b3a7e5e05b626fd55c277f7c03f27b9e","commitMessage":"@@@KAFKA-6145: Encode task positions in SubscriptionInfo (#8121)\n\n* Replace Prev/Standby task lists with a representation of the current poasition\n  of all tasks.  where each task is encoded as the sum of the positions of all the\n  changelogs in that task.\n* Only the protocol change is implemented.  not actual positions.  and the\n  assignor is updated to translate the new protocol back to lists of Prev/Standby\n  tasks so that the current assignment protocol still functions without modification.\n\nImplements: KIP-441\n\nReviewers: John Roesler <vvcephei@apache.org>.  Bruno Cadonna <bruno@confluent.io>","date":"2020-03-06 23:19:04","modifiedFileCount":"12","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-04-04 02:53:51","codes":[{"authorDate":"2020-04-04 02:53:51","commitOrder":3,"curCode":"    public void shouldEncodeAndDecodeVersion2() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            UUID_1,\n            \"localhost:80\",\n            TASK_OFFSET_SUMS\n        );\n        final SubscriptionInfo decoded = SubscriptionInfo.decode(info.encode());\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(UUID_1, decoded.processId());\n        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","date":"2020-04-04 02:53:51","endLine":160,"groupId":"16024","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldEncodeAndDecodeVersion2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/6ce59687237953ddc1a0934fcc9ec2e0414b2b.src","preCode":"    public void shouldEncodeAndDecodeVersion2() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            processId,\n            \"localhost:80\",\n            TASK_OFFSET_SUMS\n        );\n        final SubscriptionInfo decoded = SubscriptionInfo.decode(info.encode());\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(processId, decoded.processId());\n        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2020-04-04 02:53:51","commitOrder":3,"curCode":"    public void generatedVersion2ShouldBeDecodableByLegacyLogic() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            UUID_1,\n            \"localhost:80\",\n            TASK_OFFSET_SUMS\n        );\n        final ByteBuffer buffer = info.encode();\n\n        final LegacySubscriptionInfoSerde decoded = LegacySubscriptionInfoSerde.decode(buffer);\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(UUID_1, decoded.processId());\n        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","date":"2020-04-04 02:53:51","endLine":180,"groupId":"16024","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"generatedVersion2ShouldBeDecodableByLegacyLogic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/6ce59687237953ddc1a0934fcc9ec2e0414b2b.src","preCode":"    public void generatedVersion2ShouldBeDecodableByLegacyLogic() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            processId,\n            \"localhost:80\",\n            TASK_OFFSET_SUMS\n        );\n        final ByteBuffer buffer = info.encode();\n\n        final LegacySubscriptionInfoSerde decoded = LegacySubscriptionInfoSerde.decode(buffer);\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(processId, decoded.processId());\n        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"6e0d553350cef876f4fd2de0e3b8e6e40ce6be44","commitMessage":"@@@MINOR: clean up Streams assignment classes and tests (#8406)\n\nFirst set of cleanup pushed to followup PR after KIP-441 Pt. 5. Main changes are:\n\n1. Moved `RankedClient` and the static `buildClientRankingsByTask` to a new file\n2. Moved `Movement` and the static `getMovements` to a new file (also renamed to `TaskMovement`)\n3. Consolidated the many common variables throughout the assignment tests to the new `AssignmentTestUtils` \n4. New utility to generate comparable/predictable UUIDs for tests.  and removed the generic from `TaskAssignor` and all related classes\n\nReviewers: John Roesler <vvcephei@apache.org>.  Andrew Choi <a24choi@edu.uwaterloo.ca>","date":"2020-04-04 02:53:51","modifiedFileCount":"16","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-10-20 02:29:35","codes":[{"authorDate":"2020-10-20 02:29:35","commitOrder":4,"curCode":"    public void shouldEncodeAndDecodeVersion2() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            UUID_1,\n            \"localhost:80\",\n            TASK_OFFSET_SUMS,\n            IGNORED_UNIQUE_FIELD\n        );\n        final SubscriptionInfo decoded = SubscriptionInfo.decode(info.encode());\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(UUID_1, decoded.processId());\n        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","date":"2020-10-20 02:29:35","endLine":166,"groupId":"16024","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldEncodeAndDecodeVersion2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/98/1118e69f1ed36be4b3c6b60ddd3640046e3d31.src","preCode":"    public void shouldEncodeAndDecodeVersion2() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            UUID_1,\n            \"localhost:80\",\n            TASK_OFFSET_SUMS\n        );\n        final SubscriptionInfo decoded = SubscriptionInfo.decode(info.encode());\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(UUID_1, decoded.processId());\n        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2020-10-20 02:29:35","commitOrder":4,"curCode":"    public void generatedVersion2ShouldBeDecodableByLegacyLogic() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            UUID_1,\n            \"localhost:80\",\n            TASK_OFFSET_SUMS,\n            IGNORED_UNIQUE_FIELD\n        );\n        final ByteBuffer buffer = info.encode();\n\n        final LegacySubscriptionInfoSerde decoded = LegacySubscriptionInfoSerde.decode(buffer);\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(UUID_1, decoded.processId());\n        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","date":"2020-10-20 02:29:35","endLine":187,"groupId":"16024","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"generatedVersion2ShouldBeDecodableByLegacyLogic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/98/1118e69f1ed36be4b3c6b60ddd3640046e3d31.src","preCode":"    public void generatedVersion2ShouldBeDecodableByLegacyLogic() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            UUID_1,\n            \"localhost:80\",\n            TASK_OFFSET_SUMS\n        );\n        final ByteBuffer buffer = info.encode();\n\n        final LegacySubscriptionInfoSerde decoded = LegacySubscriptionInfoSerde.decode(buffer);\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(UUID_1, decoded.processId());\n        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":169,"status":"M"}],"commitId":"4d14d6a96c952a3e71a3b8e1c6d9c68e8dd4568b","commitMessage":"@@@KAFKA-10455: Ensure that probing rebalances always occur (#9383)\n\nAdd dummy data to subscriptionUserData to make sure that\nit is different each time a member rejoins.\n\nReviewers: A. Sophie Blee-Goldman <ableegoldman@apache.org>.  John Roesler <vvcephei@apache.org>","date":"2020-10-20 02:29:35","modifiedFileCount":"10","status":"M","submitter":"leah"},{"authorTime":"2020-11-18 14:55:09","codes":[{"authorDate":"2020-11-18 14:55:09","commitOrder":5,"curCode":"    public void shouldEncodeAndDecodeVersion2() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            UUID_1,\n            \"localhost:80\",\n            TASK_OFFSET_SUMS,\n            IGNORED_UNIQUE_FIELD,\n            IGNORED_ERROR_CODE\n        );\n        final SubscriptionInfo decoded = SubscriptionInfo.decode(info.encode());\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(UUID_1, decoded.processId());\n        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","date":"2020-11-18 14:55:09","endLine":174,"groupId":"102152","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldEncodeAndDecodeVersion2","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c0/7f7fa30fda622d273c69aed8daaaba95fe36f1.src","preCode":"    public void shouldEncodeAndDecodeVersion2() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            UUID_1,\n            \"localhost:80\",\n            TASK_OFFSET_SUMS,\n            IGNORED_UNIQUE_FIELD\n        );\n        final SubscriptionInfo decoded = SubscriptionInfo.decode(info.encode());\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(UUID_1, decoded.processId());\n        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2020-11-18 14:55:09","commitOrder":5,"curCode":"    public void generatedVersion2ShouldBeDecodableByLegacyLogic() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            UUID_1,\n            \"localhost:80\",\n            TASK_OFFSET_SUMS,\n            IGNORED_UNIQUE_FIELD,\n            IGNORED_ERROR_CODE\n        );\n        final ByteBuffer buffer = info.encode();\n\n        final LegacySubscriptionInfoSerde decoded = LegacySubscriptionInfoSerde.decode(buffer);\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(UUID_1, decoded.processId());\n        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","date":"2020-11-18 14:55:09","endLine":196,"groupId":"102152","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"generatedVersion2ShouldBeDecodableByLegacyLogic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c0/7f7fa30fda622d273c69aed8daaaba95fe36f1.src","preCode":"    public void generatedVersion2ShouldBeDecodableByLegacyLogic() {\n        final SubscriptionInfo info = new SubscriptionInfo(\n            2,\n            LATEST_SUPPORTED_VERSION,\n            UUID_1,\n            \"localhost:80\",\n            TASK_OFFSET_SUMS,\n            IGNORED_UNIQUE_FIELD\n        );\n        final ByteBuffer buffer = info.encode();\n\n        final LegacySubscriptionInfoSerde decoded = LegacySubscriptionInfoSerde.decode(buffer);\n        assertEquals(2, decoded.version());\n        assertEquals(SubscriptionInfo.UNKNOWN, decoded.latestSupportedVersion());\n        assertEquals(UUID_1, decoded.processId());\n        assertEquals(ACTIVE_TASKS, decoded.prevTasks());\n        assertEquals(STANDBY_TASKS, decoded.standbyTasks());\n        assertEquals(\"localhost:80\", decoded.userEndPoint());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfoTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"}],"commitId":"5899f5fc4a9557c33e466e58d7555990ee742a2b","commitMessage":"@@@KAFKA-9331: Add a streams specific uncaught exception handler (#9487)\n\nThis PR introduces a streams specific uncaught exception handler that currently has the option to close the client or the application. If the new handler is set as well as the old handler (java thread handler) will be ignored and an error will be logged.\nThe application shutdown is achieved through the rebalance protocol.\n\nReviewers: Bruno Cadonna <cadonna@confluent.io>.  Leah Thomas <lthomas@confluent.io>.  John Roesler <john@confluent.io>.  Anna Sophie Blee-Goldman <ableegoldman@apache.org>","date":"2020-11-18 14:55:09","modifiedFileCount":"34","status":"M","submitter":"Walker Carlson"}]
