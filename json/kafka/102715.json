[{"authorTime":"2019-05-08 08:43:13","codes":[{"authorDate":"2020-03-21 06:26:13","commitOrder":7,"curCode":"    private Properties props(final String appId, final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","date":"2020-03-21 06:26:13","endLine":152,"groupId":"10668","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"props","params":"(finalStringappId@finalStringstateDirPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bc/22b5c7a5cc15e1f07a14cadb1b4338ace13ea9.src","preCode":"    private Properties props(final String appId, final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"},{"authorDate":"2019-05-08 08:43:13","commitOrder":7,"curCode":"    private Properties props(final String applicationId) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        return streamsConfiguration;\n    }\n","date":"2019-05-08 08:43:13","endLine":108,"groupId":"9897","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"props","params":"(finalStringapplicationId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2d/88ff3dc7a4721a0b45c41d603dad239efede0e.src","preCode":"    private Properties props(final String applicationId) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"NB"}],"commitId":"c249ea8e5d9dad5e74b804a6f062b059517d6a8d","commitMessage":"@@@KAFKA-9727: cleanup the state store for standby task dirty close and check null for changelogs (#8307)\n\nThis PR fixes three things:\n\n* the state should be closed when standby task is restoring as well\n* the EOS standby task should also wipe out state under dirty close\n* the changelog reader should check for null as well\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-03-21 06:26:13","modifiedFileCount":"6","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-05-08 08:43:13","codes":[{"authorDate":"2020-04-16 04:13:23","commitOrder":8,"curCode":"    private Properties props(final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, eosConfig);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","date":"2020-04-16 04:13:23","endLine":169,"groupId":"2922","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"props","params":"(finalStringstateDirPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/2d75ac68092f38dbe08997a0f925c1fa5431e7.src","preCode":"    private Properties props(final String appId, final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, StreamsConfig.EXACTLY_ONCE);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"},{"authorDate":"2019-05-08 08:43:13","commitOrder":8,"curCode":"    private Properties props(final String applicationId) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        return streamsConfiguration;\n    }\n","date":"2019-05-08 08:43:13","endLine":108,"groupId":"9897","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"props","params":"(finalStringapplicationId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2d/88ff3dc7a4721a0b45c41d603dad239efede0e.src","preCode":"    private Properties props(final String applicationId) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"}],"commitId":"17f98792617a6de39cbd0d651a03fc40a06e0ff6","commitMessage":"@@@KAFKA-9832: extend Kafka Streams EOS system test (#8440)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-04-16 04:13:23","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-04-23 05:29:23","codes":[{"authorDate":"2020-04-23 05:29:23","commitOrder":9,"curCode":"    private Properties props(final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        final String suffix = testName.getMethodName()\n            .replace('[', '_')\n            .replace(']', '_');\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId + suffix);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, eosConfig);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","date":"2020-04-23 05:29:23","endLine":177,"groupId":"2922","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"props","params":"(finalStringstateDirPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e6/5c0fc9bb01e7fe81192b2ec5fb72e44a72199b.src","preCode":"    private Properties props(final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, eosConfig);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2020-04-23 05:29:23","commitOrder":9,"curCode":"    private Properties props(final String applicationId) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, 300);\n        return streamsConfiguration;\n    }\n","date":"2020-04-23 05:29:23","endLine":110,"groupId":"9897","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"props","params":"(finalStringapplicationId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9c/b0b85c2f051d7a97562947ca216503d22287eb.src","preCode":"    private Properties props(final String applicationId) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"}],"commitId":"fbd8cf0d861dec5b7bac237e8221cfae51bec14a","commitMessage":"@@@KAFKA-9388: Refactor integration tests to always use different application ids (#8530)\n\nWhen debugging KAFKA-9388.  I found the reason that the second test method test takes much longer (10s) than the previous one (~500ms) is because they used the same app.id. When the previous clients are shutdown.  they would not send leave-group and hence we are still depending on the session timeout (10s) for the members to be removed out of the group.\n\nWhen the second test is triggered.  they will join the same group because of the same application id.  and the prepare-rebalance phase would would for the full rebalance timeout before it kicks out the previous members.\n\nSetting different application ids could resolve such issues for integration tests --- I did a quick search and found some other integration tests have the same issue. And after this PR my local unit test runtime reduced from about 14min to 7min.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  John Roesler <john@confluent.io>","date":"2020-04-23 05:29:23","modifiedFileCount":"22","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-04-23 05:29:23","codes":[{"authorDate":"2020-04-30 06:11:49","commitOrder":10,"curCode":"    private Properties props(final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, eosConfig);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","date":"2020-04-30 06:11:49","endLine":178,"groupId":"2922","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"props","params":"(finalStringstateDirPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8f/a39136a9418f3188bc6ccacdd2dae4177d6ed1.src","preCode":"    private Properties props(final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        final String suffix = testName.getMethodName()\n            .replace('[', '_')\n            .replace(']', '_');\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId + suffix);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, eosConfig);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"},{"authorDate":"2020-04-23 05:29:23","commitOrder":10,"curCode":"    private Properties props(final String applicationId) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, 300);\n        return streamsConfiguration;\n    }\n","date":"2020-04-23 05:29:23","endLine":110,"groupId":"9897","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"props","params":"(finalStringapplicationId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9c/b0b85c2f051d7a97562947ca216503d22287eb.src","preCode":"    private Properties props(final String applicationId) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, 300);\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"N"}],"commitId":"dc4d439825b2d117707b01c7c64769e700246fc6","commitMessage":"@@@KAFKA-9875: Make integration tests more resilient (#8578)\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-04-30 06:11:49","modifiedFileCount":"25","status":"M","submitter":"John Roesler"},{"authorTime":"2020-05-30 01:48:03","codes":[{"authorDate":"2020-04-30 06:11:49","commitOrder":11,"curCode":"    private Properties props(final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, eosConfig);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","date":"2020-04-30 06:11:49","endLine":178,"groupId":"2922","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"props","params":"(finalStringstateDirPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8f/a39136a9418f3188bc6ccacdd2dae4177d6ed1.src","preCode":"    private Properties props(final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, eosConfig);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"N"},{"authorDate":"2020-05-30 01:48:03","commitOrder":11,"curCode":"    private Properties props() {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(appId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, 300);\n        return streamsConfiguration;\n    }\n","date":"2020-05-30 01:48:03","endLine":123,"groupId":"9897","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"props","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fa/ac172b63920282b3b09f2ae67e16552e51cb66.src","preCode":"    private Properties props(final String applicationId) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, applicationId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(applicationId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, 300);\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"9d52deca247d9e16cf530d655891b2bbe474ffae","commitMessage":"@@@KAFKA-9501: convert between active and standby without closing stores (#8248)\n\nThis PR has gone through several significant transitions of its own.  but here's the latest:\n\n* TaskManager just collects the tasks to transition and refers to the active/standby task creator to handle closing & recycling the old task and creating the new one. If we ever hit an exception during the close.  we bail and close all the remaining tasks as dirty.\n\n* The task creators tell the task to \"close but recycle state\". If this is successful.  it tells the recycled processor context and state manager that they should transition to the new type.\n\n* During \"close and recycle\" the task just does a normal clean close.  but instead of closing the state manager it informs it to recycle itself: maintain all of its store information (most importantly the current store offsets) but unregister the changelogs from the changelog reader\n\n* The new task will (re-)register its changelogs during initialization.  but skip re-registering any stores. It will still read the checkpoint file.  but only use the written offsets if the store offsets are not already initialized from pre-transition\n\n* To ensure we don't end up with manual compaction disabled for standbys.  we have to call the state restore listener's onRestoreEnd for any active restoring stores that are switching to standbys\n\nReviewers: John Roesler <vvcephei@apache.org>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-05-30 01:48:03","modifiedFileCount":"41","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-05-30 01:48:03","codes":[{"authorDate":"2020-06-20 00:05:54","commitOrder":12,"curCode":"    private Properties props(final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, eosConfig);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        \r\n        streamsConfiguration.put(StreamsConfig.ACCEPTABLE_RECOVERY_LAG_CONFIG, 0);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","date":"2020-06-20 00:05:54","endLine":384,"groupId":"2922","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"props","params":"(finalStringstateDirPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/f351ea929e2423ec668687a01b682d22083785.src","preCode":"    private Properties props(final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, eosConfig);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"M"},{"authorDate":"2020-05-30 01:48:03","commitOrder":12,"curCode":"    private Properties props() {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(appId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, 300);\n        return streamsConfiguration;\n    }\n","date":"2020-05-30 01:48:03","endLine":123,"groupId":"9897","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"props","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fa/ac172b63920282b3b09f2ae67e16552e51cb66.src","preCode":"    private Properties props() {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(appId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, 300);\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"}],"commitId":"3c43adff1d4562c6b33732f399691c9e2f887903","commitMessage":"@@@KAFKA-9891: add integration tests for EOS and StandbyTask (#8890)\n\nPorts the test from #8886 to trunk -- this should be merged to 2.6 branch.\n\nOne open question. In 2.6 and trunk we rely on the active tasks to wipe out the store if it crashes. However.  assume there is a hard JVM crash and we don't call closeDirty() the store would not be wiped out. Thus.  I am wondering.  if we would need to fix this (for both active and standby tasks) and do a check on startup if a local store must be wiped out?\n\nThe current test passes.  as we do a proper cleanup after the exception is thrown.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-06-20 00:05:54","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-07-31 11:32:40","codes":[{"authorDate":"2020-06-20 00:05:54","commitOrder":13,"curCode":"    private Properties props(final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, eosConfig);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        \r\n        streamsConfiguration.put(StreamsConfig.ACCEPTABLE_RECOVERY_LAG_CONFIG, 0);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","date":"2020-06-20 00:05:54","endLine":384,"groupId":"2922","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"props","params":"(finalStringstateDirPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/f351ea929e2423ec668687a01b682d22083785.src","preCode":"    private Properties props(final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, eosConfig);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        \r\n        streamsConfiguration.put(StreamsConfig.ACCEPTABLE_RECOVERY_LAG_CONFIG, 0);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":368,"status":"N"},{"authorDate":"2020-07-31 11:32:40","commitOrder":13,"curCode":"    private Properties props() {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(appId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        return streamsConfiguration;\n    }\n","date":"2020-07-31 11:32:40","endLine":121,"groupId":"9897","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"props","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/95a9ce32b80f82ba024a7e1d65eacf7dfbb04d.src","preCode":"    private Properties props() {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(appId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        streamsConfiguration.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, 300);\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"d15cbf1ccc6ef046b85a65a2d9e375c453ca4971","commitMessage":"@@@HOTFIX: Set session timeout and heartbeat interval to default to decrease flakiness (#9087)\n\nSet session timeout and heartbeat interval to default for RestoreIntegrationTest\n\nReviewers: Boyang Chen <boyang@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-07-31 11:32:40","modifiedFileCount":"1","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-05-22 06:05:39","codes":[{"authorDate":"2021-05-22 06:05:39","commitOrder":14,"curCode":"    private Properties props(final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, eosConfig);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000L);\n        \r\n        streamsConfiguration.put(StreamsConfig.ACCEPTABLE_RECOVERY_LAG_CONFIG, 0);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","date":"2021-05-22 06:05:39","endLine":415,"groupId":"102715","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"props","params":"(finalStringstateDirPath)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/16/cefd4ccaf76302d422cbb25d9685d946f18829.src","preCode":"    private Properties props(final String stateDirPath) {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, stateDirPath);\n        streamsConfiguration.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        streamsConfiguration.put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG, eosConfig);\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        \r\n        streamsConfiguration.put(StreamsConfig.ACCEPTABLE_RECOVERY_LAG_CONFIG, 0);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/StandbyTaskEOSIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"M"},{"authorDate":"2021-05-22 06:05:39","commitOrder":14,"curCode":"    private Properties props() {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(appId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000L);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        return streamsConfiguration;\n    }\n","date":"2021-05-22 06:05:39","endLine":132,"groupId":"102715","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"props","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/df/0645ed9e2e2ac9ff81efd2c1f5e7c35bfac08f.src","preCode":"    private Properties props() {\n        final Properties streamsConfiguration = new Properties();\n        streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG, appId);\n        streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        streamsConfiguration.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG, TestUtils.tempDirectory(appId).getPath());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.Integer().getClass());\n        streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG, 1000);\n        streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        return streamsConfiguration;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/RestoreIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"ae8b7845374b6bb01e1ae9ca27f6ab967561e011","commitMessage":"@@@KAFKA-12499: add transaction timeout verification (#10482)\n\nThis PR tries to add the check for transaction timeout for a comparison against commit interval of streams. If transaction timeout is smaller than commit interval.  stream should crash and inform user to update their commit interval to be larger or equal to the given transaction timeout.  or vise versa.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2021-05-22 06:05:39","modifiedFileCount":"65","status":"M","submitter":"Boyang Chen"}]
