[{"authorTime":"2020-05-23 22:00:32","codes":[{"authorDate":"2020-05-23 22:00:32","commitOrder":1,"curCode":"    public void shouldAllowSettingConfigTopicSettings() {\n        Map<String, String> topicSettings = new HashMap<>();\n        topicSettings.put(\"foo\", \"foo value\");\n        topicSettings.put(\"bar\", \"bar value\");\n        topicSettings.put(\"baz.bim\", \"100\");\n        Map<String, String> settings = configs();\n        topicSettings.entrySet().forEach(e -> {\n            settings.put(DistributedConfig.CONFIG_STORAGE_PREFIX + e.getKey(), e.getValue());\n        });\n        DistributedConfig config = new DistributedConfig(settings);\n        assertEquals(topicSettings, config.configStorageTopicSettings());\n    }\n","date":"2020-05-23 22:00:32","endLine":222,"groupId":"19838","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAllowSettingConfigTopicSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/347cbd12cb9720c8c7ad75b58cd035a5108f43.src","preCode":"    public void shouldAllowSettingConfigTopicSettings() {\n        Map<String, String> topicSettings = new HashMap<>();\n        topicSettings.put(\"foo\", \"foo value\");\n        topicSettings.put(\"bar\", \"bar value\");\n        topicSettings.put(\"baz.bim\", \"100\");\n        Map<String, String> settings = configs();\n        topicSettings.entrySet().forEach(e -> {\n            settings.put(DistributedConfig.CONFIG_STORAGE_PREFIX + e.getKey(), e.getValue());\n        });\n        DistributedConfig config = new DistributedConfig(settings);\n        assertEquals(topicSettings, config.configStorageTopicSettings());\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"B"},{"authorDate":"2020-05-23 22:00:32","commitOrder":1,"curCode":"    public void shouldAllowSettingOffsetTopicSettings() {\n        Map<String, String> topicSettings = new HashMap<>();\n        topicSettings.put(\"foo\", \"foo value\");\n        topicSettings.put(\"bar\", \"bar value\");\n        topicSettings.put(\"baz.bim\", \"100\");\n        Map<String, String> settings = configs();\n        topicSettings.entrySet().forEach(e -> {\n            settings.put(DistributedConfig.OFFSET_STORAGE_PREFIX + e.getKey(), e.getValue());\n        });\n        DistributedConfig config = new DistributedConfig(settings);\n        assertEquals(topicSettings, config.offsetStorageTopicSettings());\n    }\n","date":"2020-05-23 22:00:32","endLine":236,"groupId":"19838","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAllowSettingOffsetTopicSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1e/347cbd12cb9720c8c7ad75b58cd035a5108f43.src","preCode":"    public void shouldAllowSettingOffsetTopicSettings() {\n        Map<String, String> topicSettings = new HashMap<>();\n        topicSettings.put(\"foo\", \"foo value\");\n        topicSettings.put(\"bar\", \"bar value\");\n        topicSettings.put(\"baz.bim\", \"100\");\n        Map<String, String> settings = configs();\n        topicSettings.entrySet().forEach(e -> {\n            settings.put(DistributedConfig.OFFSET_STORAGE_PREFIX + e.getKey(), e.getValue());\n        });\n        DistributedConfig config = new DistributedConfig(settings);\n        assertEquals(topicSettings, config.offsetStorageTopicSettings());\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"B"}],"commitId":"981ef5166d2c95cacb6cdc1d52ed0c866b473868","commitMessage":"@@@KAFKA-9931: Implement KIP-605 to expand support for Connect worker internal topic configurations (#8654)\n\nAdded support for -1 replication factor and partitions for distributed worker internal topics by expanding the allowed values for the internal topics? replication factor and partitions from positive values to also include -1 to signify that the broker defaults should be used.\n\nThe Kafka storage classes were already constructing a `NewTopic` object (always with a replication factor and partitions) and sending it to Kafka when required. This change will avoid setting the replication factor and/or number of partitions on this `NewTopic` if the worker configuration uses -1 for the corresponding configuration value.\n\nAlso added support for extra settings for internal topics on distributed config.  status.  and offset internal topics.\n\nQuite a few new tests were added to verify that the `TopicAdmin` utility class is correctly using the AdminClient.  and that the `DistributedConfig` validators for these configurations are correct. Also added integration tests for internal topic creation.  covering preexisting functionality plus the new functionality.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\nReviewer: Konstantine Karantasis <konstantine@confluent.io>","date":"2020-05-23 22:00:32","modifiedFileCount":"12","status":"B","submitter":"Randall Hauch"},{"authorTime":"2021-02-05 01:15:49","codes":[{"authorDate":"2021-02-05 01:15:49","commitOrder":2,"curCode":"    public void shouldAllowSettingConfigTopicSettings() {\n        Map<String, String> topicSettings = new HashMap<>();\n        topicSettings.put(\"foo\", \"foo value\");\n        topicSettings.put(\"bar\", \"bar value\");\n        topicSettings.put(\"baz.bim\", \"100\");\n        Map<String, String> settings = configs();\n        topicSettings.forEach((k, v) -> settings.put(DistributedConfig.CONFIG_STORAGE_PREFIX + k, v));\n        DistributedConfig config = new DistributedConfig(settings);\n        assertEquals(topicSettings, config.configStorageTopicSettings());\n    }\n","date":"2021-02-05 01:15:49","endLine":220,"groupId":"104853","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldAllowSettingConfigTopicSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/5232748b2e13f74175018688f89b4c56507e7d.src","preCode":"    public void shouldAllowSettingConfigTopicSettings() {\n        Map<String, String> topicSettings = new HashMap<>();\n        topicSettings.put(\"foo\", \"foo value\");\n        topicSettings.put(\"bar\", \"bar value\");\n        topicSettings.put(\"baz.bim\", \"100\");\n        Map<String, String> settings = configs();\n        topicSettings.entrySet().forEach(e -> {\n            settings.put(DistributedConfig.CONFIG_STORAGE_PREFIX + e.getKey(), e.getValue());\n        });\n        DistributedConfig config = new DistributedConfig(settings);\n        assertEquals(topicSettings, config.configStorageTopicSettings());\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"},{"authorDate":"2021-02-05 01:15:49","commitOrder":2,"curCode":"    public void shouldAllowSettingOffsetTopicSettings() {\n        Map<String, String> topicSettings = new HashMap<>();\n        topicSettings.put(\"foo\", \"foo value\");\n        topicSettings.put(\"bar\", \"bar value\");\n        topicSettings.put(\"baz.bim\", \"100\");\n        Map<String, String> settings = configs();\n        topicSettings.forEach((k, v) -> settings.put(DistributedConfig.OFFSET_STORAGE_PREFIX + k, v));\n        DistributedConfig config = new DistributedConfig(settings);\n        assertEquals(topicSettings, config.offsetStorageTopicSettings());\n    }\n","date":"2021-02-05 01:15:49","endLine":232,"groupId":"104853","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldAllowSettingOffsetTopicSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/5232748b2e13f74175018688f89b4c56507e7d.src","preCode":"    public void shouldAllowSettingOffsetTopicSettings() {\n        Map<String, String> topicSettings = new HashMap<>();\n        topicSettings.put(\"foo\", \"foo value\");\n        topicSettings.put(\"bar\", \"bar value\");\n        topicSettings.put(\"baz.bim\", \"100\");\n        Map<String, String> settings = configs();\n        topicSettings.entrySet().forEach(e -> {\n            settings.put(DistributedConfig.OFFSET_STORAGE_PREFIX + e.getKey(), e.getValue());\n        });\n        DistributedConfig config = new DistributedConfig(settings);\n        assertEquals(topicSettings, config.offsetStorageTopicSettings());\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"}],"commitId":"c19a35d1b740c85559a7ff4e882fc95b4737808d","commitMessage":"@@@KAFKA-10835: Replace Runnable and Callable overrides with lambdas in Connect (#9867)\n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 01:15:49","modifiedFileCount":"50","status":"M","submitter":"Lev Zemlyanov"}]
