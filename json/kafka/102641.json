[{"authorTime":"2018-04-13 00:35:37","codes":[{"authorDate":"2018-09-12 07:16:52","commitOrder":3,"curCode":"    private <K, V> void validateReceivedMessages(final Deserializer<K> keyDeserializer,\n                                                 final Deserializer<V> valueDeserializer,\n                                                 final List<KeyValue<K, V>> expectedRecords)\n        throws InterruptedException {\n        final Properties consumerProperties = new Properties();\n        consumerProperties\n            .setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"kgroupedstream-test-\" +\n            testNo);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,\n            keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,\n            valueDeserializer.getClass().getName());\n\n        IntegrationTestUtils.waitUntilFinalKeyValueRecordsReceived(\n            consumerProperties,\n            outputTopic,\n            expectedRecords);\n    }\n","date":"2018-09-12 07:16:52","endLine":255,"groupId":"5402","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"validateReceivedMessages","params":"(finalDeserializer<K>keyDeserializer@finalDeserializer<V>valueDeserializer@finalList<KeyValue<K@V>>expectedRecords)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/1511e19e98a12fe99aeb8025e730f317b45356.src","preCode":"    private <K, V> void validateReceivedMessages(final Deserializer<K> keyDeserializer,\n                                                 final Deserializer<V> valueDeserializer,\n                                                 final List<KeyValue<K, V>> expectedRecords)\n        throws InterruptedException {\n        final Properties consumerProperties = new Properties();\n        consumerProperties\n            .setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"kgroupedstream-test-\" +\n            testNo);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,\n            keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,\n            valueDeserializer.getClass().getName());\n\n        IntegrationTestUtils.waitUntilFinalKeyValueRecordsReceived(\n            consumerProperties,\n            outputTopic,\n            expectedRecords);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationDedupIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"},{"authorDate":"2018-04-13 00:35:37","commitOrder":3,"curCode":"    private <K, V> List<KeyValue<K, V>> receiveMessages(final Deserializer<K>\n                                                                keyDeserializer,\n                                                        final Deserializer<V>\n                                                                valueDeserializer,\n                                                        final Class innerClass,\n                                                        final int numMessages) throws InterruptedException {\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"kgroupedstream-test-\" + testNo);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n        if (keyDeserializer instanceof TimeWindowedDeserializer || keyDeserializer instanceof SessionWindowedDeserializer) {\n            consumerProperties.setProperty(StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS,\n                    Serdes.serdeFrom(innerClass).getClass().getName());\n        }\n        return IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(\n                consumerProperties,\n                outputTopic,\n                numMessages,\n                60 * 1000);\n    }\n","date":"2018-04-13 00:35:37","endLine":762,"groupId":"5402","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"receiveMessages","params":"(finalDeserializer<K>keyDeserializer@finalDeserializer<V>valueDeserializer@finalClassinnerClass@finalintnumMessages)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/673d0258e0218b9bf2bd4947f0703dc53791c7.src","preCode":"    private <K, V> List<KeyValue<K, V>> receiveMessages(final Deserializer<K>\n                                                                keyDeserializer,\n                                                        final Deserializer<V>\n                                                                valueDeserializer,\n                                                        final Class innerClass,\n                                                        final int numMessages) throws InterruptedException {\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"kgroupedstream-test-\" + testNo);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n        if (keyDeserializer instanceof TimeWindowedDeserializer || keyDeserializer instanceof SessionWindowedDeserializer) {\n            consumerProperties.setProperty(StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS,\n                    Serdes.serdeFrom(innerClass).getClass().getName());\n        }\n        return IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(\n                consumerProperties,\n                outputTopic,\n                numMessages,\n                60 * 1000);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":741,"status":"NB"}],"commitId":"283a19481d1ce4a77f5f465e7b96288db22a8ff1","commitMessage":"@@@KAFKA-3514: Part III.  Refactor StreamThread main loop (#5428)\n\n* Refactor the StreamThread main loop.  in the following:\n\n1. Fetch from consumer and enqueue data to tasks.\n2. Check if any tasks should be enforced process.\n3/ Loop over processable tasks and process them for N iterations.  and then check for 1) commit.  2) punctuate.  3) need to call consumer.poll\n4. Even if there is not data to process in this iteration.  still need to check if commit / punctuate is needed\n5. Finally.  try update standby tasks.\n\n*Add an optimization to only commit when it is needed (i.e. at least some process() or punctuate() was triggered since last commit).\n\n*Found and fixed a ProducerFencedException scenario: producer.send() call would never throw a ProducerFencedException directly.  but it may throw a KafkaException whose \"cause\" is a ProducerFencedException.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2018-09-12 07:16:52","modifiedFileCount":"24","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-05-31 00:46:12","codes":[{"authorDate":"2019-05-31 00:46:12","commitOrder":4,"curCode":"    private <K, V> void validateReceivedMessages(final Deserializer<K> keyDeserializer,\n                                                 final Deserializer<V> valueDeserializer,\n                                                 final List<KeyValueTimestamp<K, V>> expectedRecords)\n        throws InterruptedException {\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"kgroupedstream-test-\" + testNo);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n\n        IntegrationTestUtils.waitUntilFinalKeyValueTimestampRecordsReceived(\n            consumerProperties,\n            outputTopic,\n            expectedRecords);\n    }\n","date":"2019-05-31 00:46:12","endLine":249,"groupId":"5402","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"validateReceivedMessages","params":"(finalDeserializer<K>keyDeserializer@finalDeserializer<V>valueDeserializer@finalList<KeyValueTimestamp<K@V>>expectedRecords)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/f6356853a3a45b3cc300ecac8b3679e40f6689.src","preCode":"    private <K, V> void validateReceivedMessages(final Deserializer<K> keyDeserializer,\n                                                 final Deserializer<V> valueDeserializer,\n                                                 final List<KeyValue<K, V>> expectedRecords)\n        throws InterruptedException {\n        final Properties consumerProperties = new Properties();\n        consumerProperties\n            .setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"kgroupedstream-test-\" +\n            testNo);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,\n            keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,\n            valueDeserializer.getClass().getName());\n\n        IntegrationTestUtils.waitUntilFinalKeyValueRecordsReceived(\n            consumerProperties,\n            outputTopic,\n            expectedRecords);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationDedupIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":234,"status":"M"},{"authorDate":"2019-05-31 00:46:12","commitOrder":4,"curCode":"    private <K, V> List<KeyValueTimestamp<K, V>> receiveMessages(final Deserializer<K> keyDeserializer,\n                                                                 final Deserializer<V> valueDeserializer,\n                                                                 final Class innerClass,\n                                                                 final int numMessages) throws InterruptedException {\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"kgroupedstream-test-\" + testNo);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n        if (keyDeserializer instanceof TimeWindowedDeserializer || keyDeserializer instanceof SessionWindowedDeserializer) {\n            consumerProperties.setProperty(StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS,\n                    Serdes.serdeFrom(innerClass).getClass().getName());\n        }\n        return IntegrationTestUtils.waitUntilMinKeyValueWithTimestampRecordsReceived(\n                consumerProperties,\n                outputTopic,\n                numMessages,\n                60 * 1000);\n    }\n","date":"2019-05-31 00:46:12","endLine":828,"groupId":"5402","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"receiveMessages","params":"(finalDeserializer<K>keyDeserializer@finalDeserializer<V>valueDeserializer@finalClassinnerClass@finalintnumMessages)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dc/f72a501ec1a64ed41f2d10d6e988361e2466c3.src","preCode":"    private <K, V> List<KeyValue<K, V>> receiveMessages(final Deserializer<K> keyDeserializer,\n                                                        final Deserializer<V> valueDeserializer,\n                                                        final Class innerClass,\n                                                        final int numMessages) throws InterruptedException {\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"kgroupedstream-test-\" + testNo);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n        if (keyDeserializer instanceof TimeWindowedDeserializer || keyDeserializer instanceof SessionWindowedDeserializer) {\n            consumerProperties.setProperty(StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS,\n                    Serdes.serdeFrom(innerClass).getClass().getName());\n        }\n        return IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(\n                consumerProperties,\n                outputTopic,\n                numMessages,\n                60 * 1000);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":809,"status":"M"}],"commitId":"77e6e8ec054608a30626271b4952b63294a93c3b","commitMessage":"@@@KAFKA-6455: Update integration tests to verify result timestamps (#6751)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2019-05-31 00:46:12","modifiedFileCount":"12","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-04-23 05:29:23","codes":[{"authorDate":"2020-04-23 05:29:23","commitOrder":5,"curCode":"    private <K, V> void validateReceivedMessages(final Deserializer<K> keyDeserializer,\n                                                 final Deserializer<V> valueDeserializer,\n                                                 final List<KeyValueTimestamp<K, V>> expectedRecords)\n        throws InterruptedException {\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"kgroupedstream-test-\" + testName.getMethodName());\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n\n        IntegrationTestUtils.waitUntilFinalKeyValueTimestampRecordsReceived(\n            consumerProperties,\n            outputTopic,\n            expectedRecords);\n    }\n","date":"2020-04-23 05:29:23","endLine":252,"groupId":"5402","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"validateReceivedMessages","params":"(finalDeserializer<K>keyDeserializer@finalDeserializer<V>valueDeserializer@finalList<KeyValueTimestamp<K@V>>expectedRecords)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/2e4977a4158c9bbb15c29bd75fb0d9ee806c40.src","preCode":"    private <K, V> void validateReceivedMessages(final Deserializer<K> keyDeserializer,\n                                                 final Deserializer<V> valueDeserializer,\n                                                 final List<KeyValueTimestamp<K, V>> expectedRecords)\n        throws InterruptedException {\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"kgroupedstream-test-\" + testNo);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n\n        IntegrationTestUtils.waitUntilFinalKeyValueTimestampRecordsReceived(\n            consumerProperties,\n            outputTopic,\n            expectedRecords);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationDedupIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2020-04-23 05:29:23","commitOrder":5,"curCode":"    private <K, V> List<KeyValueTimestamp<K, V>> receiveMessages(final Deserializer<K> keyDeserializer,\n                                                                 final Deserializer<V> valueDeserializer,\n                                                                 final Class innerClass,\n                                                                 final int numMessages) throws InterruptedException {\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"kgroupedstream-test-\" + testName.getMethodName());\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n        if (keyDeserializer instanceof TimeWindowedDeserializer || keyDeserializer instanceof SessionWindowedDeserializer) {\n            consumerProperties.setProperty(StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS,\n                    Serdes.serdeFrom(innerClass).getClass().getName());\n        }\n        return IntegrationTestUtils.waitUntilMinKeyValueWithTimestampRecordsReceived(\n                consumerProperties,\n                outputTopic,\n                numMessages,\n                60 * 1000);\n    }\n","date":"2020-04-23 05:29:23","endLine":832,"groupId":"5402","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"receiveMessages","params":"(finalDeserializer<K>keyDeserializer@finalDeserializer<V>valueDeserializer@finalClassinnerClass@finalintnumMessages)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/30/320379267174f3330aa9666e0532cba6be5cba.src","preCode":"    private <K, V> List<KeyValueTimestamp<K, V>> receiveMessages(final Deserializer<K> keyDeserializer,\n                                                                 final Deserializer<V> valueDeserializer,\n                                                                 final Class innerClass,\n                                                                 final int numMessages) throws InterruptedException {\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"kgroupedstream-test-\" + testNo);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n        if (keyDeserializer instanceof TimeWindowedDeserializer || keyDeserializer instanceof SessionWindowedDeserializer) {\n            consumerProperties.setProperty(StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS,\n                    Serdes.serdeFrom(innerClass).getClass().getName());\n        }\n        return IntegrationTestUtils.waitUntilMinKeyValueWithTimestampRecordsReceived(\n                consumerProperties,\n                outputTopic,\n                numMessages,\n                60 * 1000);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":813,"status":"M"}],"commitId":"fbd8cf0d861dec5b7bac237e8221cfae51bec14a","commitMessage":"@@@KAFKA-9388: Refactor integration tests to always use different application ids (#8530)\n\nWhen debugging KAFKA-9388.  I found the reason that the second test method test takes much longer (10s) than the previous one (~500ms) is because they used the same app.id. When the previous clients are shutdown.  they would not send leave-group and hence we are still depending on the session timeout (10s) for the members to be removed out of the group.\n\nWhen the second test is triggered.  they will join the same group because of the same application id.  and the prepare-rebalance phase would would for the full rebalance timeout before it kicks out the previous members.\n\nSetting different application ids could resolve such issues for integration tests --- I did a quick search and found some other integration tests have the same issue. And after this PR my local unit test runtime reduced from about 14min to 7min.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  John Roesler <john@confluent.io>","date":"2020-04-23 05:29:23","modifiedFileCount":"22","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-04-30 06:11:49","codes":[{"authorDate":"2020-04-30 06:11:49","commitOrder":6,"curCode":"    private <K, V> void validateReceivedMessages(final Deserializer<K> keyDeserializer,\n                                                 final Deserializer<V> valueDeserializer,\n                                                 final List<KeyValueTimestamp<K, V>> expectedRecords)\n        throws InterruptedException {\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n\n        IntegrationTestUtils.waitUntilFinalKeyValueTimestampRecordsReceived(\n            consumerProperties,\n            outputTopic,\n            expectedRecords);\n    }\n","date":"2020-04-30 06:11:49","endLine":255,"groupId":"5402","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"validateReceivedMessages","params":"(finalDeserializer<K>keyDeserializer@finalDeserializer<V>valueDeserializer@finalList<KeyValueTimestamp<K@V>>expectedRecords)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/db/e0b047a7a97992aec94115bb29dd2c62330a9e.src","preCode":"    private <K, V> void validateReceivedMessages(final Deserializer<K> keyDeserializer,\n                                                 final Deserializer<V> valueDeserializer,\n                                                 final List<KeyValueTimestamp<K, V>> expectedRecords)\n        throws InterruptedException {\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"kgroupedstream-test-\" + testName.getMethodName());\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n\n        IntegrationTestUtils.waitUntilFinalKeyValueTimestampRecordsReceived(\n            consumerProperties,\n            outputTopic,\n            expectedRecords);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationDedupIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2020-04-30 06:11:49","commitOrder":6,"curCode":"    private <K, V> List<KeyValueTimestamp<K, V>> receiveMessages(final Deserializer<K> keyDeserializer,\n                                                                 final Deserializer<V> valueDeserializer,\n                                                                 final Class innerClass,\n                                                                 final int numMessages) throws InterruptedException {\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n        if (keyDeserializer instanceof TimeWindowedDeserializer || keyDeserializer instanceof SessionWindowedDeserializer) {\n            consumerProperties.setProperty(StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS,\n                    Serdes.serdeFrom(innerClass).getClass().getName());\n        }\n        return IntegrationTestUtils.waitUntilMinKeyValueWithTimestampRecordsReceived(\n                consumerProperties,\n                outputTopic,\n                numMessages,\n                60 * 1000);\n    }\n","date":"2020-04-30 06:11:49","endLine":835,"groupId":"5402","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"receiveMessages","params":"(finalDeserializer<K>keyDeserializer@finalDeserializer<V>valueDeserializer@finalClassinnerClass@finalintnumMessages)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/4e25e4e4f6b3315e4db3bd1071084abcbebfd9.src","preCode":"    private <K, V> List<KeyValueTimestamp<K, V>> receiveMessages(final Deserializer<K> keyDeserializer,\n                                                                 final Deserializer<V> valueDeserializer,\n                                                                 final Class innerClass,\n                                                                 final int numMessages) throws InterruptedException {\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"kgroupedstream-test-\" + testName.getMethodName());\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n        if (keyDeserializer instanceof TimeWindowedDeserializer || keyDeserializer instanceof SessionWindowedDeserializer) {\n            consumerProperties.setProperty(StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS,\n                    Serdes.serdeFrom(innerClass).getClass().getName());\n        }\n        return IntegrationTestUtils.waitUntilMinKeyValueWithTimestampRecordsReceived(\n                consumerProperties,\n                outputTopic,\n                numMessages,\n                60 * 1000);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":815,"status":"M"}],"commitId":"dc4d439825b2d117707b01c7c64769e700246fc6","commitMessage":"@@@KAFKA-9875: Make integration tests more resilient (#8578)\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-04-30 06:11:49","modifiedFileCount":"25","status":"M","submitter":"John Roesler"},{"authorTime":"2020-05-08 14:01:11","codes":[{"authorDate":"2020-05-08 14:01:11","commitOrder":7,"curCode":"    private <K, V> void validateReceivedMessages(final Deserializer<K> keyDeserializer,\n                                                 final Deserializer<V> valueDeserializer,\n                                                 final List<KeyValueTimestamp<K, V>> expectedRecords)\n            throws Exception {\n\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n\n        IntegrationTestUtils.waitUntilFinalKeyValueTimestampRecordsReceived(\n            consumerProperties,\n            outputTopic,\n            expectedRecords);\n    }\n","date":"2020-05-08 14:01:11","endLine":256,"groupId":"5402","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"validateReceivedMessages","params":"(finalDeserializer<K>keyDeserializer@finalDeserializer<V>valueDeserializer@finalList<KeyValueTimestamp<K@V>>expectedRecords)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/b339689cbbae6d8976a2c853cb0429f8c983f5.src","preCode":"    private <K, V> void validateReceivedMessages(final Deserializer<K> keyDeserializer,\n                                                 final Deserializer<V> valueDeserializer,\n                                                 final List<KeyValueTimestamp<K, V>> expectedRecords)\n        throws InterruptedException {\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n\n        IntegrationTestUtils.waitUntilFinalKeyValueTimestampRecordsReceived(\n            consumerProperties,\n            outputTopic,\n            expectedRecords);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationDedupIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2020-05-08 14:01:11","commitOrder":7,"curCode":"    private <K, V> List<KeyValueTimestamp<K, V>> receiveMessages(final Deserializer<K> keyDeserializer,\n                                                                 final Deserializer<V> valueDeserializer,\n                                                                 final Class innerClass,\n                                                                 final int numMessages)\n            throws Exception {\n\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n        if (keyDeserializer instanceof TimeWindowedDeserializer || keyDeserializer instanceof SessionWindowedDeserializer) {\n            consumerProperties.setProperty(StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS,\n                    Serdes.serdeFrom(innerClass).getClass().getName());\n        }\n        return IntegrationTestUtils.waitUntilMinKeyValueWithTimestampRecordsReceived(\n                consumerProperties,\n                outputTopic,\n                numMessages,\n                60 * 1000);\n    }\n","date":"2020-05-08 14:01:11","endLine":838,"groupId":"5402","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"receiveMessages","params":"(finalDeserializer<K>keyDeserializer@finalDeserializer<V>valueDeserializer@finalClassinnerClass@finalintnumMessages)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7d/e4f62fe1142fadac28574d92290480ba27d3f8.src","preCode":"    private <K, V> List<KeyValueTimestamp<K, V>> receiveMessages(final Deserializer<K> keyDeserializer,\n                                                                 final Deserializer<V> valueDeserializer,\n                                                                 final Class innerClass,\n                                                                 final int numMessages) throws InterruptedException {\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n        if (keyDeserializer instanceof TimeWindowedDeserializer || keyDeserializer instanceof SessionWindowedDeserializer) {\n            consumerProperties.setProperty(StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS,\n                    Serdes.serdeFrom(innerClass).getClass().getName());\n        }\n        return IntegrationTestUtils.waitUntilMinKeyValueWithTimestampRecordsReceived(\n                consumerProperties,\n                outputTopic,\n                numMessages,\n                60 * 1000);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":816,"status":"M"}],"commitId":"611831b051080543d94ef5bea9b3aa02b4992140","commitMessage":"@@@KAFKA-9928: Fix flaky GlobalKTableEOSIntegrationTest (#8600)\n\nReviewer: Guozhang Wang <guozhang@confluent.io>","date":"2020-05-08 14:01:11","modifiedFileCount":"7","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-02-02 08:20:35","codes":[{"authorDate":"2020-05-08 14:01:11","commitOrder":8,"curCode":"    private <K, V> void validateReceivedMessages(final Deserializer<K> keyDeserializer,\n                                                 final Deserializer<V> valueDeserializer,\n                                                 final List<KeyValueTimestamp<K, V>> expectedRecords)\n            throws Exception {\n\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n\n        IntegrationTestUtils.waitUntilFinalKeyValueTimestampRecordsReceived(\n            consumerProperties,\n            outputTopic,\n            expectedRecords);\n    }\n","date":"2020-05-08 14:01:11","endLine":256,"groupId":"5402","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"validateReceivedMessages","params":"(finalDeserializer<K>keyDeserializer@finalDeserializer<V>valueDeserializer@finalList<KeyValueTimestamp<K@V>>expectedRecords)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/b339689cbbae6d8976a2c853cb0429f8c983f5.src","preCode":"    private <K, V> void validateReceivedMessages(final Deserializer<K> keyDeserializer,\n                                                 final Deserializer<V> valueDeserializer,\n                                                 final List<KeyValueTimestamp<K, V>> expectedRecords)\n            throws Exception {\n\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n\n        IntegrationTestUtils.waitUntilFinalKeyValueTimestampRecordsReceived(\n            consumerProperties,\n            outputTopic,\n            expectedRecords);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationDedupIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"N"},{"authorDate":"2021-02-02 08:20:35","commitOrder":8,"curCode":"    private <K, V> List<KeyValueTimestamp<K, V>> receiveMessages(final Deserializer<K> keyDeserializer,\n                                                                 final Deserializer<V> valueDeserializer,\n                                                                 final Class innerClass,\n                                                                 final int numMessages)\n            throws Exception {\n\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n        consumerProperties.put(StreamsConfig.WINDOW_SIZE_MS_CONFIG, 500L);\n        if (keyDeserializer instanceof TimeWindowedDeserializer || keyDeserializer instanceof SessionWindowedDeserializer) {\n            consumerProperties.setProperty(StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS,\n                    Serdes.serdeFrom(innerClass).getClass().getName());\n        }\n        return IntegrationTestUtils.waitUntilMinKeyValueWithTimestampRecordsReceived(\n                consumerProperties,\n                outputTopic,\n                numMessages,\n                60 * 1000);\n    }\n","date":"2021-02-02 08:20:35","endLine":1058,"groupId":"5402","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"receiveMessages","params":"(finalDeserializer<K>keyDeserializer@finalDeserializer<V>valueDeserializer@finalClassinnerClass@finalintnumMessages)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5c/886a562e5d65ac4a6e2790c43d9864840caa51.src","preCode":"    private <K, V> List<KeyValueTimestamp<K, V>> receiveMessages(final Deserializer<K> keyDeserializer,\n                                                                 final Deserializer<V> valueDeserializer,\n                                                                 final Class innerClass,\n                                                                 final int numMessages)\n            throws Exception {\n\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n        if (keyDeserializer instanceof TimeWindowedDeserializer || keyDeserializer instanceof SessionWindowedDeserializer) {\n            consumerProperties.setProperty(StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS,\n                    Serdes.serdeFrom(innerClass).getClass().getName());\n        }\n        return IntegrationTestUtils.waitUntilMinKeyValueWithTimestampRecordsReceived(\n                consumerProperties,\n                outputTopic,\n                numMessages,\n                60 * 1000);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1035,"status":"M"}],"commitId":"f5a2fbac6d26fc1613ec34d9764a1e86732f0a45","commitMessage":"@@@KAFKA-10366 & KAFKA-9649: Implement KIP-659 to allow TimeWindowedDeserializer and TimeWindowedSerde to handle window size (#9253)\n\nSee KIP details and discussions here: https://cwiki.apache.org/confluence/display/KAFKA/KIP-659%3A+Improve+TimeWindowedDeserializer+and+TimeWindowedSerde+to+handle+window+size\n\nDeprecates methods that allow users to skip setting a window size when one is needed. Adds a window size streams config to allow the timeWindowedDeserializer to calculate window end time.\n\nReviewers: Walker Carlson <wcarlson@confluent.io>.  John Roesler <vvcephei@apache.org>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-02-02 08:20:35","modifiedFileCount":"9","status":"M","submitter":"leah"},{"authorTime":"2021-05-18 01:17:31","codes":[{"authorDate":"2020-05-08 14:01:11","commitOrder":9,"curCode":"    private <K, V> void validateReceivedMessages(final Deserializer<K> keyDeserializer,\n                                                 final Deserializer<V> valueDeserializer,\n                                                 final List<KeyValueTimestamp<K, V>> expectedRecords)\n            throws Exception {\n\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n\n        IntegrationTestUtils.waitUntilFinalKeyValueTimestampRecordsReceived(\n            consumerProperties,\n            outputTopic,\n            expectedRecords);\n    }\n","date":"2020-05-08 14:01:11","endLine":256,"groupId":"102641","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"validateReceivedMessages","params":"(finalDeserializer<K>keyDeserializer@finalDeserializer<V>valueDeserializer@finalList<KeyValueTimestamp<K@V>>expectedRecords)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/b339689cbbae6d8976a2c853cb0429f8c983f5.src","preCode":"    private <K, V> void validateReceivedMessages(final Deserializer<K> keyDeserializer,\n                                                 final Deserializer<V> valueDeserializer,\n                                                 final List<KeyValueTimestamp<K, V>> expectedRecords)\n            throws Exception {\n\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n\n        IntegrationTestUtils.waitUntilFinalKeyValueTimestampRecordsReceived(\n            consumerProperties,\n            outputTopic,\n            expectedRecords);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationDedupIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"N"},{"authorDate":"2021-05-18 01:17:31","commitOrder":9,"curCode":"    private <K, V> List<KeyValueTimestamp<K, V>> receiveMessages(final Deserializer<K> keyDeserializer,\n                                                                 final Deserializer<V> valueDeserializer,\n                                                                 final Class innerClass,\n                                                                 final int numMessages)\n            throws Exception {\n\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n        consumerProperties.put(StreamsConfig.WINDOW_SIZE_MS_CONFIG, 500L);\n        if (keyDeserializer instanceof TimeWindowedDeserializer || keyDeserializer instanceof SessionWindowedDeserializer) {\n            consumerProperties.setProperty(StreamsConfig.WINDOWED_INNER_CLASS_SERDE,\n                Serdes.serdeFrom(innerClass).getClass().getName());\n        }\n        return IntegrationTestUtils.waitUntilMinKeyValueWithTimestampRecordsReceived(\n                consumerProperties,\n                outputTopic,\n                numMessages,\n                60 * 1000);\n    }\n","date":"2021-05-18 01:17:31","endLine":1069,"groupId":"102641","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"receiveMessages","params":"(finalDeserializer<K>keyDeserializer@finalDeserializer<V>valueDeserializer@finalClassinnerClass@finalintnumMessages)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b2/9e07256610e9d272d48a7ab879abbb662868fe.src","preCode":"    private <K, V> List<KeyValueTimestamp<K, V>> receiveMessages(final Deserializer<K> keyDeserializer,\n                                                                 final Deserializer<V> valueDeserializer,\n                                                                 final Class innerClass,\n                                                                 final int numMessages)\n            throws Exception {\n\n        final String safeTestName = safeUniqueTestName(getClass(), testName);\n        final Properties consumerProperties = new Properties();\n        consumerProperties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, CLUSTER.bootstrapServers());\n        consumerProperties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, \"group-\" + safeTestName);\n        consumerProperties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        consumerProperties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, keyDeserializer.getClass().getName());\n        consumerProperties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, valueDeserializer.getClass().getName());\n        consumerProperties.put(StreamsConfig.WINDOW_SIZE_MS_CONFIG, 500L);\n        if (keyDeserializer instanceof TimeWindowedDeserializer || keyDeserializer instanceof SessionWindowedDeserializer) {\n            consumerProperties.setProperty(StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS,\n                    Serdes.serdeFrom(innerClass).getClass().getName());\n        }\n        return IntegrationTestUtils.waitUntilMinKeyValueWithTimestampRecordsReceived(\n                consumerProperties,\n                outputTopic,\n                numMessages,\n                60 * 1000);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/KStreamAggregationIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1046,"status":"M"}],"commitId":"b9acc492a568ba869a8abdee0fa965f5f58c4de6","commitMessage":"@@@KAFKA-12313: KIP-725: Streamlining configs for Windowed Deserialisers (#10542)\n\nThis PR aims to streamline the configurations for WindowedDeserialisers as described in KIP-725. It deprecates default.windowed.key.serde.inner and default.windowed.value.serde.inner configs in StreamConfig and adds windowed.inner.class.serde. \n\nReviewers: Anna Sophie Blee-Goldman<ableegoldman@apache.org>","date":"2021-05-18 01:17:31","modifiedFileCount":"11","status":"M","submitter":"vamossagar12"}]
