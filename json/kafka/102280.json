[{"authorTime":"2020-06-17 22:24:07","codes":[{"authorDate":"2020-06-17 22:24:07","commitOrder":1,"curCode":"    public void shouldUnregisterMetricsInCloseClean() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.replay(stateManager);\n\n        task = createStandbyTask();\n        task.initializeIfNeeded();\n\n        task.suspend();\n        task.closeClean();\n        \r\n        \r\n        assertThat(getTaskMetrics(), empty());\n    }\n","date":"2020-06-17 22:24:07","endLine":399,"groupId":"17538","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUnregisterMetricsInCloseClean","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/82/f33c4697b9a3c8094913cb21bffcf0707c3b21.src","preCode":"    public void shouldUnregisterMetricsInCloseClean() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.replay(stateManager);\n\n        task = createStandbyTask();\n        task.initializeIfNeeded();\n\n        task.suspend();\n        task.closeClean();\n        \r\n        \r\n        assertThat(getTaskMetrics(), empty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StandbyTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":387,"status":"B"},{"authorDate":"2020-06-17 22:24:07","commitOrder":1,"curCode":"    public void shouldUnregisterMetricsInCloseDirty() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.replay(stateManager);\n\n        task = createStandbyTask();\n        task.initializeIfNeeded();\n\n        task.suspend();\n        task.closeDirty();\n\n        \r\n        \r\n        assertThat(getTaskMetrics(), empty());\n    }\n","date":"2020-06-17 22:24:07","endLine":415,"groupId":"17538","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUnregisterMetricsInCloseDirty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/82/f33c4697b9a3c8094913cb21bffcf0707c3b21.src","preCode":"    public void shouldUnregisterMetricsInCloseDirty() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.replay(stateManager);\n\n        task = createStandbyTask();\n        task.initializeIfNeeded();\n\n        task.suspend();\n        task.closeDirty();\n\n        \r\n        \r\n        assertThat(getTaskMetrics(), empty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StandbyTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"B"}],"commitId":"147ffb9a968d62ef78ac6b330a20023ed49ddbb8","commitMessage":"@@@KAFKA-10165: Remove Percentiles from e2e metrics (#8882)\n\n* Remove problematic Percentiles measurements until the implementation is fixed\n* Fix leaking e2e metrics when task is closed\n* Fix leaking metrics when tasks are recycled\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2020-06-17 22:24:07","modifiedFileCount":"12","status":"B","submitter":"John Roesler"},{"authorTime":"2020-06-27 06:11:56","codes":[{"authorDate":"2020-06-27 06:11:56","commitOrder":2,"curCode":"    public void shouldUnregisterMetricsInCloseClean() {\n        EasyMock.expect(stateManager.changelogOffsets()).andStubReturn(Collections.emptyMap());\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.replay(stateManager);\n\n        task = createStandbyTask();\n        task.initializeIfNeeded();\n\n        task.suspend();\n        task.closeClean();\n        \r\n        \r\n        assertThat(getTaskMetrics(), empty());\n    }\n","date":"2020-06-27 06:11:56","endLine":409,"groupId":"102280","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUnregisterMetricsInCloseClean","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ba/07d55c51c6d65ff36ad2f6f609a71d704af02f.src","preCode":"    public void shouldUnregisterMetricsInCloseClean() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.replay(stateManager);\n\n        task = createStandbyTask();\n        task.initializeIfNeeded();\n\n        task.suspend();\n        task.closeClean();\n        \r\n        \r\n        assertThat(getTaskMetrics(), empty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StandbyTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"M"},{"authorDate":"2020-06-27 06:11:56","commitOrder":2,"curCode":"    public void shouldUnregisterMetricsInCloseDirty() {\n        EasyMock.expect(stateManager.changelogOffsets()).andStubReturn(Collections.emptyMap());\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.replay(stateManager);\n\n        task = createStandbyTask();\n        task.initializeIfNeeded();\n\n        task.suspend();\n        task.closeDirty();\n\n        \r\n        \r\n        assertThat(getTaskMetrics(), empty());\n    }\n","date":"2020-06-27 06:11:56","endLine":426,"groupId":"102280","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUnregisterMetricsInCloseDirty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ba/07d55c51c6d65ff36ad2f6f609a71d704af02f.src","preCode":"    public void shouldUnregisterMetricsInCloseDirty() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.replay(stateManager);\n\n        task = createStandbyTask();\n        task.initializeIfNeeded();\n\n        task.suspend();\n        task.closeDirty();\n\n        \r\n        \r\n        assertThat(getTaskMetrics(), empty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StandbyTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"M"}],"commitId":"30df089631cf3c7667b609e2b9689cb02230c64e","commitMessage":"@@@KAFKA-10166: always write checkpoint before closing an (initialized) task (#8926)\n\nThis should address at least some of the excessive TaskCorruptedExceptions we've been seeing lately. Basically.  at the moment we only commit tasks if commitNeeded is true -- this seems obvious by definition. But the problem is we do some essential cleanup in postCommit that should always be done before a task is closed:\n\n* clear the PartitionGroup\n* write the checkpoint\n\nThe second is actually fine to skip when commitNeeded = false with ALOS.  as we will have already written a checkpoint during the last commit. But for EOS.  we only write the checkpoint before a close -- so even if there is no new pending data since the last commit.  we have to write the current offsets. If we don't.  the task will be assumed dirty and we will run into our friend the TaskCorruptedException during (re)initialization.\n\nTo fix this.  we should just always call prepareCommit and postCommit at the TaskManager level. Within the task.  it can decide whether or not to actually do something in those methods based on commitNeeded.\n\nOne subtle issue is that we still need to avoid checkpointing a task that was still in CREATED.  to avoid potentially overwriting an existing checkpoint with uninitialized empty offsets. Unfortunately we always suspend a task before closing and committing.  so we lose the information about whether the task as in CREATED or RUNNING/RESTORING by the time we get to the checkpoint. For this we introduce a special flag to keep track of whether a suspended task should actually be checkpointed or not\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-06-27 06:11:56","modifiedFileCount":"7","status":"M","submitter":"A. Sophie Blee-Goldman"}]
