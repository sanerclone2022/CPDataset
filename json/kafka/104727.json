[{"authorTime":"2015-11-09 14:11:03","codes":[{"authorDate":"2015-11-09 14:11:03","commitOrder":1,"curCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n\n        workerThread = PowerMock.createPartialMock(WorkerSinkTaskThread.class, new String[]{\"start\", \"awaitShutdown\"},\n                workerTask, \"mock-worker-thread\", time,\n                workerConfig);\n        PowerMock.expectPrivate(workerTask, \"createWorkerThread\")\n                .andReturn(workerThread);\n        workerThread.start();\n        PowerMock.expectLastCall();\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(Arrays.asList(TOPIC_PARTITION, TOPIC_PARTITION2, TOPIC_PARTITION3));\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION3)).andReturn(FIRST_OFFSET);\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","date":"2015-11-09 14:11:03","endLine":457,"groupId":"17509","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"expectInitializeTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/69/156310d294b2681705ed6a1bc0eef5a09fdb01.src","preCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n\n        workerThread = PowerMock.createPartialMock(WorkerSinkTaskThread.class, new String[]{\"start\", \"awaitShutdown\"},\n                workerTask, \"mock-worker-thread\", time,\n                workerConfig);\n        PowerMock.expectPrivate(workerTask, \"createWorkerThread\")\n                .andReturn(workerThread);\n        workerThread.start();\n        PowerMock.expectLastCall();\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(Arrays.asList(TOPIC_PARTITION, TOPIC_PARTITION2, TOPIC_PARTITION3));\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION3)).andReturn(FIRST_OFFSET);\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskThreadedTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":428,"status":"B"},{"authorDate":"2015-11-09 14:11:03","commitOrder":1,"curCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n        PowerMock.expectPrivate(workerTask, \"createWorkerThread\")\n                .andReturn(workerThread);\n        workerThread.start();\n        PowerMock.expectLastCall();\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(Arrays.asList(TOPIC_PARTITION, TOPIC_PARTITION2));\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","date":"2015-11-09 14:11:03","endLine":184,"groupId":"5090","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"expectInitializeTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/ec5a8360e338b4fc427b6e1f195346441c728b.src","preCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n        PowerMock.expectPrivate(workerTask, \"createWorkerThread\")\n                .andReturn(workerThread);\n        workerThread.start();\n        PowerMock.expectLastCall();\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(Arrays.asList(TOPIC_PARTITION, TOPIC_PARTITION2));\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"B"}],"commitId":"f2031d40639ef34c1591c22971394ef41c87652c","commitMessage":"@@@KAFKA-2774: Rename Copycat to Kafka Connect\n\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Gwen Shapira\n\nCloses #456 from ewencp/kafka-2774-rename-copycat\n","date":"2015-11-09 14:11:03","modifiedFileCount":"1","status":"B","submitter":"Ewen Cheslack-Postava"},{"authorTime":"2016-02-04 03:28:58","codes":[{"authorDate":"2016-02-04 03:28:58","commitOrder":2,"curCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","date":"2016-02-04 03:28:58","endLine":472,"groupId":"6541","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"expectInitializeTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3b/f653e98313648e5dce60b26d0ae1b71e887e7a.src","preCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n\n        workerThread = PowerMock.createPartialMock(WorkerSinkTaskThread.class, new String[]{\"start\", \"awaitShutdown\"},\n                workerTask, \"mock-worker-thread\", time,\n                workerConfig);\n        PowerMock.expectPrivate(workerTask, \"createWorkerThread\")\n                .andReturn(workerThread);\n        workerThread.start();\n        PowerMock.expectLastCall();\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(Arrays.asList(TOPIC_PARTITION, TOPIC_PARTITION2, TOPIC_PARTITION3));\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION3)).andReturn(FIRST_OFFSET);\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskThreadedTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"M"},{"authorDate":"2016-02-04 03:28:58","commitOrder":2,"curCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","date":"2016-02-04 03:28:58","endLine":219,"groupId":"6541","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"expectInitializeTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/04/b08b379d931eefaf74553d9e6f3732c432dc0c.src","preCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n        PowerMock.expectPrivate(workerTask, \"createWorkerThread\")\n                .andReturn(workerThread);\n        workerThread.start();\n        PowerMock.expectLastCall();\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        EasyMock.expect(consumer.poll(EasyMock.anyLong())).andAnswer(new IAnswer<ConsumerRecords<byte[], byte[]>>() {\n            @Override\n            public ConsumerRecords<byte[], byte[]> answer() throws Throwable {\n                rebalanceListener.getValue().onPartitionsAssigned(Arrays.asList(TOPIC_PARTITION, TOPIC_PARTITION2));\n                return ConsumerRecords.empty();\n            }\n        });\n        EasyMock.expect(consumer.position(TOPIC_PARTITION)).andReturn(FIRST_OFFSET);\n        EasyMock.expect(consumer.position(TOPIC_PARTITION2)).andReturn(FIRST_OFFSET);\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"}],"commitId":"1d80f563bcd043cd464003782802906b60a0ade8","commitMessage":"@@@KAFKA-3092: Replace SinkTask onPartitionsAssigned/onPartitionsRevoked with open/close\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Liquan Pei <liquanpei@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #815 from hachikuji/KAFKA-3092\n","date":"2016-02-04 03:28:58","modifiedFileCount":"9","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-04-21 05:09:59","codes":[{"authorDate":"2016-02-04 03:28:58","commitOrder":3,"curCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","date":"2016-02-04 03:28:58","endLine":472,"groupId":"6541","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"expectInitializeTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3b/f653e98313648e5dce60b26d0ae1b71e887e7a.src","preCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskThreadedTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":462,"status":"N"},{"authorDate":"2016-04-21 05:09:59","commitOrder":3,"curCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n        consumer.subscribe(EasyMock.eq(asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","date":"2016-04-21 05:09:59","endLine":306,"groupId":"6541","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"expectInitializeTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/5e30f2e5994bf70cda90a5a70ca7d78eaf52b0.src","preCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"}],"commitId":"c9485b78a6e43747daf1314ae9532839fb7bc810","commitMessage":"@@@KAFKA-2370: kafka connect pause/resume API\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Liquan Pei <liquanpei@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1087 from hachikuji/KAFKA-2370\n","date":"2016-04-21 05:09:59","modifiedFileCount":"29","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2018-11-30 15:38:50","codes":[{"authorDate":"2018-11-30 15:38:50","commitOrder":4,"curCode":"    private void expectInitializeTask() throws Exception {\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","date":"2018-11-30 15:38:50","endLine":519,"groupId":"104727","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"expectInitializeTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6e/2b01ce7bc195ba3757a0d53c0b0f2abf769d21.src","preCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n\n        consumer.subscribe(EasyMock.eq(Arrays.asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskThreadedTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"M"},{"authorDate":"2018-11-30 15:38:50","commitOrder":4,"curCode":"    private void expectInitializeTask() throws Exception {\n        consumer.subscribe(EasyMock.eq(asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","date":"2018-11-30 15:38:50","endLine":1263,"groupId":"104727","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"expectInitializeTask","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/047ff9ed5ceff0da0cef8be6dde765cbbc441c.src","preCode":"    private void expectInitializeTask() throws Exception {\n        PowerMock.expectPrivate(workerTask, \"createConsumer\").andReturn(consumer);\n        consumer.subscribe(EasyMock.eq(asList(TOPIC)), EasyMock.capture(rebalanceListener));\n        PowerMock.expectLastCall();\n\n        sinkTask.initialize(EasyMock.capture(sinkTaskContext));\n        PowerMock.expectLastCall();\n        sinkTask.start(TASK_PROPS);\n        PowerMock.expectLastCall();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerSinkTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1255,"status":"M"}],"commitId":"ace4dd00566afb7d04235bbbcc50097191af0fec","commitMessage":"@@@KAFKA-7551: Refactor to create producer & consumer in the worker\n\nThis is minor refactoring that brings in the creation of producer and consumer to the Worker. Currently.  the consumer is created in the WorkerSinkTask. This should not affect any functionality and it just makes the code structure easier to understand.\n\nAuthor: Magesh Nandakumar <magesh.n.kumar@gmail.com>\n\nReviewers: Ryanne Dolan <ryannedolan@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Robert Yokota <rayokota@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #5842 from mageshn/KAFKA-7551\n","date":"2018-11-30 15:38:50","modifiedFileCount":"6","status":"M","submitter":"Magesh Nandakumar"}]
