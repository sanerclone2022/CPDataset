[{"authorTime":"2020-02-07 07:28:19","codes":[{"authorDate":"2020-06-02 13:33:22","commitOrder":3,"curCode":"    public void shouldPollWithRightTimeout() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                return partitions.stream().collect(Collectors.toMap(Function.identity(), partition -> 11L));\n            }\n        };\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n\n        final StoreChangelogReader changelogReader =\n                new StoreChangelogReader(time, config, logContext, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore();\n\n        if (type == ACTIVE) {\n            assertEquals(Duration.ofMillis(config.getLong(StreamsConfig.POLL_MS_CONFIG)), consumer.lastPollTimeout());\n        } else {\n            assertEquals(Duration.ZERO, consumer.lastPollTimeout());\n        }\n    }\n","date":"2020-06-02 13:33:22","endLine":259,"groupId":"7896","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPollWithRightTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/69/56e79677673184f525d7e856cf3954cf4d3bce.src","preCode":"    public void shouldPollWithRightTimeout() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                return partitions.stream().collect(Collectors.toMap(Function.identity(), partition -> 11L));\n            }\n        };\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n\n        final StoreChangelogReader changelogReader =\n                new StoreChangelogReader(time, config, logContext, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore();\n\n        if (type == ACTIVE) {\n            assertEquals(Duration.ofMillis(config.getLong(StreamsConfig.POLL_MS_CONFIG)), consumer.lastPollTimeout());\n        } else {\n            assertEquals(Duration.ZERO, consumer.lastPollTimeout());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"B"},{"authorDate":"2020-02-07 07:28:19","commitOrder":3,"curCode":"    public void shouldRestoreFromBeginningAndCheckCompletion() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                return partitions.stream().collect(Collectors.toMap(Function.identity(), partition -> 11L));\n            }\n        };\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n\n        final StoreChangelogReader changelogReader = new StoreChangelogReader(time, config, logContext, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore();\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(0L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(5L, consumer.position(tp));\n        assertEquals(Collections.emptySet(), consumer.paused());\n\n        if (type == ACTIVE) {\n            assertEquals(11L, (long) changelogReader.changelogMetadata(tp).endOffset());\n\n            assertEquals(tp, callback.restoreTopicPartition);\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_START));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_END));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_BATCH));\n        } else {\n            assertNull(changelogReader.changelogMetadata(tp).endOffset());\n        }\n\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 6L, \"key\".getBytes(), \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 7L, \"key\".getBytes(), \"value\".getBytes()));\n        \r\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 8L, null, \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 9L, \"key\".getBytes(), \"value\".getBytes()));\n\n        changelogReader.restore();\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedRecords().size());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedLimitIndex());\n\n        \r\n        consumer.seek(tp, 11L);\n\n        changelogReader.restore();\n\n        assertEquals(11L, consumer.position(tp));\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n\n        if (type == ACTIVE) {\n            assertEquals(StoreChangelogReader.ChangelogState.COMPLETED, changelogReader.changelogMetadata(tp).state());\n            assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n            assertEquals(Collections.singleton(tp), changelogReader.completedChangelogs());\n            assertEquals(Collections.singleton(tp), consumer.paused());\n\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_BATCH));\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_END));\n        } else {\n            assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n            assertEquals(Collections.emptySet(), changelogReader.completedChangelogs());\n            assertEquals(Collections.emptySet(), consumer.paused());\n        }\n    }\n","date":"2020-02-07 07:28:18","endLine":351,"groupId":"7896","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldRestoreFromBeginningAndCheckCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/784eaea10b016f54a00eb7c39e9048025f805a.src","preCode":"    public void shouldRestoreFromBeginningAndCheckCompletion() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                return partitions.stream().collect(Collectors.toMap(Function.identity(), partition -> 11L));\n            }\n        };\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n\n        final StoreChangelogReader changelogReader = new StoreChangelogReader(time, config, logContext, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore();\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(0L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(5L, consumer.position(tp));\n        assertEquals(Collections.emptySet(), consumer.paused());\n\n        if (type == ACTIVE) {\n            assertEquals(11L, (long) changelogReader.changelogMetadata(tp).endOffset());\n\n            assertEquals(tp, callback.restoreTopicPartition);\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_START));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_END));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_BATCH));\n        } else {\n            assertNull(changelogReader.changelogMetadata(tp).endOffset());\n        }\n\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 6L, \"key\".getBytes(), \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 7L, \"key\".getBytes(), \"value\".getBytes()));\n        \r\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 8L, null, \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 9L, \"key\".getBytes(), \"value\".getBytes()));\n\n        changelogReader.restore();\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedRecords().size());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedLimitIndex());\n\n        \r\n        consumer.seek(tp, 11L);\n\n        changelogReader.restore();\n\n        assertEquals(11L, consumer.position(tp));\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n\n        if (type == ACTIVE) {\n            assertEquals(StoreChangelogReader.ChangelogState.COMPLETED, changelogReader.changelogMetadata(tp).state());\n            assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n            assertEquals(Collections.singleton(tp), changelogReader.completedChangelogs());\n            assertEquals(Collections.singleton(tp), consumer.paused());\n\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_BATCH));\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_END));\n        } else {\n            assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n            assertEquals(Collections.emptySet(), changelogReader.completedChangelogs());\n            assertEquals(Collections.emptySet(), consumer.paused());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"NB"}],"commitId":"07f66765396bffa7e45edeb141726a9a55ead7e0","commitMessage":"@@@MINOR: ChangelogReader should poll for duration 0 for standby restore (#8773)\n\nCo-authored-by: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-06-02 13:33:22","modifiedFileCount":"3","status":"M","submitter":"Rohan"},{"authorTime":"2020-06-19 02:28:49","codes":[{"authorDate":"2020-06-19 02:28:49","commitOrder":4,"curCode":"    public void shouldPollWithRightTimeout() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 11L));\n\n        final StoreChangelogReader changelogReader =\n                new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore();\n\n        if (type == ACTIVE) {\n            assertEquals(Duration.ofMillis(config.getLong(StreamsConfig.POLL_MS_CONFIG)), consumer.lastPollTimeout());\n        } else {\n            assertEquals(Duration.ZERO, consumer.lastPollTimeout());\n        }\n    }\n","date":"2020-06-19 02:28:49","endLine":247,"groupId":"7896","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPollWithRightTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ad/16cff17a20591e8f46036ce58b7cb82ae5669b.src","preCode":"    public void shouldPollWithRightTimeout() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                return partitions.stream().collect(Collectors.toMap(Function.identity(), partition -> 11L));\n            }\n        };\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n\n        final StoreChangelogReader changelogReader =\n                new StoreChangelogReader(time, config, logContext, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore();\n\n        if (type == ACTIVE) {\n            assertEquals(Duration.ofMillis(config.getLong(StreamsConfig.POLL_MS_CONFIG)), consumer.lastPollTimeout());\n        } else {\n            assertEquals(Duration.ZERO, consumer.lastPollTimeout());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2020-06-19 02:28:49","commitOrder":4,"curCode":"    public void shouldRestoreFromBeginningAndCheckCompletion() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 11L));\n\n        final StoreChangelogReader changelogReader =\n            new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore();\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(0L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(5L, consumer.position(tp));\n        assertEquals(Collections.emptySet(), consumer.paused());\n\n        if (type == ACTIVE) {\n            assertEquals(11L, (long) changelogReader.changelogMetadata(tp).endOffset());\n\n            assertEquals(tp, callback.restoreTopicPartition);\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_START));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_END));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_BATCH));\n        } else {\n            assertNull(changelogReader.changelogMetadata(tp).endOffset());\n        }\n\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 6L, \"key\".getBytes(), \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 7L, \"key\".getBytes(), \"value\".getBytes()));\n        \r\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 8L, null, \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 9L, \"key\".getBytes(), \"value\".getBytes()));\n\n        changelogReader.restore();\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedRecords().size());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedLimitIndex());\n\n        \r\n        consumer.seek(tp, 11L);\n\n        changelogReader.restore();\n\n        assertEquals(11L, consumer.position(tp));\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n\n        if (type == ACTIVE) {\n            assertEquals(StoreChangelogReader.ChangelogState.COMPLETED, changelogReader.changelogMetadata(tp).state());\n            assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n            assertEquals(Collections.singleton(tp), changelogReader.completedChangelogs());\n            assertEquals(Collections.singleton(tp), consumer.paused());\n\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_BATCH));\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_END));\n        } else {\n            assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n            assertEquals(Collections.emptySet(), changelogReader.completedChangelogs());\n            assertEquals(Collections.emptySet(), consumer.paused());\n        }\n    }\n","date":"2020-06-19 02:28:49","endLine":384,"groupId":"7896","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldRestoreFromBeginningAndCheckCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ad/16cff17a20591e8f46036ce58b7cb82ae5669b.src","preCode":"    public void shouldRestoreFromBeginningAndCheckCompletion() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        final MockConsumer<byte[], byte[]> consumer = new MockConsumer<byte[], byte[]>(OffsetResetStrategy.EARLIEST) {\n            @Override\n            public Map<TopicPartition, Long> endOffsets(final Collection<TopicPartition> partitions) {\n                return partitions.stream().collect(Collectors.toMap(Function.identity(), partition -> 11L));\n            }\n        };\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n\n        final StoreChangelogReader changelogReader =\n            new StoreChangelogReader(time, config, logContext, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore();\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(0L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(5L, consumer.position(tp));\n        assertEquals(Collections.emptySet(), consumer.paused());\n\n        if (type == ACTIVE) {\n            assertEquals(11L, (long) changelogReader.changelogMetadata(tp).endOffset());\n\n            assertEquals(tp, callback.restoreTopicPartition);\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_START));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_END));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_BATCH));\n        } else {\n            assertNull(changelogReader.changelogMetadata(tp).endOffset());\n        }\n\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 6L, \"key\".getBytes(), \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 7L, \"key\".getBytes(), \"value\".getBytes()));\n        \r\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 8L, null, \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 9L, \"key\".getBytes(), \"value\".getBytes()));\n\n        changelogReader.restore();\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedRecords().size());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedLimitIndex());\n\n        \r\n        consumer.seek(tp, 11L);\n\n        changelogReader.restore();\n\n        assertEquals(11L, consumer.position(tp));\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n\n        if (type == ACTIVE) {\n            assertEquals(StoreChangelogReader.ChangelogState.COMPLETED, changelogReader.changelogMetadata(tp).state());\n            assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n            assertEquals(Collections.singleton(tp), changelogReader.completedChangelogs());\n            assertEquals(Collections.singleton(tp), consumer.paused());\n\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_BATCH));\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_END));\n        } else {\n            assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n            assertEquals(Collections.emptySet(), changelogReader.completedChangelogs());\n            assertEquals(Collections.emptySet(), consumer.paused());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"}],"commitId":"d8cc6fe8e36329c647736773d9d66de89c447409","commitMessage":"@@@KAFKA-10167: use the admin client to read end-offset (#8876)\n\nSince admin client allows use to use flexible offset-spec.  we can always set to use read-uncommitted regardless of the EOS config.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-06-19 02:28:49","modifiedFileCount":"11","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-06-20 03:17:58","codes":[{"authorDate":"2020-06-20 03:17:58","commitOrder":5,"curCode":"    public void shouldPollWithRightTimeout() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(tp, 5L));\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 11L));\n\n        final StoreChangelogReader changelogReader =\n                new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore();\n\n        if (type == ACTIVE) {\n            assertEquals(Duration.ofMillis(config.getLong(StreamsConfig.POLL_MS_CONFIG)), consumer.lastPollTimeout());\n        } else {\n            assertEquals(Duration.ZERO, consumer.lastPollTimeout());\n        }\n    }\n","date":"2020-06-20 03:17:58","endLine":251,"groupId":"7896","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPollWithRightTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d8/2a4d1870cd36fa73cb8005012c814b7a391e5b.src","preCode":"    public void shouldPollWithRightTimeout() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 11L));\n\n        final StoreChangelogReader changelogReader =\n                new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore();\n\n        if (type == ACTIVE) {\n            assertEquals(Duration.ofMillis(config.getLong(StreamsConfig.POLL_MS_CONFIG)), consumer.lastPollTimeout());\n        } else {\n            assertEquals(Duration.ZERO, consumer.lastPollTimeout());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2020-06-20 03:17:58","commitOrder":5,"curCode":"    public void shouldRestoreFromBeginningAndCheckCompletion() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(tp, 5L));\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 11L));\n\n        final StoreChangelogReader changelogReader =\n            new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore();\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(0L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(5L, consumer.position(tp));\n        assertEquals(Collections.emptySet(), consumer.paused());\n\n        if (type == ACTIVE) {\n            assertEquals(11L, (long) changelogReader.changelogMetadata(tp).endOffset());\n\n            assertEquals(tp, callback.restoreTopicPartition);\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_START));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_END));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_BATCH));\n        } else {\n            assertNull(changelogReader.changelogMetadata(tp).endOffset());\n        }\n\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 6L, \"key\".getBytes(), \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 7L, \"key\".getBytes(), \"value\".getBytes()));\n        \r\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 8L, null, \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 9L, \"key\".getBytes(), \"value\".getBytes()));\n\n        changelogReader.restore();\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedRecords().size());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedLimitIndex());\n\n        \r\n        consumer.seek(tp, 11L);\n\n        changelogReader.restore();\n\n        assertEquals(11L, consumer.position(tp));\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n\n        if (type == ACTIVE) {\n            assertEquals(StoreChangelogReader.ChangelogState.COMPLETED, changelogReader.changelogMetadata(tp).state());\n            assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n            assertEquals(Collections.singleton(tp), changelogReader.completedChangelogs());\n            assertEquals(Collections.singleton(tp), consumer.paused());\n\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_BATCH));\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_END));\n        } else {\n            assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n            assertEquals(Collections.emptySet(), changelogReader.completedChangelogs());\n            assertEquals(Collections.emptySet(), consumer.paused());\n        }\n    }\n","date":"2020-06-20 03:17:58","endLine":390,"groupId":"7896","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldRestoreFromBeginningAndCheckCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d8/2a4d1870cd36fa73cb8005012c814b7a391e5b.src","preCode":"    public void shouldRestoreFromBeginningAndCheckCompletion() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 11L));\n\n        final StoreChangelogReader changelogReader =\n            new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore();\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(0L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(5L, consumer.position(tp));\n        assertEquals(Collections.emptySet(), consumer.paused());\n\n        if (type == ACTIVE) {\n            assertEquals(11L, (long) changelogReader.changelogMetadata(tp).endOffset());\n\n            assertEquals(tp, callback.restoreTopicPartition);\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_START));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_END));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_BATCH));\n        } else {\n            assertNull(changelogReader.changelogMetadata(tp).endOffset());\n        }\n\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 6L, \"key\".getBytes(), \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 7L, \"key\".getBytes(), \"value\".getBytes()));\n        \r\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 8L, null, \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 9L, \"key\".getBytes(), \"value\".getBytes()));\n\n        changelogReader.restore();\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedRecords().size());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedLimitIndex());\n\n        \r\n        consumer.seek(tp, 11L);\n\n        changelogReader.restore();\n\n        assertEquals(11L, consumer.position(tp));\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n\n        if (type == ACTIVE) {\n            assertEquals(StoreChangelogReader.ChangelogState.COMPLETED, changelogReader.changelogMetadata(tp).state());\n            assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n            assertEquals(Collections.singleton(tp), changelogReader.completedChangelogs());\n            assertEquals(Collections.singleton(tp), consumer.paused());\n\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_BATCH));\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_END));\n        } else {\n            assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n            assertEquals(Collections.emptySet(), changelogReader.completedChangelogs());\n            assertEquals(Collections.emptySet(), consumer.paused());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"}],"commitId":"68db063aa4918ac7dc40cb5c0be48ec731c160f7","commitMessage":"@@@KAFKA-10185: Restoration info logging (#8896)\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-06-20 03:17:58","modifiedFileCount":"3","status":"M","submitter":"John Roesler"},{"authorTime":"2020-10-20 02:07:56","codes":[{"authorDate":"2020-10-20 02:07:56","commitOrder":6,"curCode":"    public void shouldPollWithRightTimeout() {\n        final TaskId taskId = new TaskId(0, 0);\n\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(tp, 5L));\n        EasyMock.expect(stateManager.taskId()).andReturn(taskId);\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 11L));\n\n        final StoreChangelogReader changelogReader =\n                new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore(Collections.singletonMap(taskId, mock(Task.class)));\n\n        if (type == ACTIVE) {\n            assertEquals(Duration.ofMillis(config.getLong(StreamsConfig.POLL_MS_CONFIG)), consumer.lastPollTimeout());\n        } else {\n            assertEquals(Duration.ZERO, consumer.lastPollTimeout());\n        }\n    }\n","date":"2020-10-20 02:07:56","endLine":293,"groupId":"102475","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPollWithRightTimeout","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/98/5526d07d3d5bdddf588ebe7f5140fa5ec37688.src","preCode":"    public void shouldPollWithRightTimeout() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(tp, 5L));\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 11L));\n\n        final StoreChangelogReader changelogReader =\n                new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore();\n\n        if (type == ACTIVE) {\n            assertEquals(Duration.ofMillis(config.getLong(StreamsConfig.POLL_MS_CONFIG)), consumer.lastPollTimeout());\n        } else {\n            assertEquals(Duration.ZERO, consumer.lastPollTimeout());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2020-10-20 02:07:56","commitOrder":6,"curCode":"    public void shouldRestoreFromBeginningAndCheckCompletion() {\n        final TaskId taskId = new TaskId(0, 0);\n\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(tp, 5L));\n        EasyMock.expect(stateManager.taskId()).andReturn(taskId).anyTimes();\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 11L));\n\n        final StoreChangelogReader changelogReader =\n            new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore(Collections.singletonMap(taskId, mock(Task.class)));\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(0L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(5L, consumer.position(tp));\n        assertEquals(Collections.emptySet(), consumer.paused());\n\n        if (type == ACTIVE) {\n            assertEquals(11L, (long) changelogReader.changelogMetadata(tp).endOffset());\n\n            assertEquals(tp, callback.restoreTopicPartition);\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_START));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_END));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_BATCH));\n        } else {\n            assertNull(changelogReader.changelogMetadata(tp).endOffset());\n        }\n\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 6L, \"key\".getBytes(), \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 7L, \"key\".getBytes(), \"value\".getBytes()));\n        \r\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 8L, null, \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 9L, \"key\".getBytes(), \"value\".getBytes()));\n\n        changelogReader.restore(Collections.singletonMap(taskId, mock(Task.class)));\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedRecords().size());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedLimitIndex());\n\n        \r\n        consumer.seek(tp, 11L);\n\n        changelogReader.restore(Collections.singletonMap(taskId, mock(Task.class)));\n\n        assertEquals(11L, consumer.position(tp));\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n\n        if (type == ACTIVE) {\n            assertEquals(StoreChangelogReader.ChangelogState.COMPLETED, changelogReader.changelogMetadata(tp).state());\n            assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n            assertEquals(Collections.singleton(tp), changelogReader.completedChangelogs());\n            assertEquals(Collections.singleton(tp), consumer.paused());\n\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_BATCH));\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_END));\n        } else {\n            assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n            assertEquals(Collections.emptySet(), changelogReader.completedChangelogs());\n            assertEquals(Collections.emptySet(), consumer.paused());\n        }\n    }\n","date":"2020-10-20 02:07:56","endLine":437,"groupId":"102475","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldRestoreFromBeginningAndCheckCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/98/5526d07d3d5bdddf588ebe7f5140fa5ec37688.src","preCode":"    public void shouldRestoreFromBeginningAndCheckCompletion() {\n        EasyMock.expect(storeMetadata.offset()).andReturn(null).andReturn(9L).anyTimes();\n        EasyMock.expect(stateManager.changelogOffsets()).andReturn(singletonMap(tp, 5L));\n        EasyMock.replay(stateManager, storeMetadata, store);\n\n        consumer.updateBeginningOffsets(Collections.singletonMap(tp, 5L));\n        adminClient.updateEndOffsets(Collections.singletonMap(tp, 11L));\n\n        final StoreChangelogReader changelogReader =\n            new StoreChangelogReader(time, config, logContext, adminClient, consumer, callback);\n\n        changelogReader.register(tp, stateManager);\n\n        if (type == STANDBY) {\n            changelogReader.transitToUpdateStandby();\n        }\n\n        changelogReader.restore();\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(0L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(5L, consumer.position(tp));\n        assertEquals(Collections.emptySet(), consumer.paused());\n\n        if (type == ACTIVE) {\n            assertEquals(11L, (long) changelogReader.changelogMetadata(tp).endOffset());\n\n            assertEquals(tp, callback.restoreTopicPartition);\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_START));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_END));\n            assertNull(callback.storeNameCalledStates.get(RESTORE_BATCH));\n        } else {\n            assertNull(changelogReader.changelogMetadata(tp).endOffset());\n        }\n\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 6L, \"key\".getBytes(), \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 7L, \"key\".getBytes(), \"value\".getBytes()));\n        \r\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 8L, null, \"value\".getBytes()));\n        consumer.addRecord(new ConsumerRecord<>(topicName, 0, 9L, \"key\".getBytes(), \"value\".getBytes()));\n\n        changelogReader.restore();\n\n        assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedRecords().size());\n        assertEquals(0, changelogReader.changelogMetadata(tp).bufferedLimitIndex());\n\n        \r\n        consumer.seek(tp, 11L);\n\n        changelogReader.restore();\n\n        assertEquals(11L, consumer.position(tp));\n        assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n\n        if (type == ACTIVE) {\n            assertEquals(StoreChangelogReader.ChangelogState.COMPLETED, changelogReader.changelogMetadata(tp).state());\n            assertEquals(3L, changelogReader.changelogMetadata(tp).totalRestored());\n            assertEquals(Collections.singleton(tp), changelogReader.completedChangelogs());\n            assertEquals(Collections.singleton(tp), consumer.paused());\n\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_BATCH));\n            assertEquals(storeName, callback.storeNameCalledStates.get(RESTORE_END));\n        } else {\n            assertEquals(StoreChangelogReader.ChangelogState.RESTORING, changelogReader.changelogMetadata(tp).state());\n            assertEquals(Collections.emptySet(), changelogReader.completedChangelogs());\n            assertEquals(Collections.emptySet(), consumer.paused());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StoreChangelogReaderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"}],"commitId":"aef6cd6e9995b42db2cefa7d715321d0edee5628","commitMessage":"@@@KAFKA-9274: Add timeout handling for state restore and StandbyTasks (#9368)\n\n* Part of KIP-572\n* If a TimeoutException happens during restore of active tasks.  or updating standby tasks.  we need to trigger task.timeout.ms timeout.\n\nReviewers: John Roesler <john@confluent.io>","date":"2020-10-20 02:07:56","modifiedFileCount":"15","status":"M","submitter":"Matthias J. Sax"}]
