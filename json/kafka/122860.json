[{"authorTime":"2020-10-08 12:06:53","codes":[{"authorDate":"2020-10-08 12:06:53","commitOrder":1,"curCode":"    public void init(final StateStoreContext context,\n                     final StateStore root) {\n        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n        initStoreSerde(context);\n        taskId = context.taskId().toString();\n        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n\n        registerMetrics();\n        final Sensor restoreSensor =\n            StateStoreMetrics.restoreSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n\n        \r\n        maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n    }\n","date":"2020-10-08 12:06:53","endLine":104,"groupId":"12417","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"(finalStateStoreContextcontext@finalStateStoreroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/9256dc5d91ba2a8349ce9ab4852a0579b5e9c2.src","preCode":"    public void init(final StateStoreContext context,\n                     final StateStore root) {\n        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n        initStoreSerde(context);\n        taskId = context.taskId().toString();\n        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n\n        registerMetrics();\n        final Sensor restoreSensor =\n            StateStoreMetrics.restoreSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n\n        \r\n        maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2020-10-08 12:06:53","commitOrder":1,"curCode":"    public void init(final StateStoreContext context,\n                     final StateStore root) {\n        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n        initStoreSerde(context);\n        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n        taskId = context.taskId().toString();\n\n        registerMetrics();\n        final Sensor restoreSensor =\n            StateStoreMetrics.restoreSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n\n        \r\n        maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n    }\n","date":"2020-10-08 12:06:53","endLine":105,"groupId":"19018","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"(finalStateStoreContextcontext@finalStateStoreroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d4/7233b3b2251bfe329887a145853ae3232ea6da.src","preCode":"    public void init(final StateStoreContext context,\n                     final StateStore root) {\n        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n        initStoreSerde(context);\n        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n        taskId = context.taskId().toString();\n\n        registerMetrics();\n        final Sensor restoreSensor =\n            StateStoreMetrics.restoreSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n\n        \r\n        maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredWindowStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"}],"commitId":"2804257fe221f37e5098bd3f633a5d76ca890634","commitMessage":"@@@KAFKA-10562: Properly invoke new StateStoreContext init (#9388)\n\n* all wrapping stores should pass StateStoreContext init through to the same\n  method on the wrapped store and not translate it to ProcessorContext init\n* base-level stores should handle StateStoreContext init so that callers passing\n  a non-InternalProcessorContext implementation will be able to initialize the store\n* extra tests are added to verify the desired behavior\n\nReviewers: Guozhang Wang <guozhang@apache.org>","date":"2020-10-08 12:06:53","modifiedFileCount":"71","status":"B","submitter":"John Roesler"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":2,"curCode":"    public void init(final StateStoreContext context,\n                     final StateStore root) {\n        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n        initStoreSerde(context);\n        taskId = context.taskId().toString();\n        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n\n        registerMetrics();\n        final Sensor restoreSensor =\n            StateStoreMetrics.restoreSensor(taskId, metricsScope, name(), streamsMetrics);\n\n        \r\n        maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n    }\n","date":"2021-06-01 20:05:08","endLine":105,"groupId":"12470","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"(finalStateStoreContextcontext@finalStateStoreroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/448882777262efba4e33e6eaeee6612a0b1a87.src","preCode":"    public void init(final StateStoreContext context,\n                     final StateStore root) {\n        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n        initStoreSerde(context);\n        taskId = context.taskId().toString();\n        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n\n        registerMetrics();\n        final Sensor restoreSensor =\n            StateStoreMetrics.restoreSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n\n        \r\n        maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":2,"curCode":"    public void init(final StateStoreContext context,\n                     final StateStore root) {\n        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n        initStoreSerde(context);\n        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n        taskId = context.taskId().toString();\n\n        registerMetrics();\n        final Sensor restoreSensor =\n            StateStoreMetrics.restoreSensor(taskId, metricsScope, name(), streamsMetrics);\n\n        \r\n        maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n    }\n","date":"2021-06-01 20:05:08","endLine":111,"groupId":"14042","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"(finalStateStoreContextcontext@finalStateStoreroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0e/ecb7fa1b1dccb90f501f6b9501f500f41771a7.src","preCode":"    public void init(final StateStoreContext context,\n                     final StateStore root) {\n        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n        initStoreSerde(context);\n        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n        taskId = context.taskId().toString();\n\n        registerMetrics();\n        final Sensor restoreSensor =\n            StateStoreMetrics.restoreSensor(threadId, taskId, metricsScope, name(), streamsMetrics);\n\n        \r\n        maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredWindowStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-07-29 02:18:56","codes":[{"authorDate":"2021-07-29 02:18:56","commitOrder":3,"curCode":"    public void init(final StateStoreContext context,\n                     final StateStore root) {\n        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n        taskId = context.taskId();\n        initStoreSerde(context);\n        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n\n        registerMetrics();\n        final Sensor restoreSensor =\n            StateStoreMetrics.restoreSensor(taskId.toString(), metricsScope, name(), streamsMetrics);\n\n        \r\n        maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n    }\n","date":"2021-07-29 02:18:56","endLine":108,"groupId":"122860","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"(finalStateStoreContextcontext@finalStateStoreroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/6ec85fc26a04e44a7a3fa4e52ee6ca9de2414e.src","preCode":"    public void init(final StateStoreContext context,\n                     final StateStore root) {\n        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n        initStoreSerde(context);\n        taskId = context.taskId().toString();\n        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n\n        registerMetrics();\n        final Sensor restoreSensor =\n            StateStoreMetrics.restoreSensor(taskId, metricsScope, name(), streamsMetrics);\n\n        \r\n        maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredSessionStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2021-07-29 02:18:56","commitOrder":3,"curCode":"    public void init(final StateStoreContext context,\n                     final StateStore root) {\n        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n        taskId = context.taskId();\n        initStoreSerde(context);\n        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n\n        registerMetrics();\n        final Sensor restoreSensor =\n            StateStoreMetrics.restoreSensor(taskId.toString(), metricsScope, name(), streamsMetrics);\n\n        \r\n        maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n    }\n","date":"2021-07-29 02:18:56","endLine":111,"groupId":"122860","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"(finalStateStoreContextcontext@finalStateStoreroot)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bc/64db8214803faf6767abe026641366405e5f45.src","preCode":"    public void init(final StateStoreContext context,\n                     final StateStore root) {\n        this.context = context instanceof InternalProcessorContext ? (InternalProcessorContext) context : null;\n        initStoreSerde(context);\n        streamsMetrics = (StreamsMetricsImpl) context.metrics();\n        taskId = context.taskId().toString();\n\n        registerMetrics();\n        final Sensor restoreSensor =\n            StateStoreMetrics.restoreSensor(taskId, metricsScope, name(), streamsMetrics);\n\n        \r\n        maybeMeasureLatency(() -> super.init(context, root), time, restoreSensor);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredWindowStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"4710a491463a91ec12c670ea50c139fc14134e80","commitMessage":"@@@KAFKA-12648: Pt. 2 - Introduce TopologyMetadata to wrap InternalTopologyBuilders of named topologies (#10683)\n\nPt. 1: #10609\nPt. 2: #10683\nPt. 3: #10788\n\nThe TopologyMetadata is next up after Pt. 1 #10609. This PR sets up the basic architecture for running an app with multiple NamedTopologies.  though the APIs to add/remove them dynamically are not implemented until Pt. 3\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Walker Carlson <wcarlson@confluent.io>","date":"2021-07-29 02:18:56","modifiedFileCount":"56","status":"M","submitter":"A. Sophie Blee-Goldman"}]
