[{"authorTime":"2018-01-19 00:57:42","codes":[{"authorDate":"2018-01-19 00:57:42","commitOrder":1,"curCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .count(Materialized.<String, Long, KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","date":"2018-01-19 00:57:42","endLine":168,"groupId":"16682","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompactTopicsForKeyValueStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/69d180d243f0f4881501676aeeb3409129018f.src","preCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .count(Materialized.<String, Long, KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"B"},{"authorDate":"2018-01-19 00:57:42","commitOrder":1,"curCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        StreamsBuilder builder = new StreamsBuilder();\n        KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .windowedBy(TimeWindows.of(1000).until(2000))\n                .count(Materialized.<String, Long, WindowStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"CountWindows\"));\n\n        KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","date":"2018-01-19 00:57:42","endLine":217,"groupId":"16684","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompactAndDeleteTopicsForWindowStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/69d180d243f0f4881501676aeeb3409129018f.src","preCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        StreamsBuilder builder = new StreamsBuilder();\n        KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .windowedBy(TimeWindows.of(1000).until(2000))\n                .count(Materialized.<String, Long, WindowStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"CountWindows\"));\n\n        KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"B"}],"commitId":"e98162792684b0874c60003c6a596ec739c934a3","commitMessage":"@@@improve internal topic integration test (#4437)\n\nReviewers: Damian Guy <damian.guy@gmail.com>","date":"2018-01-19 00:57:42","modifiedFileCount":"1","status":"B","submitter":"Guozhang Wang"},{"authorTime":"2018-04-30 18:18:40","codes":[{"authorDate":"2018-04-30 18:18:40","commitOrder":2,"curCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .count(Materialized.<String, Long, KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-04-30 18:18:40","endLine":168,"groupId":"16682","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompactTopicsForKeyValueStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2d/9c8c4bdc929eb82224e66e1c2d274c5f8727f2.src","preCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .count(Materialized.<String, Long, KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"M"},{"authorDate":"2018-04-30 18:18:40","commitOrder":2,"curCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        StreamsBuilder builder = new StreamsBuilder();\n        KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .windowedBy(TimeWindows.of(1000).until(2000))\n                .count(Materialized.<String, Long, WindowStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"CountWindows\"));\n\n        KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-04-30 18:18:40","endLine":217,"groupId":"16684","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompactAndDeleteTopicsForWindowStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2d/9c8c4bdc929eb82224e66e1c2d274c5f8727f2.src","preCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        StreamsBuilder builder = new StreamsBuilder();\n        KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .windowedBy(TimeWindows.of(1000).until(2000))\n                .count(Materialized.<String, Long, WindowStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"CountWindows\"));\n\n        KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"}],"commitId":"6655a4d75f8d839c9f87e68fbda77ed0637825d2","commitMessage":"@@@KAFKA-6535: Set default retention ms for Streams repartition topics to Long.MAX_VALUE (#4730)\n\nImplements KIP-284\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-04-30 18:18:40","modifiedFileCount":"5","status":"M","submitter":"khairy"},{"authorTime":"2018-05-05 00:02:50","codes":[{"authorDate":"2018-05-05 00:02:50","commitOrder":3,"curCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .count(Materialized.<String, Long, KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-05-05 00:05:53","endLine":171,"groupId":"8362","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompactTopicsForKeyValueStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e8/ee50764a7101db918e765395d10a0d80ed69d6.src","preCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .count(Materialized.<String, Long, KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"},{"authorDate":"2018-05-05 00:02:50","commitOrder":3,"curCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        StreamsBuilder builder = new StreamsBuilder();\n        KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .windowedBy(TimeWindows.of(1000).until(2000))\n                .count(Materialized.<String, Long, WindowStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"CountWindows\"));\n\n        KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-05-05 00:05:53","endLine":221,"groupId":"4055","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompactAndDeleteTopicsForWindowStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e8/ee50764a7101db918e765395d10a0d80ed69d6.src","preCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        StreamsBuilder builder = new StreamsBuilder();\n        KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .windowedBy(TimeWindows.of(1000).until(2000))\n                .count(Materialized.<String, Long, WindowStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"CountWindows\"));\n\n        KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"M"}],"commitId":"2d8049b713f2b9982bd43e7340a0e0f302f30d6b","commitMessage":"@@@KAFKA-5697: issue Consumer#wakeup during Streams shutdown\n\nWakeup consumers during shutdown to break them out of any internally blocking calls.\n\nSemantically.  it should be fine to treat a WakeupException as \"no work to do\".  which will then continue the threads' polling loops.  leading them to discover that they are supposed to shut down.  which they will do gracefully.\n\nThe existing tests should be sufficient to verify no regressions.\n\nAuthor: John Roesler <john@confluent.io>\n\nReviewers: Bill Bejeck <bbejeck@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #4930 from vvcephei/streams-client-wakeup-on-shutdown\n\nminor javadoc updates\n","date":"2018-05-05 00:05:53","modifiedFileCount":"16","status":"M","submitter":"John Roesler"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2018-05-05 00:02:50","commitOrder":4,"curCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .count(Materialized.<String, Long, KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-05-05 00:05:53","endLine":171,"groupId":"8362","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompactTopicsForKeyValueStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e8/ee50764a7101db918e765395d10a0d80ed69d6.src","preCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .count(Materialized.<String, Long, KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"N"},{"authorDate":"2018-08-04 04:19:46","commitOrder":4,"curCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .windowedBy(TimeWindows.of(1000).until(2000))\n                .count(Materialized.<String, Long, WindowStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"CountWindows\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-08-04 04:19:46","endLine":229,"groupId":"4055","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompactAndDeleteTopicsForWindowStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/adc6e656c4f560af8019b966a4e98564ca070f.src","preCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        StreamsBuilder builder = new StreamsBuilder();\n        KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .windowedBy(TimeWindows.of(1000).until(2000))\n                .count(Materialized.<String, Long, WindowStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"CountWindows\"));\n\n        KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"}],"commitId":"3637b2c374d48e99e0a7be37605d3c79f2661007","commitMessage":"@@@MINOR: Require final variables in Streams (#5452)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-08-04 04:19:46","modifiedFileCount":"212","status":"M","submitter":"John Roesler"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2018-08-07 00:13:38","commitOrder":5,"curCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .count(Materialized.<String, Long, KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 10000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-08-07 00:13:38","endLine":179,"groupId":"8362","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompactTopicsForKeyValueStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a0/99ceab43f851d61477244cc5fa24009f30edef.src","preCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .count(Materialized.<String, Long, KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2018-08-04 04:19:46","commitOrder":5,"curCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .windowedBy(TimeWindows.of(1000).until(2000))\n                .count(Materialized.<String, Long, WindowStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"CountWindows\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-08-04 04:19:46","endLine":229,"groupId":"4055","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompactAndDeleteTopicsForWindowStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/adc6e656c4f560af8019b966a4e98564ca070f.src","preCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .windowedBy(TimeWindows.of(1000).until(2000))\n                .count(Materialized.<String, Long, WindowStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"CountWindows\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"N"}],"commitId":"e75048d3e5344187c3980a2a72793fa9ada3196a","commitMessage":"@@@MINOR: increase timeout values in streams tests (#5461)\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2018-08-07 00:13:38","modifiedFileCount":"2","status":"M","submitter":"Manikumar Reddy O"},{"authorTime":"2018-08-15 00:53:25","codes":[{"authorDate":"2018-08-07 00:13:38","commitOrder":6,"curCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .count(Materialized.<String, Long, KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 10000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-08-07 00:13:38","endLine":179,"groupId":"8362","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompactTopicsForKeyValueStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a0/99ceab43f851d61477244cc5fa24009f30edef.src","preCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .count(Materialized.<String, Long, KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 10000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"N"},{"authorDate":"2018-08-15 00:53:25","commitOrder":6,"curCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n            .groupBy(MockMapper.<String, String>selectValueMapper())\n            .windowedBy(TimeWindows.of(1000).grace(0L))\n            .count(\n                Materialized\n                    .<String, Long, WindowStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"CountWindows\")\n                    .withRetention(2_000L)\n            );\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-08-15 00:53:25","endLine":233,"groupId":"8363","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompactAndDeleteTopicsForWindowStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fe/7ee266657be40b4635da4e10b835a65609722f.src","preCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .windowedBy(TimeWindows.of(1000).until(2000))\n                .count(Materialized.<String, Long, WindowStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"CountWindows\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"}],"commitId":"b3771ba22acad7870e38ff7f58820c5b50946787","commitMessage":"@@@KAFKA-7222: Add Windows grace period (#5369)\n\nPart I of KIP-238:\n\n* add grace period to Windows\n* deprecate retention/maintainMs and segmentInterval from Windows\n* record expired records in the store with a new metric\n* record late record drops as a new metric instead of as a \"skipped record\"\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-08-15 00:53:25","modifiedFileCount":"39","status":"M","submitter":"John Roesler"},{"authorTime":"2018-08-18 00:35:38","codes":[{"authorDate":"2018-08-18 00:35:38","commitOrder":7,"curCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 10000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-08-18 00:35:38","endLine":173,"groupId":"14367","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompactTopicsForKeyValueStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/3c5a1c5088a65960217bed0e9ec46b1e8dd1bd.src","preCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n                .groupBy(MockMapper.<String, String>selectValueMapper())\n                .count(Materialized.<String, Long, KeyValueStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 10000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2018-08-18 00:35:38","commitOrder":7,"curCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(1000).grace(0L))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(2_000L));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-08-18 00:35:38","endLine":218,"groupId":"8363","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompactAndDeleteTopicsForWindowStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/3c5a1c5088a65960217bed0e9ec46b1e8dd1bd.src","preCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(new ValueMapper<String, Iterable<String>>() {\n            @Override\n            public Iterable<String> apply(final String value) {\n                return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\"));\n            }\n        })\n            .groupBy(MockMapper.<String, String>selectValueMapper())\n            .windowedBy(TimeWindows.of(1000).grace(0L))\n            .count(\n                Materialized\n                    .<String, Long, WindowStore<org.apache.kafka.common.utils.Bytes, byte[]>>as(\"CountWindows\")\n                    .withRetention(2_000L)\n            );\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"}],"commitId":"0d778987ee3b920b5c876696385c0792671adef8","commitMessage":"@@@KAFKA-6998: Disable Caching when max.cache.bytes are zero. (#5488)\n\n1) As titled.  add a rewriteTopology that 1) sets application id.  2) maybe disable caching.  3) adjust for source KTable. This optimization can hence be applied for both DSL or PAPI generated Topology.\n\n2) Defer the building of globalStateStores in rewriteTopology so that we can also disable caching. But we still need to build the state stores before InternalTopologyBuilder.build() since we should only build global stores once for all threads.\n\n3) Added withCachingDisabled to StoreBuilder.  it is a public API change.\n\n4) [Optional] Fixed unit test config setting functionalities.  and set the necessary config to shorten the unit test latency (now it reduces from 5min to 3.5min on my laptop).\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Ted Yu <yuzhihong@gmail.com>","date":"2018-08-18 00:35:38","modifiedFileCount":"59","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-10-05 04:51:39","codes":[{"authorDate":"2018-08-18 00:35:38","commitOrder":8,"curCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 10000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-08-18 00:35:38","endLine":173,"groupId":"14367","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompactTopicsForKeyValueStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/3c5a1c5088a65960217bed0e9ec46b1e8dd1bd.src","preCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 10000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"N"},{"authorDate":"2018-10-05 04:51:39","commitOrder":8,"curCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L)))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(ofSeconds(2L)));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-10-05 04:51:39","endLine":220,"groupId":"14368","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompactAndDeleteTopicsForWindowStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9b/d8c65c2dbc1658a005e346d8f51e721fa3fc63.src","preCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(1000).grace(0L))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(2_000L));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"}],"commitId":"ca641b3e2e48c14ff308181c775775408f5f35f7","commitMessage":"@@@KAFKA-7277: Migrate Streams API to Duration instead of longMs times (#5682)\n\nReviewers: Johne Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-10-05 04:51:39","modifiedFileCount":"97","status":"M","submitter":"Nikolay"},{"authorTime":"2018-10-28 11:07:40","codes":[{"authorDate":"2018-10-28 11:07:40","commitOrder":9,"curCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-10-28 11:07:40","endLine":175,"groupId":"14367","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompactTopicsForKeyValueStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/caf5d97ec6c04a801fa07e11636e4c087b7aa0.src","preCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 10000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2018-10-28 11:07:40","commitOrder":9,"curCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L)))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(ofSeconds(2L)));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","date":"2018-10-28 11:07:40","endLine":220,"groupId":"14368","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompactAndDeleteTopicsForWindowStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/caf5d97ec6c04a801fa07e11636e4c087b7aa0.src","preCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L)))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(ofSeconds(2L)));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 5000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"}],"commitId":"63715efa02861b25b3be84c2970342aebec7a439","commitMessage":"@@@MINOR: Bump timeout for sending records (#5843)\n\nReviewers: John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-10-28 11:07:40","modifiedFileCount":"2","status":"M","submitter":"Bill Bejeck"},{"authorTime":"2019-04-03 08:12:32","codes":[{"authorDate":"2019-04-03 08:12:32","commitOrder":10,"curCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(3, repartitionProps.size());\n    }\n","date":"2019-04-03 08:12:32","endLine":175,"groupId":"14367","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompactTopicsForKeyValueStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/34/5b581f22870184641ff561d435f63a6b63aeca.src","preCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"M"},{"authorDate":"2019-04-03 08:12:32","commitOrder":10,"curCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L)))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(ofSeconds(2L)));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(3, repartitionProps.size());\n    }\n","date":"2019-04-03 08:12:32","endLine":220,"groupId":"14368","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompactAndDeleteTopicsForWindowStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/34/5b581f22870184641ff561d435f63a6b63aeca.src","preCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L)))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(ofSeconds(2L)));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(5, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"}],"commitId":"213466b3d4fd21b332c0b6882fea36cf1affef1c","commitMessage":"@@@KAFKA-7190: KIP-443; Remove streams overrides on repartition topics (#6511)\n\n* remove streams overrides on segment.ms and segment.index.bytes\n\n* kip comments\n","date":"2019-04-03 08:12:32","modifiedFileCount":"4","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-01-08 04:52:40","codes":[{"authorDate":"2020-01-08 04:52:40","commitOrder":11,"curCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","date":"2020-01-08 04:52:40","endLine":174,"groupId":"14367","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompactTopicsForKeyValueStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/afabdc1a9d62c226d31f26930e3802a8eaf6e3.src","preCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(3, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2020-01-08 04:52:40","commitOrder":11,"curCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L)))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(ofSeconds(2L)));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","date":"2020-01-08 04:52:40","endLine":219,"groupId":"14368","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompactAndDeleteTopicsForWindowStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/afabdc1a9d62c226d31f26930e3802a8eaf6e3.src","preCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L)))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(ofSeconds(2L)));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(3, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"}],"commitId":"1513c817d4437300865b06bde2ae33210ae05ff9","commitMessage":"@@@KAFKA-6614: configure internal topics with message.timestamp.type=CreateTime by default (#7889)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2020-01-08 04:52:40","modifiedFileCount":"7","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-05-30 01:48:03","codes":[{"authorDate":"2020-05-30 01:48:03","commitOrder":12,"curCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000L);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","date":"2020-05-30 01:48:03","endLine":174,"groupId":"14367","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompactTopicsForKeyValueStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0a/7148189c197ed8e765f7a83fc411ec0d4e795a.src","preCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"M"},{"authorDate":"2020-05-30 01:48:03","commitOrder":12,"curCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L)))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(ofSeconds(2L)));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000L);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","date":"2020-05-30 01:48:03","endLine":219,"groupId":"21028","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompactAndDeleteTopicsForWindowStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0a/7148189c197ed8e765f7a83fc411ec0d4e795a.src","preCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L)))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(ofSeconds(2L)));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"}],"commitId":"9d52deca247d9e16cf530d655891b2bbe474ffae","commitMessage":"@@@KAFKA-9501: convert between active and standby without closing stores (#8248)\n\nThis PR has gone through several significant transitions of its own.  but here's the latest:\n\n* TaskManager just collects the tasks to transition and refers to the active/standby task creator to handle closing & recycling the old task and creating the new one. If we ever hit an exception during the close.  we bail and close all the remaining tasks as dirty.\n\n* The task creators tell the task to \"close but recycle state\". If this is successful.  it tells the recycled processor context and state manager that they should transition to the new type.\n\n* During \"close and recycle\" the task just does a normal clean close.  but instead of closing the state manager it informs it to recycle itself: maintain all of its store information (most importantly the current store offsets) but unregister the changelogs from the changelog reader\n\n* The new task will (re-)register its changelogs during initialization.  but skip re-registering any stores. It will still read the checkpoint file.  but only use the written offsets if the store offsets are not already initialized from pre-transition\n\n* To ensure we don't end up with manual compaction disabled for standbys.  we have to call the state restore listener's onRestoreEnd for any active restoring stores that are switching to standbys\n\nReviewers: John Roesler <vvcephei@apache.org>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-05-30 01:48:03","modifiedFileCount":"41","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-07-22 03:19:13","codes":[{"authorDate":"2020-07-22 03:19:13","commitOrder":13,"curCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000L);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","date":"2020-07-22 03:19:13","endLine":173,"groupId":"14367","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCompactTopicsForKeyValueStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/df/7ad0f2f76d49af6ac390b3f9d9000c47c45208.src","preCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000L);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"M"},{"authorDate":"2020-07-22 03:19:13","commitOrder":13,"curCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L)))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(ofSeconds(2L)));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000L);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","date":"2020-07-22 03:19:13","endLine":218,"groupId":"21028","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCompactAndDeleteTopicsForWindowStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/df/7ad0f2f76d49af6ac390b3f9d9000c47c45208.src","preCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L)))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(ofSeconds(2L)));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000L);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"}],"commitId":"194c56fce2e1b35b518f54ff0d2e5a1104a8126a","commitMessage":"@@@KAFKA-9274: Mark `retries` config as deprecated and add new `task.timeout.ms` config (#8864)\n\n - part of KIP-572\n - deprecates producer config `retries` (still in use)\n - deprecates admin config `retries` (still in use)\n - deprecates Kafka Streams config `retries` (will be ignored)\n - adds new Kafka Streams config `task.timeout.ms` (follow up PRs will leverage this new config)\n\nReviewers: John Roesler <john@confluent.io>.  Jason Gustafson <jason@confluent.io>.  Randall Hauch <randall@confluent.io>","date":"2020-07-22 03:19:13","modifiedFileCount":"23","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-07-29 02:18:56","codes":[{"authorDate":"2021-07-29 02:18:56","commitOrder":14,"curCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000L);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\", null));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","date":"2021-07-29 02:18:56","endLine":217,"groupId":"102767","id":27,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldCompactTopicsForKeyValueStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/29/c61ec764779d591479c0ffdf5ef3868fd09800.src","preCode":"    public void shouldCompactTopicsForKeyValueStoreChangelogs() {\n        final String appID = APP_ID + \"-compact\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .count(Materialized.as(\"Counts\"));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000L);\n        streams.close();\n\n        final Properties changelogProps = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"Counts\"));\n        assertEquals(LogConfig.Compact(), changelogProps.getProperty(LogConfig.CleanupPolicyProp()));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-Counts-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"},{"authorDate":"2021-07-29 02:18:56","commitOrder":14,"curCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L)))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(ofSeconds(2L)));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000L);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\", null));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","date":"2021-07-29 02:18:56","endLine":262,"groupId":"102767","id":28,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldCompactAndDeleteTopicsForWindowStoreChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/29/c61ec764779d591479c0ffdf5ef3868fd09800.src","preCode":"    public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() {\n        final String appID = APP_ID + \"-compact-delete\";\n        streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG, appID);\n\n        \r\n        \r\n        \r\n        final StreamsBuilder builder = new StreamsBuilder();\n        final KStream<String, String> textLines = builder.stream(DEFAULT_INPUT_TOPIC);\n\n        final int durationMs = 2000;\n\n        textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\"\\\\W+\")))\n            .groupBy(MockMapper.selectValueMapper())\n            .windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L)))\n            .count(Materialized.<String, Long, WindowStore<Bytes, byte[]>>as(\"CountWindows\").withRetention(ofSeconds(2L)));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), streamsProp);\n        streams.start();\n\n        \r\n        \r\n        \r\n        produceData(Arrays.asList(\"hello\", \"world\", \"world\", \"hello world\"));\n\n        \r\n        \r\n        \r\n        waitForCompletion(streams, 2, 30000L);\n        streams.close();\n        final Properties properties = getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID, \"CountWindows\"));\n        final List<String> policies = Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(\",\"));\n        assertEquals(2, policies.size());\n        assertTrue(policies.contains(LogConfig.Compact()));\n        assertTrue(policies.contains(LogConfig.Delete()));\n        \r\n        final long retention = TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS) + durationMs;\n        assertEquals(retention, Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));\n\n        final Properties repartitionProps = getTopicProperties(appID + \"-CountWindows-repartition\");\n        assertEquals(LogConfig.Delete(), repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));\n        assertEquals(4, repartitionProps.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/InternalTopicIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"}],"commitId":"4710a491463a91ec12c670ea50c139fc14134e80","commitMessage":"@@@KAFKA-12648: Pt. 2 - Introduce TopologyMetadata to wrap InternalTopologyBuilders of named topologies (#10683)\n\nPt. 1: #10609\nPt. 2: #10683\nPt. 3: #10788\n\nThe TopologyMetadata is next up after Pt. 1 #10609. This PR sets up the basic architecture for running an app with multiple NamedTopologies.  though the APIs to add/remove them dynamically are not implemented until Pt. 3\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Walker Carlson <wcarlson@confluent.io>","date":"2021-07-29 02:18:56","modifiedFileCount":"56","status":"M","submitter":"A. Sophie Blee-Goldman"}]
