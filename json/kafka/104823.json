[{"authorTime":"2020-06-11 16:29:23","codes":[{"authorDate":"2020-06-11 16:29:23","commitOrder":7,"curCode":"    public void testCreateConnectorFailedValidation() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        HashMap<String, String> config = new HashMap<>(CONN2_CONFIG);\n        config.remove(ConnectorConfig.NAME_CONFIG);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(config), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                \r\n                validateCallback.getValue().onCompletion(null, CONN2_INVALID_CONFIG_INFOS);\n                return null;\n            }\n        });\n\n        Capture<Throwable> error = newCapture();\n        putConnectorCallback.onCompletion(capture(error), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, config, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        assertTrue(error.hasCaptured());\n        assertTrue(error.getValue() instanceof BadRequestException);\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-11 16:29:23","endLine":708,"groupId":"11224","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnectorFailedValidation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/0f398c6b090c0ee7c57998a6ba113238e2190f.src","preCode":"    public void testCreateConnectorFailedValidation() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        HashMap<String, String> config = new HashMap<>(CONN2_CONFIG);\n        config.remove(ConnectorConfig.NAME_CONFIG);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(config), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                \r\n                validateCallback.getValue().onCompletion(null, CONN2_INVALID_CONFIG_INFOS);\n                return null;\n            }\n        });\n\n        Capture<Throwable> error = newCapture();\n        putConnectorCallback.onCompletion(capture(error), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, config, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        assertTrue(error.hasCaptured());\n        assertTrue(error.getValue() instanceof BadRequestException);\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":652,"status":"B"},{"authorDate":"2020-06-11 16:29:23","commitOrder":7,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN1_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                validateCallback.getValue().onCompletion(null, CONN1_CONFIG_INFOS);\n                return null;\n            }\n        });\n\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2020-06-11 16:29:23","endLine":776,"groupId":"6552","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/0f398c6b090c0ee7c57998a6ba113238e2190f.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN1_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                validateCallback.getValue().onCompletion(null, CONN1_CONFIG_INFOS);\n                return null;\n            }\n        });\n\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":729,"status":"MB"}],"commitId":"7f4fc76e968a6b2cf4a73364c93bfdea03f81af3","commitMessage":"@@@KAFKA-9374: Make connector interactions asynchronous (#8069)\n\nThese changes allow herders to continue to function even when a connector they are running hangs in its start.  stop.  initialize.  validate.  and/or config methods.\n\nThe main idea is to make these connector interactions asynchronous and accept a callback that can be invoked upon the completion (successful or otherwise) of these interactions. The distributed herder handles any follow-up logic by adding a new herder request to its queue in that callback.  which helps preserve some synchronization and ordering guarantees provided by the current tick model.\n\nIf any connector refuses to shut down within a graceful timeout period.  the framework will abandon it and potentially start a new connector in its place (in cases such as connector restart or reconfiguration).\n\nExisting unit tests for the distributed herder and worker have been modified to reflect these changes.  and a new integration test named `BlockingConnectorTest` has been added to ensure that they work in practice.\n\nReviewers: Greg Harris <gregh@confluent.io>.  Nigel Liang <nigel@nigelliang.com>.  Randall Hauch <rhauch@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>","date":"2020-06-11 16:29:23","modifiedFileCount":"18","status":"M","submitter":"Chris Egerton"},{"authorTime":"2021-02-05 01:15:49","codes":[{"authorDate":"2021-02-05 01:15:49","commitOrder":8,"curCode":"    public void testCreateConnectorFailedValidation() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        HashMap<String, String> config = new HashMap<>(CONN2_CONFIG);\n        config.remove(ConnectorConfig.NAME_CONFIG);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(config), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(() -> {\n            \r\n            validateCallback.getValue().onCompletion(null, CONN2_INVALID_CONFIG_INFOS);\n            return null;\n        });\n\n        Capture<Throwable> error = newCapture();\n        putConnectorCallback.onCompletion(capture(error), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, config, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        assertTrue(error.hasCaptured());\n        assertTrue(error.getValue() instanceof BadRequestException);\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 01:15:49","endLine":781,"groupId":"11224","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnectorFailedValidation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ad/cae27e5b53b24fe87045a24663a307a56809bb.src","preCode":"    public void testCreateConnectorFailedValidation() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        HashMap<String, String> config = new HashMap<>(CONN2_CONFIG);\n        config.remove(ConnectorConfig.NAME_CONFIG);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(config), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                \r\n                validateCallback.getValue().onCompletion(null, CONN2_INVALID_CONFIG_INFOS);\n                return null;\n            }\n        });\n\n        Capture<Throwable> error = newCapture();\n        putConnectorCallback.onCompletion(capture(error), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, config, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        assertTrue(error.hasCaptured());\n        assertTrue(error.getValue() instanceof BadRequestException);\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":728,"status":"M"},{"authorDate":"2021-02-05 01:15:49","commitOrder":8,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN1_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(() -> {\n            validateCallback.getValue().onCompletion(null, CONN1_CONFIG_INFOS);\n            return null;\n        });\n\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 01:15:49","endLine":846,"groupId":"6552","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ad/cae27e5b53b24fe87045a24663a307a56809bb.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN1_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(new IAnswer<Void>() {\n            @Override\n            public Void answer() throws Throwable {\n                validateCallback.getValue().onCompletion(null, CONN1_CONFIG_INFOS);\n                return null;\n            }\n        });\n\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":802,"status":"M"}],"commitId":"c19a35d1b740c85559a7ff4e882fc95b4737808d","commitMessage":"@@@KAFKA-10835: Replace Runnable and Callable overrides with lambdas in Connect (#9867)\n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 01:15:49","modifiedFileCount":"50","status":"M","submitter":"Lev Zemlyanov"},{"authorTime":"2021-02-05 09:08:56","codes":[{"authorDate":"2021-02-05 09:08:56","commitOrder":9,"curCode":"    public void testCreateConnectorFailedValidation() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.emptyList(), Collections.emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        HashMap<String, String> config = new HashMap<>(CONN2_CONFIG);\n        config.remove(ConnectorConfig.NAME_CONFIG);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(config), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(() -> {\n            \r\n            validateCallback.getValue().onCompletion(null, CONN2_INVALID_CONFIG_INFOS);\n            return null;\n        });\n\n        Capture<Throwable> error = newCapture();\n        putConnectorCallback.onCompletion(capture(error), EasyMock.isNull());\n        PowerMock.expectLastCall();\n\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, config, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        assertTrue(error.hasCaptured());\n        assertTrue(error.getValue() instanceof BadRequestException);\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 09:08:56","endLine":780,"groupId":"104823","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnectorFailedValidation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5b/ddcf76e3c103ea29beb2cb2dfd21f321ba25e9.src","preCode":"    public void testCreateConnectorFailedValidation() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        HashMap<String, String> config = new HashMap<>(CONN2_CONFIG);\n        config.remove(ConnectorConfig.NAME_CONFIG);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(config), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(() -> {\n            \r\n            validateCallback.getValue().onCompletion(null, CONN2_INVALID_CONFIG_INFOS);\n            return null;\n        });\n\n        Capture<Throwable> error = newCapture();\n        putConnectorCallback.onCompletion(capture(error), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN2, config, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        assertTrue(error.hasCaptured());\n        assertTrue(error.getValue() instanceof BadRequestException);\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":727,"status":"M"},{"authorDate":"2021-02-05 09:08:56","commitOrder":9,"curCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN1_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(() -> {\n            validateCallback.getValue().onCompletion(null, CONN1_CONFIG_INFOS);\n            return null;\n        });\n\n        expectRebalance(1, Collections.emptyList(), Collections.emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 09:08:56","endLine":845,"groupId":"104823","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateConnectorAlreadyExists","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5b/ddcf76e3c103ea29beb2cb2dfd21f321ba25e9.src","preCode":"    public void testCreateConnectorAlreadyExists() throws Exception {\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n\n        \r\n        \r\n        Capture<Callback<ConfigInfos>> validateCallback = newCapture();\n        herder.validateConnectorConfig(EasyMock.eq(CONN1_CONFIG), capture(validateCallback));\n        PowerMock.expectLastCall().andAnswer(() -> {\n            validateCallback.getValue().onCompletion(null, CONN1_CONFIG_INFOS);\n            return null;\n        });\n\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n\n        member.wakeup();\n        PowerMock.expectLastCall();\n        \r\n        putConnectorCallback.onCompletion(EasyMock.<AlreadyExistsException>anyObject(), EasyMock.<Herder.Created<ConnectorInfo>>isNull());\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n\n        PowerMock.replayAll();\n\n        herder.putConnectorConfig(CONN1, CONN1_CONFIG, false, putConnectorCallback);\n        herder.tick();\n        herder.tick();\n\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":801,"status":"M"}],"commitId":"07843cfbf4e3e7a2d26d63904bbf0da0fcd07ca2","commitMessage":"@@@KAFKA-10834: Remove redundant type casts in Connect (#10053)\n\nCleanup up to remove redundant type casts in Connect and use the diamond operator when needed \n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 09:08:56","modifiedFileCount":"41","status":"M","submitter":"Lev Zemlyanov"}]
