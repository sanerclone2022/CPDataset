[{"authorTime":"2017-11-29 01:37:27","codes":[{"authorDate":"2017-12-08 08:16:54","commitOrder":4,"curCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final String groupId = \"example-application\";\n        final String clientId = \"client\";\n        final Map<String, Object> returnedProps = streamsConfig.getConsumerConfigs(groupId, clientId);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(StreamPartitionAssignor.class.getName(), returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG));\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertEquals(10, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n    }\n","date":"2017-12-08 08:16:54","endLine":125,"groupId":"349","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"consumerConfigMustContainStreamPartitionAssignorConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a0/6f7e86d348013a41d8d35f9c1cad9b55f38c5c.src","preCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final String groupId = \"example-application\";\n        final String clientId = \"client\";\n        final Map<String, Object> returnedProps = streamsConfig.getConsumerConfigs(groupId, clientId);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(StreamPartitionAssignor.class.getName(), returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG));\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertEquals(10, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"B"},{"authorDate":"2017-11-29 01:37:27","commitOrder":4,"curCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2017-11-29 01:37:27","endLine":208,"groupId":"4308","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeSupportNonPrefixedConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1a/4cfb1d48156e273c7f4c78bf9235d02aed5c8b.src","preCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"NB"}],"commitId":"234ec8a8af76bfb7874dd99714a65089d6048953","commitMessage":"@@@KAFKA-4857: Replace StreamsKafkaClient with AdminClient in Kafka Streams\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Bill Bejeck <bbejeck@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #4242 from mjsax/kafka-4857-admit-client\n","date":"2017-12-08 08:16:54","modifiedFileCount":"18","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-11-29 01:37:27","codes":[{"authorDate":"2017-12-20 08:05:42","commitOrder":5,"curCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        props.put(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG), 5);\n        props.put(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG), 100);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final String groupId = \"example-application\";\n        final String clientId = \"client\";\n        final Map<String, Object> returnedProps = streamsConfig.getConsumerConfigs(groupId, clientId);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(StreamPartitionAssignor.class.getName(), returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG));\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertEquals(null, returnedProps.get(StreamsConfig.RETRIES_CONFIG));\n        assertEquals(5, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n        assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n    }\n","date":"2017-12-20 08:05:42","endLine":130,"groupId":"349","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"consumerConfigMustContainStreamPartitionAssignorConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1d/6b5a50117e887b98fd1a5de00b5b4547324ac3.src","preCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final String groupId = \"example-application\";\n        final String clientId = \"client\";\n        final Map<String, Object> returnedProps = streamsConfig.getConsumerConfigs(groupId, clientId);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(StreamPartitionAssignor.class.getName(), returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG));\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertEquals(10, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"M"},{"authorDate":"2017-11-29 01:37:27","commitOrder":5,"curCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2017-11-29 01:37:27","endLine":208,"groupId":"4308","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeSupportNonPrefixedConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1a/4cfb1d48156e273c7f4c78bf9235d02aed5c8b.src","preCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"N"}],"commitId":"82c6d429e70f1c782103953072dc6dbec650dd6e","commitMessage":"@@@KAFKA-6150: KIP-204 part III; Change repartition topic segment size and ms\n\n1. Create default internal topic configs in StreamsConfig.  especially for repartition topics change the segment size and time to smaller value.\n2. Consolidate the default internal topic settings to InternalTopicManager and simplify InternalTopicConfig correspondingly.\n3. Add an integration test for purging data.\n4. MINOR: change TopologyBuilderException to IllegalStateException in StreamPartitionAssignor (part of https://issues.apache.org/jira/browse/KAFKA-5660).\n\nHere are a few public facing APIs that get added:\n\n1. AbstractConfig#originalsWithPrefix(String prefix.  boolean strip): this for simplify the logic of passing admin and topic prefixed configs to consumer properties.\n2. KafkaStreams constructor with Time object for convienent mocking in tests.\n\nWill update KIP-204 accordingly if people re-votes these changes.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Damian Guy <damian.guy@gmail.com>\n\nCloses #4315 from guozhangwang/K6150-segment-size\n","date":"2017-12-20 08:05:42","modifiedFileCount":"18","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2017-11-29 01:37:27","codes":[{"authorDate":"2018-02-27 06:39:47","commitOrder":6,"curCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        props.put(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG), 5);\n        props.put(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG), 100);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final String groupId = \"example-application\";\n        final String clientId = \"client\";\n        final Map<String, Object> returnedProps = streamsConfig.getConsumerConfigs(groupId, clientId);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(StreamsPartitionAssignor.class.getName(), returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG));\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertEquals(null, returnedProps.get(StreamsConfig.RETRIES_CONFIG));\n        assertEquals(5, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n        assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n    }\n","date":"2018-02-27 06:39:47","endLine":128,"groupId":"349","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"consumerConfigMustContainStreamPartitionAssignorConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/03/09659042d0d692649ef90fba828ae23211ba8c.src","preCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        props.put(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG), 5);\n        props.put(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG), 100);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final String groupId = \"example-application\";\n        final String clientId = \"client\";\n        final Map<String, Object> returnedProps = streamsConfig.getConsumerConfigs(groupId, clientId);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(StreamPartitionAssignor.class.getName(), returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG));\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertEquals(null, returnedProps.get(StreamsConfig.RETRIES_CONFIG));\n        assertEquals(5, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n        assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2017-11-29 01:37:27","commitOrder":6,"curCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2017-11-29 01:37:27","endLine":208,"groupId":"4308","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeSupportNonPrefixedConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1a/4cfb1d48156e273c7f4c78bf9235d02aed5c8b.src","preCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":201,"status":"N"}],"commitId":"f26fbb9adcd66a31740da5c99f14a108bbc24304","commitMessage":"@@@MINOR: Rename stream partition assignor to streams partition assignor (#4621)\n\nThis is a straight-forward change that make the name of the partition assignor to be aligned with Streams.\n\nReviewers: Matthias J. Sax <mjsax@apache.org>","date":"2018-02-27 06:39:47","modifiedFileCount":"7","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-05-03 04:24:15","codes":[{"authorDate":"2018-05-03 04:24:15","commitOrder":7,"curCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        props.put(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG), 5);\n        props.put(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG), 100);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final String groupId = \"example-application\";\n        final String clientId = \"client\";\n        final Map<String, Object> returnedProps = streamsConfig.getMainConsumerConfigs(groupId, clientId);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(StreamsPartitionAssignor.class.getName(), returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG));\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertEquals(null, returnedProps.get(StreamsConfig.RETRIES_CONFIG));\n        assertEquals(5, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n        assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n    }\n","date":"2018-05-03 04:24:15","endLine":128,"groupId":"349","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"consumerConfigMustContainStreamPartitionAssignorConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/91b6ff89e5496eeeac5606076dd3563fee03e7.src","preCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        props.put(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG), 5);\n        props.put(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG), 100);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final String groupId = \"example-application\";\n        final String clientId = \"client\";\n        final Map<String, Object> returnedProps = streamsConfig.getConsumerConfigs(groupId, clientId);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(StreamsPartitionAssignor.class.getName(), returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG));\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertEquals(null, returnedProps.get(StreamsConfig.RETRIES_CONFIG));\n        assertEquals(5, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n        assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2018-05-03 04:24:15","commitOrder":7,"curCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2018-05-03 04:24:15","endLine":254,"groupId":"4308","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeSupportNonPrefixedConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/91b6ff89e5496eeeac5606076dd3563fee03e7.src","preCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"M"}],"commitId":"1b170df31c7304f6d4c938b5e0c2a09ae1e9189d","commitMessage":"@@@KAFKA-6657: Add StreamsConfig prefix for different consumers (#4805)\n\nThis pull request is for JIRA 6657.  for KIP-276.\n\nAdded unit tests for new getGlobalConsumerConfigs API and make sure existing restore consumer tests are passing.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-05-03 04:24:15","modifiedFileCount":"7","status":"M","submitter":"Boyang Chen"},{"authorTime":"2018-05-03 04:24:15","codes":[{"authorDate":"2018-11-16 05:26:58","commitOrder":8,"curCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        props.put(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG), 5);\n        props.put(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG), 100);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final String groupId = \"example-application\";\n        final String clientId = \"client\";\n        final Map<String, Object> returnedProps = streamsConfig.getMainConsumerConfigs(groupId, clientId);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(StreamsPartitionAssignor.class.getName(), returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG));\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertNull(returnedProps.get(StreamsConfig.RETRIES_CONFIG));\n        assertEquals(5, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n        assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n    }\n","date":"2018-11-16 05:26:58","endLine":129,"groupId":"349","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"consumerConfigMustContainStreamPartitionAssignorConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7b/34615cb391141580fd8c45090d540781ad14bf.src","preCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        props.put(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG), 5);\n        props.put(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG), 100);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final String groupId = \"example-application\";\n        final String clientId = \"client\";\n        final Map<String, Object> returnedProps = streamsConfig.getMainConsumerConfigs(groupId, clientId);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(StreamsPartitionAssignor.class.getName(), returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG));\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertEquals(null, returnedProps.get(StreamsConfig.RETRIES_CONFIG));\n        assertEquals(5, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n        assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2018-05-03 04:24:15","commitOrder":8,"curCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2018-05-03 04:24:15","endLine":254,"groupId":"4308","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeSupportNonPrefixedConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/91b6ff89e5496eeeac5606076dd3563fee03e7.src","preCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":247,"status":"N"}],"commitId":"d2f37944b6043ff443adbdf547d5bd335affbc1a","commitMessage":"@@@KAFKA-7584: StreamsConfig throws ClassCastException if max.in.flight.request.per.connect is specified as String (#5874)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-11-16 05:26:58","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-05-08 08:43:13","codes":[{"authorDate":"2019-05-08 08:43:13","commitOrder":9,"curCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        props.put(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG), 5);\n        props.put(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG), 100);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> returnedProps = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(StreamsPartitionAssignor.class.getName(), returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG));\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertNull(returnedProps.get(StreamsConfig.RETRIES_CONFIG));\n        assertEquals(5, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n        assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n    }\n","date":"2019-05-08 08:43:13","endLine":135,"groupId":"13999","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"consumerConfigMustContainStreamPartitionAssignorConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/02c93cec776a0a5aeacc6ff5debabb169bd528.src","preCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        props.put(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG), 5);\n        props.put(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG), 100);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n\n        final String groupId = \"example-application\";\n        final String clientId = \"client\";\n        final Map<String, Object> returnedProps = streamsConfig.getMainConsumerConfigs(groupId, clientId);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(StreamsPartitionAssignor.class.getName(), returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG));\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertNull(returnedProps.get(StreamsConfig.RETRIES_CONFIG));\n        assertEquals(5, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n        assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2019-05-08 08:43:13","commitOrder":9,"curCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2019-05-08 08:43:13","endLine":257,"groupId":"22669","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeSupportNonPrefixedConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/02c93cec776a0a5aeacc6ff5debabb169bd528.src","preCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"}],"commitId":"b0e82a68b34512d23a5a60a9b5da0db86eb880b2","commitMessage":"@@@KAFKA-8284: enable static membership on KStream (#6673)\n\nPart of KIP-345 effort. The strategy is to extract user passed in group.instance.id config and pass it in with given thread-id (because consumer is currently per-thread level).\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-08 08:43:13","modifiedFileCount":"31","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-05-08 08:43:13","codes":[{"authorDate":"2020-05-28 02:50:12","commitOrder":10,"curCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.ACCEPTABLE_RECOVERY_LAG_CONFIG, 99L);\n        props.put(StreamsConfig.MAX_WARMUP_REPLICAS_CONFIG, 9);\n        props.put(StreamsConfig.PROBING_REBALANCE_INTERVAL_MS_CONFIG, 99_999L);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        props.put(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG), 5);\n        props.put(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG), 100);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> returnedProps = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(99L, returnedProps.get(StreamsConfig.ACCEPTABLE_RECOVERY_LAG_CONFIG));\n        assertEquals(9, returnedProps.get(StreamsConfig.MAX_WARMUP_REPLICAS_CONFIG));\n        assertEquals(99_999L, returnedProps.get(StreamsConfig.PROBING_REBALANCE_INTERVAL_MS_CONFIG));\n        assertEquals(\n            StreamsPartitionAssignor.class.getName(),\n            returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG)\n        );\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertNull(returnedProps.get(StreamsConfig.RETRIES_CONFIG));\n        assertEquals(5, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n        assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n    }\n","date":"2020-05-28 02:50:12","endLine":191,"groupId":"22668","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"consumerConfigMustContainStreamPartitionAssignorConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/d2881320d58683c6198421fcb1dfc0fadc7e40.src","preCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        props.put(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG), 5);\n        props.put(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG), 100);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> returnedProps = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(\n            StreamsPartitionAssignor.class.getName(),\n            returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG)\n        );\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertNull(returnedProps.get(StreamsConfig.RETRIES_CONFIG));\n        assertEquals(5, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n        assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2019-05-08 08:43:13","commitOrder":10,"curCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2019-05-08 08:43:13","endLine":257,"groupId":"22669","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeSupportNonPrefixedConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/02c93cec776a0a5aeacc6ff5debabb169bd528.src","preCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"N"}],"commitId":"2cff1fab3f1c20f464f75f32b6138707050199b5","commitMessage":"@@@KAFKA-6145: KIP-441: Fix assignor config passthough (#8716)\n\nAlso fixes a system test by configuring the HATA to perform a one-shot balanced assignment\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>","date":"2020-05-28 02:50:12","modifiedFileCount":"12","status":"M","submitter":"John Roesler"},{"authorTime":"2019-05-08 08:43:13","codes":[{"authorDate":"2020-08-07 02:28:07","commitOrder":11,"curCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.ACCEPTABLE_RECOVERY_LAG_CONFIG, 99L);\n        props.put(StreamsConfig.MAX_WARMUP_REPLICAS_CONFIG, 9);\n        props.put(StreamsConfig.PROBING_REBALANCE_INTERVAL_MS_CONFIG, 99_999L);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG), 100);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> returnedProps = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(99L, returnedProps.get(StreamsConfig.ACCEPTABLE_RECOVERY_LAG_CONFIG));\n        assertEquals(9, returnedProps.get(StreamsConfig.MAX_WARMUP_REPLICAS_CONFIG));\n        assertEquals(99_999L, returnedProps.get(StreamsConfig.PROBING_REBALANCE_INTERVAL_MS_CONFIG));\n        assertEquals(\n            StreamsPartitionAssignor.class.getName(),\n            returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG)\n        );\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n    }\n","date":"2020-08-07 02:28:07","endLine":187,"groupId":"102771","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"consumerConfigMustContainStreamPartitionAssignorConfig","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/66/703a4ac029049c674d32681563578f09b0d7d9.src","preCode":"    public void consumerConfigMustContainStreamPartitionAssignorConfig() {\n        props.put(StreamsConfig.REPLICATION_FACTOR_CONFIG, 42);\n        props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG, 1);\n        props.put(StreamsConfig.ACCEPTABLE_RECOVERY_LAG_CONFIG, 99L);\n        props.put(StreamsConfig.MAX_WARMUP_REPLICAS_CONFIG, 9);\n        props.put(StreamsConfig.PROBING_REBALANCE_INTERVAL_MS_CONFIG, 99_999L);\n        props.put(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG, 7L);\n        props.put(StreamsConfig.APPLICATION_SERVER_CONFIG, \"dummy:host\");\n        props.put(StreamsConfig.RETRIES_CONFIG, 10);\n        props.put(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG), 5);\n        props.put(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG), 100);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> returnedProps = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n\n        assertEquals(42, returnedProps.get(StreamsConfig.REPLICATION_FACTOR_CONFIG));\n        assertEquals(1, returnedProps.get(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG));\n        assertEquals(99L, returnedProps.get(StreamsConfig.ACCEPTABLE_RECOVERY_LAG_CONFIG));\n        assertEquals(9, returnedProps.get(StreamsConfig.MAX_WARMUP_REPLICAS_CONFIG));\n        assertEquals(99_999L, returnedProps.get(StreamsConfig.PROBING_REBALANCE_INTERVAL_MS_CONFIG));\n        assertEquals(\n            StreamsPartitionAssignor.class.getName(),\n            returnedProps.get(ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG)\n        );\n        assertEquals(7L, returnedProps.get(StreamsConfig.WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG));\n        assertEquals(\"dummy:host\", returnedProps.get(StreamsConfig.APPLICATION_SERVER_CONFIG));\n        assertNull(returnedProps.get(StreamsConfig.RETRIES_CONFIG));\n        assertEquals(5, returnedProps.get(StreamsConfig.adminClientPrefix(StreamsConfig.RETRIES_CONFIG)));\n        assertEquals(100, returnedProps.get(StreamsConfig.topicPrefix(TopicConfig.SEGMENT_BYTES_CONFIG)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2019-05-08 08:43:13","commitOrder":11,"curCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2019-05-08 08:43:13","endLine":257,"groupId":"102771","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldBeSupportNonPrefixedConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/02c93cec776a0a5aeacc6ff5debabb169bd528.src","preCode":"    public void shouldBeSupportNonPrefixedConsumerConfigs() {\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"N"}],"commitId":"990301323cc5a774e17b0a5d373aff8439cda489","commitMessage":"@@@KAFKA-9274: Remove `retries` from InternalTopicManager (#9060)\n\n - part of KIP-572\n - replace `retries` in InternalTopicManager with infinite retires plus a new timeout.  based on consumer config MAX_POLL_INTERVAL_MS\n\nReviewers: David Jacot <djacot@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-08-07 02:28:07","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"}]
