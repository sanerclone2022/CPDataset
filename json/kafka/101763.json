[{"authorTime":"2017-01-07 02:12:30","codes":[{"authorDate":"2017-01-07 02:12:30","commitOrder":1,"curCode":"    public void shouldHandleMultipleSessionsAndMerging() throws Exception {\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n        processor.process(\"d\", \"1\");\n        context.setTime(GAP_MS / 2);\n        processor.process(\"d\", \"2\");\n        context.setTime(GAP_MS + 1);\n        processor.process(\"a\", \"2\");\n        processor.process(\"b\", \"2\");\n        context.setTime(GAP_MS + 1 + GAP_MS / 2);\n        processor.process(\"a\", \"3\");\n        processor.process(\"c\", \"3\");\n\n        sessionStore.flush();\n\n        assertEquals(Arrays.asList(KeyValue.pair(new Windowed<>(\"a\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"d\", new TimeWindow(0, GAP_MS / 2)), new Change<>(2L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new TimeWindow(GAP_MS + 1, GAP_MS + 1)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"a\", new TimeWindow(GAP_MS + 1, GAP_MS + 1 + GAP_MS / 2)), new Change<>(2L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new TimeWindow(GAP_MS + 1 + GAP_MS / 2, GAP_MS + 1 + GAP_MS / 2)), new Change<>(1L, null))\n                     ),\n                     results);\n    }\n","date":"2017-01-07 02:12:30","endLine":238,"groupId":"17543","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldHandleMultipleSessionsAndMerging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/07c3eafaf5145126d0ec67aef506b36b8efe63.src","preCode":"    public void shouldHandleMultipleSessionsAndMerging() throws Exception {\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n        processor.process(\"d\", \"1\");\n        context.setTime(GAP_MS / 2);\n        processor.process(\"d\", \"2\");\n        context.setTime(GAP_MS + 1);\n        processor.process(\"a\", \"2\");\n        processor.process(\"b\", \"2\");\n        context.setTime(GAP_MS + 1 + GAP_MS / 2);\n        processor.process(\"a\", \"3\");\n        processor.process(\"c\", \"3\");\n\n        sessionStore.flush();\n\n        assertEquals(Arrays.asList(KeyValue.pair(new Windowed<>(\"a\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"d\", new TimeWindow(0, GAP_MS / 2)), new Change<>(2L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new TimeWindow(GAP_MS + 1, GAP_MS + 1)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"a\", new TimeWindow(GAP_MS + 1, GAP_MS + 1 + GAP_MS / 2)), new Change<>(2L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new TimeWindow(GAP_MS + 1 + GAP_MS / 2, GAP_MS + 1 + GAP_MS / 2)), new Change<>(1L, null))\n                     ),\n                     results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSessionWindowAggregateProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"B"},{"authorDate":"2017-01-07 02:12:30","commitOrder":1,"curCode":"    public void shouldImmediatelyForwardNewSessionWhenNonCachedStore() throws Exception {\n        initStore(false);\n        processor.init(context);\n\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n\n        assertEquals(Arrays.asList(KeyValue.pair(new Windowed<>(\"a\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new TimeWindow(0, 0)), new Change<>(1L, null))), results);\n    }\n","date":"2017-01-07 02:12:30","endLine":269,"groupId":"11648","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldImmediatelyForwardNewSessionWhenNonCachedStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/07c3eafaf5145126d0ec67aef506b36b8efe63.src","preCode":"    public void shouldImmediatelyForwardNewSessionWhenNonCachedStore() throws Exception {\n        initStore(false);\n        processor.init(context);\n\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n\n        assertEquals(Arrays.asList(KeyValue.pair(new Windowed<>(\"a\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new TimeWindow(0, 0)), new Change<>(1L, null))), results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSessionWindowAggregateProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":257,"status":"B"}],"commitId":"e0de3a4211a3701c98230b115fadfb67b655e3cf","commitMessage":"@@@KAFKA-3452: Support session windows\n\nAdd support for SessionWindows based on design detailed in https://cwiki.apache.org/confluence/display/KAFKA/KIP-94+Session+Windows.\nThis includes refactoring of the RocksDBWindowStore such that functionality common with the RocksDBSessionStore isn't duplicated.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Eno Thereska <eno.thereska@gmail.com>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #2166 from dguy/kafka-3452-session-merge\n","date":"2017-01-07 02:12:30","modifiedFileCount":"45","status":"B","submitter":"Damian Guy"},{"authorTime":"2017-01-12 12:33:42","codes":[{"authorDate":"2017-01-12 12:33:42","commitOrder":2,"curCode":"    public void shouldHandleMultipleSessionsAndMerging() throws Exception {\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n        processor.process(\"d\", \"1\");\n        context.setTime(GAP_MS / 2);\n        processor.process(\"d\", \"2\");\n        context.setTime(GAP_MS + 1);\n        processor.process(\"a\", \"2\");\n        processor.process(\"b\", \"2\");\n        context.setTime(GAP_MS + 1 + GAP_MS / 2);\n        processor.process(\"a\", \"3\");\n        processor.process(\"c\", \"3\");\n\n        sessionStore.flush();\n\n        assertEquals(Arrays.asList(KeyValue.pair(new Windowed<>(\"a\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"d\", new SessionWindow(0, GAP_MS / 2)), new Change<>(2L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new SessionWindow(GAP_MS + 1, GAP_MS + 1)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"a\", new SessionWindow(GAP_MS + 1, GAP_MS + 1 + GAP_MS / 2)), new Change<>(2L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new SessionWindow(GAP_MS + 1 + GAP_MS / 2, GAP_MS + 1 + GAP_MS / 2)), new Change<>(1L, null))\n                     ),\n                     results);\n    }\n","date":"2017-01-12 12:33:42","endLine":241,"groupId":"17543","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldHandleMultipleSessionsAndMerging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/368a116a90ff6a27d4e9fbd5120e73a87f1660.src","preCode":"    public void shouldHandleMultipleSessionsAndMerging() throws Exception {\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n        processor.process(\"d\", \"1\");\n        context.setTime(GAP_MS / 2);\n        processor.process(\"d\", \"2\");\n        context.setTime(GAP_MS + 1);\n        processor.process(\"a\", \"2\");\n        processor.process(\"b\", \"2\");\n        context.setTime(GAP_MS + 1 + GAP_MS / 2);\n        processor.process(\"a\", \"3\");\n        processor.process(\"c\", \"3\");\n\n        sessionStore.flush();\n\n        assertEquals(Arrays.asList(KeyValue.pair(new Windowed<>(\"a\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"d\", new TimeWindow(0, GAP_MS / 2)), new Change<>(2L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new TimeWindow(GAP_MS + 1, GAP_MS + 1)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"a\", new TimeWindow(GAP_MS + 1, GAP_MS + 1 + GAP_MS / 2)), new Change<>(2L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new TimeWindow(GAP_MS + 1 + GAP_MS / 2, GAP_MS + 1 + GAP_MS / 2)), new Change<>(1L, null))\n                     ),\n                     results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSessionWindowAggregateProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2017-01-12 12:33:42","commitOrder":2,"curCode":"    public void shouldImmediatelyForwardNewSessionWhenNonCachedStore() throws Exception {\n        initStore(false);\n        processor.init(context);\n\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n\n        assertEquals(Arrays.asList(KeyValue.pair(new Windowed<>(\"a\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new SessionWindow(0, 0)), new Change<>(1L, null))), results);\n    }\n","date":"2017-01-12 12:33:42","endLine":272,"groupId":"11648","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldImmediatelyForwardNewSessionWhenNonCachedStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/368a116a90ff6a27d4e9fbd5120e73a87f1660.src","preCode":"    public void shouldImmediatelyForwardNewSessionWhenNonCachedStore() throws Exception {\n        initStore(false);\n        processor.init(context);\n\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n\n        assertEquals(Arrays.asList(KeyValue.pair(new Windowed<>(\"a\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new TimeWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new TimeWindow(0, 0)), new Change<>(1L, null))), results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSessionWindowAggregateProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"3c60511655df3349323e394bdc3836300991352f","commitMessage":"@@@KAFKA-3452; Follow-up: Add SessionWindows\n\n - TimeWindows represent half-open time intervals while SessionWindows represent closed time intervals\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #2342 from mjsax/kafka-3452-session-window-follow-up\n","date":"2017-01-12 12:33:42","modifiedFileCount":"13","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2017-09-11 16:42:10","commitOrder":3,"curCode":"    public void shouldHandleMultipleSessionsAndMerging() {\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n        processor.process(\"d\", \"1\");\n        context.setTime(GAP_MS / 2);\n        processor.process(\"d\", \"2\");\n        context.setTime(GAP_MS + 1);\n        processor.process(\"a\", \"2\");\n        processor.process(\"b\", \"2\");\n        context.setTime(GAP_MS + 1 + GAP_MS / 2);\n        processor.process(\"a\", \"3\");\n        processor.process(\"c\", \"3\");\n\n        sessionStore.flush();\n\n        assertEquals(Arrays.asList(KeyValue.pair(new Windowed<>(\"a\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"d\", new SessionWindow(0, GAP_MS / 2)), new Change<>(2L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new SessionWindow(GAP_MS + 1, GAP_MS + 1)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"a\", new SessionWindow(GAP_MS + 1, GAP_MS + 1 + GAP_MS / 2)), new Change<>(2L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new SessionWindow(GAP_MS + 1 + GAP_MS / 2, GAP_MS + 1 + GAP_MS / 2)), new Change<>(1L, null))\n                     ),\n                     results);\n    }\n","date":"2017-09-11 16:42:10","endLine":237,"groupId":"17543","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldHandleMultipleSessionsAndMerging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7f/0d28a47148ed15e3f3a8cc30ee248467b9d7fc.src","preCode":"    public void shouldHandleMultipleSessionsAndMerging() throws Exception {\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n        processor.process(\"d\", \"1\");\n        context.setTime(GAP_MS / 2);\n        processor.process(\"d\", \"2\");\n        context.setTime(GAP_MS + 1);\n        processor.process(\"a\", \"2\");\n        processor.process(\"b\", \"2\");\n        context.setTime(GAP_MS + 1 + GAP_MS / 2);\n        processor.process(\"a\", \"3\");\n        processor.process(\"c\", \"3\");\n\n        sessionStore.flush();\n\n        assertEquals(Arrays.asList(KeyValue.pair(new Windowed<>(\"a\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"d\", new SessionWindow(0, GAP_MS / 2)), new Change<>(2L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new SessionWindow(GAP_MS + 1, GAP_MS + 1)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"a\", new SessionWindow(GAP_MS + 1, GAP_MS + 1 + GAP_MS / 2)), new Change<>(2L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new SessionWindow(GAP_MS + 1 + GAP_MS / 2, GAP_MS + 1 + GAP_MS / 2)), new Change<>(1L, null))\n                     ),\n                     results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSessionWindowAggregateProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":3,"curCode":"    public void shouldImmediatelyForwardNewSessionWhenNonCachedStore() {\n        initStore(false);\n        processor.init(context);\n\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n\n        assertEquals(Arrays.asList(KeyValue.pair(new Windowed<>(\"a\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new SessionWindow(0, 0)), new Change<>(1L, null))), results);\n    }\n","date":"2017-09-11 16:42:10","endLine":268,"groupId":"11648","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldImmediatelyForwardNewSessionWhenNonCachedStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7f/0d28a47148ed15e3f3a8cc30ee248467b9d7fc.src","preCode":"    public void shouldImmediatelyForwardNewSessionWhenNonCachedStore() throws Exception {\n        initStore(false);\n        processor.init(context);\n\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n\n        assertEquals(Arrays.asList(KeyValue.pair(new Windowed<>(\"a\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"b\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                                   KeyValue.pair(new Windowed<>(\"c\", new SessionWindow(0, 0)), new Change<>(1L, null))), results);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSessionWindowAggregateProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"}],"commitId":"c5464edbb7a6821e0a91a3712b1fe2fd92a22d68","commitMessage":"@@@KAFKA-5531; throw concrete exceptions in streams tests\n\n1. Now instead of just generic `Exception` methods declare more concrete\nexceptions throwing or don't declare any throwing at all.  if not needed.\n2. `SimpleBenchmark.run()` throws `RuntimeException`\n3. `SimpleBenchmark.produce()` throws `IllegalArgumentException`\n4. Expect `ProcessorStateException` in\n`StandbyTaskTest.testUpdateNonPersistentStore()`\n\n/cc enothereska\n\nAuthor: Evgeny Veretennikov <evg.veretennikov@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>\n\nCloses #3485 from evis/5531-throw-concrete-exceptions\n","date":"2017-09-11 16:42:10","modifiedFileCount":"106","status":"M","submitter":"Evgeny Veretennikov"},{"authorTime":"2019-05-13 06:31:44","codes":[{"authorDate":"2019-05-13 06:31:44","commitOrder":4,"curCode":"    public void shouldHandleMultipleSessionsAndMerging() {\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n        processor.process(\"d\", \"1\");\n        context.setTime(GAP_MS / 2);\n        processor.process(\"d\", \"2\");\n        context.setTime(GAP_MS + 1);\n        processor.process(\"a\", \"2\");\n        processor.process(\"b\", \"2\");\n        context.setTime(GAP_MS + 1 + GAP_MS / 2);\n        processor.process(\"a\", \"3\");\n        processor.process(\"c\", \"3\");\n\n        sessionStore.flush();\n\n        assertEquals(\n            Arrays.asList(\n                new KeyValueTimestamp<>(\n                    new Windowed<>(\"a\", new SessionWindow(0, 0)),\n                    new Change<>(1L, null),\n                    0L),\n                new KeyValueTimestamp<>(\n                    new Windowed<>(\"b\", new SessionWindow(0, 0)),\n                    new Change<>(1L, null),\n                    0L),\n                new KeyValueTimestamp<>(\n                    new Windowed<>(\"c\", new SessionWindow(0, 0)),\n                    new Change<>(1L, null),\n                    0L),\n                new KeyValueTimestamp<>(\n                    new Windowed<>(\"d\", new SessionWindow(0, GAP_MS / 2)),\n                    new Change<>(2L, null),\n                    GAP_MS / 2),\n                new KeyValueTimestamp<>(\n                    new Windowed<>(\"b\", new SessionWindow(GAP_MS + 1, GAP_MS + 1)),\n                    new Change<>(1L, null),\n                    GAP_MS + 1),\n                new KeyValueTimestamp<>(\n                    new Windowed<>(\"a\", new SessionWindow(GAP_MS + 1, GAP_MS + 1 + GAP_MS / 2)),\n                    new Change<>(2L, null),\n                    GAP_MS + 1 + GAP_MS / 2),\n                new KeyValueTimestamp<>(new Windowed<>(\n                    \"c\",\n                    new SessionWindow(GAP_MS + 1 + GAP_MS / 2, GAP_MS + 1 + GAP_MS / 2)), new Change<>(1L, null),\n                    GAP_MS + 1 + GAP_MS / 2)\n            ),\n            results\n        );\n    }\n","date":"2019-05-13 06:31:44","endLine":291,"groupId":"101763","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldHandleMultipleSessionsAndMerging","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/a7700d52a4f6ca65cc92c4fb8a9203e4791351.src","preCode":"    public void shouldHandleMultipleSessionsAndMerging() {\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n        processor.process(\"d\", \"1\");\n        context.setTime(GAP_MS / 2);\n        processor.process(\"d\", \"2\");\n        context.setTime(GAP_MS + 1);\n        processor.process(\"a\", \"2\");\n        processor.process(\"b\", \"2\");\n        context.setTime(GAP_MS + 1 + GAP_MS / 2);\n        processor.process(\"a\", \"3\");\n        processor.process(\"c\", \"3\");\n\n        sessionStore.flush();\n\n        assertEquals(\n            Arrays.asList(\n                KeyValue.pair(new Windowed<>(\"a\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                KeyValue.pair(new Windowed<>(\"b\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                KeyValue.pair(new Windowed<>(\"c\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                KeyValue.pair(new Windowed<>(\"d\", new SessionWindow(0, GAP_MS / 2)), new Change<>(2L, null)),\n                KeyValue.pair(new Windowed<>(\"b\", new SessionWindow(GAP_MS + 1, GAP_MS + 1)), new Change<>(1L, null)),\n                KeyValue.pair(new Windowed<>(\"a\", new SessionWindow(GAP_MS + 1, GAP_MS + 1 + GAP_MS / 2)), new Change<>(2L, null)),\n                KeyValue.pair(new Windowed<>(\"c\", new SessionWindow(GAP_MS + 1 + GAP_MS / 2, GAP_MS + 1 + GAP_MS / 2)), new Change<>(1L, null))\n            ),\n            results\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSessionWindowAggregateProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2019-05-13 06:31:44","commitOrder":4,"curCode":"    public void shouldImmediatelyForwardNewSessionWhenNonCachedStore() {\n        initStore(false);\n        processor.init(context);\n\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n\n        assertEquals(\n            Arrays.asList(\n                new KeyValueTimestamp<>(\n                    new Windowed<>(\"a\", new SessionWindow(0, 0)),\n                    new Change<>(1L, null),\n                    0L),\n                new KeyValueTimestamp<>(\n                    new Windowed<>(\"b\", new SessionWindow(0, 0)),\n                    new Change<>(1L, null),\n                    0L),\n                new KeyValueTimestamp<>(\n                    new Windowed<>(\"c\", new SessionWindow(0, 0)),\n                    new Change<>(1L, null),\n                    0L)\n            ),\n            results\n        );\n    }\n","date":"2019-05-13 06:31:44","endLine":335,"groupId":"101763","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldImmediatelyForwardNewSessionWhenNonCachedStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/a7700d52a4f6ca65cc92c4fb8a9203e4791351.src","preCode":"    public void shouldImmediatelyForwardNewSessionWhenNonCachedStore() {\n        initStore(false);\n        processor.init(context);\n\n        context.setTime(0);\n        processor.process(\"a\", \"1\");\n        processor.process(\"b\", \"1\");\n        processor.process(\"c\", \"1\");\n\n        assertEquals(\n            Arrays.asList(\n                KeyValue.pair(new Windowed<>(\"a\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                KeyValue.pair(new Windowed<>(\"b\", new SessionWindow(0, 0)), new Change<>(1L, null)),\n                KeyValue.pair(new Windowed<>(\"c\", new SessionWindow(0, 0)), new Change<>(1L, null))\n            ),\n            results\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamSessionWindowAggregateProcessorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":309,"status":"M"}],"commitId":"8a237f599afa539868a138b5a2534dbf884cb4ec","commitMessage":"@@@KAFKA-6455: Session Aggregation should use window-end-time as record timestamp (#6645)\n\nFor session-windows.  the result record should have the window-end timestamp as record timestamp.\n\nRebased to resolve merge conflicts. Removed unused classes TupleForwarder and ForwardingCacheFlushListener (replace with TimestampedTupleForwarder.  SessionTupleForwarder.  TimestampedCacheFlushListerner.  and SessionCacheFlushListener)\n\nReviewers: John Roesler <john@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-13 06:31:44","modifiedFileCount":"14","status":"M","submitter":"Matthias J. Sax"}]
