[{"authorTime":"2019-03-01 01:33:53","codes":[{"authorDate":"2019-05-30 03:06:13","commitOrder":8,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, \"test\");\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            NoOpRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","date":"2019-05-30 03:06:13","endLine":73,"groupId":"4254","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e3/378faf885f0b3be51b681ed3bc0f6937c5e849.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, \"test\");\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            NoOpRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2019-03-01 01:33:53","commitOrder":8,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, \"test\");\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            NoOpRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","date":"2019-03-01 01:33:53","endLine":89,"groupId":"4254","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b4/ddb9fddf11a36786cb3c07d732768bf3a3652b.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, \"test\");\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            NoOpRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"NB"}],"commitId":"e7da042d76e413d9d5c95c1bd75f2c7e3ede1aad","commitMessage":"@@@MINOR: Rename unit test class for `MeteredTimestampedWindowStore` (#6826)\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   Bill Bejeck <bbejeck@gmail.com>","date":"2019-05-30 03:06:13","modifiedFileCount":"0","status":"M","submitter":"cadonna"},{"authorTime":"2019-09-17 12:48:25","codes":[{"authorDate":"2019-09-17 12:48:25","commitOrder":9,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            NoOpRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","date":"2019-09-17 12:48:25","endLine":74,"groupId":"4254","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/53/096d2bf13c718c79a2f362397c807c31b61a97.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, \"test\");\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            NoOpRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-09-17 12:48:25","commitOrder":9,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            NoOpRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","date":"2019-09-17 12:48:25","endLine":90,"groupId":"4254","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e6/2ab3a8a424a86e084c44aab71bf6c4a4dc183d.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, \"test\");\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            NoOpRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"bab3e082dc48bc3db68692694bd114a39b41fa68","commitMessage":"@@@KAFKA-8859: Expose built-in streams metrics version in `StreamsMetricsImpl` (#7323)\n\nThe streams config built.in.metrics.version is needed to add metrics in\na backward-compatible way. However.  not in every location where metrics are\nadded a streams config is available to check built.in.metrics.version. Thus. \nthe config value needs to be exposed through the StreamsMetricsImpl object.\n\nReviewers: John Roesler <vvcephei@users.noreply.github.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-09-17 12:48:25","modifiedFileCount":"13","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-10-31 00:24:59","codes":[{"authorDate":"2019-09-17 12:48:25","commitOrder":10,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            NoOpRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","date":"2019-09-17 12:48:25","endLine":74,"groupId":"4254","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/53/096d2bf13c718c79a2f362397c807c31b61a97.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            NoOpRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2019-10-31 00:24:59","commitOrder":10,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            NoOpRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n    }\n","date":"2019-10-31 00:24:59","endLine":124,"groupId":"4254","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/59/eb34973bc63fcc60cb1ef6cae5852d8e454223.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            NoOpRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"fc0f82372e1e456cbd43490b9eba957c4a0d3eb5","commitMessage":"@@@KAFKA-8980: Refactor state-store-level streams metrics (#7584)\n\nRefactors metrics according to KIP-444\nIntroduces StateStoreMetrics as a central provider for state store metrics\nAdds metric scope (a.k.a. store type) to the in-memory suppression buffer\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   Bill Bejeck <bbejeck@gmail.com>","date":"2019-10-31 00:24:59","modifiedFileCount":"26","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-12-17 08:37:40","codes":[{"authorDate":"2019-12-17 08:37:40","commitOrder":11,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","date":"2019-12-17 08:37:40","endLine":74,"groupId":"4254","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/70245b8a27920c1b2749985ce53057c1406580.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            NoOpRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2019-12-17 08:37:40","commitOrder":11,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n    }\n","date":"2019-12-17 08:37:40","endLine":124,"groupId":"4254","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7d/05262bfa7e783e162934c8c98fa747569cdc80.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            NoOpRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"a87decb9e4df5bfa092c26ae4346f65c426f1321","commitMessage":"@@@KAFKA-9113: Extract clients from tasks to record collectors (#7833)\n\nThis is part1 of a series of PRs for task management cleanup:\n\n1. Primarily cleanup MockRecordCollectors: remove unnecessary anonymous inheritance but just consolidate on the NoOpRecordCollector -> renamed to MockRecordCollector. Most relevant changes are unit tests that would be relying on this MockRecordCollector.\n\n2. Let StandbyContextImpl#recordCollector() to return null instead of returning a no-op collector.  since in standby tasks we should ALWAYS bypass the logging logic and only use the inner store for restoreBatch. Returning null helps us to realize this assertion failed as NPE as early as possible whereas a no-op collector just hides the bug.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2019-12-17 08:37:40","modifiedFileCount":"25","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-03-28 09:36:10","codes":[{"authorDate":"2019-12-17 08:37:40","commitOrder":12,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","date":"2019-12-17 08:37:40","endLine":74,"groupId":"4254","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/70245b8a27920c1b2749985ce53057c1406580.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2020-03-28 09:36:10","commitOrder":12,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", context.taskId().toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","date":"2020-03-28 09:36:10","endLine":138,"groupId":"4254","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/56/9203eb146f8d0fcacc9df5506c61ca252760f1.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"c595470713be1fd2daf93816a5dbf0e245a707a0","commitMessage":"@@@KAFKA-9770: Close underlying state store also when flush throws (#8368)\n\nWhen a caching state store is closed it calls its flush() method.\nIf flush() throws an exception the underlying state store is not closed.\n\nThis commit ensures that state stores underlying a wrapped state stores\nare closed even when preceding operations in the close method throw.\n\nCo-authored-by: John Roesler <vvcephei@apache.org>\nReviewers: John Roesler <vvcephei@apache.org>.  Guozhang Wang <wangguoz@gmail.com>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-03-28 09:36:10","modifiedFileCount":"13","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-08-14 03:40:40","codes":[{"authorDate":"2020-08-14 03:40:40","commitOrder":13,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST, new MockTime());\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","date":"2020-08-14 03:40:40","endLine":95,"groupId":"4254","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/be0675f86bb021ed5622234dd6cc58a914d7af.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST);\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2020-08-14 03:40:40","commitOrder":13,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion, new MockTime());\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", context.taskId().toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","date":"2020-08-14 03:40:40","endLine":150,"groupId":"4254","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/bc03b7ba3663a85d384f40d2e1390f0ce8e416.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion);\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", context.taskId().toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"5645d906fa319206a9270c080926a21dfddc852a","commitMessage":"@@@KAFKA-9924: Prepare RocksDB and metrics for RocksDB properties recording (#9098)\n\nRefactor the RocksDB store and the metrics infrastructure in Streams\nin preparation of the recordings of the RocksDB properties specified in KIP-607.\n\nThe refactoring includes:\n* wrapper around BlockedBasedTableConfig to make the cache accessible to the\n  RocksDB metrics recorder\n* RocksDB metrics recorder now takes also the DB instance and the cache in addition\n  to the statistics\n* The value providers for the metrics are added to the RockDB metrics recorder also if\n  the recording level is INFO.\n* The creation of the RocksDB metrics recording trigger is moved to StreamsMetricsImpl\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <vvcephei@apache.org>\n","date":"2020-08-14 03:40:40","modifiedFileCount":"27","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-03-11 06:26:24","codes":[{"authorDate":"2021-03-11 06:26:24","commitOrder":14,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST, new MockTime());\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics),\n            Time.SYSTEM\n        );\n    }\n","date":"2021-03-11 06:26:24","endLine":100,"groupId":"4254","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/59/5cb0161eaacde52389b79b0cec806aed2c7af8.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST, new MockTime());\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2021-03-11 06:26:24","commitOrder":14,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion, new MockTime());\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics),\n            Time.SYSTEM\n        );\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", context.taskId().toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","date":"2021-03-11 06:26:24","endLine":154,"groupId":"4254","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a7/4aaea6f139d7fc84ca6fede1225886a74fcb64.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion, new MockTime());\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics)\n        );\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", context.taskId().toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"029f5a136ae2c74f7f93e716bcc30ce90d8241ad","commitMessage":"@@@KAFKA-10062: Add a methods to retrieve the current timestamps as known by the Streams app (#9744)\n\nImplements KIP-622.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2021-03-11 06:26:24","modifiedFileCount":"23","status":"M","submitter":"Rohit Deshpande"},{"authorTime":"2021-05-29 03:59:35","codes":[{"authorDate":"2021-05-29 03:59:35","commitOrder":15,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST, new MockTime());\n\n        context = new InternalMockProcessorContext<>(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics),\n            Time.SYSTEM\n        );\n    }\n","date":"2021-05-29 03:59:35","endLine":100,"groupId":"4254","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/42/6675184cb68c62dfa165a5ba5d8dc647468b96.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST, new MockTime());\n\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics),\n            Time.SYSTEM\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2021-05-29 03:59:35","commitOrder":15,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion, new MockTime());\n        context = new InternalMockProcessorContext<>(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics),\n            Time.SYSTEM\n        );\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", context.taskId().toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","date":"2021-05-29 03:59:35","endLine":154,"groupId":"4254","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b1/8919ac400649c59215f7b8877947ca81e493f2.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion, new MockTime());\n        context = new InternalMockProcessorContext(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics),\n            Time.SYSTEM\n        );\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", context.taskId().toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"f207bac20cf19e841d3ee8dbcba03b1c30d88836","commitMessage":"@@@KAFKA-8410: KTableProcessor migration groundwork (#10744)\n\n* Lay the groundwork for migrating KTable Processors to the new PAPI.\n* Migrate the KTableFilter processor to prove that the groundwork works.\n\nThis is an effort to help break up #10507 into multiple PRs.\n\nReviewers: Boyang Chen <boyang@apache.org>","date":"2021-05-29 03:59:35","modifiedFileCount":"69","status":"M","submitter":"John Roesler"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-05-29 03:59:35","commitOrder":16,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST, new MockTime());\n\n        context = new InternalMockProcessorContext<>(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics),\n            Time.SYSTEM\n        );\n    }\n","date":"2021-05-29 03:59:35","endLine":100,"groupId":"4254","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/42/6675184cb68c62dfa165a5ba5d8dc647468b96.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST, new MockTime());\n\n        context = new InternalMockProcessorContext<>(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics),\n            Time.SYSTEM\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"N"},{"authorDate":"2021-06-01 20:05:08","commitOrder":16,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST, new MockTime());\n        context = new InternalMockProcessorContext<>(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics),\n            Time.SYSTEM\n        );\n        tags = mkMap(\n            mkEntry(THREAD_ID_TAG_KEY, threadId),\n            mkEntry(\"task-id\", context.taskId().toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","date":"2021-06-01 20:05:08","endLine":124,"groupId":"4254","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/46/1c50c617a5aa6d01591a5ac369538f10fae55b.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", builtInMetricsVersion, new MockTime());\n        context = new InternalMockProcessorContext<>(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics),\n            Time.SYSTEM\n        );\n        storeLevelGroup =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? STORE_LEVEL_GROUP_FROM_0100_TO_24 : STORE_LEVEL_GROUP;\n        threadIdTagKey =\n            StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion) ? THREAD_ID_TAG_KEY_FROM_0100_TO_24 : THREAD_ID_TAG_KEY;\n        tags = mkMap(\n            mkEntry(threadIdTagKey, threadId),\n            mkEntry(\"task-id\", context.taskId().toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-07-29 02:18:56","commitOrder":17,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST, new MockTime());\n\n        context = new InternalMockProcessorContext<>(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics),\n            Time.SYSTEM,\n            taskId\n        );\n    }\n","date":"2021-07-29 02:18:56","endLine":103,"groupId":"10877","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bc/606919339d487dfb18c7c64dfdee3ee86fb80e.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST, new MockTime());\n\n        context = new InternalMockProcessorContext<>(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics),\n            Time.SYSTEM\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredTimestampedWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":17,"curCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST, new MockTime());\n        context = new InternalMockProcessorContext<>(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics),\n            Time.SYSTEM\n        );\n        tags = mkMap(\n            mkEntry(THREAD_ID_TAG_KEY, threadId),\n            mkEntry(\"task-id\", context.taskId().toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","date":"2021-06-01 20:05:08","endLine":124,"groupId":"10877","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/46/1c50c617a5aa6d01591a5ac369538f10fae55b.src","preCode":"    public void setUp() {\n        final StreamsMetricsImpl streamsMetrics =\n            new StreamsMetricsImpl(metrics, \"test\", StreamsConfig.METRICS_LATEST, new MockTime());\n        context = new InternalMockProcessorContext<>(\n            TestUtils.tempDirectory(),\n            Serdes.String(),\n            Serdes.Long(),\n            streamsMetrics,\n            new StreamsConfig(StreamsTestUtils.getStreamsConfig()),\n            MockRecordCollector::new,\n            new ThreadCache(new LogContext(\"testCache \"), 0, streamsMetrics),\n            Time.SYSTEM\n        );\n        tags = mkMap(\n            mkEntry(THREAD_ID_TAG_KEY, threadId),\n            mkEntry(\"task-id\", context.taskId().toString()),\n            mkEntry(STORE_TYPE + \"-state-id\", STORE_NAME)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MeteredWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"}],"commitId":"4710a491463a91ec12c670ea50c139fc14134e80","commitMessage":"@@@KAFKA-12648: Pt. 2 - Introduce TopologyMetadata to wrap InternalTopologyBuilders of named topologies (#10683)\n\nPt. 1: #10609\nPt. 2: #10683\nPt. 3: #10788\n\nThe TopologyMetadata is next up after Pt. 1 #10609. This PR sets up the basic architecture for running an app with multiple NamedTopologies.  though the APIs to add/remove them dynamically are not implemented until Pt. 3\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Walker Carlson <wcarlson@confluent.io>","date":"2021-07-29 02:18:56","modifiedFileCount":"56","status":"M","submitter":"A. Sophie Blee-Goldman"}]
