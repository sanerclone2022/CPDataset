[{"authorTime":"2019-08-28 05:41:33","codes":[{"authorDate":"2019-08-28 05:41:33","commitOrder":1,"curCode":"    public void testTwoConsumersOneTopicOnePartition() {\n        String consumer1 = \"consumer1\";\n        String consumer2 = \"consumer2\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 1);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(partitions(tp(topic, 0)), assignment.get(consumer1));\n        assertEquals(Collections.<TopicPartition>emptyList(), assignment.get(consumer2));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2019-08-28 05:41:33","endLine":153,"groupId":"13295","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTwoConsumersOneTopicOnePartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/f67472152529a6deaa191c6a71f596826dcf8f.src","preCode":"    public void testTwoConsumersOneTopicOnePartition() {\n        String consumer1 = \"consumer1\";\n        String consumer2 = \"consumer2\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 1);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(partitions(tp(topic, 0)), assignment.get(consumer1));\n        assertEquals(Collections.<TopicPartition>emptyList(), assignment.get(consumer2));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"B"},{"authorDate":"2019-08-28 05:41:33","commitOrder":1,"curCode":"    public void testTwoConsumersOneTopicTwoPartitions() {\n        String consumer1 = \"consumer1\";\n        String consumer2 = \"consumer2\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 2);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(partitions(tp(topic, 0)), assignment.get(consumer1));\n        assertEquals(partitions(tp(topic, 1)), assignment.get(consumer2));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2019-08-28 05:41:33","endLine":172,"groupId":"13295","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTwoConsumersOneTopicTwoPartitions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/f67472152529a6deaa191c6a71f596826dcf8f.src","preCode":"    public void testTwoConsumersOneTopicTwoPartitions() {\n        String consumer1 = \"consumer1\";\n        String consumer2 = \"consumer2\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 2);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(partitions(tp(topic, 0)), assignment.get(consumer1));\n        assertEquals(partitions(tp(topic, 1)), assignment.get(consumer2));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"B"}],"commitId":"cf32a1a6a06df910dd11f26abe7b62e560392e25","commitMessage":"@@@KAFKA-8179: Part 4.  add CooperativeStickyAssignor (#7130)\n\nSplits the existing StickyAssignor logic into an AbstractStickyAssignor class.  which is extended by the existing (eager) StickyAssignor and by the new CooperativeStickyAssignor which supports incremental cooperative rebalancing.\n\nThere is no actual change to the logic -- most methods from StickyAssignor were moved to AbstractStickyAssignor to be shared with CooperativeStickyAssignor.  and the abstract MemberData memberData(Subscription) method converts the Subscription to the embedded list of owned partitions for each assignor.\n\nThe \"generation\" logic is left in.  however this is always Optional.empty() for the CooperativeStickyAssignor as onPartitionsLost should always be called when a generation is missed.\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-08-28 05:41:33","modifiedFileCount":"5","status":"B","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2019-08-28 05:41:33","codes":[{"authorDate":"2020-06-02 06:57:15","commitOrder":2,"curCode":"    public void testTwoConsumersOneTopicOnePartition() {\n        String consumer1 = \"consumer1\";\n        String consumer2 = \"consumer2\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 1);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2020-06-02 06:57:15","endLine":156,"groupId":"13295","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTwoConsumersOneTopicOnePartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c7/b45233ca1e9f2391846a1b750bf2d4a9baf55d.src","preCode":"    public void testTwoConsumersOneTopicOnePartition() {\n        String consumer1 = \"consumer1\";\n        String consumer2 = \"consumer2\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 1);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(partitions(tp(topic, 0)), assignment.get(consumer1));\n        assertEquals(Collections.<TopicPartition>emptyList(), assignment.get(consumer2));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2019-08-28 05:41:33","commitOrder":2,"curCode":"    public void testTwoConsumersOneTopicTwoPartitions() {\n        String consumer1 = \"consumer1\";\n        String consumer2 = \"consumer2\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 2);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(partitions(tp(topic, 0)), assignment.get(consumer1));\n        assertEquals(partitions(tp(topic, 1)), assignment.get(consumer2));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2019-08-28 05:41:33","endLine":172,"groupId":"13295","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTwoConsumersOneTopicTwoPartitions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/f67472152529a6deaa191c6a71f596826dcf8f.src","preCode":"    public void testTwoConsumersOneTopicTwoPartitions() {\n        String consumer1 = \"consumer1\";\n        String consumer2 = \"consumer2\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 2);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(partitions(tp(topic, 0)), assignment.get(consumer1));\n        assertEquals(partitions(tp(topic, 1)), assignment.get(consumer2));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"}],"commitId":"c6633a157eec1712116d294eb3785a96cba4e331","commitMessage":"@@@KAFKA-9987: optimize sticky assignment algorithm for same-subscription case (#8668)\n\nMotivation and pseudo code algorithm in the ticket.\n\nAdded a scale test with large number of topic partitions and consumers and 30s timeout.\nWith these changes.  assignment with 2. 000 consumers and 200 topics with 2. 000 each completes within a few seconds.\n\nPorting the same test to trunk.  it took 2 minutes even with a 100x reduction in the number of topics (ie.  2 minutes for 2. 000 consumers and 2 topics with 2. 000 partitions)\n\nShould be cherry-picked to 2.6.  2.5.  and 2.4\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-06-02 06:57:15","modifiedFileCount":"4","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2021-06-03 06:01:11","codes":[{"authorDate":"2021-06-03 06:01:11","commitOrder":3,"curCode":"    public void testTwoConsumersOneTopicOnePartition() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 1);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2021-06-03 06:01:11","endLine":158,"groupId":"13295","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTwoConsumersOneTopicOnePartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a6/50cbbf39a67adf675b3239d271ed57cb72f6d9.src","preCode":"    public void testTwoConsumersOneTopicOnePartition() {\n        String consumer1 = \"consumer1\";\n        String consumer2 = \"consumer2\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 1);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":147,"status":"M"},{"authorDate":"2021-06-03 06:01:11","commitOrder":3,"curCode":"    public void testTwoConsumersOneTopicTwoPartitions() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 2);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(partitions(tp(topic, 0)), assignment.get(consumer1));\n        assertEquals(partitions(tp(topic, 1)), assignment.get(consumer2));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2021-06-03 06:01:11","endLine":174,"groupId":"13295","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTwoConsumersOneTopicTwoPartitions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a6/50cbbf39a67adf675b3239d271ed57cb72f6d9.src","preCode":"    public void testTwoConsumersOneTopicTwoPartitions() {\n        String consumer1 = \"consumer1\";\n        String consumer2 = \"consumer2\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 2);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(partitions(tp(topic, 0)), assignment.get(consumer1));\n        assertEquals(partitions(tp(topic, 1)), assignment.get(consumer2));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"6db51e466301408e59a055dbadf614612e492fb2","commitMessage":"@@@KAFKA-12675: improve the sticky general assignor scalability and performance (#10552)\n\nI did code refactor/optimization.  keep the same algorithm in this PR.\n\nOriginally.  With this setting:\ntopicCount = 50;\npartitionCount = 800;\nconsumerCount = 800;\nWe complete in 10 seconds.  after my code refactor.  the time down to 100~200 ms\n\nWith the 1 million partitions setting:\ntopicCount = 500;\npartitionCount = 2000;\nconsumerCount = 2000;\nNo OutOfMemory will be thrown anymore. The time will take 4~5 seconds.\n\nReviewers: Vahid Hashemian <vahid.hashemian@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-06-03 06:01:11","modifiedFileCount":"3","status":"M","submitter":"Luke Chen"},{"authorTime":"2021-08-06 04:26:18","codes":[{"authorDate":"2021-08-06 04:26:18","commitOrder":4,"curCode":"    public void testTwoConsumersOneTopicOnePartition() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 1);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertTrue(assignor.partitionsTransferringOwnership.isEmpty());\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2021-08-06 04:26:18","endLine":169,"groupId":"104078","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testTwoConsumersOneTopicOnePartition","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/b4351f5fe46cc1e2682ee93bda870f66992965.src","preCode":"    public void testTwoConsumersOneTopicOnePartition() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 1);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2021-08-06 04:26:18","commitOrder":4,"curCode":"    public void testTwoConsumersOneTopicTwoPartitions() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 2);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(partitions(tp(topic, 0)), assignment.get(consumer1));\n        assertEquals(partitions(tp(topic, 1)), assignment.get(consumer2));\n        assertTrue(assignor.partitionsTransferringOwnership.isEmpty());\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","date":"2021-08-06 04:26:18","endLine":186,"groupId":"104078","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testTwoConsumersOneTopicTwoPartitions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/b4351f5fe46cc1e2682ee93bda870f66992965.src","preCode":"    public void testTwoConsumersOneTopicTwoPartitions() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 2);\n\n        subscriptions.put(consumer1, new Subscription(topics(topic)));\n        subscriptions.put(consumer2, new Subscription(topics(topic)));\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic, subscriptions);\n        assertEquals(partitions(tp(topic, 0)), assignment.get(consumer1));\n        assertEquals(partitions(tp(topic, 1)), assignment.get(consumer2));\n\n        verifyValidityAndBalance(subscriptions, assignment, partitionsPerTopic);\n        assertTrue(isFullyBalanced(assignment));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractStickyAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"M"}],"commitId":"001afa8ebec2a1b5fd05319b02f7d3eb6410ab8e","commitMessage":"@@@KAFKA-13046: add test coverage for AbstractStickyAssignorTest (#11156)\n\n1) Add tests for partitionsTransferringOwnership\n  a. it should include revoked partitions and partitions claimed by multiple consumers.\n  b. for non-equal assignment case (general case).  it should be null so that the cooperative assignor knows to compute it from scratch\n\n2) Small optimization for allPreviousPartitionsToOwner check.\n\nReviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>","date":"2021-08-06 04:26:18","modifiedFileCount":"2","status":"M","submitter":"Luke Chen"}]
