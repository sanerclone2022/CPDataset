[{"authorTime":"2017-05-25 06:26:46","codes":[{"authorDate":"2017-06-13 06:04:05","commitOrder":2,"curCode":"    private MockClient.RequestMatcher addPartitionsRequestMatcher(final TopicPartition topicPartition,\n                                                                  final short epoch, final long pid) {\n        return new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                AddPartitionsToTxnRequest addPartitionsToTxnRequest = (AddPartitionsToTxnRequest) body;\n                assertEquals(pid, addPartitionsToTxnRequest.producerId());\n                assertEquals(epoch, addPartitionsToTxnRequest.producerEpoch());\n                assertEquals(singletonList(topicPartition), addPartitionsToTxnRequest.partitions());\n                assertEquals(transactionalId, addPartitionsToTxnRequest.transactionalId());\n                return true;\n            }\n        };\n    }\n","date":"2017-06-13 06:04:05","endLine":1771,"groupId":"5668","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addPartitionsRequestMatcher","params":"(finalTopicPartitiontopicPartition@finalshortepoch@finallongpid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c4/abd3c84c6315a406e8da5f18527dd8f17109d4.src","preCode":"    private MockClient.RequestMatcher addPartitionsRequestMatcher(final TopicPartition topicPartition,\n                                                                  final short epoch, final long pid) {\n        return new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                AddPartitionsToTxnRequest addPartitionsToTxnRequest = (AddPartitionsToTxnRequest) body;\n                assertEquals(pid, addPartitionsToTxnRequest.producerId());\n                assertEquals(epoch, addPartitionsToTxnRequest.producerEpoch());\n                assertEquals(singletonList(topicPartition), addPartitionsToTxnRequest.partitions());\n                assertEquals(transactionalId, addPartitionsToTxnRequest.transactionalId());\n                return true;\n            }\n        };\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1758,"status":"B"},{"authorDate":"2017-05-25 06:26:46","commitOrder":2,"curCode":"    private void prepareTxnOffsetCommitResponse(final String consumerGroupId, final long producerId,\n                                                final short producerEpoch, Map<TopicPartition, Errors> txnOffsetCommitResponse) {\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) body;\n                assertEquals(consumerGroupId, txnOffsetCommitRequest.consumerGroupId());\n                assertEquals(producerId, txnOffsetCommitRequest.producerId());\n                assertEquals(producerEpoch, txnOffsetCommitRequest.producerEpoch());\n                return true;\n            }\n        }, new TxnOffsetCommitResponse(0, txnOffsetCommitResponse));\n\n    }\n","date":"2017-05-25 06:26:46","endLine":871,"groupId":"11798","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareTxnOffsetCommitResponse","params":"(finalStringconsumerGroupId@finallongproducerId@finalshortproducerEpoch@Map<TopicPartition@Errors>txnOffsetCommitResponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/363d054e54b5c24d0ce06c965bc584cc9e64d2.src","preCode":"    private void prepareTxnOffsetCommitResponse(final String consumerGroupId, final long producerId,\n                                                final short producerEpoch, Map<TopicPartition, Errors> txnOffsetCommitResponse) {\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) body;\n                assertEquals(consumerGroupId, txnOffsetCommitRequest.consumerGroupId());\n                assertEquals(producerId, txnOffsetCommitRequest.producerId());\n                assertEquals(producerEpoch, txnOffsetCommitRequest.producerEpoch());\n                return true;\n            }\n        }, new TxnOffsetCommitResponse(0, txnOffsetCommitResponse));\n\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":858,"status":"NB"}],"commitId":"43e935a630eb0a7fa64c5a1a38bfee17f9b724dc","commitMessage":"@@@KAFKA-5427; Transactional producer should allow FindCoordinator in error state\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Apurva Mehta <apurva@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3297 from hachikuji/KAFKA-5427\n","date":"2017-06-13 06:04:05","modifiedFileCount":"2","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2018-09-09 15:14:57","codes":[{"authorDate":"2017-06-13 06:04:05","commitOrder":3,"curCode":"    private MockClient.RequestMatcher addPartitionsRequestMatcher(final TopicPartition topicPartition,\n                                                                  final short epoch, final long pid) {\n        return new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                AddPartitionsToTxnRequest addPartitionsToTxnRequest = (AddPartitionsToTxnRequest) body;\n                assertEquals(pid, addPartitionsToTxnRequest.producerId());\n                assertEquals(epoch, addPartitionsToTxnRequest.producerEpoch());\n                assertEquals(singletonList(topicPartition), addPartitionsToTxnRequest.partitions());\n                assertEquals(transactionalId, addPartitionsToTxnRequest.transactionalId());\n                return true;\n            }\n        };\n    }\n","date":"2017-06-13 06:04:05","endLine":1771,"groupId":"5668","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addPartitionsRequestMatcher","params":"(finalTopicPartitiontopicPartition@finalshortepoch@finallongpid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c4/abd3c84c6315a406e8da5f18527dd8f17109d4.src","preCode":"    private MockClient.RequestMatcher addPartitionsRequestMatcher(final TopicPartition topicPartition,\n                                                                  final short epoch, final long pid) {\n        return new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                AddPartitionsToTxnRequest addPartitionsToTxnRequest = (AddPartitionsToTxnRequest) body;\n                assertEquals(pid, addPartitionsToTxnRequest.producerId());\n                assertEquals(epoch, addPartitionsToTxnRequest.producerEpoch());\n                assertEquals(singletonList(topicPartition), addPartitionsToTxnRequest.partitions());\n                assertEquals(transactionalId, addPartitionsToTxnRequest.transactionalId());\n                return true;\n            }\n        };\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1758,"status":"N"},{"authorDate":"2018-09-09 15:14:57","commitOrder":3,"curCode":"    private void prepareTxnOffsetCommitResponse(final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch,\n                                                Map<TopicPartition, Errors> txnOffsetCommitResponse) {\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.consumerGroupId());\n            assertEquals(producerId, txnOffsetCommitRequest.producerId());\n            assertEquals(producerEpoch, txnOffsetCommitRequest.producerEpoch());\n            return true;\n        }, new TxnOffsetCommitResponse(0, txnOffsetCommitResponse));\n    }\n","date":"2018-09-09 15:17:25","endLine":2443,"groupId":"11798","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareTxnOffsetCommitResponse","params":"(finalStringconsumerGroupId@finallongproducerId@finalshortproducerEpoch@Map<TopicPartition@Errors>txnOffsetCommitResponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cf/730b9cb120b92e1f7b84fbd0517275be88583e.src","preCode":"    private void prepareTxnOffsetCommitResponse(final String consumerGroupId, final long producerId,\n                                                final short producerEpoch, Map<TopicPartition, Errors> txnOffsetCommitResponse) {\n        client.prepareResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) body;\n                assertEquals(consumerGroupId, txnOffsetCommitRequest.consumerGroupId());\n                assertEquals(producerId, txnOffsetCommitRequest.producerId());\n                assertEquals(producerEpoch, txnOffsetCommitRequest.producerEpoch());\n                return true;\n            }\n        }, new TxnOffsetCommitResponse(0, txnOffsetCommitResponse));\n\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2432,"status":"M"}],"commitId":"05ba5aa00847b18b74369a821e972bbba9f155eb","commitMessage":"@@@KAFKA-7333; Protocol changes for KIP-320\n\nThis patch contains the protocol updates needed for KIP-320 as well as some of the basic consumer APIs (e.g. `OffsetAndMetadata` and `ConsumerRecord`). The inter-broker format version has not been changed and the brokers will continue to use the current API versions.\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Dong Lin <lindong28@gmail.com>\n\nCloses #5564 from hachikuji/KAFKA-7333\n","date":"2018-09-09 15:17:25","modifiedFileCount":"83","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2018-09-09 15:14:57","codes":[{"authorDate":"2018-12-03 13:32:05","commitOrder":4,"curCode":"    private MockClient.RequestMatcher addPartitionsRequestMatcher(final TopicPartition topicPartition,\n                                                                  final short epoch, final long pid) {\n        return body -> {\n            AddPartitionsToTxnRequest addPartitionsToTxnRequest = (AddPartitionsToTxnRequest) body;\n            assertEquals(pid, addPartitionsToTxnRequest.producerId());\n            assertEquals(epoch, addPartitionsToTxnRequest.producerEpoch());\n            assertEquals(singletonList(topicPartition), addPartitionsToTxnRequest.partitions());\n            assertEquals(transactionalId, addPartitionsToTxnRequest.transactionalId());\n            return true;\n        };\n    }\n","date":"2018-12-03 13:32:05","endLine":2368,"groupId":"5668","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addPartitionsRequestMatcher","params":"(finalTopicPartitiontopicPartition@finalshortepoch@finallongpid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/f5caedcb243a11d42eccbf12847674a14e07fd.src","preCode":"    private MockClient.RequestMatcher addPartitionsRequestMatcher(final TopicPartition topicPartition,\n                                                                  final short epoch, final long pid) {\n        return new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                AddPartitionsToTxnRequest addPartitionsToTxnRequest = (AddPartitionsToTxnRequest) body;\n                assertEquals(pid, addPartitionsToTxnRequest.producerId());\n                assertEquals(epoch, addPartitionsToTxnRequest.producerEpoch());\n                assertEquals(singletonList(topicPartition), addPartitionsToTxnRequest.partitions());\n                assertEquals(transactionalId, addPartitionsToTxnRequest.transactionalId());\n                return true;\n            }\n        };\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2358,"status":"M"},{"authorDate":"2018-09-09 15:14:57","commitOrder":4,"curCode":"    private void prepareTxnOffsetCommitResponse(final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch,\n                                                Map<TopicPartition, Errors> txnOffsetCommitResponse) {\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.consumerGroupId());\n            assertEquals(producerId, txnOffsetCommitRequest.producerId());\n            assertEquals(producerEpoch, txnOffsetCommitRequest.producerEpoch());\n            return true;\n        }, new TxnOffsetCommitResponse(0, txnOffsetCommitResponse));\n    }\n","date":"2018-09-09 15:17:25","endLine":2443,"groupId":"11798","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareTxnOffsetCommitResponse","params":"(finalStringconsumerGroupId@finallongproducerId@finalshortproducerEpoch@Map<TopicPartition@Errors>txnOffsetCommitResponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cf/730b9cb120b92e1f7b84fbd0517275be88583e.src","preCode":"    private void prepareTxnOffsetCommitResponse(final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch,\n                                                Map<TopicPartition, Errors> txnOffsetCommitResponse) {\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.consumerGroupId());\n            assertEquals(producerId, txnOffsetCommitRequest.producerId());\n            assertEquals(producerEpoch, txnOffsetCommitRequest.producerEpoch());\n            return true;\n        }, new TxnOffsetCommitResponse(0, txnOffsetCommitResponse));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2432,"status":"N"}],"commitId":"c4822648ef1bb0cd6825d8dbe465c8a5a26a76bc","commitMessage":"@@@MINOR: hygene cleanup in TransactionManagerTest (#5951)\n\n\nReviewers: Andras Katona <41361962+akatona84@users.noreply.github.com>.  Manikumar Reddy <manikumar.reddy@gmail.com>","date":"2018-12-03 13:32:05","modifiedFileCount":"1","status":"M","submitter":"Viktor Somogyi"},{"authorTime":"2019-09-06 14:07:42","codes":[{"authorDate":"2018-12-03 13:32:05","commitOrder":5,"curCode":"    private MockClient.RequestMatcher addPartitionsRequestMatcher(final TopicPartition topicPartition,\n                                                                  final short epoch, final long pid) {\n        return body -> {\n            AddPartitionsToTxnRequest addPartitionsToTxnRequest = (AddPartitionsToTxnRequest) body;\n            assertEquals(pid, addPartitionsToTxnRequest.producerId());\n            assertEquals(epoch, addPartitionsToTxnRequest.producerEpoch());\n            assertEquals(singletonList(topicPartition), addPartitionsToTxnRequest.partitions());\n            assertEquals(transactionalId, addPartitionsToTxnRequest.transactionalId());\n            return true;\n        };\n    }\n","date":"2018-12-03 13:32:05","endLine":2368,"groupId":"5668","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"addPartitionsRequestMatcher","params":"(finalTopicPartitiontopicPartition@finalshortepoch@finallongpid)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/f5caedcb243a11d42eccbf12847674a14e07fd.src","preCode":"    private MockClient.RequestMatcher addPartitionsRequestMatcher(final TopicPartition topicPartition,\n                                                                  final short epoch, final long pid) {\n        return body -> {\n            AddPartitionsToTxnRequest addPartitionsToTxnRequest = (AddPartitionsToTxnRequest) body;\n            assertEquals(pid, addPartitionsToTxnRequest.producerId());\n            assertEquals(epoch, addPartitionsToTxnRequest.producerEpoch());\n            assertEquals(singletonList(topicPartition), addPartitionsToTxnRequest.partitions());\n            assertEquals(transactionalId, addPartitionsToTxnRequest.transactionalId());\n            return true;\n        };\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2358,"status":"N"},{"authorDate":"2019-09-06 14:07:42","commitOrder":5,"curCode":"    private void prepareTxnOffsetCommitResponse(final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch,\n                                                Map<TopicPartition, Errors> txnOffsetCommitResponse) {\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(producerId, txnOffsetCommitRequest.data.producerId());\n            assertEquals(producerEpoch, txnOffsetCommitRequest.data.producerEpoch());\n            return true;\n        }, new TxnOffsetCommitResponse(0, txnOffsetCommitResponse));\n    }\n","date":"2019-09-06 14:07:42","endLine":2834,"groupId":"5632","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareTxnOffsetCommitResponse","params":"(finalStringconsumerGroupId@finallongproducerId@finalshortproducerEpoch@Map<TopicPartition@Errors>txnOffsetCommitResponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3d/33a43e60d567c2823cd9753cd6a4d8c664c678.src","preCode":"    private void prepareTxnOffsetCommitResponse(final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch,\n                                                Map<TopicPartition, Errors> txnOffsetCommitResponse) {\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.consumerGroupId());\n            assertEquals(producerId, txnOffsetCommitRequest.producerId());\n            assertEquals(producerEpoch, txnOffsetCommitRequest.producerEpoch());\n            return true;\n        }, new TxnOffsetCommitResponse(0, txnOffsetCommitResponse));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2823,"status":"M"}],"commitId":"c0019e653891182d7a95464175c9b4ef63f8bae1","commitMessage":"@@@KAFKA-8590; Use automated TxnOffsetCommit type and add tests for OffsetCommit  (#6994)\n\nThis PR changes the TxnOffsetCommit protocol to auto-generated types.  and add more unit test coverage to the plain OffsetCommit protocol.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-09-06 14:07:42","modifiedFileCount":"11","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-09-06 14:07:42","codes":[{"authorDate":"2020-04-03 12:48:37","commitOrder":6,"curCode":"    private MockClient.RequestMatcher addPartitionsRequestMatcher(final TopicPartition topicPartition,\n                                                                  final short epoch, final long producerId) {\n        return body -> {\n            AddPartitionsToTxnRequest addPartitionsToTxnRequest = (AddPartitionsToTxnRequest) body;\n            assertEquals(producerId, addPartitionsToTxnRequest.producerId());\n            assertEquals(epoch, addPartitionsToTxnRequest.producerEpoch());\n            assertEquals(singletonList(topicPartition), addPartitionsToTxnRequest.partitions());\n            assertEquals(transactionalId, addPartitionsToTxnRequest.transactionalId());\n            return true;\n        };\n    }\n","date":"2020-04-03 12:48:37","endLine":3219,"groupId":"5668","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"addPartitionsRequestMatcher","params":"(finalTopicPartitiontopicPartition@finalshortepoch@finallongproducerId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c7/00605a5989bf08c894080ea48908bf7e6337c5.src","preCode":"    private MockClient.RequestMatcher addPartitionsRequestMatcher(final TopicPartition topicPartition,\n                                                                  final short epoch, final long pid) {\n        return body -> {\n            AddPartitionsToTxnRequest addPartitionsToTxnRequest = (AddPartitionsToTxnRequest) body;\n            assertEquals(pid, addPartitionsToTxnRequest.producerId());\n            assertEquals(epoch, addPartitionsToTxnRequest.producerEpoch());\n            assertEquals(singletonList(topicPartition), addPartitionsToTxnRequest.partitions());\n            assertEquals(transactionalId, addPartitionsToTxnRequest.transactionalId());\n            return true;\n        };\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3209,"status":"M"},{"authorDate":"2019-09-06 14:07:42","commitOrder":6,"curCode":"    private void prepareTxnOffsetCommitResponse(final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch,\n                                                Map<TopicPartition, Errors> txnOffsetCommitResponse) {\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(producerId, txnOffsetCommitRequest.data.producerId());\n            assertEquals(producerEpoch, txnOffsetCommitRequest.data.producerEpoch());\n            return true;\n        }, new TxnOffsetCommitResponse(0, txnOffsetCommitResponse));\n    }\n","date":"2019-09-06 14:07:42","endLine":2834,"groupId":"5632","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareTxnOffsetCommitResponse","params":"(finalStringconsumerGroupId@finallongproducerId@finalshortproducerEpoch@Map<TopicPartition@Errors>txnOffsetCommitResponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3d/33a43e60d567c2823cd9753cd6a4d8c664c678.src","preCode":"    private void prepareTxnOffsetCommitResponse(final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch,\n                                                Map<TopicPartition, Errors> txnOffsetCommitResponse) {\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(producerId, txnOffsetCommitRequest.data.producerId());\n            assertEquals(producerEpoch, txnOffsetCommitRequest.data.producerEpoch());\n            return true;\n        }, new TxnOffsetCommitResponse(0, txnOffsetCommitResponse));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2823,"status":"N"}],"commitId":"7f640f13b4d486477035c3edb28466734f053beb","commitMessage":"@@@KAFKA-9776: Downgrade TxnCommit API v3 when broker doesn't support (#8375)\n\nRevert the decision for the sendOffsetsToTransaction(groupMetadata) API to fail with old version of brokers for the sake of making the application easier to adapt between versions. This PR silently downgrade the TxnOffsetCommit API when the build version is small than 3.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-04-03 12:48:37","modifiedFileCount":"12","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-09-06 14:07:42","codes":[{"authorDate":"2020-04-24 12:39:11","commitOrder":7,"curCode":"    private MockClient.RequestMatcher addPartitionsRequestMatcher(final TopicPartition topicPartition,\n                                                                  final short epoch, final long producerId) {\n        return body -> {\n            AddPartitionsToTxnRequest addPartitionsToTxnRequest = (AddPartitionsToTxnRequest) body;\n            assertEquals(producerId, addPartitionsToTxnRequest.data.producerId());\n            assertEquals(epoch, addPartitionsToTxnRequest.data.producerEpoch());\n            assertEquals(singletonList(topicPartition), addPartitionsToTxnRequest.partitions());\n            assertEquals(transactionalId, addPartitionsToTxnRequest.data.transactionalId());\n            return true;\n        };\n    }\n","date":"2020-04-24 12:39:11","endLine":3220,"groupId":"5632","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"addPartitionsRequestMatcher","params":"(finalTopicPartitiontopicPartition@finalshortepoch@finallongproducerId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/12/6d4473dbd5dad8e7741a0f579dad81b1c340e5.src","preCode":"    private MockClient.RequestMatcher addPartitionsRequestMatcher(final TopicPartition topicPartition,\n                                                                  final short epoch, final long producerId) {\n        return body -> {\n            AddPartitionsToTxnRequest addPartitionsToTxnRequest = (AddPartitionsToTxnRequest) body;\n            assertEquals(producerId, addPartitionsToTxnRequest.producerId());\n            assertEquals(epoch, addPartitionsToTxnRequest.producerEpoch());\n            assertEquals(singletonList(topicPartition), addPartitionsToTxnRequest.partitions());\n            assertEquals(transactionalId, addPartitionsToTxnRequest.transactionalId());\n            return true;\n        };\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3210,"status":"M"},{"authorDate":"2019-09-06 14:07:42","commitOrder":7,"curCode":"    private void prepareTxnOffsetCommitResponse(final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch,\n                                                Map<TopicPartition, Errors> txnOffsetCommitResponse) {\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(producerId, txnOffsetCommitRequest.data.producerId());\n            assertEquals(producerEpoch, txnOffsetCommitRequest.data.producerEpoch());\n            return true;\n        }, new TxnOffsetCommitResponse(0, txnOffsetCommitResponse));\n    }\n","date":"2019-09-06 14:07:42","endLine":2834,"groupId":"5632","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareTxnOffsetCommitResponse","params":"(finalStringconsumerGroupId@finallongproducerId@finalshortproducerEpoch@Map<TopicPartition@Errors>txnOffsetCommitResponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3d/33a43e60d567c2823cd9753cd6a4d8c664c678.src","preCode":"    private void prepareTxnOffsetCommitResponse(final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch,\n                                                Map<TopicPartition, Errors> txnOffsetCommitResponse) {\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(producerId, txnOffsetCommitRequest.data.producerId());\n            assertEquals(producerEpoch, txnOffsetCommitRequest.data.producerEpoch());\n            return true;\n        }, new TxnOffsetCommitResponse(0, txnOffsetCommitResponse));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2823,"status":"N"}],"commitId":"f3c8bff311b0e4c4d0e316ac949fe4491f9b107f","commitMessage":"@@@KAFKA-8639: Replace AddPartitionsToTxn with Automated Protocol  (#8326)\n\nPart of the protocol automation effort.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-04-24 12:39:11","modifiedFileCount":"8","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-12-15 21:33:36","codes":[{"authorDate":"2020-12-15 21:33:36","commitOrder":8,"curCode":"    private MockClient.RequestMatcher addPartitionsRequestMatcher(final TopicPartition topicPartition,\n                                                                  final short epoch, final long producerId) {\n        return body -> {\n            AddPartitionsToTxnRequest addPartitionsToTxnRequest = (AddPartitionsToTxnRequest) body;\n            assertEquals(producerId, addPartitionsToTxnRequest.data().producerId());\n            assertEquals(epoch, addPartitionsToTxnRequest.data().producerEpoch());\n            assertEquals(singletonList(topicPartition), addPartitionsToTxnRequest.partitions());\n            assertEquals(transactionalId, addPartitionsToTxnRequest.data().transactionalId());\n            return true;\n        };\n    }\n","date":"2020-12-15 21:33:36","endLine":3405,"groupId":"123636","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"addPartitionsRequestMatcher","params":"(finalTopicPartitiontopicPartition@finalshortepoch@finallongproducerId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/977ea9f66d10a83c4bd8800a036e7e6968a0cd.src","preCode":"    private MockClient.RequestMatcher addPartitionsRequestMatcher(final TopicPartition topicPartition,\n                                                                  final short epoch, final long producerId) {\n        return body -> {\n            AddPartitionsToTxnRequest addPartitionsToTxnRequest = (AddPartitionsToTxnRequest) body;\n            assertEquals(producerId, addPartitionsToTxnRequest.data.producerId());\n            assertEquals(epoch, addPartitionsToTxnRequest.data.producerEpoch());\n            assertEquals(singletonList(topicPartition), addPartitionsToTxnRequest.partitions());\n            assertEquals(transactionalId, addPartitionsToTxnRequest.data.transactionalId());\n            return true;\n        };\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3395,"status":"M"},{"authorDate":"2020-12-15 21:33:36","commitOrder":8,"curCode":"    private void prepareTxnOffsetCommitResponse(final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch,\n                                                Map<TopicPartition, Errors> txnOffsetCommitResponse) {\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data().groupId());\n            assertEquals(producerId, txnOffsetCommitRequest.data().producerId());\n            assertEquals(producerEpoch, txnOffsetCommitRequest.data().producerEpoch());\n            return true;\n        }, new TxnOffsetCommitResponse(0, txnOffsetCommitResponse));\n    }\n","date":"2020-12-15 21:33:36","endLine":3469,"groupId":"123636","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareTxnOffsetCommitResponse","params":"(finalStringconsumerGroupId@finallongproducerId@finalshortproducerEpoch@Map<TopicPartition@Errors>txnOffsetCommitResponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/977ea9f66d10a83c4bd8800a036e7e6968a0cd.src","preCode":"    private void prepareTxnOffsetCommitResponse(final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch,\n                                                Map<TopicPartition, Errors> txnOffsetCommitResponse) {\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(producerId, txnOffsetCommitRequest.data.producerId());\n            assertEquals(producerEpoch, txnOffsetCommitRequest.data.producerEpoch());\n            return true;\n        }, new TxnOffsetCommitResponse(0, txnOffsetCommitResponse));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3458,"status":"M"}],"commitId":"1a10c3445e157da1d2fd670c043f19c385465eb0","commitMessage":"@@@KAFKA-10525: Emit JSONs with new auto-generated schema (KIP-673) (#9526)\n\nThis patch updates the request logger to output request and response payloads in JSON. Payloads are converted to JSON based on their auto-generated schema.\n\nReviewers:  Lucas Bradstreet <lucas@confluent.io>.  David Mao <dmao@confluent.io>.  David Jacot <djacot@confluent.io>\n","date":"2020-12-15 21:33:36","modifiedFileCount":"124","status":"M","submitter":"Anastasia Vela"}]
