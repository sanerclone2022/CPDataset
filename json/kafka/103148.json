[{"authorTime":"2020-12-16 22:33:10","codes":[{"authorDate":"2020-12-16 22:33:10","commitOrder":1,"curCode":"    public void testGetErrorResponse() {\n        for (short version = 1; version <= ApiKeys.LIST_OFFSETS.latestVersion(); version++) {\n            List<ListOffsetsTopic> topics = Arrays.asList(\n                    new ListOffsetsTopic()\n                        .setName(\"topic\")\n                        .setPartitions(Collections.singletonList(\n                                new ListOffsetsPartition()\n                                    .setPartitionIndex(0))));\n            ListOffsetsRequest request = ListOffsetsRequest.Builder\n                    .forConsumer(true, IsolationLevel.READ_COMMITTED)\n                    .setTargetTimes(topics)\n                    .build(version);\n            ListOffsetsResponse response = (ListOffsetsResponse) request.getErrorResponse(0, Errors.NOT_LEADER_OR_FOLLOWER.exception());\n    \n            List<ListOffsetsTopicResponse> v = Collections.singletonList(\n                    new ListOffsetsTopicResponse()\n                        .setName(\"topic\")\n                        .setPartitions(Collections.singletonList(\n                                new ListOffsetsPartitionResponse()\n                                    .setErrorCode(Errors.NOT_LEADER_OR_FOLLOWER.code())\n                                    .setLeaderEpoch(ListOffsetsResponse.UNKNOWN_EPOCH)\n                                    .setOffset(ListOffsetsResponse.UNKNOWN_OFFSET)\n                                    .setPartitionIndex(0)\n                                    .setTimestamp(ListOffsetsResponse.UNKNOWN_TIMESTAMP))));\n            ListOffsetsResponseData data = new ListOffsetsResponseData()\n                    .setThrottleTimeMs(0)\n                    .setTopics(v);\n            ListOffsetsResponse expectedResponse = new ListOffsetsResponse(data);\n            assertEquals(expectedResponse.data().topics(), response.data().topics());\n            assertEquals(expectedResponse.throttleTimeMs(), response.throttleTimeMs());\n        }\n    }\n","date":"2020-12-16 22:33:10","endLine":92,"groupId":"19004","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetErrorResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/da/6fec3b44db9248f7cf84cffccf72f1100e5d07.src","preCode":"    public void testGetErrorResponse() {\n        for (short version = 1; version <= ApiKeys.LIST_OFFSETS.latestVersion(); version++) {\n            List<ListOffsetsTopic> topics = Arrays.asList(\n                    new ListOffsetsTopic()\n                        .setName(\"topic\")\n                        .setPartitions(Collections.singletonList(\n                                new ListOffsetsPartition()\n                                    .setPartitionIndex(0))));\n            ListOffsetsRequest request = ListOffsetsRequest.Builder\n                    .forConsumer(true, IsolationLevel.READ_COMMITTED)\n                    .setTargetTimes(topics)\n                    .build(version);\n            ListOffsetsResponse response = (ListOffsetsResponse) request.getErrorResponse(0, Errors.NOT_LEADER_OR_FOLLOWER.exception());\n    \n            List<ListOffsetsTopicResponse> v = Collections.singletonList(\n                    new ListOffsetsTopicResponse()\n                        .setName(\"topic\")\n                        .setPartitions(Collections.singletonList(\n                                new ListOffsetsPartitionResponse()\n                                    .setErrorCode(Errors.NOT_LEADER_OR_FOLLOWER.code())\n                                    .setLeaderEpoch(ListOffsetsResponse.UNKNOWN_EPOCH)\n                                    .setOffset(ListOffsetsResponse.UNKNOWN_OFFSET)\n                                    .setPartitionIndex(0)\n                                    .setTimestamp(ListOffsetsResponse.UNKNOWN_TIMESTAMP))));\n            ListOffsetsResponseData data = new ListOffsetsResponseData()\n                    .setThrottleTimeMs(0)\n                    .setTopics(v);\n            ListOffsetsResponse expectedResponse = new ListOffsetsResponse(data);\n            assertEquals(expectedResponse.data().topics(), response.data().topics());\n            assertEquals(expectedResponse.throttleTimeMs(), response.throttleTimeMs());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/ListOffsetsRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"B"},{"authorDate":"2020-12-16 22:33:10","commitOrder":1,"curCode":"    public void testGetErrorResponseV0() {\n        List<ListOffsetsTopic> topics = Arrays.asList(\n                new ListOffsetsTopic()\n                    .setName(\"topic\")\n                    .setPartitions(Collections.singletonList(\n                            new ListOffsetsPartition()\n                                .setPartitionIndex(0))));\n        ListOffsetsRequest request = ListOffsetsRequest.Builder\n                .forConsumer(true, IsolationLevel.READ_UNCOMMITTED)\n                .setTargetTimes(topics)\n                .build((short) 0);\n        ListOffsetsResponse response = (ListOffsetsResponse) request.getErrorResponse(0, Errors.NOT_LEADER_OR_FOLLOWER.exception());\n\n        List<ListOffsetsTopicResponse> v = Collections.singletonList(\n                new ListOffsetsTopicResponse()\n                    .setName(\"topic\")\n                    .setPartitions(Collections.singletonList(\n                            new ListOffsetsPartitionResponse()\n                                .setErrorCode(Errors.NOT_LEADER_OR_FOLLOWER.code())\n                                .setOldStyleOffsets(Collections.emptyList())\n                                .setPartitionIndex(0))));\n        ListOffsetsResponseData data = new ListOffsetsResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(v);\n        ListOffsetsResponse expectedResponse = new ListOffsetsResponse(data);\n        assertEquals(expectedResponse.data().topics(), response.data().topics());\n        assertEquals(expectedResponse.throttleTimeMs(), response.throttleTimeMs());\n    }\n","date":"2020-12-16 22:33:10","endLine":122,"groupId":"19005","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetErrorResponseV0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/da/6fec3b44db9248f7cf84cffccf72f1100e5d07.src","preCode":"    public void testGetErrorResponseV0() {\n        List<ListOffsetsTopic> topics = Arrays.asList(\n                new ListOffsetsTopic()\n                    .setName(\"topic\")\n                    .setPartitions(Collections.singletonList(\n                            new ListOffsetsPartition()\n                                .setPartitionIndex(0))));\n        ListOffsetsRequest request = ListOffsetsRequest.Builder\n                .forConsumer(true, IsolationLevel.READ_UNCOMMITTED)\n                .setTargetTimes(topics)\n                .build((short) 0);\n        ListOffsetsResponse response = (ListOffsetsResponse) request.getErrorResponse(0, Errors.NOT_LEADER_OR_FOLLOWER.exception());\n\n        List<ListOffsetsTopicResponse> v = Collections.singletonList(\n                new ListOffsetsTopicResponse()\n                    .setName(\"topic\")\n                    .setPartitions(Collections.singletonList(\n                            new ListOffsetsPartitionResponse()\n                                .setErrorCode(Errors.NOT_LEADER_OR_FOLLOWER.code())\n                                .setOldStyleOffsets(Collections.emptyList())\n                                .setPartitionIndex(0))));\n        ListOffsetsResponseData data = new ListOffsetsResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(v);\n        ListOffsetsResponse expectedResponse = new ListOffsetsResponse(data);\n        assertEquals(expectedResponse.data().topics(), response.data().topics());\n        assertEquals(expectedResponse.throttleTimeMs(), response.throttleTimeMs());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/ListOffsetsRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"}],"commitId":"782175dfbc4a6694ae9a3970cd92ebd20647bc7e","commitMessage":"@@@MINOR: Simplify ApiKeys by relying on ApiMessageType (#9748)\n\n* The naming for `ListOffsets` was inconsistent.  in some places it was `ListOffset` and in others\nit was `ListOffsets`. Picked the latter since it was used in metrics and the protocol documentation\nand made it consistent.\n* Removed unused methods in ApiKeys.\n* Deleted `CommonFields`.\n* Added `lowestSupportedVersion` and `highestSupportedVersion` to `ApiMessageType`\n* Removed tests in `MessageTest` that are no longer relevant.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2020-12-16 22:33:10","modifiedFileCount":"20","status":"B","submitter":"Ismael Juma"},{"authorTime":"2021-06-25 20:29:12","codes":[{"authorDate":"2021-06-25 20:29:12","commitOrder":2,"curCode":"    public void testGetErrorResponse() {\n        for (short version = 1; version <= ApiKeys.LIST_OFFSETS.latestVersion(); version++) {\n            List<ListOffsetsTopic> topics = Arrays.asList(\n                    new ListOffsetsTopic()\n                        .setName(\"topic\")\n                        .setPartitions(Collections.singletonList(\n                                new ListOffsetsPartition()\n                                    .setPartitionIndex(0))));\n            ListOffsetsRequest request = ListOffsetsRequest.Builder\n                    .forConsumer(true, IsolationLevel.READ_COMMITTED, false)\n                    .setTargetTimes(topics)\n                    .build(version);\n            ListOffsetsResponse response = (ListOffsetsResponse) request.getErrorResponse(0, Errors.NOT_LEADER_OR_FOLLOWER.exception());\n    \n            List<ListOffsetsTopicResponse> v = Collections.singletonList(\n                    new ListOffsetsTopicResponse()\n                        .setName(\"topic\")\n                        .setPartitions(Collections.singletonList(\n                                new ListOffsetsPartitionResponse()\n                                    .setErrorCode(Errors.NOT_LEADER_OR_FOLLOWER.code())\n                                    .setLeaderEpoch(ListOffsetsResponse.UNKNOWN_EPOCH)\n                                    .setOffset(ListOffsetsResponse.UNKNOWN_OFFSET)\n                                    .setPartitionIndex(0)\n                                    .setTimestamp(ListOffsetsResponse.UNKNOWN_TIMESTAMP))));\n            ListOffsetsResponseData data = new ListOffsetsResponseData()\n                    .setThrottleTimeMs(0)\n                    .setTopics(v);\n            ListOffsetsResponse expectedResponse = new ListOffsetsResponse(data);\n            assertEquals(expectedResponse.data().topics(), response.data().topics());\n            assertEquals(expectedResponse.throttleTimeMs(), response.throttleTimeMs());\n        }\n    }\n","date":"2021-06-25 20:29:12","endLine":92,"groupId":"103148","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testGetErrorResponse","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/c4b101d8969924ff6a34ca673f0704a724270c.src","preCode":"    public void testGetErrorResponse() {\n        for (short version = 1; version <= ApiKeys.LIST_OFFSETS.latestVersion(); version++) {\n            List<ListOffsetsTopic> topics = Arrays.asList(\n                    new ListOffsetsTopic()\n                        .setName(\"topic\")\n                        .setPartitions(Collections.singletonList(\n                                new ListOffsetsPartition()\n                                    .setPartitionIndex(0))));\n            ListOffsetsRequest request = ListOffsetsRequest.Builder\n                    .forConsumer(true, IsolationLevel.READ_COMMITTED)\n                    .setTargetTimes(topics)\n                    .build(version);\n            ListOffsetsResponse response = (ListOffsetsResponse) request.getErrorResponse(0, Errors.NOT_LEADER_OR_FOLLOWER.exception());\n    \n            List<ListOffsetsTopicResponse> v = Collections.singletonList(\n                    new ListOffsetsTopicResponse()\n                        .setName(\"topic\")\n                        .setPartitions(Collections.singletonList(\n                                new ListOffsetsPartitionResponse()\n                                    .setErrorCode(Errors.NOT_LEADER_OR_FOLLOWER.code())\n                                    .setLeaderEpoch(ListOffsetsResponse.UNKNOWN_EPOCH)\n                                    .setOffset(ListOffsetsResponse.UNKNOWN_OFFSET)\n                                    .setPartitionIndex(0)\n                                    .setTimestamp(ListOffsetsResponse.UNKNOWN_TIMESTAMP))));\n            ListOffsetsResponseData data = new ListOffsetsResponseData()\n                    .setThrottleTimeMs(0)\n                    .setTopics(v);\n            ListOffsetsResponse expectedResponse = new ListOffsetsResponse(data);\n            assertEquals(expectedResponse.data().topics(), response.data().topics());\n            assertEquals(expectedResponse.throttleTimeMs(), response.throttleTimeMs());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/ListOffsetsRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2021-06-25 20:29:12","commitOrder":2,"curCode":"    public void testGetErrorResponseV0() {\n        List<ListOffsetsTopic> topics = Arrays.asList(\n                new ListOffsetsTopic()\n                    .setName(\"topic\")\n                    .setPartitions(Collections.singletonList(\n                            new ListOffsetsPartition()\n                                .setPartitionIndex(0))));\n        ListOffsetsRequest request = ListOffsetsRequest.Builder\n                .forConsumer(true, IsolationLevel.READ_UNCOMMITTED, false)\n                .setTargetTimes(topics)\n                .build((short) 0);\n        ListOffsetsResponse response = (ListOffsetsResponse) request.getErrorResponse(0, Errors.NOT_LEADER_OR_FOLLOWER.exception());\n\n        List<ListOffsetsTopicResponse> v = Collections.singletonList(\n                new ListOffsetsTopicResponse()\n                    .setName(\"topic\")\n                    .setPartitions(Collections.singletonList(\n                            new ListOffsetsPartitionResponse()\n                                .setErrorCode(Errors.NOT_LEADER_OR_FOLLOWER.code())\n                                .setOldStyleOffsets(Collections.emptyList())\n                                .setPartitionIndex(0))));\n        ListOffsetsResponseData data = new ListOffsetsResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(v);\n        ListOffsetsResponse expectedResponse = new ListOffsetsResponse(data);\n        assertEquals(expectedResponse.data().topics(), response.data().topics());\n        assertEquals(expectedResponse.throttleTimeMs(), response.throttleTimeMs());\n    }\n","date":"2021-06-25 20:29:12","endLine":122,"groupId":"103148","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testGetErrorResponseV0","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/83/c4b101d8969924ff6a34ca673f0704a724270c.src","preCode":"    public void testGetErrorResponseV0() {\n        List<ListOffsetsTopic> topics = Arrays.asList(\n                new ListOffsetsTopic()\n                    .setName(\"topic\")\n                    .setPartitions(Collections.singletonList(\n                            new ListOffsetsPartition()\n                                .setPartitionIndex(0))));\n        ListOffsetsRequest request = ListOffsetsRequest.Builder\n                .forConsumer(true, IsolationLevel.READ_UNCOMMITTED)\n                .setTargetTimes(topics)\n                .build((short) 0);\n        ListOffsetsResponse response = (ListOffsetsResponse) request.getErrorResponse(0, Errors.NOT_LEADER_OR_FOLLOWER.exception());\n\n        List<ListOffsetsTopicResponse> v = Collections.singletonList(\n                new ListOffsetsTopicResponse()\n                    .setName(\"topic\")\n                    .setPartitions(Collections.singletonList(\n                            new ListOffsetsPartitionResponse()\n                                .setErrorCode(Errors.NOT_LEADER_OR_FOLLOWER.code())\n                                .setOldStyleOffsets(Collections.emptyList())\n                                .setPartitionIndex(0))));\n        ListOffsetsResponseData data = new ListOffsetsResponseData()\n                .setThrottleTimeMs(0)\n                .setTopics(v);\n        ListOffsetsResponse expectedResponse = new ListOffsetsResponse(data);\n        assertEquals(expectedResponse.data().topics(), response.data().topics());\n        assertEquals(expectedResponse.throttleTimeMs(), response.throttleTimeMs());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/ListOffsetsRequestTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"bd72ef1bf1e40feb3bc17349a385b479fa5fa530","commitMessage":"@@@KAFKA-12541; Extend ListOffset to fetch offset with max timestamp (KIP-734) (#10760)\n\nThis patch implements KIP-734 as described in https://cwiki.apache.org/confluence/display/KAFKA/KIP-734%3A+Improve+AdminClient.listOffsets+to+return+timestamp+and+offset+for+the+record+with+the+largest+timestamp.\n\nReviewers: David Jacot <djacot@confluent.io>","date":"2021-06-25 20:29:12","modifiedFileCount":"8","status":"M","submitter":"thomaskwscott"}]
