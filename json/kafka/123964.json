[{"authorTime":"2021-03-04 18:06:50","codes":[{"authorDate":"2021-03-04 18:06:50","commitOrder":1,"curCode":"    private FetchResponse fullFetchResponse(TopicPartition tp, MemoryRecords records, Errors error, long hw,\n                                                           long lastStableOffset, int throttleTime, Optional<Integer> preferredReplicaId) {\n        Map<TopicPartition, FetchResponseData.PartitionData> partitions = Collections.singletonMap(tp,\n                new FetchResponseData.PartitionData()\n                        .setPartitionIndex(tp.partition())\n                        .setErrorCode(error.code())\n                        .setHighWatermark(hw)\n                        .setLastStableOffset(lastStableOffset)\n                        .setLogStartOffset(0)\n                        .setRecords(records)\n                        .setPreferredReadReplica(preferredReplicaId.orElse(FetchResponse.INVALID_PREFERRED_REPLICA_ID)));\n        return FetchResponse.of(Errors.NONE, throttleTime, INVALID_SESSION_ID, new LinkedHashMap<>(partitions));\n    }\n","date":"2021-03-04 18:06:50","endLine":4567,"groupId":"17916","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"fullFetchResponse","params":"(TopicPartitiontp@MemoryRecordsrecords@Errorserror@longhw@longlastStableOffset@intthrottleTime@Optional<Integer>preferredReplicaId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/98/5d95947c23675530c9db6a31c6f3fbd2d6cecf.src","preCode":"    private FetchResponse fullFetchResponse(TopicPartition tp, MemoryRecords records, Errors error, long hw,\n                                                           long lastStableOffset, int throttleTime, Optional<Integer> preferredReplicaId) {\n        Map<TopicPartition, FetchResponseData.PartitionData> partitions = Collections.singletonMap(tp,\n                new FetchResponseData.PartitionData()\n                        .setPartitionIndex(tp.partition())\n                        .setErrorCode(error.code())\n                        .setHighWatermark(hw)\n                        .setLastStableOffset(lastStableOffset)\n                        .setLogStartOffset(0)\n                        .setRecords(records)\n                        .setPreferredReadReplica(preferredReplicaId.orElse(FetchResponse.INVALID_PREFERRED_REPLICA_ID)));\n        return FetchResponse.of(Errors.NONE, throttleTime, INVALID_SESSION_ID, new LinkedHashMap<>(partitions));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":4555,"status":"B"},{"authorDate":"2021-03-04 18:06:50","commitOrder":1,"curCode":"    private FetchResponse fetchResponse(TopicPartition tp, MemoryRecords records, Errors error, long hw,\n                                        long lastStableOffset, long logStartOffset, int throttleTime) {\n        Map<TopicPartition, FetchResponseData.PartitionData> partitions = Collections.singletonMap(tp,\n                new FetchResponseData.PartitionData()\n                        .setPartitionIndex(tp.partition())\n                        .setErrorCode(error.code())\n                        .setHighWatermark(hw)\n                        .setLastStableOffset(lastStableOffset)\n                        .setLogStartOffset(logStartOffset)\n                        .setRecords(records));\n        return FetchResponse.of(Errors.NONE, throttleTime, INVALID_SESSION_ID, new LinkedHashMap<>(partitions));\n    }\n","date":"2021-03-04 18:06:50","endLine":4580,"groupId":"17920","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchResponse","params":"(TopicPartitiontp@MemoryRecordsrecords@Errorserror@longhw@longlastStableOffset@longlogStartOffset@intthrottleTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/98/5d95947c23675530c9db6a31c6f3fbd2d6cecf.src","preCode":"    private FetchResponse fetchResponse(TopicPartition tp, MemoryRecords records, Errors error, long hw,\n                                        long lastStableOffset, long logStartOffset, int throttleTime) {\n        Map<TopicPartition, FetchResponseData.PartitionData> partitions = Collections.singletonMap(tp,\n                new FetchResponseData.PartitionData()\n                        .setPartitionIndex(tp.partition())\n                        .setErrorCode(error.code())\n                        .setHighWatermark(hw)\n                        .setLastStableOffset(lastStableOffset)\n                        .setLogStartOffset(logStartOffset)\n                        .setRecords(records));\n        return FetchResponse.of(Errors.NONE, throttleTime, INVALID_SESSION_ID, new LinkedHashMap<>(partitions));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":4569,"status":"B"}],"commitId":"8205051e90e3ea16165f8dc1f5c81af744bb1b9a","commitMessage":"@@@MINOR: remove FetchResponse.AbortedTransaction and redundant construc? (#9758)\n\n1. rename INVALID_HIGHWATERMARK to INVALID_HIGH_WATERMARK\n2. replace FetchResponse.AbortedTransaction by FetchResponseData.AbortedTransaction\n3. remove redundant constructors from FetchResponse.PartitionData\n4. rename recordSet to records\n5. add helpers \"recordsOrFail\" and \"recordsSize\" to FetchResponse to process record casting\n\nReviewers: Ismael Juma <ismael@juma.me.uk>","date":"2021-03-04 18:06:50","modifiedFileCount":"15","status":"B","submitter":"Chia-Ping Tsai"},{"authorTime":"2021-07-08 07:02:37","codes":[{"authorDate":"2021-07-08 07:02:37","commitOrder":2,"curCode":"    private FetchResponse fullFetchResponse(TopicPartition tp, MemoryRecords records, Errors error, long hw,\n                                                           long lastStableOffset, int throttleTime, Optional<Integer> preferredReplicaId) {\n        Map<TopicPartition, FetchResponseData.PartitionData> partitions = Collections.singletonMap(tp,\n                new FetchResponseData.PartitionData()\n                        .setPartitionIndex(tp.partition())\n                        .setErrorCode(error.code())\n                        .setHighWatermark(hw)\n                        .setLastStableOffset(lastStableOffset)\n                        .setLogStartOffset(0)\n                        .setRecords(records)\n                        .setPreferredReadReplica(preferredReplicaId.orElse(FetchResponse.INVALID_PREFERRED_REPLICA_ID)));\n        return FetchResponse.of(Errors.NONE, throttleTime, INVALID_SESSION_ID, new LinkedHashMap<>(partitions), topicIds);\n    }\n","date":"2021-07-08 07:02:37","endLine":4665,"groupId":"123964","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"fullFetchResponse","params":"(TopicPartitiontp@MemoryRecordsrecords@Errorserror@longhw@longlastStableOffset@intthrottleTime@Optional<Integer>preferredReplicaId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/a8d4d0de616ad523f86ea20b0b0f6e6fc16cd5.src","preCode":"    private FetchResponse fullFetchResponse(TopicPartition tp, MemoryRecords records, Errors error, long hw,\n                                                           long lastStableOffset, int throttleTime, Optional<Integer> preferredReplicaId) {\n        Map<TopicPartition, FetchResponseData.PartitionData> partitions = Collections.singletonMap(tp,\n                new FetchResponseData.PartitionData()\n                        .setPartitionIndex(tp.partition())\n                        .setErrorCode(error.code())\n                        .setHighWatermark(hw)\n                        .setLastStableOffset(lastStableOffset)\n                        .setLogStartOffset(0)\n                        .setRecords(records)\n                        .setPreferredReadReplica(preferredReplicaId.orElse(FetchResponse.INVALID_PREFERRED_REPLICA_ID)));\n        return FetchResponse.of(Errors.NONE, throttleTime, INVALID_SESSION_ID, new LinkedHashMap<>(partitions));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":4653,"status":"M"},{"authorDate":"2021-07-08 07:02:37","commitOrder":2,"curCode":"    private FetchResponse fetchResponse(TopicPartition tp, MemoryRecords records, Errors error, long hw,\n                                        long lastStableOffset, long logStartOffset, int throttleTime) {\n        Map<TopicPartition, FetchResponseData.PartitionData> partitions = Collections.singletonMap(tp,\n                new FetchResponseData.PartitionData()\n                        .setPartitionIndex(tp.partition())\n                        .setErrorCode(error.code())\n                        .setHighWatermark(hw)\n                        .setLastStableOffset(lastStableOffset)\n                        .setLogStartOffset(logStartOffset)\n                        .setRecords(records));\n        return FetchResponse.of(Errors.NONE, throttleTime, INVALID_SESSION_ID, new LinkedHashMap<>(partitions), topicIds);\n    }\n","date":"2021-07-08 07:02:37","endLine":4678,"groupId":"123964","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchResponse","params":"(TopicPartitiontp@MemoryRecordsrecords@Errorserror@longhw@longlastStableOffset@longlogStartOffset@intthrottleTime)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/a8d4d0de616ad523f86ea20b0b0f6e6fc16cd5.src","preCode":"    private FetchResponse fetchResponse(TopicPartition tp, MemoryRecords records, Errors error, long hw,\n                                        long lastStableOffset, long logStartOffset, int throttleTime) {\n        Map<TopicPartition, FetchResponseData.PartitionData> partitions = Collections.singletonMap(tp,\n                new FetchResponseData.PartitionData()\n                        .setPartitionIndex(tp.partition())\n                        .setErrorCode(error.code())\n                        .setHighWatermark(hw)\n                        .setLastStableOffset(lastStableOffset)\n                        .setLogStartOffset(logStartOffset)\n                        .setRecords(records));\n        return FetchResponse.of(Errors.NONE, throttleTime, INVALID_SESSION_ID, new LinkedHashMap<>(partitions));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":4667,"status":"M"}],"commitId":"2b8aff58b575c199ee8372e5689420c9d77357a5","commitMessage":"@@@KAFKA-10580: Add topic ID support to Fetch request (#9944)\n\nUpdated FetchRequest and FetchResponse to use topic IDs rather than topic names.\nSome of the complicated code is found in FetchSession and FetchSessionHandler.\nWe need to be able to store topic IDs and maintain a cache on the broker for IDs that may not have been resolved. On incremental fetch requests.  we will try to resolve them or remove them if in toForget.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>.  Chia-Ping Tsai <chia7712@gmail.com>.  Jun Rao <junrao@gmail.com>","date":"2021-07-08 07:02:37","modifiedFileCount":"23","status":"M","submitter":"Justine Olshan"}]
