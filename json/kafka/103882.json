[{"authorTime":"2017-10-23 18:57:45","codes":[{"authorDate":"2017-10-23 18:57:45","commitOrder":1,"curCode":"    public void testClusterConnectionStateChanges() {\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        connectionStates.connecting(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.CONNECTING);\n        assertTrue(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isReady(nodeId1));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.hasReadyNodes());\n\n        time.sleep(100);\n\n        \r\n        connectionStates.ready(nodeId1);\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.READY);\n        assertTrue(connectionStates.isReady(nodeId1));\n        assertTrue(connectionStates.hasReadyNodes());\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), Long.MAX_VALUE);\n\n        time.sleep(15000);\n\n        \r\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.DISCONNECTED);\n        assertTrue(connectionStates.isDisconnected(nodeId1));\n        assertTrue(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.hasReadyNodes());\n        assertFalse(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        double backoffTolerance = reconnectBackoffMs * reconnectBackoffJitter;\n        long currentBackoff = connectionStates.connectionDelay(nodeId1, time.milliseconds());\n        assertEquals(reconnectBackoffMs, currentBackoff, backoffTolerance);\n\n        time.sleep(currentBackoff + 1);\n        \r\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n    }\n","date":"2017-10-23 19:07:58","endLine":87,"groupId":"3755","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterConnectionStateChanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/21/b87197442647f317af390c6a7cb5d1188c10ac.src","preCode":"    public void testClusterConnectionStateChanges() {\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        connectionStates.connecting(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.CONNECTING);\n        assertTrue(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isReady(nodeId1));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.hasReadyNodes());\n\n        time.sleep(100);\n\n        \r\n        connectionStates.ready(nodeId1);\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.READY);\n        assertTrue(connectionStates.isReady(nodeId1));\n        assertTrue(connectionStates.hasReadyNodes());\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), Long.MAX_VALUE);\n\n        time.sleep(15000);\n\n        \r\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.DISCONNECTED);\n        assertTrue(connectionStates.isDisconnected(nodeId1));\n        assertTrue(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.hasReadyNodes());\n        assertFalse(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        double backoffTolerance = reconnectBackoffMs * reconnectBackoffJitter;\n        long currentBackoff = connectionStates.connectionDelay(nodeId1, time.milliseconds());\n        assertEquals(reconnectBackoffMs, currentBackoff, backoffTolerance);\n\n        time.sleep(currentBackoff + 1);\n        \r\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2017-10-23 18:57:45","commitOrder":1,"curCode":"    public void testRemoveNode() {\n        connectionStates.connecting(nodeId1, time.milliseconds());\n        time.sleep(1000);\n        connectionStates.ready(nodeId1);\n        time.sleep(10000);\n\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        \r\n        connectionStates.remove(nodeId1);\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), 0L);\n    }\n","date":"2017-10-23 19:07:58","endLine":160,"groupId":"7942","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/21/b87197442647f317af390c6a7cb5d1188c10ac.src","preCode":"    public void testRemoveNode() {\n        connectionStates.connecting(nodeId1, time.milliseconds());\n        time.sleep(1000);\n        connectionStates.ready(nodeId1);\n        time.sleep(10000);\n\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        \r\n        connectionStates.remove(nodeId1);\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), 0L);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"B"}],"commitId":"021f2e7e246268da46be80fd87d76bb9961b93d8","commitMessage":"@@@KAFKA-6104; Added unit tests for ClusterConnectionStates\n\nAuthor: Soenke Liebau <soenke.liebau@opencore.com>\n\nReviewers: Ted Yu <yuzhihong@gmail.com>.  Ismael Juma <ismael@juma.me.uk>\n\nCloses #4113 from soenkeliebau/KAFKA-6104\n","date":"2017-10-23 19:07:58","modifiedFileCount":"0","status":"B","submitter":"Soenke Liebau"},{"authorTime":"2017-10-23 18:57:45","codes":[{"authorDate":"2018-04-12 08:03:20","commitOrder":2,"curCode":"    public void testClusterConnectionStateChanges() {\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        connectionStates.connecting(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.CONNECTING);\n        assertTrue(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isReady(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.hasReadyNodes(time.milliseconds()));\n\n        time.sleep(100);\n\n        \r\n        connectionStates.ready(nodeId1);\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.READY);\n        assertTrue(connectionStates.isReady(nodeId1, time.milliseconds()));\n        assertTrue(connectionStates.hasReadyNodes(time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), Long.MAX_VALUE);\n\n        time.sleep(15000);\n\n        \r\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.DISCONNECTED);\n        assertTrue(connectionStates.isDisconnected(nodeId1));\n        assertTrue(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.hasReadyNodes(time.milliseconds()));\n        assertFalse(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        double backoffTolerance = reconnectBackoffMs * reconnectBackoffJitter;\n        long currentBackoff = connectionStates.connectionDelay(nodeId1, time.milliseconds());\n        assertEquals(reconnectBackoffMs, currentBackoff, backoffTolerance);\n\n        time.sleep(currentBackoff + 1);\n        \r\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n    }\n","date":"2018-05-31 01:10:33","endLine":88,"groupId":"3755","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterConnectionStateChanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/37/155ce8ef8da0f243798c68ae39755e3cf42795.src","preCode":"    public void testClusterConnectionStateChanges() {\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        connectionStates.connecting(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.CONNECTING);\n        assertTrue(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isReady(nodeId1));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.hasReadyNodes());\n\n        time.sleep(100);\n\n        \r\n        connectionStates.ready(nodeId1);\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.READY);\n        assertTrue(connectionStates.isReady(nodeId1));\n        assertTrue(connectionStates.hasReadyNodes());\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), Long.MAX_VALUE);\n\n        time.sleep(15000);\n\n        \r\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.DISCONNECTED);\n        assertTrue(connectionStates.isDisconnected(nodeId1));\n        assertTrue(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.hasReadyNodes());\n        assertFalse(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        double backoffTolerance = reconnectBackoffMs * reconnectBackoffJitter;\n        long currentBackoff = connectionStates.connectionDelay(nodeId1, time.milliseconds());\n        assertEquals(reconnectBackoffMs, currentBackoff, backoffTolerance);\n\n        time.sleep(currentBackoff + 1);\n        \r\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2017-10-23 18:57:45","commitOrder":2,"curCode":"    public void testRemoveNode() {\n        connectionStates.connecting(nodeId1, time.milliseconds());\n        time.sleep(1000);\n        connectionStates.ready(nodeId1);\n        time.sleep(10000);\n\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        \r\n        connectionStates.remove(nodeId1);\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), 0L);\n    }\n","date":"2017-10-23 19:07:58","endLine":160,"groupId":"7942","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/21/b87197442647f317af390c6a7cb5d1188c10ac.src","preCode":"    public void testRemoveNode() {\n        connectionStates.connecting(nodeId1, time.milliseconds());\n        time.sleep(1000);\n        connectionStates.ready(nodeId1);\n        time.sleep(10000);\n\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        \r\n        connectionStates.remove(nodeId1);\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), 0L);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"N"}],"commitId":"1facab387f8c2e513c8b7397430251dc44970e35","commitMessage":"@@@KAFKA-6028: Improve the quota throttle communication (KIP-219)\n\nThis implements KIP-219.  where a broker returns a response with throttle time on\nquota violation immediately after processing the corresponding request.  After\nthe response is sent out.  the broker will keep the channel muted until the\nthrottle time is over. Also.  on receiving a response with throttle time.  client\nwill block outgoing communication to the broker for the specified throttle time.\n\nSee PR 4830.  5064 and 5094 for all the review history\n\nAuthor: Jon Lee <jonlee@jonlee-ld1.linkedin.biz>\n\nReviewers: Jun Rao <junrao@gmail.com>.  Rajini Sivaram <rajinisivaram@googlemail.com>.  Ismael Juma <ismael@juma.me.uk>.   Dong Lin <lindong28@gmail.com>\n\nCloses #5064 from jonlee2/kip-219\n","date":"2018-05-31 01:10:33","modifiedFileCount":"96","status":"M","submitter":"Jon Lee"},{"authorTime":"2018-10-12 01:14:17","codes":[{"authorDate":"2018-10-12 01:14:17","commitOrder":3,"curCode":"    public void testClusterConnectionStateChanges() throws UnknownHostException {\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.CONNECTING);\n        assertTrue(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isReady(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.hasReadyNodes(time.milliseconds()));\n\n        time.sleep(100);\n\n        \r\n        connectionStates.ready(nodeId1);\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.READY);\n        assertTrue(connectionStates.isReady(nodeId1, time.milliseconds()));\n        assertTrue(connectionStates.hasReadyNodes(time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), Long.MAX_VALUE);\n\n        time.sleep(15000);\n\n        \r\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.DISCONNECTED);\n        assertTrue(connectionStates.isDisconnected(nodeId1));\n        assertTrue(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.hasReadyNodes(time.milliseconds()));\n        assertFalse(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        double backoffTolerance = reconnectBackoffMs * reconnectBackoffJitter;\n        long currentBackoff = connectionStates.connectionDelay(nodeId1, time.milliseconds());\n        assertEquals(reconnectBackoffMs, currentBackoff, backoffTolerance);\n\n        time.sleep(currentBackoff + 1);\n        \r\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n    }\n","date":"2018-10-12 01:14:17","endLine":95,"groupId":"3755","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterConnectionStateChanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d4/a2a55dd4b527e3ad5bbde4f7c64d1800f2c9de.src","preCode":"    public void testClusterConnectionStateChanges() {\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        connectionStates.connecting(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.CONNECTING);\n        assertTrue(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isReady(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.hasReadyNodes(time.milliseconds()));\n\n        time.sleep(100);\n\n        \r\n        connectionStates.ready(nodeId1);\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.READY);\n        assertTrue(connectionStates.isReady(nodeId1, time.milliseconds()));\n        assertTrue(connectionStates.hasReadyNodes(time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), Long.MAX_VALUE);\n\n        time.sleep(15000);\n\n        \r\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.DISCONNECTED);\n        assertTrue(connectionStates.isDisconnected(nodeId1));\n        assertTrue(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.hasReadyNodes(time.milliseconds()));\n        assertFalse(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        double backoffTolerance = reconnectBackoffMs * reconnectBackoffJitter;\n        long currentBackoff = connectionStates.connectionDelay(nodeId1, time.milliseconds());\n        assertEquals(reconnectBackoffMs, currentBackoff, backoffTolerance);\n\n        time.sleep(currentBackoff + 1);\n        \r\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2018-10-12 01:14:17","commitOrder":3,"curCode":"    public void testRemoveNode() throws UnknownHostException {\n        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n        time.sleep(1000);\n        connectionStates.ready(nodeId1);\n        time.sleep(10000);\n\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        \r\n        connectionStates.remove(nodeId1);\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), 0L);\n    }\n","date":"2018-10-12 01:14:17","endLine":169,"groupId":"7942","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d4/a2a55dd4b527e3ad5bbde4f7c64d1800f2c9de.src","preCode":"    public void testRemoveNode() {\n        connectionStates.connecting(nodeId1, time.milliseconds());\n        time.sleep(1000);\n        connectionStates.ready(nodeId1);\n        time.sleep(10000);\n\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        \r\n        connectionStates.remove(nodeId1);\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), 0L);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"f393b2f7dd477c3a43e70631f7036a211bf5d740","commitMessage":"@@@KAFKA-6863 Kafka clients should try to use multiple DNS resolved IP (#4987)\n\nImplementation of KIP-302: Based on the new client configuration `client.dns.lookup`.  a NetworkClient can use InetAddress.getAllByName to find all IPs and iterate over them when they fail to connect. Only uses either IPv4 or IPv6 addresses similar to the default mode.\n\nCo-authored-by: Edoardo Comar <ecomar@uk.ibm.com>\nCo-authored-by: Mickael Maison <mickael.maison@gmail.com>\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>","date":"2018-10-12 01:14:17","modifiedFileCount":"18","status":"M","submitter":"Edoardo Comar"},{"authorTime":"2019-03-07 16:07:23","codes":[{"authorDate":"2019-03-07 16:07:23","commitOrder":4,"curCode":"    public void testClusterConnectionStateChanges() {\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.CONNECTING);\n        assertTrue(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isReady(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.hasReadyNodes(time.milliseconds()));\n\n        time.sleep(100);\n\n        \r\n        connectionStates.ready(nodeId1);\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.READY);\n        assertTrue(connectionStates.isReady(nodeId1, time.milliseconds()));\n        assertTrue(connectionStates.hasReadyNodes(time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), Long.MAX_VALUE);\n\n        time.sleep(15000);\n\n        \r\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.DISCONNECTED);\n        assertTrue(connectionStates.isDisconnected(nodeId1));\n        assertTrue(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.hasReadyNodes(time.milliseconds()));\n        assertFalse(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        double backoffTolerance = reconnectBackoffMs * reconnectBackoffJitter;\n        long currentBackoff = connectionStates.connectionDelay(nodeId1, time.milliseconds());\n        assertEquals(reconnectBackoffMs, currentBackoff, backoffTolerance);\n\n        time.sleep(currentBackoff + 1);\n        \r\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n    }\n","date":"2019-03-07 16:07:23","endLine":97,"groupId":"3755","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testClusterConnectionStateChanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/b701df6f3adf00366d1c0ea18fe784be38d9f1.src","preCode":"    public void testClusterConnectionStateChanges() throws UnknownHostException {\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.CONNECTING);\n        assertTrue(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isReady(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.hasReadyNodes(time.milliseconds()));\n\n        time.sleep(100);\n\n        \r\n        connectionStates.ready(nodeId1);\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.READY);\n        assertTrue(connectionStates.isReady(nodeId1, time.milliseconds()));\n        assertTrue(connectionStates.hasReadyNodes(time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), Long.MAX_VALUE);\n\n        time.sleep(15000);\n\n        \r\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.DISCONNECTED);\n        assertTrue(connectionStates.isDisconnected(nodeId1));\n        assertTrue(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.hasReadyNodes(time.milliseconds()));\n        assertFalse(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        double backoffTolerance = reconnectBackoffMs * reconnectBackoffJitter;\n        long currentBackoff = connectionStates.connectionDelay(nodeId1, time.milliseconds());\n        assertEquals(reconnectBackoffMs, currentBackoff, backoffTolerance);\n\n        time.sleep(currentBackoff + 1);\n        \r\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2019-03-07 16:07:23","commitOrder":4,"curCode":"    public void testRemoveNode() {\n        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n        time.sleep(1000);\n        connectionStates.ready(nodeId1);\n        time.sleep(10000);\n\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        \r\n        connectionStates.remove(nodeId1);\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), 0L);\n    }\n","date":"2019-03-07 16:07:23","endLine":171,"groupId":"7942","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRemoveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/b701df6f3adf00366d1c0ea18fe784be38d9f1.src","preCode":"    public void testRemoveNode() throws UnknownHostException {\n        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n        time.sleep(1000);\n        connectionStates.ready(nodeId1);\n        time.sleep(10000);\n\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        \r\n        connectionStates.remove(nodeId1);\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), 0L);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"7f6bf95c1e4875b1042746e3d73240496073f081","commitMessage":"@@@Fix for KAFKA-7974: Avoid zombie AdminClient when node host isn't resolvable (#6305)\n\n* Fix for KAFKA-7974: Avoid calling disconnect() when not connecting\n\n* Resolve host only when currentAddress() is called\n\nMoves away from automatically resolving the host when the connection entry is constructed.  which can leave ClusterConnectionStates in a confused state.\nInstead.  resolution is done on demand.  ensuring that the entry in the connection list is present even if the resolution failed.\n\n* Add Javadoc to ClusterConnectionStates.connecting()","date":"2019-03-07 16:07:23","modifiedFileCount":"4","status":"M","submitter":"Nicholas Parker"},{"authorTime":"2021-04-01 22:59:59","codes":[{"authorDate":"2021-04-01 22:59:59","commitOrder":5,"curCode":"    public void testClusterConnectionStateChanges() {\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\");\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.CONNECTING);\n        assertTrue(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isReady(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.hasReadyNodes(time.milliseconds()));\n\n        time.sleep(100);\n\n        \r\n        connectionStates.ready(nodeId1);\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.READY);\n        assertTrue(connectionStates.isReady(nodeId1, time.milliseconds()));\n        assertTrue(connectionStates.hasReadyNodes(time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), Long.MAX_VALUE);\n\n        time.sleep(15000);\n\n        \r\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.DISCONNECTED);\n        assertTrue(connectionStates.isDisconnected(nodeId1));\n        assertTrue(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.hasReadyNodes(time.milliseconds()));\n        assertFalse(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        double backoffTolerance = reconnectBackoffMs * reconnectBackoffJitter;\n        long currentBackoff = connectionStates.connectionDelay(nodeId1, time.milliseconds());\n        assertEquals(reconnectBackoffMs, currentBackoff, backoffTolerance);\n\n        time.sleep(currentBackoff + 1);\n        \r\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n    }\n","date":"2021-04-01 22:59:59","endLine":132,"groupId":"103882","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testClusterConnectionStateChanges","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/21/ef8d762ec0451aac075986253276d1a277e1f2.src","preCode":"    public void testClusterConnectionStateChanges() {\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.CONNECTING);\n        assertTrue(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isReady(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.hasReadyNodes(time.milliseconds()));\n\n        time.sleep(100);\n\n        \r\n        connectionStates.ready(nodeId1);\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.READY);\n        assertTrue(connectionStates.isReady(nodeId1, time.milliseconds()));\n        assertTrue(connectionStates.hasReadyNodes(time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), Long.MAX_VALUE);\n\n        time.sleep(15000);\n\n        \r\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        assertEquals(connectionStates.connectionState(nodeId1), ConnectionState.DISCONNECTED);\n        assertTrue(connectionStates.isDisconnected(nodeId1));\n        assertTrue(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isConnecting(nodeId1));\n        assertFalse(connectionStates.hasReadyNodes(time.milliseconds()));\n        assertFalse(connectionStates.canConnect(nodeId1, time.milliseconds()));\n\n        \r\n        double backoffTolerance = reconnectBackoffMs * reconnectBackoffJitter;\n        long currentBackoff = connectionStates.connectionDelay(nodeId1, time.milliseconds());\n        assertEquals(reconnectBackoffMs, currentBackoff, backoffTolerance);\n\n        time.sleep(currentBackoff + 1);\n        \r\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2021-04-01 22:59:59","commitOrder":5,"curCode":"    public void testRemoveNode() {\n        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\");\n        time.sleep(1000);\n        connectionStates.ready(nodeId1);\n        time.sleep(10000);\n\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        \r\n        connectionStates.remove(nodeId1);\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), 0L);\n    }\n","date":"2021-04-01 22:59:59","endLine":206,"groupId":"103882","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testRemoveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/21/ef8d762ec0451aac075986253276d1a277e1f2.src","preCode":"    public void testRemoveNode() {\n        connectionStates.connecting(nodeId1, time.milliseconds(), \"localhost\", ClientDnsLookup.DEFAULT);\n        time.sleep(1000);\n        connectionStates.ready(nodeId1);\n        time.sleep(10000);\n\n        connectionStates.disconnected(nodeId1, time.milliseconds());\n        \r\n        connectionStates.remove(nodeId1);\n        assertTrue(connectionStates.canConnect(nodeId1, time.milliseconds()));\n        assertFalse(connectionStates.isBlackedOut(nodeId1, time.milliseconds()));\n        assertEquals(connectionStates.connectionDelay(nodeId1, time.milliseconds()), 0L);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/ClusterConnectionStatesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"2342ec1d1cc03f4f244fc2921978534af63ae54f","commitMessage":"@@@KAFKA-12600: Remove deprecated config value `default` for client config `client.dns.lookup` (#10458)\n\nThe config has been deprecated since Kafka 2.6 (released ~1 year before\n3.0).  but it was the default before it got deprecated. As such.  it's\nreasonably unlikely that people would have set it explicitly.\n\nGiven the confusing `default` name even though it's _not_ the default.  I\nthink we should remove it in 3.0.\n\nAlso remove `ClientDnsLookup.DEFAULT` (not public API).  which unlocks\na number of code simplications.\n\nReviewers: David Jacot <djacot@confluent.io>","date":"2021-04-01 22:59:59","modifiedFileCount":"19","status":"M","submitter":"Ismael Juma"}]
