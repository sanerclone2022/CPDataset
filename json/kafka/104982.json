[{"authorTime":"2019-10-03 06:00:37","codes":[{"authorDate":"2019-10-03 06:00:37","commitOrder":1,"curCode":"    public void getUnknownLoggerTest() {\n        LoggingResource loggingResource = mock(LoggingResource.class);\n        Logger root = new Logger(\"root\") {\n        };\n        root.setLevel(Level.ERROR);\n        Hierarchy hierarchy = new Hierarchy(root);\n        Logger a = hierarchy.getLogger(\"a\");\n        a.setLevel(null);\n        Logger b = hierarchy.getLogger(\"b\");\n        b.setLevel(Level.INFO);\n        when(loggingResource.currentLoggers()).thenReturn(loggers(a, b));\n        when(loggingResource.rootLogger()).thenReturn(root);\n        when(loggingResource.getLogger(any())).thenCallRealMethod();\n        loggingResource.getLogger(\"c\");\n    }\n","date":"2019-10-03 06:00:37","endLine":95,"groupId":"1710","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getUnknownLoggerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/5eae92781af0431569c9b5055916c335888042.src","preCode":"    public void getUnknownLoggerTest() {\n        LoggingResource loggingResource = mock(LoggingResource.class);\n        Logger root = new Logger(\"root\") {\n        };\n        root.setLevel(Level.ERROR);\n        Hierarchy hierarchy = new Hierarchy(root);\n        Logger a = hierarchy.getLogger(\"a\");\n        a.setLevel(null);\n        Logger b = hierarchy.getLogger(\"b\");\n        b.setLevel(Level.INFO);\n        when(loggingResource.currentLoggers()).thenReturn(loggers(a, b));\n        when(loggingResource.rootLogger()).thenReturn(root);\n        when(loggingResource.getLogger(any())).thenCallRealMethod();\n        loggingResource.getLogger(\"c\");\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/LoggingResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"B"},{"authorDate":"2019-10-03 06:00:37","commitOrder":1,"curCode":"    public void setLevelWithInvalidArgTest() {\n        LoggingResource loggingResource = mock(LoggingResource.class);\n        Logger root = new Logger(\"root\") {\n        };\n        root.setLevel(Level.ERROR);\n        Hierarchy hierarchy = new Hierarchy(root);\n        Logger a = hierarchy.getLogger(\"a\");\n        a.setLevel(null);\n        Logger b = hierarchy.getLogger(\"b\");\n        b.setLevel(Level.INFO);\n        when(loggingResource.currentLoggers()).thenReturn(loggers(a, b));\n        when(loggingResource.rootLogger()).thenReturn(root);\n        when(loggingResource.setLevel(any(), any())).thenCallRealMethod();\n        loggingResource.setLevel(\"@root\", Collections.singletonMap(\"level\", \"HIGH\"));\n    }\n","date":"2019-10-03 06:00:37","endLine":189,"groupId":"1710","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setLevelWithInvalidArgTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/5eae92781af0431569c9b5055916c335888042.src","preCode":"    public void setLevelWithInvalidArgTest() {\n        LoggingResource loggingResource = mock(LoggingResource.class);\n        Logger root = new Logger(\"root\") {\n        };\n        root.setLevel(Level.ERROR);\n        Hierarchy hierarchy = new Hierarchy(root);\n        Logger a = hierarchy.getLogger(\"a\");\n        a.setLevel(null);\n        Logger b = hierarchy.getLogger(\"b\");\n        b.setLevel(Level.INFO);\n        when(loggingResource.currentLoggers()).thenReturn(loggers(a, b));\n        when(loggingResource.rootLogger()).thenReturn(root);\n        when(loggingResource.setLevel(any(), any())).thenCallRealMethod();\n        loggingResource.setLevel(\"@root\", Collections.singletonMap(\"level\", \"HIGH\"));\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/LoggingResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"B"}],"commitId":"1c831c22e13fcc59e7e1a9e6c28fd38048eb3f62","commitMessage":"@@@KAFKA-7772: Dynamically Adjust Log Levels in Connect (#7403)\n\nImplemented KIP-495 to expose a new `admin/loggers` endpoint for the Connect REST API that lists the current log levels and allows the caller to change log levels. \n\nAuthor: Arjun Satish <arjun@confluent.io>\nReviewer: Randall Hauch <rhauch@gmail.com>","date":"2019-10-03 06:00:37","modifiedFileCount":"7","status":"B","submitter":"Arjun Satish"},{"authorTime":"2021-01-10 20:20:13","codes":[{"authorDate":"2021-01-10 20:20:13","commitOrder":2,"curCode":"    public void getUnknownLoggerTest() {\n        LoggingResource loggingResource = mock(LoggingResource.class);\n        Logger root = new Logger(\"root\") {\n        };\n        root.setLevel(Level.ERROR);\n        Hierarchy hierarchy = new Hierarchy(root);\n        Logger a = hierarchy.getLogger(\"a\");\n        a.setLevel(null);\n        Logger b = hierarchy.getLogger(\"b\");\n        b.setLevel(Level.INFO);\n        when(loggingResource.currentLoggers()).thenReturn(loggers(a, b));\n        when(loggingResource.rootLogger()).thenReturn(root);\n        when(loggingResource.getLogger(any())).thenCallRealMethod();\n        assertThrows(NotFoundException.class, () -> loggingResource.getLogger(\"c\"));\n    }\n","date":"2021-01-10 20:20:13","endLine":96,"groupId":"104982","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getUnknownLoggerTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/814cdc1737f4d6cf6394952617874ad9ab1cb8.src","preCode":"    public void getUnknownLoggerTest() {\n        LoggingResource loggingResource = mock(LoggingResource.class);\n        Logger root = new Logger(\"root\") {\n        };\n        root.setLevel(Level.ERROR);\n        Hierarchy hierarchy = new Hierarchy(root);\n        Logger a = hierarchy.getLogger(\"a\");\n        a.setLevel(null);\n        Logger b = hierarchy.getLogger(\"b\");\n        b.setLevel(Level.INFO);\n        when(loggingResource.currentLoggers()).thenReturn(loggers(a, b));\n        when(loggingResource.rootLogger()).thenReturn(root);\n        when(loggingResource.getLogger(any())).thenCallRealMethod();\n        loggingResource.getLogger(\"c\");\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/LoggingResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2021-01-10 20:20:13","commitOrder":2,"curCode":"    public void setLevelWithInvalidArgTest() {\n        LoggingResource loggingResource = mock(LoggingResource.class);\n        Logger root = new Logger(\"root\") {\n        };\n        root.setLevel(Level.ERROR);\n        Hierarchy hierarchy = new Hierarchy(root);\n        Logger a = hierarchy.getLogger(\"a\");\n        a.setLevel(null);\n        Logger b = hierarchy.getLogger(\"b\");\n        b.setLevel(Level.INFO);\n        when(loggingResource.currentLoggers()).thenReturn(loggers(a, b));\n        when(loggingResource.rootLogger()).thenReturn(root);\n        when(loggingResource.setLevel(any(), any())).thenCallRealMethod();\n        assertThrows(NotFoundException.class, () -> loggingResource.setLevel(\"@root\", Collections.singletonMap(\"level\", \"HIGH\")));\n    }\n","date":"2021-01-10 20:20:13","endLine":190,"groupId":"104982","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"setLevelWithInvalidArgTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/814cdc1737f4d6cf6394952617874ad9ab1cb8.src","preCode":"    public void setLevelWithInvalidArgTest() {\n        LoggingResource loggingResource = mock(LoggingResource.class);\n        Logger root = new Logger(\"root\") {\n        };\n        root.setLevel(Level.ERROR);\n        Hierarchy hierarchy = new Hierarchy(root);\n        Logger a = hierarchy.getLogger(\"a\");\n        a.setLevel(null);\n        Logger b = hierarchy.getLogger(\"b\");\n        b.setLevel(Level.INFO);\n        when(loggingResource.currentLoggers()).thenReturn(loggers(a, b));\n        when(loggingResource.rootLogger()).thenReturn(root);\n        when(loggingResource.setLevel(any(), any())).thenCallRealMethod();\n        loggingResource.setLevel(\"@root\", Collections.singletonMap(\"level\", \"HIGH\"));\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/LoggingResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"}],"commitId":"913a019d6c9b03eb44706deb7fb164f79c1f601f","commitMessage":"@@@MINOR: replace test \"expected\" parameter by assertThrows (#9520)\n\nThis PR includes following changes.\n\n1. @Test(expected = Exception.class) is replaced by assertThrows\n2. remove reference to org.scalatest.Assertions\n3. change the magic code from 1 to 2 for testAppendAtInvalidOffset to test ZSTD\n4. rename testMaybeAddPartitionToTransactionXXXX to testNotReadyForSendXXX\n5. increase maxBlockMs from 1s to 3s to avoid unexpected timeout from TransactionsTest#testTimeout\n\nReviewers: Ismael Juma <ismael@confluent.io>","date":"2021-01-10 20:20:13","modifiedFileCount":"166","status":"M","submitter":"Chia-Ping Tsai"}]
