[{"authorTime":"2019-04-18 01:17:40","codes":[{"authorDate":"2019-04-18 01:17:40","commitOrder":1,"curCode":"    public void testReconfigurationWithoutTruststore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = TestSslUtils\n            .createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = sslFactory.sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext, sslFactory.sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n        sslFactory.reconfigure(sslConfig);\n        assertNotSame(\"SSL context not recreated\", sslContext, sslFactory.sslContext());\n\n        trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        try {\n            sslFactory.reconfigure(sslConfig);\n            fail(\"Truststore configured dynamically for listener without previous truststore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","date":"2019-04-18 01:17:40","endLine":169,"groupId":"15958","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReconfigurationWithoutTruststore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/11/035d0551484a7819387b7bbc69f3a7623c0e82.src","preCode":"    public void testReconfigurationWithoutTruststore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = TestSslUtils\n            .createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = sslFactory.sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext, sslFactory.sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n        sslFactory.reconfigure(sslConfig);\n        assertNotSame(\"SSL context not recreated\", sslContext, sslFactory.sslContext());\n\n        trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        try {\n            sslFactory.reconfigure(sslConfig);\n            fail(\"Truststore configured dynamically for listener without previous truststore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"},{"authorDate":"2019-04-18 01:17:40","commitOrder":1,"curCode":"    public void testReconfigurationWithoutKeystore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = TestSslUtils\n            .createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = sslFactory.sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext, sslFactory.sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        sslFactory.reconfigure(sslConfig);\n        assertNotSame(\"SSL context not recreated\", sslContext, sslFactory.sslContext());\n\n        trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        try {\n            sslFactory.reconfigure(sslConfig);\n            fail(\"Keystore configured dynamically for listener without previous keystore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","date":"2019-04-18 01:17:40","endLine":202,"groupId":"15958","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigurationWithoutKeystore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/11/035d0551484a7819387b7bbc69f3a7623c0e82.src","preCode":"    public void testReconfigurationWithoutKeystore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = TestSslUtils\n            .createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = sslFactory.sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext, sslFactory.sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        sslFactory.reconfigure(sslConfig);\n        assertNotSame(\"SSL context not recreated\", sslContext, sslFactory.sslContext());\n\n        trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        try {\n            sslFactory.reconfigure(sslConfig);\n            fail(\"Keystore configured dynamically for listener without previous keystore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":172,"status":"B"}],"commitId":"7f9b9a60dab990efb79df89a6603e78d9ce5a34f","commitMessage":"@@@KAFKA-8241; Handle configs without truststore for broker keystore update (#6585)\n\nReviewers: Manikumar Reddy <manikumar.reddy@gmail.com>","date":"2019-04-18 01:17:40","modifiedFileCount":"2","status":"B","submitter":"Rajini Sivaram"},{"authorTime":"2019-05-16 04:52:59","codes":[{"authorDate":"2019-05-16 04:52:59","commitOrder":2,"curCode":"    public void testReconfigurationWithoutTruststore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = TestSslUtils.\n            createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = sslFactory.sslEngineBuilder().sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext,\n                sslFactory.sslEngineBuilder().sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        Map<String, Object> sslConfig2 = TestSslUtils.\n            createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        try {\n            sslFactory.validateReconfiguration(sslConfig2);\n            fail(\"Truststore configured dynamically for listener without previous truststore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","date":"2019-05-16 04:52:59","endLine":184,"groupId":"15958","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReconfigurationWithoutTruststore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/cd4992e98983f707b30d80ba238360c41e88b9.src","preCode":"    public void testReconfigurationWithoutTruststore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = TestSslUtils\n            .createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = sslFactory.sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext, sslFactory.sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n        sslFactory.reconfigure(sslConfig);\n        assertNotSame(\"SSL context not recreated\", sslContext, sslFactory.sslContext());\n\n        trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        try {\n            sslFactory.reconfigure(sslConfig);\n            fail(\"Truststore configured dynamically for listener without previous truststore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2019-05-16 04:52:59","commitOrder":2,"curCode":"    public void testReconfigurationWithoutKeystore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = TestSslUtils.\n                createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = sslFactory.sslEngineBuilder().sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext,\n                sslFactory.sslEngineBuilder().sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        File newTrustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = TestSslUtils.\n                createSslConfig(false, true, Mode.SERVER, newTrustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        sslFactory.reconfigure(sslConfig);\n        assertNotSame(\"SSL context not recreated\", sslContext,\n                sslFactory.sslEngineBuilder().sslContext());\n\n        sslConfig = TestSslUtils.\n                createSslConfig(false, true, Mode.SERVER, newTrustStoreFile, \"server\");\n        try {\n            sslFactory.validateReconfiguration(sslConfig);\n            fail(\"Keystore configured dynamically for listener without previous keystore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","date":"2019-05-16 04:52:59","endLine":220,"groupId":"15958","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigurationWithoutKeystore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/cd4992e98983f707b30d80ba238360c41e88b9.src","preCode":"    public void testReconfigurationWithoutKeystore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = TestSslUtils\n            .createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = sslFactory.sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext, sslFactory.sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        sslFactory.reconfigure(sslConfig);\n        assertNotSame(\"SSL context not recreated\", sslContext, sslFactory.sslContext());\n\n        trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = TestSslUtils.createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        try {\n            sslFactory.reconfigure(sslConfig);\n            fail(\"Keystore configured dynamically for listener without previous keystore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"0494cd329f3aaed94b3b46de0abe495f80faaedd","commitMessage":"@@@MINOR: Refactor SslFactory (#6674)\n\nSslFactory: split the part of SslFactory that creates SSLEngine instances into SslEngineBuilder.  When (re)configuring.  we simply create a new SslEngineBuilder.  This allows us to make all the builder fields immutable.  It also simplifies the logic for reconfiguring.  Because we sometimes need to test old SslEngine instances against new ones.  being able to use both the old and the new builder at once is useful.\n\nCreate an enum named SslClientAuth which encodes the possible values for ssl.client.auth.  This will simplify the handling of this configuration.\n\nSslTransportLayer#maybeProcessHandshakeFailure should treat an SSLHandshakeException with a \"Received fatal alert\" message as a handshake error (and therefore an authentication error.)\n\nSslFactoryTest: add some line breaks for very long lines.\n\nConfigCommand#main: when terminating the command due to an uncaught exception.  log the exception using debug level in slf4j.  in addition to printing it to stderr.  This makes it easier to debug failing junit tests.  where stderr may not be kept.  or may be reordered with respect to other slf4j messages.  The use of debug level is consistent with how we handle other types of exceptions in ConfigCommand#main.\n\nStateChangeLogMerger#main: spell out the full name of scala.io.Source rather than abbreviating it as io.Source.  This makes it clearer that it is part of the Scala standard library.  It also avoids compiler errors when other libraries whose groupId starts with \"io\" are used in the broker.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>","date":"2019-05-16 04:52:59","modifiedFileCount":"5","status":"M","submitter":"Colin Patrick McCabe"},{"authorTime":"2019-12-19 22:13:03","codes":[{"authorDate":"2019-12-19 22:13:03","commitOrder":3,"curCode":"    public void testReconfigurationWithoutTruststore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = sslFactory.sslEngineBuilder().sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext,\n                sslFactory.sslEngineBuilder().sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        Map<String, Object> sslConfig2 = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        try {\n            sslFactory.validateReconfiguration(sslConfig2);\n            fail(\"Truststore configured dynamically for listener without previous truststore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","date":"2019-12-19 22:13:03","endLine":246,"groupId":"15958","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReconfigurationWithoutTruststore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fa/b0bf0eca5541e2ae490bb944d4d9990a50dfae.src","preCode":"    public void testReconfigurationWithoutTruststore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = TestSslUtils.\n            createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = sslFactory.sslEngineBuilder().sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext,\n                sslFactory.sslEngineBuilder().sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        Map<String, Object> sslConfig2 = TestSslUtils.\n            createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        try {\n            sslFactory.validateReconfiguration(sslConfig2);\n            fail(\"Truststore configured dynamically for listener without previous truststore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2019-12-19 22:13:03","commitOrder":3,"curCode":"    public void testReconfigurationWithoutKeystore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = sslFactory.sslEngineBuilder().sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext,\n                sslFactory.sslEngineBuilder().sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        File newTrustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(newTrustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        sslFactory.reconfigure(sslConfig);\n        assertNotSame(\"SSL context not recreated\", sslContext,\n                sslFactory.sslEngineBuilder().sslContext());\n\n        sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(newTrustStoreFile)\n                .build();\n        try {\n            sslFactory.validateReconfiguration(sslConfig);\n            fail(\"Keystore configured dynamically for listener without previous keystore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","date":"2019-12-19 22:13:03","endLine":285,"groupId":"15958","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigurationWithoutKeystore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fa/b0bf0eca5541e2ae490bb944d4d9990a50dfae.src","preCode":"    public void testReconfigurationWithoutKeystore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = TestSslUtils.\n                createSslConfig(false, true, Mode.SERVER, trustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = sslFactory.sslEngineBuilder().sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext,\n                sslFactory.sslEngineBuilder().sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        File newTrustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = TestSslUtils.\n                createSslConfig(false, true, Mode.SERVER, newTrustStoreFile, \"server\");\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        sslFactory.reconfigure(sslConfig);\n        assertNotSame(\"SSL context not recreated\", sslContext,\n                sslFactory.sslEngineBuilder().sslContext());\n\n        sslConfig = TestSslUtils.\n                createSslConfig(false, true, Mode.SERVER, newTrustStoreFile, \"server\");\n        try {\n            sslFactory.validateReconfiguration(sslConfig);\n            fail(\"Keystore configured dynamically for listener without previous keystore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"}],"commitId":"e275742f850af4a1b79b0d1bd1ac9a1d2e89c64e","commitMessage":"@@@KAFKA-7251; Add support for TLS 1.3 (#7804)\n\nAdds support for TLSv1.3 in SslTransportLayer. Note that TLSv1.3 is only enabled from Java 11 onwards.  so we test the code only when running with Java11 and above.\n\nTests run on this PR:\n  - SslTransportLayerTest: This covers testing of our SslTransportLayer and all tests are run with TLSv1.3 when running with Java 11. These tests are also run with TLSv1.2 for all Java versions.\n  - SslFactoryTest: Also run with TLSv1.3 on Java 11 onwards in addition to TLSv1.2 for all Java versions.\n  - SslEndToEndAuthorizationTest - Run only with TLSv1.3 on Java 11 onwards and only with TLSv1.2 on earlier Java versions. We have other versions of this test which use SSL that continue to be with TLSv1.2 on Java 11 to avoid reducing test coverage for TLSv1.2\n\nAdditional testing for done for TLSv1.3:\n  - Most tests that use SSL use TestSslUtils.DEFAULT_TLS_PROTOCOL_FOR_TESTS which is set to TLSv1.2. I have run all clients and core tests with DEFAULT_TLS_PROTOCOL_FOR_TESTS=TLSv1.3 with Java 11.\n  - Ran a few system tests locally with TKSv1.3\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Manikumar Reddy <manikumar.reddy@gmail.com>\n","date":"2019-12-19 22:13:03","modifiedFileCount":"10","status":"M","submitter":"Rajini Sivaram"},{"authorTime":"2020-04-08 22:20:32","codes":[{"authorDate":"2020-04-08 22:20:32","commitOrder":4,"curCode":"    public void testReconfigurationWithoutTruststore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext,\n                ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        Map<String, Object> sslConfig2 = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        try {\n            sslFactory.validateReconfiguration(sslConfig2);\n            fail(\"Truststore configured dynamically for listener without previous truststore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","date":"2020-04-08 22:20:32","endLine":247,"groupId":"1926","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testReconfigurationWithoutTruststore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/25/82ca9569130778da6f7830c1172435427834ae.src","preCode":"    public void testReconfigurationWithoutTruststore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = sslFactory.sslEngineBuilder().sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext,\n                sslFactory.sslEngineBuilder().sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        Map<String, Object> sslConfig2 = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        try {\n            sslFactory.validateReconfiguration(sslConfig2);\n            fail(\"Truststore configured dynamically for listener without previous truststore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"},{"authorDate":"2020-04-08 22:20:32","commitOrder":4,"curCode":"    public void testReconfigurationWithoutKeystore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext,\n                ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        File newTrustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(newTrustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        sslFactory.reconfigure(sslConfig);\n        assertNotSame(\"SSL context not recreated\", sslContext,\n                ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext());\n\n        sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(newTrustStoreFile)\n                .build();\n        try {\n            sslFactory.validateReconfiguration(sslConfig);\n            fail(\"Keystore configured dynamically for listener without previous keystore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","date":"2020-04-08 22:20:32","endLine":286,"groupId":"1926","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testReconfigurationWithoutKeystore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/25/82ca9569130778da6f7830c1172435427834ae.src","preCode":"    public void testReconfigurationWithoutKeystore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = sslFactory.sslEngineBuilder().sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext,\n                sslFactory.sslEngineBuilder().sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        File newTrustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(newTrustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        sslFactory.reconfigure(sslConfig);\n        assertNotSame(\"SSL context not recreated\", sslContext,\n                sslFactory.sslEngineBuilder().sslContext());\n\n        sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(newTrustStoreFile)\n                .build();\n        try {\n            sslFactory.validateReconfiguration(sslConfig);\n            fail(\"Keystore configured dynamically for listener without previous keystore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"}],"commitId":"9ba49b806ad0dcdb72a3a80393175a143f181382","commitMessage":"@@@KAFKA-8890: Make SSL context/engine configuration extensible (KIP-519) (#8338)\n\n","date":"2020-04-08 22:20:32","modifiedFileCount":"7","status":"M","submitter":"maulin-vasavada"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2021-01-14 08:17:45","commitOrder":5,"curCode":"    public void testReconfigurationWithoutTruststore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext();\n        assertNotNull(sslContext, \"SSL context not created\");\n        assertSame(sslContext, ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext(),\n                \"SSL context recreated unnecessarily\");\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        Map<String, Object> sslConfig2 = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        try {\n            sslFactory.validateReconfiguration(sslConfig2);\n            fail(\"Truststore configured dynamically for listener without previous truststore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","date":"2021-01-14 08:17:45","endLine":257,"groupId":"103260","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testReconfigurationWithoutTruststore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cf/b37b3944ed40a17130c60ed799ef6376355562.src","preCode":"    public void testReconfigurationWithoutTruststore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext,\n                ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        Map<String, Object> sslConfig2 = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        try {\n            sslFactory.validateReconfiguration(sslConfig2);\n            fail(\"Truststore configured dynamically for listener without previous truststore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"},{"authorDate":"2021-01-14 08:17:45","commitOrder":5,"curCode":"    public void testReconfigurationWithoutKeystore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext();\n        assertNotNull(sslContext, \"SSL context not created\");\n        assertSame(sslContext, ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext(),\n                \"SSL context recreated unnecessarily\");\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        File newTrustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(newTrustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        sslFactory.reconfigure(sslConfig);\n        assertNotSame(sslContext, ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext(),\n                \"SSL context not recreated\");\n\n        sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(newTrustStoreFile)\n                .build();\n        try {\n            sslFactory.validateReconfiguration(sslConfig);\n            fail(\"Keystore configured dynamically for listener without previous keystore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","date":"2021-01-14 08:17:45","endLine":296,"groupId":"103260","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testReconfigurationWithoutKeystore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cf/b37b3944ed40a17130c60ed799ef6376355562.src","preCode":"    public void testReconfigurationWithoutKeystore() throws Exception {\n        File trustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        Map<String, Object> sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(trustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        SslFactory sslFactory = new SslFactory(Mode.SERVER);\n        sslFactory.configure(sslConfig);\n        SSLContext sslContext = ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext();\n        assertNotNull(\"SSL context not created\", sslContext);\n        assertSame(\"SSL context recreated unnecessarily\", sslContext,\n                ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext());\n        assertFalse(sslFactory.createSslEngine(\"localhost\", 0).getUseClientMode());\n\n        File newTrustStoreFile = File.createTempFile(\"truststore\", \".jks\");\n        sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(newTrustStoreFile)\n                .build();\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG);\n        sslConfig.remove(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG);\n        sslFactory.reconfigure(sslConfig);\n        assertNotSame(\"SSL context not recreated\", sslContext,\n                ((DefaultSslEngineFactory) sslFactory.sslEngineFactory()).sslContext());\n\n        sslConfig = sslConfigsBuilder(Mode.SERVER)\n                .createNewTrustStore(newTrustStoreFile)\n                .build();\n        try {\n            sslFactory.validateReconfiguration(sslConfig);\n            fail(\"Keystore configured dynamically for listener without previous keystore\");\n        } catch (ConfigException e) {\n            \r\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/ssl/SslFactoryTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"}]
