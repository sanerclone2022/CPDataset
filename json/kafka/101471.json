[{"authorTime":"2018-05-04 23:42:01","codes":[{"authorDate":"2018-12-09 14:49:48","commitOrder":16,"curCode":"    private void doTestNotSendingOldValues(final StreamsBuilder builder,\n                                           final int[] expectedKeys,\n                                           final KTable<Integer, String> table1,\n                                           final KTable<Integer, String> table2,\n                                           final MockProcessorSupplier<Integer, String> supplier,\n                                           final KTable<Integer, String> joined) {\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        driver.setUp(builder, stateDir, Serdes.Integer(), Serdes.String());\n        driver.setTime(0L);\n\n        final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n\n        proc.checkAndClearProcessResult();\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n\n        proc.checkAndClearProcessResult(\"0:(XX0+Y0<-null)\", \"1:(XX1+Y1<-null)\");\n\n        \r\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+YY0<-null)\", \"1:(XX1+YY1<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(null<-null)\", \"1:(null<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","date":"2018-12-09 14:49:48","endLine":243,"groupId":"14340","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNotSendingOldValues","params":"(finalStreamsBuilderbuilder@finalint[]expectedKeys@finalKTable<Integer@String>table1@finalKTable<Integer@String>table2@finalMockProcessorSupplier<Integer@String>supplier@finalKTable<Integer@String>joined)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/ed53f5cf4232f19f2c273022212f43efae1674.src","preCode":"    private void doTestNotSendingOldValues(final StreamsBuilder builder,\n                                           final int[] expectedKeys,\n                                           final KTable<Integer, String> table1,\n                                           final KTable<Integer, String> table2,\n                                           final MockProcessorSupplier<Integer, String> supplier,\n                                           final KTable<Integer, String> joined) {\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        driver.setUp(builder, stateDir, Serdes.Integer(), Serdes.String());\n        driver.setTime(0L);\n\n        final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n\n        proc.checkAndClearProcessResult();\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n\n        proc.checkAndClearProcessResult(\"0:(XX0+Y0<-null)\", \"1:(XX1+Y1<-null)\");\n\n        \r\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+YY0<-null)\", \"1:(XX1+YY1<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(null<-null)\", \"1:(null<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"B"},{"authorDate":"2018-05-04 23:42:01","commitOrder":16,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n        driver.setTime(0L);\n\n        final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","date":"2018-05-04 23:42:01","endLine":251,"groupId":"12202","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/ef302c7786145b13ac2ce719c352b82304021d.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n        driver.setTime(0L);\n\n        final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"NB"}],"commitId":"c0353d8ddce88bac6fc04f85dd40cb95b8ca5cf9","commitMessage":"@@@KAFKA-6036: Local Materialization for Source KTable (#5779)\n\nRefactor the materialization for source KTables in the way that:\n\nIf Materialized.as(queryableName) is specified.  materialize;\nIf the downstream operator requires to fetch from this KTable via ValueGetters.  materialize;\nIf the downstream operator requires to send old values.  materialize.\nOtherwise do not materialize the KTable. E.g. builder.table(\"topic\").filter().toStream().to(\"topic\") would not create any state stores.\n\nThere's a couple of minor changes along with PR as well:\n\nKTableImpl's queryableStoreName and isQueryable are merged into queryableStoreName only.  and if it is null it means not queryable. As long as it is not null.  it should be queryable (i.e. internally generated names will not be used any more).\nTo achieve this.  splitted MaterializedInternal.storeName() and MaterializedInternal.queryableName(). The former can be internally generated and will not be exposed to users. QueryableName can be modified to set to the internal store name if we decide to materialize it during the DSL parsing / physical topology generation phase. And only if queryableName is specified the corresponding KTable is determined to be materialized.\n\nFound some overlapping unit tests among KTableImplTest.  and KTableXXTest.  removed them.\n\nThere are a few typing bugs found along the way.  fixed them as well.\n\n-----------------------\n\nThis PR is an illustration of experimenting a poc towards logical materializations.\n\nToday we've logically materialized the KTable for filter / mapValues / transformValues if queryableName is not specified via Materialized.  but whenever users specify queryableName we will still always materialize. My original goal is to also consider logically materialize for queryable stores.  but when implementing it via a wrapped store to apply the transformations on the fly I realized it is tougher than I thought.  because we not only need to support fetch or get.  but also needs to support range queries.  approximateNumEntries.  and isOpen etc as well.  which are not efficient to support. So in the end I'd suggest we still stick with the rule of always materializing if queryableName is specified.  and only consider logical materialization otherwise.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <mjsax@apache.org>","date":"2018-12-09 14:49:48","modifiedFileCount":"32","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-02-15 07:06:47","codes":[{"authorDate":"2019-02-15 07:06:47","commitOrder":17,"curCode":"    private void doTestNotSendingOldValues(final StreamsBuilder builder,\n                                        final int[] expectedKeys,\n                                        final KTable<Integer, String> table1,\n                                        final KTable<Integer, String> table2,\n                                        final MockProcessorSupplier<Integer, String> supplier,\n                                        final KTable<Integer, String> joined) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult();\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+Y0<-null)\", \"1:(XX1+Y1<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+YY0<-null)\", \"1:(XX1+YY1<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n            \r\n\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(null<-null)\", \"1:(null<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n        }\n    }\n","date":"2019-02-15 07:06:47","endLine":215,"groupId":"15390","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNotSendingOldValues","params":"(finalStreamsBuilderbuilder@finalint[]expectedKeys@finalKTable<Integer@String>table1@finalKTable<Integer@String>table2@finalMockProcessorSupplier<Integer@String>supplier@finalKTable<Integer@String>joined)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5d/1f5c3d8c8c85450ecfc113f3c83366d85110b2.src","preCode":"    private void doTestNotSendingOldValues(final StreamsBuilder builder,\n                                           final int[] expectedKeys,\n                                           final KTable<Integer, String> table1,\n                                           final KTable<Integer, String> table2,\n                                           final MockProcessorSupplier<Integer, String> supplier,\n                                           final KTable<Integer, String> joined) {\n\n        assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        driver.setUp(builder, stateDir, Serdes.Integer(), Serdes.String());\n        driver.setTime(0L);\n\n        final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n\n        proc.checkAndClearProcessResult();\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n\n        proc.checkAndClearProcessResult(\"0:(XX0+Y0<-null)\", \"1:(XX1+Y1<-null)\");\n\n        \r\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+YY0<-null)\", \"1:(XX1+YY1<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(null<-null)\", \"1:(null<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2019-02-15 07:06:47","commitOrder":17,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n        }\n    }\n","date":"2019-02-15 07:06:47","endLine":225,"groupId":"18169","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/60/9b07043d89e4bb12ef63eaeadb5d1d906bef6b.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        driver.setUp(builder, stateDir);\n        driver.setTime(0L);\n\n        final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n        assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n        assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic1, expectedKeys[i], \"X\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n        \r\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic2, expectedKey, \"YY\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"X\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n        \r\n\n        for (int i = 0; i < 2; i++) {\n            driver.process(topic2, expectedKeys[i], null);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n        \r\n\n        for (final int expectedKey : expectedKeys) {\n            driver.process(topic1, expectedKey, \"XX\" + expectedKey);\n        }\n        driver.flushState();\n        proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"M"}],"commitId":"c1918a2b9a9ba282efe92ddb867abef3d6d9b98c","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [part 4] (#5433)\n\nReviewer: John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-02-15 07:06:47","modifiedFileCount":"3","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2019-03-20 08:27:32","codes":[{"authorDate":"2019-03-20 08:27:32","commitOrder":18,"curCode":"    private void doTestNotSendingOldValues(final StreamsBuilder builder,\n                                        final int[] expectedKeys,\n                                        final KTable<Integer, String> table1,\n                                        final KTable<Integer, String> table2,\n                                        final MockProcessorSupplier<Integer, String> supplier,\n                                        final KTable<Integer, String> joined) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult();\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 0)\", \"1:(X1+Y1<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+Y0<-null) (ts: 0)\", \"1:(XX1+Y1<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+YY0<-null) (ts: 0)\", \"1:(XX1+YY1<-null) (ts: 0)\", \"2:(XX2+YY2<-null) (ts: 0)\", \"3:(XX3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null) (ts: 0)\", \"1:(X1+YY1<-null) (ts: 0)\", \"2:(X2+YY2<-null) (ts: 0)\", \"3:(X3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(null<-null) (ts: 0)\", \"1:(null<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"2:(XX2+YY2<-null) (ts: 0)\", \"3:(XX3+YY3<-null) (ts: 0)\");\n        }\n    }\n","date":"2019-03-20 08:27:32","endLine":215,"groupId":"15390","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNotSendingOldValues","params":"(finalStreamsBuilderbuilder@finalint[]expectedKeys@finalKTable<Integer@String>table1@finalKTable<Integer@String>table2@finalMockProcessorSupplier<Integer@String>supplier@finalKTable<Integer@String>joined)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f0/2d5ddc3e35333054c853d4cee7ede4a866b4f7.src","preCode":"    private void doTestNotSendingOldValues(final StreamsBuilder builder,\n                                        final int[] expectedKeys,\n                                        final KTable<Integer, String> table1,\n                                        final KTable<Integer, String> table2,\n                                        final MockProcessorSupplier<Integer, String> supplier,\n                                        final KTable<Integer, String> joined) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult();\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+Y0<-null)\", \"1:(XX1+Y1<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+YY0<-null)\", \"1:(XX1+YY1<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n\n            \r\n\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(null<-null)\", \"1:(null<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2019-03-20 08:27:32","commitOrder":18,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 0)\", \"1:(X1+null<-null) (ts: 0)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 0)\", \"1:(X1+Y1<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 0)\", \"1:(X1+Y1<-null) (ts: 0)\", \"2:(X2+null<-null) (ts: 0)\", \"3:(X3+null<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null) (ts: 0)\", \"1:(X1+YY1<-null) (ts: 0)\", \"2:(X2+YY2<-null) (ts: 0)\", \"3:(X3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null) (ts: 0)\", \"1:(X1+YY1<-null) (ts: 0)\", \"2:(X2+YY2<-null) (ts: 0)\", \"3:(X3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 0)\", \"1:(X1+null<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null) (ts: 0)\", \"1:(XX1+null<-null) (ts: 0)\", \"2:(XX2+YY2<-null) (ts: 0)\", \"3:(XX3+YY3<-null) (ts: 0)\");\n        }\n    }\n","date":"2019-03-20 08:27:32","endLine":225,"groupId":"18169","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/c03f40a6894c46224c2f434c17fc69c6eb6c0f.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null)\", \"1:(X1+Y1<-null)\", \"2:(X2+null<-null)\", \"3:(X3+null<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null)\", \"1:(X1+YY1<-null)\", \"2:(X2+YY2<-null)\", \"3:(X3+YY3<-null)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null)\", \"1:(X1+null<-null)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null)\", \"1:(XX1+null<-null)\", \"2:(XX2+YY2<-null)\", \"3:(XX3+YY3<-null)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"}],"commitId":"b5ce093a24d0fe212b5d1374330fc720b4913bee","commitMessage":"@@@MINOR: capture result timestamps in Kafka Streams DSL tests (#6447)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2019-03-20 08:27:32","modifiedFileCount":"29","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-05-18 07:48:07","codes":[{"authorDate":"2019-05-18 07:48:07","commitOrder":19,"curCode":"    private void doTestNotSendingOldValues(final StreamsBuilder builder,\n                                           final int[] expectedKeys,\n                                           final KTable<Integer, String> table1,\n                                           final KTable<Integer, String> table2,\n                                           final MockProcessorSupplier<Integer, String> supplier,\n                                           final KTable<Integer, String> joined) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(EMPTY);\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 5)\", \"1:(X1+Y1<-null) (ts: 10)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(XX0+Y0<-null) (ts: 7)\", \"1:(XX1+Y1<-null) (ts: 10)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XX0+YY0<-null) (ts: 7)\", \"1:(XX1+YY1<-null) (ts: 7)\",\n                \"2:(XX2+YY2<-null) (ts: 10)\", \"3:(XX3+YY3<-null) (ts: 15)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XXX0+YY0<-null) (ts: 6)\", \"1:(XXX1+YY1<-null) (ts: 6)\",\n                \"2:(XXX2+YY2<-null) (ts: 10)\", \"3:(XXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(null<-null) (ts: 6)\", \"1:(null<-null) (ts: 7)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"2:(XXXX2+YY2<-null) (ts: 13)\", \"3:(XXXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"2:(null<-null) (ts: 10)\", \"3:(null<-null) (ts: 20)\");\n        }\n    }\n","date":"2019-05-18 07:48:07","endLine":346,"groupId":"11096","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNotSendingOldValues","params":"(finalStreamsBuilderbuilder@finalint[]expectedKeys@finalKTable<Integer@String>table1@finalKTable<Integer@String>table2@finalMockProcessorSupplier<Integer@String>supplier@finalKTable<Integer@String>joined)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/5e38d9537ffc1ba24a1e5c9d0b92670b609412.src","preCode":"    private void doTestNotSendingOldValues(final StreamsBuilder builder,\n                                        final int[] expectedKeys,\n                                        final KTable<Integer, String> table1,\n                                        final KTable<Integer, String> table2,\n                                        final MockProcessorSupplier<Integer, String> supplier,\n                                        final KTable<Integer, String> joined) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult();\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 0)\", \"1:(X1+Y1<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+Y0<-null) (ts: 0)\", \"1:(XX1+Y1<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+YY0<-null) (ts: 0)\", \"1:(XX1+YY1<-null) (ts: 0)\", \"2:(XX2+YY2<-null) (ts: 0)\", \"3:(XX3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null) (ts: 0)\", \"1:(X1+YY1<-null) (ts: 0)\", \"2:(X2+YY2<-null) (ts: 0)\", \"3:(X3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(null<-null) (ts: 0)\", \"1:(null<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"2:(XX2+YY2<-null) (ts: 0)\", \"3:(XX3+YY3<-null) (ts: 0)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"},{"authorDate":"2019-05-18 07:48:07","commitOrder":19,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 5)\", \"1:(X1+null<-null) (ts: 6)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 5)\", \"1:(X1+Y1<-null) (ts: 10)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XX0+Y0<-null) (ts: 7)\", \"1:(XX1+Y1<-null) (ts: 10)\",\n                \"2:(XX2+null<-null) (ts: 7)\", \"3:(XX3+null<-null) (ts: 7)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XX0+YY0<-null) (ts: 7)\", \"1:(XX1+YY1<-null) (ts: 7)\",\n                \"2:(XX2+YY2<-null) (ts: 10)\", \"3:(XX3+YY3<-null) (ts: 15)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XXX0+YY0<-null) (ts: 6)\", \"1:(XXX1+YY1<-null) (ts: 6)\",\n                \"2:(XXX2+YY2<-null) (ts: 10)\", \"3:(XXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(XXX0+null<-null) (ts: 6)\", \"1:(XXX1+null<-null) (ts: 7)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XXXX0+null<-null) (ts: 13)\", \"1:(XXXX1+null<-null) (ts: 13)\",\n                \"2:(XXXX2+YY2<-null) (ts: 13)\", \"3:(XXXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(null<-null) (ts: 0)\", \"1:(null<-null) (ts: 42)\",\n                \"2:(null<-null) (ts: 10)\", \"3:(null<-null) (ts: 20)\");\n        }\n    }\n","date":"2019-05-18 07:48:07","endLine":286,"groupId":"6990","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/ff514e163ca139759b15d2c21ee83b6aa2fdb1.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 0)\", \"1:(X1+null<-null) (ts: 0)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i]));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 0)\", \"1:(X1+Y1<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 0)\", \"1:(X1+Y1<-null) (ts: 0)\", \"2:(X2+null<-null) (ts: 0)\", \"3:(X3+null<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null) (ts: 0)\", \"1:(X1+YY1<-null) (ts: 0)\", \"2:(X2+YY2<-null) (ts: 0)\", \"3:(X3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"X\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+YY0<-null) (ts: 0)\", \"1:(X1+YY1<-null) (ts: 0)\", \"2:(X2+YY2<-null) (ts: 0)\", \"3:(X3+YY3<-null) (ts: 0)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], null));\n            }\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 0)\", \"1:(X1+null<-null) (ts: 0)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey));\n            }\n            proc.checkAndClearProcessResult(\"0:(XX0+null<-null) (ts: 0)\", \"1:(XX1+null<-null) (ts: 0)\", \"2:(XX2+YY2<-null) (ts: 0)\", \"3:(XX3+YY3<-null) (ts: 0)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"}],"commitId":"6a2749faa63397caa93dae7bfdc3f1d0573a2ff4","commitMessage":"@@@KAFKA-6455: Improve DSL operator timestamp semantics (#6725)\n\nBasic idea:\nKTable-KTable join: set max(left-ts. right-ts) for result\n#agg(...) (stream/table windowed/non-windowed): set max(ts1.  ts2.  ts3. ...) of all input records that contribute to the aggregation result\nfor all stateless transformation: input-ts -> output-ts\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   John Roesler <john@confluent.io>.  Andy Coates <andy@confluent.io>.   Bill Bejeck <bbejeck@gmail.com","date":"2019-05-18 07:48:07","modifiedFileCount":"61","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-07-16 22:16:15","codes":[{"authorDate":"2019-07-16 22:16:15","commitOrder":20,"curCode":"    private void doTestNotSendingOldValues(final StreamsBuilder builder,\n                                           final int[] expectedKeys,\n                                           final KTable<Integer, String> table1,\n                                           final KTable<Integer, String> table2,\n                                           final MockProcessorSupplier<Integer, String> supplier,\n                                           final KTable<Integer, String> joined) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(EMPTY);\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","date":"2019-07-16 22:16:15","endLine":357,"groupId":"2712","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNotSendingOldValues","params":"(finalStreamsBuilderbuilder@finalint[]expectedKeys@finalKTable<Integer@String>table1@finalKTable<Integer@String>table2@finalMockProcessorSupplier<Integer@String>supplier@finalKTable<Integer@String>joined)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e1/8b5a1c6854d7b167fa0a51c0174e2b1eb562e8.src","preCode":"    private void doTestNotSendingOldValues(final StreamsBuilder builder,\n                                           final int[] expectedKeys,\n                                           final KTable<Integer, String> table1,\n                                           final KTable<Integer, String> table2,\n                                           final MockProcessorSupplier<Integer, String> supplier,\n                                           final KTable<Integer, String> joined) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(EMPTY);\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 5)\", \"1:(X1+Y1<-null) (ts: 10)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(XX0+Y0<-null) (ts: 7)\", \"1:(XX1+Y1<-null) (ts: 10)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XX0+YY0<-null) (ts: 7)\", \"1:(XX1+YY1<-null) (ts: 7)\",\n                \"2:(XX2+YY2<-null) (ts: 10)\", \"3:(XX3+YY3<-null) (ts: 15)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XXX0+YY0<-null) (ts: 6)\", \"1:(XXX1+YY1<-null) (ts: 6)\",\n                \"2:(XXX2+YY2<-null) (ts: 10)\", \"3:(XXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(null<-null) (ts: 6)\", \"1:(null<-null) (ts: 7)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"2:(XXXX2+YY2<-null) (ts: 13)\", \"3:(XXXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"2:(null<-null) (ts: 10)\", \"3:(null<-null) (ts: 20)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"M"},{"authorDate":"2019-07-16 22:16:15","commitOrder":20,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","date":"2019-07-16 22:16:15","endLine":295,"groupId":"2712","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/417e92ba988461737b542550eb5a5ca31c018f.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[]{0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(X0+null<-null) (ts: 5)\", \"1:(X1+null<-null) (ts: 6)\");\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(X0+Y0<-null) (ts: 5)\", \"1:(X1+Y1<-null) (ts: 10)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XX0+Y0<-null) (ts: 7)\", \"1:(XX1+Y1<-null) (ts: 10)\",\n                \"2:(XX2+null<-null) (ts: 7)\", \"3:(XX3+null<-null) (ts: 7)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XX0+YY0<-null) (ts: 7)\", \"1:(XX1+YY1<-null) (ts: 7)\",\n                \"2:(XX2+YY2<-null) (ts: 10)\", \"3:(XX3+YY3<-null) (ts: 15)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XXX0+YY0<-null) (ts: 6)\", \"1:(XXX1+YY1<-null) (ts: 6)\",\n                \"2:(XXX2+YY2<-null) (ts: 10)\", \"3:(XXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\"0:(XXX0+null<-null) (ts: 6)\", \"1:(XXX1+null<-null) (ts: 7)\");\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(XXXX0+null<-null) (ts: 13)\", \"1:(XXXX1+null<-null) (ts: 13)\",\n                \"2:(XXXX2+YY2<-null) (ts: 13)\", \"3:(XXXX3+YY3<-null) (ts: 15)\");\n\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                \"0:(null<-null) (ts: 0)\", \"1:(null<-null) (ts: 42)\",\n                \"2:(null<-null) (ts: 10)\", \"3:(null<-null) (ts: 20)\");\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"00757cd99f6d8bf2760c3708d307347f4cde65f6","commitMessage":"@@@KAFKA-8450: Using KeyValueTimeStamp in MockProcessor (#6933)\n\nThis PR is to use KeyValueTimeStamp Object in MockProcessor Test file instead of String and change all the dependency files with broken test cases.\n\nReviewers: Kamal Chandraprakash.  Matthias J. Sax <mjsax@apache.org>.   Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-07-16 22:16:15","modifiedFileCount":"28","status":"M","submitter":"SuryaTeja Duggi"},{"authorTime":"2019-10-07 16:01:58","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":21,"curCode":"    private void doTestNotSendingOldValues(final StreamsBuilder builder,\n                                           final int[] expectedKeys,\n                                           final KTable<Integer, String> table1,\n                                           final KTable<Integer, String> table2,\n                                           final MockProcessorSupplier<Integer, String> supplier,\n                                           final KTable<Integer, String> joined) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"X\" + expectedKeys[i], 5L + i);\n            }\n            \r\n            inputTopic1.pipeInput(null, \"SomeVal\", 42L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(EMPTY);\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i);\n            }\n            \r\n            inputTopic2.pipeInput(null, \"AnotherVal\", 73L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XX\" + expectedKey, 7L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"YY\" + expectedKey, expectedKey * 5L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXX\" + expectedKey, 6L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            inputTopic2.pipeInput(expectedKeys[0], null, 5L);\n            inputTopic2.pipeInput(expectedKeys[1], null, 7L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXXX\" + expectedKey, 13L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n            \r\n            inputTopic1.pipeInput(expectedKeys[0], null, 0L);\n            inputTopic1.pipeInput(expectedKeys[1], null, 42L);\n            inputTopic1.pipeInput(expectedKeys[2], null, 5L);\n            inputTopic1.pipeInput(expectedKeys[3], null, 20L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","date":"2019-10-07 16:01:58","endLine":366,"groupId":"18873","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNotSendingOldValues","params":"(finalStreamsBuilderbuilder@finalint[]expectedKeys@finalKTable<Integer@String>table1@finalKTable<Integer@String>table2@finalMockProcessorSupplier<Integer@String>supplier@finalKTable<Integer@String>joined)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/cc693f9fedcc43f8d2936fec97aefb9726d998.src","preCode":"    private void doTestNotSendingOldValues(final StreamsBuilder builder,\n                                           final int[] expectedKeys,\n                                           final KTable<Integer, String> table1,\n                                           final KTable<Integer, String> table2,\n                                           final MockProcessorSupplier<Integer, String> supplier,\n                                           final KTable<Integer, String> joined) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(EMPTY);\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"},{"authorDate":"2019-10-07 16:01:58","commitOrder":21,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"X\" + expectedKeys[i], 5L + i);\n            }\n            \r\n            inputTopic1.pipeInput(null, \"SomeVal\", 42L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i);\n            }\n            \r\n            inputTopic2.pipeInput(null, \"AnotherVal\", 73L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XX\" + expectedKey, 7L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"YY\" + expectedKey, expectedKey * 5L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXX\" + expectedKey, 6L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            inputTopic2.pipeInput(expectedKeys[0], null, 5L);\n            inputTopic2.pipeInput(expectedKeys[1], null, 7L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXXX\" + expectedKey, 13L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n\n            \r\n            inputTopic1.pipeInput(expectedKeys[0], null, 0L);\n            inputTopic1.pipeInput(expectedKeys[1], null, 42L);\n            inputTopic1.pipeInput(expectedKeys[2], null, 5L);\n            inputTopic1.pipeInput(expectedKeys[3], null, 20L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","date":"2019-10-07 16:01:58","endLine":307,"groupId":"8108","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/95/8c8969c27d571cdfae7e4b908c72faea349a9f.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKeys[i], \"X\" + expectedKeys[i], 5L + i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic1, null, \"SomeVal\", 42L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i));\n            }\n            \r\n            driver.pipeInput(recordFactory.create(topic2, null, \"AnotherVal\", 73L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XX\" + expectedKey, 7L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic2, expectedKey, \"YY\" + expectedKey, expectedKey * 5L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXX\" + expectedKey, 6L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[0], null, 5L));\n            driver.pipeInput(recordFactory.create(topic2, expectedKeys[1], null, 7L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topic1, expectedKey, \"XXXX\" + expectedKey, 13L));\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n\n            \r\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[0], null, 0L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[1], null, 42L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[2], null, 5L));\n            driver.pipeInput(recordFactory.create(topic1, expectedKeys[3], null, 20L));\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"a5a6938c69f4310f7ec519036f0df77d8022326a","commitMessage":"@@@KAFKA-8233: TopologyTestDriver test input and output usability improvements (#7378)\n\nImplements KIP-470\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-07 16:01:58","modifiedFileCount":"47","status":"M","submitter":"Jukka Karvanen"},{"authorTime":"2020-09-10 01:37:21","codes":[{"authorDate":"2020-09-10 01:37:21","commitOrder":22,"curCode":"    private void doTestNotSendingOldValues(final StreamsBuilder builder,\n                                           final int[] expectedKeys,\n                                           final KTable<Integer, String> table1,\n                                           final KTable<Integer, String> table2,\n                                           final MockApiProcessorSupplier<Integer, String, Void, Void> supplier,\n                                           final KTable<Integer, String> joined) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockApiProcessor<Integer, String, Void, Void> proc = supplier.theCapturedProcessor();\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"X\" + expectedKeys[i], 5L + i);\n            }\n            \r\n            inputTopic1.pipeInput(null, \"SomeVal\", 42L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(EMPTY);\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i);\n            }\n            \r\n            inputTopic2.pipeInput(null, \"AnotherVal\", 73L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XX\" + expectedKey, 7L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"YY\" + expectedKey, expectedKey * 5L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXX\" + expectedKey, 6L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            inputTopic2.pipeInput(expectedKeys[0], null, 5L);\n            inputTopic2.pipeInput(expectedKeys[1], null, 7L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXXX\" + expectedKey, 13L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n            \r\n            inputTopic1.pipeInput(expectedKeys[0], null, 0L);\n            inputTopic1.pipeInput(expectedKeys[1], null, 42L);\n            inputTopic1.pipeInput(expectedKeys[2], null, 5L);\n            inputTopic1.pipeInput(expectedKeys[3], null, 20L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","date":"2020-09-10 01:37:21","endLine":387,"groupId":"101471","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestNotSendingOldValues","params":"(finalStreamsBuilderbuilder@finalint[]expectedKeys@finalKTable<Integer@String>table1@finalKTable<Integer@String>table2@finalMockApiProcessorSupplier<Integer@String@Void@Void>supplier@finalKTable<Integer@String>joined)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/a8e50ba54a8b51d250765c802d66cb87608367.src","preCode":"    private void doTestNotSendingOldValues(final StreamsBuilder builder,\n                                           final int[] expectedKeys,\n                                           final KTable<Integer, String> table1,\n                                           final KTable<Integer, String> table2,\n                                           final MockProcessorSupplier<Integer, String> supplier,\n                                           final KTable<Integer, String> joined) {\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertFalse(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"X\" + expectedKeys[i], 5L + i);\n            }\n            \r\n            inputTopic1.pipeInput(null, \"SomeVal\", 42L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(EMPTY);\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i);\n            }\n            \r\n            inputTopic2.pipeInput(null, \"AnotherVal\", 73L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XX\" + expectedKey, 7L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"YY\" + expectedKey, expectedKey * 5L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXX\" + expectedKey, 6L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(\n                new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            inputTopic2.pipeInput(expectedKeys[0], null, 5L);\n            inputTopic2.pipeInput(expectedKeys[1], null, 7L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 7));\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXXX\" + expectedKey, 13L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n            \r\n            inputTopic1.pipeInput(expectedKeys[0], null, 0L);\n            inputTopic1.pipeInput(expectedKeys[1], null, 42L);\n            inputTopic1.pipeInput(expectedKeys[2], null, 5L);\n            inputTopic1.pipeInput(expectedKeys[3], null, 20L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"},{"authorDate":"2020-09-10 01:37:21","commitOrder":22,"curCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockApiProcessorSupplier<Integer, String, Void, Void> supplier = new MockApiProcessorSupplier<>();\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockApiProcessor<Integer, String, Void, Void> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"X\" + expectedKeys[i], 5L + i);\n            }\n            \r\n            inputTopic1.pipeInput(null, \"SomeVal\", 42L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i);\n            }\n            \r\n            inputTopic2.pipeInput(null, \"AnotherVal\", 73L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XX\" + expectedKey, 7L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"YY\" + expectedKey, expectedKey * 5L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXX\" + expectedKey, 6L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            inputTopic2.pipeInput(expectedKeys[0], null, 5L);\n            inputTopic2.pipeInput(expectedKeys[1], null, 7L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXXX\" + expectedKey, 13L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n\n            \r\n            inputTopic1.pipeInput(expectedKeys[0], null, 0L);\n            inputTopic1.pipeInput(expectedKeys[1], null, 42L);\n            inputTopic1.pipeInput(expectedKeys[2], null, 5L);\n            inputTopic1.pipeInput(expectedKeys[3], null, 20L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","date":"2020-09-10 01:37:21","endLine":307,"groupId":"101471","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testNotSendingOldValue","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e6/add21fc79a02cba4ed786febd9e95d873b64f4.src","preCode":"    public void testNotSendingOldValue() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final int[] expectedKeys = new int[] {0, 1, 2, 3};\n\n        final KTable<Integer, String> table1;\n        final KTable<Integer, String> table2;\n        final KTable<Integer, String> joined;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        table1 = builder.table(topic1, consumed);\n        table2 = builder.table(topic2, consumed);\n        joined = table1.leftJoin(table2, MockValueJoiner.TOSTRING_JOINER);\n\n        supplier = new MockProcessorSupplier<>();\n        final Topology topology = builder.build().addProcessor(\"proc\", supplier, ((KTableImpl<?, ?, ?>) joined).name);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(topology, props)) {\n            final TestInputTopic<Integer, String> inputTopic1 =\n                    driver.createInputTopic(topic1, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final TestInputTopic<Integer, String> inputTopic2 =\n                    driver.createInputTopic(topic2, Serdes.Integer().serializer(), Serdes.String().serializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            final MockProcessor<Integer, String> proc = supplier.theCapturedProcessor();\n\n            assertTrue(((KTableImpl<?, ?, ?>) table1).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) table2).sendingOldValueEnabled());\n            assertFalse(((KTableImpl<?, ?, ?>) joined).sendingOldValueEnabled());\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic1.pipeInput(expectedKeys[i], \"X\" + expectedKeys[i], 5L + i);\n            }\n            \r\n            inputTopic1.pipeInput(null, \"SomeVal\", 42L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+null\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+null\", null), 6));\n\n            \r\n            for (int i = 0; i < 2; i++) {\n                inputTopic2.pipeInput(expectedKeys[i], \"Y\" + expectedKeys[i], 10L * i);\n            }\n            \r\n            inputTopic2.pipeInput(null, \"AnotherVal\", 73L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"X0+Y0\", null), 5),\n                new KeyValueTimestamp<>(1, new Change<>(\"X1+Y1\", null), 10));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XX\" + expectedKey, 7L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+Y0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+Y1\", null), 10),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+null\", null), 7),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic2.pipeInput(expectedKey, \"YY\" + expectedKey, expectedKey * 5L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XX0+YY0\", null), 7),\n                new KeyValueTimestamp<>(1, new Change<>(\"XX1+YY1\", null), 7),\n                new KeyValueTimestamp<>(2, new Change<>(\"XX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XX3+YY3\", null), 15));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXX\" + expectedKey, 6L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+YY0\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+YY1\", null), 6),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXX2+YY2\", null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXX3+YY3\", null), 15));\n\n            \r\n            inputTopic2.pipeInput(expectedKeys[0], null, 5L);\n            inputTopic2.pipeInput(expectedKeys[1], null, 7L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXX0+null\", null), 6),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXX1+null\", null), 7));\n\n            \r\n            for (final int expectedKey : expectedKeys) {\n                inputTopic1.pipeInput(expectedKey, \"XXXX\" + expectedKey, 13L);\n            }\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(\"XXXX0+null\", null), 13),\n                new KeyValueTimestamp<>(1, new Change<>(\"XXXX1+null\", null), 13),\n                new KeyValueTimestamp<>(2, new Change<>(\"XXXX2+YY2\", null), 13),\n                new KeyValueTimestamp<>(3, new Change<>(\"XXXX3+YY3\", null), 15));\n\n            \r\n            inputTopic1.pipeInput(expectedKeys[0], null, 0L);\n            inputTopic1.pipeInput(expectedKeys[1], null, 42L);\n            inputTopic1.pipeInput(expectedKeys[2], null, 5L);\n            inputTopic1.pipeInput(expectedKeys[3], null, 20L);\n            \r\n            \r\n            proc.checkAndClearProcessResult(new KeyValueTimestamp<>(0, new Change<>(null, null), 0),\n                new KeyValueTimestamp<>(1, new Change<>(null, null), 42),\n                new KeyValueTimestamp<>(2, new Change<>(null, null), 10),\n                new KeyValueTimestamp<>(3, new Change<>(null, null), 20));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableLeftJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"09d1498e3065eccc26a2d396ea13e7c8b553b974","commitMessage":"@@@KAFKA-10436: Implement KIP-478 Topology changes (#9221)\n\nConvert Topology#addProcessor and #addGlobalStore\nAlso.  convert some of the internals in support of addProcessor\n\nReviewers: Bill Bejeck <bbejeck@apache.org>","date":"2020-09-10 01:37:21","modifiedFileCount":"45","status":"M","submitter":"John Roesler"}]
