[{"authorTime":"2018-05-19 07:06:50","codes":[{"authorDate":"2018-05-19 07:06:50","commitOrder":1,"curCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), Serialized.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignore\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 0L));\n\n        assertThat(output(), hasItems(\"A:1\", \"A:0\", \"A:2\", \"A:0\", \"A:3\"));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","date":"2018-05-19 07:06:50","endLine":387,"groupId":"18061","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7c/12dad2e64485a64ef575f16bd4204e0d558c90.src","preCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), Serialized.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignore\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 0L));\n\n        assertThat(output(), hasItems(\"A:1\", \"A:0\", \"A:2\", \"A:0\", \"A:3\"));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":363,"status":"B"},{"authorDate":"2018-05-19 07:06:50","commitOrder":1,"curCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), Serialized.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"a\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aa\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aaa\", 0L));\n\n        assertThat(output(), hasItems(\"A:1\", \"A:0\", \"A:2\", \"A:0\", \"A:3\"));\n    }\n","date":"2018-05-19 07:06:50","endLine":407,"groupId":"18062","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7c/12dad2e64485a64ef575f16bd4204e0d558c90.src","preCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), Serialized.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"a\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aa\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aaa\", 0L));\n\n        assertThat(output(), hasItems(\"A:1\", \"A:0\", \"A:2\", \"A:0\", \"A:3\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"B"}],"commitId":"4e1c8ffd0d44ab7d1c0ca9ac9d70a98b46f35181","commitMessage":"@@@KAFKA-6849: add transformValues methods to KTable. (#4959)\n\nSee the KIP: https://cwiki.apache.org/confluence/display/KAFKA/KIP-292%3A+Add+transformValues%28%29+method+to+KTable\n\nThis PR adds the transformValues method to the KTable interface. The semantics of the call are the same as the methods of the same name on the KStream interface.\n\nFixes KAFKA-6849\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-05-19 07:06:50","modifiedFileCount":"23","status":"B","submitter":"Andy Coates"},{"authorTime":"2018-11-13 14:18:59","codes":[{"authorDate":"2018-11-13 14:18:59","commitOrder":2,"curCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), org.apache.kafka.streams.kstream.Serialized.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignore\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 0L));\n\n        assertThat(output(), hasItems(\"A:1\", \"A:0\", \"A:2\", \"A:0\", \"A:3\"));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","date":"2018-11-13 14:18:59","endLine":388,"groupId":"18061","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/82/ada52ce37011a6bb4edd2a39185e7f290eb507.src","preCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), Serialized.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignore\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 0L));\n\n        assertThat(output(), hasItems(\"A:1\", \"A:0\", \"A:2\", \"A:0\", \"A:3\"));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":364,"status":"M"},{"authorDate":"2018-11-13 14:18:59","commitOrder":2,"curCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), org.apache.kafka.streams.kstream.Serialized.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"a\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aa\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aaa\", 0L));\n\n        assertThat(output(), hasItems(\"A:1\", \"A:0\", \"A:2\", \"A:0\", \"A:3\"));\n    }\n","date":"2018-11-13 14:18:59","endLine":409,"groupId":"18062","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/82/ada52ce37011a6bb4edd2a39185e7f290eb507.src","preCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), Serialized.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"a\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aa\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aaa\", 0L));\n\n        assertThat(output(), hasItems(\"A:1\", \"A:0\", \"A:2\", \"A:0\", \"A:3\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"}],"commitId":"12f310d50e7f5b1c18c4f61a119a6cd830da3bc0","commitMessage":"@@@KAFKA-7612: Fix javac warnings and enable warnings as errors (#5900)\n\n- Use Xlint:all with 3 exclusions (filed KAFKA-7613 to remove the exclusions)\n- Use the same javac options when compiling tests (seems accidental that\nwe didn't do this before)\n- Replaced several deprecated method calls with non-deprecated ones:\n  - `KafkaConsumer.poll(long)` and `KafkaConsumer.close(long)`\n  - `Class.newInstance` and `new Integer/Long` (deprecated since Java 9)\n  - `scala.Console` (deprecated in Scala 2.11)\n  - `PartitionData` taking a timestamp (one of them seemingly a bug)\n  - `JsonMappingException` single parameter constructor\n- Fix unnecessary usage of raw types in several places.\n- Add @SuppressWarnings for deprecations.  unchecked and switch fallthrough in\nseveral places.\n- Scala clean-ups (var -> val.  ETA expansion warnings.  avoid reflective calls)\n- Use lambdas to simplify code in a few places\n- Add @SafeVarargs.  fix varargs usage and remove unnecessary `Utils.mkList` method\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Manikumar Reddy <manikumar.reddy@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Stanislav Kozlovski <stanislav_kozlovski@outlook.com>","date":"2018-11-13 14:18:59","modifiedFileCount":"146","status":"M","submitter":"Ismael Juma"},{"authorTime":"2018-11-15 09:29:19","codes":[{"authorDate":"2018-11-15 09:29:19","commitOrder":3,"curCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignore\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 0L));\n\n        assertThat(output(), hasItems(\"A:1\", \"A:0\", \"A:2\", \"A:0\", \"A:3\"));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","date":"2018-11-15 09:29:19","endLine":388,"groupId":"18061","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/35/0b0d29f0261d9bf9f0c2305a951dca9a5ffd1f.src","preCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), org.apache.kafka.streams.kstream.Serialized.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignore\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 0L));\n\n        assertThat(output(), hasItems(\"A:1\", \"A:0\", \"A:2\", \"A:0\", \"A:3\"));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":364,"status":"M"},{"authorDate":"2018-11-15 09:29:19","commitOrder":3,"curCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"a\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aa\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aaa\", 0L));\n\n        assertThat(output(), hasItems(\"A:1\", \"A:0\", \"A:2\", \"A:0\", \"A:3\"));\n    }\n","date":"2018-11-15 09:29:19","endLine":408,"groupId":"18062","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/35/0b0d29f0261d9bf9f0c2305a951dca9a5ffd1f.src","preCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), org.apache.kafka.streams.kstream.Serialized.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"a\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aa\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aaa\", 0L));\n\n        assertThat(output(), hasItems(\"A:1\", \"A:0\", \"A:2\", \"A:0\", \"A:3\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":391,"status":"M"}],"commitId":"14d3ead19d250f2f3117af473ff6244c663ef8ca","commitMessage":"@@@MINOR: Remove deprecated callers (#5911)\n\nCallers of 1) Windows#until.  2) Windows#of.  3) Serialized are replaced when possible with the new APIs.\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Bill Bejeck <bill@confluent.io>","date":"2018-11-15 09:29:19","modifiedFileCount":"28","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-03-20 08:27:32","codes":[{"authorDate":"2019-03-20 08:27:32","commitOrder":4,"curCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignore\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\"));\n\n        assertThat(output(), hasItems(\"A:1 (ts: 0)\", \"A:0 (ts: 0)\", \"A:2 (ts: 0)\", \"A:0 (ts: 0)\", \"A:3 (ts: 0)\"));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","date":"2019-03-20 08:27:32","endLine":389,"groupId":"11950","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ed/6b64952534f74179deba520099a6e377209c1b.src","preCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignore\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 0L));\n\n        assertThat(output(), hasItems(\"A:1\", \"A:0\", \"A:2\", \"A:0\", \"A:3\"));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"},{"authorDate":"2019-03-20 08:27:32","commitOrder":4,"curCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"a\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aa\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aaa\"));\n\n        assertThat(output(), hasItems(\"A:1 (ts: 0)\", \"A:0 (ts: 0)\", \"A:2 (ts: 0)\", \"A:0 (ts: 0)\", \"A:3 (ts: 0)\"));\n    }\n","date":"2019-03-20 08:27:32","endLine":409,"groupId":"11952","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ed/6b64952534f74179deba520099a6e377209c1b.src","preCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"a\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aa\", 0L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aaa\", 0L));\n\n        assertThat(output(), hasItems(\"A:1\", \"A:0\", \"A:2\", \"A:0\", \"A:3\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":392,"status":"M"}],"commitId":"b5ce093a24d0fe212b5d1374330fc720b4913bee","commitMessage":"@@@MINOR: capture result timestamps in Kafka Streams DSL tests (#6447)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2019-03-20 08:27:32","modifiedFileCount":"29","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-05-18 07:48:07","codes":[{"authorDate":"2019-05-18 07:48:07","commitOrder":5,"curCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 5L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 15L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 10L));\n\n        assertThat(output(), hasItems(\"A:1 (ts: 5)\", \"A:0 (ts: 15)\", \"A:2 (ts: 15)\", \"A:0 (ts: 15)\", \"A:3 (ts: 15)\"));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","date":"2019-05-18 07:48:07","endLine":399,"groupId":"2652","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/ddb54ecacefc21a984ff79fed3ac7a2122ced8.src","preCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignore\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\"));\n\n        assertThat(output(), hasItems(\"A:1 (ts: 0)\", \"A:0 (ts: 0)\", \"A:2 (ts: 0)\", \"A:0 (ts: 0)\", \"A:3 (ts: 0)\"));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"M"},{"authorDate":"2019-05-18 07:48:07","commitOrder":5,"curCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"a\", 5L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aa\", 15L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aaa\", 10));\n\n        assertThat(output(), hasItems(\"A:1 (ts: 5)\", \"A:0 (ts: 15)\", \"A:2 (ts: 15)\", \"A:0 (ts: 15)\", \"A:3 (ts: 15)\"));\n    }\n","date":"2019-05-18 07:48:07","endLine":419,"groupId":"18062","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/ddb54ecacefc21a984ff79fed3ac7a2122ced8.src","preCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"a\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aa\"));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aaa\"));\n\n        assertThat(output(), hasItems(\"A:1 (ts: 0)\", \"A:0 (ts: 0)\", \"A:2 (ts: 0)\", \"A:0 (ts: 0)\", \"A:3 (ts: 0)\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":402,"status":"M"}],"commitId":"6a2749faa63397caa93dae7bfdc3f1d0573a2ff4","commitMessage":"@@@KAFKA-6455: Improve DSL operator timestamp semantics (#6725)\n\nBasic idea:\nKTable-KTable join: set max(left-ts. right-ts) for result\n#agg(...) (stream/table windowed/non-windowed): set max(ts1.  ts2.  ts3. ...) of all input records that contribute to the aggregation result\nfor all stateless transformation: input-ts -> output-ts\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   John Roesler <john@confluent.io>.  Andy Coates <andy@confluent.io>.   Bill Bejeck <bbejeck@gmail.com","date":"2019-05-18 07:48:07","modifiedFileCount":"61","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-07-16 22:16:15","codes":[{"authorDate":"2019-07-16 22:16:15","commitOrder":6,"curCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 5L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 15L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 10L));\n\n        assertThat(output(), hasItems(new KeyValueTimestamp<>(\"A\", \"1\", 5),\n                new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                new KeyValueTimestamp<>(\"A\", \"2\", 15),\n                new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                new KeyValueTimestamp<>(\"A\", \"3\", 15)));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","date":"2019-07-16 22:16:15","endLine":410,"groupId":"2652","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ab/091390c03270ca8d0126d83029f40abc61df17.src","preCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 5L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 15L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 10L));\n\n        assertThat(output(), hasItems(\"A:1 (ts: 5)\", \"A:0 (ts: 15)\", \"A:2 (ts: 15)\", \"A:0 (ts: 15)\", \"A:3 (ts: 15)\"));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"M"},{"authorDate":"2019-07-16 22:16:15","commitOrder":6,"curCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"a\", 5L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aa\", 15L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aaa\", 10));\n\n        assertThat(output(), hasItems(new KeyValueTimestamp<>(\"A\", \"1\", 5),\n                 new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"2\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"3\", 15)));\n    }\n","date":"2019-07-16 22:16:15","endLine":434,"groupId":"18062","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ab/091390c03270ca8d0126d83029f40abc61df17.src","preCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"a\", 5L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aa\", 15L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aaa\", 10));\n\n        assertThat(output(), hasItems(\"A:1 (ts: 5)\", \"A:0 (ts: 15)\", \"A:2 (ts: 15)\", \"A:0 (ts: 15)\", \"A:3 (ts: 15)\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":413,"status":"M"}],"commitId":"00757cd99f6d8bf2760c3708d307347f4cde65f6","commitMessage":"@@@KAFKA-8450: Using KeyValueTimeStamp in MockProcessor (#6933)\n\nThis PR is to use KeyValueTimeStamp Object in MockProcessor Test file instead of String and change all the dependency files with broken test cases.\n\nReviewers: Kamal Chandraprakash.  Matthias J. Sax <mjsax@apache.org>.   Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-07-16 22:16:15","modifiedFileCount":"28","status":"M","submitter":"SuryaTeja Duggi"},{"authorTime":"2019-10-07 16:01:58","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":7,"curCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n        final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(INPUT_TOPIC, new StringSerializer(), new StringSerializer());\n\n        inputTopic.pipeInput(\"A\", \"ignored\", 5L);\n        inputTopic.pipeInput(\"A\", \"ignored\", 15L);\n        inputTopic.pipeInput(\"A\", \"ignored\", 10L);\n\n        assertThat(output(), hasItems(new KeyValueTimestamp<>(\"A\", \"1\", 5),\n                new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                new KeyValueTimestamp<>(\"A\", \"2\", 15),\n                new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                new KeyValueTimestamp<>(\"A\", \"3\", 15)));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","date":"2019-10-07 16:01:58","endLine":412,"groupId":"9222","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/cdae4776b571435c82721815b11cf7eda9f091.src","preCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 5L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 15L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"ignored\", 10L));\n\n        assertThat(output(), hasItems(new KeyValueTimestamp<>(\"A\", \"1\", 5),\n                new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                new KeyValueTimestamp<>(\"A\", \"2\", 15),\n                new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                new KeyValueTimestamp<>(\"A\", \"3\", 15)));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"M"},{"authorDate":"2019-10-07 16:01:58","commitOrder":7,"curCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n        final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(INPUT_TOPIC, new StringSerializer(), new StringSerializer());\n\n        inputTopic.pipeInput(\"A\", \"a\", 5L);\n        inputTopic.pipeInput(\"A\", \"aa\", 15L);\n        inputTopic.pipeInput(\"A\", \"aaa\", 10);\n\n        assertThat(output(), hasItems(new KeyValueTimestamp<>(\"A\", \"1\", 5),\n                 new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"2\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"3\", 15)));\n    }\n","date":"2019-10-07 16:01:58","endLine":438,"groupId":"8407","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/cdae4776b571435c82721815b11cf7eda9f091.src","preCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"a\", 5L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aa\", 15L));\n        driver.pipeInput(recordFactory.create(INPUT_TOPIC, \"A\", \"aaa\", 10));\n\n        assertThat(output(), hasItems(new KeyValueTimestamp<>(\"A\", \"1\", 5),\n                 new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"2\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"3\", 15)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":415,"status":"M"}],"commitId":"a5a6938c69f4310f7ec519036f0df77d8022326a","commitMessage":"@@@KAFKA-8233: TopologyTestDriver test input and output usability improvements (#7378)\n\nImplements KIP-470\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-07 16:01:58","modifiedFileCount":"47","status":"M","submitter":"Jukka Karvanen"},{"authorTime":"2019-10-07 16:01:58","codes":[{"authorDate":"2020-05-13 02:19:32","commitOrder":8,"curCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n        final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(INPUT_TOPIC, new StringSerializer(), new StringSerializer());\n\n        inputTopic.pipeInput(\"A\", \"ignored\", 5L);\n        inputTopic.pipeInput(\"A\", \"ignored1\", 15L);\n        inputTopic.pipeInput(\"A\", \"ignored2\", 10L);\n\n        assertThat(output(), hasItems(new KeyValueTimestamp<>(\"A\", \"1\", 5),\n                new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                new KeyValueTimestamp<>(\"A\", \"2\", 15),\n                new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                new KeyValueTimestamp<>(\"A\", \"3\", 15)));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","date":"2020-05-13 02:19:32","endLine":412,"groupId":"101751","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a4/8dcdb52ccddd95c76c7bd8a5d381b8ad812872.src","preCode":"    public void shouldCalculateCorrectOldValuesIfMaterializedEvenIfStateful() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(\n                new StatefulTransformerSupplier(),\n                Materialized.<String, Integer, KeyValueStore<Bytes, byte[]>>as(QUERYABLE_NAME)\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Integer()))\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n        final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(INPUT_TOPIC, new StringSerializer(), new StringSerializer());\n\n        inputTopic.pipeInput(\"A\", \"ignored\", 5L);\n        inputTopic.pipeInput(\"A\", \"ignored\", 15L);\n        inputTopic.pipeInput(\"A\", \"ignored\", 10L);\n\n        assertThat(output(), hasItems(new KeyValueTimestamp<>(\"A\", \"1\", 5),\n                new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                new KeyValueTimestamp<>(\"A\", \"2\", 15),\n                new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                new KeyValueTimestamp<>(\"A\", \"3\", 15)));\n\n        final KeyValueStore<String, Integer> keyValueStore = driver.getKeyValueStore(QUERYABLE_NAME);\n        assertThat(keyValueStore.get(\"A\"), is(3));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":382,"status":"M"},{"authorDate":"2019-10-07 16:01:58","commitOrder":8,"curCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n        final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(INPUT_TOPIC, new StringSerializer(), new StringSerializer());\n\n        inputTopic.pipeInput(\"A\", \"a\", 5L);\n        inputTopic.pipeInput(\"A\", \"aa\", 15L);\n        inputTopic.pipeInput(\"A\", \"aaa\", 10);\n\n        assertThat(output(), hasItems(new KeyValueTimestamp<>(\"A\", \"1\", 5),\n                 new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"2\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"3\", 15)));\n    }\n","date":"2019-10-07 16:01:58","endLine":438,"groupId":"101751","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/cdae4776b571435c82721815b11cf7eda9f091.src","preCode":"    public void shouldCalculateCorrectOldValuesIfNotStatefulEvenIfNotMaterialized() {\n        builder\n            .table(INPUT_TOPIC, CONSUMED)\n            .transformValues(new StatelessTransformerSupplier())\n            .groupBy(toForceSendingOfOldValues(), Grouped.with(Serdes.String(), Serdes.Integer()))\n            .reduce(MockReducer.INTEGER_ADDER, MockReducer.INTEGER_SUBTRACTOR)\n            .mapValues(mapBackToStrings())\n            .toStream()\n            .process(capture);\n\n        driver = new TopologyTestDriver(builder.build(), props());\n        final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(INPUT_TOPIC, new StringSerializer(), new StringSerializer());\n\n        inputTopic.pipeInput(\"A\", \"a\", 5L);\n        inputTopic.pipeInput(\"A\", \"aa\", 15L);\n        inputTopic.pipeInput(\"A\", \"aaa\", 10);\n\n        assertThat(output(), hasItems(new KeyValueTimestamp<>(\"A\", \"1\", 5),\n                 new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"2\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"0\", 15),\n                 new KeyValueTimestamp<>(\"A\", \"3\", 15)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":415,"status":"N"}],"commitId":"f54cece73e6116566979bcf6a865d803b7c18974","commitMessage":"@@@KAFKA-8770: KIP-557: Drop idempotent KTable source updates (#8254)\n\nDrops idempotent updates from KTable source operators.\nSpecifically.  drop updates in which the value is unchanged. \nand the timestamp is the same or larger.\n\nImplements: KIP-557\nReviewers: Bruno Cadonna <bruno@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-05-13 02:19:32","modifiedFileCount":"14","status":"M","submitter":"Richard Yu"}]
