[{"authorTime":"2018-02-10 07:29:21","codes":[{"authorDate":"2018-02-10 07:29:21","commitOrder":2,"curCode":"    public void shouldUseSourceSpecificDeserializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n        final String processor = \"processor\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addProcessor(processor, new MockProcessorSupplier(), sourceName1, sourceName2);\n        topology.addSink(\n            \"sink\",\n            SINK_TOPIC_1,\n            new Serializer() {\n                @Override\n                public byte[] serialize(final String topic, final Object data) {\n                    if (data instanceof Long) {\n                        return Serdes.Long().serializer().serialize(topic, (Long) data);\n                    }\n                    return Serdes.Integer().serializer().serialize(topic, (Integer) data);\n                }\n                @Override\n                public void close() {}\n                @Override\n                public void configure(final Map configs, final boolean isKey) {}\n            },\n            new Serializer() {\n                @Override\n                public byte[] serialize(final String topic, final Object data) {\n                    if (data instanceof String) {\n                        return Serdes.String().serializer().serialize(topic, (String) data);\n                    }\n                    return Serdes.Double().serializer().serialize(topic, (Double) data);\n                }\n                @Override\n                public void close() {}\n                @Override\n                public void configure(final Map configs, final boolean isKey) {}\n            },\n            processor);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","date":"2018-02-10 07:29:21","endLine":493,"groupId":"274","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseSourceSpecificDeserializers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/17/d5e02f4be017196ccbd0915de728e287884c01.src","preCode":"    public void shouldUseSourceSpecificDeserializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n        final String processor = \"processor\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addProcessor(processor, new MockProcessorSupplier(), sourceName1, sourceName2);\n        topology.addSink(\n            \"sink\",\n            SINK_TOPIC_1,\n            new Serializer() {\n                @Override\n                public byte[] serialize(final String topic, final Object data) {\n                    if (data instanceof Long) {\n                        return Serdes.Long().serializer().serialize(topic, (Long) data);\n                    }\n                    return Serdes.Integer().serializer().serialize(topic, (Integer) data);\n                }\n                @Override\n                public void close() {}\n                @Override\n                public void configure(final Map configs, final boolean isKey) {}\n            },\n            new Serializer() {\n                @Override\n                public byte[] serialize(final String topic, final Object data) {\n                    if (data instanceof String) {\n                        return Serdes.String().serializer().serialize(topic, (String) data);\n                    }\n                    return Serdes.Double().serializer().serialize(topic, (Double) data);\n                }\n                @Override\n                public void close() {}\n                @Override\n                public void configure(final Map configs, final boolean isKey) {}\n            },\n            processor);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","realPath":"streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":422,"status":"MB"},{"authorDate":"2018-02-10 07:29:21","commitOrder":2,"curCode":"    public void shouldUseSinkSpecificSerializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addSink(\"sink-1\", SINK_TOPIC_1, Serdes.Long().serializer(), Serdes.String().serializer(), sourceName1);\n        topology.addSink(\"sink-2\", SINK_TOPIC_2, Serdes.Integer().serializer(), Serdes.Double().serializer(), sourceName2);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_2, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","date":"2018-02-10 07:29:21","endLine":537,"groupId":"18311","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseSinkSpecificSerializers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/17/d5e02f4be017196ccbd0915de728e287884c01.src","preCode":"    public void shouldUseSinkSpecificSerializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addSink(\"sink-1\", SINK_TOPIC_1, Serdes.Long().serializer(), Serdes.String().serializer(), sourceName1);\n        topology.addSink(\"sink-2\", SINK_TOPIC_2, Serdes.Integer().serializer(), Serdes.Double().serializer(), sourceName2);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_2, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","realPath":"streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":496,"status":"B"}],"commitId":"dc54c0e24b3f7ca27990b1d576b8b8fd6d740ca1","commitMessage":"@@@KAFKA-3625: TopologyTestDriver must process output for wall-clock-time punctuations and on close() (#4502)\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewer: Damian Guy <damian@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-02-10 07:29:21","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-02-10 07:29:21","codes":[{"authorDate":"2018-06-07 06:16:21","commitOrder":3,"curCode":"    public void shouldUseSourceSpecificDeserializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n        final String processor = \"processor\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addProcessor(processor, new MockProcessorSupplier(), sourceName1, sourceName2);\n        topology.addSink(\n            \"sink\",\n            SINK_TOPIC_1,\n            new Serializer<Object>() {\n                @Override\n                public byte[] serialize(final String topic, final Object data) {\n                    if (data instanceof Long) {\n                        return Serdes.Long().serializer().serialize(topic, (Long) data);\n                    }\n                    return Serdes.Integer().serializer().serialize(topic, (Integer) data);\n                }\n                @Override\n                public void close() {}\n                @Override\n                public void configure(final Map configs, final boolean isKey) {}\n            },\n            new Serializer<Object>() {\n                @Override\n                public byte[] serialize(final String topic, final Object data) {\n                    if (data instanceof String) {\n                        return Serdes.String().serializer().serialize(topic, (String) data);\n                    }\n                    return Serdes.Double().serializer().serialize(topic, (Double) data);\n                }\n                @Override\n                public void close() {}\n                @Override\n                public void configure(final Map configs, final boolean isKey) {}\n            },\n            processor);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","date":"2018-06-07 06:16:21","endLine":500,"groupId":"274","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseSourceSpecificDeserializers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/75/52637dc26f839ca2054a86c42168cc5be1de1e.src","preCode":"    public void shouldUseSourceSpecificDeserializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n        final String processor = \"processor\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addProcessor(processor, new MockProcessorSupplier(), sourceName1, sourceName2);\n        topology.addSink(\n            \"sink\",\n            SINK_TOPIC_1,\n            new Serializer() {\n                @Override\n                public byte[] serialize(final String topic, final Object data) {\n                    if (data instanceof Long) {\n                        return Serdes.Long().serializer().serialize(topic, (Long) data);\n                    }\n                    return Serdes.Integer().serializer().serialize(topic, (Integer) data);\n                }\n                @Override\n                public void close() {}\n                @Override\n                public void configure(final Map configs, final boolean isKey) {}\n            },\n            new Serializer() {\n                @Override\n                public byte[] serialize(final String topic, final Object data) {\n                    if (data instanceof String) {\n                        return Serdes.String().serializer().serialize(topic, (String) data);\n                    }\n                    return Serdes.Double().serializer().serialize(topic, (Double) data);\n                }\n                @Override\n                public void close() {}\n                @Override\n                public void configure(final Map configs, final boolean isKey) {}\n            },\n            processor);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","realPath":"streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"M"},{"authorDate":"2018-02-10 07:29:21","commitOrder":3,"curCode":"    public void shouldUseSinkSpecificSerializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addSink(\"sink-1\", SINK_TOPIC_1, Serdes.Long().serializer(), Serdes.String().serializer(), sourceName1);\n        topology.addSink(\"sink-2\", SINK_TOPIC_2, Serdes.Integer().serializer(), Serdes.Double().serializer(), sourceName2);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_2, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","date":"2018-02-10 07:29:21","endLine":537,"groupId":"18311","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseSinkSpecificSerializers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/17/d5e02f4be017196ccbd0915de728e287884c01.src","preCode":"    public void shouldUseSinkSpecificSerializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addSink(\"sink-1\", SINK_TOPIC_1, Serdes.Long().serializer(), Serdes.String().serializer(), sourceName1);\n        topology.addSink(\"sink-2\", SINK_TOPIC_2, Serdes.Integer().serializer(), Serdes.Double().serializer(), sourceName2);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_2, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","realPath":"streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":496,"status":"N"}],"commitId":"0eddddb82be563bee9e4b65030e27efd5148ff4b","commitMessage":"@@@KAFKA-6967: TopologyTestDriver does not allow pre-populating state stores that have change logging (#5096)\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  James Cheng <jylcheng@yahoo.com>.  Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2018-06-07 06:16:21","modifiedFileCount":"7","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-02-10 07:29:21","codes":[{"authorDate":"2019-02-22 01:05:13","commitOrder":4,"curCode":"    public void shouldUseSourceSpecificDeserializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n        final String processor = \"processor\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addProcessor(processor, new MockProcessorSupplier(), sourceName1, sourceName2);\n        topology.addSink(\n            \"sink\",\n            SINK_TOPIC_1,\n            new Serializer<Object>() {\n                @Override\n                public byte[] serialize(final String topic, final Object data) {\n                    if (data instanceof Long) {\n                        return Serdes.Long().serializer().serialize(topic, (Long) data);\n                    }\n                    return Serdes.Integer().serializer().serialize(topic, (Integer) data);\n                }\n            },\n            new Serializer<Object>() {\n                @Override\n                public byte[] serialize(final String topic, final Object data) {\n                    if (data instanceof String) {\n                        return Serdes.String().serializer().serialize(topic, (String) data);\n                    }\n                    return Serdes.Double().serializer().serialize(topic, (Double) data);\n                }\n            },\n            processor);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","date":"2019-02-22 01:05:13","endLine":518,"groupId":"11018","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseSourceSpecificDeserializers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6f/6c51eddea1e652b15347a2412f24c57f6f1f22.src","preCode":"    public void shouldUseSourceSpecificDeserializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n        final String processor = \"processor\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addProcessor(processor, new MockProcessorSupplier(), sourceName1, sourceName2);\n        topology.addSink(\n            \"sink\",\n            SINK_TOPIC_1,\n            new Serializer<Object>() {\n                @Override\n                public byte[] serialize(final String topic, final Object data) {\n                    if (data instanceof Long) {\n                        return Serdes.Long().serializer().serialize(topic, (Long) data);\n                    }\n                    return Serdes.Integer().serializer().serialize(topic, (Integer) data);\n                }\n                @Override\n                public void close() {}\n                @Override\n                public void configure(final Map configs, final boolean isKey) {}\n            },\n            new Serializer<Object>() {\n                @Override\n                public byte[] serialize(final String topic, final Object data) {\n                    if (data instanceof String) {\n                        return Serdes.String().serializer().serialize(topic, (String) data);\n                    }\n                    return Serdes.Double().serializer().serialize(topic, (Double) data);\n                }\n                @Override\n                public void close() {}\n                @Override\n                public void configure(final Map configs, final boolean isKey) {}\n            },\n            processor);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","realPath":"streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":455,"status":"M"},{"authorDate":"2018-02-10 07:29:21","commitOrder":4,"curCode":"    public void shouldUseSinkSpecificSerializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addSink(\"sink-1\", SINK_TOPIC_1, Serdes.Long().serializer(), Serdes.String().serializer(), sourceName1);\n        topology.addSink(\"sink-2\", SINK_TOPIC_2, Serdes.Integer().serializer(), Serdes.Double().serializer(), sourceName2);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_2, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","date":"2018-02-10 07:29:21","endLine":537,"groupId":"18311","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseSinkSpecificSerializers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/17/d5e02f4be017196ccbd0915de728e287884c01.src","preCode":"    public void shouldUseSinkSpecificSerializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addSink(\"sink-1\", SINK_TOPIC_1, Serdes.Long().serializer(), Serdes.String().serializer(), sourceName1);\n        topology.addSink(\"sink-2\", SINK_TOPIC_2, Serdes.Integer().serializer(), Serdes.Double().serializer(), sourceName2);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_2, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","realPath":"streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":496,"status":"N"}],"commitId":"35a0de32ee3823dfb548a1cd5d5faf4f7c99e4e0","commitMessage":"@@@KAFKA-6161 Add default implementation to close() and configure() for Serdes (#5348)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-02-22 01:05:13","modifiedFileCount":"35","status":"M","submitter":"Chia-Ping Tsai"},{"authorTime":"2018-02-10 07:29:21","codes":[{"authorDate":"2019-05-16 23:16:00","commitOrder":5,"curCode":"    public void shouldUseSourceSpecificDeserializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n        final String processor = \"processor\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addProcessor(processor, new MockProcessorSupplier(), sourceName1, sourceName2);\n        topology.addSink(\n            \"sink\",\n            SINK_TOPIC_1,\n            (topic, data) -> {\n                if (data instanceof Long) {\n                    return Serdes.Long().serializer().serialize(topic, (Long) data);\n                }\n                return Serdes.Integer().serializer().serialize(topic, (Integer) data);\n            },\n            (topic, data) -> {\n                if (data instanceof String) {\n                    return Serdes.String().serializer().serialize(topic, (String) data);\n                }\n                return Serdes.Double().serializer().serialize(topic, (Double) data);\n            },\n            processor);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","date":"2019-05-16 23:16:00","endLine":512,"groupId":"11018","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseSourceSpecificDeserializers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/23/942031e13c78a5e20234fee3f1572b4974ed2a.src","preCode":"    public void shouldUseSourceSpecificDeserializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n        final String processor = \"processor\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addProcessor(processor, new MockProcessorSupplier(), sourceName1, sourceName2);\n        topology.addSink(\n            \"sink\",\n            SINK_TOPIC_1,\n            new Serializer<Object>() {\n                @Override\n                public byte[] serialize(final String topic, final Object data) {\n                    if (data instanceof Long) {\n                        return Serdes.Long().serializer().serialize(topic, (Long) data);\n                    }\n                    return Serdes.Integer().serializer().serialize(topic, (Integer) data);\n                }\n            },\n            new Serializer<Object>() {\n                @Override\n                public byte[] serialize(final String topic, final Object data) {\n                    if (data instanceof String) {\n                        return Serdes.String().serializer().serialize(topic, (String) data);\n                    }\n                    return Serdes.Double().serializer().serialize(topic, (Double) data);\n                }\n            },\n            processor);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","realPath":"streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":455,"status":"M"},{"authorDate":"2018-02-10 07:29:21","commitOrder":5,"curCode":"    public void shouldUseSinkSpecificSerializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addSink(\"sink-1\", SINK_TOPIC_1, Serdes.Long().serializer(), Serdes.String().serializer(), sourceName1);\n        topology.addSink(\"sink-2\", SINK_TOPIC_2, Serdes.Integer().serializer(), Serdes.Double().serializer(), sourceName2);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_2, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","date":"2018-02-10 07:29:21","endLine":537,"groupId":"18311","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseSinkSpecificSerializers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/17/d5e02f4be017196ccbd0915de728e287884c01.src","preCode":"    public void shouldUseSinkSpecificSerializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addSink(\"sink-1\", SINK_TOPIC_1, Serdes.Long().serializer(), Serdes.String().serializer(), sourceName1);\n        topology.addSink(\"sink-2\", SINK_TOPIC_2, Serdes.Integer().serializer(), Serdes.Double().serializer(), sourceName2);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_2, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","realPath":"streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":496,"status":"N"}],"commitId":"16b408898e75b00ddf6b607246833cdbcd56f507","commitMessage":"@@@KAFAK-3522: Add TopologyTestDriver unit tests (#6179)\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2019-05-16 23:16:00","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-10-07 16:01:58","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":6,"curCode":"    public void shouldUseSourceSpecificDeserializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n        final String processor = \"processor\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addProcessor(processor, new MockProcessorSupplier(), sourceName1, sourceName2);\n        topology.addSink(\n            \"sink\",\n            SINK_TOPIC_1,\n            (topic, data) -> {\n                if (data instanceof Long) {\n                    return Serdes.Long().serializer().serialize(topic, (Long) data);\n                }\n                return Serdes.Integer().serializer().serialize(topic, (Integer) data);\n            },\n            (topic, data) -> {\n                if (data instanceof String) {\n                    return Serdes.String().serializer().serialize(topic, (String) data);\n                }\n                return Serdes.Double().serializer().serialize(topic, (Double) data);\n            },\n            processor);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final TestRecord<Long, String> consumerRecord1 = new TestRecord<>(source1Key, source1Value);\n        final TestRecord<Integer, Double> consumerRecord2 = new TestRecord<>(source2Key, source2Value);\n\n        testDriver.pipeRecord(SOURCE_TOPIC_1,\n                consumerRecord1,\n                Serdes.Long().serializer(),\n                Serdes.String().serializer(),\n                null);\n        final TestRecord<Long, String> result1 =\n            testDriver.readRecord(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer());\n        assertThat(result1.getKey(), equalTo(source1Key));\n        assertThat(result1.getValue(), equalTo(source1Value));\n\n        testDriver.pipeRecord(SOURCE_TOPIC_2,\n                consumerRecord2,\n                Serdes.Integer().serializer(),\n                Serdes.Double().serializer(),\n                null);\n        final TestRecord<Integer, Double> result2 =\n            testDriver.readRecord(SINK_TOPIC_1, Serdes.Integer().deserializer(), Serdes.Double().deserializer());\n        assertThat(result2.getKey(), equalTo(source2Key));\n        assertThat(result2.getValue(), equalTo(source2Value));\n    }\n","date":"2019-10-07 16:01:58","endLine":602,"groupId":"19325","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseSourceSpecificDeserializers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/cfbc602bf4737e805c6d84bcb80cb56cd8ddc0.src","preCode":"    public void shouldUseSourceSpecificDeserializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n        final String processor = \"processor\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addProcessor(processor, new MockProcessorSupplier(), sourceName1, sourceName2);\n        topology.addSink(\n            \"sink\",\n            SINK_TOPIC_1,\n            (topic, data) -> {\n                if (data instanceof Long) {\n                    return Serdes.Long().serializer().serialize(topic, (Long) data);\n                }\n                return Serdes.Integer().serializer().serialize(topic, (Integer) data);\n            },\n            (topic, data) -> {\n                if (data instanceof String) {\n                    return Serdes.String().serializer().serialize(topic, (String) data);\n                }\n                return Serdes.Double().serializer().serialize(topic, (Double) data);\n            },\n            processor);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","realPath":"streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":546,"status":"M"},{"authorDate":"2019-10-07 16:01:58","commitOrder":6,"curCode":"    public void shouldUseSinkSpecificSerializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addSink(\"sink-1\", SINK_TOPIC_1, Serdes.Long().serializer(), Serdes.String().serializer(), sourceName1);\n        topology.addSink(\"sink-2\", SINK_TOPIC_2, Serdes.Integer().serializer(), Serdes.Double().serializer(), sourceName2);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final TestRecord<Long, String> consumerRecord1 = new TestRecord<>(source1Key, source1Value);\n        final TestRecord<Integer, Double> consumerRecord2 = new TestRecord<>(source2Key, source2Value);\n\n        testDriver.pipeRecord(SOURCE_TOPIC_1,\n                consumerRecord1,\n                Serdes.Long().serializer(),\n                Serdes.String().serializer(),\n                null);\n        final TestRecord<Long, String> result1 =\n                testDriver.readRecord(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer());\n        assertThat(result1.getKey(), equalTo(source1Key));\n        assertThat(result1.getValue(), equalTo(source1Value));\n\n        testDriver.pipeRecord(SOURCE_TOPIC_2,\n                consumerRecord2,\n                Serdes.Integer().serializer(),\n                Serdes.Double().serializer(),\n                null);\n        final TestRecord<Integer, Double> result2 =\n                testDriver.readRecord(SINK_TOPIC_2, Serdes.Integer().deserializer(), Serdes.Double().deserializer());\n        assertThat(result2.getKey(), equalTo(source2Key));\n        assertThat(result2.getValue(), equalTo(source2Value));\n    }\n","date":"2019-10-07 16:01:58","endLine":645,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseSinkSpecificSerializers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/cfbc602bf4737e805c6d84bcb80cb56cd8ddc0.src","preCode":"    public void shouldUseSinkSpecificSerializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addSink(\"sink-1\", SINK_TOPIC_1, Serdes.Long().serializer(), Serdes.String().serializer(), sourceName1);\n        topology.addSink(\"sink-2\", SINK_TOPIC_2, Serdes.Integer().serializer(), Serdes.Double().serializer(), sourceName2);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final ConsumerRecordFactory<Long, String> source1Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_1,\n            Serdes.Long().serializer(),\n            Serdes.String().serializer());\n        final ConsumerRecordFactory<Integer, Double> source2Factory = new ConsumerRecordFactory<>(\n            SOURCE_TOPIC_2,\n            Serdes.Integer().serializer(),\n            Serdes.Double().serializer());\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final ConsumerRecord<byte[], byte[]> consumerRecord1 = source1Factory.create(source1Key, source1Value);\n        final ConsumerRecord<byte[], byte[]> consumerRecord2 = source2Factory.create(source2Key, source2Value);\n\n        testDriver.pipeInput(consumerRecord1);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer()),\n            source1Key,\n            source1Value);\n\n        testDriver.pipeInput(consumerRecord2);\n        OutputVerifier.compareKeyValue(\n            testDriver.readOutput(SINK_TOPIC_2, Serdes.Integer().deserializer(), Serdes.Double().deserializer()),\n            source2Key,\n            source2Value);\n    }\n","realPath":"streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":605,"status":"M"}],"commitId":"a5a6938c69f4310f7ec519036f0df77d8022326a","commitMessage":"@@@KAFKA-8233: TopologyTestDriver test input and output usability improvements (#7378)\n\nImplements KIP-470\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-07 16:01:58","modifiedFileCount":"47","status":"M","submitter":"Jukka Karvanen"},{"authorTime":"2019-10-08 10:32:40","codes":[{"authorDate":"2019-10-08 10:32:40","commitOrder":7,"curCode":"    public void shouldUseSourceSpecificDeserializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n        final String processor = \"processor\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addProcessor(processor, new MockProcessorSupplier(), sourceName1, sourceName2);\n        topology.addSink(\n            \"sink\",\n            SINK_TOPIC_1,\n            (topic, data) -> {\n                if (data instanceof Long) {\n                    return Serdes.Long().serializer().serialize(topic, (Long) data);\n                }\n                return Serdes.Integer().serializer().serialize(topic, (Integer) data);\n            },\n            (topic, data) -> {\n                if (data instanceof String) {\n                    return Serdes.String().serializer().serialize(topic, (String) data);\n                }\n                return Serdes.Double().serializer().serialize(topic, (Double) data);\n            },\n            processor);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final TestRecord<Long, String> consumerRecord1 = new TestRecord<>(source1Key, source1Value);\n        final TestRecord<Integer, Double> consumerRecord2 = new TestRecord<>(source2Key, source2Value);\n\n        testDriver.pipeRecord(SOURCE_TOPIC_1,\n                consumerRecord1,\n                Serdes.Long().serializer(),\n                Serdes.String().serializer(),\n                Instant.now());\n        final TestRecord<Long, String> result1 =\n            testDriver.readRecord(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer());\n        assertThat(result1.getKey(), equalTo(source1Key));\n        assertThat(result1.getValue(), equalTo(source1Value));\n\n        testDriver.pipeRecord(SOURCE_TOPIC_2,\n                consumerRecord2,\n                Serdes.Integer().serializer(),\n                Serdes.Double().serializer(),\n                Instant.now());\n        final TestRecord<Integer, Double> result2 =\n            testDriver.readRecord(SINK_TOPIC_1, Serdes.Integer().deserializer(), Serdes.Double().deserializer());\n        assertThat(result2.getKey(), equalTo(source2Key));\n        assertThat(result2.getValue(), equalTo(source2Value));\n    }\n","date":"2019-10-08 10:32:40","endLine":610,"groupId":"19325","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseSourceSpecificDeserializers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7e/953920b0cb2f7116d8a08b739fed5542914d47.src","preCode":"    public void shouldUseSourceSpecificDeserializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n        final String processor = \"processor\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addProcessor(processor, new MockProcessorSupplier(), sourceName1, sourceName2);\n        topology.addSink(\n            \"sink\",\n            SINK_TOPIC_1,\n            (topic, data) -> {\n                if (data instanceof Long) {\n                    return Serdes.Long().serializer().serialize(topic, (Long) data);\n                }\n                return Serdes.Integer().serializer().serialize(topic, (Integer) data);\n            },\n            (topic, data) -> {\n                if (data instanceof String) {\n                    return Serdes.String().serializer().serialize(topic, (String) data);\n                }\n                return Serdes.Double().serializer().serialize(topic, (Double) data);\n            },\n            processor);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final TestRecord<Long, String> consumerRecord1 = new TestRecord<>(source1Key, source1Value);\n        final TestRecord<Integer, Double> consumerRecord2 = new TestRecord<>(source2Key, source2Value);\n\n        testDriver.pipeRecord(SOURCE_TOPIC_1,\n                consumerRecord1,\n                Serdes.Long().serializer(),\n                Serdes.String().serializer(),\n                null);\n        final TestRecord<Long, String> result1 =\n            testDriver.readRecord(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer());\n        assertThat(result1.getKey(), equalTo(source1Key));\n        assertThat(result1.getValue(), equalTo(source1Value));\n\n        testDriver.pipeRecord(SOURCE_TOPIC_2,\n                consumerRecord2,\n                Serdes.Integer().serializer(),\n                Serdes.Double().serializer(),\n                null);\n        final TestRecord<Integer, Double> result2 =\n            testDriver.readRecord(SINK_TOPIC_1, Serdes.Integer().deserializer(), Serdes.Double().deserializer());\n        assertThat(result2.getKey(), equalTo(source2Key));\n        assertThat(result2.getValue(), equalTo(source2Value));\n    }\n","realPath":"streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":554,"status":"M"},{"authorDate":"2019-10-08 10:32:40","commitOrder":7,"curCode":"    public void shouldUseSinkSpecificSerializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addSink(\"sink-1\", SINK_TOPIC_1, Serdes.Long().serializer(), Serdes.String().serializer(), sourceName1);\n        topology.addSink(\"sink-2\", SINK_TOPIC_2, Serdes.Integer().serializer(), Serdes.Double().serializer(), sourceName2);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final TestRecord<Long, String> consumerRecord1 = new TestRecord<>(source1Key, source1Value);\n        final TestRecord<Integer, Double> consumerRecord2 = new TestRecord<>(source2Key, source2Value);\n\n        testDriver.pipeRecord(SOURCE_TOPIC_1,\n                consumerRecord1,\n                Serdes.Long().serializer(),\n                Serdes.String().serializer(),\n                Instant.now());\n        final TestRecord<Long, String> result1 =\n                testDriver.readRecord(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer());\n        assertThat(result1.getKey(), equalTo(source1Key));\n        assertThat(result1.getValue(), equalTo(source1Value));\n\n        testDriver.pipeRecord(SOURCE_TOPIC_2,\n                consumerRecord2,\n                Serdes.Integer().serializer(),\n                Serdes.Double().serializer(),\n                Instant.now());\n        final TestRecord<Integer, Double> result2 =\n                testDriver.readRecord(SINK_TOPIC_2, Serdes.Integer().deserializer(), Serdes.Double().deserializer());\n        assertThat(result2.getKey(), equalTo(source2Key));\n        assertThat(result2.getValue(), equalTo(source2Value));\n    }\n","date":"2019-10-08 10:32:40","endLine":653,"groupId":"2734","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseSinkSpecificSerializers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7e/953920b0cb2f7116d8a08b739fed5542914d47.src","preCode":"    public void shouldUseSinkSpecificSerializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addSink(\"sink-1\", SINK_TOPIC_1, Serdes.Long().serializer(), Serdes.String().serializer(), sourceName1);\n        topology.addSink(\"sink-2\", SINK_TOPIC_2, Serdes.Integer().serializer(), Serdes.Double().serializer(), sourceName2);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final TestRecord<Long, String> consumerRecord1 = new TestRecord<>(source1Key, source1Value);\n        final TestRecord<Integer, Double> consumerRecord2 = new TestRecord<>(source2Key, source2Value);\n\n        testDriver.pipeRecord(SOURCE_TOPIC_1,\n                consumerRecord1,\n                Serdes.Long().serializer(),\n                Serdes.String().serializer(),\n                null);\n        final TestRecord<Long, String> result1 =\n                testDriver.readRecord(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer());\n        assertThat(result1.getKey(), equalTo(source1Key));\n        assertThat(result1.getValue(), equalTo(source1Value));\n\n        testDriver.pipeRecord(SOURCE_TOPIC_2,\n                consumerRecord2,\n                Serdes.Integer().serializer(),\n                Serdes.Double().serializer(),\n                null);\n        final TestRecord<Integer, Double> result2 =\n                testDriver.readRecord(SINK_TOPIC_2, Serdes.Integer().deserializer(), Serdes.Double().deserializer());\n        assertThat(result2.getKey(), equalTo(source2Key));\n        assertThat(result2.getValue(), equalTo(source2Value));\n    }\n","realPath":"streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":613,"status":"M"}],"commitId":"7e3f8895d69da13df574701e6a3fd9d74d092053","commitMessage":"@@@MINOR: Modified Exception handling for KIP-470 (#7461)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-08 10:32:40","modifiedFileCount":"4","status":"M","submitter":"Jukka Karvanen"},{"authorTime":"2020-12-05 02:51:12","codes":[{"authorDate":"2020-12-05 02:51:12","commitOrder":8,"curCode":"    public void shouldUseSourceSpecificDeserializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n        final String processor = \"processor\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addProcessor(processor, new MockProcessorSupplier(), sourceName1, sourceName2);\n        topology.addSink(\n            \"sink\",\n            SINK_TOPIC_1,\n            (topic, data) -> {\n                if (data instanceof Long) {\n                    return Serdes.Long().serializer().serialize(topic, (Long) data);\n                }\n                return Serdes.Integer().serializer().serialize(topic, (Integer) data);\n            },\n            (topic, data) -> {\n                if (data instanceof String) {\n                    return Serdes.String().serializer().serialize(topic, (String) data);\n                }\n                return Serdes.Double().serializer().serialize(topic, (Double) data);\n            },\n            processor);\n\n        testDriver = new TopologyTestDriver(topology);\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final TestRecord<Long, String> consumerRecord1 = new TestRecord<>(source1Key, source1Value);\n        final TestRecord<Integer, Double> consumerRecord2 = new TestRecord<>(source2Key, source2Value);\n\n        testDriver.pipeRecord(SOURCE_TOPIC_1,\n                consumerRecord1,\n                Serdes.Long().serializer(),\n                Serdes.String().serializer(),\n                Instant.now());\n        final TestRecord<Long, String> result1 =\n            testDriver.readRecord(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer());\n        assertThat(result1.getKey(), equalTo(source1Key));\n        assertThat(result1.getValue(), equalTo(source1Value));\n\n        testDriver.pipeRecord(SOURCE_TOPIC_2,\n                consumerRecord2,\n                Serdes.Integer().serializer(),\n                Serdes.Double().serializer(),\n                Instant.now());\n        final TestRecord<Integer, Double> result2 =\n            testDriver.readRecord(SINK_TOPIC_1, Serdes.Integer().deserializer(), Serdes.Double().deserializer());\n        assertThat(result2.getKey(), equalTo(source2Key));\n        assertThat(result2.getValue(), equalTo(source2Value));\n    }\n","date":"2020-12-05 02:51:12","endLine":771,"groupId":"10546","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUseSourceSpecificDeserializers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6c/db65840462cc14ba727ac945b68fa01b38743c.src","preCode":"    public void shouldUseSourceSpecificDeserializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n        final String processor = \"processor\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addProcessor(processor, new MockProcessorSupplier(), sourceName1, sourceName2);\n        topology.addSink(\n            \"sink\",\n            SINK_TOPIC_1,\n            (topic, data) -> {\n                if (data instanceof Long) {\n                    return Serdes.Long().serializer().serialize(topic, (Long) data);\n                }\n                return Serdes.Integer().serializer().serialize(topic, (Integer) data);\n            },\n            (topic, data) -> {\n                if (data instanceof String) {\n                    return Serdes.String().serializer().serialize(topic, (String) data);\n                }\n                return Serdes.Double().serializer().serialize(topic, (Double) data);\n            },\n            processor);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final TestRecord<Long, String> consumerRecord1 = new TestRecord<>(source1Key, source1Value);\n        final TestRecord<Integer, Double> consumerRecord2 = new TestRecord<>(source2Key, source2Value);\n\n        testDriver.pipeRecord(SOURCE_TOPIC_1,\n                consumerRecord1,\n                Serdes.Long().serializer(),\n                Serdes.String().serializer(),\n                Instant.now());\n        final TestRecord<Long, String> result1 =\n            testDriver.readRecord(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer());\n        assertThat(result1.getKey(), equalTo(source1Key));\n        assertThat(result1.getValue(), equalTo(source1Value));\n\n        testDriver.pipeRecord(SOURCE_TOPIC_2,\n                consumerRecord2,\n                Serdes.Integer().serializer(),\n                Serdes.Double().serializer(),\n                Instant.now());\n        final TestRecord<Integer, Double> result2 =\n            testDriver.readRecord(SINK_TOPIC_1, Serdes.Integer().deserializer(), Serdes.Double().deserializer());\n        assertThat(result2.getKey(), equalTo(source2Key));\n        assertThat(result2.getValue(), equalTo(source2Value));\n    }\n","realPath":"streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":715,"status":"M"},{"authorDate":"2020-12-05 02:51:12","commitOrder":8,"curCode":"    public void shouldUseSinkSpecificSerializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addSink(\"sink-1\", SINK_TOPIC_1, Serdes.Long().serializer(), Serdes.String().serializer(), sourceName1);\n        topology.addSink(\"sink-2\", SINK_TOPIC_2, Serdes.Integer().serializer(), Serdes.Double().serializer(), sourceName2);\n\n        testDriver = new TopologyTestDriver(topology);\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final TestRecord<Long, String> consumerRecord1 = new TestRecord<>(source1Key, source1Value);\n        final TestRecord<Integer, Double> consumerRecord2 = new TestRecord<>(source2Key, source2Value);\n\n        testDriver.pipeRecord(SOURCE_TOPIC_1,\n                consumerRecord1,\n                Serdes.Long().serializer(),\n                Serdes.String().serializer(),\n                Instant.now());\n        final TestRecord<Long, String> result1 =\n                testDriver.readRecord(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer());\n        assertThat(result1.getKey(), equalTo(source1Key));\n        assertThat(result1.getValue(), equalTo(source1Value));\n\n        testDriver.pipeRecord(SOURCE_TOPIC_2,\n                consumerRecord2,\n                Serdes.Integer().serializer(),\n                Serdes.Double().serializer(),\n                Instant.now());\n        final TestRecord<Integer, Double> result2 =\n                testDriver.readRecord(SINK_TOPIC_2, Serdes.Integer().deserializer(), Serdes.Double().deserializer());\n        assertThat(result2.getKey(), equalTo(source2Key));\n        assertThat(result2.getValue(), equalTo(source2Value));\n    }\n","date":"2020-12-05 02:51:12","endLine":864,"groupId":"10546","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldUseSinkSpecificSerializers","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6c/db65840462cc14ba727ac945b68fa01b38743c.src","preCode":"    public void shouldUseSinkSpecificSerializers() {\n        final Topology topology = new Topology();\n\n        final String sourceName1 = \"source-1\";\n        final String sourceName2 = \"source-2\";\n\n        topology.addSource(sourceName1, Serdes.Long().deserializer(), Serdes.String().deserializer(), SOURCE_TOPIC_1);\n        topology.addSource(sourceName2, Serdes.Integer().deserializer(), Serdes.Double().deserializer(), SOURCE_TOPIC_2);\n        topology.addSink(\"sink-1\", SINK_TOPIC_1, Serdes.Long().serializer(), Serdes.String().serializer(), sourceName1);\n        topology.addSink(\"sink-2\", SINK_TOPIC_2, Serdes.Integer().serializer(), Serdes.Double().serializer(), sourceName2);\n\n        testDriver = new TopologyTestDriver(topology, config);\n\n        final Long source1Key = 42L;\n        final String source1Value = \"anyString\";\n        final Integer source2Key = 73;\n        final Double source2Value = 3.14;\n\n        final TestRecord<Long, String> consumerRecord1 = new TestRecord<>(source1Key, source1Value);\n        final TestRecord<Integer, Double> consumerRecord2 = new TestRecord<>(source2Key, source2Value);\n\n        testDriver.pipeRecord(SOURCE_TOPIC_1,\n                consumerRecord1,\n                Serdes.Long().serializer(),\n                Serdes.String().serializer(),\n                Instant.now());\n        final TestRecord<Long, String> result1 =\n                testDriver.readRecord(SINK_TOPIC_1, Serdes.Long().deserializer(), Serdes.String().deserializer());\n        assertThat(result1.getKey(), equalTo(source1Key));\n        assertThat(result1.getValue(), equalTo(source1Value));\n\n        testDriver.pipeRecord(SOURCE_TOPIC_2,\n                consumerRecord2,\n                Serdes.Integer().serializer(),\n                Serdes.Double().serializer(),\n                Instant.now());\n        final TestRecord<Integer, Double> result2 =\n                testDriver.readRecord(SINK_TOPIC_2, Serdes.Integer().deserializer(), Serdes.Double().deserializer());\n        assertThat(result2.getKey(), equalTo(source2Key));\n        assertThat(result2.getValue(), equalTo(source2Value));\n    }\n","realPath":"streams/test-utils/src/test/java/org/apache/kafka/streams/TopologyTestDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":824,"status":"M"}],"commitId":"4e9c7fc8a5db6e59e43a67586867c3b1c9fbe567","commitMessage":"@@@KAFKA-10629: TopologyTestDriver should not require a Properties argument (#9660)\n\nImplements KIP-680.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-12-05 02:51:12","modifiedFileCount":"8","status":"M","submitter":"Rohit Deshpande"}]
