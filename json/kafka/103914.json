[{"authorTime":"2017-08-18 06:04:03","codes":[{"authorDate":"2017-08-18 06:04:03","commitOrder":1,"curCode":"    public void testDisconnectWithUnsentRequests() {\n        RequestFuture<ClientResponse> future = consumerClient.send(node, heartbeat());\n        assertTrue(consumerClient.hasPendingRequests(node));\n        assertFalse(client.hasInFlightRequests(node.idString()));\n        consumerClient.disconnect(node);\n        assertTrue(future.failed());\n        assertTrue(future.exception() instanceof DisconnectException);\n    }\n","date":"2017-08-18 06:04:03","endLine":92,"groupId":"10420","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisconnectWithUnsentRequests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/71dd5934b21aa50c8d7f03de355dc089683878.src","preCode":"    public void testDisconnectWithUnsentRequests() {\n        RequestFuture<ClientResponse> future = consumerClient.send(node, heartbeat());\n        assertTrue(consumerClient.hasPendingRequests(node));\n        assertFalse(client.hasInFlightRequests(node.idString()));\n        consumerClient.disconnect(node);\n        assertTrue(future.failed());\n        assertTrue(future.exception() instanceof DisconnectException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"B"},{"authorDate":"2017-08-18 06:04:03","commitOrder":1,"curCode":"    public void testDisconnectWithInFlightRequests() {\n        RequestFuture<ClientResponse> future = consumerClient.send(node, heartbeat());\n        consumerClient.pollNoWakeup();\n        assertTrue(consumerClient.hasPendingRequests(node));\n        assertTrue(client.hasInFlightRequests(node.idString()));\n        consumerClient.disconnect(node);\n        assertTrue(future.failed());\n        assertTrue(future.exception() instanceof DisconnectException);\n    }\n","date":"2017-08-18 06:04:03","endLine":103,"groupId":"18244","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisconnectWithInFlightRequests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/71dd5934b21aa50c8d7f03de355dc089683878.src","preCode":"    public void testDisconnectWithInFlightRequests() {\n        RequestFuture<ClientResponse> future = consumerClient.send(node, heartbeat());\n        consumerClient.pollNoWakeup();\n        assertTrue(consumerClient.hasPendingRequests(node));\n        assertTrue(client.hasInFlightRequests(node.idString()));\n        consumerClient.disconnect(node);\n        assertTrue(future.failed());\n        assertTrue(future.exception() instanceof DisconnectException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"}],"commitId":"334a30bcfffc3759aeded08f2089cea4ed6e9937","commitMessage":"@@@KAFKA-5730; Consumer should invoke async commit callback before sync commit returns\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <me@ewencp.org>\n\nCloses #3666 from hachikuji/KAFKA-5730\n","date":"2017-08-18 06:04:03","modifiedFileCount":"9","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2018-03-02 03:04:11","codes":[{"authorDate":"2018-03-02 03:04:11","commitOrder":2,"curCode":"    public void testDisconnectWithUnsentRequests() {\n        RequestFuture<ClientResponse> future = consumerClient.send(node, heartbeat());\n        assertTrue(consumerClient.hasPendingRequests(node));\n        assertFalse(client.hasInFlightRequests(node.idString()));\n        consumerClient.disconnectAsync(node);\n        consumerClient.pollNoWakeup();\n        assertTrue(future.failed());\n        assertTrue(future.exception() instanceof DisconnectException);\n    }\n","date":"2018-03-02 03:04:11","endLine":114,"groupId":"103914","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisconnectWithUnsentRequests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d0/888fa56554b70d5da72a7317c3d76d35d54220.src","preCode":"    public void testDisconnectWithUnsentRequests() {\n        RequestFuture<ClientResponse> future = consumerClient.send(node, heartbeat());\n        assertTrue(consumerClient.hasPendingRequests(node));\n        assertFalse(client.hasInFlightRequests(node.idString()));\n        consumerClient.disconnect(node);\n        assertTrue(future.failed());\n        assertTrue(future.exception() instanceof DisconnectException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"},{"authorDate":"2018-03-02 03:04:11","commitOrder":2,"curCode":"    public void testDisconnectWithInFlightRequests() {\n        RequestFuture<ClientResponse> future = consumerClient.send(node, heartbeat());\n        consumerClient.pollNoWakeup();\n        assertTrue(consumerClient.hasPendingRequests(node));\n        assertTrue(client.hasInFlightRequests(node.idString()));\n        consumerClient.disconnectAsync(node);\n        consumerClient.pollNoWakeup();\n        assertTrue(future.failed());\n        assertTrue(future.exception() instanceof DisconnectException);\n    }\n","date":"2018-03-02 03:04:11","endLine":126,"groupId":"103914","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisconnectWithInFlightRequests","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d0/888fa56554b70d5da72a7317c3d76d35d54220.src","preCode":"    public void testDisconnectWithInFlightRequests() {\n        RequestFuture<ClientResponse> future = consumerClient.send(node, heartbeat());\n        consumerClient.pollNoWakeup();\n        assertTrue(consumerClient.hasPendingRequests(node));\n        assertTrue(client.hasInFlightRequests(node.idString()));\n        consumerClient.disconnect(node);\n        assertTrue(future.failed());\n        assertTrue(future.exception() instanceof DisconnectException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"6cfcc9d553622e7d511a849935e9b504f947399d","commitMessage":"@@@KAFKA-6593; Fix livelock with consumer heartbeat thread in commitSync (#4625)\n\nContention for the lock in ConsumerNetworkClient can lead to a livelock situation in which an active commitSync is unable to make progress because its completion is blocked in the heartbeat thread. The fix is twofold:\n\n1) We change ConsumerNetworkClient to use a fair lock to reduce the chance of each thread getting starved.\n2) We eliminate the dependence on the lock in ConsumerNetworkClient for callback completion so that callbacks will not be blocked by an active poll().\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2018-03-02 03:04:11","modifiedFileCount":"6","status":"M","submitter":"Jason Gustafson"}]
