[{"authorTime":"2018-02-06 02:09:17","codes":[{"authorDate":"2018-02-06 02:09:17","commitOrder":1,"curCode":"    private FetchRequest createFetchRequest(int version, FetchMetadata metadata, List<TopicPartition> toForget) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, 0L, 1000000));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, 0L, 1000000));\n        return FetchRequest.Builder.forConsumer(100, 100000, fetchData).\n            metadata(metadata).setMaxBytes(1000).toForget(toForget).build((short) version);\n    }\n","date":"2018-02-06 02:09:17","endLine":626,"groupId":"7091","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createFetchRequest","params":"(intversion@FetchMetadatametadata@List<TopicPartition>toForget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bd/bd10626856abf617691a19cee69df37ccc3ad0.src","preCode":"    private FetchRequest createFetchRequest(int version, FetchMetadata metadata, List<TopicPartition> toForget) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, 0L, 1000000));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, 0L, 1000000));\n        return FetchRequest.Builder.forConsumer(100, 100000, fetchData).\n            metadata(metadata).setMaxBytes(1000).toForget(toForget).build((short) version);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":620,"status":"B"},{"authorDate":"2018-02-06 02:09:17","commitOrder":1,"curCode":"    private FetchRequest createFetchRequest(int version, IsolationLevel isolationLevel) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, 0L, 1000000));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, 0L, 1000000));\n        return FetchRequest.Builder.forConsumer(100, 100000, fetchData).\n            isolationLevel(isolationLevel).setMaxBytes(1000).build((short) version);\n    }\n","date":"2018-02-06 02:09:17","endLine":634,"groupId":"7091","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createFetchRequest","params":"(intversion@IsolationLevelisolationLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bd/bd10626856abf617691a19cee69df37ccc3ad0.src","preCode":"    private FetchRequest createFetchRequest(int version, IsolationLevel isolationLevel) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, 0L, 1000000));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, 0L, 1000000));\n        return FetchRequest.Builder.forConsumer(100, 100000, fetchData).\n            isolationLevel(isolationLevel).setMaxBytes(1000).build((short) version);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":628,"status":"B"}],"commitId":"7fe1c2b3d3a78ea3ffb9e269563653626861fbd2","commitMessage":"@@@KAFKA-6254; Incremental fetch requests\n\nAuthor: Colin P. Mccabe <cmccabe@confluent.io>\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Ismael Juma <ismael@juma.me.uk>.  Jun Rao <junrao@gmail.com>\n\nCloses #4418 from cmccabe/KAFKA-6254\n","date":"2018-02-06 02:09:17","modifiedFileCount":"8","status":"B","submitter":"Colin P. Mccabe"},{"authorTime":"2018-09-09 15:14:57","codes":[{"authorDate":"2018-09-09 15:14:57","commitOrder":2,"curCode":"    private FetchRequest createFetchRequest(int version, FetchMetadata metadata, List<TopicPartition> toForget) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, 0L,\n                1000000, Optional.of(15)));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, 0L,\n                1000000, Optional.of(25)));\n        return FetchRequest.Builder.forConsumer(100, 100000, fetchData).\n            metadata(metadata).setMaxBytes(1000).toForget(toForget).build((short) version);\n    }\n","date":"2018-09-09 15:17:25","endLine":637,"groupId":"12156","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createFetchRequest","params":"(intversion@FetchMetadatametadata@List<TopicPartition>toForget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/05/b9926d6cab95270833a2eed1fc77092a0e90a9.src","preCode":"    private FetchRequest createFetchRequest(int version, FetchMetadata metadata, List<TopicPartition> toForget) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, 0L, 1000000));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, 0L, 1000000));\n        return FetchRequest.Builder.forConsumer(100, 100000, fetchData).\n            metadata(metadata).setMaxBytes(1000).toForget(toForget).build((short) version);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":629,"status":"M"},{"authorDate":"2018-09-09 15:14:57","commitOrder":2,"curCode":"    private FetchRequest createFetchRequest(int version, IsolationLevel isolationLevel) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, 0L,\n                1000000, Optional.of(15)));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, 0L,\n                1000000, Optional.of(25)));\n        return FetchRequest.Builder.forConsumer(100, 100000, fetchData).\n            isolationLevel(isolationLevel).setMaxBytes(1000).build((short) version);\n    }\n","date":"2018-09-09 15:17:25","endLine":647,"groupId":"12156","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createFetchRequest","params":"(intversion@IsolationLevelisolationLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/05/b9926d6cab95270833a2eed1fc77092a0e90a9.src","preCode":"    private FetchRequest createFetchRequest(int version, IsolationLevel isolationLevel) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, 0L, 1000000));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, 0L, 1000000));\n        return FetchRequest.Builder.forConsumer(100, 100000, fetchData).\n            isolationLevel(isolationLevel).setMaxBytes(1000).build((short) version);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":639,"status":"M"}],"commitId":"05ba5aa00847b18b74369a821e972bbba9f155eb","commitMessage":"@@@KAFKA-7333; Protocol changes for KIP-320\n\nThis patch contains the protocol updates needed for KIP-320 as well as some of the basic consumer APIs (e.g. `OffsetAndMetadata` and `ConsumerRecord`). The inter-broker format version has not been changed and the brokers will continue to use the current API versions.\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Dong Lin <lindong28@gmail.com>\n\nCloses #5564 from hachikuji/KAFKA-7333\n","date":"2018-09-09 15:17:25","modifiedFileCount":"83","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2020-07-31 01:29:39","codes":[{"authorDate":"2020-07-31 01:29:39","commitOrder":3,"curCode":"    private FetchRequest createFetchRequest(int version, FetchMetadata metadata, List<TopicPartition> toForget) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, -1L,\n                1000000, Optional.empty()));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, -1L,\n                1000000, Optional.empty()));\n        return FetchRequest.Builder.forConsumer(100, 100000, fetchData).\n            metadata(metadata).setMaxBytes(1000).toForget(toForget).build((short) version);\n    }\n","date":"2020-07-31 01:29:39","endLine":992,"groupId":"3372","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createFetchRequest","params":"(intversion@FetchMetadatametadata@List<TopicPartition>toForget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4a/f683d7f64d298838330150fac43eaee300e241.src","preCode":"    private FetchRequest createFetchRequest(int version, FetchMetadata metadata, List<TopicPartition> toForget) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, 0L,\n                1000000, Optional.of(15)));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, 0L,\n                1000000, Optional.of(25)));\n        return FetchRequest.Builder.forConsumer(100, 100000, fetchData).\n            metadata(metadata).setMaxBytes(1000).toForget(toForget).build((short) version);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":984,"status":"M"},{"authorDate":"2020-07-31 01:29:39","commitOrder":3,"curCode":"    private FetchRequest createFetchRequest(int version, IsolationLevel isolationLevel) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, -1L,\n                1000000, Optional.empty()));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, -1L,\n                1000000, Optional.empty()));\n        return FetchRequest.Builder.forConsumer(100, 100000, fetchData).\n            isolationLevel(isolationLevel).setMaxBytes(1000).build((short) version);\n    }\n","date":"2020-07-31 01:29:39","endLine":1002,"groupId":"3372","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createFetchRequest","params":"(intversion@IsolationLevelisolationLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4a/f683d7f64d298838330150fac43eaee300e241.src","preCode":"    private FetchRequest createFetchRequest(int version, IsolationLevel isolationLevel) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, 0L,\n                1000000, Optional.of(15)));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, 0L,\n                1000000, Optional.of(25)));\n        return FetchRequest.Builder.forConsumer(100, 100000, fetchData).\n            isolationLevel(isolationLevel).setMaxBytes(1000).build((short) version);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":994,"status":"M"}],"commitId":"4cd2396db31418c90005c998d9107ad40df055b2","commitMessage":"@@@KAFKA-9629 Use generated protocol for Fetch API (#9008)\n\nRefactored FetchRequest and FetchResponse to use the generated message classes for serialization and deserialization. This allows us to bypass unnecessary Struct conversion in a few places. A new \"records\" type was added to the message protocol which uses BaseRecords as the field type. When sending.  we can set a FileRecords instance on the message.  and when receiving the message class will use MemoryRecords. \n\nAlso included a few JMH benchmarks which indicate a small performance improvement for requests with high partition counts or small record sizes.\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Boyang Chen <boyang@confluent.io>.  David Jacot <djacot@confluent.io>.  Lucas Bradstreet <lucas@confluent.io>.  Ismael Juma <ismael@juma.me.uk>.  Colin P. McCabe <cmccabe@apache.org>","date":"2020-07-31 01:29:39","modifiedFileCount":"17","status":"M","submitter":"David Arthur"},{"authorTime":"2021-07-08 07:02:37","codes":[{"authorDate":"2021-07-08 07:02:37","commitOrder":4,"curCode":"    private FetchRequest createFetchRequest(int version, FetchMetadata metadata, List<TopicPartition> toForget) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, -1L,\n                1000000, Optional.empty()));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, -1L,\n                1000000, Optional.empty()));\n        Map<String, Uuid> topicIds = new HashMap<>();\n        topicIds.put(\"test1\", Uuid.randomUuid());\n        topicIds.put(\"test2\", Uuid.randomUuid());\n        return FetchRequest.Builder.forConsumer((short) version, 100, 100000, fetchData, topicIds).\n            metadata(metadata).setMaxBytes(1000).toForget(toForget).build((short) version);\n    }\n","date":"2021-07-08 07:02:37","endLine":1296,"groupId":"113164","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createFetchRequest","params":"(intversion@FetchMetadatametadata@List<TopicPartition>toForget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/3745ab72622fd5c26c9e9a5fec2a9db8c58fba.src","preCode":"    private FetchRequest createFetchRequest(int version, FetchMetadata metadata, List<TopicPartition> toForget) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, -1L,\n                1000000, Optional.empty()));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, -1L,\n                1000000, Optional.empty()));\n        return FetchRequest.Builder.forConsumer(100, 100000, fetchData).\n            metadata(metadata).setMaxBytes(1000).toForget(toForget).build((short) version);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1285,"status":"M"},{"authorDate":"2021-07-08 07:02:37","commitOrder":4,"curCode":"    private FetchRequest createFetchRequest(int version, IsolationLevel isolationLevel) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, -1L,\n                1000000, Optional.empty()));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, -1L,\n                1000000, Optional.empty()));\n        Map<String, Uuid> topicIds = new HashMap<>();\n        topicIds.put(\"test1\", Uuid.randomUuid());\n        topicIds.put(\"test2\", Uuid.randomUuid());\n        return FetchRequest.Builder.forConsumer((short) version, 100, 100000, fetchData, topicIds).\n            isolationLevel(isolationLevel).setMaxBytes(1000).build((short) version);\n    }\n","date":"2021-07-08 07:02:37","endLine":1309,"groupId":"113164","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createFetchRequest","params":"(intversion@IsolationLevelisolationLevel)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/3745ab72622fd5c26c9e9a5fec2a9db8c58fba.src","preCode":"    private FetchRequest createFetchRequest(int version, IsolationLevel isolationLevel) {\n        LinkedHashMap<TopicPartition, FetchRequest.PartitionData> fetchData = new LinkedHashMap<>();\n        fetchData.put(new TopicPartition(\"test1\", 0), new FetchRequest.PartitionData(100, -1L,\n                1000000, Optional.empty()));\n        fetchData.put(new TopicPartition(\"test2\", 0), new FetchRequest.PartitionData(200, -1L,\n                1000000, Optional.empty()));\n        return FetchRequest.Builder.forConsumer(100, 100000, fetchData).\n            isolationLevel(isolationLevel).setMaxBytes(1000).build((short) version);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/requests/RequestResponseTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1298,"status":"M"}],"commitId":"2b8aff58b575c199ee8372e5689420c9d77357a5","commitMessage":"@@@KAFKA-10580: Add topic ID support to Fetch request (#9944)\n\nUpdated FetchRequest and FetchResponse to use topic IDs rather than topic names.\nSome of the complicated code is found in FetchSession and FetchSessionHandler.\nWe need to be able to store topic IDs and maintain a cache on the broker for IDs that may not have been resolved. On incremental fetch requests.  we will try to resolve them or remove them if in toForget.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>.  Chia-Ping Tsai <chia7712@gmail.com>.  Jun Rao <junrao@gmail.com>","date":"2021-07-08 07:02:37","modifiedFileCount":"23","status":"M","submitter":"Justine Olshan"}]
