[{"authorTime":"2020-05-14 21:32:08","codes":[{"authorDate":"2020-05-14 21:32:08","commitOrder":1,"curCode":"    public void testIntersectionOfMany() {\n        final Set<String> oneSet = mkSet(\"a\", \"b\", \"c\");\n        final Set<String> twoSet = mkSet(\"c\", \"d\", \"e\");\n        final Set<String> threeSet = mkSet(\"b\", \"c\", \"d\");\n        final Set<String> union = intersection(TreeSet::new, oneSet, twoSet, threeSet);\n\n        assertThat(union, is(mkSet(\"c\")));\n        assertThat(union.getClass(), equalTo(TreeSet.class));\n    }\n","date":"2020-05-14 21:32:08","endLine":661,"groupId":"14966","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntersectionOfMany","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/23/814e77ee064e57826bce996fcf581f4386036e.src","preCode":"    public void testIntersectionOfMany() {\n        final Set<String> oneSet = mkSet(\"a\", \"b\", \"c\");\n        final Set<String> twoSet = mkSet(\"c\", \"d\", \"e\");\n        final Set<String> threeSet = mkSet(\"b\", \"c\", \"d\");\n        final Set<String> union = intersection(TreeSet::new, oneSet, twoSet, threeSet);\n\n        assertThat(union, is(mkSet(\"c\")));\n        assertThat(union.getClass(), equalTo(TreeSet.class));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"B"},{"authorDate":"2020-05-14 21:32:08","commitOrder":1,"curCode":"    public void testDisjointIntersectionOfMany() {\n        final Set<String> oneSet = mkSet(\"a\", \"b\", \"c\");\n        final Set<String> twoSet = mkSet(\"c\", \"d\", \"e\");\n        final Set<String> threeSet = mkSet(\"b\", \"c\", \"d\");\n        final Set<String> fourSet = mkSet(\"x\", \"y\", \"z\");\n        final Set<String> union = intersection(TreeSet::new, oneSet, twoSet, threeSet, fourSet);\n\n        assertThat(union, is(emptySet()));\n        assertThat(union.getClass(), equalTo(TreeSet.class));\n    }\n","date":"2020-05-14 21:32:08","endLine":673,"groupId":"14966","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisjointIntersectionOfMany","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/23/814e77ee064e57826bce996fcf581f4386036e.src","preCode":"    public void testDisjointIntersectionOfMany() {\n        final Set<String> oneSet = mkSet(\"a\", \"b\", \"c\");\n        final Set<String> twoSet = mkSet(\"c\", \"d\", \"e\");\n        final Set<String> threeSet = mkSet(\"b\", \"c\", \"d\");\n        final Set<String> fourSet = mkSet(\"x\", \"y\", \"z\");\n        final Set<String> union = intersection(TreeSet::new, oneSet, twoSet, threeSet, fourSet);\n\n        assertThat(union, is(emptySet()));\n        assertThat(union.getClass(), equalTo(TreeSet.class));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":664,"status":"B"}],"commitId":"d62f6ebdfe38adf894187e76546eedf13ee98432","commitMessage":"@@@KAFKA-6145: KIP-441: Improve assignment balance (#8588)\n\nValidate that the assignment is always balanced wrt:\n* active assignment balance\n* stateful assignment balance\n* task-parallel balance\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2020-05-14 21:32:08","modifiedFileCount":"15","status":"B","submitter":"John Roesler"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2021-01-14 08:17:45","commitOrder":2,"curCode":"    public void testIntersectionOfMany() {\n        final Set<String> oneSet = mkSet(\"a\", \"b\", \"c\");\n        final Set<String> twoSet = mkSet(\"c\", \"d\", \"e\");\n        final Set<String> threeSet = mkSet(\"b\", \"c\", \"d\");\n        final Set<String> intersection = intersection(TreeSet::new, oneSet, twoSet, threeSet);\n\n        assertEquals(mkSet(\"c\"), intersection);\n        assertEquals(TreeSet.class, intersection.getClass());\n    }\n","date":"2021-01-14 08:17:45","endLine":730,"groupId":"103436","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testIntersectionOfMany","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b2/6988b7a1e1a5e8cb24a48504b0e580cc870b4d.src","preCode":"    public void testIntersectionOfMany() {\n        final Set<String> oneSet = mkSet(\"a\", \"b\", \"c\");\n        final Set<String> twoSet = mkSet(\"c\", \"d\", \"e\");\n        final Set<String> threeSet = mkSet(\"b\", \"c\", \"d\");\n        final Set<String> union = intersection(TreeSet::new, oneSet, twoSet, threeSet);\n\n        assertThat(union, is(mkSet(\"c\")));\n        assertThat(union.getClass(), equalTo(TreeSet.class));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":722,"status":"M"},{"authorDate":"2021-01-14 08:17:45","commitOrder":2,"curCode":"    public void testDisjointIntersectionOfMany() {\n        final Set<String> oneSet = mkSet(\"a\", \"b\", \"c\");\n        final Set<String> twoSet = mkSet(\"c\", \"d\", \"e\");\n        final Set<String> threeSet = mkSet(\"b\", \"c\", \"d\");\n        final Set<String> fourSet = mkSet(\"x\", \"y\", \"z\");\n        final Set<String> intersection = intersection(TreeSet::new, oneSet, twoSet, threeSet, fourSet);\n\n        assertEquals(emptySet(), intersection);\n        assertEquals(TreeSet.class, intersection.getClass());\n    }\n","date":"2021-01-14 08:17:45","endLine":742,"groupId":"103436","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDisjointIntersectionOfMany","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b2/6988b7a1e1a5e8cb24a48504b0e580cc870b4d.src","preCode":"    public void testDisjointIntersectionOfMany() {\n        final Set<String> oneSet = mkSet(\"a\", \"b\", \"c\");\n        final Set<String> twoSet = mkSet(\"c\", \"d\", \"e\");\n        final Set<String> threeSet = mkSet(\"b\", \"c\", \"d\");\n        final Set<String> fourSet = mkSet(\"x\", \"y\", \"z\");\n        final Set<String> union = intersection(TreeSet::new, oneSet, twoSet, threeSet, fourSet);\n\n        assertThat(union, is(emptySet()));\n        assertThat(union.getClass(), equalTo(TreeSet.class));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":733,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"}]
