[{"authorTime":"2020-01-25 05:55:50","codes":[{"authorDate":"2020-01-25 05:55:50","commitOrder":1,"curCode":"    public void shouldGetNewThreadLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n        setupGetNewSensorTest(metrics, THREAD_ID, recordingLevel);\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n\n        final Sensor actualSensor = streamsMetrics.threadLevelSensor(\n            THREAD_ID,\n            sensorName1,\n            recordingLevel\n        );\n\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n","date":"2020-01-25 05:55:50","endLine":232,"groupId":"377","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetNewThreadLevelSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/75/057644d81e55bdf882a9481333361b3e384a72.src","preCode":"    public void shouldGetNewThreadLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n        setupGetNewSensorTest(metrics, THREAD_ID, recordingLevel);\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n\n        final Sensor actualSensor = streamsMetrics.threadLevelSensor(\n            THREAD_ID,\n            sensorName1,\n            recordingLevel\n        );\n\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":218,"status":"B"},{"authorDate":"2020-01-25 05:55:50","commitOrder":1,"curCode":"    public void shouldGetExistingCacheLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n        final String processorCacheName = \"processorNodeName\";\n        setupGetExistingSensorTest(\n            metrics, THREAD_ID + \".task.\" + TASK_ID + SENSOR_PREFIX_DELIMITER\n            + \"cache\" + SENSOR_PREFIX_DELIMITER + processorCacheName\n        );\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n\n        final Sensor actualSensor = streamsMetrics.cacheLevelSensor(\n            THREAD_ID, TASK_ID,\n            processorCacheName,\n            sensorName1,\n            recordingLevel\n        );\n\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n","date":"2020-01-25 05:55:50","endLine":423,"groupId":"19506","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetExistingCacheLevelSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/75/057644d81e55bdf882a9481333361b3e384a72.src","preCode":"    public void shouldGetExistingCacheLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n        final String processorCacheName = \"processorNodeName\";\n        setupGetExistingSensorTest(\n            metrics, THREAD_ID + \".task.\" + TASK_ID + SENSOR_PREFIX_DELIMITER\n            + \"cache\" + SENSOR_PREFIX_DELIMITER + processorCacheName\n        );\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n\n        final Sensor actualSensor = streamsMetrics.cacheLevelSensor(\n            THREAD_ID, TASK_ID,\n            processorCacheName,\n            sensorName1,\n            recordingLevel\n        );\n\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":404,"status":"B"}],"commitId":"2e351e06b3557ed63a54946f33fd1c0f0f136b50","commitMessage":"@@@KAFKA-9152; Improve Sensor Retrieval (#7928)\n\nThis ticket shall improve two aspects of the retrieval of sensors:\nhttps://issues.apache.org/jira/browse/KAFKA-9152\n\nCurrently.  when a sensor is retrieved with *Metrics.*Sensor() (e.g. ThreadMetrics.createTaskSensor()) after it was created with the same method *Metrics.*Sensor().  the sensor is added again to the corresponding queue in Sensors (e.g. threadLevelSensors) in StreamsMetricsImpl. Those queues are used to remove the sensors when removeAllLevelSensors() is called. Having multiple times the same sensors in this queue is not an issue from a correctness point of view. However.  it would reduce the footprint to only store a sensor once in those queues.\n\nWhen a sensor is retrieved.  the current code attempts to create a new sensor and to add to it again the corresponding metrics. This could be avoided.\n\nBoth aspects could be improved by checking whether a sensor already exists by calling getSensor() on the Metrics object and checking the return value.\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2020-01-25 05:55:50","modifiedFileCount":"2","status":"B","submitter":"highluck"},{"authorTime":"2020-08-14 03:40:40","codes":[{"authorDate":"2020-08-14 03:40:40","commitOrder":2,"curCode":"    public void shouldGetNewThreadLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n        setupGetNewSensorTest(metrics, THREAD_ID, recordingLevel);\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION, time);\n\n        final Sensor actualSensor = streamsMetrics.threadLevelSensor(\n            THREAD_ID,\n            sensorName1,\n            recordingLevel\n        );\n\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n","date":"2020-08-14 03:40:40","endLine":233,"groupId":"13805","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetNewThreadLevelSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0e/4c1764d85a9be320cc660139b627dfce2f6ab7.src","preCode":"    public void shouldGetNewThreadLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n        setupGetNewSensorTest(metrics, THREAD_ID, recordingLevel);\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n\n        final Sensor actualSensor = streamsMetrics.threadLevelSensor(\n            THREAD_ID,\n            sensorName1,\n            recordingLevel\n        );\n\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2020-08-14 03:40:40","commitOrder":2,"curCode":"    public void shouldGetExistingCacheLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n        final String processorCacheName = \"processorNodeName\";\n        setupGetExistingSensorTest(\n            metrics, THREAD_ID + \".task.\" + TASK_ID + SENSOR_PREFIX_DELIMITER\n            + \"cache\" + SENSOR_PREFIX_DELIMITER + processorCacheName\n        );\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION, time);\n\n        final Sensor actualSensor = streamsMetrics.cacheLevelSensor(\n            THREAD_ID, TASK_ID,\n            processorCacheName,\n            sensorName1,\n            recordingLevel\n        );\n\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n","date":"2020-08-14 03:40:40","endLine":424,"groupId":"13808","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetExistingCacheLevelSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0e/4c1764d85a9be320cc660139b627dfce2f6ab7.src","preCode":"    public void shouldGetExistingCacheLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n        final String processorCacheName = \"processorNodeName\";\n        setupGetExistingSensorTest(\n            metrics, THREAD_ID + \".task.\" + TASK_ID + SENSOR_PREFIX_DELIMITER\n            + \"cache\" + SENSOR_PREFIX_DELIMITER + processorCacheName\n        );\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION);\n\n        final Sensor actualSensor = streamsMetrics.cacheLevelSensor(\n            THREAD_ID, TASK_ID,\n            processorCacheName,\n            sensorName1,\n            recordingLevel\n        );\n\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":405,"status":"M"}],"commitId":"5645d906fa319206a9270c080926a21dfddc852a","commitMessage":"@@@KAFKA-9924: Prepare RocksDB and metrics for RocksDB properties recording (#9098)\n\nRefactor the RocksDB store and the metrics infrastructure in Streams\nin preparation of the recordings of the RocksDB properties specified in KIP-607.\n\nThe refactoring includes:\n* wrapper around BlockedBasedTableConfig to make the cache accessible to the\n  RocksDB metrics recorder\n* RocksDB metrics recorder now takes also the DB instance and the cache in addition\n  to the statistics\n* The value providers for the metrics are added to the RockDB metrics recorder also if\n  the recording level is INFO.\n* The creation of the RocksDB metrics recording trigger is moved to StreamsMetricsImpl\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <vvcephei@apache.org>\n","date":"2020-08-14 03:40:40","modifiedFileCount":"27","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-08-28 07:04:28","codes":[{"authorDate":"2020-08-28 07:04:28","commitOrder":3,"curCode":"    public void shouldGetNewThreadLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n        setupGetNewSensorTest(metrics, recordingLevel);\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION, time);\n\n        final Sensor actualSensor = streamsMetrics.threadLevelSensor(THREAD_ID1, SENSOR_NAME_1, recordingLevel);\n\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n","date":"2020-08-28 07:04:28","endLine":268,"groupId":"102374","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetNewThreadLevelSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/81/26ba6632d49e737619d2ab419e6176635df97c.src","preCode":"    public void shouldGetNewThreadLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n        setupGetNewSensorTest(metrics, THREAD_ID, recordingLevel);\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION, time);\n\n        final Sensor actualSensor = streamsMetrics.threadLevelSensor(\n            THREAD_ID,\n            sensorName1,\n            recordingLevel\n        );\n\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"},{"authorDate":"2020-08-28 07:04:28","commitOrder":3,"curCode":"    public void shouldGetExistingCacheLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n        final String processorCacheName = \"processorNodeName\";\n        setupGetExistingSensorTest(metrics);\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION, time);\n\n        final Sensor actualSensor = streamsMetrics.cacheLevelSensor(\n            THREAD_ID1, TASK_ID1,\n            processorCacheName,\n            SENSOR_NAME_1,\n            recordingLevel\n        );\n\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n","date":"2020-08-28 07:04:28","endLine":578,"groupId":"102374","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetExistingCacheLevelSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/81/26ba6632d49e737619d2ab419e6176635df97c.src","preCode":"    public void shouldGetExistingCacheLevelSensor() {\n        final Metrics metrics = mock(Metrics.class);\n        final RecordingLevel recordingLevel = RecordingLevel.INFO;\n        final String processorCacheName = \"processorNodeName\";\n        setupGetExistingSensorTest(\n            metrics, THREAD_ID + \".task.\" + TASK_ID + SENSOR_PREFIX_DELIMITER\n            + \"cache\" + SENSOR_PREFIX_DELIMITER + processorCacheName\n        );\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(metrics, CLIENT_ID, VERSION, time);\n\n        final Sensor actualSensor = streamsMetrics.cacheLevelSensor(\n            THREAD_ID, TASK_ID,\n            processorCacheName,\n            sensorName1,\n            recordingLevel\n        );\n\n        verify(metrics);\n        assertThat(actualSensor, is(equalToObject(sensor)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":562,"status":"M"}],"commitId":"9da32b6bd014f1bdeeee5da8fcd00995a5916323","commitMessage":"@@@KAFKA-9924: Add RocksDB metric num-entries-active-mem-table (#9177)\n\n* Add the first RocksDB metric that exposes a RocksDB property: num-entries-active-mem-table.\n* Add code StreamsMetricsImpl in support of exposing RocksDB properties\n* unit tests and intergration tests\n\nThis commit only contains one metric to keep the PR at a reasonable size.\nAll other RocksDB metrics described in KIP-607 will be added in other PRs.\n\nImplements: KIP-607\nReviewers: Guozhang Wang <guozhang@apache.org>.  John Roesler <vvcephei@apache.org>","date":"2020-08-28 07:04:28","modifiedFileCount":"22","status":"M","submitter":"Bruno Cadonna"}]
