[{"authorTime":"2017-06-01 05:11:47","codes":[{"authorDate":"2017-06-01 05:11:47","commitOrder":1,"curCode":"    public void testBatchIterationWithMultipleRecordsPerBatch() throws IOException {\n        if (magic < MAGIC_VALUE_V2 && compression == CompressionType.NONE)\n            return;\n\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord[] firstBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(3241324L, \"a\".getBytes(), \"1\".getBytes()),\n                new SimpleRecord(234280L, \"b\".getBytes(), \"2\".getBytes())\n\n            };\n            SimpleRecord[] secondBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(238423489L, \"c\".getBytes(), \"3\".getBytes()),\n                new SimpleRecord(897839L, null, \"4\".getBytes()),\n                new SimpleRecord(8234020L, \"e\".getBytes(), null)\n            };\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecords));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecords));\n            fileRecords.flush();\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords.channel(), 0,\n                    fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(firstBatch, 0L, 3241324L, firstBatchRecords);\n\n            FileChannelRecordBatch secondBatch = logInputStream.nextBatch();\n            assertNoProducerData(secondBatch);\n            assertGenericRecordBatchData(secondBatch, 1L, 238423489L, secondBatchRecords);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","date":"2017-06-01 05:11:47","endLine":142,"groupId":"10971","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBatchIterationWithMultipleRecordsPerBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d5/de4bd9b5208599d5adec014aead2f51fa053f5.src","preCode":"    public void testBatchIterationWithMultipleRecordsPerBatch() throws IOException {\n        if (magic < MAGIC_VALUE_V2 && compression == CompressionType.NONE)\n            return;\n\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord[] firstBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(3241324L, \"a\".getBytes(), \"1\".getBytes()),\n                new SimpleRecord(234280L, \"b\".getBytes(), \"2\".getBytes())\n\n            };\n            SimpleRecord[] secondBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(238423489L, \"c\".getBytes(), \"3\".getBytes()),\n                new SimpleRecord(897839L, null, \"4\".getBytes()),\n                new SimpleRecord(8234020L, \"e\".getBytes(), null)\n            };\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecords));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecords));\n            fileRecords.flush();\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords.channel(), 0,\n                    fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(firstBatch, 0L, 3241324L, firstBatchRecords);\n\n            FileChannelRecordBatch secondBatch = logInputStream.nextBatch();\n            assertNoProducerData(secondBatch);\n            assertGenericRecordBatchData(secondBatch, 1L, 238423489L, secondBatchRecords);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/FileLogInputStreamTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"},{"authorDate":"2017-06-01 05:11:47","commitOrder":1,"curCode":"    public void testBatchIterationIncompleteBatch() throws IOException {\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord firstBatchRecord = new SimpleRecord(100L, \"foo\".getBytes());\n            SimpleRecord secondBatchRecord = new SimpleRecord(200L, \"bar\".getBytes());\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecord));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecord));\n            fileRecords.flush();\n            fileRecords.truncateTo(fileRecords.sizeInBytes() - 13);\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords.channel(), 0,\n                    fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(firstBatch, 0L, 100L, firstBatchRecord);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","date":"2017-06-01 05:11:47","endLine":210,"groupId":"1553","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBatchIterationIncompleteBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d5/de4bd9b5208599d5adec014aead2f51fa053f5.src","preCode":"    public void testBatchIterationIncompleteBatch() throws IOException {\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord firstBatchRecord = new SimpleRecord(100L, \"foo\".getBytes());\n            SimpleRecord secondBatchRecord = new SimpleRecord(200L, \"bar\".getBytes());\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecord));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecord));\n            fileRecords.flush();\n            fileRecords.truncateTo(fileRecords.sizeInBytes() - 13);\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords.channel(), 0,\n                    fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(firstBatch, 0L, 100L, firstBatchRecord);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/FileLogInputStreamTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"B"}],"commitId":"81f0c1e8f2ba2d86f061361b5ee33bb8e6f640c5","commitMessage":"@@@KAFKA-5093; Avoid loading full batch data when possible when iterating FileRecords\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>\n\nCloses #3160 from hachikuji/KAFKA-5093\n","date":"2017-06-01 05:11:47","modifiedFileCount":"11","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2018-04-30 23:59:04","codes":[{"authorDate":"2018-04-30 23:59:04","commitOrder":2,"curCode":"    public void testBatchIterationWithMultipleRecordsPerBatch() throws IOException {\n        if (magic < MAGIC_VALUE_V2 && compression == CompressionType.NONE)\n            return;\n\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord[] firstBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(3241324L, \"a\".getBytes(), \"1\".getBytes()),\n                new SimpleRecord(234280L, \"b\".getBytes(), \"2\".getBytes())\n\n            };\n            SimpleRecord[] secondBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(238423489L, \"c\".getBytes(), \"3\".getBytes()),\n                new SimpleRecord(897839L, null, \"4\".getBytes()),\n                new SimpleRecord(8234020L, \"e\".getBytes(), null)\n            };\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecords));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecords));\n            fileRecords.flush();\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords, 0, fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(firstBatch, 0L, 3241324L, firstBatchRecords);\n\n            FileChannelRecordBatch secondBatch = logInputStream.nextBatch();\n            assertNoProducerData(secondBatch);\n            assertGenericRecordBatchData(secondBatch, 1L, 238423489L, secondBatchRecords);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","date":"2018-04-30 23:59:04","endLine":139,"groupId":"10971","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBatchIterationWithMultipleRecordsPerBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/95/b2a0c89c67a35a894c3aa03542893be695a563.src","preCode":"    public void testBatchIterationWithMultipleRecordsPerBatch() throws IOException {\n        if (magic < MAGIC_VALUE_V2 && compression == CompressionType.NONE)\n            return;\n\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord[] firstBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(3241324L, \"a\".getBytes(), \"1\".getBytes()),\n                new SimpleRecord(234280L, \"b\".getBytes(), \"2\".getBytes())\n\n            };\n            SimpleRecord[] secondBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(238423489L, \"c\".getBytes(), \"3\".getBytes()),\n                new SimpleRecord(897839L, null, \"4\".getBytes()),\n                new SimpleRecord(8234020L, \"e\".getBytes(), null)\n            };\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecords));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecords));\n            fileRecords.flush();\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords.channel(), 0,\n                    fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(firstBatch, 0L, 3241324L, firstBatchRecords);\n\n            FileChannelRecordBatch secondBatch = logInputStream.nextBatch();\n            assertNoProducerData(secondBatch);\n            assertGenericRecordBatchData(secondBatch, 1L, 238423489L, secondBatchRecords);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/FileLogInputStreamTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2018-04-30 23:59:04","commitOrder":2,"curCode":"    public void testBatchIterationIncompleteBatch() throws IOException {\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord firstBatchRecord = new SimpleRecord(100L, \"foo\".getBytes());\n            SimpleRecord secondBatchRecord = new SimpleRecord(200L, \"bar\".getBytes());\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecord));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecord));\n            fileRecords.flush();\n            fileRecords.truncateTo(fileRecords.sizeInBytes() - 13);\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords, 0, fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(firstBatch, 0L, 100L, firstBatchRecord);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","date":"2018-04-30 23:59:04","endLine":205,"groupId":"1553","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBatchIterationIncompleteBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/95/b2a0c89c67a35a894c3aa03542893be695a563.src","preCode":"    public void testBatchIterationIncompleteBatch() throws IOException {\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord firstBatchRecord = new SimpleRecord(100L, \"foo\".getBytes());\n            SimpleRecord secondBatchRecord = new SimpleRecord(200L, \"bar\".getBytes());\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecord));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecord));\n            fileRecords.flush();\n            fileRecords.truncateTo(fileRecords.sizeInBytes() - 13);\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords.channel(), 0,\n                    fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(firstBatch, 0L, 100L, firstBatchRecord);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/FileLogInputStreamTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"}],"commitId":"f467c9c2438a8b182083879927ff171a6a2c6f2f","commitMessage":"@@@MINOR: Ensure exception messages include partition/segment info when possible (#4907)\n\nReviewers: Anna Povzner <anna@confluent.io>.  Ismael Juma <ismael@juma.me.uk>","date":"2018-04-30 23:59:04","modifiedFileCount":"4","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2018-10-10 08:13:33","codes":[{"authorDate":"2018-10-10 08:13:33","commitOrder":3,"curCode":"    public void testBatchIterationWithMultipleRecordsPerBatch() throws IOException {\n        if (magic < MAGIC_VALUE_V2 && compression == CompressionType.NONE)\n            return;\n\n        if (compression == CompressionType.ZSTD && magic < MAGIC_VALUE_V2)\n            return;\n\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord[] firstBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(3241324L, \"a\".getBytes(), \"1\".getBytes()),\n                new SimpleRecord(234280L, \"b\".getBytes(), \"2\".getBytes())\n            };\n\n            SimpleRecord[] secondBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(238423489L, \"c\".getBytes(), \"3\".getBytes()),\n                new SimpleRecord(897839L, null, \"4\".getBytes()),\n                new SimpleRecord(8234020L, \"e\".getBytes(), null)\n            };\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecords));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecords));\n            fileRecords.flush();\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords, 0, fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(firstBatch, 0L, 3241324L, firstBatchRecords);\n\n            FileChannelRecordBatch secondBatch = logInputStream.nextBatch();\n            assertNoProducerData(secondBatch);\n            assertGenericRecordBatchData(secondBatch, 1L, 238423489L, secondBatchRecords);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","date":"2018-10-10 08:13:33","endLine":148,"groupId":"10971","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBatchIterationWithMultipleRecordsPerBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/3a5b531ef27d5f5845f8f48960f9bb38980e54.src","preCode":"    public void testBatchIterationWithMultipleRecordsPerBatch() throws IOException {\n        if (magic < MAGIC_VALUE_V2 && compression == CompressionType.NONE)\n            return;\n\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord[] firstBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(3241324L, \"a\".getBytes(), \"1\".getBytes()),\n                new SimpleRecord(234280L, \"b\".getBytes(), \"2\".getBytes())\n            };\n\n            SimpleRecord[] secondBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(238423489L, \"c\".getBytes(), \"3\".getBytes()),\n                new SimpleRecord(897839L, null, \"4\".getBytes()),\n                new SimpleRecord(8234020L, \"e\".getBytes(), null)\n            };\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecords));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecords));\n            fileRecords.flush();\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords, 0, fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(firstBatch, 0L, 3241324L, firstBatchRecords);\n\n            FileChannelRecordBatch secondBatch = logInputStream.nextBatch();\n            assertNoProducerData(secondBatch);\n            assertGenericRecordBatchData(secondBatch, 1L, 238423489L, secondBatchRecords);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/FileLogInputStreamTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2018-10-10 08:13:33","commitOrder":3,"curCode":"    public void testBatchIterationIncompleteBatch() throws IOException {\n        if (compression == CompressionType.ZSTD && magic < MAGIC_VALUE_V2)\n            return;\n\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord firstBatchRecord = new SimpleRecord(100L, \"foo\".getBytes());\n            SimpleRecord secondBatchRecord = new SimpleRecord(200L, \"bar\".getBytes());\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecord));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecord));\n            fileRecords.flush();\n            fileRecords.truncateTo(fileRecords.sizeInBytes() - 13);\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords, 0, fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(firstBatch, 0L, 100L, firstBatchRecord);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","date":"2018-10-10 08:13:33","endLine":217,"groupId":"1553","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBatchIterationIncompleteBatch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/3a5b531ef27d5f5845f8f48960f9bb38980e54.src","preCode":"    public void testBatchIterationIncompleteBatch() throws IOException {\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord firstBatchRecord = new SimpleRecord(100L, \"foo\".getBytes());\n            SimpleRecord secondBatchRecord = new SimpleRecord(200L, \"bar\".getBytes());\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecord));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecord));\n            fileRecords.flush();\n            fileRecords.truncateTo(fileRecords.sizeInBytes() - 13);\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords, 0, fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(firstBatch, 0L, 100L, firstBatchRecord);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/FileLogInputStreamTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"741cb761c5239297029a446518c332f6c4ed08f6","commitMessage":"@@@KAFKA-4514; Add Codec for ZStandard Compression (#2267)\n\nThis patch adds support for zstandard compression to Kafka as documented in KIP-110: https://cwiki.apache.org/confluence/display/KAFKA/KIP-110%3A+Add+Codec+for+ZStandard+Compression. \n\nReviewers: Ivan Babrou <ibobrik@gmail.com>.  Ismael Juma <ismael@juma.me.uk>.  Jason Gustafson <jason@confluent.io>","date":"2018-10-10 08:13:33","modifiedFileCount":"19","status":"M","submitter":"Lee Dongjin"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2021-01-14 08:17:45","commitOrder":4,"curCode":"    public void testBatchIterationWithMultipleRecordsPerBatch(Args args) throws IOException {\n        CompressionType compression = args.compression;\n        byte magic = args.magic;\n        if (magic < MAGIC_VALUE_V2 && compression == CompressionType.NONE)\n            return;\n\n        if (compression == CompressionType.ZSTD && magic < MAGIC_VALUE_V2)\n            return;\n\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord[] firstBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(3241324L, \"a\".getBytes(), \"1\".getBytes()),\n                new SimpleRecord(234280L, \"b\".getBytes(), \"2\".getBytes())\n            };\n\n            SimpleRecord[] secondBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(238423489L, \"c\".getBytes(), \"3\".getBytes()),\n                new SimpleRecord(897839L, null, \"4\".getBytes()),\n                new SimpleRecord(8234020L, \"e\".getBytes(), null)\n            };\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecords));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecords));\n            fileRecords.flush();\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords, 0, fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(args, firstBatch, 0L, 3241324L, firstBatchRecords);\n\n            FileChannelRecordBatch secondBatch = logInputStream.nextBatch();\n            assertNoProducerData(secondBatch);\n            assertGenericRecordBatchData(args, secondBatch, 1L, 238423489L, secondBatchRecords);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","date":"2021-01-14 08:17:45","endLine":179,"groupId":"103344","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"testBatchIterationWithMultipleRecordsPerBatch","params":"(Argsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/204a942a8602cd37163fc17a08abf74149611b.src","preCode":"    public void testBatchIterationWithMultipleRecordsPerBatch() throws IOException {\n        if (magic < MAGIC_VALUE_V2 && compression == CompressionType.NONE)\n            return;\n\n        if (compression == CompressionType.ZSTD && magic < MAGIC_VALUE_V2)\n            return;\n\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord[] firstBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(3241324L, \"a\".getBytes(), \"1\".getBytes()),\n                new SimpleRecord(234280L, \"b\".getBytes(), \"2\".getBytes())\n            };\n\n            SimpleRecord[] secondBatchRecords = new SimpleRecord[]{\n                new SimpleRecord(238423489L, \"c\".getBytes(), \"3\".getBytes()),\n                new SimpleRecord(897839L, null, \"4\".getBytes()),\n                new SimpleRecord(8234020L, \"e\".getBytes(), null)\n            };\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecords));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecords));\n            fileRecords.flush();\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords, 0, fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(firstBatch, 0L, 3241324L, firstBatchRecords);\n\n            FileChannelRecordBatch secondBatch = logInputStream.nextBatch();\n            assertNoProducerData(secondBatch);\n            assertGenericRecordBatchData(secondBatch, 1L, 238423489L, secondBatchRecords);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/FileLogInputStreamTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2021-01-14 08:17:45","commitOrder":4,"curCode":"    public void testBatchIterationIncompleteBatch(Args args) throws IOException {\n        CompressionType compression = args.compression;\n        byte magic = args.magic;\n        if (compression == CompressionType.ZSTD && magic < MAGIC_VALUE_V2)\n            return;\n\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord firstBatchRecord = new SimpleRecord(100L, \"foo\".getBytes());\n            SimpleRecord secondBatchRecord = new SimpleRecord(200L, \"bar\".getBytes());\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecord));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecord));\n            fileRecords.flush();\n            fileRecords.truncateTo(fileRecords.sizeInBytes() - 13);\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords, 0, fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(args, firstBatch, 0L, 100L, firstBatchRecord);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","date":"2021-01-14 08:17:45","endLine":254,"groupId":"103344","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testBatchIterationIncompleteBatch","params":"(Argsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/204a942a8602cd37163fc17a08abf74149611b.src","preCode":"    public void testBatchIterationIncompleteBatch() throws IOException {\n        if (compression == CompressionType.ZSTD && magic < MAGIC_VALUE_V2)\n            return;\n\n        try (FileRecords fileRecords = FileRecords.open(tempFile())) {\n            SimpleRecord firstBatchRecord = new SimpleRecord(100L, \"foo\".getBytes());\n            SimpleRecord secondBatchRecord = new SimpleRecord(200L, \"bar\".getBytes());\n\n            fileRecords.append(MemoryRecords.withRecords(magic, 0L, compression, CREATE_TIME, firstBatchRecord));\n            fileRecords.append(MemoryRecords.withRecords(magic, 1L, compression, CREATE_TIME, secondBatchRecord));\n            fileRecords.flush();\n            fileRecords.truncateTo(fileRecords.sizeInBytes() - 13);\n\n            FileLogInputStream logInputStream = new FileLogInputStream(fileRecords, 0, fileRecords.sizeInBytes());\n\n            FileChannelRecordBatch firstBatch = logInputStream.nextBatch();\n            assertNoProducerData(firstBatch);\n            assertGenericRecordBatchData(firstBatch, 0L, 100L, firstBatchRecord);\n\n            assertNull(logInputStream.nextBatch());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/record/FileLogInputStreamTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"}]
