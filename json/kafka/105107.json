[{"authorTime":"2016-02-24 14:47:31","codes":[{"authorDate":"2016-02-24 14:47:31","commitOrder":1,"curCode":"    public void putSafeConnectorIgnoresStaleStatus() {\n        byte[] value = new byte[0];\n        String otherWorkerId = \"anotherhost:8083\";\n\n        KafkaBasedLog<String, byte[]> kafkaBasedLog = mock(KafkaBasedLog.class);\n        Converter converter = mock(Converter.class);\n        KafkaStatusBackingStore store = new KafkaStatusBackingStore(new MockTime(), converter, STATUS_TOPIC, kafkaBasedLog);\n\n        \r\n        Map<String, Object> statusMap = new HashMap<>();\n        statusMap.put(\"worker_id\", otherWorkerId);\n        statusMap.put(\"state\", \"RUNNING\");\n        statusMap.put(\"generation\", 1L);\n\n        expect(converter.toConnectData(STATUS_TOPIC, value))\n                .andReturn(new SchemaAndValue(null, statusMap));\n\n        \r\n\n        replayAll();\n\n        store.read(consumerRecord(0, \"status-connector-conn\", value));\n        store.putSafe(new ConnectorStatus(CONNECTOR, ConnectorStatus.State.UNASSIGNED, WORKER_ID, 0));\n\n        ConnectorStatus status = new ConnectorStatus(CONNECTOR, ConnectorStatus.State.RUNNING, otherWorkerId, 1);\n        assertEquals(status, store.get(CONNECTOR));\n\n        verifyAll();\n    }\n","date":"2016-02-24 14:47:31","endLine":185,"groupId":"20038","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"putSafeConnectorIgnoresStaleStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/bab64eec36d45908098b0b52e1fdef01eea5a5.src","preCode":"    public void putSafeConnectorIgnoresStaleStatus() {\n        byte[] value = new byte[0];\n        String otherWorkerId = \"anotherhost:8083\";\n\n        KafkaBasedLog<String, byte[]> kafkaBasedLog = mock(KafkaBasedLog.class);\n        Converter converter = mock(Converter.class);\n        KafkaStatusBackingStore store = new KafkaStatusBackingStore(new MockTime(), converter, STATUS_TOPIC, kafkaBasedLog);\n\n        \r\n        Map<String, Object> statusMap = new HashMap<>();\n        statusMap.put(\"worker_id\", otherWorkerId);\n        statusMap.put(\"state\", \"RUNNING\");\n        statusMap.put(\"generation\", 1L);\n\n        expect(converter.toConnectData(STATUS_TOPIC, value))\n                .andReturn(new SchemaAndValue(null, statusMap));\n\n        \r\n\n        replayAll();\n\n        store.read(consumerRecord(0, \"status-connector-conn\", value));\n        store.putSafe(new ConnectorStatus(CONNECTOR, ConnectorStatus.State.UNASSIGNED, WORKER_ID, 0));\n\n        ConnectorStatus status = new ConnectorStatus(CONNECTOR, ConnectorStatus.State.RUNNING, otherWorkerId, 1);\n        assertEquals(status, store.get(CONNECTOR));\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"B"},{"authorDate":"2016-02-24 14:47:31","commitOrder":1,"curCode":"    public void readConnectorState() {\n        byte[] value = new byte[0];\n\n        KafkaBasedLog<String, byte[]> kafkaBasedLog = mock(KafkaBasedLog.class);\n        Converter converter = mock(Converter.class);\n        KafkaStatusBackingStore store = new KafkaStatusBackingStore(new MockTime(), converter, STATUS_TOPIC, kafkaBasedLog);\n\n        Map<String, Object> statusMap = new HashMap<>();\n        statusMap.put(\"worker_id\", WORKER_ID);\n        statusMap.put(\"state\", \"RUNNING\");\n        statusMap.put(\"generation\", 0L);\n\n        expect(converter.toConnectData(STATUS_TOPIC, value))\n                .andReturn(new SchemaAndValue(null, statusMap));\n\n        replayAll();\n\n        store.read(consumerRecord(0, \"status-connector-conn\", value));\n\n        ConnectorStatus status = new ConnectorStatus(CONNECTOR, ConnectorStatus.State.RUNNING, WORKER_ID, 0);\n        assertEquals(status, store.get(CONNECTOR));\n\n        verifyAll();\n    }\n","date":"2016-02-24 14:47:31","endLine":309,"groupId":"20038","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"readConnectorState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/bab64eec36d45908098b0b52e1fdef01eea5a5.src","preCode":"    public void readConnectorState() {\n        byte[] value = new byte[0];\n\n        KafkaBasedLog<String, byte[]> kafkaBasedLog = mock(KafkaBasedLog.class);\n        Converter converter = mock(Converter.class);\n        KafkaStatusBackingStore store = new KafkaStatusBackingStore(new MockTime(), converter, STATUS_TOPIC, kafkaBasedLog);\n\n        Map<String, Object> statusMap = new HashMap<>();\n        statusMap.put(\"worker_id\", WORKER_ID);\n        statusMap.put(\"state\", \"RUNNING\");\n        statusMap.put(\"generation\", 0L);\n\n        expect(converter.toConnectData(STATUS_TOPIC, value))\n                .andReturn(new SchemaAndValue(null, statusMap));\n\n        replayAll();\n\n        store.read(consumerRecord(0, \"status-connector-conn\", value));\n\n        ConnectorStatus status = new ConnectorStatus(CONNECTOR, ConnectorStatus.State.RUNNING, WORKER_ID, 0);\n        assertEquals(status, store.get(CONNECTOR));\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"B"}],"commitId":"f7d019ed408fa988129be9af3689bfa4878bc627","commitMessage":"@@@KAFKA-3093: Add Connect status tracking API\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #920 from hachikuji/KAFKA-3093\n","date":"2016-02-24 14:47:31","modifiedFileCount":"28","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2020-02-15 06:34:34","codes":[{"authorDate":"2020-02-15 06:34:34","commitOrder":2,"curCode":"    public void putSafeConnectorIgnoresStaleStatus() {\n        byte[] value = new byte[0];\n        String otherWorkerId = \"anotherhost:8083\";\n\n        \r\n        Map<String, Object> statusMap = new HashMap<>();\n        statusMap.put(\"worker_id\", otherWorkerId);\n        statusMap.put(\"state\", \"RUNNING\");\n        statusMap.put(\"generation\", 1L);\n\n        expect(converter.toConnectData(STATUS_TOPIC, value))\n                .andReturn(new SchemaAndValue(null, statusMap));\n\n        \r\n\n        replayAll();\n\n        store.read(consumerRecord(0, \"status-connector-conn\", value));\n        store.putSafe(new ConnectorStatus(CONNECTOR, ConnectorStatus.State.UNASSIGNED, WORKER_ID, 0));\n\n        ConnectorStatus status = new ConnectorStatus(CONNECTOR, ConnectorStatus.State.RUNNING, otherWorkerId, 1);\n        assertEquals(status, store.get(CONNECTOR));\n\n        verifyAll();\n    }\n","date":"2020-02-15 06:34:34","endLine":209,"groupId":"105107","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"putSafeConnectorIgnoresStaleStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bd/8e7a512a3cbc5e05cca7ce4c420cb5bf8cadf7.src","preCode":"    public void putSafeConnectorIgnoresStaleStatus() {\n        byte[] value = new byte[0];\n        String otherWorkerId = \"anotherhost:8083\";\n\n        KafkaBasedLog<String, byte[]> kafkaBasedLog = mock(KafkaBasedLog.class);\n        Converter converter = mock(Converter.class);\n        KafkaStatusBackingStore store = new KafkaStatusBackingStore(new MockTime(), converter, STATUS_TOPIC, kafkaBasedLog);\n\n        \r\n        Map<String, Object> statusMap = new HashMap<>();\n        statusMap.put(\"worker_id\", otherWorkerId);\n        statusMap.put(\"state\", \"RUNNING\");\n        statusMap.put(\"generation\", 1L);\n\n        expect(converter.toConnectData(STATUS_TOPIC, value))\n                .andReturn(new SchemaAndValue(null, statusMap));\n\n        \r\n\n        replayAll();\n\n        store.read(consumerRecord(0, \"status-connector-conn\", value));\n        store.putSafe(new ConnectorStatus(CONNECTOR, ConnectorStatus.State.UNASSIGNED, WORKER_ID, 0));\n\n        ConnectorStatus status = new ConnectorStatus(CONNECTOR, ConnectorStatus.State.RUNNING, otherWorkerId, 1);\n        assertEquals(status, store.get(CONNECTOR));\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2020-02-15 06:34:34","commitOrder":2,"curCode":"    public void readConnectorState() {\n        byte[] value = new byte[0];\n\n        Map<String, Object> statusMap = new HashMap<>();\n        statusMap.put(\"worker_id\", WORKER_ID);\n        statusMap.put(\"state\", \"RUNNING\");\n        statusMap.put(\"generation\", 0L);\n\n        expect(converter.toConnectData(STATUS_TOPIC, value))\n                .andReturn(new SchemaAndValue(null, statusMap));\n\n        replayAll();\n\n        store.read(consumerRecord(0, \"status-connector-conn\", value));\n\n        ConnectorStatus status = new ConnectorStatus(CONNECTOR, ConnectorStatus.State.RUNNING, WORKER_ID, 0);\n        assertEquals(status, store.get(CONNECTOR));\n\n        verifyAll();\n    }\n","date":"2020-02-15 06:34:34","endLine":344,"groupId":"105107","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"readConnectorState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bd/8e7a512a3cbc5e05cca7ce4c420cb5bf8cadf7.src","preCode":"    public void readConnectorState() {\n        byte[] value = new byte[0];\n\n        KafkaBasedLog<String, byte[]> kafkaBasedLog = mock(KafkaBasedLog.class);\n        Converter converter = mock(Converter.class);\n        KafkaStatusBackingStore store = new KafkaStatusBackingStore(new MockTime(), converter, STATUS_TOPIC, kafkaBasedLog);\n\n        Map<String, Object> statusMap = new HashMap<>();\n        statusMap.put(\"worker_id\", WORKER_ID);\n        statusMap.put(\"state\", \"RUNNING\");\n        statusMap.put(\"generation\", 0L);\n\n        expect(converter.toConnectData(STATUS_TOPIC, value))\n                .andReturn(new SchemaAndValue(null, statusMap));\n\n        replayAll();\n\n        store.read(consumerRecord(0, \"status-connector-conn\", value));\n\n        ConnectorStatus status = new ConnectorStatus(CONNECTOR, ConnectorStatus.State.RUNNING, WORKER_ID, 0);\n        assertEquals(status, store.get(CONNECTOR));\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/storage/KafkaStatusBackingStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"}],"commitId":"16ee326755e3f13914a0ed446c34c84e65fc0bc4","commitMessage":"@@@KAFKA-9556; Fix two issues with KIP-558 and expand testing coverage (#8085)\n\nCorrect the Connect worker logic to properly disable the new topic status (KIP-558) feature when `topic.tracking.enable=false`.  and fix automatic topic status reset after a connector is deleted.\n\nAlso adds new `ConnectorTopicsIntegrationTest` and expanded unit tests.\n\nReviewers: Randall Hauch <rhauch@gmail.com>","date":"2020-02-15 06:34:34","modifiedFileCount":"14","status":"M","submitter":"Konstantine Karantasis"}]
