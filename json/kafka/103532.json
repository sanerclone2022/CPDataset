[{"authorTime":"2020-10-07 02:13:43","codes":[{"authorDate":"2020-10-07 02:13:43","commitOrder":1,"curCode":"    public void testDsaKeyPair() throws Exception {\n        \r\n        assumeTrue(tlsProtocol.equals(\"TLSv1.2\"));\n        serverCertStores = certBuilder(true, \"server\").keyAlgorithm(\"DSA\").build();\n        clientCertStores = certBuilder(false, \"client\").keyAlgorithm(\"DSA\").build();\n        sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores);\n        sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores);\n        sslServerConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, \"required\");\n        verifySslConfigs();\n    }\n","date":"2020-10-07 02:13:43","endLine":437,"groupId":"10541","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDsaKeyPair","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cc/fb2a9f599f49cb6370fd7284f2fbf83d22434f.src","preCode":"    public void testDsaKeyPair() throws Exception {\n        \r\n        assumeTrue(tlsProtocol.equals(\"TLSv1.2\"));\n        serverCertStores = certBuilder(true, \"server\").keyAlgorithm(\"DSA\").build();\n        clientCertStores = certBuilder(false, \"client\").keyAlgorithm(\"DSA\").build();\n        sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores);\n        sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores);\n        sslServerConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, \"required\");\n        verifySslConfigs();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":428,"status":"B"},{"authorDate":"2020-10-07 02:13:43","commitOrder":1,"curCode":"    public void testECKeyPair() throws Exception {\n        serverCertStores = certBuilder(true, \"server\").keyAlgorithm(\"EC\").build();\n        clientCertStores = certBuilder(false, \"client\").keyAlgorithm(\"EC\").build();\n        sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores);\n        sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores);\n        sslServerConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, \"required\");\n        verifySslConfigs();\n    }\n","date":"2020-10-07 02:13:43","endLine":450,"groupId":"10541","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testECKeyPair","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cc/fb2a9f599f49cb6370fd7284f2fbf83d22434f.src","preCode":"    public void testECKeyPair() throws Exception {\n        serverCertStores = certBuilder(true, \"server\").keyAlgorithm(\"EC\").build();\n        clientCertStores = certBuilder(false, \"client\").keyAlgorithm(\"EC\").build();\n        sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores);\n        sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores);\n        sslServerConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, \"required\");\n        verifySslConfigs();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":443,"status":"B"}],"commitId":"7be8bd8cbfea5cc19f815a142c4689e97728ea4b","commitMessage":"@@@KAFKA-10338; Support PEM format for SSL key and trust stores (KIP-651) (#9345)\n\nAdds support for SSL key and trust stores to be specified in PEM format either as files or directly as configuration values.\n\nReviewers: Manikumar Reddy <manikumar.reddy@gmail.com>","date":"2020-10-07 02:13:43","modifiedFileCount":"7","status":"B","submitter":"Rajini Sivaram"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2021-01-14 08:17:45","commitOrder":2,"curCode":"    public void testDsaKeyPair(Args args) throws Exception {\n        \r\n        assumeTrue(args.tlsProtocol.equals(\"TLSv1.2\"));\n        args.serverCertStores = certBuilder(true, \"server\", args.useInlinePem).keyAlgorithm(\"DSA\").build();\n        args.clientCertStores = certBuilder(false, \"client\", args.useInlinePem).keyAlgorithm(\"DSA\").build();\n        args.sslServerConfigs = args.getTrustingConfig(args.serverCertStores, args.clientCertStores);\n        args.sslClientConfigs = args.getTrustingConfig(args.clientCertStores, args.serverCertStores);\n        args.sslServerConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, \"required\");\n        verifySslConfigs(args);\n    }\n","date":"2021-01-14 08:17:45","endLine":461,"groupId":"103532","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDsaKeyPair","params":"(Argsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2b/3bf566e3fa45592dc528a7c48466f6750bf69c.src","preCode":"    public void testDsaKeyPair() throws Exception {\n        \r\n        assumeTrue(tlsProtocol.equals(\"TLSv1.2\"));\n        serverCertStores = certBuilder(true, \"server\").keyAlgorithm(\"DSA\").build();\n        clientCertStores = certBuilder(false, \"client\").keyAlgorithm(\"DSA\").build();\n        sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores);\n        sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores);\n        sslServerConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, \"required\");\n        verifySslConfigs();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":452,"status":"M"},{"authorDate":"2021-01-14 08:17:45","commitOrder":2,"curCode":"    public void testECKeyPair(Args args) throws Exception {\n        args.serverCertStores = certBuilder(true, \"server\", args.useInlinePem).keyAlgorithm(\"EC\").build();\n        args.clientCertStores = certBuilder(false, \"client\", args.useInlinePem).keyAlgorithm(\"EC\").build();\n        args.sslServerConfigs = args.getTrustingConfig(args.serverCertStores, args.clientCertStores);\n        args.sslClientConfigs = args.getTrustingConfig(args.clientCertStores, args.serverCertStores);\n        args.sslServerConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, \"required\");\n        verifySslConfigs(args);\n    }\n","date":"2021-01-14 08:17:45","endLine":475,"groupId":"103532","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testECKeyPair","params":"(Argsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2b/3bf566e3fa45592dc528a7c48466f6750bf69c.src","preCode":"    public void testECKeyPair() throws Exception {\n        serverCertStores = certBuilder(true, \"server\").keyAlgorithm(\"EC\").build();\n        clientCertStores = certBuilder(false, \"client\").keyAlgorithm(\"EC\").build();\n        sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores);\n        sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores);\n        sslServerConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG, \"required\");\n        verifySslConfigs();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":468,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"}]
