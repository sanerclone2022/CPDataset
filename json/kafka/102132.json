[{"authorTime":"2017-02-01 12:16:47","codes":[{"authorDate":"2017-02-01 12:16:47","commitOrder":1,"curCode":"    public void shouldNotMigrateActiveTaskToOtherProcess() throws Exception {\n        createClientWithPreviousActiveTasks(p1, 1, task00);\n        createClientWithPreviousActiveTasks(p2, 1, task01);\n\n        final StickyTaskAssignor firstAssignor = createTaskAssignor(task00, task01, task02);\n        firstAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task01));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n\n        clients.clear();\n\n        \r\n        createClientWithPreviousActiveTasks(p1, 1, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02);\n\n        final StickyTaskAssignor secondAssignor = createTaskAssignor(task00, task01, task02);\n        secondAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n    }\n","date":"2017-02-01 12:16:47","endLine":88,"groupId":"10979","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotMigrateActiveTaskToOtherProcess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a1/19d184ca012b145797443636d4858ddd2dc81d.src","preCode":"    public void shouldNotMigrateActiveTaskToOtherProcess() throws Exception {\n        createClientWithPreviousActiveTasks(p1, 1, task00);\n        createClientWithPreviousActiveTasks(p2, 1, task01);\n\n        final StickyTaskAssignor firstAssignor = createTaskAssignor(task00, task01, task02);\n        firstAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task01));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n\n        clients.clear();\n\n        \r\n        createClientWithPreviousActiveTasks(p1, 1, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02);\n\n        final StickyTaskAssignor secondAssignor = createTaskAssignor(task00, task01, task02);\n        secondAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"B"},{"authorDate":"2017-02-01 12:16:47","commitOrder":1,"curCode":"    public void shouldNotMoveAnyTasksWhenNewTasksAdded() throws Exception {\n        final TaskId task04 = new TaskId(0, 4);\n        final TaskId task05 = new TaskId(0, 5);\n\n        createClientWithPreviousActiveTasks(p1, 1, task00, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02, task03);\n\n        final StickyTaskAssignor<Integer> taskAssignor = createTaskAssignor(task03, task01, task04, task02, task00, task05);\n        taskAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00, task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02, task03));\n    }\n","date":"2017-02-01 12:16:47","endLine":462,"groupId":"6780","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotMoveAnyTasksWhenNewTasksAdded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a1/19d184ca012b145797443636d4858ddd2dc81d.src","preCode":"    public void shouldNotMoveAnyTasksWhenNewTasksAdded() throws Exception {\n        final TaskId task04 = new TaskId(0, 4);\n        final TaskId task05 = new TaskId(0, 5);\n\n        createClientWithPreviousActiveTasks(p1, 1, task00, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02, task03);\n\n        final StickyTaskAssignor<Integer> taskAssignor = createTaskAssignor(task03, task01, task04, task02, task00, task05);\n        taskAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00, task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02, task03));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"B"}],"commitId":"0b48ea1c81f22465cf32a19c012e0fb3c849afcc","commitMessage":"@@@KAFKA-4677: Avoid unnecessary task movement across threads during rebalance\n\nMakes task assignment more sticky by preferring to assign tasks to clients that had previously had the task as active task. If there are no clients with the task previously active.  then search for a standby. Finally falling back to the least loaded client.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Matthias J. Sax.  Guozhang Wang\n\nCloses #2429 from dguy/kafka-4677\n","date":"2017-02-01 12:16:47","modifiedFileCount":"7","status":"B","submitter":"Damian Guy"},{"authorTime":"2017-03-02 03:21:41","codes":[{"authorDate":"2017-02-01 12:16:47","commitOrder":2,"curCode":"    public void shouldNotMigrateActiveTaskToOtherProcess() throws Exception {\n        createClientWithPreviousActiveTasks(p1, 1, task00);\n        createClientWithPreviousActiveTasks(p2, 1, task01);\n\n        final StickyTaskAssignor firstAssignor = createTaskAssignor(task00, task01, task02);\n        firstAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task01));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n\n        clients.clear();\n\n        \r\n        createClientWithPreviousActiveTasks(p1, 1, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02);\n\n        final StickyTaskAssignor secondAssignor = createTaskAssignor(task00, task01, task02);\n        secondAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n    }\n","date":"2017-02-01 12:16:47","endLine":88,"groupId":"10979","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotMigrateActiveTaskToOtherProcess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a1/19d184ca012b145797443636d4858ddd2dc81d.src","preCode":"    public void shouldNotMigrateActiveTaskToOtherProcess() throws Exception {\n        createClientWithPreviousActiveTasks(p1, 1, task00);\n        createClientWithPreviousActiveTasks(p2, 1, task01);\n\n        final StickyTaskAssignor firstAssignor = createTaskAssignor(task00, task01, task02);\n        firstAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task01));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n\n        clients.clear();\n\n        \r\n        createClientWithPreviousActiveTasks(p1, 1, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02);\n\n        final StickyTaskAssignor secondAssignor = createTaskAssignor(task00, task01, task02);\n        secondAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2017-03-02 03:21:41","commitOrder":2,"curCode":"    public void shouldNotMoveAnyTasksWhenNewTasksAdded() throws Exception {\n        createClientWithPreviousActiveTasks(p1, 1, task00, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02, task03);\n\n        final StickyTaskAssignor<Integer> taskAssignor = createTaskAssignor(task03, task01, task04, task02, task00, task05);\n        taskAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00, task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02, task03));\n    }\n","date":"2017-03-02 03:21:41","endLine":462,"groupId":"6780","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotMoveAnyTasksWhenNewTasksAdded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/7bf7d6a9a0cb5fd3ecc3559aa07003002169ed.src","preCode":"    public void shouldNotMoveAnyTasksWhenNewTasksAdded() throws Exception {\n        final TaskId task04 = new TaskId(0, 4);\n        final TaskId task05 = new TaskId(0, 5);\n\n        createClientWithPreviousActiveTasks(p1, 1, task00, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02, task03);\n\n        final StickyTaskAssignor<Integer> taskAssignor = createTaskAssignor(task03, task01, task04, task02, task00, task05);\n        taskAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00, task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02, task03));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"M"}],"commitId":"0fba529608a5eb829feb66a499c89ead40b79694","commitMessage":"@@@KAFKA-4677 Follow Up: add optimization to StickyTaskAssignor for rolling rebounce\n\nDetect when a rebalance has happened due to one or more existing nodes bouncing. Keep assignment of previous active tasks the same and only assign the tasks that were not active to the new clients.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>\n\nCloses #2609 from dguy/kstreams-575\n","date":"2017-03-02 03:21:41","modifiedFileCount":"4","status":"M","submitter":"Damian Guy"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2017-09-11 16:42:10","commitOrder":3,"curCode":"    public void shouldNotMigrateActiveTaskToOtherProcess() {\n        createClientWithPreviousActiveTasks(p1, 1, task00);\n        createClientWithPreviousActiveTasks(p2, 1, task01);\n\n        final StickyTaskAssignor firstAssignor = createTaskAssignor(task00, task01, task02);\n        firstAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task01));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n\n        clients.clear();\n\n        \r\n        createClientWithPreviousActiveTasks(p1, 1, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02);\n\n        final StickyTaskAssignor secondAssignor = createTaskAssignor(task00, task01, task02);\n        secondAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n    }\n","date":"2017-09-11 16:42:10","endLine":91,"groupId":"10979","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotMigrateActiveTaskToOtherProcess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/86/af0be1ec948aac678694ac948c1f435944e4f6.src","preCode":"    public void shouldNotMigrateActiveTaskToOtherProcess() throws Exception {\n        createClientWithPreviousActiveTasks(p1, 1, task00);\n        createClientWithPreviousActiveTasks(p2, 1, task01);\n\n        final StickyTaskAssignor firstAssignor = createTaskAssignor(task00, task01, task02);\n        firstAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task01));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n\n        clients.clear();\n\n        \r\n        createClientWithPreviousActiveTasks(p1, 1, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02);\n\n        final StickyTaskAssignor secondAssignor = createTaskAssignor(task00, task01, task02);\n        secondAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":3,"curCode":"    public void shouldNotMoveAnyTasksWhenNewTasksAdded() {\n        createClientWithPreviousActiveTasks(p1, 1, task00, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02, task03);\n\n        final StickyTaskAssignor<Integer> taskAssignor = createTaskAssignor(task03, task01, task04, task02, task00, task05);\n        taskAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00, task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02, task03));\n    }\n","date":"2017-09-11 16:42:10","endLine":462,"groupId":"6780","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotMoveAnyTasksWhenNewTasksAdded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/86/af0be1ec948aac678694ac948c1f435944e4f6.src","preCode":"    public void shouldNotMoveAnyTasksWhenNewTasksAdded() throws Exception {\n        createClientWithPreviousActiveTasks(p1, 1, task00, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02, task03);\n\n        final StickyTaskAssignor<Integer> taskAssignor = createTaskAssignor(task03, task01, task04, task02, task00, task05);\n        taskAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00, task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02, task03));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"M"}],"commitId":"c5464edbb7a6821e0a91a3712b1fe2fd92a22d68","commitMessage":"@@@KAFKA-5531; throw concrete exceptions in streams tests\n\n1. Now instead of just generic `Exception` methods declare more concrete\nexceptions throwing or don't declare any throwing at all.  if not needed.\n2. `SimpleBenchmark.run()` throws `RuntimeException`\n3. `SimpleBenchmark.produce()` throws `IllegalArgumentException`\n4. Expect `ProcessorStateException` in\n`StandbyTaskTest.testUpdateNonPersistentStore()`\n\n/cc enothereska\n\nAuthor: Evgeny Veretennikov <evg.veretennikov@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>\n\nCloses #3485 from evis/5531-throw-concrete-exceptions\n","date":"2017-09-11 16:42:10","modifiedFileCount":"106","status":"M","submitter":"Evgeny Veretennikov"},{"authorTime":"2020-04-03 02:36:03","codes":[{"authorDate":"2020-04-03 02:36:03","commitOrder":4,"curCode":"    public void shouldNotMigrateActiveTaskToOtherProcess() {\n        createClientWithPreviousActiveTasks(p1, 1, task00);\n        createClientWithPreviousActiveTasks(p2, 1, task01);\n\n        final StickyTaskAssignor firstAssignor = createTaskAssignor(task00, task01, task02);\n        firstAssignor.assign();\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task01));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n\n        clients.clear();\n\n        \r\n        createClientWithPreviousActiveTasks(p1, 1, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02);\n\n        final StickyTaskAssignor secondAssignor = createTaskAssignor(task00, task01, task02);\n        secondAssignor.assign();\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n    }\n","date":"2020-04-03 02:36:03","endLine":126,"groupId":"10979","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotMigrateActiveTaskToOtherProcess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/629418dbd1544d0d9312e3ec34cae0ecc6bf01.src","preCode":"    public void shouldNotMigrateActiveTaskToOtherProcess() {\n        createClientWithPreviousActiveTasks(p1, 1, task00);\n        createClientWithPreviousActiveTasks(p2, 1, task01);\n\n        final StickyTaskAssignor firstAssignor = createTaskAssignor(task00, task01, task02);\n        firstAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task01));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n\n        clients.clear();\n\n        \r\n        createClientWithPreviousActiveTasks(p1, 1, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02);\n\n        final StickyTaskAssignor secondAssignor = createTaskAssignor(task00, task01, task02);\n        secondAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"},{"authorDate":"2020-04-03 02:36:03","commitOrder":4,"curCode":"    public void shouldNotMoveAnyTasksWhenNewTasksAdded() {\n        createClientWithPreviousActiveTasks(p1, 1, task00, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02, task03);\n\n        final StickyTaskAssignor<Integer> taskAssignor = createTaskAssignor(task03, task01, task04, task02, task00, task05);\n        taskAssignor.assign();\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00, task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02, task03));\n    }\n","date":"2020-04-03 02:36:03","endLine":546,"groupId":"6780","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotMoveAnyTasksWhenNewTasksAdded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/629418dbd1544d0d9312e3ec34cae0ecc6bf01.src","preCode":"    public void shouldNotMoveAnyTasksWhenNewTasksAdded() {\n        createClientWithPreviousActiveTasks(p1, 1, task00, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02, task03);\n\n        final StickyTaskAssignor<Integer> taskAssignor = createTaskAssignor(task03, task01, task04, task02, task00, task05);\n        taskAssignor.assign(0);\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00, task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02, task03));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":537,"status":"M"}],"commitId":"2322bc0a6fdf8b26619b6aa9f09355d6c25e6298","commitMessage":"@@@KAFKA-6145: Pt. 5 Implement high availability assignment (#8337)\n\nAdds a new TaskAssignor implementation.  currently hidden behind an internal feature flag.  that implements the high availability algorithm of KIP-441.\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-04-03 02:36:03","modifiedFileCount":"12","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-04-04 02:53:51","codes":[{"authorDate":"2020-04-04 02:53:51","commitOrder":5,"curCode":"    public void shouldNotMigrateActiveTaskToOtherProcess() {\n        createClientWithPreviousActiveTasks(UUID_1, 1, TASK_0_0);\n        createClientWithPreviousActiveTasks(UUID_2, 1, TASK_0_1);\n\n        final StickyTaskAssignor firstAssignor = createTaskAssignor(TASK_0_0, TASK_0_1, TASK_0_2);\n        firstAssignor.assign();\n\n        assertThat(clients.get(UUID_1).activeTasks(), hasItems(TASK_0_0));\n        assertThat(clients.get(UUID_2).activeTasks(), hasItems(TASK_0_1));\n        assertThat(allActiveTasks(), equalTo(asList(TASK_0_0, TASK_0_1, TASK_0_2)));\n\n        clients.clear();\n\n        \r\n        createClientWithPreviousActiveTasks(UUID_1, 1, TASK_0_1);\n        createClientWithPreviousActiveTasks(UUID_2, 1, TASK_0_2);\n\n        final StickyTaskAssignor secondAssignor = createTaskAssignor(TASK_0_0, TASK_0_1, TASK_0_2);\n        secondAssignor.assign();\n\n        assertThat(clients.get(UUID_1).activeTasks(), hasItems(TASK_0_1));\n        assertThat(clients.get(UUID_2).activeTasks(), hasItems(TASK_0_2));\n        assertThat(allActiveTasks(), equalTo(asList(TASK_0_0, TASK_0_1, TASK_0_2)));\n    }\n","date":"2020-04-04 02:53:51","endLine":130,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotMigrateActiveTaskToOtherProcess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d2/41a57a3a127a56fc409e066fd9b41a7ffb3000.src","preCode":"    public void shouldNotMigrateActiveTaskToOtherProcess() {\n        createClientWithPreviousActiveTasks(p1, 1, task00);\n        createClientWithPreviousActiveTasks(p2, 1, task01);\n\n        final StickyTaskAssignor firstAssignor = createTaskAssignor(task00, task01, task02);\n        firstAssignor.assign();\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task01));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n\n        clients.clear();\n\n        \r\n        createClientWithPreviousActiveTasks(p1, 1, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02);\n\n        final StickyTaskAssignor secondAssignor = createTaskAssignor(task00, task01, task02);\n        secondAssignor.assign();\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02));\n        assertThat(allActiveTasks(), equalTo(Arrays.asList(task00, task01, task02)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-04-04 02:53:51","commitOrder":5,"curCode":"    public void shouldNotMoveAnyTasksWhenNewTasksAdded() {\n        createClientWithPreviousActiveTasks(UUID_1, 1, TASK_0_0, TASK_0_1);\n        createClientWithPreviousActiveTasks(UUID_2, 1, TASK_0_2, TASK_0_3);\n\n        final StickyTaskAssignor taskAssignor = createTaskAssignor(TASK_0_3, TASK_0_1, TASK_0_4, TASK_0_2, TASK_0_0, TASK_0_5);\n        taskAssignor.assign();\n\n        assertThat(clients.get(UUID_1).activeTasks(), hasItems(TASK_0_0, TASK_0_1));\n        assertThat(clients.get(UUID_2).activeTasks(), hasItems(TASK_0_2, TASK_0_3));\n    }\n","date":"2020-04-04 02:53:51","endLine":551,"groupId":"12264","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotMoveAnyTasksWhenNewTasksAdded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d2/41a57a3a127a56fc409e066fd9b41a7ffb3000.src","preCode":"    public void shouldNotMoveAnyTasksWhenNewTasksAdded() {\n        createClientWithPreviousActiveTasks(p1, 1, task00, task01);\n        createClientWithPreviousActiveTasks(p2, 1, task02, task03);\n\n        final StickyTaskAssignor<Integer> taskAssignor = createTaskAssignor(task03, task01, task04, task02, task00, task05);\n        taskAssignor.assign();\n\n        assertThat(clients.get(p1).activeTasks(), hasItems(task00, task01));\n        assertThat(clients.get(p2).activeTasks(), hasItems(task02, task03));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":542,"status":"M"}],"commitId":"6e0d553350cef876f4fd2de0e3b8e6e40ce6be44","commitMessage":"@@@MINOR: clean up Streams assignment classes and tests (#8406)\n\nFirst set of cleanup pushed to followup PR after KIP-441 Pt. 5. Main changes are:\n\n1. Moved `RankedClient` and the static `buildClientRankingsByTask` to a new file\n2. Moved `Movement` and the static `getMovements` to a new file (also renamed to `TaskMovement`)\n3. Consolidated the many common variables throughout the assignment tests to the new `AssignmentTestUtils` \n4. New utility to generate comparable/predictable UUIDs for tests.  and removed the generic from `TaskAssignor` and all related classes\n\nReviewers: John Roesler <vvcephei@apache.org>.  Andrew Choi <a24choi@edu.uwaterloo.ca>","date":"2020-04-04 02:53:51","modifiedFileCount":"16","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-04-29 04:57:11","codes":[{"authorDate":"2020-04-29 04:57:11","commitOrder":6,"curCode":"    public void shouldNotMigrateActiveTaskToOtherProcess() {\n        createClientWithPreviousActiveTasks(UUID_1, 1, TASK_0_0);\n        createClientWithPreviousActiveTasks(UUID_2, 1, TASK_0_1);\n\n        assertThat(assign(TASK_0_0, TASK_0_1, TASK_0_2), is(false));\n\n        assertThat(clients.get(UUID_1).activeTasks(), hasItems(TASK_0_0));\n        assertThat(clients.get(UUID_2).activeTasks(), hasItems(TASK_0_1));\n        assertThat(allActiveTasks(), equalTo(asList(TASK_0_0, TASK_0_1, TASK_0_2)));\n\n        clients.clear();\n\n        \r\n        createClientWithPreviousActiveTasks(UUID_1, 1, TASK_0_1);\n        createClientWithPreviousActiveTasks(UUID_2, 1, TASK_0_2);\n\n        assertThat(assign(TASK_0_0, TASK_0_1, TASK_0_2), is(false));\n\n        assertThat(clients.get(UUID_1).activeTasks(), hasItems(TASK_0_1));\n        assertThat(clients.get(UUID_2).activeTasks(), hasItems(TASK_0_2));\n        assertThat(allActiveTasks(), equalTo(asList(TASK_0_0, TASK_0_1, TASK_0_2)));\n    }\n","date":"2020-04-29 04:57:11","endLine":133,"groupId":"102132","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotMigrateActiveTaskToOtherProcess","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/03832f28a281836e9e0381973c2ccc00fc94e4.src","preCode":"    public void shouldNotMigrateActiveTaskToOtherProcess() {\n        createClientWithPreviousActiveTasks(UUID_1, 1, TASK_0_0);\n        createClientWithPreviousActiveTasks(UUID_2, 1, TASK_0_1);\n\n        final StickyTaskAssignor firstAssignor = createTaskAssignor(TASK_0_0, TASK_0_1, TASK_0_2);\n        firstAssignor.assign();\n\n        assertThat(clients.get(UUID_1).activeTasks(), hasItems(TASK_0_0));\n        assertThat(clients.get(UUID_2).activeTasks(), hasItems(TASK_0_1));\n        assertThat(allActiveTasks(), equalTo(asList(TASK_0_0, TASK_0_1, TASK_0_2)));\n\n        clients.clear();\n\n        \r\n        createClientWithPreviousActiveTasks(UUID_1, 1, TASK_0_1);\n        createClientWithPreviousActiveTasks(UUID_2, 1, TASK_0_2);\n\n        final StickyTaskAssignor secondAssignor = createTaskAssignor(TASK_0_0, TASK_0_1, TASK_0_2);\n        secondAssignor.assign();\n\n        assertThat(clients.get(UUID_1).activeTasks(), hasItems(TASK_0_1));\n        assertThat(clients.get(UUID_2).activeTasks(), hasItems(TASK_0_2));\n        assertThat(allActiveTasks(), equalTo(asList(TASK_0_0, TASK_0_1, TASK_0_2)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"},{"authorDate":"2020-04-29 04:57:11","commitOrder":6,"curCode":"    public void shouldNotMoveAnyTasksWhenNewTasksAdded() {\n        createClientWithPreviousActiveTasks(UUID_1, 1, TASK_0_0, TASK_0_1);\n        createClientWithPreviousActiveTasks(UUID_2, 1, TASK_0_2, TASK_0_3);\n\n        final boolean probingRebalanceNeeded = assign(TASK_0_3, TASK_0_1, TASK_0_4, TASK_0_2, TASK_0_0, TASK_0_5);\n        assertThat(probingRebalanceNeeded, is(false));\n\n        assertThat(clients.get(UUID_1).activeTasks(), hasItems(TASK_0_0, TASK_0_1));\n        assertThat(clients.get(UUID_2).activeTasks(), hasItems(TASK_0_2, TASK_0_3));\n    }\n","date":"2020-04-29 04:57:11","endLine":553,"groupId":"102132","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotMoveAnyTasksWhenNewTasksAdded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/03832f28a281836e9e0381973c2ccc00fc94e4.src","preCode":"    public void shouldNotMoveAnyTasksWhenNewTasksAdded() {\n        createClientWithPreviousActiveTasks(UUID_1, 1, TASK_0_0, TASK_0_1);\n        createClientWithPreviousActiveTasks(UUID_2, 1, TASK_0_2, TASK_0_3);\n\n        final StickyTaskAssignor taskAssignor = createTaskAssignor(TASK_0_3, TASK_0_1, TASK_0_4, TASK_0_2, TASK_0_0, TASK_0_5);\n        taskAssignor.assign();\n\n        assertThat(clients.get(UUID_1).activeTasks(), hasItems(TASK_0_0, TASK_0_1));\n        assertThat(clients.get(UUID_2).activeTasks(), hasItems(TASK_0_2, TASK_0_3));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/assignment/StickyTaskAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":544,"status":"M"}],"commitId":"5bb3415c77cc61b7d1591ccfe028d10bbf9f2a7a","commitMessage":"@@@KAFKA-6145: KIP-441: Add TaskAssignor class config (#8541)\n\n* add a config to set the TaskAssignor\n* set the default assignor to HighAvailabilityTaskAssignor\n* fix broken tests (with some TODOs in the system tests)\n\nImplements: KIP-441\nReviewers: Bruno Cadonna <bruno@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2020-04-29 04:57:11","modifiedFileCount":"17","status":"M","submitter":"John Roesler"}]
