[{"authorTime":"2018-09-26 04:41:22","codes":[{"authorDate":"2018-09-26 04:41:22","commitOrder":1,"curCode":"    public void shouldRoundTripOldNull() {\n        final byte[] serialized = serde.serializer().serialize(null, new Change<>(\"new\", null));\n        assertThat(\n            serde.deserializer().deserialize(null, serialized),\n            is(new Change<>(\"new\", null))\n        );\n    }\n","date":"2018-09-26 04:41:22","endLine":60,"groupId":"10612","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRoundTripOldNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a6/a888840fdf4d8361f488b7f6b315cc89ec6c09.src","preCode":"    public void shouldRoundTripOldNull() {\n        final byte[] serialized = serde.serializer().serialize(null, new Change<>(\"new\", null));\n        assertThat(\n            serde.deserializer().deserialize(null, serialized),\n            is(new Change<>(\"new\", null))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/FullChangeSerdeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2018-09-26 04:41:22","commitOrder":1,"curCode":"    public void shouldRoundTripNewNull() {\n        final byte[] serialized = serde.serializer().serialize(null, new Change<>(null, \"old\"));\n        assertThat(\n            serde.deserializer().deserialize(null, serialized),\n            is(new Change<>(null, \"old\"))\n        );\n    }\n","date":"2018-09-26 04:41:22","endLine":69,"groupId":"10612","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldRoundTripNewNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a6/a888840fdf4d8361f488b7f6b315cc89ec6c09.src","preCode":"    public void shouldRoundTripNewNull() {\n        final byte[] serialized = serde.serializer().serialize(null, new Change<>(null, \"old\"));\n        assertThat(\n            serde.deserializer().deserialize(null, serialized),\n            is(new Change<>(null, \"old\"))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/FullChangeSerdeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"}],"commitId":"f712ce69fc2cb6a164b1ea8e491c9d68e6661933","commitMessage":"@@@KAFKA-7223: add tests in preparation for suppression (#5687)\n\nThis is Part 2 of suppression.\nPart 1 was #5567\n\nIn an effort to control the scope of the review.  this PR is just the tests for buffered suppression.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-09-26 04:41:22","modifiedFileCount":"9","status":"B","submitter":"John Roesler"},{"authorTime":"2019-06-13 21:48:15","codes":[{"authorDate":"2019-06-13 21:48:15","commitOrder":2,"curCode":"    public void shouldRoundTripOldNull() {\n        final Change<byte[]> serialized = serde.serializeParts(null, new Change<>(\"new\", null));\n        final byte[] legacyFormat = FullChangeSerde.composeLegacyFormat(serialized);\n        final Change<byte[]> decomposedLegacyFormat = FullChangeSerde.decomposeLegacyFormat(legacyFormat);\n        assertThat(\n            serde.deserializeParts(null, decomposedLegacyFormat),\n            is(new Change<>(\"new\", null))\n        );\n    }\n","date":"2019-06-13 21:48:15","endLine":66,"groupId":"12092","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRoundTripOldNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/e6c0697ea072cefebdffd9c8be2b58a44988a7.src","preCode":"    public void shouldRoundTripOldNull() {\n        final byte[] serialized = serde.serializer().serialize(null, new Change<>(\"new\", null));\n        assertThat(\n            serde.deserializer().deserialize(null, serialized),\n            is(new Change<>(\"new\", null))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/FullChangeSerdeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2019-06-13 21:48:15","commitOrder":2,"curCode":"    public void shouldRoundTripNewNull() {\n        final Change<byte[]> serialized = serde.serializeParts(null, new Change<>(null, \"old\"));\n        final byte[] legacyFormat = FullChangeSerde.composeLegacyFormat(serialized);\n        final Change<byte[]> decomposedLegacyFormat = FullChangeSerde.decomposeLegacyFormat(legacyFormat);\n        assertThat(\n            serde.deserializeParts(null, decomposedLegacyFormat),\n            is(new Change<>(null, \"old\"))\n        );\n    }\n","date":"2019-06-13 21:48:15","endLine":77,"groupId":"12092","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldRoundTripNewNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/e6c0697ea072cefebdffd9c8be2b58a44988a7.src","preCode":"    public void shouldRoundTripNewNull() {\n        final byte[] serialized = serde.serializer().serialize(null, new Change<>(null, \"old\"));\n        assertThat(\n            serde.deserializer().deserialize(null, serialized),\n            is(new Change<>(null, \"old\"))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/FullChangeSerdeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"e54ab292e7e2fd1d18e82387a586969ba57eb7ea","commitMessage":"@@@KAFKA-8452: Compressed BufferValue (#6848)\n\nDe-duplicate the common case in which the prior value is the same as the old value.\n\nReviewers: Sophie Blee-Goldman <sophie@confluent.io>.   Bill Bejeck <bbejeck@gmail.com>","date":"2019-06-13 21:48:15","modifiedFileCount":"13","status":"M","submitter":"John Roesler"},{"authorTime":"2019-06-20 00:45:35","codes":[{"authorDate":"2019-06-20 00:45:35","commitOrder":3,"curCode":"    public void shouldRoundTripOldNull() {\n        final Change<byte[]> serialized = serde.serializeParts(null, new Change<>(\"new\", null));\n        final byte[] legacyFormat = FullChangeSerde.mergeChangeArraysIntoSingleLegacyFormattedArray(serialized);\n        final Change<byte[]> decomposedLegacyFormat = FullChangeSerde.decomposeLegacyFormattedArrayIntoChangeArrays(legacyFormat);\n        assertThat(\n            serde.deserializeParts(null, decomposedLegacyFormat),\n            is(new Change<>(\"new\", null))\n        );\n    }\n","date":"2019-06-20 00:45:35","endLine":66,"groupId":"12092","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRoundTripOldNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ac/6762f504cf77ec6c0b37e0dc89eb7cc3582111.src","preCode":"    public void shouldRoundTripOldNull() {\n        final Change<byte[]> serialized = serde.serializeParts(null, new Change<>(\"new\", null));\n        final byte[] legacyFormat = FullChangeSerde.composeLegacyFormat(serialized);\n        final Change<byte[]> decomposedLegacyFormat = FullChangeSerde.decomposeLegacyFormat(legacyFormat);\n        assertThat(\n            serde.deserializeParts(null, decomposedLegacyFormat),\n            is(new Change<>(\"new\", null))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/FullChangeSerdeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2019-06-20 00:45:35","commitOrder":3,"curCode":"    public void shouldRoundTripNewNull() {\n        final Change<byte[]> serialized = serde.serializeParts(null, new Change<>(null, \"old\"));\n        final byte[] legacyFormat = FullChangeSerde.mergeChangeArraysIntoSingleLegacyFormattedArray(serialized);\n        final Change<byte[]> decomposedLegacyFormat = FullChangeSerde.decomposeLegacyFormattedArrayIntoChangeArrays(legacyFormat);\n        assertThat(\n            serde.deserializeParts(null, decomposedLegacyFormat),\n            is(new Change<>(null, \"old\"))\n        );\n    }\n","date":"2019-06-20 00:45:35","endLine":77,"groupId":"12092","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldRoundTripNewNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ac/6762f504cf77ec6c0b37e0dc89eb7cc3582111.src","preCode":"    public void shouldRoundTripNewNull() {\n        final Change<byte[]> serialized = serde.serializeParts(null, new Change<>(null, \"old\"));\n        final byte[] legacyFormat = FullChangeSerde.composeLegacyFormat(serialized);\n        final Change<byte[]> decomposedLegacyFormat = FullChangeSerde.decomposeLegacyFormat(legacyFormat);\n        assertThat(\n            serde.deserializeParts(null, decomposedLegacyFormat),\n            is(new Change<>(null, \"old\"))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/FullChangeSerdeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"a7e771c6da72bb7f3c5c5cbab3dc9c4fd403f866","commitMessage":"@@@KAFKA-8452: Compressed BufferValue review follow-up (#6940)\n\nBelatedly address a few code review comments from #6848\n\nReviewers: Bill Bejeck <bbejeck@gmail.com>","date":"2019-06-20 00:45:35","modifiedFileCount":"7","status":"M","submitter":"John Roesler"},{"authorTime":"2020-06-27 10:41:51","codes":[{"authorDate":"2020-06-27 10:41:51","commitOrder":4,"curCode":"    public void shouldRoundTripOldNull() {\n        final Change<byte[]> serialized = serde.serializeParts(null, new Change<>(\"new\", null));\n        final byte[] legacyFormat = mergeChangeArraysIntoSingleLegacyFormattedArray(serialized);\n        final Change<byte[]> decomposedLegacyFormat = FullChangeSerde.decomposeLegacyFormattedArrayIntoChangeArrays(legacyFormat);\n        assertThat(\n            serde.deserializeParts(null, decomposedLegacyFormat),\n            is(new Change<>(\"new\", null))\n        );\n    }\n","date":"2020-06-27 10:41:51","endLine":95,"groupId":"101420","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldRoundTripOldNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/e0c88bd1eef5fe11446ec5b0a549f0c01c67b0.src","preCode":"    public void shouldRoundTripOldNull() {\n        final Change<byte[]> serialized = serde.serializeParts(null, new Change<>(\"new\", null));\n        final byte[] legacyFormat = FullChangeSerde.mergeChangeArraysIntoSingleLegacyFormattedArray(serialized);\n        final Change<byte[]> decomposedLegacyFormat = FullChangeSerde.decomposeLegacyFormattedArrayIntoChangeArrays(legacyFormat);\n        assertThat(\n            serde.deserializeParts(null, decomposedLegacyFormat),\n            is(new Change<>(\"new\", null))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/FullChangeSerdeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2020-06-27 10:41:51","commitOrder":4,"curCode":"    public void shouldRoundTripNewNull() {\n        final Change<byte[]> serialized = serde.serializeParts(null, new Change<>(null, \"old\"));\n        final byte[] legacyFormat = mergeChangeArraysIntoSingleLegacyFormattedArray(serialized);\n        final Change<byte[]> decomposedLegacyFormat = FullChangeSerde.decomposeLegacyFormattedArrayIntoChangeArrays(legacyFormat);\n        assertThat(\n            serde.deserializeParts(null, decomposedLegacyFormat),\n            is(new Change<>(null, \"old\"))\n        );\n    }\n","date":"2020-06-27 10:41:51","endLine":106,"groupId":"101420","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldRoundTripNewNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/e0c88bd1eef5fe11446ec5b0a549f0c01c67b0.src","preCode":"    public void shouldRoundTripNewNull() {\n        final Change<byte[]> serialized = serde.serializeParts(null, new Change<>(null, \"old\"));\n        final byte[] legacyFormat = FullChangeSerde.mergeChangeArraysIntoSingleLegacyFormattedArray(serialized);\n        final Change<byte[]> decomposedLegacyFormat = FullChangeSerde.decomposeLegacyFormattedArrayIntoChangeArrays(legacyFormat);\n        assertThat(\n            serde.deserializeParts(null, decomposedLegacyFormat),\n            is(new Change<>(null, \"old\"))\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/FullChangeSerdeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"831938952e47d4e65ae40c389e74756c596c6989","commitMessage":"@@@KAFKA-10173: Fix suppress changelog binary schema compatibility (#8905)\n\nWe inadvertently changed the binary schema of the suppress buffer changelog\nin 2.4.0 without bumping the schema version number. As a result.  it is impossible\nto upgrade from 2.3.x to 2.4+ if you are using suppression.\n\n* Refactor the schema compatibility test to use serialized data from older versions\nas a more foolproof compatibility test.\n* Refactor the upgrade system test to use the smoke test application so that we\nactually exercise a significant portion of the Streams API during upgrade testing\n* Add more recent versions to the upgrade system test matrix\n* Fix the compatibility bug by bumping the schema version to 3\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-06-27 10:41:51","modifiedFileCount":"9","status":"M","submitter":"John Roesler"}]
