[{"authorTime":"2021-02-04 02:26:30","codes":[{"authorDate":"2021-03-03 01:53:27","commitOrder":2,"curCode":"    public void shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey() {\n        final List<KeyValue<Bytes, byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abc\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abcd\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abce\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        byteStore.putAll(entries);\n        byteStore.flush();\n\n        final KeyValueIterator<Bytes, byte[]> keysWithPrefixAsabcd = byteStore.prefixScan(\"abcd\", stringSerializer);\n        int numberOfKeysReturned = 0;\n\n        while (keysWithPrefixAsabcd.hasNext()) {\n            keysWithPrefixAsabcd.next().key.get();\n            numberOfKeysReturned++;\n        }\n\n        assertThat(numberOfKeysReturned, is(1));\n    }\n","date":"2021-03-03 01:53:27","endLine":170,"groupId":"16898","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b4/e3e1f3c291883a1345e60f5a4f3a0dd588e8dd.src","preCode":"    public void shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey() {\n        final List<KeyValue<Bytes, byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abc\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abcd\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abce\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        byteStore.putAll(entries);\n        byteStore.flush();\n\n        final KeyValueIterator<Bytes, byte[]> keysWithPrefixAsabcd = byteStore.prefixScan(\"abcd\", stringSerializer);\n        int numberOfKeysReturned = 0;\n\n        while (keysWithPrefixAsabcd.hasNext()) {\n            keysWithPrefixAsabcd.next().key.get();\n            numberOfKeysReturned++;\n        }\n\n        assertThat(numberOfKeysReturned, is(1));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/InMemoryKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"B"},{"authorDate":"2021-02-04 02:26:30","commitOrder":2,"curCode":"    public void shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey() {\n        final List<KeyValue<Bytes, byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abc\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abcd\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abce\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n        rocksDBStore.putAll(entries);\n        rocksDBStore.flush();\n\n        final KeyValueIterator<Bytes, byte[]> keysWithPrefixAsabcd = rocksDBStore.prefixScan(\"abcd\", stringSerializer);\n        int numberOfKeysReturned = 0;\n\n        while (keysWithPrefixAsabcd.hasNext()) {\n            keysWithPrefixAsabcd.next().key.get();\n            numberOfKeysReturned++;\n        }\n\n        assertThat(numberOfKeysReturned, is(1));\n    }\n","date":"2021-02-04 02:26:30","endLine":433,"groupId":"2167","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/05/68df2d5689c9e509a9f8906bf84ce6670967e7.src","preCode":"    public void shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey() {\n        final List<KeyValue<Bytes, byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abc\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abcd\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abce\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n        rocksDBStore.putAll(entries);\n        rocksDBStore.flush();\n\n        final KeyValueIterator<Bytes, byte[]> keysWithPrefixAsabcd = rocksDBStore.prefixScan(\"abcd\", stringSerializer);\n        int numberOfKeysReturned = 0;\n\n        while (keysWithPrefixAsabcd.hasNext()) {\n            keysWithPrefixAsabcd.next().key.get();\n            numberOfKeysReturned++;\n        }\n\n        assertThat(numberOfKeysReturned, is(1));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"NB"}],"commitId":"b2075a094688855be4e0cb37504c87bb09d4a576","commitMessage":"@@@KAFKA-12289: Adding test cases for prefix scan in InMemoryKeyValueStore (#10052)\n\nCo-authored-by: Bruno Cadonna <bruno@confluent.io>\n\nReviewers: Bruno Cadonna <cadonna@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2021-03-03 01:53:27","modifiedFileCount":"2","status":"M","submitter":"vamossagar12"},{"authorTime":"2021-07-27 07:23:04","codes":[{"authorDate":"2021-03-03 01:53:27","commitOrder":3,"curCode":"    public void shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey() {\n        final List<KeyValue<Bytes, byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abc\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abcd\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abce\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        byteStore.putAll(entries);\n        byteStore.flush();\n\n        final KeyValueIterator<Bytes, byte[]> keysWithPrefixAsabcd = byteStore.prefixScan(\"abcd\", stringSerializer);\n        int numberOfKeysReturned = 0;\n\n        while (keysWithPrefixAsabcd.hasNext()) {\n            keysWithPrefixAsabcd.next().key.get();\n            numberOfKeysReturned++;\n        }\n\n        assertThat(numberOfKeysReturned, is(1));\n    }\n","date":"2021-03-03 01:53:27","endLine":170,"groupId":"16898","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b4/e3e1f3c291883a1345e60f5a4f3a0dd588e8dd.src","preCode":"    public void shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey() {\n        final List<KeyValue<Bytes, byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abc\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abcd\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abce\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        byteStore.putAll(entries);\n        byteStore.flush();\n\n        final KeyValueIterator<Bytes, byte[]> keysWithPrefixAsabcd = byteStore.prefixScan(\"abcd\", stringSerializer);\n        int numberOfKeysReturned = 0;\n\n        while (keysWithPrefixAsabcd.hasNext()) {\n            keysWithPrefixAsabcd.next().key.get();\n            numberOfKeysReturned++;\n        }\n\n        assertThat(numberOfKeysReturned, is(1));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/InMemoryKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"N"},{"authorDate":"2021-07-27 07:23:04","commitOrder":3,"curCode":"    public void shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey() {\n        final List<KeyValue<Bytes, byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abc\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abcd\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abce\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n        rocksDBStore.putAll(entries);\n        rocksDBStore.flush();\n\n        try (final KeyValueIterator<Bytes, byte[]> keysWithPrefixAsabcd = rocksDBStore.prefixScan(\"abcd\", stringSerializer)) {\n            int numberOfKeysReturned = 0;\n\n            while (keysWithPrefixAsabcd.hasNext()) {\n                keysWithPrefixAsabcd.next().key.get();\n                numberOfKeysReturned++;\n            }\n\n            assertThat(numberOfKeysReturned, is(1));\n        }\n    }\n","date":"2021-07-27 07:23:04","endLine":455,"groupId":"2167","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/3cbe61a6518ec874fca3d88fd03a031ce3cd72.src","preCode":"    public void shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey() {\n        final List<KeyValue<Bytes, byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abc\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abcd\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abce\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n        rocksDBStore.putAll(entries);\n        rocksDBStore.flush();\n\n        final KeyValueIterator<Bytes, byte[]> keysWithPrefixAsabcd = rocksDBStore.prefixScan(\"abcd\", stringSerializer);\n        int numberOfKeysReturned = 0;\n\n        while (keysWithPrefixAsabcd.hasNext()) {\n            keysWithPrefixAsabcd.next().key.get();\n            numberOfKeysReturned++;\n        }\n\n        assertThat(numberOfKeysReturned, is(1));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"M"}],"commitId":"f9aeebed054000934af7555f39085f5caecf34bc","commitMessage":"@@@KAFKA-13123: close KeyValueIterator instances in example code and tests (#11105)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-07-27 07:23:04","modifiedFileCount":"10","status":"M","submitter":"Luke Chen"},{"authorTime":"2021-07-27 07:23:04","codes":[{"authorDate":"2021-07-27 07:26:02","commitOrder":4,"curCode":"    public void shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey() {\n        final List<KeyValue<Bytes, byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abc\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abcd\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abce\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        byteStore.putAll(entries);\n        byteStore.flush();\n\n        try (final KeyValueIterator<Bytes, byte[]> keysWithPrefixAsabcd = byteStore.prefixScan(\"abcd\", stringSerializer)) {\n            int numberOfKeysReturned = 0;\n\n            while (keysWithPrefixAsabcd.hasNext()) {\n                keysWithPrefixAsabcd.next().key.get();\n                numberOfKeysReturned++;\n            }\n\n            assertThat(numberOfKeysReturned, is(1));\n        }\n    }\n","date":"2021-07-27 07:26:02","endLine":175,"groupId":"101057","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d6/7d665134a975b31e85df16d8fb0d9e625ae91f.src","preCode":"    public void shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey() {\n        final List<KeyValue<Bytes, byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abc\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abcd\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abce\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        byteStore.putAll(entries);\n        byteStore.flush();\n\n        final KeyValueIterator<Bytes, byte[]> keysWithPrefixAsabcd = byteStore.prefixScan(\"abcd\", stringSerializer);\n        int numberOfKeysReturned = 0;\n\n        while (keysWithPrefixAsabcd.hasNext()) {\n            keysWithPrefixAsabcd.next().key.get();\n            numberOfKeysReturned++;\n        }\n\n        assertThat(numberOfKeysReturned, is(1));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/InMemoryKeyValueStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2021-07-27 07:23:04","commitOrder":4,"curCode":"    public void shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey() {\n        final List<KeyValue<Bytes, byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abc\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abcd\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abce\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n        rocksDBStore.putAll(entries);\n        rocksDBStore.flush();\n\n        try (final KeyValueIterator<Bytes, byte[]> keysWithPrefixAsabcd = rocksDBStore.prefixScan(\"abcd\", stringSerializer)) {\n            int numberOfKeysReturned = 0;\n\n            while (keysWithPrefixAsabcd.hasNext()) {\n                keysWithPrefixAsabcd.next().key.get();\n                numberOfKeysReturned++;\n            }\n\n            assertThat(numberOfKeysReturned, is(1));\n        }\n    }\n","date":"2021-07-27 07:23:04","endLine":455,"groupId":"101057","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/3cbe61a6518ec874fca3d88fd03a031ce3cd72.src","preCode":"    public void shouldReturnKeysWithGivenPrefixExcludingNextKeyLargestKey() {\n        final List<KeyValue<Bytes, byte[]>> entries = new ArrayList<>();\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abc\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abcd\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        entries.add(new KeyValue<>(\n            new Bytes(stringSerializer.serialize(null, \"abce\")),\n            stringSerializer.serialize(null, \"f\")));\n\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n        rocksDBStore.putAll(entries);\n        rocksDBStore.flush();\n\n        try (final KeyValueIterator<Bytes, byte[]> keysWithPrefixAsabcd = rocksDBStore.prefixScan(\"abcd\", stringSerializer)) {\n            int numberOfKeysReturned = 0;\n\n            while (keysWithPrefixAsabcd.hasNext()) {\n                keysWithPrefixAsabcd.next().key.get();\n                numberOfKeysReturned++;\n            }\n\n            assertThat(numberOfKeysReturned, is(1));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":427,"status":"N"}],"commitId":"818cbfba6ddf8252b7da314bbaac74201951dfb3","commitMessage":"@@@KAFKA-13125: close KeyValueIterator instances in internals tests (part 2) (#11107)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-07-27 07:26:02","modifiedFileCount":"8","status":"M","submitter":"Luke Chen"}]
