[{"authorTime":"2019-10-07 12:13:23","codes":[{"authorDate":"2019-10-07 12:13:23","commitOrder":1,"curCode":"    private void verifyWriteRaisesNpe(short version, Message message) throws Exception {\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        assertThrows(NullPointerException.class, () -> {\n            int size = message.size(cache, version);\n            ByteBuffer buf = ByteBuffer.allocate(size);\n            ByteBufferAccessor byteBufferAccessor = new ByteBufferAccessor(buf);\n            message.write(byteBufferAccessor, cache, version);\n        });\n    }\n","date":"2019-10-07 12:13:23","endLine":861,"groupId":"8008","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyWriteRaisesNpe","params":"(shortversion@Messagemessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/bb2afd97ca4fef82acb43410195bc8df214a9a.src","preCode":"    private void verifyWriteRaisesNpe(short version, Message message) throws Exception {\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        assertThrows(NullPointerException.class, () -> {\n            int size = message.size(cache, version);\n            ByteBuffer buf = ByteBuffer.allocate(size);\n            ByteBufferAccessor byteBufferAccessor = new ByteBufferAccessor(buf);\n            message.write(byteBufferAccessor, cache, version);\n        });\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/message/MessageTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":853,"status":"B"},{"authorDate":"2019-10-07 12:13:23","commitOrder":1,"curCode":"    private void verifyWriteRaisesUve(short version,\n                                      String problemText,\n                                     Message message) throws Exception {\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        UnsupportedVersionException e =\n            assertThrows(UnsupportedVersionException.class, () -> {\n                int size = message.size(cache, version);\n                ByteBuffer buf = ByteBuffer.allocate(size);\n                ByteBufferAccessor byteBufferAccessor = new ByteBufferAccessor(buf);\n                message.write(byteBufferAccessor, cache, version);\n            });\n        assertTrue(\"Expected to get an error message about \" + problemText +\n                \", but got: \" + e.getMessage(),\n                e.getMessage().contains(problemText));\n    }\n","date":"2019-10-07 12:13:23","endLine":877,"groupId":"8008","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyWriteRaisesUve","params":"(shortversion@StringproblemText@Messagemessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/bb2afd97ca4fef82acb43410195bc8df214a9a.src","preCode":"    private void verifyWriteRaisesUve(short version,\n                                      String problemText,\n                                     Message message) throws Exception {\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        UnsupportedVersionException e =\n            assertThrows(UnsupportedVersionException.class, () -> {\n                int size = message.size(cache, version);\n                ByteBuffer buf = ByteBuffer.allocate(size);\n                ByteBufferAccessor byteBufferAccessor = new ByteBufferAccessor(buf);\n                message.write(byteBufferAccessor, cache, version);\n            });\n        assertTrue(\"Expected to get an error message about \" + problemText +\n                \", but got: \" + e.getMessage(),\n                e.getMessage().contains(problemText));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/message/MessageTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":863,"status":"B"}],"commitId":"0de61a4683b92bdee803c51211c3277578ab3edf","commitMessage":"@@@KAFKA-8885; The Kafka Protocol should Support Optional Tagged Fields (#7325)\n\nThis patch implements support for optional (tagged) fields in the Kafka protocol as documented in KIP-482: https://cwiki.apache.org/confluence/display/KAFKA/KIP-482%3A+The+Kafka+Protocol+should+Support+Optional+Tagged+Fields#KIP-482:TheKafkaProtocolshouldSupportOptionalTaggedFields-TypeClasses.\n\nReviewers: David Jacot <djacot@confluent.io>.  Ismael Juma <ismael@juma.me.uk>.  Jason Gustafson <jason@confluent.io>","date":"2019-10-07 12:13:23","modifiedFileCount":"39","status":"B","submitter":"Colin Patrick McCabe"},{"authorTime":"2020-07-07 09:50:40","codes":[{"authorDate":"2020-07-07 09:50:40","commitOrder":2,"curCode":"    private void verifyWriteRaisesNpe(short version, Message message) {\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        assertThrows(NullPointerException.class, () -> {\n            int size = message.size(cache, version);\n            ByteBuffer buf = ByteBuffer.allocate(size);\n            ByteBufferAccessor byteBufferAccessor = new ByteBufferAccessor(buf);\n            message.write(byteBufferAccessor, cache, version);\n        });\n    }\n","date":"2020-07-07 09:50:40","endLine":1005,"groupId":"8008","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyWriteRaisesNpe","params":"(shortversion@Messagemessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bb/ff0ed5201acbc40481389f6b5a6a716327bfbf.src","preCode":"    private void verifyWriteRaisesNpe(short version, Message message) throws Exception {\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        assertThrows(NullPointerException.class, () -> {\n            int size = message.size(cache, version);\n            ByteBuffer buf = ByteBuffer.allocate(size);\n            ByteBufferAccessor byteBufferAccessor = new ByteBufferAccessor(buf);\n            message.write(byteBufferAccessor, cache, version);\n        });\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/message/MessageTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"M"},{"authorDate":"2020-07-07 09:50:40","commitOrder":2,"curCode":"    private void verifyWriteRaisesUve(short version,\n                                      String problemText,\n                                      Message message) {\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        UnsupportedVersionException e =\n            assertThrows(UnsupportedVersionException.class, () -> {\n                int size = message.size(cache, version);\n                ByteBuffer buf = ByteBuffer.allocate(size);\n                ByteBufferAccessor byteBufferAccessor = new ByteBufferAccessor(buf);\n                message.write(byteBufferAccessor, cache, version);\n            });\n        assertTrue(\"Expected to get an error message about \" + problemText +\n                \", but got: \" + e.getMessage(),\n                e.getMessage().contains(problemText));\n    }\n","date":"2020-07-07 09:50:40","endLine":1021,"groupId":"8008","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyWriteRaisesUve","params":"(shortversion@StringproblemText@Messagemessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bb/ff0ed5201acbc40481389f6b5a6a716327bfbf.src","preCode":"    private void verifyWriteRaisesUve(short version,\n                                      String problemText,\n                                     Message message) throws Exception {\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        UnsupportedVersionException e =\n            assertThrows(UnsupportedVersionException.class, () -> {\n                int size = message.size(cache, version);\n                ByteBuffer buf = ByteBuffer.allocate(size);\n                ByteBufferAccessor byteBufferAccessor = new ByteBufferAccessor(buf);\n                message.write(byteBufferAccessor, cache, version);\n            });\n        assertTrue(\"Expected to get an error message about \" + problemText +\n                \", but got: \" + e.getMessage(),\n                e.getMessage().contains(problemText));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/message/MessageTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1007,"status":"M"}],"commitId":"18f2589c1e087654c0cdd46d2473246f37f0b66a","commitMessage":"@@@KAFKA-10239: Make GroupInstanceId ignorable in DescribeGroups (#8989)\n\n* make GroupInstanceId ignorable in DescribeGroup\n\n* tests and cleanups\n\n* add throttle test coverage","date":"2020-07-07 09:50:40","modifiedFileCount":"2","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2020-07-07 09:50:40","commitOrder":3,"curCode":"    private void verifyWriteRaisesNpe(short version, Message message) {\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        assertThrows(NullPointerException.class, () -> {\n            int size = message.size(cache, version);\n            ByteBuffer buf = ByteBuffer.allocate(size);\n            ByteBufferAccessor byteBufferAccessor = new ByteBufferAccessor(buf);\n            message.write(byteBufferAccessor, cache, version);\n        });\n    }\n","date":"2020-07-07 09:50:40","endLine":1005,"groupId":"103554","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyWriteRaisesNpe","params":"(shortversion@Messagemessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bb/ff0ed5201acbc40481389f6b5a6a716327bfbf.src","preCode":"    private void verifyWriteRaisesNpe(short version, Message message) {\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        assertThrows(NullPointerException.class, () -> {\n            int size = message.size(cache, version);\n            ByteBuffer buf = ByteBuffer.allocate(size);\n            ByteBufferAccessor byteBufferAccessor = new ByteBufferAccessor(buf);\n            message.write(byteBufferAccessor, cache, version);\n        });\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/message/MessageTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"N"},{"authorDate":"2021-01-14 08:17:45","commitOrder":3,"curCode":"    private void verifyWriteRaisesUve(short version,\n                                      String problemText,\n                                      Message message) {\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        UnsupportedVersionException e =\n            assertThrows(UnsupportedVersionException.class, () -> {\n                int size = message.size(cache, version);\n                ByteBuffer buf = ByteBuffer.allocate(size);\n                ByteBufferAccessor byteBufferAccessor = new ByteBufferAccessor(buf);\n                message.write(byteBufferAccessor, cache, version);\n            });\n        assertTrue(e.getMessage().contains(problemText), \"Expected to get an error message about \" + problemText +\n            \", but got: \" + e.getMessage());\n    }\n","date":"2021-01-14 08:17:45","endLine":977,"groupId":"103554","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyWriteRaisesUve","params":"(shortversion@StringproblemText@Messagemessage)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/1b25e1c05f5568bb60a1a8d0873ad8792588c8.src","preCode":"    private void verifyWriteRaisesUve(short version,\n                                      String problemText,\n                                      Message message) {\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        UnsupportedVersionException e =\n            assertThrows(UnsupportedVersionException.class, () -> {\n                int size = message.size(cache, version);\n                ByteBuffer buf = ByteBuffer.allocate(size);\n                ByteBufferAccessor byteBufferAccessor = new ByteBufferAccessor(buf);\n                message.write(byteBufferAccessor, cache, version);\n            });\n        assertTrue(\"Expected to get an error message about \" + problemText +\n                \", but got: \" + e.getMessage(),\n                e.getMessage().contains(problemText));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/message/MessageTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":964,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"}]
