[{"authorTime":"2016-04-27 02:39:49","codes":[{"authorDate":"2016-04-27 02:39:49","commitOrder":6,"curCode":"    public void testFilter() {\n        KStreamBuilder builder = new KStreamBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filter(isMultipleOfThree).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topicName, expectedKeys[i], \"V\" + expectedKeys[i]);\n        }\n\n        assertEquals(2, processor.processed.size());\n    }\n","date":"2016-04-27 02:39:49","endLine":71,"groupId":"10675","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4b/e851354919860f0e9a05bed3901516c886fbb4.src","preCode":"    public void testFilter() {\n        KStreamBuilder builder = new KStreamBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filter(isMultipleOfThree).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topicName, expectedKeys[i], \"V\" + expectedKeys[i]);\n        }\n\n        assertEquals(2, processor.processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"MB"},{"authorDate":"2016-04-27 02:39:49","commitOrder":6,"curCode":"    public void testFilterNot() {\n        KStreamBuilder builder = new KStreamBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filterNot(isMultipleOfThree).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topicName, expectedKeys[i], \"V\" + expectedKeys[i]);\n        }\n\n        assertEquals(5, processor.processed.size());\n    }\n","date":"2016-04-27 02:39:49","endLine":91,"groupId":"10674","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4b/e851354919860f0e9a05bed3901516c886fbb4.src","preCode":"    public void testFilterNot() {\n        KStreamBuilder builder = new KStreamBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filterNot(isMultipleOfThree).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topicName, expectedKeys[i], \"V\" + expectedKeys[i]);\n        }\n\n        assertEquals(5, processor.processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"MB"}],"commitId":"1a73629bb43bbc781e5a968a61f6079365bc75b7","commitMessage":"@@@KAFKA-3607: Close KStreamTestDriver upon completing; follow-up fixes to be tracked in KAFKA-3623\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Eno Thereska.  Michael G. Noll.  Ismael Juma\n\nCloses #1258 from guozhangwang/K3607\n","date":"2016-04-27 02:39:49","modifiedFileCount":"30","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2017-01-11 03:53:03","codes":[{"authorDate":"2017-01-11 03:53:03","commitOrder":7,"curCode":"    public void testFilter() {\n        KStreamBuilder builder = new KStreamBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filter(isMultipleOfThree).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(2, processor.processed.size());\n    }\n","date":"2017-01-11 03:53:03","endLine":71,"groupId":"10675","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/2df07592d39293df55cdd6284a597cb8d259f8.src","preCode":"    public void testFilter() {\n        KStreamBuilder builder = new KStreamBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filter(isMultipleOfThree).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topicName, expectedKeys[i], \"V\" + expectedKeys[i]);\n        }\n\n        assertEquals(2, processor.processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2017-01-11 03:53:03","commitOrder":7,"curCode":"    public void testFilterNot() {\n        KStreamBuilder builder = new KStreamBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filterNot(isMultipleOfThree).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(5, processor.processed.size());\n    }\n","date":"2017-01-11 03:53:03","endLine":91,"groupId":"10674","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/2df07592d39293df55cdd6284a597cb8d259f8.src","preCode":"    public void testFilterNot() {\n        KStreamBuilder builder = new KStreamBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filterNot(isMultipleOfThree).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topicName, expectedKeys[i], \"V\" + expectedKeys[i]);\n        }\n\n        assertEquals(5, processor.processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"75469a3b602c26ea81d6fc0a409d39d321195ea4","commitMessage":"@@@MINOR: Replacing for with foreach loop in stream test classes\n\nAuthor: Prabhat Kashyap <prabhat.kashyap@knoldus.in>\n\nReviewers: Ismael Juma.  Damian Guy.  Guozhang Wang\n\nCloses #2305 from PKOfficial/code-refactor\n","date":"2017-01-11 03:53:03","modifiedFileCount":"17","status":"M","submitter":"Prabhat Kashyap"},{"authorTime":"2017-08-01 06:28:59","codes":[{"authorDate":"2017-08-01 06:28:59","commitOrder":8,"curCode":"    public void testFilter() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filter(isMultipleOfThree).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(2, processor.processed.size());\n    }\n","date":"2017-08-01 06:28:59","endLine":69,"groupId":"10675","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/9d8b29b600a9d51cacc39463f9f6fb8e7b1a1a.src","preCode":"    public void testFilter() {\n        KStreamBuilder builder = new KStreamBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filter(isMultipleOfThree).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(2, processor.processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2017-08-01 06:28:59","commitOrder":8,"curCode":"    public void testFilterNot() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filterNot(isMultipleOfThree).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(5, processor.processed.size());\n    }\n","date":"2017-08-01 06:28:59","endLine":89,"groupId":"10674","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/9d8b29b600a9d51cacc39463f9f6fb8e7b1a1a.src","preCode":"    public void testFilterNot() {\n        KStreamBuilder builder = new KStreamBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filterNot(isMultipleOfThree).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(5, processor.processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"da2205578be3228ce40eb5e59f6bbcb0c8da0aba","commitMessage":"@@@KAFKA-5671: Add StreamsBuilder and Deprecate KStreamBuilder\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3602 from mjsax/kafka-5671-add-streamsbuilder\n","date":"2017-08-01 06:28:59","modifiedFileCount":"83","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-08-02 07:16:34","codes":[{"authorDate":"2017-08-02 07:16:34","commitOrder":9,"curCode":"    public void testFilter() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filter(isMultipleOfThree).process(processor);\n\n        driver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(2, processor.processed.size());\n    }\n","date":"2017-08-02 07:16:34","endLine":62,"groupId":"10675","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/c203b1fd59a3db44e3e530c3521db657cc4d36.src","preCode":"    public void testFilter() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filter(isMultipleOfThree).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(2, processor.processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2017-08-02 07:16:34","commitOrder":9,"curCode":"    public void testFilterNot() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filterNot(isMultipleOfThree).process(processor);\n\n        driver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(5, processor.processed.size());\n    }\n","date":"2017-08-02 07:16:34","endLine":82,"groupId":"10674","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/c203b1fd59a3db44e3e530c3521db657cc4d36.src","preCode":"    public void testFilterNot() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filterNot(isMultipleOfThree).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(5, processor.processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"edcefccfd7bd83110746fa81669e0d69ece5bb4b","commitMessage":"@@@KAFKA-3623: KStreamTestDriver extends ExternalResource\n\nIn the streams project.  there are a number of unit tests that has duplicate\ncode with respect to the tearDown() method.  in which it tries to close the\nKStreamTestDriver connection. The goal of this changeset is to eliminate\nthis duplication by converting the KStreamTestDriver class to an ExternalResource\nclass which is the base class of JUnit Rule.\n\nIn every unit tests that calls KStreamTestDriver.  we annotate the KStreamTestDriver\nusing Rule annotation. In the KStreamTestDriver class.  we override the after()\nmethod. This after() method in turn calls the close() method which was previously\ncalled in the tearDown() method in the unit tests. By annotating the KStreamTestDriver\nas a Rule.  the after() method will be called automatically after every testcase.\n\nAuthor: johnma14 <mariamj@us.ibm.com>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3589 from johnma14/bug/KAFKA-3623\n","date":"2017-08-02 07:16:34","modifiedFileCount":"34","status":"M","submitter":"Mariam John"},{"authorTime":"2017-09-08 15:21:48","codes":[{"authorDate":"2017-09-08 15:21:48","commitOrder":10,"curCode":"    public void testFilter() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(processor);\n\n        driver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(2, processor.processed.size());\n    }\n","date":"2017-09-08 15:21:48","endLine":63,"groupId":"8590","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f1/a6152852fd9dc31a7dcb2cc0d3ba298140bf65.src","preCode":"    public void testFilter() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filter(isMultipleOfThree).process(processor);\n\n        driver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(2, processor.processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2017-09-08 15:21:48","commitOrder":10,"curCode":"    public void testFilterNot() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(processor);\n\n        driver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(5, processor.processed.size());\n    }\n","date":"2017-09-08 15:21:48","endLine":83,"groupId":"8589","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f1/a6152852fd9dc31a7dcb2cc0d3ba298140bf65.src","preCode":"    public void testFilterNot() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.filterNot(isMultipleOfThree).process(processor);\n\n        driver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(5, processor.processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"d0ee6ed36baf702fa24dac8ae31f45fc27324d89","commitMessage":"@@@KAFKA-5832; add Consumed and change StreamBuilder to use it\n\nAdded `Consumed` class.\nUpdated `StreamBuilder#stream`.  `StreamBuilder#table`.  `StreamBuilder#globalTable`\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3784 from dguy/kip-182-stream-builder\n","date":"2017-09-08 15:21:48","modifiedFileCount":"44","status":"M","submitter":"Damian Guy"},{"authorTime":"2018-04-27 02:30:42","codes":[{"authorDate":"2018-04-27 02:30:42","commitOrder":11,"curCode":"    public void testFilter() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(processor);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n        }\n\n        assertEquals(2, processor.processed.size());\n    }\n","date":"2018-04-27 02:30:42","endLine":89,"groupId":"8590","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a6/7d688e278215671ed8f204e1799eef2c091376.src","preCode":"    public void testFilter() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(processor);\n\n        driver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(2, processor.processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2018-04-27 02:30:42","commitOrder":11,"curCode":"    public void testFilterNot() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(processor);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n        }\n\n        assertEquals(5, processor.processed.size());\n    }\n","date":"2018-04-27 02:30:42","endLine":109,"groupId":"8589","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a6/7d688e278215671ed8f204e1799eef2c091376.src","preCode":"    public void testFilterNot() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(processor);\n\n        driver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, \"V\" + expectedKey);\n        }\n\n        assertEquals(5, processor.processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"885abbfcd40aab57acec278d976956f07be15090","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [partial] (#4832)\n\n* Remove ProcessorTopologyTestDriver from TopologyTest\n* Fix ProcessorTopologyTest\n* Remove ProcessorTopologyTestDriver and InternalTopologyAccessor\n* Partially refactored StreamsBuilderTest but missing one test\n* Refactor KStreamBuilderTest\n* Refactor AbstractStreamTest\n* Further cleanup of AbstractStreamTest\n* Refactor GlobalKTableJoinsTest\n* Refactor InternalStreamsBuilderTest\n* Fix circular dependency in build.gradle\n* Refactor KGroupedStreamImplTest\n* Partial modifications to KGroupedTableImplTest\n* Refactor KGroupedTableImplTest\n* Refactor KStreamBranchTest\n* Refactor KStreamFilterTest\n* Refactor KStreamFlatMapTest KStreamFlatMapValuesTest\n* Refactor KStreamForeachTest\n* Refactor KStreamGlobalKTableJoinTest\n* Refactor KStreamGlobalKTableLeftJoinTest\n* Refactor KStreamImplTest\n* Refactor KStreamImplTest\n* Refactor KStreamKStreamJoinTest\n* Refactor KStreamKStreamLeftJoinTest\n* Refactor KStreamKTableJoinTest\n* Refactor KStreamKTableLeftJoinTest\n* Refactor KStreamMapTest and KStreamMapValuesTest\n* Refactor KStreamPeekTest and KStreamTransformTest\n* Refactor KStreamSelectKeyTest\n* Refactor KStreamTransformValuesTest\n* Refactor KStreamWindowAggregateTest\n* Add Depercation anotation to KStreamTestDriver and rollback failing tests in StreamsBuilderTest and KTableAggregateTest\n* Refactor KTableFilterTest\n* Refactor KTableForeachTest\n* Add getter for ProcessorTopology.  and simplify tests in StreamsBuilderTest\n* Refactor KTableImplTest\n* Remove unused imports\n* Refactor KTableAggregateTest\n* Fix style errors\n* Fix gradle build\n* Address reviewer comments:\n  - Remove properties new instance\n  - Remove extraneous line\n  - Remove unnecessary TopologyTestDriver instances from StreamsBuilderTest\n  - Move props.clear() to @After\n  - Clarify use of timestamp in KStreamFlatMapValuesTest\n  - Keep test using old Punctuator in KStreamTransformTest\n  - Add comment to clarify clock advances in KStreamTransformTest\n  - Add TopologyTestDriverWrapper class to access the protected constructor of TopologyTestDriver\n  - Revert KTableImplTest.testRepartition to KStreamTestDriver to avoid exposing the TopologyTestDriver processor topology\n  - Revert partially migrated classes: KTableAggregateTest.  KTableFilterTest.  and KTableImplTest\n* Rebase on current trunk an fix conflicts\n\nReviewers: Matthias J Sax <matthias@confluentio>.  Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2018-04-27 02:30:42","modifiedFileCount":"33","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-05-04 23:42:01","codes":[{"authorDate":"2018-05-04 23:42:01","commitOrder":12,"curCode":"    public void testFilter() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> supplier;\n\n        supplier = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(supplier);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n        }\n\n        assertEquals(2, supplier.theCapturedProcessor().processed.size());\n    }\n","date":"2018-05-04 23:42:01","endLine":89,"groupId":"1829","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d3/38fe3f99b6a406736930d1461ccab8bc86df01.src","preCode":"    public void testFilter() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(processor);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n        }\n\n        assertEquals(2, processor.processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2018-05-04 23:42:01","commitOrder":12,"curCode":"    public void testFilterNot() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> supplier;\n\n        supplier = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(supplier);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n        }\n\n        assertEquals(5, supplier.theCapturedProcessor().processed.size());\n    }\n","date":"2018-05-04 23:42:01","endLine":109,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d3/38fe3f99b6a406736930d1461ccab8bc86df01.src","preCode":"    public void testFilterNot() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(processor);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n        }\n\n        assertEquals(5, processor.processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"af983267be7a2d0f81527f5a348af377f30caee4","commitMessage":"@@@MINOR: Removed deprecated schedule function (#4908)\n\nWhile working on this.  I also refactored the MockProcessor out of the MockProcessorSupplier to cleanup the unit test paths.\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-05-04 23:42:01","modifiedFileCount":"62","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-05-08 00:21:20","codes":[{"authorDate":"2018-05-08 00:21:20","commitOrder":13,"curCode":"    public void testFilter() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> supplier;\n\n        supplier = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n            }\n        }\n\n        assertEquals(2, supplier.theCapturedProcessor().processed.size());\n    }\n","date":"2018-05-08 00:21:20","endLine":68,"groupId":"1829","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/51/a994b6addb260b73de0b306c27fe253ea969c3.src","preCode":"    public void testFilter() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> supplier;\n\n        supplier = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(supplier);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n        }\n\n        assertEquals(2, supplier.theCapturedProcessor().processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2018-05-08 00:21:20","commitOrder":13,"curCode":"    public void testFilterNot() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> supplier;\n\n        supplier = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n            }\n        }\n\n        assertEquals(5, supplier.theCapturedProcessor().processed.size());\n    }\n","date":"2018-05-08 00:21:20","endLine":89,"groupId":"12171","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/51/a994b6addb260b73de0b306c27fe253ea969c3.src","preCode":"    public void testFilterNot() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> supplier;\n\n        supplier = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(supplier);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n        }\n\n        assertEquals(5, supplier.theCapturedProcessor().processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"6f641fef6a88036ab4dacb59ab21bc8b21ef9bcf","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [cleanup] (#4939)\n\n* Add method to create test properties to StreamsTestUtils\n* Make TopologyTestDriver protected constructor package-private\n* Add comment suggesting the use of TopologyTestDriver to KStreamTestDriver\n* Cleanup:\n    - GlobalKTableJoinsTest\n    - KGroupedStreamImplTest\n    - KGroupedTableImplTest\n    - KStreamBranchTest\n    - KStreamFilterTest\n    - KStreamFlatMapTest\n    - KStreamFlatMapValuesTest\n    - KStreamForeachTest\n    - KStreamGlobalKTableJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamImplTest\n    - KStreamKStreamJoinTest\n    - KStreamKStreamLeftJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamKTableJoinTest\n    - KStreamKTableLeftJoinTest\n    - KStreamMapTest\n    - KStreamMapValuesTest\n    - KStreamPeekTest\n    - StreamsBuilderTest\n    - KStreamSelectKeyTest\n    - KStreamTransformTest\n    - KStreamTransformValuesTest\n    - KStreamWindowAggregateTest\n    - KTableForeachTest\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-05-08 00:21:20","modifiedFileCount":"27","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2018-08-04 04:19:46","commitOrder":14,"curCode":"    public void testFilter() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        final KStream<Integer, String> stream;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        supplier = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n            }\n        }\n\n        assertEquals(2, supplier.theCapturedProcessor().processed.size());\n    }\n","date":"2018-08-04 04:19:46","endLine":68,"groupId":"1829","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/06d2e0cd73d1e22af308b5f4b205e678b64fad.src","preCode":"    public void testFilter() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> supplier;\n\n        supplier = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n            }\n        }\n\n        assertEquals(2, supplier.theCapturedProcessor().processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"},{"authorDate":"2018-08-04 04:19:46","commitOrder":14,"curCode":"    public void testFilterNot() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        final KStream<Integer, String> stream;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        supplier = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n            }\n        }\n\n        assertEquals(5, supplier.theCapturedProcessor().processed.size());\n    }\n","date":"2018-08-04 04:19:46","endLine":89,"groupId":"12171","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/06d2e0cd73d1e22af308b5f4b205e678b64fad.src","preCode":"    public void testFilterNot() {\n        StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> supplier;\n\n        supplier = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n            }\n        }\n\n        assertEquals(5, supplier.theCapturedProcessor().processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"3637b2c374d48e99e0a7be37605d3c79f2661007","commitMessage":"@@@MINOR: Require final variables in Streams (#5452)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-08-04 04:19:46","modifiedFileCount":"212","status":"M","submitter":"John Roesler"},{"authorTime":"2019-05-18 07:48:07","codes":[{"authorDate":"2019-05-18 07:48:07","commitOrder":15,"curCode":"    public void testFilter() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        final KStream<Integer, String> stream;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n            }\n        }\n\n        assertEquals(2, supplier.theCapturedProcessor().processed.size());\n    }\n","date":"2019-05-18 07:48:07","endLine":62,"groupId":"7537","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3f/8f83575e4b6117b1ac5d074a571e10f42909d8.src","preCode":"    public void testFilter() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        final KStream<Integer, String> stream;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        supplier = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n            }\n        }\n\n        assertEquals(2, supplier.theCapturedProcessor().processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"M"},{"authorDate":"2019-05-18 07:48:07","commitOrder":15,"curCode":"    public void testFilterNot() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        final KStream<Integer, String> stream;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n            }\n        }\n\n        assertEquals(5, supplier.theCapturedProcessor().processed.size());\n    }\n","date":"2019-05-18 07:48:07","endLine":82,"groupId":"7538","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3f/8f83575e4b6117b1ac5d074a571e10f42909d8.src","preCode":"    public void testFilterNot() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        final KStream<Integer, String> stream;\n        final MockProcessorSupplier<Integer, String> supplier;\n\n        supplier = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n            }\n        }\n\n        assertEquals(5, supplier.theCapturedProcessor().processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"6a2749faa63397caa93dae7bfdc3f1d0573a2ff4","commitMessage":"@@@KAFKA-6455: Improve DSL operator timestamp semantics (#6725)\n\nBasic idea:\nKTable-KTable join: set max(left-ts. right-ts) for result\n#agg(...) (stream/table windowed/non-windowed): set max(ts1.  ts2.  ts3. ...) of all input records that contribute to the aggregation result\nfor all stateless transformation: input-ts -> output-ts\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   John Roesler <john@confluent.io>.  Andy Coates <andy@confluent.io>.   Bill Bejeck <bbejeck@gmail.com","date":"2019-05-18 07:48:07","modifiedFileCount":"61","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-10-07 16:01:58","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":16,"curCode":"    public void testFilter() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        final KStream<Integer, String> stream;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, String> inputTopic = driver.createInputTopic(topicName, new IntegerSerializer(), new StringSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, \"V\" + expectedKey);\n            }\n        }\n\n        assertEquals(2, supplier.theCapturedProcessor().processed.size());\n    }\n","date":"2019-10-07 16:01:58","endLine":62,"groupId":"7537","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/88390e0c352d7a546029a8db705373493282ed.src","preCode":"    public void testFilter() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        final KStream<Integer, String> stream;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n            }\n        }\n\n        assertEquals(2, supplier.theCapturedProcessor().processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2019-10-07 16:01:58","commitOrder":16,"curCode":"    public void testFilterNot() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        final KStream<Integer, String> stream;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                final TestInputTopic<Integer, String> inputTopic = driver.createInputTopic(topicName, new IntegerSerializer(), new StringSerializer());\n                inputTopic.pipeInput(expectedKey, \"V\" + expectedKey);\n            }\n        }\n\n        assertEquals(5, supplier.theCapturedProcessor().processed.size());\n    }\n","date":"2019-10-07 16:01:58","endLine":83,"groupId":"7538","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/88390e0c352d7a546029a8db705373493282ed.src","preCode":"    public void testFilterNot() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        final KStream<Integer, String> stream;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, \"V\" + expectedKey));\n            }\n        }\n\n        assertEquals(5, supplier.theCapturedProcessor().processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"a5a6938c69f4310f7ec519036f0df77d8022326a","commitMessage":"@@@KAFKA-8233: TopologyTestDriver test input and output usability improvements (#7378)\n\nImplements KIP-470\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-07 16:01:58","modifiedFileCount":"47","status":"M","submitter":"Jukka Karvanen"},{"authorTime":"2020-08-21 03:06:16","codes":[{"authorDate":"2020-08-21 03:06:16","commitOrder":17,"curCode":"    public void testFilter() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        final KStream<Integer, String> stream;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, String> inputTopic = driver.createInputTopic(topicName, new IntegerSerializer(), new StringSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, \"V\" + expectedKey);\n            }\n        }\n\n        assertEquals(2, supplier.theCapturedProcessor().processed().size());\n    }\n","date":"2020-08-21 03:06:16","endLine":62,"groupId":"101809","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testFilter","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c6/c2c7a7c37fbfea22c46f80e803770ab78e7f1d.src","preCode":"    public void testFilter() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        final KStream<Integer, String> stream;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filter(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, String> inputTopic = driver.createInputTopic(topicName, new IntegerSerializer(), new StringSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, \"V\" + expectedKey);\n            }\n        }\n\n        assertEquals(2, supplier.theCapturedProcessor().processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":44,"status":"M"},{"authorDate":"2020-08-21 03:06:16","commitOrder":17,"curCode":"    public void testFilterNot() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        final KStream<Integer, String> stream;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                final TestInputTopic<Integer, String> inputTopic = driver.createInputTopic(topicName, new IntegerSerializer(), new StringSerializer());\n                inputTopic.pipeInput(expectedKey, \"V\" + expectedKey);\n            }\n        }\n\n        assertEquals(5, supplier.theCapturedProcessor().processed().size());\n    }\n","date":"2020-08-21 03:06:16","endLine":83,"groupId":"101809","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testFilterNot","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c6/c2c7a7c37fbfea22c46f80e803770ab78e7f1d.src","preCode":"    public void testFilterNot() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6, 7};\n\n        final KStream<Integer, String> stream;\n        final MockProcessorSupplier<Integer, String> supplier = new MockProcessorSupplier<>();\n\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.String()));\n        stream.filterNot(isMultipleOfThree).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                final TestInputTopic<Integer, String> inputTopic = driver.createInputTopic(topicName, new IntegerSerializer(), new StringSerializer());\n                inputTopic.pipeInput(expectedKey, \"V\" + expectedKey);\n            }\n        }\n\n        assertEquals(5, supplier.theCapturedProcessor().processed.size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFilterTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"88d4bc4641064d21a481ba3b8562a4c97703d64d","commitMessage":"@@@KAFKA-10379: Implement the KIP-478 StreamBuilder#addGlobalStore() (#9148)\n\nFrom KIP-478.  implement the new StreamBuilder#addGlobalStore() overload\nthat takes a stateUpdateSupplier fully typed Processor<KIn.  VIn.  Void.  Void>.\n\nWhere necessary.  use the adapters to make the old APIs defer to the new ones. \nas well as limiting the scope of this change set.\n\nReviewers: Boyang Chen <boyang@apache.org>","date":"2020-08-21 03:06:16","modifiedFileCount":"41","status":"M","submitter":"John Roesler"}]
