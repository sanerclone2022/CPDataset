[{"authorTime":"2017-09-06 05:11:59","codes":[{"authorDate":"2017-11-21 03:25:22","commitOrder":2,"curCode":"    private StreamThread createStreamThread(final String clientId, final StreamsConfig config, final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        return StreamThread.create(internalTopologyBuilder,\n                                   config,\n                                   clientSupplier,\n                                   clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n                                   processId,\n                                   clientId,\n                                   metrics,\n                                   mockTime,\n                                   streamsMetadataState,\n                                   0,\n                                   stateDirectory,\n                                   new MockStateRestoreListener());\n    }\n","date":"2017-11-21 03:25:22","endLine":368,"groupId":"17802","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a3/d7523949d5d46b618f4e2761bb12c349002762.src","preCode":"    private StreamThread createStreamThread(final String clientId, final StreamsConfig config, final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        return StreamThread.create(internalTopologyBuilder,\n                                   config,\n                                   clientSupplier,\n                                   clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n                                   processId,\n                                   clientId,\n                                   metrics,\n                                   mockTime,\n                                   streamsMetadataState,\n                                   0,\n                                   stateDirectory,\n                                   new MockStateRestoreListener());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"B"},{"authorDate":"2017-09-06 05:11:59","commitOrder":2,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() throws InterruptedException {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, TOPIC);\n\n        final TaskId taskId = new TaskId(0, 0);\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignment = new HashMap<>();\n        assignment.put(taskId, task0Assignment);\n        thread.setThreadMetadataProvider(new MockStreamsPartitionAssignor(assignment));\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n        thread.rebalanceListener.onPartitionsAssigned(task0Assignment);\n        thread.runOnce(-1);\n\n        ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(taskId.toString(), task0Assignment)));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","date":"2017-09-06 05:11:59","endLine":1036,"groupId":"3333","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/51/e6568410ef7b2b46ada2b8e391c76e59510fd1.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() throws InterruptedException {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, TOPIC);\n\n        final TaskId taskId = new TaskId(0, 0);\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignment = new HashMap<>();\n        assignment.put(taskId, task0Assignment);\n        thread.setThreadMetadataProvider(new MockStreamsPartitionAssignor(assignment));\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n        thread.rebalanceListener.onPartitionsAssigned(task0Assignment);\n        thread.runOnce(-1);\n\n        ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(taskId.toString(), task0Assignment)));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1016,"status":"NB"}],"commitId":"e3c32391f95d82a217295c7e4c1519981124bc3f","commitMessage":"@@@KAFKA-6170; KIP-220 Part 1: Add AdminClient to Streams\n\n1. Add The AdminClient into Kafka Streams.  which is shared among all the threads.\n2. Add ADMIN_PREFIX to StreamsConfig.\n3. Also made a few tweaks on the metrics of the AdminClient.  which is slightly different from the StreamsKafkaClient (note these changes will not be reflected in this PR but only take place when we eventually replace StreamsKafkaClient):\n3.1. \"clientId\" tag will be set as \"clientId-admin\": in StreamsKafkaClient it is whatever user sets.  and hence could even be null.\n3.2. \"groupPrefix\" will be set as \"admin-client\": in StreamsKafkaClient it will be \"kafka-client\".\n\nSo the metrics from `StreamsKafkaClient` to `AdminClient` would be changed from\n\n`kafka.admin.client:type=kafka-client-metrics. client-id=`\n\nto\n\n`kafka.admin.client:type=admin-client-metrics. client-id=myApp-UUID-admin`\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Matthias J. Sax <matthias@confluent.io>.  Ted Yu <yuzhihong@gmail.com>\n\nCloses #4211 from guozhangwang/K6170-admin-client\n","date":"2017-11-21 03:25:22","modifiedFileCount":"8","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2017-11-29 01:37:27","codes":[{"authorDate":"2017-11-21 03:25:22","commitOrder":3,"curCode":"    private StreamThread createStreamThread(final String clientId, final StreamsConfig config, final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        return StreamThread.create(internalTopologyBuilder,\n                                   config,\n                                   clientSupplier,\n                                   clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n                                   processId,\n                                   clientId,\n                                   metrics,\n                                   mockTime,\n                                   streamsMetadataState,\n                                   0,\n                                   stateDirectory,\n                                   new MockStateRestoreListener());\n    }\n","date":"2017-11-21 03:25:22","endLine":368,"groupId":"17802","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a3/d7523949d5d46b618f4e2761bb12c349002762.src","preCode":"    private StreamThread createStreamThread(final String clientId, final StreamsConfig config, final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        return StreamThread.create(internalTopologyBuilder,\n                                   config,\n                                   clientSupplier,\n                                   clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n                                   processId,\n                                   clientId,\n                                   metrics,\n                                   mockTime,\n                                   streamsMetadataState,\n                                   0,\n                                   stateDirectory,\n                                   new MockStateRestoreListener());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"N"},{"authorDate":"2017-11-29 01:37:27","commitOrder":3,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() throws InterruptedException {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n        thread.taskManager().createTasks(assignedPartitions);\n\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce(-1);\n\n        ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","date":"2017-11-29 01:37:27","endLine":634,"groupId":"17232","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/a372cc02fd3266d586f469f10a9f22096ff13d.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() throws InterruptedException {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, TOPIC);\n\n        final TaskId taskId = new TaskId(0, 0);\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        final Map<TaskId, Set<TopicPartition>> assignment = new HashMap<>();\n        assignment.put(taskId, task0Assignment);\n        thread.setThreadMetadataProvider(new MockStreamsPartitionAssignor(assignment));\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n        thread.rebalanceListener.onPartitionsAssigned(task0Assignment);\n        thread.runOnce(-1);\n\n        ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(taskId.toString(), task0Assignment)));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":607,"status":"M"}],"commitId":"5df1eee7d689e18ac2f7b74410e7a30159d3afdc","commitMessage":"@@@KAFKA-6170; KIP-220 Part 2: Break dependency of Assignor on StreamThread\n\nThis refactoring is discussed in https://github.com/apache/kafka/pull/3624#discussion_r132614639. More specifically:\n\n1. Moved the access of `StreamThread` in `StreamPartitionAssignor` to `TaskManager`.  removed any fields stored in `StreamThread` such as `processId` and `clientId` that are only to be used in `StreamPartitionAssignor`.  and pass them to `TaskManager` if necessary.\n2. Moved any in-memory states.  `metadataWithInternalTopics`.  `partitionsByHostState`.  `standbyTasks`.  `activeTasks` to `TaskManager` so that `StreamPartitionAssignor` becomes a stateless thin layer that access TaskManager directly.\n3. Remove the reference of `StreamPartitionAssignor` in `StreamThread`.  instead consolidate all related functionalities such as `cachedTasksIds ` in `TaskManager` which could be retrieved by the `StreamThread` and the `StreamPartitionAssignor` directly.\n4. Finally.  removed the two interfaces used for `StreamThread` and `StreamPartitionAssignor`.\n\n5. Some minor fixes on logPrefixes.  etc.\n\nFuture work: when replacing the StreamsKafkaClient.  we would let `StreamPartitionAssignor` to retrieve it from `TaskManager` directly.  and also its closing call do not need to be called (`KafkaStreams` will be responsible for closing it).\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Damian Guy <damian.guy@gmail.com>.  Matthias J. Sax <matthias@confluent.io>\n\nCloses #4224 from guozhangwang/K6170-refactor-assignor\n","date":"2017-11-29 01:37:27","modifiedFileCount":"23","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2017-11-29 01:37:27","codes":[{"authorDate":"2018-01-09 03:58:56","commitOrder":4,"curCode":"    private StreamThread createStreamThread(final String clientId, final StreamsConfig config, final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster(1));\n\n        return StreamThread.create(internalTopologyBuilder,\n                                   config,\n                                   clientSupplier,\n                                   clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n                                   processId,\n                                   clientId,\n                                   metrics,\n                                   mockTime,\n                                   streamsMetadataState,\n                                   0,\n                                   stateDirectory,\n                                   new MockStateRestoreListener());\n    }\n","date":"2018-01-09 03:58:56","endLine":219,"groupId":"17802","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/760c16d62fd52ed7636cadacf8920f4f601901.src","preCode":"    private StreamThread createStreamThread(final String clientId, final StreamsConfig config, final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        return StreamThread.create(internalTopologyBuilder,\n                                   config,\n                                   clientSupplier,\n                                   clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n                                   processId,\n                                   clientId,\n                                   metrics,\n                                   mockTime,\n                                   streamsMetadataState,\n                                   0,\n                                   stateDirectory,\n                                   new MockStateRestoreListener());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2017-11-29 01:37:27","commitOrder":4,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() throws InterruptedException {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n        thread.taskManager().createTasks(assignedPartitions);\n\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce(-1);\n\n        ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","date":"2017-11-29 01:37:27","endLine":634,"groupId":"17232","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/a372cc02fd3266d586f469f10a9f22096ff13d.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() throws InterruptedException {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n        thread.taskManager().createTasks(assignedPartitions);\n\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce(-1);\n\n        ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":607,"status":"N"}],"commitId":"697a4af35a3672dd339c3a6a34d5ab27e31e0fbd","commitMessage":"@@@KAFKA-6363: Use MockAdminClient for any unit tests that depend on AdminClient (#4371)\n\n* Implement MockAdminClient.deleteTopics\n* Use MockAdminClient instead of MockKafkaAdminClientEnv in StreamsResetterTest\n* Rename MockKafkaAdminClientEnv to AdminClientUnitTestEnv\n* Use MockAdminClient instead of MockKafkaAdminClientEnv in TopicAdminTest\n* Rename KafkaAdminClient to AdminClientUnitTestEnv in KafkaAdminClientTest.java\n* Migrate StreamThreadTest to MockAdminClient\n* Fix style errors\n* Address review comments\n* Fix MockAdminClient call\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Konstantine Karantasis <konstantine@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-01-09 03:58:56","modifiedFileCount":"6","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-02-16 02:52:58","codes":[{"authorDate":"2018-01-09 03:58:56","commitOrder":5,"curCode":"    private StreamThread createStreamThread(final String clientId, final StreamsConfig config, final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster(1));\n\n        return StreamThread.create(internalTopologyBuilder,\n                                   config,\n                                   clientSupplier,\n                                   clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n                                   processId,\n                                   clientId,\n                                   metrics,\n                                   mockTime,\n                                   streamsMetadataState,\n                                   0,\n                                   stateDirectory,\n                                   new MockStateRestoreListener());\n    }\n","date":"2018-01-09 03:58:56","endLine":219,"groupId":"17802","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/760c16d62fd52ed7636cadacf8920f4f601901.src","preCode":"    private StreamThread createStreamThread(final String clientId, final StreamsConfig config, final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster(1));\n\n        return StreamThread.create(internalTopologyBuilder,\n                                   config,\n                                   clientSupplier,\n                                   clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n                                   processId,\n                                   clientId,\n                                   metrics,\n                                   mockTime,\n                                   streamsMetadataState,\n                                   0,\n                                   stateDirectory,\n                                   new MockStateRestoreListener());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"N"},{"authorDate":"2018-02-16 02:52:58","commitOrder":5,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n        thread.taskManager().createTasks(assignedPartitions);\n\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce(-1);\n\n        ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","date":"2018-02-16 02:52:58","endLine":727,"groupId":"17232","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/2b764f3ff585b05873b61a37280c2a50252156.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() throws InterruptedException {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n        thread.taskManager().createTasks(assignedPartitions);\n\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce(-1);\n\n        ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":700,"status":"M"}],"commitId":"bce8125dcf5a87ed29bbe795cd7591d45bdf3d9a","commitMessage":"@@@MINOR: Resuming Tasks should not be initialized twice (#4562)\n\nAvoids double initialization of resuming tasks\nRemoves race condition in StreamThreadTest plus code cleanup\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-02-16 02:52:58","modifiedFileCount":"3","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-03-16 04:02:28","codes":[{"authorDate":"2018-01-09 03:58:56","commitOrder":6,"curCode":"    private StreamThread createStreamThread(final String clientId, final StreamsConfig config, final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster(1));\n\n        return StreamThread.create(internalTopologyBuilder,\n                                   config,\n                                   clientSupplier,\n                                   clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n                                   processId,\n                                   clientId,\n                                   metrics,\n                                   mockTime,\n                                   streamsMetadataState,\n                                   0,\n                                   stateDirectory,\n                                   new MockStateRestoreListener());\n    }\n","date":"2018-01-09 03:58:56","endLine":219,"groupId":"17802","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/760c16d62fd52ed7636cadacf8920f4f601901.src","preCode":"    private StreamThread createStreamThread(final String clientId, final StreamsConfig config, final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster(1));\n\n        return StreamThread.create(internalTopologyBuilder,\n                                   config,\n                                   clientSupplier,\n                                   clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n                                   processId,\n                                   clientId,\n                                   metrics,\n                                   mockTime,\n                                   streamsMetadataState,\n                                   0,\n                                   stateDirectory,\n                                   new MockStateRestoreListener());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"N"},{"authorDate":"2018-03-16 04:02:28","commitOrder":6,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce(-1);\n\n        ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","date":"2018-03-16 04:02:28","endLine":756,"groupId":"11720","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b2/2d98ee41c3a6731d9f827f8d8d3dc3e41c1e3d.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n        thread.taskManager().createTasks(assignedPartitions);\n\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce(-1);\n\n        ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":727,"status":"M"}],"commitId":"a6fad27372f9a931540c2e4345e428b643535d46","commitMessage":"@@@KAFKA-6106: Postpone normal processing of tasks within a thread until restoration of all tasks have completed. (#4651)\n\nAuthor:  Kamal Chandraprakash <kamal.chandraprakash@gmail.com>\n\nReviewer: Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2018-03-16 04:02:28","modifiedFileCount":"6","status":"M","submitter":"Kamal C"},{"authorTime":"2018-04-18 04:13:15","codes":[{"authorDate":"2018-04-18 04:13:15","commitOrder":7,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener());\n    }\n","date":"2018-04-18 04:13:15","endLine":236,"groupId":"17802","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/5507d871834c9efc652bb37b1d901b1e411a43.src","preCode":"    private StreamThread createStreamThread(final String clientId, final StreamsConfig config, final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster(1));\n\n        return StreamThread.create(internalTopologyBuilder,\n                                   config,\n                                   clientSupplier,\n                                   clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n                                   processId,\n                                   clientId,\n                                   metrics,\n                                   mockTime,\n                                   streamsMetadataState,\n                                   0,\n                                   stateDirectory,\n                                   new MockStateRestoreListener());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"M"},{"authorDate":"2018-04-18 04:13:15","commitOrder":7,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce(-1);\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","date":"2018-04-18 04:13:15","endLine":775,"groupId":"11720","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/5507d871834c9efc652bb37b1d901b1e411a43.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce(-1);\n\n        ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"M"}],"commitId":"ac9c3ed0b43ee848e6e555a01c55ea2eee78540a","commitMessage":"@@@KAFKA-6376: preliminary cleanup (#4872)\n\nGeneral cleanup of Streams code.  mostly resolving compiler warnings and re-formatting.\n\nThe regular testing suite should be sufficient.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-04-18 04:13:15","modifiedFileCount":"57","status":"M","submitter":"John Roesler"},{"authorTime":"2018-09-12 07:16:52","codes":[{"authorDate":"2018-04-18 04:13:15","commitOrder":8,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener());\n    }\n","date":"2018-04-18 04:13:15","endLine":236,"groupId":"17802","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/5507d871834c9efc652bb37b1d901b1e411a43.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"},{"authorDate":"2018-09-12 07:16:52","commitOrder":8,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","date":"2018-09-12 07:16:52","endLine":916,"groupId":"11720","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e6/91c54d8ebe0f102975e2330bdc52ffb3909cec.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce(-1);\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":887,"status":"M"}],"commitId":"283a19481d1ce4a77f5f465e7b96288db22a8ff1","commitMessage":"@@@KAFKA-3514: Part III.  Refactor StreamThread main loop (#5428)\n\n* Refactor the StreamThread main loop.  in the following:\n\n1. Fetch from consumer and enqueue data to tasks.\n2. Check if any tasks should be enforced process.\n3/ Loop over processable tasks and process them for N iterations.  and then check for 1) commit.  2) punctuate.  3) need to call consumer.poll\n4. Even if there is not data to process in this iteration.  still need to check if commit / punctuate is needed\n5. Finally.  try update standby tasks.\n\n*Add an optimization to only commit when it is needed (i.e. at least some process() or punctuate() was triggered since last commit).\n\n*Found and fixed a ProducerFencedException scenario: producer.send() call would never throw a ProducerFencedException directly.  but it may throw a KafkaException whose \"cause\" is a ProducerFencedException.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2018-09-12 07:16:52","modifiedFileCount":"24","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-01-05 06:39:47","codes":[{"authorDate":"2018-04-18 04:13:15","commitOrder":9,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener());\n    }\n","date":"2018-04-18 04:13:15","endLine":236,"groupId":"17802","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/5507d871834c9efc652bb37b1d901b1e411a43.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"},{"authorDate":"2019-01-05 06:39:47","commitOrder":9,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","date":"2019-01-05 06:39:47","endLine":920,"groupId":"11720","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dd/311fb72ab15756e4de95d2d279d2c68da8cc2b.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":892,"status":"M"}],"commitId":"d6698308194625e7921b9c3ace27a918f42f26f1","commitMessage":"@@@KAFKA-7657: Fixing thread state change to instance state change (#6018)\n\nWhile looking into KAFKA-7657.  I found there are a few loopholes in this logic:\n\n1. We kept a map of thread-name to thread-state and a global-thread state at the KafkaStreams instance-level.  in addition to the instance state itself. stateLock is used when accessing the instance state.  however when we are in the thread state change callback.  we are accessing both the thread-states as well as the instance state at the same time in the callers of setState without a lock.  which is vulnerable to concurrent multi-stream threads. The fix is a) introduce a threadStatesLock in addition to the stateLock.  which should always be grabbed to modify the thread-states map before the stateLock for modifying the instance level; and we also defer the checking of the instance-level state inside the setState call.\n\n2. When transiting to state.RUNNING.  we check if all threads are either in RUNNING or DEAD state.  this is because some threads maybe dead at the rebalance period but we should still proceed to RUNNING if the rest of threads are still transiting to RUNNING.\n\nAdded unit test for 2) above. Also simplified another test as a nit change.\n\n\nReviewers: John Roesler <vvcephei@users.noreply.github.com>.  Matthias J. Sax <mjsax@apache.org>","date":"2019-01-05 06:39:47","modifiedFileCount":"6","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-01-05 06:41:15","codes":[{"authorDate":"2018-04-18 04:13:15","commitOrder":10,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener());\n    }\n","date":"2018-04-18 04:13:15","endLine":236,"groupId":"17802","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/5507d871834c9efc652bb37b1d901b1e411a43.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"},{"authorDate":"2019-01-05 06:41:15","commitOrder":10,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","date":"2019-01-05 06:41:15","endLine":923,"groupId":"11720","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5d/f8fbc9857948f3442684c5e442634ad1b99f12.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":894,"status":"M"}],"commitId":"9d544212e69269f155bb3a51f94a9b13cf1fa565","commitMessage":"@@@Revert \"KAFKA-7657: Fixing thread state change to instance state change (#6018)\" (#6090)\n\nThis reverts commit d6698308194625e7921b9c3ace27a918f42f26f1.","date":"2019-01-05 06:41:15","modifiedFileCount":"6","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-01-05 13:27:50","codes":[{"authorDate":"2018-04-18 04:13:15","commitOrder":11,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener());\n    }\n","date":"2018-04-18 04:13:15","endLine":236,"groupId":"17802","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/5507d871834c9efc652bb37b1d901b1e411a43.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"},{"authorDate":"2019-01-05 13:27:50","commitOrder":11,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","date":"2019-01-05 13:27:50","endLine":920,"groupId":"11720","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dd/311fb72ab15756e4de95d2d279d2c68da8cc2b.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.RUNNING);\n\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":892,"status":"M"}],"commitId":"8e4799b017c6a3c65eaf47f60ab136654c9741de","commitMessage":"@@@K7657 handling thread dead state change (#6091)\n\nWhile looking into KAFKA-7657.  I found there are a few loopholes in this logic:\n\nWe kept a map of thread-name to thread-state and a global-thread state at the KafkaStreams instance-level.  in addition to the instance state itself. stateLock is used when accessing the instance state.  however when we are in the thread state change callback.  we are accessing both the thread-states as well as the instance state at the same time in the callers of setState without a lock.  which is vulnerable to concurrent multi-stream threads. The fix is a) introduce a threadStatesLock in addition to the stateLock.  which should always be grabbed to modify the thread-states map before the stateLock for modifying the instance level; and we also defer the checking of the instance-level state inside the setState call.\n\nWhen transiting to state.RUNNING.  we check if all threads are either in RUNNING or DEAD state.  this is because some threads maybe dead at the rebalance period but we should still proceed to RUNNING if the rest of threads are still transiting to RUNNING.\n\nAdded unit test for 2) above. Also simplified another test as a nit change.\n\nReviewers: John Roesler <vvcephei@users.noreply.github.com>.  Matthias J. Sax <mjsax@apache.org>","date":"2019-01-05 13:27:50","modifiedFileCount":"6","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-01-09 22:03:28","codes":[{"authorDate":"2018-04-18 04:13:15","commitOrder":12,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener());\n    }\n","date":"2018-04-18 04:13:15","endLine":236,"groupId":"17802","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/5507d871834c9efc652bb37b1d901b1e411a43.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"},{"authorDate":"2019-01-09 22:03:28","commitOrder":12,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","date":"2019-01-09 22:03:28","endLine":898,"groupId":"11720","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d4/99b7c8d62833e0e504e2e65364b59ae05a474a.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.<TaskId, Set<TopicPartition>>emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":870,"status":"M"}],"commitId":"6e7149b77a10ac6aa4da2edd549f468015170236","commitMessage":"@@@MINOR: code cleanup (#6055)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-01-09 22:03:28","modifiedFileCount":"6","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-01-09 22:03:28","codes":[{"authorDate":"2019-05-03 08:16:17","commitOrder":13,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx);\n    }\n","date":"2019-05-03 08:16:17","endLine":250,"groupId":"17802","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1d/e39d2274bb5e4815c7590ff06a9b74814b62f2.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2019-01-09 22:03:28","commitOrder":13,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","date":"2019-01-09 22:03:28","endLine":898,"groupId":"11720","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d4/99b7c8d62833e0e504e2e65364b59ae05a474a.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":870,"status":"N"}],"commitId":"a4f7675db1a928e73c7a69eb906dd1e9ecd4a22a","commitMessage":"@@@KAFKA-8285: enable localized thread IDs in Kafka Streams (#6632)\n\nDetails in the JIRA: https://issues.apache.org/jira/browse/KAFKA-8285\n\nBasically we want to avoid sharing of atomic updates for thread id with multiple stream instances on one JVM.\n\nReviewers: Raoul de Haard.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-03 08:16:17","modifiedFileCount":"3","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-01-09 22:03:28","codes":[{"authorDate":"2019-08-22 10:48:00","commitOrder":14,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx);\n    }\n","date":"2019-08-22 10:48:00","endLine":259,"groupId":"20975","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/7d9dd56daaed793e0e7425bc1ee4fa0b53cf87.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdminClient(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"M"},{"authorDate":"2019-01-09 22:03:28","commitOrder":14,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","date":"2019-01-09 22:03:28","endLine":898,"groupId":"11720","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d4/99b7c8d62833e0e504e2e65364b59ae05a474a.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":870,"status":"N"}],"commitId":"35bc53c55ff317890d13490443a8685adfc33084","commitMessage":"@@@ KIP-476: Add new getAdmin method to KafkaClientSupplier (#7162)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Ismael Juma <ismael@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-08-22 10:48:00","modifiedFileCount":"5","status":"M","submitter":"Andy Coates"},{"authorTime":"2019-09-25 06:33:03","codes":[{"authorDate":"2019-08-22 10:48:00","commitOrder":15,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx);\n    }\n","date":"2019-08-22 10:48:00","endLine":259,"groupId":"20975","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/7d9dd56daaed793e0e7425bc1ee4fa0b53cf87.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"N"},{"authorDate":"2019-09-25 06:33:03","commitOrder":15,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n        final Map<TopicPartition, TaskId> partitionsToTaskId = new HashMap<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n        partitionsToTaskId.put(t1p1, task1);\n\n        thread.taskManager().setPartitionsToTaskId(partitionsToTaskId);\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","date":"2019-09-25 06:33:03","endLine":1045,"groupId":"9601","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/39080a90f353bee330967156793d34521b4647.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(null);\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1014,"status":"M"}],"commitId":"74f8ae13034d90800da5573666dea3bea5d702ce","commitMessage":"@@@KAFKA-8179: do not suspend standby tasks during rebalance (#7321)\n\nSome work needs to be done in Streams before we can incorporate cooperative rebalancing. \n\nThis PR lays the groundwork for it by doing some refactoring.  including a behavioral change that affects eager (\"normal\") rebalancing as well: will no longer suspend standbys in onPartitionsRevoked.  instead we just close any that were reassigned in onPartitionsAssigned\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>.  John Roesler <vvcephei@users.noreply.github.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-09-25 06:33:03","modifiedFileCount":"20","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2019-09-28 03:08:15","codes":[{"authorDate":"2019-08-22 10:48:00","commitOrder":16,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx);\n    }\n","date":"2019-08-22 10:48:00","endLine":259,"groupId":"20975","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/7d9dd56daaed793e0e7425bc1ee4fa0b53cf87.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"N"},{"authorDate":"2019-09-28 03:08:15","commitOrder":16,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n        final Map<TopicPartition, TaskId> partitionsToTaskId = new HashMap<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n        partitionsToTaskId.put(t1p1, task1);\n\n        thread.taskManager().setPartitionsToTaskId(partitionsToTaskId);\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n            Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertTrue(threadName.startsWith(\"clientId-StreamThread-\"));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(\"clientId-admin\", metadata.adminClientId());\n    }\n","date":"2019-09-28 03:08:15","endLine":1055,"groupId":"9601","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ef/5b95b979afed0396dc1ae7976b304a19e2ad72.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n        final Map<TopicPartition, TaskId> partitionsToTaskId = new HashMap<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n        partitionsToTaskId.put(t1p1, task1);\n\n        thread.taskManager().setPartitionsToTaskId(partitionsToTaskId);\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata threadMetadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), threadMetadata.threadState());\n        assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(threadMetadata.standbyTasks().isEmpty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1015,"status":"M"}],"commitId":"22434e6535c6471b8ac3e9cff1919e5ac15a50be","commitMessage":"@@@KAFKA-8319: Make KafkaStreamsTest a non-integration test class (#7382)\n\nPrevious KafkaStreamsTest takes 2min20s on my local laptop.  because lots of its integration test which is producing / consuming records.  and checking state directory file system takes lots of time. On the other hand.  these tests should be well simplified with mocks.\n\nThis test reduces the test from a clumsy integration test class into a unit tests with mocks of its internal modules. And some other test functions should not be in KafkaStreamsTest actually and have been moved to other modular test classes. Now it takes 2s.\n\nAlso it helps removing the potential flakiness of the following (some of them are claimed resolved only because we have not seen them recently.  but after looking at the test code I can verify they are still flaky):\n\n* KAFKA-5818 (the original JIRA ticket indeed exposed a real issue that has been fixed.  but the test itself remains flaky)\n* KAFKA-6215\n* KAFKA-7921\n* KAFKA-7990\n* KAFKA-8319\n* KAFKA-8427\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Bruno Cadonna <bruno@confluent.io>","date":"2019-09-28 03:08:15","modifiedFileCount":"6","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-10-05 08:07:30","codes":[{"authorDate":"2019-10-05 08:07:30","commitOrder":17,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","date":"2019-10-05 08:07:30","endLine":264,"groupId":"20975","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/10e4cf2c3aa27a7218d5dfc42ff45e167d8683.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(applicationId);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            processId,\n            clientId,\n            metrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"},{"authorDate":"2019-10-05 08:07:30","commitOrder":17,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(CLIENT_ID, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n        final Map<TopicPartition, TaskId> partitionsToTaskId = new HashMap<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n        partitionsToTaskId.put(t1p1, task1);\n\n        thread.taskManager().setPartitionsToTaskId(partitionsToTaskId);\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n            Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2019-10-05 08:07:30","endLine":1060,"groupId":"9601","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/10e4cf2c3aa27a7218d5dfc42ff45e167d8683.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(clientId, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n        final Map<TopicPartition, TaskId> partitionsToTaskId = new HashMap<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n        partitionsToTaskId.put(t1p1, task1);\n\n        thread.taskManager().setPartitionsToTaskId(partitionsToTaskId);\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n            Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertTrue(threadName.startsWith(\"clientId-StreamThread-\"));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(\"clientId-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1020,"status":"M"}],"commitId":"52007e878aaac3f48d0d949dbe428a2ae5e56f57","commitMessage":"@@@KAFKA-8934: Introduce instance-level metrics for streams applications (#7416)\n\n1. Moves StreamsMetricsImpl from StreamThread to KafkaStreams\n2. Adds instance-level metrics as specified in KIP-444.  i.e.:\n-- version\n-- commit-id\n-- application-id\n-- topology-description\n-- state\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <john@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-10-05 08:07:30","modifiedFileCount":"65","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-10-05 08:07:30","codes":[{"authorDate":"2019-10-20 04:45:36","commitOrder":18,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","date":"2019-10-20 04:45:36","endLine":269,"groupId":"20975","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/29981bcd2227ee383ebacd43d168e365e3fab5.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"},{"authorDate":"2019-10-05 08:07:30","commitOrder":18,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(CLIENT_ID, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n        final Map<TopicPartition, TaskId> partitionsToTaskId = new HashMap<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n        partitionsToTaskId.put(t1p1, task1);\n\n        thread.taskManager().setPartitionsToTaskId(partitionsToTaskId);\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n            Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2019-10-05 08:07:30","endLine":1060,"groupId":"9601","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/10e4cf2c3aa27a7218d5dfc42ff45e167d8683.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(CLIENT_ID, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n        final Map<TopicPartition, TaskId> partitionsToTaskId = new HashMap<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n        partitionsToTaskId.put(t1p1, task1);\n\n        thread.taskManager().setPartitionsToTaskId(partitionsToTaskId);\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n            Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1020,"status":"N"}],"commitId":"2298c7f84fd0e29b304eb11078bfe76ca5b04a97","commitMessage":"@@@KAFKA-8964: Refactor thread-level metrics depending on built-in metrics version (#7474)\n\n* Made commit-over-tasks sensor and skipped-records sensor optional since they are removed in the latest version\n* Refactored methods for sensor creation\n* Adapted unit and integration tests\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2019-10-20 04:45:36","modifiedFileCount":"50","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-02-05 13:06:39","codes":[{"authorDate":"2019-10-20 04:45:36","commitOrder":19,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","date":"2019-10-20 04:45:36","endLine":269,"groupId":"20975","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/29981bcd2227ee383ebacd43d168e365e3fab5.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"N"},{"authorDate":"2020-02-05 13:06:39","commitOrder":19,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(CLIENT_ID, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2020-02-05 13:06:39","endLine":1068,"groupId":"19369","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/364b3c9fb305a84bb46632f74fc775946af90b.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(CLIENT_ID, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n        final Map<TopicPartition, TaskId> partitionsToTaskId = new HashMap<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n        partitionsToTaskId.put(t1p1, task1);\n\n        thread.taskManager().setPartitionsToTaskId(partitionsToTaskId);\n        thread.taskManager().setAssignmentMetadata(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n            Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1031,"status":"M"}],"commitId":"4090f9a2b0a95e4da127e4786007542276d97520","commitMessage":"@@@KAFKA-9113: Clean up task management and state management (#7997)\n\nThis PR is collaborated by Guozhang Wang and John Roesler. It is a significant tech debt cleanup on task management and state management.  and is broken down by several sub-tasks listed below:\n\nExtract embedded clients (producer and consumer) into RecordCollector from StreamTask.\nguozhangwang#2\nguozhangwang#5\n\nConsolidate the standby updating and active restoring logic into ChangelogReader and extract out of StreamThread.\nguozhangwang#3\nguozhangwang#4\n\nIntroduce Task state life cycle (created.  restoring.  running.  suspended.  closing).  and refactor the task operations based on the current state.\nguozhangwang#6\nguozhangwang#7\n\nConsolidate AssignedTasks into TaskManager and simplify the logic of changelog management and task management (since they are already moved in step 2) and 3)).\nguozhangwang#8\nguozhangwang#9\n\nAlso simplified the StreamThread logic a bit as the embedded clients / changelog restoration logic has been moved into step 1) and 2).\nguozhangwang#10\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-02-05 13:06:39","modifiedFileCount":"76","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-02-05 13:06:39","codes":[{"authorDate":"2020-02-07 11:20:52","commitOrder":20,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.build();\n        \n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","date":"2020-02-07 11:20:52","endLine":208,"groupId":"13593","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/3052fe0d39319b9a269ab946ce5d8eb5f4d0ef.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"},{"authorDate":"2020-02-05 13:06:39","commitOrder":20,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(CLIENT_ID, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2020-02-05 13:06:39","endLine":1068,"groupId":"19369","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/364b3c9fb305a84bb46632f74fc775946af90b.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(CLIENT_ID, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1031,"status":"N"}],"commitId":"f698f3f8401845e0f73b104c0f96c54d2851b67a","commitMessage":"@@@MINOR: further InternalTopologyBuilder cleanup  (#8046)\n\nFollowup to KAFKA-7317 and KAFKA-9113.  there's some additional cleanup we can do in InternalTopologyBuilder. Mostly refactors the subscription code to make the initialization more explicit and reduce some duplicated code in the update logic.\n\nAlso some minor cleanup of the build method.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-02-07 11:20:52","modifiedFileCount":"6","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-02-22 13:40:28","codes":[{"authorDate":"2020-02-07 11:20:52","commitOrder":21,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.build();\n        \n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","date":"2020-02-07 11:20:52","endLine":208,"groupId":"13593","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/3052fe0d39319b9a269ab946ce5d8eb5f4d0ef.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.build();\n        \n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"N"},{"authorDate":"2020-02-22 13:40:28","commitOrder":21,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(CLIENT_ID, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2020-02-22 13:40:28","endLine":1072,"groupId":"19369","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/a16a7d720fd32b59ee088c7cbac883a7d61fb5.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(CLIENT_ID, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.consumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1035,"status":"M"}],"commitId":"97d107a270d3e9b795b42d209f838f2f81009ce8","commitMessage":"@@@KAFKA-9441: Add internal TransactionManager (#8105)\n\nUpfront refactoring for KIP-447.\n\nIntroduces `StreamsProducer` that allows to share a producer over multiple tasks and track the TX status.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-02-22 13:40:28","modifiedFileCount":"19","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-02-22 13:40:28","codes":[{"authorDate":"2020-02-26 07:28:01","commitOrder":22,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.buildTopology();\n        \n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","date":"2020-02-26 07:28:01","endLine":209,"groupId":"20975","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/76/5e4c196b9fae072155383821c196e49aca52aa.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.build();\n        \n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"M"},{"authorDate":"2020-02-22 13:40:28","commitOrder":22,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(CLIENT_ID, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2020-02-22 13:40:28","endLine":1072,"groupId":"19369","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f3/a16a7d720fd32b59ee088c7cbac883a7d61fb5.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(CLIENT_ID, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1035,"status":"N"}],"commitId":"a28447a06582bf8e6de427f047f3d3ba4e2219a1","commitMessage":"@@@MINOR: don't assign standby tasks with no logged state (#8147)\n\nRight now the task assignor just blindly assigns N standby tasks per active task (where N = num.standbys) and attempts to distribute them evenly across all instances/threads. But only standby tasks that are stateful.  and whose stores are changelog-enabled.  will ever actually be created.\n\nThis can result in a less-balanced assignment.  and should be cleaned up in particular before implementing KIP-441 to remove the noise of ghost standbys.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-02-26 07:28:01","modifiedFileCount":"16","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-03-06 04:20:46","codes":[{"authorDate":"2020-02-26 07:28:01","commitOrder":23,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.buildTopology();\n        \n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","date":"2020-02-26 07:28:01","endLine":209,"groupId":"20975","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/76/5e4c196b9fae072155383821c196e49aca52aa.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.buildTopology();\n        \n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"N"},{"authorDate":"2020-03-06 04:20:46","commitOrder":23,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2020-03-06 04:20:46","endLine":1135,"groupId":"14517","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/a669d0112a00c69b3d075d65f625339c67ea15.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        final StreamThread thread = createStreamThread(CLIENT_ID, config, false);\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, Collections.emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1074,"status":"M"}],"commitId":"78374a15492cfb6df49353bd166d8c45ac9abdb2","commitMessage":"@@@KAFKA-9615: Clean up task/producer create and close (#8213)\n\n* Consolidate task/producer management. Now.  exactly one component manages\n  the creation and destruction of Producers.  whether they are per-thread or per-task.\n* Add missing test coverage on TaskManagerTest\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Boyang Chen <boyang@confluent.io>","date":"2020-03-06 04:20:46","modifiedFileCount":"12","status":"M","submitter":"John Roesler"},{"authorTime":"2020-04-04 10:17:57","codes":[{"authorDate":"2020-04-04 10:17:57","commitOrder":24,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","date":"2020-04-04 10:17:57","endLine":216,"groupId":"20975","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/90a420f95a579df25fbe5b0beeff860819fbed.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2020-04-04 10:17:57","commitOrder":24,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2020-04-04 10:17:57","endLine":1235,"groupId":"14517","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/90a420f95a579df25fbe5b0beeff860819fbed.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setClusterForAdminClient(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1174,"status":"M"}],"commitId":"ab5e4f52ecb072df55c7f5cd8941122a135cdf79","commitMessage":"@@@MINOR: Refactor StreamsProducer (#8380)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Andrew Choi <a24choi@edu.uwaterloo.ca>","date":"2020-04-04 10:17:57","modifiedFileCount":"15","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-06-19 02:28:49","codes":[{"authorDate":"2020-04-04 10:17:57","commitOrder":25,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","date":"2020-04-04 10:17:57","endLine":216,"groupId":"20975","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/90a420f95a579df25fbe5b0beeff860819fbed.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"N"},{"authorDate":"2020-06-19 02:28:49","commitOrder":25,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2020-06-19 02:28:49","endLine":1332,"groupId":"1993","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/7dd69305c671c2acad16423a8120f34a9ec787.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener.onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer;\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1271,"status":"M"}],"commitId":"d8cc6fe8e36329c647736773d9d66de89c447409","commitMessage":"@@@KAFKA-10167: use the admin client to read end-offset (#8876)\n\nSince admin client allows use to use flexible offset-spec.  we can always set to use read-uncommitted regardless of the EOS config.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-06-19 02:28:49","modifiedFileCount":"11","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-08-14 03:40:40","codes":[{"authorDate":"2020-08-14 03:40:40","commitOrder":26,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","date":"2020-08-14 03:40:40","endLine":229,"groupId":"4559","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/39/366402426362b2d3a235c20b0f2deebde697bc.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"},{"authorDate":"2020-08-14 03:40:40","commitOrder":26,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2020-08-14 03:40:40","endLine":1443,"groupId":"1993","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/39/366402426362b2d3a235c20b0f2deebde697bc.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG)\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1381,"status":"M"}],"commitId":"5645d906fa319206a9270c080926a21dfddc852a","commitMessage":"@@@KAFKA-9924: Prepare RocksDB and metrics for RocksDB properties recording (#9098)\n\nRefactor the RocksDB store and the metrics infrastructure in Streams\nin preparation of the recordings of the RocksDB properties specified in KIP-607.\n\nThe refactoring includes:\n* wrapper around BlockedBasedTableConfig to make the cache accessible to the\n  RocksDB metrics recorder\n* RocksDB metrics recorder now takes also the DB instance and the cache in addition\n  to the statistics\n* The value providers for the metrics are added to the RockDB metrics recorder also if\n  the recording level is INFO.\n* The creation of the RocksDB metrics recording trigger is moved to StreamsMetricsImpl\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <vvcephei@apache.org>\n","date":"2020-08-14 03:40:40","modifiedFileCount":"27","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-11-18 14:55:09","codes":[{"authorDate":"2020-11-18 14:55:09","commitOrder":27,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            null\n        );\n    }\n","date":"2020-11-18 14:55:09","endLine":242,"groupId":"4559","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/039ef024aa5fce13f7fccbaeebb94fce3b843c.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2020-11-18 14:55:09","commitOrder":27,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2020-11-18 14:55:09","endLine":1467,"groupId":"1993","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/039ef024aa5fce13f7fccbaeebb94fce3b843c.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1403,"status":"M"}],"commitId":"5899f5fc4a9557c33e466e58d7555990ee742a2b","commitMessage":"@@@KAFKA-9331: Add a streams specific uncaught exception handler (#9487)\n\nThis PR introduces a streams specific uncaught exception handler that currently has the option to close the client or the application. If the new handler is set as well as the old handler (java thread handler) will be ignored and an error will be logged.\nThe application shutdown is achieved through the rebalance protocol.\n\nReviewers: Bruno Cadonna <cadonna@confluent.io>.  Leah Thomas <lthomas@confluent.io>.  John Roesler <john@confluent.io>.  Anna Sophie Blee-Goldman <ableegoldman@apache.org>","date":"2020-11-18 14:55:09","modifiedFileCount":"34","status":"M","submitter":"Walker Carlson"},{"authorTime":"2020-11-18 14:55:09","codes":[{"authorDate":"2020-11-19 07:45:40","commitOrder":28,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n    }\n","date":"2020-11-19 07:45:40","endLine":242,"groupId":"4559","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/361f0b760db4c3e1a9889e0084561c58f9f203.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            null\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2020-11-18 14:55:09","commitOrder":28,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2020-11-18 14:55:09","endLine":1467,"groupId":"1993","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/039ef024aa5fce13f7fccbaeebb94fce3b843c.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1403,"status":"N"}],"commitId":"d12fbb7c0077fba23282adb84ff87635d6e44e5e","commitMessage":"@@@KAFKA-10500: Allow resizing of StreamThread state store caches (#9572)\n\n - part of KIP-663\n\nReviewer: Bruno Cadonna <bruno@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-11-19 07:45:40","modifiedFileCount":"5","status":"M","submitter":"Walker Carlson"},{"authorTime":"2021-03-06 03:27:25","codes":[{"authorDate":"2020-11-19 07:45:40","commitOrder":29,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n    }\n","date":"2020-11-19 07:45:40","endLine":242,"groupId":"4559","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/361f0b760db4c3e1a9889e0084561c58f9f203.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"},{"authorDate":"2021-03-06 03:27:25","commitOrder":29,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1), new HashMap<>(), new HashMap<>(), Optional.empty())));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2021-03-06 03:27:25","endLine":1654,"groupId":"1993","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/45/26527380848ef8dabbe045ea63fb0ae4e3d9b9.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1))));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1590,"status":"M"}],"commitId":"207bb0826be1be91c12ceb30f525f73aa9519463","commitMessage":"@@@KAFKA-12347: updating TaskMetadata (#10211)\n\nadded committed offset.  high watermark and idle duration to the taskMetadata.\n\nReviewers: Boyang Chen <boyang@confluent.io>","date":"2021-03-06 03:27:25","modifiedFileCount":"10","status":"M","submitter":"Walker Carlson"},{"authorTime":"2021-05-21 06:01:23","codes":[{"authorDate":"2020-11-19 07:45:40","commitOrder":30,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n    }\n","date":"2020-11-19 07:45:40","endLine":242,"groupId":"4559","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/361f0b760db4c3e1a9889e0084561c58f9f203.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"},{"authorDate":"2021-05-21 06:01:23","commitOrder":30,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1, Utils.mkSet(t1p1), new HashMap<>(), new HashMap<>(), Optional.empty())));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2021-05-21 06:01:23","endLine":1696,"groupId":"1993","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ef/535628c11d0e0c5eaae0394ec09b91dd9b9665.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1.toString(), Utils.mkSet(t1p1), new HashMap<>(), new HashMap<>(), Optional.empty())));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1632,"status":"M"}],"commitId":"b56d9e4416bba3bc54d2e167298c370cbbe7edbd","commitMessage":"@@@KAFKA-12779: KIP-740.  Clean up public API in TaskId and fix TaskMetadata#taskId() (#10735)\n\nAs described in KIP-740.  we clean up the public TaskId class and introduce new APIs to return it from TaskMetadata\n\nReviewers: Guozhang Wang <guozhang@confluent.io>","date":"2021-05-21 06:01:23","modifiedFileCount":"23","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2021-06-26 00:31:49","codes":[{"authorDate":"2020-11-19 07:45:40","commitOrder":31,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n    }\n","date":"2020-11-19 07:45:40","endLine":242,"groupId":"4559","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/361f0b760db4c3e1a9889e0084561c58f9f203.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"},{"authorDate":"2021-06-26 00:31:49","commitOrder":31,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadataImpl(task1, Utils.mkSet(t1p1), new HashMap<>(), new HashMap<>(), Optional.empty())));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2021-06-26 00:31:49","endLine":1657,"groupId":"1993","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/eb26d85af4db8a9cbd2343dd4a474a25fe9620.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadata(task1, Utils.mkSet(t1p1), new HashMap<>(), new HashMap<>(), Optional.empty())));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1593,"status":"M"}],"commitId":"6655a09e99125aff34cb96188924fca1df3387ad","commitMessage":"@@@KAFKA-12849: KIP-744 TaskMetadata ThreadMetadata StreamsMetadata as API (#10840)\n\nImplementation of KIP-744.\n\nCreates new Interfaces for TaskMetadata.  ThreadMetadata.  and\nStreamsMetadata.  providing internal implementations for each of them.\n\nDeprecates current TaskMetadata.  ThreadMetadata under o.a.k.s.processor. \nand SreamsMetadata under a.o.k.s.state.\n\nUpdates references on internal classes from deprecated classes to new interfaces.\n\nDeprecates methods on KafkaStreams returning deprecated ThreadMeatada and\nStreamsMetadata.  and provides new ones returning the new interfaces.\n\nUpdate Javadocs referencing to deprecated classes and methods to point\nto the right ones.\n\nCo-authored-by: Bruno Cadonna <cadonna@apache.org>\n\nReviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>.  Bruno Cadonna <cadonna@apache.org>","date":"2021-06-26 00:31:49","modifiedFileCount":"29","status":"M","submitter":"Josep Prat"},{"authorTime":"2021-07-29 02:18:56","codes":[{"authorDate":"2021-07-29 02:18:56","commitOrder":32,"curCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            new TopologyMetadata(internalTopologyBuilder, config),\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n    }\n","date":"2021-07-29 02:18:56","endLine":247,"groupId":"102423","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"createStreamThread","params":"(@SuppressWarnings(\"SameParameterValue\")finalStringclientId@finalStreamsConfigconfig@finalbooleaneosEnabled)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/da8f3d05b33ab4a0fd78d50b5bdf27db2eac9e.src","preCode":"    private StreamThread createStreamThread(@SuppressWarnings(\"SameParameterValue\") final String clientId,\n                                            final StreamsConfig config,\n                                            final boolean eosEnabled) {\n        if (eosEnabled) {\n            clientSupplier.setApplicationIdForProducer(APPLICATION_ID);\n        }\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        return StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(clientId)),\n            PROCESS_ID,\n            clientId,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2021-07-29 02:18:56","commitOrder":32,"curCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            new TopologyMetadata(internalTopologyBuilder, config),\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadataImpl(task1, Utils.mkSet(t1p1), new HashMap<>(), new HashMap<>(), Optional.empty())));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","date":"2021-07-29 02:18:56","endLine":1661,"groupId":"102423","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnActiveTaskMetadataWhileRunningState","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/da8f3d05b33ab4a0fd78d50b5bdf27db2eac9e.src","preCode":"    public void shouldReturnActiveTaskMetadataWhileRunningState() {\n        internalTopologyBuilder.addSource(null, \"source\", null, null, null, topic1);\n\n        clientSupplier.setCluster(createCluster());\n\n        final StreamsMetricsImpl streamsMetrics = new StreamsMetricsImpl(\n            metrics,\n            APPLICATION_ID,\n            config.getString(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG),\n            mockTime\n        );\n\n        internalTopologyBuilder.buildTopology();\n\n        final StreamThread thread = StreamThread.create(\n            internalTopologyBuilder,\n            config,\n            clientSupplier,\n            clientSupplier.getAdmin(config.getAdminConfigs(CLIENT_ID)),\n            PROCESS_ID,\n            CLIENT_ID,\n            streamsMetrics,\n            mockTime,\n            streamsMetadataState,\n            0,\n            stateDirectory,\n            new MockStateRestoreListener(),\n            threadIdx,\n            null,\n            HANDLER\n        );\n\n        thread.setState(StreamThread.State.STARTING);\n        thread.rebalanceListener().onPartitionsRevoked(Collections.emptySet());\n\n        final Map<TaskId, Set<TopicPartition>> activeTasks = new HashMap<>();\n        final List<TopicPartition> assignedPartitions = new ArrayList<>();\n\n        \r\n        assignedPartitions.add(t1p1);\n        activeTasks.put(task1, Collections.singleton(t1p1));\n\n        thread.taskManager().handleAssignment(activeTasks, emptyMap());\n\n        final MockConsumer<byte[], byte[]> mockConsumer = (MockConsumer<byte[], byte[]>) thread.mainConsumer();\n        mockConsumer.assign(assignedPartitions);\n        mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1, 0L));\n        thread.rebalanceListener().onPartitionsAssigned(assignedPartitions);\n\n        thread.runOnce();\n\n        final ThreadMetadata metadata = thread.threadMetadata();\n        assertEquals(StreamThread.State.RUNNING.name(), metadata.threadState());\n        assertTrue(metadata.activeTasks().contains(new TaskMetadataImpl(task1, Utils.mkSet(t1p1), new HashMap<>(), new HashMap<>(), Optional.empty())));\n        assertTrue(metadata.standbyTasks().isEmpty());\n\n        assertTrue(\"#threadState() was: \" + metadata.threadState() + \"; expected either RUNNING, STARTING, PARTITIONS_REVOKED, PARTITIONS_ASSIGNED, or CREATED\",\n                   Arrays.asList(\"RUNNING\", \"STARTING\", \"PARTITIONS_REVOKED\", \"PARTITIONS_ASSIGNED\", \"CREATED\").contains(metadata.threadState()));\n        final String threadName = metadata.threadName();\n        assertThat(threadName, startsWith(CLIENT_ID + \"-StreamThread-\" + threadIdx));\n        assertEquals(threadName + \"-consumer\", metadata.consumerClientId());\n        assertEquals(threadName + \"-restore-consumer\", metadata.restoreConsumerClientId());\n        assertEquals(Collections.singleton(threadName + \"-producer\"), metadata.producerClientIds());\n        assertEquals(CLIENT_ID + \"-admin\", metadata.adminClientId());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamThreadTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1597,"status":"M"}],"commitId":"4710a491463a91ec12c670ea50c139fc14134e80","commitMessage":"@@@KAFKA-12648: Pt. 2 - Introduce TopologyMetadata to wrap InternalTopologyBuilders of named topologies (#10683)\n\nPt. 1: #10609\nPt. 2: #10683\nPt. 3: #10788\n\nThe TopologyMetadata is next up after Pt. 1 #10609. This PR sets up the basic architecture for running an app with multiple NamedTopologies.  though the APIs to add/remove them dynamically are not implemented until Pt. 3\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Walker Carlson <wcarlson@confluent.io>","date":"2021-07-29 02:18:56","modifiedFileCount":"56","status":"M","submitter":"A. Sophie Blee-Goldman"}]
