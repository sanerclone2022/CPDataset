[{"authorTime":"2017-05-13 01:36:44","codes":[{"authorDate":"2017-05-13 01:36:44","commitOrder":1,"curCode":"    public void testMetricConfigRecordingLevel() {\n        Properties props = new Properties();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n        try (KafkaProducer producer = new KafkaProducer<>(props, new ByteArraySerializer(), new ByteArraySerializer())) {\n            assertEquals(Sensor.RecordingLevel.INFO, producer.metrics.config().recordLevel());\n        }\n\n        props.put(ProducerConfig.METRICS_RECORDING_LEVEL_CONFIG, \"DEBUG\");\n        try (KafkaProducer producer = new KafkaProducer<>(props, new ByteArraySerializer(), new ByteArraySerializer())) {\n            assertEquals(Sensor.RecordingLevel.DEBUG, producer.metrics.config().recordLevel());\n        }\n    }\n","date":"2017-05-13 01:36:44","endLine":435,"groupId":"19642","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetricConfigRecordingLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3a/6426a13afe39f9cde543d74afafde4dca7ca7d.src","preCode":"    public void testMetricConfigRecordingLevel() {\n        Properties props = new Properties();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n        try (KafkaProducer producer = new KafkaProducer<>(props, new ByteArraySerializer(), new ByteArraySerializer())) {\n            assertEquals(Sensor.RecordingLevel.INFO, producer.metrics.config().recordLevel());\n        }\n\n        props.put(ProducerConfig.METRICS_RECORDING_LEVEL_CONFIG, \"DEBUG\");\n        try (KafkaProducer producer = new KafkaProducer<>(props, new ByteArraySerializer(), new ByteArraySerializer())) {\n            assertEquals(Sensor.RecordingLevel.DEBUG, producer.metrics.config().recordLevel());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":424,"status":"B"},{"authorDate":"2017-05-13 01:36:44","commitOrder":1,"curCode":"    public void testMetricConfigRecordingLevel() {\n        Properties props = new Properties();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n        try (KafkaConsumer consumer = new KafkaConsumer<>(props, new ByteArrayDeserializer(), new ByteArrayDeserializer())) {\n            assertEquals(Sensor.RecordingLevel.INFO, consumer.metrics.config().recordLevel());\n        }\n\n        props.put(ConsumerConfig.METRICS_RECORDING_LEVEL_CONFIG, \"DEBUG\");\n        try (KafkaConsumer consumer = new KafkaConsumer<>(props, new ByteArrayDeserializer(), new ByteArrayDeserializer())) {\n            assertEquals(Sensor.RecordingLevel.DEBUG, consumer.metrics.config().recordLevel());\n        }\n    }\n","date":"2017-05-13 01:36:44","endLine":1250,"groupId":"19642","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetricConfigRecordingLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/59/28a2864e58e6a538284e6ea8c3ee3ee04af8c7.src","preCode":"    public void testMetricConfigRecordingLevel() {\n        Properties props = new Properties();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n        try (KafkaConsumer consumer = new KafkaConsumer<>(props, new ByteArrayDeserializer(), new ByteArrayDeserializer())) {\n            assertEquals(Sensor.RecordingLevel.INFO, consumer.metrics.config().recordLevel());\n        }\n\n        props.put(ConsumerConfig.METRICS_RECORDING_LEVEL_CONFIG, \"DEBUG\");\n        try (KafkaConsumer consumer = new KafkaConsumer<>(props, new ByteArrayDeserializer(), new ByteArrayDeserializer())) {\n            assertEquals(Sensor.RecordingLevel.DEBUG, consumer.metrics.config().recordLevel());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1239,"status":"B"}],"commitId":"1c2bbaa501c2d0fd4db9c2dacacc3ff7f5236d3d","commitMessage":"@@@MINOR: Fix consumer and producer to actually support metrics recording level\n\nAlso add tests and a few clean-ups.\n\nAuthor: Ismael Juma <ismael@juma.me.uk>\n\nReviewers: Eno Thereska <eno.thereska@gmail.com>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2937 from ijuma/metrics-recording-level-producer\n","date":"2017-05-13 01:36:44","modifiedFileCount":"6","status":"B","submitter":"Ismael Juma"},{"authorTime":"2017-05-13 01:36:44","codes":[{"authorDate":"2020-02-20 22:54:37","commitOrder":2,"curCode":"    public void testMetricConfigRecordingLevel() {\n        Properties props = new Properties();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n        try (KafkaProducer<byte[], byte[]> producer = new KafkaProducer<>(props, new ByteArraySerializer(), new ByteArraySerializer())) {\n            assertEquals(Sensor.RecordingLevel.INFO, producer.metrics.config().recordLevel());\n        }\n\n        props.put(ProducerConfig.METRICS_RECORDING_LEVEL_CONFIG, \"DEBUG\");\n        try (KafkaProducer<byte[], byte[]> producer = new KafkaProducer<>(props, new ByteArraySerializer(), new ByteArraySerializer())) {\n            assertEquals(Sensor.RecordingLevel.DEBUG, producer.metrics.config().recordLevel());\n        }\n    }\n","date":"2020-02-20 22:54:37","endLine":707,"groupId":"751","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetricConfigRecordingLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/f39a984f838c43058cb1c07e00718f51f6c86c.src","preCode":"    public void testMetricConfigRecordingLevel() {\n        Properties props = new Properties();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n        try (KafkaProducer producer = new KafkaProducer<>(props, new ByteArraySerializer(), new ByteArraySerializer())) {\n            assertEquals(Sensor.RecordingLevel.INFO, producer.metrics.config().recordLevel());\n        }\n\n        props.put(ProducerConfig.METRICS_RECORDING_LEVEL_CONFIG, \"DEBUG\");\n        try (KafkaProducer producer = new KafkaProducer<>(props, new ByteArraySerializer(), new ByteArraySerializer())) {\n            assertEquals(Sensor.RecordingLevel.DEBUG, producer.metrics.config().recordLevel());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":696,"status":"M"},{"authorDate":"2017-05-13 01:36:44","commitOrder":2,"curCode":"    public void testMetricConfigRecordingLevel() {\n        Properties props = new Properties();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n        try (KafkaConsumer consumer = new KafkaConsumer<>(props, new ByteArrayDeserializer(), new ByteArrayDeserializer())) {\n            assertEquals(Sensor.RecordingLevel.INFO, consumer.metrics.config().recordLevel());\n        }\n\n        props.put(ConsumerConfig.METRICS_RECORDING_LEVEL_CONFIG, \"DEBUG\");\n        try (KafkaConsumer consumer = new KafkaConsumer<>(props, new ByteArrayDeserializer(), new ByteArrayDeserializer())) {\n            assertEquals(Sensor.RecordingLevel.DEBUG, consumer.metrics.config().recordLevel());\n        }\n    }\n","date":"2017-05-13 01:36:44","endLine":1250,"groupId":"19642","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetricConfigRecordingLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/59/28a2864e58e6a538284e6ea8c3ee3ee04af8c7.src","preCode":"    public void testMetricConfigRecordingLevel() {\n        Properties props = new Properties();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n        try (KafkaConsumer consumer = new KafkaConsumer<>(props, new ByteArrayDeserializer(), new ByteArrayDeserializer())) {\n            assertEquals(Sensor.RecordingLevel.INFO, consumer.metrics.config().recordLevel());\n        }\n\n        props.put(ConsumerConfig.METRICS_RECORDING_LEVEL_CONFIG, \"DEBUG\");\n        try (KafkaConsumer consumer = new KafkaConsumer<>(props, new ByteArrayDeserializer(), new ByteArrayDeserializer())) {\n            assertEquals(Sensor.RecordingLevel.DEBUG, consumer.metrics.config().recordLevel());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1239,"status":"N"}],"commitId":"8ab0994919752cd4870e771221ba934a6a539a67","commitMessage":"@@@MINOR: Fix a number of warnings in clients test (#8073)\n\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Andrew Choi <li_andchoi@microsoft.com>","date":"2020-02-20 22:54:37","modifiedFileCount":"14","status":"M","submitter":"Mickael Maison"},{"authorTime":"2020-09-24 21:53:59","codes":[{"authorDate":"2020-02-20 22:54:37","commitOrder":3,"curCode":"    public void testMetricConfigRecordingLevel() {\n        Properties props = new Properties();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n        try (KafkaProducer<byte[], byte[]> producer = new KafkaProducer<>(props, new ByteArraySerializer(), new ByteArraySerializer())) {\n            assertEquals(Sensor.RecordingLevel.INFO, producer.metrics.config().recordLevel());\n        }\n\n        props.put(ProducerConfig.METRICS_RECORDING_LEVEL_CONFIG, \"DEBUG\");\n        try (KafkaProducer<byte[], byte[]> producer = new KafkaProducer<>(props, new ByteArraySerializer(), new ByteArraySerializer())) {\n            assertEquals(Sensor.RecordingLevel.DEBUG, producer.metrics.config().recordLevel());\n        }\n    }\n","date":"2020-02-20 22:54:37","endLine":707,"groupId":"103723","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testMetricConfigRecordingLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/f39a984f838c43058cb1c07e00718f51f6c86c.src","preCode":"    public void testMetricConfigRecordingLevel() {\n        Properties props = new Properties();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n        try (KafkaProducer<byte[], byte[]> producer = new KafkaProducer<>(props, new ByteArraySerializer(), new ByteArraySerializer())) {\n            assertEquals(Sensor.RecordingLevel.INFO, producer.metrics.config().recordLevel());\n        }\n\n        props.put(ProducerConfig.METRICS_RECORDING_LEVEL_CONFIG, \"DEBUG\");\n        try (KafkaProducer<byte[], byte[]> producer = new KafkaProducer<>(props, new ByteArraySerializer(), new ByteArraySerializer())) {\n            assertEquals(Sensor.RecordingLevel.DEBUG, producer.metrics.config().recordLevel());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":696,"status":"N"},{"authorDate":"2020-09-24 21:53:59","commitOrder":3,"curCode":"    public void testMetricConfigRecordingLevel() {\n        Properties props = new Properties();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n        try (KafkaConsumer<byte[], byte[]> consumer = new KafkaConsumer<>(props, new ByteArrayDeserializer(), new ByteArrayDeserializer())) {\n            assertEquals(Sensor.RecordingLevel.INFO, consumer.metrics.config().recordLevel());\n        }\n\n        props.put(ConsumerConfig.METRICS_RECORDING_LEVEL_CONFIG, \"DEBUG\");\n        try (KafkaConsumer<byte[], byte[]> consumer = new KafkaConsumer<>(props, new ByteArrayDeserializer(), new ByteArrayDeserializer())) {\n            assertEquals(Sensor.RecordingLevel.DEBUG, consumer.metrics.config().recordLevel());\n        }\n    }\n","date":"2020-09-24 21:53:59","endLine":1593,"groupId":"103723","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMetricConfigRecordingLevel","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/1dde2765305df8acc7534339aa33a0d34969a9.src","preCode":"    public void testMetricConfigRecordingLevel() {\n        Properties props = new Properties();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9000\");\n        try (KafkaConsumer consumer = new KafkaConsumer<>(props, new ByteArrayDeserializer(), new ByteArrayDeserializer())) {\n            assertEquals(Sensor.RecordingLevel.INFO, consumer.metrics.config().recordLevel());\n        }\n\n        props.put(ConsumerConfig.METRICS_RECORDING_LEVEL_CONFIG, \"DEBUG\");\n        try (KafkaConsumer consumer = new KafkaConsumer<>(props, new ByteArrayDeserializer(), new ByteArrayDeserializer())) {\n            assertEquals(Sensor.RecordingLevel.DEBUG, consumer.metrics.config().recordLevel());\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1582,"status":"M"}],"commitId":"785de1e3d459b26c3ce383986827719388be7c6f","commitMessage":"@@@KAFKA-9627: Replace ListOffset request/response with automated protocol (#8295)\n\n\nReviewers: Boyang Chen <reluctanthero104@gmail.com>.  David Jacot <djacot@confluent.io>\n\nCo-authored-by: Mickael Maison <mickael.maison@gmail.com>\nCo-authored-by: Edoardo Comar <ecomar@uk.ibm.com>","date":"2020-09-24 21:53:59","modifiedFileCount":"12","status":"M","submitter":"Mickael Maison"}]
