[{"authorTime":"2018-05-04 23:42:01","codes":[{"authorDate":"2018-08-03 09:34:53","commitOrder":4,"curCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(false));\n        task.initializeStateStores();\n        task.initializeTopology();\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable.cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","date":"2018-08-03 09:34:53","endLine":452,"groupId":"21035","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRespectPunctuateCancellationSystemTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/6bcb3b54e6c9690fa5dd6335f19904a361d863.src","preCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(false));\n        task.initializeStateStores();\n        task.initializeTopology();\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable.cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"B"},{"authorDate":"2018-05-04 23:42:01","commitOrder":4,"curCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(false));\n        task.initializeStateStores();\n        task.initializeTopology();\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","date":"2018-05-04 23:42:01","endLine":574,"groupId":"5281","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPunctuateOnceSystemTimeAfterGap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3a/0fc4eb1cdd9758d524f3001af192b2f5d3ab89.src","preCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(false));\n        task.initializeStateStores();\n        task.initializeTopology();\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":551,"status":"NB"}],"commitId":"afe00effe2d79e89e159972cf1f5f7ffeb0c6e97","commitMessage":"@@@KAFKA-3514: Part II.  Choose tasks with data on all partitions to process (#5398)\n\n1. In each iteration.  decide if a task is processable if all of its partitions contains data.  so it can decide which record to process next.\n\n1.a Add one exception that.  if the task indeed have data on some but not all of its partitions.  we only consider as not processable for some finite round of iterations.\n1.b Add a task-level metric to record whenever we are forced to process a task that is only \"partially data available\".  since it may leads to non-determinism.\n\n2. Break the main loop on put-raw-data and process-them. Since now not all data put into the queue would be processed completely within a single iteration.\n\n3. NOTE that within an iteration.  if a task has exhausted one of its queue it will still be processed.  since we only update processable list once in each iteration.  I'm improving on this on the follow-up part III PR.\n\n4. Found and fixed a bug in metrics recording: the taskName and sensorName parameters were exchanged.\n\n5. Optimized task stream time computation again since our current partition stream time reasoning has been simplified.\n\n6. Added unit tests.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <vvcephei@users.noreply.github.com>.  Bill Bejeck <bbejeck@gmail.com>","date":"2018-08-03 09:34:53","modifiedFileCount":"10","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-10-20 04:45:36","codes":[{"authorDate":"2019-10-20 04:45:36","commitOrder":5,"curCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(false), StreamsConfig.METRICS_LATEST);\n        task.initializeStateStores();\n        task.initializeTopology();\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable.cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","date":"2019-10-20 04:45:36","endLine":710,"groupId":"21035","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRespectPunctuateCancellationSystemTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/be4f683810a206b2491ce29017bb27c0faa7f1.src","preCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(false));\n        task.initializeStateStores();\n        task.initializeTopology();\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable.cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":699,"status":"M"},{"authorDate":"2019-10-20 04:45:36","commitOrder":5,"curCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(false), StreamsConfig.METRICS_LATEST);\n        task.initializeStateStores();\n        task.initializeTopology();\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","date":"2019-10-20 04:45:36","endLine":934,"groupId":"5281","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPunctuateOnceSystemTimeAfterGap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/be4f683810a206b2491ce29017bb27c0faa7f1.src","preCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(false));\n        task.initializeStateStores();\n        task.initializeTopology();\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":911,"status":"M"}],"commitId":"2298c7f84fd0e29b304eb11078bfe76ca5b04a97","commitMessage":"@@@KAFKA-8964: Refactor thread-level metrics depending on built-in metrics version (#7474)\n\n* Made commit-over-tasks sensor and skipped-records sensor optional since they are removed in the latest version\n* Refactored methods for sensor creation\n* Adapted unit and integration tests\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2019-10-20 04:45:36","modifiedFileCount":"50","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-02-05 13:06:39","codes":[{"authorDate":"2020-02-05 13:06:39","commitOrder":6,"curCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable.cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","date":"2020-02-05 13:06:39","endLine":667,"groupId":"21035","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRespectPunctuateCancellationSystemTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/2b75df9bcf88fa0bbfd86a18affe4ad2137dc7.src","preCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(false), StreamsConfig.METRICS_LATEST);\n        task.initializeStateStores();\n        task.initializeTopology();\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable.cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":656,"status":"M"},{"authorDate":"2020-02-05 13:06:39","commitOrder":6,"curCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","date":"2020-02-05 13:06:39","endLine":904,"groupId":"5281","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPunctuateOnceSystemTimeAfterGap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/2b75df9bcf88fa0bbfd86a18affe4ad2137dc7.src","preCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(false), StreamsConfig.METRICS_LATEST);\n        task.initializeStateStores();\n        task.initializeTopology();\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":881,"status":"M"}],"commitId":"4090f9a2b0a95e4da127e4786007542276d97520","commitMessage":"@@@KAFKA-9113: Clean up task management and state management (#7997)\n\nThis PR is collaborated by Guozhang Wang and John Roesler. It is a significant tech debt cleanup on task management and state management.  and is broken down by several sub-tasks listed below:\n\nExtract embedded clients (producer and consumer) into RecordCollector from StreamTask.\nguozhangwang#2\nguozhangwang#5\n\nConsolidate the standby updating and active restoring logic into ChangelogReader and extract out of StreamThread.\nguozhangwang#3\nguozhangwang#4\n\nIntroduce Task state life cycle (created.  restoring.  running.  suspended.  closing).  and refactor the task operations based on the current state.\nguozhangwang#6\nguozhangwang#7\n\nConsolidate AssignedTasks into TaskManager and simplify the logic of changelog management and task management (since they are already moved in step 2) and 3)).\nguozhangwang#8\nguozhangwang#9\n\nAlso simplified the StreamThread logic a bit as the embedded clients / changelog restoration logic has been moved into step 1) and 2).\nguozhangwang#10\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-02-05 13:06:39","modifiedFileCount":"76","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-02-05 13:06:39","codes":[{"authorDate":"2020-08-21 03:06:16","commitOrder":7,"curCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable().cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","date":"2020-08-21 03:06:16","endLine":849,"groupId":"5281","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRespectPunctuateCancellationSystemTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f7/6849f8dae8a323ff3562463efcfaf9015c819a.src","preCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable.cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":838,"status":"M"},{"authorDate":"2020-02-05 13:06:39","commitOrder":7,"curCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","date":"2020-02-05 13:06:39","endLine":904,"groupId":"5281","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPunctuateOnceSystemTimeAfterGap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/2b75df9bcf88fa0bbfd86a18affe4ad2137dc7.src","preCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":881,"status":"N"}],"commitId":"88d4bc4641064d21a481ba3b8562a4c97703d64d","commitMessage":"@@@KAFKA-10379: Implement the KIP-478 StreamBuilder#addGlobalStore() (#9148)\n\nFrom KIP-478.  implement the new StreamBuilder#addGlobalStore() overload\nthat takes a stateUpdateSupplier fully typed Processor<KIn.  VIn.  Void.  Void>.\n\nWhere necessary.  use the adapters to make the old APIs defer to the new ones. \nas well as limiting the scope of this change set.\n\nReviewers: Boyang Chen <boyang@apache.org>","date":"2020-08-21 03:06:16","modifiedFileCount":"41","status":"M","submitter":"John Roesler"},{"authorTime":"2021-01-07 06:01:02","codes":[{"authorDate":"2021-01-07 06:01:02","commitOrder":8,"curCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable().cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","date":"2021-01-07 06:01:02","endLine":968,"groupId":"5281","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRespectPunctuateCancellationSystemTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable().cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":957,"status":"M"},{"authorDate":"2021-01-07 06:01:02","commitOrder":8,"curCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","date":"2021-01-07 06:01:02","endLine":1265,"groupId":"5281","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPunctuateOnceSystemTimeAfterGap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(false, \"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1242,"status":"M"}],"commitId":"22e8e71156762b40ac93e2cbd42eacba00dbfb0c","commitMessage":"@@@KAFKA-9274: Fix commit-TimeoutException handling for EOS (#9800)\n\nIf EOS is enabled and the TX commit fails with a timeout. \nwe should not process more messages (what is ok for non-EOS)\nbecause we don't really know the status of the TX.\nIf the commit was indeed successful.  we won't have an open TX\ncan calling send() would fail with an fatal error.\n\nInstead.  we should retry the (idempotent) commit of the TX. \nand start a new TX afterwards.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  John Roesler <john@confluent.io>","date":"2021-01-07 06:01:02","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-02-06 09:25:50","codes":[{"authorDate":"2021-02-06 09:25:50","commitOrder":9,"curCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable().cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","date":"2021-02-06 09:25:50","endLine":1099,"groupId":"5281","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRespectPunctuateCancellationSystemTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/69b87b850e0381e2b0cf59590175eaa06ff5d8.src","preCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable().cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1088,"status":"M"},{"authorDate":"2021-02-06 09:25:50","commitOrder":9,"curCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","date":"2021-02-06 09:25:50","endLine":1297,"groupId":"5281","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPunctuateOnceSystemTimeAfterGap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/69b87b850e0381e2b0cf59590175eaa06ff5d8.src","preCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1274,"status":"M"}],"commitId":"0bc394cc1d19f1e41dd6646e9ac0e09b91fb1398","commitMessage":"@@@KAFKA-9274: handle TimeoutException on task reset (#10000)\n\nPart of KIP-572: We move the offset reset for the internal \"main consumer\" when we revive a corrupted task.  from the \"task cleanup\" code path.  to the \"task init\" code path. For this case.  we have already logic in place to handle TimeoutException that might be thrown by consumer#committed() method call.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>\n","date":"2021-02-06 09:25:50","modifiedFileCount":"10","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-02-07 05:04:30","codes":[{"authorDate":"2021-02-07 05:04:30","commitOrder":10,"curCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable().cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","date":"2021-02-07 05:04:30","endLine":1035,"groupId":"5281","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRespectPunctuateCancellationSystemTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ea/3fbdd91e1cf3f6ab75badba24791183a05fb38.src","preCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable().cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1024,"status":"M"},{"authorDate":"2021-02-07 05:04:30","commitOrder":10,"curCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","date":"2021-02-07 05:04:30","endLine":1233,"groupId":"5281","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPunctuateOnceSystemTimeAfterGap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ea/3fbdd91e1cf3f6ab75badba24791183a05fb38.src","preCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1210,"status":"M"}],"commitId":"d2cb2dc45d536ae124e3da25d6d5a4e932a23a27","commitMessage":"@@@KAFKA-9751: Forward CreateTopicsRequest for FindCoordinator/Metadata when topic creation is needed (#9579)\n\nConsolidate auto topic creation logic to either forward a CreateTopicRequest or handling the creation directly as AutoTopicCreationManager.  when handling FindCoordinator/Metadata request.\n\nCo-authored-by: Jason Gustafson <jason@confluent.io>\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2021-02-07 05:04:30","modifiedFileCount":"15","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-03-23 04:39:29","codes":[{"authorDate":"2021-03-23 04:39:29","commitOrder":11,"curCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable().cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","date":"2021-03-23 04:39:29","endLine":1090,"groupId":"5281","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRespectPunctuateCancellationSystemTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/78cbe1c94d7ade29cd4d7f012769ba68f32ec0.src","preCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable().cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1079,"status":"M"},{"authorDate":"2021-03-23 04:39:29","commitOrder":11,"curCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","date":"2021-03-23 04:39:29","endLine":1288,"groupId":"5281","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPunctuateOnceSystemTimeAfterGap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/78cbe1c94d7ade29cd4d7f012769ba68f32ec0.src","preCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1265,"status":"M"}],"commitId":"80f373d34f7716a54fa9ec1e37a27c65cbbae0f2","commitMessage":"@@@(Cherry-pick) KAFKA-9274: handle TimeoutException on task reset (#10000) (#10372)\n\nThis PR was removed by accident in trunk and 2.8.  bringing it back.\n\nCo-authored-by: Matthias J. Sax <matthias@confluent.io>\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-03-23 04:39:29","modifiedFileCount":"10","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":12,"curCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(\"100\"));\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable().cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","date":"2021-06-01 20:05:08","endLine":1044,"groupId":"102057","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRespectPunctuateCancellationSystemTime","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5b/4125699caf2dbc0cadbc936ac0104e34e104b7.src","preCode":"    public void shouldRespectPunctuateCancellationSystemTime() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        final long now = time.milliseconds();\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.scheduleCancellable().cancel();\n        time.sleep(10);\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 10);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1033,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":12,"curCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(\"100\"));\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","date":"2021-06-01 20:05:08","endLine":1261,"groupId":"102057","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPunctuateOnceSystemTimeAfterGap","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5b/4125699caf2dbc0cadbc936ac0104e34e104b7.src","preCode":"    public void shouldPunctuateOnceSystemTimeAfterGap() {\n        task = createStatelessTask(createConfig(\"100\"), StreamsConfig.METRICS_LATEST);\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        final long now = time.milliseconds();\n        time.sleep(100);\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(10);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(12);\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(7);\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(1); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        time.sleep(105); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        time.sleep(5); \r\n        assertTrue(task.maybePunctuateSystemTime());\n        assertFalse(task.maybePunctuateSystemTime());\n        processorSystemTime.mockProcessor.checkAndClearPunctuateResult(PunctuationType.WALL_CLOCK_TIME, now + 100, now + 110, now + 122, now + 130, now + 235, now + 240);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1238,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"}]
