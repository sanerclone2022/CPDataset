[{"authorTime":"2015-10-22 03:13:42","codes":[{"authorDate":"2015-10-22 03:13:42","commitOrder":1,"curCode":"    public static PartitionAssignor.Subscription deserializeSubscription(ByteBuffer buffer) {\n        Struct header = (Struct) CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n        checkVersionCompatibility(version);\n        Struct struct = (Struct) SUBSCRIPTION_V0.read(buffer);\n        ByteBuffer userData = struct.getBytes(USER_DATA_KEY_NAME);\n        List<String> topics = new ArrayList<>();\n        for (Object topicObj : struct.getArray(TOPICS_KEY_NAME))\n            topics.add((String) topicObj);\n        return new PartitionAssignor.Subscription(topics, userData);\n    }\n","date":"2015-10-22 03:13:42","endLine":101,"groupId":"11418","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeSubscription","params":"(ByteBufferbuffer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/00/20993f3e23aa7f9687279afea66deeda4a1490.src","preCode":"    public static PartitionAssignor.Subscription deserializeSubscription(ByteBuffer buffer) {\n        Struct header = (Struct) CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n        checkVersionCompatibility(version);\n        Struct struct = (Struct) SUBSCRIPTION_V0.read(buffer);\n        ByteBuffer userData = struct.getBytes(USER_DATA_KEY_NAME);\n        List<String> topics = new ArrayList<>();\n        for (Object topicObj : struct.getArray(TOPICS_KEY_NAME))\n            topics.add((String) topicObj);\n        return new PartitionAssignor.Subscription(topics, userData);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2015-10-22 03:13:42","commitOrder":1,"curCode":"    public static PartitionAssignor.Assignment deserializeAssignment(ByteBuffer buffer) {\n        Struct header = (Struct) CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n        checkVersionCompatibility(version);\n        Struct struct = (Struct) ASSIGNMENT_V0.read(buffer);\n        ByteBuffer userData = struct.getBytes(USER_DATA_KEY_NAME);\n        List<TopicPartition> partitions = new ArrayList<>();\n        for (Object structObj : struct.getArray(TOPIC_PARTITIONS_KEY_NAME)) {\n            Struct assignment = (Struct) structObj;\n            String topic = assignment.getString(TOPIC_KEY_NAME);\n            for (Object partitionObj : assignment.getArray(PARTITIONS_KEY_NAME)) {\n                Integer partition = (Integer) partitionObj;\n                partitions.add(new TopicPartition(topic, partition));\n            }\n        }\n        return new PartitionAssignor.Assignment(partitions, userData);\n    }\n","date":"2015-10-22 03:13:42","endLine":119,"groupId":"21928","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeAssignment","params":"(ByteBufferbuffer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/00/20993f3e23aa7f9687279afea66deeda4a1490.src","preCode":"    public static PartitionAssignor.Assignment deserializeAssignment(ByteBuffer buffer) {\n        Struct header = (Struct) CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n        checkVersionCompatibility(version);\n        Struct struct = (Struct) ASSIGNMENT_V0.read(buffer);\n        ByteBuffer userData = struct.getBytes(USER_DATA_KEY_NAME);\n        List<TopicPartition> partitions = new ArrayList<>();\n        for (Object structObj : struct.getArray(TOPIC_PARTITIONS_KEY_NAME)) {\n            Struct assignment = (Struct) structObj;\n            String topic = assignment.getString(TOPIC_KEY_NAME);\n            for (Object partitionObj : assignment.getArray(PARTITIONS_KEY_NAME)) {\n                Integer partition = (Integer) partitionObj;\n                partitions.add(new TopicPartition(topic, partition));\n            }\n        }\n        return new PartitionAssignor.Assignment(partitions, userData);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"}],"commitId":"86eb74d9236c586af5889fe79f4b9e066c9c2af3","commitMessage":"@@@KAFKA-2464: client-side assignment for new consumer\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Jiangjie Qin.  Onur Karaman.  Ewen Cheslack-Postava.  Guozhang Wang\n\nCloses #165 from hachikuji/KAFKA-2464\n","date":"2015-10-22 03:13:42","modifiedFileCount":"24","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2015-12-19 02:27:03","codes":[{"authorDate":"2015-12-19 02:27:03","commitOrder":2,"curCode":"    public static PartitionAssignor.Subscription deserializeSubscription(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n        checkVersionCompatibility(version);\n        Struct struct = SUBSCRIPTION_V0.read(buffer);\n        ByteBuffer userData = struct.getBytes(USER_DATA_KEY_NAME);\n        List<String> topics = new ArrayList<>();\n        for (Object topicObj : struct.getArray(TOPICS_KEY_NAME))\n            topics.add((String) topicObj);\n        return new PartitionAssignor.Subscription(topics, userData);\n    }\n","date":"2015-12-19 02:27:03","endLine":103,"groupId":"11418","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeSubscription","params":"(ByteBufferbuffer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3f/87995642d4e09f5c706283bdbb3e8235d013f9.src","preCode":"    public static PartitionAssignor.Subscription deserializeSubscription(ByteBuffer buffer) {\n        Struct header = (Struct) CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n        checkVersionCompatibility(version);\n        Struct struct = (Struct) SUBSCRIPTION_V0.read(buffer);\n        ByteBuffer userData = struct.getBytes(USER_DATA_KEY_NAME);\n        List<String> topics = new ArrayList<>();\n        for (Object topicObj : struct.getArray(TOPICS_KEY_NAME))\n            topics.add((String) topicObj);\n        return new PartitionAssignor.Subscription(topics, userData);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"},{"authorDate":"2015-12-19 02:27:03","commitOrder":2,"curCode":"    public static PartitionAssignor.Assignment deserializeAssignment(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n        checkVersionCompatibility(version);\n        Struct struct = ASSIGNMENT_V0.read(buffer);\n        ByteBuffer userData = struct.getBytes(USER_DATA_KEY_NAME);\n        List<TopicPartition> partitions = new ArrayList<>();\n        for (Object structObj : struct.getArray(TOPIC_PARTITIONS_KEY_NAME)) {\n            Struct assignment = (Struct) structObj;\n            String topic = assignment.getString(TOPIC_KEY_NAME);\n            for (Object partitionObj : assignment.getArray(PARTITIONS_KEY_NAME)) {\n                Integer partition = (Integer) partitionObj;\n                partitions.add(new TopicPartition(topic, partition));\n            }\n        }\n        return new PartitionAssignor.Assignment(partitions, userData);\n    }\n","date":"2015-12-19 02:27:03","endLine":121,"groupId":"21928","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeAssignment","params":"(ByteBufferbuffer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3f/87995642d4e09f5c706283bdbb3e8235d013f9.src","preCode":"    public static PartitionAssignor.Assignment deserializeAssignment(ByteBuffer buffer) {\n        Struct header = (Struct) CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n        checkVersionCompatibility(version);\n        Struct struct = (Struct) ASSIGNMENT_V0.read(buffer);\n        ByteBuffer userData = struct.getBytes(USER_DATA_KEY_NAME);\n        List<TopicPartition> partitions = new ArrayList<>();\n        for (Object structObj : struct.getArray(TOPIC_PARTITIONS_KEY_NAME)) {\n            Struct assignment = (Struct) structObj;\n            String topic = assignment.getString(TOPIC_KEY_NAME);\n            for (Object partitionObj : assignment.getArray(PARTITIONS_KEY_NAME)) {\n                Integer partition = (Integer) partitionObj;\n                partitions.add(new TopicPartition(topic, partition));\n            }\n        }\n        return new PartitionAssignor.Assignment(partitions, userData);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"8c754c45af57a3249232268c6093cb4f50e1d45f","commitMessage":"@@@MINOR: Change return type of `Schema.read` to be `Struct` instead of `Object`\n\nWe always return a `Struct` from `Schema.read` and this means that\nwe can remove a large number of casts.\n\nAuthor: Ismael Juma <ismael@juma.me.uk>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #684 from ijuma/schema-read-should-return-struct\n","date":"2015-12-19 02:27:03","modifiedFileCount":"40","status":"M","submitter":"Ismael Juma"},{"authorTime":"2019-06-15 06:51:33","codes":[{"authorDate":"2019-06-15 06:51:33","commitOrder":3,"curCode":"    public static PartitionAssignor.Subscription deserializeSubscription(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported subscription version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeSubscriptionV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeSubscriptionV1(buffer);\n\n            \r\n            default:\n                return deserializeSubscriptionV1(buffer);\n        }\n    }\n","date":"2019-06-15 06:51:33","endLine":227,"groupId":"17622","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeSubscription","params":"(ByteBufferbuffer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b4/ad4514eb60b343f686c1482c200761e07c28a6.src","preCode":"    public static PartitionAssignor.Subscription deserializeSubscription(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n        checkVersionCompatibility(version);\n        Struct struct = SUBSCRIPTION_V0.read(buffer);\n        ByteBuffer userData = struct.getBytes(USER_DATA_KEY_NAME);\n        List<String> topics = new ArrayList<>();\n        for (Object topicObj : struct.getArray(TOPICS_KEY_NAME))\n            topics.add((String) topicObj);\n        return new PartitionAssignor.Subscription(topics, userData);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"},{"authorDate":"2019-06-15 06:51:33","commitOrder":3,"curCode":"    public static PartitionAssignor.Assignment deserializeAssignment(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported assignment version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeAssignmentV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeAssignmentV1(buffer);\n\n            default:\n                \r\n                return deserializeAssignmentV1(buffer);\n        }\n    }\n","date":"2019-06-15 06:51:33","endLine":333,"groupId":"17622","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeAssignment","params":"(ByteBufferbuffer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b4/ad4514eb60b343f686c1482c200761e07c28a6.src","preCode":"    public static PartitionAssignor.Assignment deserializeAssignment(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n        checkVersionCompatibility(version);\n        Struct struct = ASSIGNMENT_V0.read(buffer);\n        ByteBuffer userData = struct.getBytes(USER_DATA_KEY_NAME);\n        List<TopicPartition> partitions = new ArrayList<>();\n        for (Object structObj : struct.getArray(TOPIC_PARTITIONS_KEY_NAME)) {\n            Struct assignment = (Struct) structObj;\n            String topic = assignment.getString(TOPIC_KEY_NAME);\n            for (Object partitionObj : assignment.getArray(PARTITIONS_KEY_NAME)) {\n                Integer partition = (Integer) partitionObj;\n                partitions.add(new TopicPartition(topic, partition));\n            }\n        }\n        return new PartitionAssignor.Assignment(partitions, userData);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"}],"commitId":"2ef02f111e3a1640d3e92aa29dae5677d0eefe18","commitMessage":"@@@KAFKA-8179: Part I.  Bump up consumer protocol to v2 (#6528)\n\n1. Add new fields of subscription / assignment and bump up consumer protocol to v2.\n2. Update tests to make sure old versioned protocol can be successfully deserialized.  and new versioned protocol can be deserialized by old byte code.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Sophie Blee-Goldman <sophie@confluent.io>.   Bill Bejeck <bbejeck@gmail.com>","date":"2019-06-15 06:51:33","modifiedFileCount":"4","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-06-15 06:51:33","codes":[{"authorDate":"2019-06-18 02:25:22","commitOrder":4,"curCode":"    public static PartitionAssignor.Subscription deserializeSubscription(ByteBuffer buffer,\n                                                                         Optional<String> groupInstanceId) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported subscription version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeSubscriptionV0(buffer, groupInstanceId);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeSubscriptionV1(buffer, groupInstanceId);\n\n            \r\n            default:\n                return deserializeSubscriptionV1(buffer, groupInstanceId);\n        }\n    }\n","date":"2019-06-18 02:25:22","endLine":239,"groupId":"17622","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeSubscription","params":"(ByteBufferbuffer@Optional<String>groupInstanceId)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d3/737f79e35eb75552af19cf153fd049448dd132.src","preCode":"    public static PartitionAssignor.Subscription deserializeSubscription(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported subscription version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeSubscriptionV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeSubscriptionV1(buffer);\n\n            \r\n            default:\n                return deserializeSubscriptionV1(buffer);\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2019-06-15 06:51:33","commitOrder":4,"curCode":"    public static PartitionAssignor.Assignment deserializeAssignment(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported assignment version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeAssignmentV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeAssignmentV1(buffer);\n\n            default:\n                \r\n                return deserializeAssignmentV1(buffer);\n        }\n    }\n","date":"2019-06-15 06:51:33","endLine":333,"groupId":"17622","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeAssignment","params":"(ByteBufferbuffer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b4/ad4514eb60b343f686c1482c200761e07c28a6.src","preCode":"    public static PartitionAssignor.Assignment deserializeAssignment(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported assignment version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeAssignmentV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeAssignmentV1(buffer);\n\n            default:\n                \r\n                return deserializeAssignmentV1(buffer);\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"N"}],"commitId":"47f908fa73fb7bbaec553635e75bffddd7a473f9","commitMessage":"@@@KAFKA-8539; Add group.instance.id to Subscription (#6936)\n\nThis PR is part of KIP-345's effort to utilize this new field for more stable topic partition assignment. We add the group instance id to the `Subscription` object to allow partition assignors to make stickier assignments. More details [here](https://cwiki.apache.org/confluence/display/KAFKA/KIP-345%3A+Introduce+static+membership+protocol+to+reduce+consumer+rebalances#KIP-345:Introducestaticmembershipprotocoltoreduceconsumerrebalances-ClientBehaviorChanges). \n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-06-18 02:25:22","modifiedFileCount":"6","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-06-15 06:51:33","codes":[{"authorDate":"2019-06-24 06:22:07","commitOrder":5,"curCode":"    public static PartitionAssignor.Subscription deserializeSubscription(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported subscription version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeSubscriptionV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeSubscriptionV1(buffer);\n\n            \r\n            default:\n                return deserializeSubscriptionV1(buffer);\n        }\n    }\n","date":"2019-06-24 06:22:07","endLine":242,"groupId":"17622","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeSubscription","params":"(ByteBufferbuffer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d0/5d5b06906a2118a2d847ebe2ba7f4b96e87aff.src","preCode":"    public static PartitionAssignor.Subscription deserializeSubscription(ByteBuffer buffer,\n                                                                         Optional<String> groupInstanceId) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported subscription version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeSubscriptionV0(buffer, groupInstanceId);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeSubscriptionV1(buffer, groupInstanceId);\n\n            \r\n            default:\n                return deserializeSubscriptionV1(buffer, groupInstanceId);\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2019-06-15 06:51:33","commitOrder":5,"curCode":"    public static PartitionAssignor.Assignment deserializeAssignment(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported assignment version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeAssignmentV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeAssignmentV1(buffer);\n\n            default:\n                \r\n                return deserializeAssignmentV1(buffer);\n        }\n    }\n","date":"2019-06-15 06:51:33","endLine":333,"groupId":"17622","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeAssignment","params":"(ByteBufferbuffer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b4/ad4514eb60b343f686c1482c200761e07c28a6.src","preCode":"    public static PartitionAssignor.Assignment deserializeAssignment(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported assignment version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeAssignmentV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeAssignmentV1(buffer);\n\n            default:\n                \r\n                return deserializeAssignmentV1(buffer);\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"N"}],"commitId":"e5c4ebdd7433d746a46d6962ee04ff2d782d892b","commitMessage":"@@@KAFKA-8179: Part 2.  ConsumerCoordinator Algorithm (#6778)\n\n1. In ConsumerCoordinator.  select the protocol as the common protocol from all configured assignor instances' supported protocols with the highest number.\n1.b. In onJoinPrepare: only call onPartitionRevoked with EAGER.\n1.a. In onJoinComplete: call onPartitionAssigned with EAGER; call onPartitionRevoked following onPartitionAssigned with COOPERATIVE.  and then request re-join if the error indicates so.\n1.c. In performAssignment: update the user's assignor returned assignments by excluding all partitions that are still owned by some other members.\n\n2. I've refactored the Subscription / Assignment such that: assigned partitions.  error codes.  and group instance id are not-final anymore.  instead they can be updated. For the last one.  it is directly related to the logic of this PR but I felt it is more convienent to go with other fields.\n\n3. Testing: primarily in ConsumerCoordinatorTest.  make it parameterized with protocol.  and add necessary scenarios for COOPERATIVE protocol.\n\nI intentionally omitted the documentation change since there are some behavioral updates that needs to be finalized in later PRs.  and hence I will also only add the docs in later PRs.\n\nReviewers: Bill Bejeck <bbejeck@gmail.com>.  Boyang Chen <boyang@confluent.io>.  Sophie Blee-Goldman <sophie@confluent.io>","date":"2019-06-24 06:22:07","modifiedFileCount":"9","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-07-26 04:02:09","codes":[{"authorDate":"2019-07-26 04:02:09","commitOrder":6,"curCode":"    public static Subscription deserializeSubscription(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported subscription version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeSubscriptionV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeSubscriptionV1(buffer);\n\n            \r\n            default:\n                return deserializeSubscriptionV1(buffer);\n        }\n    }\n","date":"2019-07-26 04:02:09","endLine":221,"groupId":"17622","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeSubscription","params":"(ByteBufferbuffer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e8/52e62cd46b6bafb62f8f34ead11e46b83f35b4.src","preCode":"    public static PartitionAssignor.Subscription deserializeSubscription(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported subscription version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeSubscriptionV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeSubscriptionV1(buffer);\n\n            \r\n            default:\n                return deserializeSubscriptionV1(buffer);\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2019-07-26 04:02:09","commitOrder":6,"curCode":"    public static Assignment deserializeAssignment(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported assignment version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeAssignmentV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeAssignmentV1(buffer);\n\n            default:\n                \r\n                return deserializeAssignmentV1(buffer);\n        }\n    }\n","date":"2019-07-26 04:02:09","endLine":317,"groupId":"17622","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeAssignment","params":"(ByteBufferbuffer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e8/52e62cd46b6bafb62f8f34ead11e46b83f35b4.src","preCode":"    public static PartitionAssignor.Assignment deserializeAssignment(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported assignment version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeAssignmentV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeAssignmentV1(buffer);\n\n            default:\n                \r\n                return deserializeAssignmentV1(buffer);\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"}],"commitId":"69d86a197f86ad4c6f1636b5ab4678907e30a4c0","commitMessage":"@@@KAFKA-8179: add public ConsumerPartitionAssignor interface (#7108)\n\nMain changes of this PR:\n\n* Deprecate old consumer.internal.PartitionAssignor and add public consumer.ConsumerPartitionAssignor with all OOTB assignors migrated to new interface\n* Refactor assignor's assignment/subscription related classes for easier to evolve API\n* Removed version number from classes as it is only needed for serialization/deserialization\n* Other previously-discussed cleanup included in this PR:\n\n* Remove Assignment.error added in pt 1\n* Remove ConsumerCoordinator#adjustAssignment added in pt 2\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Jason Gustafson <jason@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-07-26 04:02:09","modifiedFileCount":"19","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2019-09-14 07:49:25","codes":[{"authorDate":"2019-09-14 07:49:25","commitOrder":7,"curCode":"    public static Subscription deserializeSubscription(ByteBuffer buffer) {\n        Short version = deserializeVersion(buffer);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported subscription version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeSubscriptionV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeSubscriptionV1(buffer);\n\n            \r\n            default:\n                return deserializeSubscriptionV1(buffer);\n        }\n    }\n","date":"2019-09-14 07:49:25","endLine":225,"groupId":"17622","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeSubscription","params":"(ByteBufferbuffer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/29835d629683f1857ed9fd3e6edec08281a1a0.src","preCode":"    public static Subscription deserializeSubscription(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported subscription version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeSubscriptionV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeSubscriptionV1(buffer);\n\n            \r\n            default:\n                return deserializeSubscriptionV1(buffer);\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"},{"authorDate":"2019-09-14 07:49:25","commitOrder":7,"curCode":"    public static Assignment deserializeAssignment(ByteBuffer buffer) {\n        Short version = deserializeVersion(buffer);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported assignment version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeAssignmentV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeAssignmentV1(buffer);\n\n            default:\n                \r\n                return deserializeAssignmentV1(buffer);\n        }\n    }\n","date":"2019-09-14 07:49:25","endLine":320,"groupId":"17622","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeAssignment","params":"(ByteBufferbuffer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/29835d629683f1857ed9fd3e6edec08281a1a0.src","preCode":"    public static Assignment deserializeAssignment(ByteBuffer buffer) {\n        Struct header = CONSUMER_PROTOCOL_HEADER_SCHEMA.read(buffer);\n        Short version = header.getShort(VERSION_KEY_NAME);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported assignment version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeAssignmentV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeAssignmentV1(buffer);\n\n            default:\n                \r\n                return deserializeAssignmentV1(buffer);\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"}],"commitId":"e24d0e22abb0fb3e4cb3974284a3dad126544584","commitMessage":"@@@KAFKA-8730; Add API to delete consumer offsets (KIP-496) (#7276)\n\nThis adds an administrative API to delete consumer offsets of a group as well as extends the mechanism to expire offsets of consumer groups.\n\nIt makes the group coordinator aware of the set of topics a consumer group (protocol type == 'consumer') is actively subscribed to.  allowing offsets of topics which are not actively subscribed to by the group to be either expired or administratively deleted. The expiration rules remain the same.\n\nFor the other groups (non-consumer).  the API allows to delete offsets when the group is empty and the expiration remains the same.\n\nReviewers: Stanislav Kozlovski <stanislav_kozlovski@outlook.com>.  Jason Gustafson <jason@confluent.io>","date":"2019-09-14 07:49:25","modifiedFileCount":"10","status":"M","submitter":"David Jacot"},{"authorTime":"2020-09-26 00:21:22","codes":[{"authorDate":"2020-09-26 00:21:22","commitOrder":8,"curCode":"    public static Subscription deserializeSubscription(final ByteBuffer buffer, short version) {\n        version = checkSubscriptionVersion(version);\n\n        try {\n            ConsumerProtocolSubscription data =\n                new ConsumerProtocolSubscription(new ByteBufferAccessor(buffer), version);\n\n            List<TopicPartition> ownedPartitions = new ArrayList<>();\n            for (ConsumerProtocolSubscription.TopicPartition tp : data.ownedPartitions()) {\n                for (Integer partition : tp.partitions()) {\n                    ownedPartitions.add(new TopicPartition(tp.topic(), partition));\n                }\n            }\n\n            return new Subscription(\n                data.topics(),\n                data.userData() != null ? data.userData().duplicate() : null,\n                ownedPartitions);\n        } catch (BufferUnderflowException e) {\n            throw new SchemaException(\"Buffer underflow while parsing consumer protocol's subscription\", e);\n        }\n    }\n","date":"2020-09-26 00:21:22","endLine":109,"groupId":"104306","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"deserializeSubscription","params":"(finalByteBufferbuffer@shortversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/2fda293991debca025e365b6355ae744a2576f.src","preCode":"    public static Subscription deserializeSubscription(ByteBuffer buffer) {\n        Short version = deserializeVersion(buffer);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported subscription version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeSubscriptionV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeSubscriptionV1(buffer);\n\n            \r\n            default:\n                return deserializeSubscriptionV1(buffer);\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2020-09-26 00:21:22","commitOrder":8,"curCode":"    public static Assignment deserializeAssignment(final ByteBuffer buffer, short version) {\n        version = checkAssignmentVersion(version);\n\n        try {\n            ConsumerProtocolAssignment data =\n                new ConsumerProtocolAssignment(new ByteBufferAccessor(buffer), version);\n\n            List<TopicPartition> assignedPartitions = new ArrayList<>();\n            for (ConsumerProtocolAssignment.TopicPartition tp : data.assignedPartitions()) {\n                for (Integer partition : tp.partitions()) {\n                    assignedPartitions.add(new TopicPartition(tp.topic(), partition));\n                }\n            }\n\n            return new Assignment(\n                assignedPartitions,\n                data.userData() != null ? data.userData().duplicate() : null);\n        } catch (BufferUnderflowException e) {\n            throw new SchemaException(\"Buffer underflow while parsing consumer protocol's assignment\", e);\n        }\n    }\n","date":"2020-09-26 00:21:22","endLine":154,"groupId":"104306","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"deserializeAssignment","params":"(finalByteBufferbuffer@shortversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/2fda293991debca025e365b6355ae744a2576f.src","preCode":"    public static Assignment deserializeAssignment(ByteBuffer buffer) {\n        Short version = deserializeVersion(buffer);\n\n        if (version < CONSUMER_PROTOCOL_V0)\n            throw new SchemaException(\"Unsupported assignment version: \" + version);\n\n        switch (version) {\n            case CONSUMER_PROTOCOL_V0:\n                return deserializeAssignmentV0(buffer);\n\n            case CONSUMER_PROTOCOL_V1:\n                return deserializeAssignmentV1(buffer);\n\n            default:\n                \r\n                return deserializeAssignmentV1(buffer);\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"466f8fd21c6651ea5daa50154239e85fa629dbb4","commitMessage":"@@@MINOR: Use the automated protocol for the Consumer Protocol's subscriptions and assignments (#8897)\n\nThis PR moves the consumer protocol to using the automated protocol instead of using plain old structs.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2020-09-26 00:21:22","modifiedFileCount":"2","status":"M","submitter":"David Jacot"}]
