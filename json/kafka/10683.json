[{"authorTime":"2017-08-02 02:22:49","codes":[{"authorDate":"2017-08-01 06:28:59","commitOrder":13,"curCode":"    public static void main(String[] args) throws Exception {\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"streams-wordcount-input\");\n\n        KTable<String, Long> counts = source\n                .flatMapValues(new ValueMapper<String, Iterable<String>>() {\n                    @Override\n                    public Iterable<String> apply(String value) {\n                        return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \"));\n                    }\n                }).map(new KeyValueMapper<String, String, KeyValue<String, String>>() {\n                    @Override\n                    public KeyValue<String, String> apply(String key, String value) {\n                        return new KeyValue<>(value, value);\n                    }\n                })\n                .groupByKey()\n                .count(\"Counts\");\n\n        \r\n        counts.to(Serdes.String(), Serdes.Long(), \"streams-wordcount-output\");\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            Exit.exit(1);\n        }\n        Exit.exit(0);\n    }\n","date":"2017-08-01 06:28:59","endLine":104,"groupId":"22537","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e3/cf60c998de78d918967c3892c237365cd95598.src","preCode":"    public static void main(String[] args) throws Exception {\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"streams-wordcount-input\");\n\n        KTable<String, Long> counts = source\n                .flatMapValues(new ValueMapper<String, Iterable<String>>() {\n                    @Override\n                    public Iterable<String> apply(String value) {\n                        return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \"));\n                    }\n                }).map(new KeyValueMapper<String, String, KeyValue<String, String>>() {\n                    @Override\n                    public KeyValue<String, String> apply(String key, String value) {\n                        return new KeyValue<>(value, value);\n                    }\n                })\n                .groupByKey()\n                .count(\"Counts\");\n\n        \r\n        counts.to(Serdes.String(), Serdes.Long(), \"streams-wordcount-output\");\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            Exit.exit(1);\n        }\n        Exit.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"NB"},{"authorDate":"2017-08-02 02:22:49","commitOrder":13,"curCode":"    public static void main(String[] args) throws Exception {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n                \r\n                \r\n                .selectKey(new KeyValueMapper<String, String, String>() {\n                    @Override\n                    public String apply(String key, String value) {\n                        return \"temp\";\n                    }\n                })\n                .groupByKey()\n                .reduce(new Reducer<String>() {\n                    @Override\n                    public String apply(String value1, String value2) {\n                        if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                            return value1;\n                        else\n                            return value2;\n                    }\n                }, TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n                .toStream()\n                .filter(new Predicate<Windowed<String>, String>() {\n                    @Override\n                    public boolean test(Windowed<String> key, String value) {\n                        return Integer.parseInt(value) > TEMPERATURE_THRESHOLD;\n                    }\n                });\n\n        WindowedSerializer<String> windowedSerializer = new WindowedSerializer<>(Serdes.String().serializer());\n        WindowedDeserializer<String> windowedDeserializer = new WindowedDeserializer<>(Serdes.String().deserializer());\n        Serde<Windowed<String>> windowedSerde = Serdes.serdeFrom(windowedSerializer, windowedDeserializer);\n\n        \r\n        max.to(windowedSerde, Serdes.String(), \"iot-temperature-max\");\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            Exit.exit(1);\n        }\n        Exit.exit(0);\n    }\n","date":"2017-08-02 02:22:49","endLine":143,"groupId":"13346","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/76/4210bab01c4e57534c045bb5da20e440492880.src","preCode":"    public static void main(String[] args) throws Exception {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n                \r\n                \r\n                .selectKey(new KeyValueMapper<String, String, String>() {\n                    @Override\n                    public String apply(String key, String value) {\n                        return \"temp\";\n                    }\n                })\n                .groupByKey()\n                .reduce(new Reducer<String>() {\n                    @Override\n                    public String apply(String value1, String value2) {\n                        if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                            return value1;\n                        else\n                            return value2;\n                    }\n                }, TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n                .toStream()\n                .filter(new Predicate<Windowed<String>, String>() {\n                    @Override\n                    public boolean test(Windowed<String> key, String value) {\n                        return Integer.parseInt(value) > TEMPERATURE_THRESHOLD;\n                    }\n                });\n\n        WindowedSerializer<String> windowedSerializer = new WindowedSerializer<>(Serdes.String().serializer());\n        WindowedDeserializer<String> windowedDeserializer = new WindowedDeserializer<>(Serdes.String().deserializer());\n        Serde<Windowed<String>> windowedSerde = Serdes.serdeFrom(windowedSerializer, windowedDeserializer);\n\n        \r\n        max.to(windowedSerde, Serdes.String(), \"iot-temperature-max\");\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            Exit.exit(1);\n        }\n        Exit.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/temperature/TemperatureDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"}],"commitId":"94a6d6c02d478f5ccec1928163ff921688155a01","commitMessage":"@@@KAFKA-5454: Add a new Kafka Streams example IoT oriented\n\nAdded a Kafka Streams example (IoT oriented) using \"tumbling\" window\n\nAuthor: Paolo Patierno <ppatierno@live.com>\nAuthor: ppatierno <ppatierno@live.com>\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Michael G. Noll <michael@confluent.io>\n\nCloses #3352 from ppatierno/stream-temperature-example\n","date":"2017-08-02 02:22:49","modifiedFileCount":"0","status":"M","submitter":"Paolo Patierno"},{"authorTime":"2017-08-12 03:19:28","codes":[{"authorDate":"2017-08-12 03:19:28","commitOrder":14,"curCode":"    public static void main(String[] args) throws Exception {\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        KTable<String, Long> counts = source\n                .flatMapValues(new ValueMapper<String, Iterable<String>>() {\n                    @Override\n                    public Iterable<String> apply(String value) {\n                        return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \"));\n                    }\n                })\n                .groupBy(new KeyValueMapper<String, String, String>() {\n                    @Override\n                    public String apply(String key, String value) {\n                        return value;\n                    }\n                })\n                .count(\"Counts\");\n\n        \r\n        counts.to(Serdes.String(), Serdes.Long(), \"streams-wordcount-output\");\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2017-08-12 03:19:28","endLine":102,"groupId":"22537","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/56/89d5089138f79a5bac248dba898be21da32f4a.src","preCode":"    public static void main(String[] args) throws Exception {\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"streams-wordcount-input\");\n\n        KTable<String, Long> counts = source\n                .flatMapValues(new ValueMapper<String, Iterable<String>>() {\n                    @Override\n                    public Iterable<String> apply(String value) {\n                        return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \"));\n                    }\n                }).map(new KeyValueMapper<String, String, KeyValue<String, String>>() {\n                    @Override\n                    public KeyValue<String, String> apply(String key, String value) {\n                        return new KeyValue<>(value, value);\n                    }\n                })\n                .groupByKey()\n                .count(\"Counts\");\n\n        \r\n        counts.to(Serdes.String(), Serdes.Long(), \"streams-wordcount-output\");\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            Exit.exit(1);\n        }\n        Exit.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2017-08-12 03:19:28","commitOrder":14,"curCode":"    public static void main(String[] args) throws Exception {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n                \r\n                \r\n                .selectKey(new KeyValueMapper<String, String, String>() {\n                    @Override\n                    public String apply(String key, String value) {\n                        return \"temp\";\n                    }\n                })\n                .groupByKey()\n                .reduce(new Reducer<String>() {\n                    @Override\n                    public String apply(String value1, String value2) {\n                        if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                            return value1;\n                        else\n                            return value2;\n                    }\n                }, TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n                .toStream()\n                .filter(new Predicate<Windowed<String>, String>() {\n                    @Override\n                    public boolean test(Windowed<String> key, String value) {\n                        return Integer.parseInt(value) > TEMPERATURE_THRESHOLD;\n                    }\n                });\n\n        WindowedSerializer<String> windowedSerializer = new WindowedSerializer<>(Serdes.String().serializer());\n        WindowedDeserializer<String> windowedDeserializer = new WindowedDeserializer<>(Serdes.String().deserializer());\n        Serde<Windowed<String>> windowedSerde = Serdes.serdeFrom(windowedSerializer, windowedDeserializer);\n\n        \r\n        max.to(windowedSerde, Serdes.String(), \"iot-temperature-max\");\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2017-08-12 03:19:28","endLine":142,"groupId":"13346","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1c/2045e04fc489b685e3c7a29e049d15cd940857.src","preCode":"    public static void main(String[] args) throws Exception {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n                \r\n                \r\n                .selectKey(new KeyValueMapper<String, String, String>() {\n                    @Override\n                    public String apply(String key, String value) {\n                        return \"temp\";\n                    }\n                })\n                .groupByKey()\n                .reduce(new Reducer<String>() {\n                    @Override\n                    public String apply(String value1, String value2) {\n                        if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                            return value1;\n                        else\n                            return value2;\n                    }\n                }, TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n                .toStream()\n                .filter(new Predicate<Windowed<String>, String>() {\n                    @Override\n                    public boolean test(Windowed<String> key, String value) {\n                        return Integer.parseInt(value) > TEMPERATURE_THRESHOLD;\n                    }\n                });\n\n        WindowedSerializer<String> windowedSerializer = new WindowedSerializer<>(Serdes.String().serializer());\n        WindowedDeserializer<String> windowedDeserializer = new WindowedDeserializer<>(Serdes.String().deserializer());\n        Serde<Windowed<String>> windowedSerde = Serdes.serdeFrom(windowedSerializer, windowedDeserializer);\n\n        \r\n        max.to(windowedSerde, Serdes.String(), \"iot-temperature-max\");\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            Exit.exit(1);\n        }\n        Exit.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/temperature/TemperatureDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"d2774e302fa528b4fe7b7db39f69cf679753f348","commitMessage":"@@@KAFKA-5727: Add Streams quickstart tutorial as an archetype project\n\n0. Minor fixes on the existing examples to merge all on a single input topic; also do not use `common.utils.Exit` as it is for internal usage only.\n\n1. Add the archetype project for the quickstart. Steps to try it out:\n\n  a. `mvn install` on the quickstart directory.\n  b. `mvn archetype:generate \\\n-DarchetypeGroupId=org.apache.kafka \\\n-DarchetypeArtifactId=streams-quickstart-java \\\n-DarchetypeVersion=1.0.0-SNAPSHOT \\\n-DgroupId=streams-quickstart \\\n-DartifactId=streams-quickstart \\\n-Dversion=0.1 \\\n-Dpackage=StreamsQuickstart \\\n-DinteractiveMode=false` at any directory to create the project.\n  c. build the streams jar with version `1.0.0-SNAPSHOT` to local maven repository with `./gradlew installAll`; `cd streams-quickstart; mvn clean package`\n  d. create the input / output topics.  start the console producer and consumer.\n  e. start the program: `mvn exec:java -Dexec.mainClass=StreamsQuickstart.Pipe/LineSplit/WordCount`.\n  f. type data on console producer and observe data on console consumer.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Bill Bejeck <bbejeck@gmail.com>.  Ewen Cheslack-Postava <me@ewencp.org>.  Eno Thereska <eno.thereska@gmail.com>\n\nCloses #3630 from guozhangwang/KMinor-streams-quickstart-tutorial\n","date":"2017-08-12 03:19:28","modifiedFileCount":"4","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2017-09-13 07:42:06","codes":[{"authorDate":"2017-08-12 03:19:28","commitOrder":15,"curCode":"    public static void main(String[] args) throws Exception {\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        KTable<String, Long> counts = source\n                .flatMapValues(new ValueMapper<String, Iterable<String>>() {\n                    @Override\n                    public Iterable<String> apply(String value) {\n                        return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \"));\n                    }\n                })\n                .groupBy(new KeyValueMapper<String, String, String>() {\n                    @Override\n                    public String apply(String key, String value) {\n                        return value;\n                    }\n                })\n                .count(\"Counts\");\n\n        \r\n        counts.to(Serdes.String(), Serdes.Long(), \"streams-wordcount-output\");\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2017-08-12 03:19:28","endLine":102,"groupId":"22537","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/56/89d5089138f79a5bac248dba898be21da32f4a.src","preCode":"    public static void main(String[] args) throws Exception {\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        KTable<String, Long> counts = source\n                .flatMapValues(new ValueMapper<String, Iterable<String>>() {\n                    @Override\n                    public Iterable<String> apply(String value) {\n                        return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \"));\n                    }\n                })\n                .groupBy(new KeyValueMapper<String, String, String>() {\n                    @Override\n                    public String apply(String key, String value) {\n                        return value;\n                    }\n                })\n                .count(\"Counts\");\n\n        \r\n        counts.to(Serdes.String(), Serdes.Long(), \"streams-wordcount-output\");\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2017-09-13 07:42:06","commitOrder":15,"curCode":"    public static void main(String[] args) throws Exception {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n                \r\n                \r\n                .selectKey(new KeyValueMapper<String, String, String>() {\n                    @Override\n                    public String apply(String key, String value) {\n                        return \"temp\";\n                    }\n                })\n                .groupByKey()\n                .reduce(new Reducer<String>() {\n                    @Override\n                    public String apply(String value1, String value2) {\n                        if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                            return value1;\n                        else\n                            return value2;\n                    }\n                }, TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n                .toStream()\n                .filter(new Predicate<Windowed<String>, String>() {\n                    @Override\n                    public boolean test(Windowed<String> key, String value) {\n                        return Integer.parseInt(value) > TEMPERATURE_THRESHOLD;\n                    }\n                });\n\n        WindowedSerializer<String> windowedSerializer = new WindowedSerializer<>(Serdes.String().serializer());\n        WindowedDeserializer<String> windowedDeserializer = new WindowedDeserializer<>(Serdes.String().deserializer(), TEMPERATURE_WINDOW_SIZE);\n        Serde<Windowed<String>> windowedSerde = Serdes.serdeFrom(windowedSerializer, windowedDeserializer);\n\n        \r\n        max.to(windowedSerde, Serdes.String(), \"iot-temperature-max\");\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2017-09-13 07:42:06","endLine":142,"groupId":"13346","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/39ca5ed65e0e1cc626b7a32db64fa7abf522ad.src","preCode":"    public static void main(String[] args) throws Exception {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n                \r\n                \r\n                .selectKey(new KeyValueMapper<String, String, String>() {\n                    @Override\n                    public String apply(String key, String value) {\n                        return \"temp\";\n                    }\n                })\n                .groupByKey()\n                .reduce(new Reducer<String>() {\n                    @Override\n                    public String apply(String value1, String value2) {\n                        if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                            return value1;\n                        else\n                            return value2;\n                    }\n                }, TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n                .toStream()\n                .filter(new Predicate<Windowed<String>, String>() {\n                    @Override\n                    public boolean test(Windowed<String> key, String value) {\n                        return Integer.parseInt(value) > TEMPERATURE_THRESHOLD;\n                    }\n                });\n\n        WindowedSerializer<String> windowedSerializer = new WindowedSerializer<>(Serdes.String().serializer());\n        WindowedDeserializer<String> windowedDeserializer = new WindowedDeserializer<>(Serdes.String().deserializer());\n        Serde<Windowed<String>> windowedSerde = Serdes.serdeFrom(windowedSerializer, windowedDeserializer);\n\n        \r\n        max.to(windowedSerde, Serdes.String(), \"iot-temperature-max\");\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/temperature/TemperatureDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"90b4b07e6e3b44edfa41eebea83a674cb6f61922","commitMessage":"@@@KAFKA-4468: Correctly calculate the window end timestamp after read from state stores\n\nI have decided to use the following approach to fixing this bug:\n\n1) Since the Window Size in WindowedDeserializer was originally unknown.  I have initialized\na field _windowSize_ and created a constructor to allow it to be instantiated\n\n2) The default size for __windowSize__ is _Long.MAX_VALUE_. If that is the case.  then the\ndeserialize method will return an Unlimited Window.  or else will return Timed one.\n\n3) Temperature Demo was modified to demonstrate how to use this new constructor.  given\nthat the window size is known.\n\nAuthor: Richard Yu <richardyu@Richards-Air.attlocal.net>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3745 from ConcurrencyPractitioner/trunk\n","date":"2017-09-13 07:42:06","modifiedFileCount":"4","status":"M","submitter":"Richard Yu"},{"authorTime":"2017-10-05 05:42:07","codes":[{"authorDate":"2017-10-05 05:42:07","commitOrder":16,"curCode":"    public static void main(String[] args) throws Exception {\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        KTable<String, Long> counts = source\n            .flatMapValues(new ValueMapper<String, Iterable<String>>() {\n                @Override\n                public Iterable<String> apply(String value) {\n                    return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \"));\n                }\n            })\n            .groupBy(new KeyValueMapper<String, String, String>() {\n                @Override\n                public String apply(String key, String value) {\n                    return value;\n                }\n            })\n            .count();\n\n        \r\n        counts.toStream().to(\"streams-wordcount-output\", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2017-10-05 05:42:07","endLine":103,"groupId":"4357","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/75/35315d04f9c3edb3673f42d40c7281290a4c14.src","preCode":"    public static void main(String[] args) throws Exception {\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        KTable<String, Long> counts = source\n                .flatMapValues(new ValueMapper<String, Iterable<String>>() {\n                    @Override\n                    public Iterable<String> apply(String value) {\n                        return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \"));\n                    }\n                })\n                .groupBy(new KeyValueMapper<String, String, String>() {\n                    @Override\n                    public String apply(String key, String value) {\n                        return value;\n                    }\n                })\n                .count(\"Counts\");\n\n        \r\n        counts.to(Serdes.String(), Serdes.Long(), \"streams-wordcount-output\");\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2017-10-05 05:42:07","commitOrder":16,"curCode":"    public static void main(String[] args) throws Exception {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey(new KeyValueMapper<String, String, String>() {\n                @Override\n                public String apply(String key, String value) {\n                    return \"temp\";\n                }\n            })\n            .groupByKey()\n            .windowedBy(TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n            .reduce(new Reducer<String>() {\n                @Override\n                public String apply(String value1, String value2) {\n                    if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                        return value1;\n                    else\n                        return value2;\n                }\n            })\n            .toStream()\n            .filter(new Predicate<Windowed<String>, String>() {\n                @Override\n                public boolean test(Windowed<String> key, String value) {\n                    return Integer.parseInt(value) > TEMPERATURE_THRESHOLD;\n                }\n            });\n\n        WindowedSerializer<String> windowedSerializer = new WindowedSerializer<>(Serdes.String().serializer());\n        WindowedDeserializer<String> windowedDeserializer = new WindowedDeserializer<>(Serdes.String().deserializer(), TEMPERATURE_WINDOW_SIZE);\n        Serde<Windowed<String>> windowedSerde = Serdes.serdeFrom(windowedSerializer, windowedDeserializer);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2017-10-05 05:42:07","endLine":144,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ea/81dd662688e0f297e492e5f7315e0475f73408.src","preCode":"    public static void main(String[] args) throws Exception {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n                \r\n                \r\n                .selectKey(new KeyValueMapper<String, String, String>() {\n                    @Override\n                    public String apply(String key, String value) {\n                        return \"temp\";\n                    }\n                })\n                .groupByKey()\n                .reduce(new Reducer<String>() {\n                    @Override\n                    public String apply(String value1, String value2) {\n                        if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                            return value1;\n                        else\n                            return value2;\n                    }\n                }, TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n                .toStream()\n                .filter(new Predicate<Windowed<String>, String>() {\n                    @Override\n                    public boolean test(Windowed<String> key, String value) {\n                        return Integer.parseInt(value) > TEMPERATURE_THRESHOLD;\n                    }\n                });\n\n        WindowedSerializer<String> windowedSerializer = new WindowedSerializer<>(Serdes.String().serializer());\n        WindowedDeserializer<String> windowedDeserializer = new WindowedDeserializer<>(Serdes.String().deserializer(), TEMPERATURE_WINDOW_SIZE);\n        Serde<Windowed<String>> windowedSerde = Serdes.serdeFrom(windowedSerializer, windowedDeserializer);\n\n        \r\n        max.to(windowedSerde, Serdes.String(), \"iot-temperature-max\");\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/temperature/TemperatureDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"}],"commitId":"713a67fddaec3fa9cd7cce53dd6fef5ab6e0cdab","commitMessage":"@@@MINOR: add suppress warnings annotations in Streams API\n\n - fixes examples with regard to new API\n - fixes `Topology#addGlobalStore` parameters\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Guozhang Wang <wangguoz@gmail.com>.  Damian Guy <damian.guy@gmail.com>\n\nCloses #4003 from mjsax/minor-deprecated\n","date":"2017-10-05 05:42:07","modifiedFileCount":"36","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-03-10 03:08:08","codes":[{"authorDate":"2017-10-05 05:42:07","commitOrder":17,"curCode":"    public static void main(String[] args) throws Exception {\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        KTable<String, Long> counts = source\n            .flatMapValues(new ValueMapper<String, Iterable<String>>() {\n                @Override\n                public Iterable<String> apply(String value) {\n                    return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \"));\n                }\n            })\n            .groupBy(new KeyValueMapper<String, String, String>() {\n                @Override\n                public String apply(String key, String value) {\n                    return value;\n                }\n            })\n            .count();\n\n        \r\n        counts.toStream().to(\"streams-wordcount-output\", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2017-10-05 05:42:07","endLine":103,"groupId":"4357","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/75/35315d04f9c3edb3673f42d40c7281290a4c14.src","preCode":"    public static void main(String[] args) throws Exception {\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        KTable<String, Long> counts = source\n            .flatMapValues(new ValueMapper<String, Iterable<String>>() {\n                @Override\n                public Iterable<String> apply(String value) {\n                    return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \"));\n                }\n            })\n            .groupBy(new KeyValueMapper<String, String, String>() {\n                @Override\n                public String apply(String key, String value) {\n                    return value;\n                }\n            })\n            .count();\n\n        \r\n        counts.toStream().to(\"streams-wordcount-output\", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2018-03-10 03:08:08","commitOrder":17,"curCode":"    public static void main(String[] args) throws Exception {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey(new KeyValueMapper<String, String, String>() {\n                @Override\n                public String apply(String key, String value) {\n                    return \"temp\";\n                }\n            })\n            .groupByKey()\n            .windowedBy(TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n            .reduce(new Reducer<String>() {\n                @Override\n                public String apply(String value1, String value2) {\n                    if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                        return value1;\n                    else\n                        return value2;\n                }\n            })\n            .toStream()\n            .filter(new Predicate<Windowed<String>, String>() {\n                @Override\n                public boolean test(Windowed<String> key, String value) {\n                    return Integer.parseInt(value) > TEMPERATURE_THRESHOLD;\n                }\n            });\n\n        Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2018-03-10 03:08:08","endLine":141,"groupId":"17149","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c5/eb5f9ec7d89313a5a94474df89e3ebe3374b5e.src","preCode":"    public static void main(String[] args) throws Exception {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey(new KeyValueMapper<String, String, String>() {\n                @Override\n                public String apply(String key, String value) {\n                    return \"temp\";\n                }\n            })\n            .groupByKey()\n            .windowedBy(TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n            .reduce(new Reducer<String>() {\n                @Override\n                public String apply(String value1, String value2) {\n                    if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                        return value1;\n                    else\n                        return value2;\n                }\n            })\n            .toStream()\n            .filter(new Predicate<Windowed<String>, String>() {\n                @Override\n                public boolean test(Windowed<String> key, String value) {\n                    return Integer.parseInt(value) > TEMPERATURE_THRESHOLD;\n                }\n            });\n\n        WindowedSerializer<String> windowedSerializer = new WindowedSerializer<>(Serdes.String().serializer());\n        WindowedDeserializer<String> windowedDeserializer = new WindowedDeserializer<>(Serdes.String().deserializer(), TEMPERATURE_WINDOW_SIZE);\n        Serde<Windowed<String>> windowedSerde = Serdes.serdeFrom(windowedSerializer, windowedDeserializer);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/temperature/TemperatureDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"b1aa1912f08765d9914e3d036deee6b71ea009dd","commitMessage":"@@@KAFKA-4831: Extract WindowedSerde to public APIs (#3307)\n\nNow that we have augmented WindowSerde with non-arg parameters.  extract it out as part of the public APIs so that users who want to I/O windowed streams can use it. This is originally introduced by @vitaly-pushkar\n\nThis PR grows out to be a much larger one.  as I found a few tech debts and bugs while working on it. Here is a summary of the PR:\n\nPublic API changes (I will propose a KIP after a first round of reviews):\nAdd TimeWindowedSerializer.  TimeWindowedDeserializer.  SessionWindowedSerializer.  SessionWindowedDeserializer into o.a.k.streams.kstream. The serializers would implemented an internal WindowedSerializer interface for the serializeBaseKey function used in 3) below.\n\nAdd WindowedSerdes into o.a.k.streams.kstream. The reason to now add them into o.a.k.clients's Serdes is that it then needs dependency of streams.\n\nAdd \"default.windowed.key.serde.inner\" and \"default.windowed.value.serde.inner\" into StreamsConfig.  used when \"default.key.serde\" is specified to use time or session windowed serde. Note this requires the serde class.  not the type class.\n\nConsolidated serde format from multiple classes.  including SessionKeySerde.java for session.  and WindowStoreUtils for time window.  into SessionKeySchema and WindowKeySchema.\n\nBug fix: WindowedStreamPartitioner needs to consider both time window and session window serdes.\n\nRemoved RocksDBWindowBytesStore etc optimization since after KIP-182 all the serde know happens on metered store.  hence this optimization is not worth.\n\nBug fix: for time window.  the serdes used for store and the serdes used for piping (source and sink node) are different: the former needs to append sequence number but not for the later.\n\nOther minor cleanups: remove unnecessary throws.  etc.\n\nAuthors: Guozhang Wang <wangguoz@gmail.com>.  Vitaly Pushkar <vitaly.pushkar@gmail.com>\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Bill Bejeck <bill@confluent.io>.  Xi Hu","date":"2018-03-10 03:08:08","modifiedFileCount":"37","status":"M","submitter":"Vitaly Pushkar"},{"authorTime":"2018-06-22 01:02:58","codes":[{"authorDate":"2018-06-22 01:02:58","commitOrder":18,"curCode":"    public static void main(String[] args) {\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        KTable<String, Long> counts = source\n            .flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \")))\n            .groupBy((key, value) -> value)\n            .count();\n\n        \r\n        counts.toStream().to(\"streams-wordcount-output\", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2018-06-22 01:02:58","endLine":91,"groupId":"17149","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/0150e00582acb2bfed0aa9347c606bafaf4b99.src","preCode":"    public static void main(String[] args) throws Exception {\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        KTable<String, Long> counts = source\n            .flatMapValues(new ValueMapper<String, Iterable<String>>() {\n                @Override\n                public Iterable<String> apply(String value) {\n                    return Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \"));\n                }\n            })\n            .groupBy(new KeyValueMapper<String, String, String>() {\n                @Override\n                public String apply(String key, String value) {\n                    return value;\n                }\n            })\n            .count();\n\n        \r\n        counts.toStream().to(\"streams-wordcount-output\", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2018-06-22 01:02:58","commitOrder":18,"curCode":"    public static void main(String[] args) {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                    return value1;\n                else\n                    return value2;\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2018-06-22 01:02:58","endLine":125,"groupId":"7933","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/46/07d75d1387bd354128fefaed81c51aff5c6771.src","preCode":"    public static void main(String[] args) throws Exception {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey(new KeyValueMapper<String, String, String>() {\n                @Override\n                public String apply(String key, String value) {\n                    return \"temp\";\n                }\n            })\n            .groupByKey()\n            .windowedBy(TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n            .reduce(new Reducer<String>() {\n                @Override\n                public String apply(String value1, String value2) {\n                    if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                        return value1;\n                    else\n                        return value2;\n                }\n            })\n            .toStream()\n            .filter(new Predicate<Windowed<String>, String>() {\n                @Override\n                public boolean test(Windowed<String> key, String value) {\n                    return Integer.parseInt(value) > TEMPERATURE_THRESHOLD;\n                }\n            });\n\n        Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/temperature/TemperatureDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"d3e264e773c4652f34b40c7c3b494c0f7fbabffc","commitMessage":"@@@MINOR: update web docs and examples of Streams with Java8 syntax (#5249)\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Damian Guy <damian@confluent.io>","date":"2018-06-22 01:02:58","modifiedFileCount":"8","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-06-22 01:02:58","codes":[{"authorDate":"2018-08-03 06:16:21","commitOrder":19,"curCode":"    public static void main(final String[] args) {\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        final KTable<String, Long> counts = source\n            .flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \")))\n            .groupBy((key, value) -> value)\n            .count();\n\n        \r\n        counts.toStream().to(\"streams-wordcount-output\", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2018-08-03 06:16:21","endLine":91,"groupId":"17149","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/1a8db11725dfaca849d0fccff0ccf6c353237d.src","preCode":"    public static void main(String[] args) {\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        KTable<String, Long> counts = source\n            .flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \")))\n            .groupBy((key, value) -> value)\n            .count();\n\n        \r\n        counts.toStream().to(\"streams-wordcount-output\", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2018-06-22 01:02:58","commitOrder":19,"curCode":"    public static void main(String[] args) {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                    return value1;\n                else\n                    return value2;\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2018-06-22 01:02:58","endLine":125,"groupId":"7933","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/46/07d75d1387bd354128fefaed81c51aff5c6771.src","preCode":"    public static void main(String[] args) {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                    return value1;\n                else\n                    return value2;\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/temperature/TemperatureDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"}],"commitId":"b083ed66b9988a15b01b7359370e4bf82e28059f","commitMessage":"@@@MINOR: improve JavaDocs for Streams PAPI WordCountExample (#5442)\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2018-08-03 06:16:21","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2018-08-03 06:16:21","commitOrder":20,"curCode":"    public static void main(final String[] args) {\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        final KTable<String, Long> counts = source\n            .flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \")))\n            .groupBy((key, value) -> value)\n            .count();\n\n        \r\n        counts.toStream().to(\"streams-wordcount-output\", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2018-08-03 06:16:21","endLine":91,"groupId":"17149","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/1a8db11725dfaca849d0fccff0ccf6c353237d.src","preCode":"    public static void main(final String[] args) {\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        final KTable<String, Long> counts = source\n            .flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \")))\n            .groupBy((key, value) -> value)\n            .count();\n\n        \r\n        counts.toStream().to(\"streams-wordcount-output\", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2018-08-04 04:19:46","commitOrder":20,"curCode":"    public static void main(final String[] args) {\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        final KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                    return value1;\n                else\n                    return value2;\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        final Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2018-08-04 04:19:46","endLine":125,"groupId":"7933","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/c7a427caf2c252756a2d00e8acd0327c84198c.src","preCode":"    public static void main(String[] args) {\n\n        Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        StreamsBuilder builder = new StreamsBuilder();\n\n        KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                    return value1;\n                else\n                    return value2;\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/temperature/TemperatureDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"3637b2c374d48e99e0a7be37605d3c79f2661007","commitMessage":"@@@MINOR: Require final variables in Streams (#5452)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-08-04 04:19:46","modifiedFileCount":"212","status":"M","submitter":"John Roesler"},{"authorTime":"2018-10-05 04:51:39","codes":[{"authorDate":"2018-08-03 06:16:21","commitOrder":21,"curCode":"    public static void main(final String[] args) {\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        final KTable<String, Long> counts = source\n            .flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \")))\n            .groupBy((key, value) -> value)\n            .count();\n\n        \r\n        counts.toStream().to(\"streams-wordcount-output\", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2018-08-03 06:16:21","endLine":91,"groupId":"17149","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/1a8db11725dfaca849d0fccff0ccf6c353237d.src","preCode":"    public static void main(final String[] args) {\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        final KTable<String, Long> counts = source\n            .flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \")))\n            .groupBy((key, value) -> value)\n            .count();\n\n        \r\n        counts.toStream().to(\"streams-wordcount-output\", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2018-10-05 04:51:39","commitOrder":21,"curCode":"    public static void main(final String[] args) {\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        final KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(Duration.ofSeconds(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                    return value1;\n                else\n                    return value2;\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        final Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2018-10-05 04:51:39","endLine":125,"groupId":"6650","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/480e40d6b12bd712913f065bdcbffedae2e198.src","preCode":"    public static void main(final String[] args) {\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        final KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(TimeUnit.SECONDS.toMillis(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                    return value1;\n                else\n                    return value2;\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        final Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/temperature/TemperatureDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"ca641b3e2e48c14ff308181c775775408f5f35f7","commitMessage":"@@@KAFKA-7277: Migrate Streams API to Duration instead of longMs times (#5682)\n\nReviewers: Johne Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-10-05 04:51:39","modifiedFileCount":"97","status":"M","submitter":"Nikolay"},{"authorTime":"2018-12-11 17:54:41","codes":[{"authorDate":"2018-08-03 06:16:21","commitOrder":22,"curCode":"    public static void main(final String[] args) {\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        final KTable<String, Long> counts = source\n            .flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \")))\n            .groupBy((key, value) -> value)\n            .count();\n\n        \r\n        counts.toStream().to(\"streams-wordcount-output\", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2018-08-03 06:16:21","endLine":91,"groupId":"17149","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/1a8db11725dfaca849d0fccff0ccf6c353237d.src","preCode":"    public static void main(final String[] args) {\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        final KTable<String, Long> counts = source\n            .flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \")))\n            .groupBy((key, value) -> value)\n            .count();\n\n        \r\n        counts.toStream().to(\"streams-wordcount-output\", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"N"},{"authorDate":"2018-12-11 17:54:41","commitOrder":22,"curCode":"    public static void main(final String[] args) {\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        final KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(Duration.ofSeconds(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2)) {\n                    return value1;\n                } else {\n                    return value2;\n                }\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        final Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2018-12-11 17:54:41","endLine":126,"groupId":"6650","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/94a5d9b36e0ebf456f3dd8e0798326f42f8489.src","preCode":"    public static void main(final String[] args) {\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        final KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(Duration.ofSeconds(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2))\n                    return value1;\n                else\n                    return value2;\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        final Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/temperature/TemperatureDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"046b0087bd76637bbfd813ccef31693fa358ff2d","commitMessage":"@@@MINOR: improve Streams checkstyle and code cleanup (#5954)\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Nikolay Izhikov <nIzhikov@gmail.com>.  Ismael Juma <ismael@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2018-12-11 17:54:41","modifiedFileCount":"74","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-12-11 17:54:41","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":23,"curCode":"    public static void main(final String[] args) {\n        final Properties props = getStreamsConfig();\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        createWordCountStream(builder);\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2019-10-07 16:01:58","endLine":101,"groupId":"17149","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e3/31b8a299660a8b2a7accc2446121f1afa6c69a.src","preCode":"    public static void main(final String[] args) {\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-wordcount\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n\n        \r\n        \r\n        \r\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"streams-plaintext-input\");\n\n        final KTable<String, Long> counts = source\n            .flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split(\" \")))\n            .groupBy((key, value) -> value)\n            .count();\n\n        \r\n        counts.toStream().to(\"streams-wordcount-output\", Produced.with(Serdes.String(), Serdes.Long()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2018-12-11 17:54:41","commitOrder":23,"curCode":"    public static void main(final String[] args) {\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        final KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(Duration.ofSeconds(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2)) {\n                    return value1;\n                } else {\n                    return value2;\n                }\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        final Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2018-12-11 17:54:41","endLine":126,"groupId":"6650","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/94a5d9b36e0ebf456f3dd8e0798326f42f8489.src","preCode":"    public static void main(final String[] args) {\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        final KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(Duration.ofSeconds(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2)) {\n                    return value1;\n                } else {\n                    return value2;\n                }\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        final Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/temperature/TemperatureDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"}],"commitId":"a5a6938c69f4310f7ec519036f0df77d8022326a","commitMessage":"@@@KAFKA-8233: TopologyTestDriver test input and output usability improvements (#7378)\n\nImplements KIP-470\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-07 16:01:58","modifiedFileCount":"47","status":"M","submitter":"Jukka Karvanen"},{"authorTime":"2018-12-11 17:54:41","codes":[{"authorDate":"2020-08-23 00:00:00","commitOrder":24,"curCode":"    public static void main(final String[] args) throws IOException {\n        final Properties props = getStreamsConfig(args);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        createWordCountStream(builder);\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2020-08-23 00:00:00","endLine":111,"groupId":"17149","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/15aacf844d57977fe880d2d2ffa22c63c72e9b.src","preCode":"    public static void main(final String[] args) {\n        final Properties props = getStreamsConfig();\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        createWordCountStream(builder);\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2018-12-11 17:54:41","commitOrder":24,"curCode":"    public static void main(final String[] args) {\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        final KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(Duration.ofSeconds(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2)) {\n                    return value1;\n                } else {\n                    return value2;\n                }\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        final Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2018-12-11 17:54:41","endLine":126,"groupId":"6650","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/49/94a5d9b36e0ebf456f3dd8e0798326f42f8489.src","preCode":"    public static void main(final String[] args) {\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        final KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(Duration.ofSeconds(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2)) {\n                    return value1;\n                } else {\n                    return value2;\n                }\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        final Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/temperature/TemperatureDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"}],"commitId":"8af7b96bfbffb2455191beac41ec8db4f6d24e3b","commitMessage":"@@@KAFKA-10367: Allow running the Streams demo app with a config file (#9131)\n\nUpdate the 3 WordCount demos to accept a configuration file.\n\nReviewers: Matthias J. Sax <mjsax@apache.org>","date":"2020-08-23 00:00:00","modifiedFileCount":"4","status":"M","submitter":"Mickael Maison"},{"authorTime":"2021-02-02 08:20:35","codes":[{"authorDate":"2020-08-23 00:00:00","commitOrder":25,"curCode":"    public static void main(final String[] args) throws IOException {\n        final Properties props = getStreamsConfig(args);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        createWordCountStream(builder);\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2020-08-23 00:00:00","endLine":111,"groupId":"17149","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/15aacf844d57977fe880d2d2ffa22c63c72e9b.src","preCode":"    public static void main(final String[] args) throws IOException {\n        final Properties props = getStreamsConfig(args);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        createWordCountStream(builder);\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2021-02-02 08:20:35","commitOrder":25,"curCode":"    public static void main(final String[] args) {\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        final KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(Duration.ofSeconds(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2)) {\n                    return value1;\n                } else {\n                    return value2;\n                }\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        final Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class, TEMPERATURE_WINDOW_SIZE);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2021-02-02 08:20:35","endLine":126,"groupId":"0","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4d/63d30633040d858c2819ec9e0bbc8e8c197041.src","preCode":"    public static void main(final String[] args) {\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        final KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(Duration.ofSeconds(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2)) {\n                    return value1;\n                } else {\n                    return value2;\n                }\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        final Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/temperature/TemperatureDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"f5a2fbac6d26fc1613ec34d9764a1e86732f0a45","commitMessage":"@@@KAFKA-10366 & KAFKA-9649: Implement KIP-659 to allow TimeWindowedDeserializer and TimeWindowedSerde to handle window size (#9253)\n\nSee KIP details and discussions here: https://cwiki.apache.org/confluence/display/KAFKA/KIP-659%3A+Improve+TimeWindowedDeserializer+and+TimeWindowedSerde+to+handle+window+size\n\nDeprecates methods that allow users to skip setting a window size when one is needed. Adds a window size streams config to allow the timeWindowedDeserializer to calculate window end time.\n\nReviewers: Walker Carlson <wcarlson@confluent.io>.  John Roesler <vvcephei@apache.org>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-02-02 08:20:35","modifiedFileCount":"9","status":"M","submitter":"leah"},{"authorTime":"2021-07-01 08:09:19","codes":[{"authorDate":"2020-08-23 00:00:00","commitOrder":26,"curCode":"    public static void main(final String[] args) throws IOException {\n        final Properties props = getStreamsConfig(args);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        createWordCountStream(builder);\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2020-08-23 00:00:00","endLine":111,"groupId":"10683","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/15aacf844d57977fe880d2d2ffa22c63c72e9b.src","preCode":"    public static void main(final String[] args) throws IOException {\n        final Properties props = getStreamsConfig(args);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        createWordCountStream(builder);\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-wordcount-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/wordcount/WordCountDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2021-07-01 08:09:19","commitOrder":26,"curCode":"    public static void main(final String[] args) {\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        final Duration duration24Hours = Duration.ofHours(24);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        final KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.ofSizeAndGrace(Duration.ofSeconds(TEMPERATURE_WINDOW_SIZE), duration24Hours))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2)) {\n                    return value1;\n                } else {\n                    return value2;\n                }\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        final Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class, TEMPERATURE_WINDOW_SIZE);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","date":"2021-07-01 08:09:19","endLine":128,"groupId":"10683","id":28,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/84466f99c4a49daeb9b86441e30b2c765e8112.src","preCode":"    public static void main(final String[] args) {\n\n        final Properties props = new Properties();\n        props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"streams-temperature\");\n        props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n        props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        props.put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG, 0);\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KStream<String, String> source = builder.stream(\"iot-temperature\");\n\n        final KStream<Windowed<String>, String> max = source\n            \r\n            \r\n            .selectKey((key, value) -> \"temp\")\n            .groupByKey()\n            .windowedBy(TimeWindows.of(Duration.ofSeconds(TEMPERATURE_WINDOW_SIZE)))\n            .reduce((value1, value2) -> {\n                if (Integer.parseInt(value1) > Integer.parseInt(value2)) {\n                    return value1;\n                } else {\n                    return value2;\n                }\n            })\n            .toStream()\n            .filter((key, value) -> Integer.parseInt(value) > TEMPERATURE_THRESHOLD);\n\n        final Serde<Windowed<String>> windowedSerde = WindowedSerdes.timeWindowedSerdeFrom(String.class, TEMPERATURE_WINDOW_SIZE);\n\n        \r\n        max.to(\"iot-temperature-max\", Produced.with(windowedSerde, Serdes.String()));\n\n        final KafkaStreams streams = new KafkaStreams(builder.build(), props);\n        final CountDownLatch latch = new CountDownLatch(1);\n\n        \r\n        Runtime.getRuntime().addShutdownHook(new Thread(\"streams-temperature-shutdown-hook\") {\n            @Override\n            public void run() {\n                streams.close();\n                latch.countDown();\n            }\n        });\n\n        try {\n            streams.start();\n            latch.await();\n        } catch (final Throwable e) {\n            System.exit(1);\n        }\n        System.exit(0);\n    }\n","realPath":"streams/examples/src/main/java/org/apache/kafka/streams/examples/temperature/TemperatureDemo.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"b3905d9f71d48a60f2a9ee38014582d7ec7bc3c2","commitMessage":"@@@KAFKA-8613: New APIs for Controlling Grace Period for Windowed Operations (#10926)\n\nImplements KIP-633.\n\nGrace-period is an important parameter and its best to make it the user's responsibility to set it expliclity. Thus.  we move off to provide a default and make it a mandatory parameter when creating a window.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Luke Chen <showuon@gmail.com>.  Matthias J. Sax <matthias@confluent.io>","date":"2021-07-01 08:09:19","modifiedFileCount":"45","status":"M","submitter":"Israel Ekpo"}]
