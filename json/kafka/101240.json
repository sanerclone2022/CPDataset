[{"authorTime":"2020-08-28 07:04:28","codes":[{"authorDate":"2021-02-04 02:26:30","commitOrder":3,"curCode":"    public void shouldGetPrefixScanSensor() {\n        final String metricName = \"prefix-scan\";\n        final String descriptionOfRate = \"The average number of calls to prefix-scan per second\";\n        final String descriptionOfAvg = \"The average latency of calls to prefix-scan\";\n        final String descriptionOfMax = \"The maximum latency of calls to prefix-scan\";\n        expect(streamsMetrics.storeLevelSensor(TASK_ID, STORE_NAME, metricName, RecordingLevel.DEBUG))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.storeLevelTagMap(TASK_ID, STORE_TYPE, STORE_NAME)).andReturn(storeTagMap);\n        StreamsMetricsImpl.addInvocationRateToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            metricName,\n            descriptionOfRate\n        );\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            latencyMetricName(metricName),\n            descriptionOfAvg,\n            descriptionOfMax\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = StateStoreMetrics.prefixScanSensor(TASK_ID, STORE_TYPE, STORE_NAME, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-02-04 02:26:30","endLine":237,"groupId":"14059","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetPrefixScanSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4e/4d6c87061a887aeb320a07816fb1da5a8bf055.src","preCode":"    public void shouldGetPrefixScanSensor() {\n        final String metricName = \"prefix-scan\";\n        final String descriptionOfRate = \"The average number of calls to prefix-scan per second\";\n        final String descriptionOfAvg = \"The average latency of calls to prefix-scan\";\n        final String descriptionOfMax = \"The maximum latency of calls to prefix-scan\";\n        expect(streamsMetrics.storeLevelSensor(TASK_ID, STORE_NAME, metricName, RecordingLevel.DEBUG))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.storeLevelTagMap(TASK_ID, STORE_TYPE, STORE_NAME)).andReturn(storeTagMap);\n        StreamsMetricsImpl.addInvocationRateToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            metricName,\n            descriptionOfRate\n        );\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            latencyMetricName(metricName),\n            descriptionOfAvg,\n            descriptionOfMax\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = StateStoreMetrics.prefixScanSensor(TASK_ID, STORE_TYPE, STORE_NAME, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/metrics/StateStoreMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"B"},{"authorDate":"2020-08-28 07:04:28","commitOrder":3,"curCode":"    private void shouldGetSensor(final String metricName,\n                                 final String descriptionOfRate,\n                                 final String descriptionOfCount,\n                                 final String descriptionOfAvg,\n                                 final String descriptionOfMax,\n                                 final Supplier<Sensor> sensorSupplier) {\n        if (builtInMetricsVersion == Version.FROM_0100_TO_24) {\n            setUpParentSensor(metricName, descriptionOfRate, descriptionOfCount, descriptionOfAvg, descriptionOfMax);\n            expect(streamsMetrics.storeLevelSensor(\n                TASK_ID,\n                STORE_NAME,\n                metricName,\n                RecordingLevel.DEBUG,\n                parentSensor\n            )).andReturn(expectedSensor);\n            StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n                expectedSensor,\n                storeLevelGroup,\n                storeTagMap,\n                metricName,\n                descriptionOfRate,\n                descriptionOfCount\n            );\n        } else {\n            expect(streamsMetrics.storeLevelSensor(\n                TASK_ID,\n                STORE_NAME,\n                metricName,\n                RecordingLevel.DEBUG\n            )).andReturn(expectedSensor);\n            StreamsMetricsImpl.addInvocationRateToSensor(\n                expectedSensor,\n                storeLevelGroup,\n                storeTagMap,\n                metricName,\n                descriptionOfRate\n            );\n        }\n        expect(streamsMetrics.storeLevelTagMap(TASK_ID, STORE_TYPE, STORE_NAME)).andReturn(storeTagMap);\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            storeLevelGroup,\n            storeTagMap,\n            latencyMetricName(metricName),\n            descriptionOfAvg,\n            descriptionOfMax\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = sensorSupplier.get();\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2020-08-28 07:04:28","endLine":415,"groupId":"14064","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetSensor","params":"(finalStringmetricName@finalStringdescriptionOfRate@finalStringdescriptionOfCount@finalStringdescriptionOfAvg@finalStringdescriptionOfMax@finalSupplier<Sensor>sensorSupplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/35/960e199e4dd3eda6e32f0008421fc813981789.src","preCode":"    private void shouldGetSensor(final String metricName,\n                                 final String descriptionOfRate,\n                                 final String descriptionOfCount,\n                                 final String descriptionOfAvg,\n                                 final String descriptionOfMax,\n                                 final Supplier<Sensor> sensorSupplier) {\n        if (builtInMetricsVersion == Version.FROM_0100_TO_24) {\n            setUpParentSensor(metricName, descriptionOfRate, descriptionOfCount, descriptionOfAvg, descriptionOfMax);\n            expect(streamsMetrics.storeLevelSensor(\n                TASK_ID,\n                STORE_NAME,\n                metricName,\n                RecordingLevel.DEBUG,\n                parentSensor\n            )).andReturn(expectedSensor);\n            StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n                expectedSensor,\n                storeLevelGroup,\n                storeTagMap,\n                metricName,\n                descriptionOfRate,\n                descriptionOfCount\n            );\n        } else {\n            expect(streamsMetrics.storeLevelSensor(\n                TASK_ID,\n                STORE_NAME,\n                metricName,\n                RecordingLevel.DEBUG\n            )).andReturn(expectedSensor);\n            StreamsMetricsImpl.addInvocationRateToSensor(\n                expectedSensor,\n                storeLevelGroup,\n                storeTagMap,\n                metricName,\n                descriptionOfRate\n            );\n        }\n        expect(streamsMetrics.storeLevelTagMap(TASK_ID, STORE_TYPE, STORE_NAME)).andReturn(storeTagMap);\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            storeLevelGroup,\n            storeTagMap,\n            latencyMetricName(metricName),\n            descriptionOfAvg,\n            descriptionOfMax\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = sensorSupplier.get();\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/metrics/StateStoreMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":362,"status":"NB"}],"commitId":"51833bf37c7ab5ce24aed82749d45f5c8550d12f","commitMessage":"@@@KAFKA-10648: Add Prefix Scan support to State Stores (#9508)\n\nAdd prefix scan support to State stores. Currently.  only RocksDB and InMemory key value stores are being supported.\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-02-04 02:26:30","modifiedFileCount":"18","status":"M","submitter":"vamossagar12"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-02-04 02:26:30","commitOrder":4,"curCode":"    public void shouldGetPrefixScanSensor() {\n        final String metricName = \"prefix-scan\";\n        final String descriptionOfRate = \"The average number of calls to prefix-scan per second\";\n        final String descriptionOfAvg = \"The average latency of calls to prefix-scan\";\n        final String descriptionOfMax = \"The maximum latency of calls to prefix-scan\";\n        expect(streamsMetrics.storeLevelSensor(TASK_ID, STORE_NAME, metricName, RecordingLevel.DEBUG))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.storeLevelTagMap(TASK_ID, STORE_TYPE, STORE_NAME)).andReturn(storeTagMap);\n        StreamsMetricsImpl.addInvocationRateToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            metricName,\n            descriptionOfRate\n        );\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            latencyMetricName(metricName),\n            descriptionOfAvg,\n            descriptionOfMax\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = StateStoreMetrics.prefixScanSensor(TASK_ID, STORE_TYPE, STORE_NAME, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-02-04 02:26:30","endLine":237,"groupId":"14059","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetPrefixScanSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4e/4d6c87061a887aeb320a07816fb1da5a8bf055.src","preCode":"    public void shouldGetPrefixScanSensor() {\n        final String metricName = \"prefix-scan\";\n        final String descriptionOfRate = \"The average number of calls to prefix-scan per second\";\n        final String descriptionOfAvg = \"The average latency of calls to prefix-scan\";\n        final String descriptionOfMax = \"The maximum latency of calls to prefix-scan\";\n        expect(streamsMetrics.storeLevelSensor(TASK_ID, STORE_NAME, metricName, RecordingLevel.DEBUG))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.storeLevelTagMap(TASK_ID, STORE_TYPE, STORE_NAME)).andReturn(storeTagMap);\n        StreamsMetricsImpl.addInvocationRateToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            metricName,\n            descriptionOfRate\n        );\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            latencyMetricName(metricName),\n            descriptionOfAvg,\n            descriptionOfMax\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = StateStoreMetrics.prefixScanSensor(TASK_ID, STORE_TYPE, STORE_NAME, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/metrics/StateStoreMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"N"},{"authorDate":"2021-06-01 20:05:08","commitOrder":4,"curCode":"    private void shouldGetSensor(final String metricName,\n                                 final String descriptionOfRate,\n                                 final String descriptionOfAvg,\n                                 final String descriptionOfMax,\n                                 final Supplier<Sensor> sensorSupplier) {\n        expect(streamsMetrics.storeLevelSensor(\n            TASK_ID,\n            STORE_NAME,\n            metricName,\n            RecordingLevel.DEBUG\n        )).andReturn(expectedSensor);\n        StreamsMetricsImpl.addInvocationRateToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            metricName,\n            descriptionOfRate\n        );\n        expect(streamsMetrics.storeLevelTagMap(TASK_ID, STORE_TYPE, STORE_NAME)).andReturn(storeTagMap);\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            latencyMetricName(metricName),\n            descriptionOfAvg,\n            descriptionOfMax\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = sensorSupplier.get();\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-01 20:05:08","endLine":374,"groupId":"14064","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetSensor","params":"(finalStringmetricName@finalStringdescriptionOfRate@finalStringdescriptionOfAvg@finalStringdescriptionOfMax@finalSupplier<Sensor>sensorSupplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/bc06abd0b418b6d2593b4cc487d0c1ecf0957c.src","preCode":"    private void shouldGetSensor(final String metricName,\n                                 final String descriptionOfRate,\n                                 final String descriptionOfCount,\n                                 final String descriptionOfAvg,\n                                 final String descriptionOfMax,\n                                 final Supplier<Sensor> sensorSupplier) {\n        if (builtInMetricsVersion == Version.FROM_0100_TO_24) {\n            setUpParentSensor(metricName, descriptionOfRate, descriptionOfCount, descriptionOfAvg, descriptionOfMax);\n            expect(streamsMetrics.storeLevelSensor(\n                TASK_ID,\n                STORE_NAME,\n                metricName,\n                RecordingLevel.DEBUG,\n                parentSensor\n            )).andReturn(expectedSensor);\n            StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n                expectedSensor,\n                storeLevelGroup,\n                storeTagMap,\n                metricName,\n                descriptionOfRate,\n                descriptionOfCount\n            );\n        } else {\n            expect(streamsMetrics.storeLevelSensor(\n                TASK_ID,\n                STORE_NAME,\n                metricName,\n                RecordingLevel.DEBUG\n            )).andReturn(expectedSensor);\n            StreamsMetricsImpl.addInvocationRateToSensor(\n                expectedSensor,\n                storeLevelGroup,\n                storeTagMap,\n                metricName,\n                descriptionOfRate\n            );\n        }\n        expect(streamsMetrics.storeLevelTagMap(TASK_ID, STORE_TYPE, STORE_NAME)).andReturn(storeTagMap);\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            storeLevelGroup,\n            storeTagMap,\n            latencyMetricName(metricName),\n            descriptionOfAvg,\n            descriptionOfMax\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = sensorSupplier.get();\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/metrics/StateStoreMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":341,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-11 04:21:46","codes":[{"authorDate":"2021-06-11 04:21:46","commitOrder":5,"curCode":"    public void shouldGetPrefixScanSensor() {\n        final String metricName = \"prefix-scan\";\n        final String descriptionOfRate = \"The average number of calls to prefix-scan per second\";\n        final String descriptionOfAvg = \"The average latency of calls to prefix-scan\";\n        final String descriptionOfMax = \"The maximum latency of calls to prefix-scan\";\n        when(streamsMetrics.storeLevelSensor(TASK_ID, STORE_NAME, metricName, RecordingLevel.DEBUG))\n                .thenReturn(expectedSensor);\n        when(streamsMetrics.storeLevelTagMap(TASK_ID, STORE_TYPE, STORE_NAME)).thenReturn(storeTagMap);\n        StreamsMetricsImpl.addInvocationRateToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            metricName,\n            descriptionOfRate\n        );\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            latencyMetricName(metricName),\n            descriptionOfAvg,\n            descriptionOfMax\n        );\n\n        final Sensor sensor = StateStoreMetrics.prefixScanSensor(TASK_ID, STORE_TYPE, STORE_NAME, streamsMetrics);\n\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-11 04:21:46","endLine":178,"groupId":"101240","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldGetPrefixScanSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f9/813163e3f8430c0ca72458d2998b97e5990273.src","preCode":"    public void shouldGetPrefixScanSensor() {\n        final String metricName = \"prefix-scan\";\n        final String descriptionOfRate = \"The average number of calls to prefix-scan per second\";\n        final String descriptionOfAvg = \"The average latency of calls to prefix-scan\";\n        final String descriptionOfMax = \"The maximum latency of calls to prefix-scan\";\n        expect(streamsMetrics.storeLevelSensor(TASK_ID, STORE_NAME, metricName, RecordingLevel.DEBUG))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.storeLevelTagMap(TASK_ID, STORE_TYPE, STORE_NAME)).andReturn(storeTagMap);\n        StreamsMetricsImpl.addInvocationRateToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            metricName,\n            descriptionOfRate\n        );\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            latencyMetricName(metricName),\n            descriptionOfAvg,\n            descriptionOfMax\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = StateStoreMetrics.prefixScanSensor(TASK_ID, STORE_TYPE, STORE_NAME, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/metrics/StateStoreMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2021-06-11 04:21:46","commitOrder":5,"curCode":"    private void shouldGetSensor(final String metricName,\n                                 final String descriptionOfRate,\n                                 final String descriptionOfAvg,\n                                 final String descriptionOfMax,\n                                 final Supplier<Sensor> sensorSupplier) {\n        when(streamsMetrics.storeLevelSensor(\n                TASK_ID,\n                STORE_NAME,\n                metricName,\n                RecordingLevel.DEBUG\n        )).thenReturn(expectedSensor);\n\n        StreamsMetricsImpl.addInvocationRateToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            metricName,\n            descriptionOfRate\n        );\n        when(streamsMetrics.storeLevelTagMap(TASK_ID, STORE_TYPE, STORE_NAME)).thenReturn(storeTagMap);\n\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            latencyMetricName(metricName),\n            descriptionOfAvg,\n            descriptionOfMax\n        );\n\n        final Sensor sensor = sensorSupplier.get();\n\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-11 04:21:46","endLine":354,"groupId":"101240","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldGetSensor","params":"(finalStringmetricName@finalStringdescriptionOfRate@finalStringdescriptionOfAvg@finalStringdescriptionOfMax@finalSupplier<Sensor>sensorSupplier)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f9/813163e3f8430c0ca72458d2998b97e5990273.src","preCode":"    private void shouldGetSensor(final String metricName,\n                                 final String descriptionOfRate,\n                                 final String descriptionOfAvg,\n                                 final String descriptionOfMax,\n                                 final Supplier<Sensor> sensorSupplier) {\n        expect(streamsMetrics.storeLevelSensor(\n            TASK_ID,\n            STORE_NAME,\n            metricName,\n            RecordingLevel.DEBUG\n        )).andReturn(expectedSensor);\n        StreamsMetricsImpl.addInvocationRateToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            metricName,\n            descriptionOfRate\n        );\n        expect(streamsMetrics.storeLevelTagMap(TASK_ID, STORE_TYPE, STORE_NAME)).andReturn(storeTagMap);\n        StreamsMetricsImpl.addAvgAndMaxToSensor(\n            expectedSensor,\n            STORE_LEVEL_GROUP,\n            storeTagMap,\n            latencyMetricName(metricName),\n            descriptionOfAvg,\n            descriptionOfMax\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = sensorSupplier.get();\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/metrics/StateStoreMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"}],"commitId":"69d507590efc0588a61214c35e0bb552744aae05","commitMessage":"@@@KAFKA-12924 Replace EasyMock and PowerMock with Mockito in streams metrics tests (#10850)\n\nReviewers: John Roesler <vvcephei@apache.org>.  Ismael Juma <ijuma@apache.org>","date":"2021-06-11 04:21:46","modifiedFileCount":"7","status":"M","submitter":"wycccccc"}]
