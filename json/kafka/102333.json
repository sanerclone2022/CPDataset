[{"authorTime":"2019-06-04 05:31:19","codes":[{"authorDate":"2019-06-04 05:31:19","commitOrder":1,"curCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        mockStatic(StreamsMetricsImpl.class);\n        expect(streamsMetrics.threadLevelSensor(operation, RecordingLevel.INFO)).andReturn(dummySensor);\n        expect(streamsMetrics.threadLevelTagMap()).andReturn(dummyTagMap);\n        StreamsMetricsImpl.addInvocationRateAndCount(\n            dummySensor, THREAD_LEVEL_GROUP, dummyTagMap, operation, totalDescription, rateDescription);\n\n        replayAll();\n        replay(StreamsMetricsImpl.class);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(streamsMetrics);\n\n        verifyAll();\n        verify(StreamsMetricsImpl.class);\n\n        assertThat(sensor, is(dummySensor));\n    }\n","date":"2019-06-04 05:31:18","endLine":218,"groupId":"17674","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSkipRecordSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/89/395d9c51a8cf90199e4855811ddb47242dc8ab.src","preCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        mockStatic(StreamsMetricsImpl.class);\n        expect(streamsMetrics.threadLevelSensor(operation, RecordingLevel.INFO)).andReturn(dummySensor);\n        expect(streamsMetrics.threadLevelTagMap()).andReturn(dummyTagMap);\n        StreamsMetricsImpl.addInvocationRateAndCount(\n            dummySensor, THREAD_LEVEL_GROUP, dummyTagMap, operation, totalDescription, rateDescription);\n\n        replayAll();\n        replay(StreamsMetricsImpl.class);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(streamsMetrics);\n\n        verifyAll();\n        verify(StreamsMetricsImpl.class);\n\n        assertThat(sensor, is(dummySensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"B"},{"authorDate":"2019-06-04 05:31:19","commitOrder":1,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        mockStatic(StreamsMetricsImpl.class);\n        expect(streamsMetrics.threadLevelSensor(operation, RecordingLevel.INFO)).andReturn(dummySensor);\n        expect(streamsMetrics.threadLevelTagMap()).andReturn(dummyTagMap);\n        StreamsMetricsImpl.addInvocationRateAndCount(\n            dummySensor, THREAD_LEVEL_GROUP, dummyTagMap, operation, totalDescription, rateDescription);\n\n        replayAll();\n        replay(StreamsMetricsImpl.class);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(streamsMetrics);\n\n        verifyAll();\n        verify(StreamsMetricsImpl.class);\n\n        assertThat(sensor, is(dummySensor));\n    }\n","date":"2019-06-04 05:31:18","endLine":74,"groupId":"17674","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/89/395d9c51a8cf90199e4855811ddb47242dc8ab.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        mockStatic(StreamsMetricsImpl.class);\n        expect(streamsMetrics.threadLevelSensor(operation, RecordingLevel.INFO)).andReturn(dummySensor);\n        expect(streamsMetrics.threadLevelTagMap()).andReturn(dummyTagMap);\n        StreamsMetricsImpl.addInvocationRateAndCount(\n            dummySensor, THREAD_LEVEL_GROUP, dummyTagMap, operation, totalDescription, rateDescription);\n\n        replayAll();\n        replay(StreamsMetricsImpl.class);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(streamsMetrics);\n\n        verifyAll();\n        verify(StreamsMetricsImpl.class);\n\n        assertThat(sensor, is(dummySensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"}],"commitId":"17712b96c86d6c2cce695531d7e5f2e3d5718b21","commitMessage":"@@@KAFKA-6819: Pt. 1 - Refactor thread-level Streams metrics (#6631)\n\n* StreamsMetricsImpl wraps the Kafka Streams' metrics registry and provides logic to create\nand register sensors and their corresponding metrics. An example for such logic can be found in\nthreadLevelSensor(). Furthermore.  StreamsMetricsmpl keeps track of the sensors on the\ndifferent levels of an application.  i.e..  thread.  task.  etc..  and provides logic to remove sensors per\nlevel.  e.g..  removeAllThreadLevelSensors(). There is one StreamsMetricsImpl object per\napplication instance.\n* ThreadMetrics contains only static methods that specify all built-in thread-level sensors and\nmetrics and provide logic to register and retrieve those thread-level sensors.  e.g..  commitSensor().\n* From anywhere inside the code base with access to StreamsMetricsImpl.  thread-level sensors can be accessed by using ThreadMetrics.\n* ThreadsMetrics does not inherit from StreamsMetricsImpl anymore.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-06-04 05:31:18","modifiedFileCount":"24","status":"B","submitter":"cadonna"},{"authorTime":"2019-08-06 23:51:08","codes":[{"authorDate":"2019-08-06 23:51:08","commitOrder":2,"curCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        mockStatic(StreamsMetricsImpl.class);\n        expect(streamsMetrics.threadLevelSensor(operation, RecordingLevel.INFO)).andReturn(dummySensor);\n        expect(streamsMetrics.threadLevelTagMap()).andReturn(dummyTagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            dummySensor, THREAD_LEVEL_GROUP, dummyTagMap, operation, totalDescription, rateDescription);\n\n        replayAll();\n        replay(StreamsMetricsImpl.class);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(streamsMetrics);\n\n        verifyAll();\n        verify(StreamsMetricsImpl.class);\n\n        assertThat(sensor, is(dummySensor));\n    }\n","date":"2019-08-06 23:51:08","endLine":218,"groupId":"17674","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSkipRecordSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/9f028092155484909f37f8810ae7587ea79c22.src","preCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        mockStatic(StreamsMetricsImpl.class);\n        expect(streamsMetrics.threadLevelSensor(operation, RecordingLevel.INFO)).andReturn(dummySensor);\n        expect(streamsMetrics.threadLevelTagMap()).andReturn(dummyTagMap);\n        StreamsMetricsImpl.addInvocationRateAndCount(\n            dummySensor, THREAD_LEVEL_GROUP, dummyTagMap, operation, totalDescription, rateDescription);\n\n        replayAll();\n        replay(StreamsMetricsImpl.class);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(streamsMetrics);\n\n        verifyAll();\n        verify(StreamsMetricsImpl.class);\n\n        assertThat(sensor, is(dummySensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"},{"authorDate":"2019-08-06 23:51:08","commitOrder":2,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        mockStatic(StreamsMetricsImpl.class);\n        expect(streamsMetrics.threadLevelSensor(operation, RecordingLevel.INFO)).andReturn(dummySensor);\n        expect(streamsMetrics.threadLevelTagMap()).andReturn(dummyTagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            dummySensor, THREAD_LEVEL_GROUP, dummyTagMap, operation, totalDescription, rateDescription);\n\n        replayAll();\n        replay(StreamsMetricsImpl.class);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(streamsMetrics);\n\n        verifyAll();\n        verify(StreamsMetricsImpl.class);\n\n        assertThat(sensor, is(dummySensor));\n    }\n","date":"2019-08-06 23:51:08","endLine":74,"groupId":"17674","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/9f028092155484909f37f8810ae7587ea79c22.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        mockStatic(StreamsMetricsImpl.class);\n        expect(streamsMetrics.threadLevelSensor(operation, RecordingLevel.INFO)).andReturn(dummySensor);\n        expect(streamsMetrics.threadLevelTagMap()).andReturn(dummyTagMap);\n        StreamsMetricsImpl.addInvocationRateAndCount(\n            dummySensor, THREAD_LEVEL_GROUP, dummyTagMap, operation, totalDescription, rateDescription);\n\n        replayAll();\n        replay(StreamsMetricsImpl.class);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(streamsMetrics);\n\n        verifyAll();\n        verify(StreamsMetricsImpl.class);\n\n        assertThat(sensor, is(dummySensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"7663a6c44daae5d72f38cbba79d728416e11167d","commitMessage":"@@@Minor: Refactor methods to add metrics to sensor in `StreamsMetricsImpl` (#7161)\n\nRenames method names in StreamsMetricsImpl to make them consistent.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-08-06 23:51:08","modifiedFileCount":"10","status":"M","submitter":"cadonna"},{"authorTime":"2019-10-05 08:07:30","codes":[{"authorDate":"2019-10-05 08:07:30","commitOrder":3,"curCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        mockStatic(StreamsMetricsImpl.class);\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(dummySensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(dummyTagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            dummySensor, THREAD_LEVEL_GROUP, dummyTagMap, operation, totalDescription, rateDescription);\n\n        replayAll();\n        replay(StreamsMetricsImpl.class);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verifyAll();\n        verify(StreamsMetricsImpl.class);\n\n        assertThat(sensor, is(dummySensor));\n    }\n","date":"2019-10-05 08:07:30","endLine":219,"groupId":"22085","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSkipRecordSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/67/d5c226afc2180fbb9db0dd883a780b943df31c.src","preCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        mockStatic(StreamsMetricsImpl.class);\n        expect(streamsMetrics.threadLevelSensor(operation, RecordingLevel.INFO)).andReturn(dummySensor);\n        expect(streamsMetrics.threadLevelTagMap()).andReturn(dummyTagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            dummySensor, THREAD_LEVEL_GROUP, dummyTagMap, operation, totalDescription, rateDescription);\n\n        replayAll();\n        replay(StreamsMetricsImpl.class);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(streamsMetrics);\n\n        verifyAll();\n        verify(StreamsMetricsImpl.class);\n\n        assertThat(sensor, is(dummySensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"},{"authorDate":"2019-10-05 08:07:30","commitOrder":3,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        mockStatic(StreamsMetricsImpl.class);\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(dummySensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(dummyTagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            dummySensor, THREAD_LEVEL_GROUP, dummyTagMap, operation, totalDescription, rateDescription);\n\n        replayAll();\n        replay(StreamsMetricsImpl.class);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verifyAll();\n        verify(StreamsMetricsImpl.class);\n\n        assertThat(sensor, is(dummySensor));\n    }\n","date":"2019-10-05 08:07:30","endLine":75,"groupId":"22085","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/67/d5c226afc2180fbb9db0dd883a780b943df31c.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        mockStatic(StreamsMetricsImpl.class);\n        expect(streamsMetrics.threadLevelSensor(operation, RecordingLevel.INFO)).andReturn(dummySensor);\n        expect(streamsMetrics.threadLevelTagMap()).andReturn(dummyTagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            dummySensor, THREAD_LEVEL_GROUP, dummyTagMap, operation, totalDescription, rateDescription);\n\n        replayAll();\n        replay(StreamsMetricsImpl.class);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(streamsMetrics);\n\n        verifyAll();\n        verify(StreamsMetricsImpl.class);\n\n        assertThat(sensor, is(dummySensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"52007e878aaac3f48d0d949dbe428a2ae5e56f57","commitMessage":"@@@KAFKA-8934: Introduce instance-level metrics for streams applications (#7416)\n\n1. Moves StreamsMetricsImpl from StreamThread to KafkaStreams\n2. Adds instance-level metrics as specified in KIP-444.  i.e.:\n-- version\n-- commit-id\n-- application-id\n-- topology-description\n-- state\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <john@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-10-05 08:07:30","modifiedFileCount":"65","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-10-20 04:45:36","codes":[{"authorDate":"2019-10-20 04:45:36","commitOrder":4,"curCode":"    public void shouldGetSkipRecordSensor() {\n        if (builtInMetricsVersion == Version.FROM_100_TO_24) {\n            final String operation = \"skipped-records\";\n            final String totalDescription = \"The total number of skipped records\";\n            final String rateDescription = \"The average per-second number of skipped records\";\n            expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n            expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n            StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n                expectedSensor,\n                threadLevelGroup,\n                tagMap,\n                operation,\n                rateDescription, totalDescription\n            );\n        }\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Optional<Sensor> sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n\n        if (builtInMetricsVersion == Version.FROM_100_TO_24) {\n            assertThat(sensor.orElse(null), is(expectedSensor));\n        } else {\n            assertFalse(sensor.isPresent());\n        }\n    }\n","date":"2019-10-20 04:45:36","endLine":290,"groupId":"3630","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSkipRecordSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/84/eefc4d5d3889457919cce440e83210872f14af.src","preCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        mockStatic(StreamsMetricsImpl.class);\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(dummySensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(dummyTagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            dummySensor, THREAD_LEVEL_GROUP, dummyTagMap, operation, totalDescription, rateDescription);\n\n        replayAll();\n        replay(StreamsMetricsImpl.class);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verifyAll();\n        verify(StreamsMetricsImpl.class);\n\n        assertThat(sensor, is(dummySensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"},{"authorDate":"2019-10-20 04:45:36","commitOrder":4,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2019-10-20 04:45:36","endLine":104,"groupId":"3630","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/84/eefc4d5d3889457919cce440e83210872f14af.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        mockStatic(StreamsMetricsImpl.class);\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(dummySensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(dummyTagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            dummySensor, THREAD_LEVEL_GROUP, dummyTagMap, operation, totalDescription, rateDescription);\n\n        replayAll();\n        replay(StreamsMetricsImpl.class);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verifyAll();\n        verify(StreamsMetricsImpl.class);\n\n        assertThat(sensor, is(dummySensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"2298c7f84fd0e29b304eb11078bfe76ca5b04a97","commitMessage":"@@@KAFKA-8964: Refactor thread-level metrics depending on built-in metrics version (#7474)\n\n* Made commit-over-tasks sensor and skipped-records sensor optional since they are removed in the latest version\n* Refactored methods for sensor creation\n* Adapted unit and integration tests\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2019-10-20 04:45:36","modifiedFileCount":"50","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-10-20 04:45:36","codes":[{"authorDate":"2019-10-26 05:16:25","commitOrder":5,"curCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        if (builtInMetricsVersion == Version.FROM_100_TO_24) {\n            expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n            StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n                expectedSensor,\n                threadLevelGroup,\n                tagMap,\n                operation,\n                rateDescription,\n                totalDescription\n            );\n        }\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2019-10-26 05:16:25","endLine":285,"groupId":"16259","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSkipRecordSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/5e4154c6fe9fbe8ebe432e467cb38ce5085bc8.src","preCode":"    public void shouldGetSkipRecordSensor() {\n        if (builtInMetricsVersion == Version.FROM_100_TO_24) {\n            final String operation = \"skipped-records\";\n            final String totalDescription = \"The total number of skipped records\";\n            final String rateDescription = \"The average per-second number of skipped records\";\n            expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n            expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n            StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n                expectedSensor,\n                threadLevelGroup,\n                tagMap,\n                operation,\n                rateDescription, totalDescription\n            );\n        }\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Optional<Sensor> sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n\n        if (builtInMetricsVersion == Version.FROM_100_TO_24) {\n            assertThat(sensor.orElse(null), is(expectedSensor));\n        } else {\n            assertFalse(sensor.isPresent());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2019-10-20 04:45:36","commitOrder":5,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2019-10-20 04:45:36","endLine":104,"groupId":"3630","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/84/eefc4d5d3889457919cce440e83210872f14af.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"N"}],"commitId":"27ba8f5a399cdd799a7eade52c31e6bc21ad18d1","commitMessage":"@@@KAFKA-8968: Refactor task-level metrics (#7566)\n\nIntroduces TaskMetrics class\nIntroduces dropped-records\nReplaces skipped-records with dropped-records with latest built-in\nmetrics version\nDoes not add standby-process-ratio and active-process-ratio\nDoes not refactor parent sensors for processor node metrics\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <john@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-10-26 05:16:25","modifiedFileCount":"40","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-10-20 04:45:36","codes":[{"authorDate":"2019-10-31 00:24:59","commitOrder":6,"curCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        if (builtInMetricsVersion == Version.FROM_0100_TO_24) {\n            expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n            StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n                expectedSensor,\n                threadLevelGroup,\n                tagMap,\n                operation,\n                rateDescription,\n                totalDescription\n            );\n        }\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2019-10-31 00:24:59","endLine":285,"groupId":"16259","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSkipRecordSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e6/9f5b1edb406f39cebe39be09b81dbfaa4aa4de.src","preCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        if (builtInMetricsVersion == Version.FROM_100_TO_24) {\n            expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n            StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n                expectedSensor,\n                threadLevelGroup,\n                tagMap,\n                operation,\n                rateDescription,\n                totalDescription\n            );\n        }\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2019-10-20 04:45:36","commitOrder":6,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2019-10-20 04:45:36","endLine":104,"groupId":"3630","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/84/eefc4d5d3889457919cce440e83210872f14af.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"N"}],"commitId":"fc0f82372e1e456cbd43490b9eba957c4a0d3eb5","commitMessage":"@@@KAFKA-8980: Refactor state-store-level streams metrics (#7584)\n\nRefactors metrics according to KIP-444\nIntroduces StateStoreMetrics as a central provider for state store metrics\nAdds metric scope (a.k.a. store type) to the in-memory suppression buffer\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   Bill Bejeck <bbejeck@gmail.com>","date":"2019-10-31 00:24:59","modifiedFileCount":"26","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-10-20 04:45:36","codes":[{"authorDate":"2019-11-20 02:05:09","commitOrder":7,"curCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2019-11-20 02:05:09","endLine":283,"groupId":"3630","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSkipRecordSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3f/9678da45c211dbc434c345b6d7a3c92565960e.src","preCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        if (builtInMetricsVersion == Version.FROM_0100_TO_24) {\n            expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n            StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n                expectedSensor,\n                threadLevelGroup,\n                tagMap,\n                operation,\n                rateDescription,\n                totalDescription\n            );\n        }\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":262,"status":"M"},{"authorDate":"2019-10-20 04:45:36","commitOrder":7,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2019-10-20 04:45:36","endLine":104,"groupId":"3630","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/84/eefc4d5d3889457919cce440e83210872f14af.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"N"}],"commitId":"19681f6b95a5076af7020475f46d0bbe9f6015e1","commitMessage":"@@@KAFKA-9086: Refactor processor-node-level metrics (#7615)\n\nRefactors metrics according to KIP-444\nIntroduces ProcessorNodeMetrics as a central provider for processor node metrics\n\nReviewers:  Guozhang Wang <wangguoz@gmail.com>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-11-20 02:05:09","modifiedFileCount":"22","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-02-15 05:54:39","codes":[{"authorDate":"2020-02-15 05:54:39","commitOrder":8,"curCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        mockStatic(StreamsMetricsImpl.class);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2020-02-15 05:54:39","endLine":309,"groupId":"21062","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSkipRecordSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/7965226333b5775fa42562b2d94f302b77eb0c.src","preCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"},{"authorDate":"2020-02-15 05:54:39","commitOrder":8,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        mockStatic(StreamsMetricsImpl.class);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2020-02-15 05:54:39","endLine":105,"groupId":"21062","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/7965226333b5775fa42562b2d94f302b77eb0c.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"8d0b069b0fbda0826ad447accbf93a19f6e813fe","commitMessage":"@@@KAFKA-9557: correct thread process-rate sensor to measure throughput (#8112)\n\nCorrect the process-rate (and total) sensor to measure throughput (and total record processing count).\n\nReviewers: Guozhang Wang <guozhang@confluent.io>","date":"2020-02-15 05:54:39","modifiedFileCount":"3","status":"M","submitter":"John Roesler"},{"authorTime":"2020-03-03 00:22:01","codes":[{"authorDate":"2020-03-03 00:22:01","commitOrder":9,"curCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2020-03-03 00:22:01","endLine":299,"groupId":"3630","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSkipRecordSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d7/059a87fd8868d279052c39cd1fc9211836eb22.src","preCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        mockStatic(StreamsMetricsImpl.class);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"},{"authorDate":"2020-03-03 00:22:01","commitOrder":9,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2020-03-03 00:22:01","endLine":104,"groupId":"3630","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d7/059a87fd8868d279052c39cd1fc9211836eb22.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        mockStatic(StreamsMetricsImpl.class);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"ea0c02753140cacbac5893874f623441073b3837","commitMessage":"@@@MINOR: Clean up process rate and latency metrics test (#8172)\n\nReviewers: John Roesler <vvcephei@apache.org>\n","date":"2020-03-03 00:22:01","modifiedFileCount":"2","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":10,"curCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-01 20:05:08","endLine":386,"groupId":"3630","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSkipRecordSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7a/9a0945ca9a7370bf3454c94c3c5df88a01c3f5.src","preCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":365,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":10,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-01 20:05:08","endLine":411,"groupId":"3630","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7a/9a0945ca9a7370bf3454c94c3c5df88a01c3f5.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-11 04:21:46","codes":[{"authorDate":"2021-06-11 04:21:46","commitOrder":11,"curCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        when(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n                .thenReturn(expectedSensor);\n        when(streamsMetrics.threadLevelTagMap(THREAD_ID)).thenReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-11 04:21:46","endLine":344,"groupId":"102333","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetSkipRecordSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ae/0eae43f6b36d107e68ddc0587cd4369f1c407c.src","preCode":"    public void shouldGetSkipRecordSensor() {\n        final String operation = \"skipped-records\";\n        final String totalDescription = \"The total number of skipped records\";\n        final String rateDescription = \"The average per-second number of skipped records\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.skipRecordSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"M"},{"authorDate":"2021-06-11 04:21:46","commitOrder":11,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        when(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).thenReturn(expectedSensor);\n        when(streamsMetrics.threadLevelTagMap(THREAD_ID)).thenReturn(tagMap);\n\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-11 04:21:46","endLine":367,"groupId":"102333","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ae/0eae43f6b36d107e68ddc0587cd4369f1c407c.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"}],"commitId":"69d507590efc0588a61214c35e0bb552744aae05","commitMessage":"@@@KAFKA-12924 Replace EasyMock and PowerMock with Mockito in streams metrics tests (#10850)\n\nReviewers: John Roesler <vvcephei@apache.org>.  Ismael Juma <ijuma@apache.org>","date":"2021-06-11 04:21:46","modifiedFileCount":"7","status":"M","submitter":"wycccccc"}]
