[{"authorTime":"2018-02-01 00:49:23","codes":[{"authorDate":"2018-02-01 00:49:23","commitOrder":1,"curCode":"    public void testCreateConnectorWithControlSequenceInName() throws Throwable {\n        CreateConnectorRequest body = new CreateConnectorRequest(CONNECTOR_NAME_CONTROL_SEQUENCES1, Collections.singletonMap(ConnectorConfig.NAME_CONFIG, CONNECTOR_NAME_CONTROL_SEQUENCES1));\n\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_CONTROL_SEQUENCES1), EasyMock.eq(body.config()), EasyMock.eq(false), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_CONTROL_SEQUENCES1, CONNECTOR_CONFIG,\n                CONNECTOR_TASK_NAMES, ConnectorType.SOURCE)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.createConnector(FORWARD, body).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_CONTROL_SEQUENCES1, decoded);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-02-01 00:49:23","endLine":427,"groupId":"8564","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnectorWithControlSequenceInName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cc/4608064ed1e888300a990f2690f2b3c1e4d858.src","preCode":"    public void testCreateConnectorWithControlSequenceInName() throws Throwable {\n        CreateConnectorRequest body = new CreateConnectorRequest(CONNECTOR_NAME_CONTROL_SEQUENCES1, Collections.singletonMap(ConnectorConfig.NAME_CONFIG, CONNECTOR_NAME_CONTROL_SEQUENCES1));\n\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_CONTROL_SEQUENCES1), EasyMock.eq(body.config()), EasyMock.eq(false), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_CONTROL_SEQUENCES1, CONNECTOR_CONFIG,\n                CONNECTOR_TASK_NAMES, ConnectorType.SOURCE)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.createConnector(FORWARD, body).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_CONTROL_SEQUENCES1, decoded);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"B"},{"authorDate":"2018-02-01 00:49:23","commitOrder":1,"curCode":"    public void testPutConnectorConfigWithControlSequenceInName() throws Throwable {\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_CONTROL_SEQUENCES1), EasyMock.eq(CONNECTOR_CONFIG_CONTROL_SEQUENCES), EasyMock.eq(true), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_CONTROL_SEQUENCES1, CONNECTOR_CONFIG_CONTROL_SEQUENCES, CONNECTOR_TASK_NAMES,\n                ConnectorType.SINK)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.putConnectorConfig(CONNECTOR_NAME_CONTROL_SEQUENCES1, FORWARD, CONNECTOR_CONFIG_CONTROL_SEQUENCES).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_CONTROL_SEQUENCES1, decoded);\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-02-01 00:49:23","endLine":461,"groupId":"8566","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPutConnectorConfigWithControlSequenceInName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cc/4608064ed1e888300a990f2690f2b3c1e4d858.src","preCode":"    public void testPutConnectorConfigWithControlSequenceInName() throws Throwable {\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_CONTROL_SEQUENCES1), EasyMock.eq(CONNECTOR_CONFIG_CONTROL_SEQUENCES), EasyMock.eq(true), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_CONTROL_SEQUENCES1, CONNECTOR_CONFIG_CONTROL_SEQUENCES, CONNECTOR_TASK_NAMES,\n                ConnectorType.SINK)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.putConnectorConfig(CONNECTOR_NAME_CONTROL_SEQUENCES1, FORWARD, CONNECTOR_CONFIG_CONTROL_SEQUENCES).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_CONTROL_SEQUENCES1, decoded);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":447,"status":"B"}],"commitId":"530bc59de2732ba71e82c0110c59e9f6162531c6","commitMessage":"@@@KAFKA-4930: Enforce set of legal characters for connector names (KIP-212)\n\n?to check for empty connector name and illegal characters in connector name. This also fixes  KAFKA-4938 by removing the check for slashes in connector name from ConnectorsResource.\n\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\nAuthor: Soenke Liebau <soenke.liebau@opencore.com>\n\nReviewers: Gwen Shapira <cshapi@gmail.com>.  Viktor Somogyi <viktor.somogyi@cloudera.com>.  Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #2755 from soenkeliebau/KAFKA-4930\n","date":"2018-02-01 00:49:23","modifiedFileCount":"6","status":"B","submitter":"Soenke Liebau"},{"authorTime":"2019-06-04 10:06:00","codes":[{"authorDate":"2019-06-04 10:06:00","commitOrder":2,"curCode":"    public void testCreateConnectorWithControlSequenceInName() throws Throwable {\n        CreateConnectorRequest body = new CreateConnectorRequest(CONNECTOR_NAME_CONTROL_SEQUENCES1, Collections.singletonMap(ConnectorConfig.NAME_CONFIG, CONNECTOR_NAME_CONTROL_SEQUENCES1));\n\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_CONTROL_SEQUENCES1), EasyMock.eq(body.config()), EasyMock.eq(false), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_CONTROL_SEQUENCES1, CONNECTOR_CONFIG,\n                CONNECTOR_TASK_NAMES, ConnectorType.SOURCE)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.createConnector(FORWARD, NULL_HEADERS, body).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_CONTROL_SEQUENCES1, decoded);\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-06-04 10:06:00","endLine":546,"groupId":"104969","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnectorWithControlSequenceInName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/90df03afb6d6b896a49f72d47a6b70d82ca8f9.src","preCode":"    public void testCreateConnectorWithControlSequenceInName() throws Throwable {\n        CreateConnectorRequest body = new CreateConnectorRequest(CONNECTOR_NAME_CONTROL_SEQUENCES1, Collections.singletonMap(ConnectorConfig.NAME_CONFIG, CONNECTOR_NAME_CONTROL_SEQUENCES1));\n\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_CONTROL_SEQUENCES1), EasyMock.eq(body.config()), EasyMock.eq(false), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_CONTROL_SEQUENCES1, CONNECTOR_CONFIG,\n                CONNECTOR_TASK_NAMES, ConnectorType.SOURCE)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.createConnector(FORWARD, body).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_CONTROL_SEQUENCES1, decoded);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":531,"status":"M"},{"authorDate":"2019-06-04 10:06:00","commitOrder":2,"curCode":"    public void testPutConnectorConfigWithControlSequenceInName() throws Throwable {\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_CONTROL_SEQUENCES1), EasyMock.eq(CONNECTOR_CONFIG_CONTROL_SEQUENCES), EasyMock.eq(true), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_CONTROL_SEQUENCES1, CONNECTOR_CONFIG_CONTROL_SEQUENCES, CONNECTOR_TASK_NAMES,\n                ConnectorType.SINK)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.putConnectorConfig(CONNECTOR_NAME_CONTROL_SEQUENCES1, NULL_HEADERS, FORWARD, CONNECTOR_CONFIG_CONTROL_SEQUENCES).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_CONTROL_SEQUENCES1, decoded);\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-06-04 10:06:00","endLine":580,"groupId":"104969","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPutConnectorConfigWithControlSequenceInName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/90df03afb6d6b896a49f72d47a6b70d82ca8f9.src","preCode":"    public void testPutConnectorConfigWithControlSequenceInName() throws Throwable {\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_CONTROL_SEQUENCES1), EasyMock.eq(CONNECTOR_CONFIG_CONTROL_SEQUENCES), EasyMock.eq(true), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_CONTROL_SEQUENCES1, CONNECTOR_CONFIG_CONTROL_SEQUENCES, CONNECTOR_TASK_NAMES,\n                ConnectorType.SINK)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.putConnectorConfig(CONNECTOR_NAME_CONTROL_SEQUENCES1, FORWARD, CONNECTOR_CONFIG_CONTROL_SEQUENCES).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_CONTROL_SEQUENCES1, decoded);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":566,"status":"M"}],"commitId":"1a3fe9aa52555eb24ce692963e4461d6f05b771d","commitMessage":"@@@KAFKA-8404: Add HttpHeader to RestClient HTTP Request and Connector REST API (#6791)\n\nWhen Connect forwards a REST request from one worker to another.  the Authorization header was not forwarded. This commit changes the Connect framework to add include the authorization header when forwarding requests to other workers.\n\nAuthor: Hai-Dang Dam <damquanghaidang@gmail.com>\nReviewers: Robert Yokota <rayokota@gmail.com>.  Randall Hauch <rhauch@gmail.com>\n","date":"2019-06-04 10:06:00","modifiedFileCount":"7","status":"M","submitter":"Hai-Dang Dam"}]
