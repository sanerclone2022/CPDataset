[{"authorTime":"2017-08-25 07:03:55","codes":[{"authorDate":"2017-05-25 06:26:46","commitOrder":4,"curCode":"    public void testDisconnectAndRetry() {\n        \r\n        \r\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, true, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds());  \r\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds());  \r\n        sender.run(time.milliseconds());\n        assertEquals(brokerNode, transactionManager.coordinator(CoordinatorType.TRANSACTION));\n    }\n","date":"2017-05-25 06:26:46","endLine":232,"groupId":"3553","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisconnectAndRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/363d054e54b5c24d0ce06c965bc584cc9e64d2.src","preCode":"    public void testDisconnectAndRetry() {\n        \r\n        \r\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, true, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds());  \r\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds());  \r\n        sender.run(time.milliseconds());\n        assertEquals(brokerNode, transactionManager.coordinator(CoordinatorType.TRANSACTION));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"NB"},{"authorDate":"2017-08-25 07:03:55","commitOrder":4,"curCode":"    public void testUnsupportedInitTransactions() {\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds()); \r\n        sender.run(time.milliseconds()); \r\n\n        assertFalse(transactionManager.hasError());\n        assertNotNull(transactionManager.coordinator(CoordinatorType.TRANSACTION));\n\n        client.prepareUnsupportedVersionResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                InitProducerIdRequest initProducerIdRequest = (InitProducerIdRequest) body;\n                assertEquals(initProducerIdRequest.transactionalId(), transactionalId);\n                assertEquals(initProducerIdRequest.transactionTimeoutMs(), transactionTimeoutMs);\n                return true;\n            }\n        });\n\n        sender.run(time.milliseconds()); \r\n        assertTrue(transactionManager.hasFatalError());\n        assertTrue(transactionManager.lastError() instanceof UnsupportedVersionException);\n    }\n","date":"2017-08-25 07:03:55","endLine":685,"groupId":"1264","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnsupportedInitTransactions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/bcd9681a405343922c076941fa6851c46dcbf1.src","preCode":"    public void testUnsupportedInitTransactions() {\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds()); \r\n        sender.run(time.milliseconds()); \r\n\n        assertFalse(transactionManager.hasError());\n        assertNotNull(transactionManager.coordinator(CoordinatorType.TRANSACTION));\n\n        client.prepareUnsupportedVersionResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                InitProducerIdRequest initProducerIdRequest = (InitProducerIdRequest) body;\n                assertEquals(initProducerIdRequest.transactionalId(), transactionalId);\n                assertEquals(initProducerIdRequest.transactionTimeoutMs(), transactionTimeoutMs);\n                return true;\n            }\n        });\n\n        sender.run(time.milliseconds()); \r\n        assertTrue(transactionManager.hasFatalError());\n        assertTrue(transactionManager.lastError() instanceof UnsupportedVersionException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":663,"status":"B"}],"commitId":"71417552c7651a5b41e73460d0577615864aafe8","commitMessage":"@@@KAFKA-5342; Clarify producer fatal/abortable errors and fix inconsistencies\n\nThis patch improves documentation on the handling of errors for the idempotent/transactional producer. It also fixes a couple minor inconsistencies and improves test coverage. In particular:\n- UnsupportedForMessageFormat should be a fatal error for TxnOffsetCommit responses\n- UnsupportedVersion should be fatal for Produce responses and should be returned instead of InvalidRequest\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Apurva Mehta <apurva@confluent.io>.  Ismael Juma <ismael@juma.me.uk>\n\nCloses #3716 from hachikuji/KAFKA-5342\n","date":"2017-08-25 07:03:55","modifiedFileCount":"10","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2018-12-03 13:32:05","codes":[{"authorDate":"2017-05-25 06:26:46","commitOrder":5,"curCode":"    public void testDisconnectAndRetry() {\n        \r\n        \r\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, true, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds());  \r\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds());  \r\n        sender.run(time.milliseconds());\n        assertEquals(brokerNode, transactionManager.coordinator(CoordinatorType.TRANSACTION));\n    }\n","date":"2017-05-25 06:26:46","endLine":232,"groupId":"3553","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisconnectAndRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/363d054e54b5c24d0ce06c965bc584cc9e64d2.src","preCode":"    public void testDisconnectAndRetry() {\n        \r\n        \r\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, true, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds());  \r\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds());  \r\n        sender.run(time.milliseconds());\n        assertEquals(brokerNode, transactionManager.coordinator(CoordinatorType.TRANSACTION));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"},{"authorDate":"2018-12-03 13:32:05","commitOrder":5,"curCode":"    public void testUnsupportedInitTransactions() {\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds()); \r\n        sender.run(time.milliseconds()); \r\n\n        assertFalse(transactionManager.hasError());\n        assertNotNull(transactionManager.coordinator(CoordinatorType.TRANSACTION));\n\n        client.prepareUnsupportedVersionResponse(body -> {\n            InitProducerIdRequest initProducerIdRequest = (InitProducerIdRequest) body;\n            assertEquals(initProducerIdRequest.transactionalId(), transactionalId);\n            assertEquals(initProducerIdRequest.transactionTimeoutMs(), transactionTimeoutMs);\n            return true;\n        });\n\n        sender.run(time.milliseconds()); \r\n        assertTrue(transactionManager.hasFatalError());\n        assertTrue(transactionManager.lastError() instanceof UnsupportedVersionException);\n    }\n","date":"2018-12-03 13:32:05","endLine":706,"groupId":"1264","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnsupportedInitTransactions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/f5caedcb243a11d42eccbf12847674a14e07fd.src","preCode":"    public void testUnsupportedInitTransactions() {\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds()); \r\n        sender.run(time.milliseconds()); \r\n\n        assertFalse(transactionManager.hasError());\n        assertNotNull(transactionManager.coordinator(CoordinatorType.TRANSACTION));\n\n        client.prepareUnsupportedVersionResponse(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                InitProducerIdRequest initProducerIdRequest = (InitProducerIdRequest) body;\n                assertEquals(initProducerIdRequest.transactionalId(), transactionalId);\n                assertEquals(initProducerIdRequest.transactionTimeoutMs(), transactionTimeoutMs);\n                return true;\n            }\n        });\n\n        sender.run(time.milliseconds()); \r\n        assertTrue(transactionManager.hasFatalError());\n        assertTrue(transactionManager.lastError() instanceof UnsupportedVersionException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":687,"status":"M"}],"commitId":"c4822648ef1bb0cd6825d8dbe465c8a5a26a76bc","commitMessage":"@@@MINOR: hygene cleanup in TransactionManagerTest (#5951)\n\n\nReviewers: Andras Katona <41361962+akatona84@users.noreply.github.com>.  Manikumar Reddy <manikumar.reddy@gmail.com>","date":"2018-12-03 13:32:05","modifiedFileCount":"1","status":"M","submitter":"Viktor Somogyi"},{"authorTime":"2019-04-11 23:27:08","codes":[{"authorDate":"2017-05-25 06:26:46","commitOrder":6,"curCode":"    public void testDisconnectAndRetry() {\n        \r\n        \r\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, true, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds());  \r\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds());  \r\n        sender.run(time.milliseconds());\n        assertEquals(brokerNode, transactionManager.coordinator(CoordinatorType.TRANSACTION));\n    }\n","date":"2017-05-25 06:26:46","endLine":232,"groupId":"3553","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisconnectAndRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/363d054e54b5c24d0ce06c965bc584cc9e64d2.src","preCode":"    public void testDisconnectAndRetry() {\n        \r\n        \r\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, true, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds());  \r\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds());  \r\n        sender.run(time.milliseconds());\n        assertEquals(brokerNode, transactionManager.coordinator(CoordinatorType.TRANSACTION));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"},{"authorDate":"2019-04-11 23:27:08","commitOrder":6,"curCode":"    public void testUnsupportedInitTransactions() {\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds()); \r\n        sender.run(time.milliseconds()); \r\n\n        assertFalse(transactionManager.hasError());\n        assertNotNull(transactionManager.coordinator(CoordinatorType.TRANSACTION));\n\n        client.prepareUnsupportedVersionResponse(body -> {\n            InitProducerIdRequest initProducerIdRequest = (InitProducerIdRequest) body;\n            assertEquals(initProducerIdRequest.data.transactionalId(), transactionalId);\n            assertEquals(initProducerIdRequest.data.transactionTimeoutMs(), transactionTimeoutMs);\n            return true;\n        });\n\n        sender.run(time.milliseconds()); \r\n        assertTrue(transactionManager.hasFatalError());\n        assertTrue(transactionManager.lastError() instanceof UnsupportedVersionException);\n    }\n","date":"2019-04-11 23:27:08","endLine":715,"groupId":"10117","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnsupportedInitTransactions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1c/47b9d344cf2a5301c5ebadf9da1e733ef43221.src","preCode":"    public void testUnsupportedInitTransactions() {\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds()); \r\n        sender.run(time.milliseconds()); \r\n\n        assertFalse(transactionManager.hasError());\n        assertNotNull(transactionManager.coordinator(CoordinatorType.TRANSACTION));\n\n        client.prepareUnsupportedVersionResponse(body -> {\n            InitProducerIdRequest initProducerIdRequest = (InitProducerIdRequest) body;\n            assertEquals(initProducerIdRequest.transactionalId(), transactionalId);\n            assertEquals(initProducerIdRequest.transactionTimeoutMs(), transactionTimeoutMs);\n            return true;\n        });\n\n        sender.run(time.milliseconds()); \r\n        assertTrue(transactionManager.hasFatalError());\n        assertTrue(transactionManager.lastError() instanceof UnsupportedVersionException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":696,"status":"M"}],"commitId":"53e95ffcdb1cecbba67eb726aa2abcab3ae49c66","commitMessage":"@@@MINOR: Use generated InitProducerId RPC (#6538)\n\nThis patch updates the InitProducerId request API to use the generated sources. It also fixes a small bug in the DescribeAclsRequest class where we were using the wrong api key.\n\nReviewers: Mickael Maison <mickael.maison@gmail.com>.  Colin McCabe <cmccabe@apache.org>","date":"2019-04-11 23:27:08","modifiedFileCount":"12","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2019-05-03 00:29:22","codes":[{"authorDate":"2019-05-03 00:29:22","commitOrder":7,"curCode":"    public void testDisconnectAndRetry() {\n        \r\n        \r\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, true, CoordinatorType.TRANSACTION, transactionalId);\n        sender.runOnce();  \r\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.runOnce();  \r\n        sender.runOnce();\n        assertEquals(brokerNode, transactionManager.coordinator(CoordinatorType.TRANSACTION));\n    }\n","date":"2019-05-03 00:29:22","endLine":683,"groupId":"14795","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisconnectAndRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2d/3487f5126ba73f89ee4e5ccd503ab16bff3efa.src","preCode":"    public void testDisconnectAndRetry() {\n        \r\n        \r\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, true, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds());  \r\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds());  \r\n        sender.run(time.milliseconds());\n        assertEquals(brokerNode, transactionManager.coordinator(CoordinatorType.TRANSACTION));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":672,"status":"M"},{"authorDate":"2019-05-03 00:29:22","commitOrder":7,"curCode":"    public void testUnsupportedInitTransactions() {\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.runOnce(); \r\n        sender.runOnce(); \r\n\n        assertFalse(transactionManager.hasError());\n        assertNotNull(transactionManager.coordinator(CoordinatorType.TRANSACTION));\n\n        client.prepareUnsupportedVersionResponse(body -> {\n            InitProducerIdRequest initProducerIdRequest = (InitProducerIdRequest) body;\n            assertEquals(initProducerIdRequest.data.transactionalId(), transactionalId);\n            assertEquals(initProducerIdRequest.data.transactionTimeoutMs(), transactionTimeoutMs);\n            return true;\n        });\n\n        sender.runOnce(); \r\n        assertTrue(transactionManager.hasFatalError());\n        assertTrue(transactionManager.lastError() instanceof UnsupportedVersionException);\n    }\n","date":"2019-05-03 00:29:22","endLine":721,"groupId":"10616","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnsupportedInitTransactions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2d/3487f5126ba73f89ee4e5ccd503ab16bff3efa.src","preCode":"    public void testUnsupportedInitTransactions() {\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.run(time.milliseconds()); \r\n        sender.run(time.milliseconds()); \r\n\n        assertFalse(transactionManager.hasError());\n        assertNotNull(transactionManager.coordinator(CoordinatorType.TRANSACTION));\n\n        client.prepareUnsupportedVersionResponse(body -> {\n            InitProducerIdRequest initProducerIdRequest = (InitProducerIdRequest) body;\n            assertEquals(initProducerIdRequest.data.transactionalId(), transactionalId);\n            assertEquals(initProducerIdRequest.data.transactionTimeoutMs(), transactionTimeoutMs);\n            return true;\n        });\n\n        sender.run(time.milliseconds()); \r\n        assertTrue(transactionManager.hasFatalError());\n        assertTrue(transactionManager.lastError() instanceof UnsupportedVersionException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":702,"status":"M"}],"commitId":"c34330c5481803c91705cbfcc499021360ff7fdc","commitMessage":"@@@KAFKA-8248; Ensure time updated before sending transactional request (#6613)\n\nThis patch fixes a bug in the sending of transactional requests. We need to call `KafkaClient.send` with an updated current time. Failing to do so can result in an `IllegalStateExcepton` which leaves the producer effectively dead since the in-flight correlation id has been set.  but no request has been sent. To avoid the same problem in the future.  we update the in flight correlationId only after sending the request.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Apurva Mehta <apurva@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-03 00:29:22","modifiedFileCount":"7","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2020-01-24 00:14:31","codes":[{"authorDate":"2020-01-24 00:14:31","commitOrder":8,"curCode":"    public void testDisconnectAndRetry() {\n        \r\n        \r\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, true, CoordinatorType.TRANSACTION, transactionalId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.TRANSACTION) == null);\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.TRANSACTION) != null);\n        assertEquals(brokerNode, transactionManager.coordinator(CoordinatorType.TRANSACTION));\n    }\n","date":"2020-01-24 00:14:31","endLine":860,"groupId":"13035","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisconnectAndRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a3/4f50d3d2f8f17311f972c1c07372c89ad77d90.src","preCode":"    public void testDisconnectAndRetry() {\n        \r\n        \r\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, true, CoordinatorType.TRANSACTION, transactionalId);\n        sender.runOnce();  \r\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.runOnce();  \r\n        sender.runOnce();\n        assertEquals(brokerNode, transactionManager.coordinator(CoordinatorType.TRANSACTION));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":850,"status":"M"},{"authorDate":"2020-01-24 00:14:31","commitOrder":8,"curCode":"    public void testUnsupportedInitTransactions() {\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.TRANSACTION) != null);\n        assertFalse(transactionManager.hasError());\n\n        client.prepareUnsupportedVersionResponse(body -> {\n            InitProducerIdRequest initProducerIdRequest = (InitProducerIdRequest) body;\n            assertEquals(initProducerIdRequest.data.transactionalId(), transactionalId);\n            assertEquals(initProducerIdRequest.data.transactionTimeoutMs(), transactionTimeoutMs);\n            return true;\n        });\n\n        runUntil(transactionManager::hasFatalError);\n        assertTrue(transactionManager.hasFatalError());\n        assertTrue(transactionManager.lastError() instanceof UnsupportedVersionException);\n    }\n","date":"2020-01-24 00:14:31","endLine":903,"groupId":"3236","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnsupportedInitTransactions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a3/4f50d3d2f8f17311f972c1c07372c89ad77d90.src","preCode":"    public void testUnsupportedInitTransactions() {\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        sender.runOnce(); \r\n        sender.runOnce(); \r\n\n        assertFalse(transactionManager.hasError());\n        assertNotNull(transactionManager.coordinator(CoordinatorType.TRANSACTION));\n\n        client.prepareUnsupportedVersionResponse(body -> {\n            InitProducerIdRequest initProducerIdRequest = (InitProducerIdRequest) body;\n            assertEquals(initProducerIdRequest.data.transactionalId(), transactionalId);\n            assertEquals(initProducerIdRequest.data.transactionTimeoutMs(), transactionTimeoutMs);\n            return true;\n        });\n\n        sender.runOnce(); \r\n        assertTrue(transactionManager.hasFatalError());\n        assertTrue(transactionManager.lastError() instanceof UnsupportedVersionException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":887,"status":"M"}],"commitId":"df13fc93d0aebfe0ecc40dd4af3c5fb19b35f710","commitMessage":"@@@KAFKA-7737; Use single path in producer for initializing the producerId (#7920)\n\nPreviously the idempotent producer and transactional producer use separate logic when initializing the producerId. This patch consolidates the two paths. We also do some cleanup in `TransactionManagerTest` to eliminate brittle expectations on `Sender`.\n\nReviewers: Bob Barrett <bob.barrett@confluent.io>.  Viktor Somogyi <viktorsomogyi@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-01-24 00:14:31","modifiedFileCount":"6","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2020-12-15 21:33:36","codes":[{"authorDate":"2020-01-24 00:14:31","commitOrder":9,"curCode":"    public void testDisconnectAndRetry() {\n        \r\n        \r\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, true, CoordinatorType.TRANSACTION, transactionalId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.TRANSACTION) == null);\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.TRANSACTION) != null);\n        assertEquals(brokerNode, transactionManager.coordinator(CoordinatorType.TRANSACTION));\n    }\n","date":"2020-01-24 00:14:31","endLine":860,"groupId":"103649","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testDisconnectAndRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a3/4f50d3d2f8f17311f972c1c07372c89ad77d90.src","preCode":"    public void testDisconnectAndRetry() {\n        \r\n        \r\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, true, CoordinatorType.TRANSACTION, transactionalId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.TRANSACTION) == null);\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.TRANSACTION) != null);\n        assertEquals(brokerNode, transactionManager.coordinator(CoordinatorType.TRANSACTION));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":850,"status":"N"},{"authorDate":"2020-12-15 21:33:36","commitOrder":9,"curCode":"    public void testUnsupportedInitTransactions() {\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.TRANSACTION) != null);\n        assertFalse(transactionManager.hasError());\n\n        client.prepareUnsupportedVersionResponse(body -> {\n            InitProducerIdRequest initProducerIdRequest = (InitProducerIdRequest) body;\n            assertEquals(initProducerIdRequest.data().transactionalId(), transactionalId);\n            assertEquals(initProducerIdRequest.data().transactionTimeoutMs(), transactionTimeoutMs);\n            return true;\n        });\n\n        runUntil(transactionManager::hasFatalError);\n        assertTrue(transactionManager.hasFatalError());\n        assertTrue(transactionManager.lastError() instanceof UnsupportedVersionException);\n    }\n","date":"2020-12-15 21:33:36","endLine":850,"groupId":"103649","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnsupportedInitTransactions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/977ea9f66d10a83c4bd8800a036e7e6968a0cd.src","preCode":"    public void testUnsupportedInitTransactions() {\n        transactionManager.initializeTransactions();\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.TRANSACTION, transactionalId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.TRANSACTION) != null);\n        assertFalse(transactionManager.hasError());\n\n        client.prepareUnsupportedVersionResponse(body -> {\n            InitProducerIdRequest initProducerIdRequest = (InitProducerIdRequest) body;\n            assertEquals(initProducerIdRequest.data.transactionalId(), transactionalId);\n            assertEquals(initProducerIdRequest.data.transactionTimeoutMs(), transactionTimeoutMs);\n            return true;\n        });\n\n        runUntil(transactionManager::hasFatalError);\n        assertTrue(transactionManager.hasFatalError());\n        assertTrue(transactionManager.lastError() instanceof UnsupportedVersionException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":834,"status":"M"}],"commitId":"1a10c3445e157da1d2fd670c043f19c385465eb0","commitMessage":"@@@KAFKA-10525: Emit JSONs with new auto-generated schema (KIP-673) (#9526)\n\nThis patch updates the request logger to output request and response payloads in JSON. Payloads are converted to JSON based on their auto-generated schema.\n\nReviewers:  Lucas Bradstreet <lucas@confluent.io>.  David Mao <dmao@confluent.io>.  David Jacot <djacot@confluent.io>\n","date":"2020-12-15 21:33:36","modifiedFileCount":"124","status":"M","submitter":"Anastasia Vela"}]
