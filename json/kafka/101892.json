[{"authorTime":"2020-04-04 10:17:57","codes":[{"authorDate":"2020-04-04 10:17:57","commitOrder":1,"curCode":"    public void shouldFailIfStreamsConfigIsNull() {\n        final NullPointerException thrown = assertThrows(\n            NullPointerException.class,\n            () -> new StreamsProducer(\n                null,\n                \"threadId\",\n                mockClientSupplier,\n                new TaskId(0, 0),\n                UUID.randomUUID(),\n                logContext)\n        );\n\n        assertThat(thrown.getMessage(), is(\"config cannot be null\"));\n    }\n","date":"2020-04-04 10:17:57","endLine":256,"groupId":"5137","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldFailIfStreamsConfigIsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/12/779d4ea1ddf85cd39aebcc73bb505b337e1a40.src","preCode":"    public void shouldFailIfStreamsConfigIsNull() {\n        final NullPointerException thrown = assertThrows(\n            NullPointerException.class,\n            () -> new StreamsProducer(\n                null,\n                \"threadId\",\n                mockClientSupplier,\n                new TaskId(0, 0),\n                UUID.randomUUID(),\n                logContext)\n        );\n\n        assertThat(thrown.getMessage(), is(\"config cannot be null\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"B"},{"authorDate":"2020-04-04 10:17:57","commitOrder":1,"curCode":"    public void shouldFailIfClientSupplierIsNull() {\n        final NullPointerException thrown = assertThrows(\n            NullPointerException.class,\n            () -> new StreamsProducer(\n                nonEosConfig,\n                \"threadId\",\n                null,\n                new TaskId(0, 0),\n                UUID.randomUUID(),\n                logContext)\n        );\n\n        assertThat(thrown.getMessage(), is(\"clientSupplier cannot be null\"));\n    }\n","date":"2020-04-04 10:17:57","endLine":288,"groupId":"12920","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFailIfClientSupplierIsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/12/779d4ea1ddf85cd39aebcc73bb505b337e1a40.src","preCode":"    public void shouldFailIfClientSupplierIsNull() {\n        final NullPointerException thrown = assertThrows(\n            NullPointerException.class,\n            () -> new StreamsProducer(\n                nonEosConfig,\n                \"threadId\",\n                null,\n                new TaskId(0, 0),\n                UUID.randomUUID(),\n                logContext)\n        );\n\n        assertThat(thrown.getMessage(), is(\"clientSupplier cannot be null\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"B"}],"commitId":"ab5e4f52ecb072df55c7f5cd8941122a135cdf79","commitMessage":"@@@MINOR: Refactor StreamsProducer (#8380)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Andrew Choi <a24choi@edu.uwaterloo.ca>","date":"2020-04-04 10:17:57","modifiedFileCount":"15","status":"B","submitter":"Matthias J. Sax"},{"authorTime":"2021-08-31 06:39:25","codes":[{"authorDate":"2021-08-31 06:39:25","commitOrder":2,"curCode":"    public void shouldFailIfStreamsConfigIsNull() {\n        final NullPointerException thrown = assertThrows(\n            NullPointerException.class,\n            () -> new StreamsProducer(\n                null,\n                \"threadId\",\n                mockClientSupplier,\n                new TaskId(0, 0),\n                UUID.randomUUID(),\n                logContext,\n                mockTime)\n        );\n\n        assertThat(thrown.getMessage(), is(\"config cannot be null\"));\n    }\n","date":"2021-08-31 06:39:25","endLine":278,"groupId":"101892","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldFailIfStreamsConfigIsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/074bf89515edf3277d827680b8572acfa0cc05.src","preCode":"    public void shouldFailIfStreamsConfigIsNull() {\n        final NullPointerException thrown = assertThrows(\n            NullPointerException.class,\n            () -> new StreamsProducer(\n                null,\n                \"threadId\",\n                mockClientSupplier,\n                new TaskId(0, 0),\n                UUID.randomUUID(),\n                logContext)\n        );\n\n        assertThat(thrown.getMessage(), is(\"config cannot be null\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":264,"status":"M"},{"authorDate":"2021-08-31 06:39:25","commitOrder":2,"curCode":"    public void shouldFailIfClientSupplierIsNull() {\n        final NullPointerException thrown = assertThrows(\n            NullPointerException.class,\n            () -> new StreamsProducer(\n                nonEosConfig,\n                \"threadId\",\n                null,\n                new TaskId(0, 0),\n                UUID.randomUUID(),\n                logContext,\n                mockTime)\n        );\n\n        assertThat(thrown.getMessage(), is(\"clientSupplier cannot be null\"));\n    }\n","date":"2021-08-31 06:39:25","endLine":312,"groupId":"101892","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldFailIfClientSupplierIsNull","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/074bf89515edf3277d827680b8572acfa0cc05.src","preCode":"    public void shouldFailIfClientSupplierIsNull() {\n        final NullPointerException thrown = assertThrows(\n            NullPointerException.class,\n            () -> new StreamsProducer(\n                nonEosConfig,\n                \"threadId\",\n                null,\n                new TaskId(0, 0),\n                UUID.randomUUID(),\n                logContext)\n        );\n\n        assertThat(thrown.getMessage(), is(\"clientSupplier cannot be null\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsProducerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"}],"commitId":"01ab888dbd08ccd4b0de9333d21581ce24fe2c3b","commitMessage":"@@@KAFKA-13229: add total blocked time metric to streams (KIP-761) (#11149)\n\n* Add the following producer metrics:\nflush-time-total: cumulative sum of time elapsed during in flush.\ntxn-init-time-total: cumulative sum of time elapsed during in initTransactions.\ntxn-begin-time-total: cumulative sum of time elapsed during in beginTransaction.\ntxn-send-offsets-time-total: cumulative sum of time elapsed during in sendOffsetsToTransaction.\ntxn-commit-time-total: cumulative sum of time elapsed during in commitTransaction.\ntxn-abort-time-total: cumulative sum of time elapsed during in abortTransaction.\n\n* Add the following consumer metrics:\ncommited-time-total: cumulative sum of time elapsed during in committed.\ncommit-sync-time-total: cumulative sum of time elapsed during in commitSync.\n\n* Add a total-blocked-time metric to streams that is the sum of:\nconsumer?s io-waittime-total\nconsumer?s iotime-total\nconsumer?s committed-time-total\nconsumer?s commit-sync-time-total\nrestore consumer?s io-waittime-total\nrestore consumer?s iotime-total\nadmin client?s io-waittime-total\nadmin client?s iotime-total\nproducer?s bufferpool-wait-time-total\nproducer's flush-time-total\nproducer's txn-init-time-total\nproducer's txn-begin-time-total\nproducer's txn-send-offsets-time-total\nproducer's txn-commit-time-total\nproducer's txn-abort-time-total\n\nReviewers: Bruno Cadonna <cadonna@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-08-31 06:39:25","modifiedFileCount":"23","status":"M","submitter":"Rohan"}]
