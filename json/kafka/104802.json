[{"authorTime":"2019-05-17 11:46:04","codes":[{"authorDate":"2019-05-17 11:46:04","commitOrder":1,"curCode":"    public void testTaskAssignmentWhenWorkerLeavesPermanently() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2 + 1);\n\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(1, 4, 0, 0, \"worker1\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n    }\n","date":"2019-05-17 11:46:03","endLine":218,"groupId":"22518","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskAssignmentWhenWorkerLeavesPermanently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/ccefdf52c445d6e5109150e98cf9af345d13b4.src","preCode":"    public void testTaskAssignmentWhenWorkerLeavesPermanently() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2 + 1);\n\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(1, 4, 0, 0, \"worker1\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"B"},{"authorDate":"2019-05-17 11:46:04","commitOrder":1,"curCode":"    public void testTaskAssignmentWhenWorkerBounces() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 4, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\", \"worker2\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(1, 4, 0, 0, \"worker1\", \"worker2\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n    }\n","date":"2019-05-17 11:46:03","endLine":293,"groupId":"22518","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTaskAssignmentWhenWorkerBounces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/ccefdf52c445d6e5109150e98cf9af345d13b4.src","preCode":"    public void testTaskAssignmentWhenWorkerBounces() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 4, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\", \"worker2\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(1, 4, 0, 0, \"worker1\", \"worker2\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"B"}],"commitId":"ce584a01fff4e73afa96d38c9a7508fcd67e3e46","commitMessage":"@@@KAFKA-5505: Incremental cooperative rebalancing in Connect (KIP-415) (#6363)\n\nAdded the incremental cooperative rebalancing in Connect to avoid global rebalances on all connectors and tasks with each new/changed/removed connector. This new protocol is backward compatible and will work with heterogeneous clusters that exist during a rolling upgrade.  but once the clusters consist of new workers only some affected connectors and tasks will be rebalanced: connectors and tasks on existing nodes still in the cluster and not added/changed/removed will continue running while the affected connectors and tasks are rebalanced.\n\nThis commit attempted to minimize the changes to the existing V0 protocol logic.  though that was not entirely possible.\n\nThis commit adds extensive unit and integration tests for both the old V0 protocol and the new v1 protocol. Soak testing has been performed multiple times to verify behavior while connectors and added.  changed.  and removed and while workers are added and removed from the cluster.\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <me@ewencp.org>.  Robert Yokota <rayokota@gmail.com>.  David Arthur <mumrah@gmail.com>.  Ryanne Dolan <ryannedolan@gmail.com>","date":"2019-05-17 11:46:03","modifiedFileCount":"9","status":"B","submitter":"Konstantine Karantasis"},{"authorTime":"2019-06-03 01:19:19","codes":[{"authorDate":"2019-06-03 01:19:19","commitOrder":2,"curCode":"    public void testTaskAssignmentWhenWorkerLeavesPermanently() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2 + 1);\n\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(1, 4, 0, 0, \"worker1\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n    }\n","date":"2019-06-03 01:19:19","endLine":226,"groupId":"13266","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskAssignmentWhenWorkerLeavesPermanently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/70/85a7f15d429354a5a89f51517d0a38e642f737.src","preCode":"    public void testTaskAssignmentWhenWorkerLeavesPermanently() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2 + 1);\n\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(1, 4, 0, 0, \"worker1\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2019-06-03 01:19:19","commitOrder":2,"curCode":"    public void testTaskAssignmentWhenWorkerBounces() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 4, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\", \"worker2\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(1, 4, 0, 0, \"worker1\", \"worker2\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n    }\n","date":"2019-06-03 01:19:19","endLine":306,"groupId":"13266","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTaskAssignmentWhenWorkerBounces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/70/85a7f15d429354a5a89f51517d0a38e642f737.src","preCode":"    public void testTaskAssignmentWhenWorkerBounces() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 4, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(0, 0, 0, 0, \"worker1\", \"worker2\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertAssignment(1, 4, 0, 0, \"worker1\", \"worker2\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"17345b3be527a3e4808440fceb1179a1b9f9e684","commitMessage":"@@@KAFKA-8463: Fix redundant reassignment of tasks when leader worker leaves (#6859)\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\nReviewer: Randall Hauch <rhauch@gmail.com>","date":"2019-06-03 01:19:19","modifiedFileCount":"2","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2019-10-03 06:06:57","codes":[{"authorDate":"2019-10-03 06:06:57","commitOrder":3,"curCode":"    public void testTaskAssignmentWhenWorkerLeavesPermanently() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2 + 1);\n\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(1, 4, 0, 0, \"worker1\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n    }\n","date":"2019-10-03 06:06:57","endLine":237,"groupId":"22718","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskAssignmentWhenWorkerLeavesPermanently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c4/6d59bf8058ab705c84dae3e1a9b841ac8fcc6e.src","preCode":"    public void testTaskAssignmentWhenWorkerLeavesPermanently() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2 + 1);\n\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(1, 4, 0, 0, \"worker1\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"M"},{"authorDate":"2019-10-03 06:06:57","commitOrder":3,"curCode":"    public void testTaskAssignmentWhenWorkerBounces() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 4, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\", \"worker2\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(1, 4, 0, 0, \"worker1\", \"worker2\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n    }\n","date":"2019-10-03 06:06:57","endLine":317,"groupId":"22716","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTaskAssignmentWhenWorkerBounces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c4/6d59bf8058ab705c84dae3e1a9b841ac8fcc6e.src","preCode":"    public void testTaskAssignmentWhenWorkerBounces() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 4, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\", \"worker2\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(1, 4, 0, 0, \"worker1\", \"worker2\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"}],"commitId":"791d0d61bf5a2b7a4fda72d4c50075a1933a6af3","commitMessage":"@@@KAFKA-8804: Secure internal Connect REST endpoints (#7310)\n\nImplemented KIP-507 to secure the internal Connect REST endpoints that are only for intra-cluster communication. A new V2 of the Connect subprotocol enables this feature.  where the leader generates a new session key.  shares it with the other workers via the configuration topic.  and workers send and validate requests to these internal endpoints using the shared key.\n\nCurrently the internal `POST /connectors/<connector>/tasks` endpoint is the only one that is secured.\n\nThis change adds unit tests and makes some small alterations to system tests to target the new `sessioned` Connect subprotocol. A new integration test ensures that the endpoint is actually secured (i.e..  requests with missing/invalid signatures are rejected with a 400 BAD RESPONSE status).\n\nAuthor: Chris Egerton <chrise@confluent.io>\nReviewed: Konstantine Karantasis <konstantine@confluent.io>.  Randall Hauch <rhauch@gmail.com>","date":"2019-10-03 06:06:57","modifiedFileCount":"28","status":"M","submitter":"Chris Egerton"},{"authorTime":"2019-12-05 07:27:52","codes":[{"authorDate":"2019-12-05 07:27:52","commitOrder":4,"curCode":"    public void testTaskAssignmentWhenWorkerLeavesPermanently() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2 + 1);\n\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(1, 4, 0, 0, \"worker1\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n        verify(coordinator, times(rebalanceNum)).generationId();\n        verify(coordinator, times(rebalanceNum)).memberId();\n    }\n","date":"2019-12-05 07:27:51","endLine":241,"groupId":"22718","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskAssignmentWhenWorkerLeavesPermanently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a5/e4ef0ca1beac228a67d3a03709246ca65c6f7d.src","preCode":"    public void testTaskAssignmentWhenWorkerLeavesPermanently() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2 + 1);\n\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(1, 4, 0, 0, \"worker1\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"M"},{"authorDate":"2019-12-05 07:27:52","commitOrder":4,"curCode":"    public void testTaskAssignmentWhenWorkerBounces() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 4, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\", \"worker2\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(1, 4, 0, 0, \"worker1\", \"worker2\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n        verify(coordinator, times(rebalanceNum)).generationId();\n        verify(coordinator, times(rebalanceNum)).memberId();\n    }\n","date":"2019-12-05 07:27:51","endLine":323,"groupId":"22716","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTaskAssignmentWhenWorkerBounces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a5/e4ef0ca1beac228a67d3a03709246ca65c6f7d.src","preCode":"    public void testTaskAssignmentWhenWorkerBounces() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 4, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\", \"worker2\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(1, 4, 0, 0, \"worker1\", \"worker2\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"}],"commitId":"0e57a3924ee73529e79790c1e7a70c74911777da","commitMessage":"@@@KAFKA-9184: Redundant task creation and periodic rebalances after zombie Connect worker rejoins the group (#7771)\n\nCheck connectivity with broker coordinator in intervals and stop tasks if coordinator is unreachable by setting `assignmentSnapshot` to null and resetting rebalance delay when there are no lost tasks. And.  because we're now sometimes setting `assignmentSnapshot` to null and reading it from other methods and thread.  made this member volatile and used local references to ensure consistent reads.\n\nAdapted existing unit tests to verify additional debug calls.  added more specific log messages to `DistributedHerder`.  and added a new integration test that verifies the behavior when the brokers are stopped and restarted only after the workers lose their heartbeats with the broker coordinator.\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\nReviewers: Greg Harris <gregh@confluent.io>.  Randall Hauch <rhauch@gmail.com>","date":"2019-12-05 07:27:51","modifiedFileCount":"7","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2020-06-10 00:41:11","codes":[{"authorDate":"2020-06-10 00:41:11","commitOrder":5,"curCode":"    public void testTaskAssignmentWhenWorkerLeavesPermanently() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        expectGeneration();\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        expectGeneration();\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        expectGeneration();\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2 + 1);\n\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        expectGeneration();\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(1, 4, 0, 0, \"worker1\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n        verify(coordinator, times(2 * rebalanceNum)).generationId();\n        verify(coordinator, times(rebalanceNum)).memberId();\n        verify(coordinator, times(rebalanceNum)).lastCompletedGenerationId();\n    }\n","date":"2020-06-10 00:41:11","endLine":252,"groupId":"104802","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTaskAssignmentWhenWorkerLeavesPermanently","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/72ce9913df5300c4cb442eda7946159599e989.src","preCode":"    public void testTaskAssignmentWhenWorkerLeavesPermanently() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2 + 1);\n\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(1, 4, 0, 0, \"worker1\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n        verify(coordinator, times(rebalanceNum)).generationId();\n        verify(coordinator, times(rebalanceNum)).memberId();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2020-06-10 00:41:11","commitOrder":5,"curCode":"    public void testTaskAssignmentWhenWorkerBounces() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        expectGeneration();\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        expectGeneration();\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        expectGeneration();\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        expectGeneration();\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 4, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\", \"worker2\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        expectGeneration();\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(1, 4, 0, 0, \"worker1\", \"worker2\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n        verify(coordinator, times(2 * rebalanceNum)).generationId();\n        verify(coordinator, times(rebalanceNum)).memberId();\n        verify(coordinator, times(rebalanceNum)).lastCompletedGenerationId();\n    }\n","date":"2020-06-10 00:41:11","endLine":340,"groupId":"104802","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testTaskAssignmentWhenWorkerBounces","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/72ce9913df5300c4cb442eda7946159599e989.src","preCode":"    public void testTaskAssignmentWhenWorkerBounces() {\n        \r\n        time = new MockTime();\n        initAssignor();\n\n        when(coordinator.configSnapshot()).thenReturn(configState);\n        doReturn(Collections.EMPTY_MAP).when(assignor).serializeAssignments(assignmentsCapture.capture());\n\n        \r\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(2, 8, 0, 0, \"worker1\", \"worker2\");\n\n        \r\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        assignments.remove(\"worker2\");\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 2);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 2, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        memberConfigs.put(\"worker2\", new ExtendedWorkerState(leaderUrl, offset, null));\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(rebalanceDelay / 4, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(0, 0, 0, 0, \"worker1\", \"worker2\");\n\n        time.sleep(rebalanceDelay / 4);\n\n        \r\n        \r\n        applyAssignments(returnedAssignments);\n        memberConfigs = memberConfigs(leader, offset, assignments);\n        assignor.performTaskAssignment(leader, offset, memberConfigs, coordinator, protocolVersion);\n        ++rebalanceNum;\n        returnedAssignments = assignmentsCapture.getValue();\n        assertDelay(0, returnedAssignments);\n        expectedMemberConfigs = memberConfigs(leader, offset, returnedAssignments);\n        assertNoReassignments(memberConfigs, expectedMemberConfigs);\n        assertAssignment(1, 4, 0, 0, \"worker1\", \"worker2\");\n\n        verify(coordinator, times(rebalanceNum)).configSnapshot();\n        verify(coordinator, times(rebalanceNum)).leaderState(any());\n        verify(coordinator, times(rebalanceNum)).generationId();\n        verify(coordinator, times(rebalanceNum)).memberId();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":255,"status":"M"}],"commitId":"09b22e7e67e3ddfa319b723e00105fb0af2bd48b","commitMessage":"@@@KAFKA-9848: Avoid triggering scheduled rebalance delay when task assignment fails but Connect workers remain in the group (#8805)\n\nIn the first version of the incremental cooperative protocol.  in the presence of a failed sync request by the leader.  the assignor was designed to treat the unapplied assignments as lost and trigger a rebalance delay. \n\nThis commit applies optimizations in these cases to avoid the unnecessary activation of the rebalancing delay. First.  if the worker that loses the sync group request or response is the leader.  then it detects this failure by checking the what is the expected generation when it performs task assignments. If it's not the expected one.  it resets its view of the previous assignment because it wasn't successfully applied and it doesn't represent a correct state. Furthermore.  if the worker that has missed the assignment sync is an ordinary worker.  then the leader is able to detect that there are lost assignments and instead of triggering a rebalance delay among the same members of the group.  it treats the lost tasks as new tasks and reassigns them immediately. If the lost assignment included revocations that were not applied.  the leader reapplies these revocations again. \n\nExisting unit tests and integration tests are adapted to test the proposed optimizations. \n\nReviewers: Randall Hauch <rhauch@gmail.com>","date":"2020-06-10 00:41:11","modifiedFileCount":"8","status":"M","submitter":"Konstantine Karantasis"}]
