[{"authorTime":"2020-04-11 02:55:01","codes":[{"authorDate":"2020-07-03 07:14:46","commitOrder":13,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2020-07-03 07:14:46","endLine":97,"groupId":"2366","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/c7d5d82ebffad25ae604c227439341ce6f7e56.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"},{"authorDate":"2020-04-11 02:55:01","commitOrder":13,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE_BETA.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \", \" +\n                    StreamsConfig.EXACTLY_ONCE + \", or \" + StreamsConfig.EXACTLY_ONCE_BETA);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            case \"close-deadlock-test\":\n                final ShutdownDeadlockTest test = new ShutdownDeadlockTest(kafka);\n                test.start();\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2020-04-11 02:55:01","endLine":102,"groupId":"2366","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/3fb7d890951df28ba0645d810195fe22b057a9.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE_BETA.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \", \" +\n                    StreamsConfig.EXACTLY_ONCE + \", or \" + StreamsConfig.EXACTLY_ONCE_BETA);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            case \"close-deadlock-test\":\n                final ShutdownDeadlockTest test = new ShutdownDeadlockTest(kafka);\n                test.start();\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"NB"}],"commitId":"3b2ae7b95a27176a22e5356160a9df468c483778","commitMessage":"@@@KAFKA-10173: Use SmokeTest for upgrade system tests (#8938)\n\nReplaces the previous upgrade test's trivial Streams app\nwith the commonly used SmokeTest.  exercising many more\nfeatures. Also adjust the test matrix to test upgrading\nfrom each released version since 2.2 to the current branch.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-07-03 07:14:46","modifiedFileCount":"3","status":"M","submitter":"John Roesler"},{"authorTime":"2020-08-06 04:52:50","codes":[{"authorDate":"2020-08-06 04:52:50","commitOrder":14,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            Exit.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            Exit.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                Exit.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2020-08-06 04:52:50","endLine":98,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f2/80eb072182399e2836eebed6a23864c97eccfe.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2020-08-06 04:52:50","commitOrder":14,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            Exit.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            Exit.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE_BETA.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \", \" +\n                    StreamsConfig.EXACTLY_ONCE + \", or \" + StreamsConfig.EXACTLY_ONCE_BETA);\n\n                Exit.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            case \"close-deadlock-test\":\n                final ShutdownDeadlockTest test = new ShutdownDeadlockTest(kafka);\n                test.start();\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2020-08-06 04:52:50","endLine":103,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/425c50739309ec241f4d03d1bd506751561aad.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            System.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            System.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE_BETA.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \", \" +\n                    StreamsConfig.EXACTLY_ONCE + \", or \" + StreamsConfig.EXACTLY_ONCE_BETA);\n\n                System.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            case \"close-deadlock-test\":\n                final ShutdownDeadlockTest test = new ShutdownDeadlockTest(kafka);\n                test.start();\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"}],"commitId":"26a217c8e75b238bbba5f1799b7d91b5b4910123","commitMessage":"@@@MINOR: Streams integration tests should not call exit (#9067)\n\n- replace System.exit with Exit.exit in all relevant classes\n- forbid use of System.exit in all relevant classes and add exceptions for others\n\nCo-authored-by: John Roesler <vvcephei@apache.org>\nCo-authored-by: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Lucas Bradstreet <lucas@confluent.io>.  Ismael Juma <ismael@confluent.io>","date":"2020-08-06 04:52:50","modifiedFileCount":"14","status":"M","submitter":"John Roesler"},{"authorTime":"2021-04-29 04:22:15","codes":[{"authorDate":"2020-08-06 04:52:50","commitOrder":15,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            Exit.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            Exit.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                Exit.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2020-08-06 04:52:50","endLine":98,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f2/80eb072182399e2836eebed6a23864c97eccfe.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            Exit.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            Exit.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                Exit.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"},{"authorDate":"2021-04-29 04:22:15","commitOrder":15,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            Exit.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            Exit.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE_BETA.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE_V2.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" +\n                                       StreamsConfig.AT_LEAST_ONCE + \", \" +\n                                       StreamsConfig.EXACTLY_ONCE + \", or \" +\n                                       StreamsConfig.EXACTLY_ONCE_BETA + \", or \" +\n                                       StreamsConfig.EXACTLY_ONCE_V2);\n\n                Exit.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            case \"close-deadlock-test\":\n                final ShutdownDeadlockTest test = new ShutdownDeadlockTest(kafka);\n                test.start();\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2021-04-29 04:22:15","endLine":108,"groupId":"9039","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e2/6e0af7cbf027d3bae9941c231a713c2a0fbd58.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            Exit.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            Exit.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE_BETA.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \", \" +\n                    StreamsConfig.EXACTLY_ONCE + \", or \" + StreamsConfig.EXACTLY_ONCE_BETA);\n\n                Exit.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            case \"close-deadlock-test\":\n                final ShutdownDeadlockTest test = new ShutdownDeadlockTest(kafka);\n                test.start();\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"3805f3706f8f3ebba81b80915c9259590525fb05","commitMessage":"@@@KAFKA-12574: KIP-732.  Deprecate eos-alpha and replace eos-beta with eos-v2 (#10573)\n\nDeprecates the following \n\n1. StreamsConfig.EXACTLY_ONCE\n2. StreamsConfig.EXACTLY_ONCE_BETA\n3. Producer#sendOffsetsToTransaction(Map offsets.  String consumerGroupId)\n\nAnd introduces a new StreamsConfig.EXACTLY_ONCE_V2 config. Additionally.  this PR replaces usages of the term \"eos-beta\" throughout the code with the term \"eos-v2\"\n\nReviewers: Matthias J. Sax <mjsax@confluent.io>","date":"2021-04-29 04:22:15","modifiedFileCount":"32","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2021-08-10 03:19:35","codes":[{"authorDate":"2020-08-06 04:52:50","commitOrder":16,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            Exit.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            Exit.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                Exit.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2020-08-06 04:52:50","endLine":98,"groupId":"10255","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f2/80eb072182399e2836eebed6a23864c97eccfe.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            Exit.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            Exit.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" + StreamsConfig.AT_LEAST_ONCE + \" or \" +\n                    StreamsConfig.EXACTLY_ONCE);\n\n                Exit.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/upgrade-system-tests-25/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"},{"authorDate":"2021-08-10 03:19:35","commitOrder":16,"curCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            Exit.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            Exit.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE_BETA.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE_V2.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" +\n                                       StreamsConfig.AT_LEAST_ONCE + \", \" +\n                                       StreamsConfig.EXACTLY_ONCE + \", or \" +\n                                       StreamsConfig.EXACTLY_ONCE_BETA + \", or \" +\n                                       StreamsConfig.EXACTLY_ONCE_V2);\n\n                Exit.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 20;\n                final int maxRecordsPerKey = 1000;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(90));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            case \"close-deadlock-test\":\n                final ShutdownDeadlockTest test = new ShutdownDeadlockTest(kafka);\n                test.start();\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","date":"2021-08-10 03:19:35","endLine":108,"groupId":"10255","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"main","params":"(finalString[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d8/7da749ee9a93c312fae7ac72bf8fc3639686ac.src","preCode":"    public static void main(final String[] args) throws IOException {\n        if (args.length < 2) {\n            System.err.println(\"StreamsSmokeTest are expecting two parameters: propFile, command; but only see \" + args.length + \" parameter\");\n            Exit.exit(1);\n        }\n\n        final String propFileName = args[0];\n        final String command = args[1];\n        final boolean disableAutoTerminate = args.length > 2;\n\n        final Properties streamsProperties = Utils.loadProps(propFileName);\n        final String kafka = streamsProperties.getProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n        final String processingGuarantee = streamsProperties.getProperty(StreamsConfig.PROCESSING_GUARANTEE_CONFIG);\n\n        if (kafka == null) {\n            System.err.println(\"No bootstrap kafka servers specified in \" + StreamsConfig.BOOTSTRAP_SERVERS_CONFIG);\n            Exit.exit(1);\n        }\n\n        if (\"process\".equals(command)) {\n            if (!StreamsConfig.AT_LEAST_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE_BETA.equals(processingGuarantee) &&\n                !StreamsConfig.EXACTLY_ONCE_V2.equals(processingGuarantee)) {\n\n                System.err.println(\"processingGuarantee must be either \" +\n                                       StreamsConfig.AT_LEAST_ONCE + \", \" +\n                                       StreamsConfig.EXACTLY_ONCE + \", or \" +\n                                       StreamsConfig.EXACTLY_ONCE_BETA + \", or \" +\n                                       StreamsConfig.EXACTLY_ONCE_V2);\n\n                Exit.exit(1);\n            }\n        }\n\n        System.out.println(\"StreamsTest instance started (StreamsSmokeTest)\");\n        System.out.println(\"command=\" + command);\n        System.out.println(\"props=\" + streamsProperties);\n        System.out.println(\"disableAutoTerminate=\" + disableAutoTerminate);\n\n        switch (command) {\n            case \"run\":\n                \r\n                final int numKeys = 10;\n                final int maxRecordsPerKey = 500;\n                if (disableAutoTerminate) {\n                    generatePerpetually(kafka, numKeys, maxRecordsPerKey);\n                } else {\n                    \r\n                    \r\n                    final Map<String, Set<Integer>> allData =\n                        generate(kafka, numKeys, maxRecordsPerKey, Duration.ofSeconds(30));\n                    SmokeTestDriver.verify(kafka, allData, maxRecordsPerKey);\n                }\n                break;\n            case \"process\":\n                \r\n                new SmokeTestClient(UUID.randomUUID().toString()).start(streamsProperties);\n                break;\n            case \"close-deadlock-test\":\n                final ShutdownDeadlockTest test = new ShutdownDeadlockTest(kafka);\n                test.start();\n                break;\n            default:\n                System.out.println(\"unknown command: \" + command);\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/tests/StreamsSmokeTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"f16a9499ec3b7fa20aae66f478171ababaf0cbd4","commitMessage":"@@@MINOR: Increase smoke test production time (#11190)\n\nWe've seen a few failures recently due to the driver finishing\nthe production of data and verifying the results before the\nwhole cluster is even running.\n\nReviewers: Leah Thomas <lthomas@confluent.io>.  Walker Carlson <wcarlson@confluent.io>.  Matthias J. Sax <mjsax@apache.org>","date":"2021-08-10 03:19:35","modifiedFileCount":"1","status":"M","submitter":"John Roesler"}]
