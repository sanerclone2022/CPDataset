[{"authorTime":"2021-04-10 10:15:11","codes":[{"authorDate":"2021-04-10 10:15:11","commitOrder":1,"curCode":"    public void testGrantVotesFromHigherEpochAfterResigningLeadership() throws Exception {\n        int localId = 0;\n        int remoteId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, remoteId);\n        int epoch = 2;\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n                .updateRandom(random -> {\n                    Mockito.doReturn(0).when(random).nextInt(DEFAULT_ELECTION_TIMEOUT_MS);\n                })\n                .withElectedLeader(epoch, localId)\n                .build();\n\n        \r\n        assertTrue(context.client.quorum().isResigned());\n        assertEquals(0L, context.log.endOffset().offset);\n        context.assertElectedLeader(epoch, localId);\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, remoteId,\n                context.log.lastFetchedEpoch(), context.log.endOffset().offset));\n        context.client.poll();\n\n        \r\n        assertTrue(context.client.quorum().isVoted());\n        context.assertVotedCandidate(epoch + 1, remoteId);\n        context.assertSentVoteResponse(Errors.NONE, epoch + 1, OptionalInt.empty(), true);\n    }\n","date":"2021-04-10 10:15:11","endLine":168,"groupId":"19360","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGrantVotesFromHigherEpochAfterResigningLeadership","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/d4e16dc86e7fee30970eaeea940fbf03da06d6.src","preCode":"    public void testGrantVotesFromHigherEpochAfterResigningLeadership() throws Exception {\n        int localId = 0;\n        int remoteId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, remoteId);\n        int epoch = 2;\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n                .updateRandom(random -> {\n                    Mockito.doReturn(0).when(random).nextInt(DEFAULT_ELECTION_TIMEOUT_MS);\n                })\n                .withElectedLeader(epoch, localId)\n                .build();\n\n        \r\n        assertTrue(context.client.quorum().isResigned());\n        assertEquals(0L, context.log.endOffset().offset);\n        context.assertElectedLeader(epoch, localId);\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, remoteId,\n                context.log.lastFetchedEpoch(), context.log.endOffset().offset));\n        context.client.poll();\n\n        \r\n        assertTrue(context.client.quorum().isVoted());\n        context.assertVotedCandidate(epoch + 1, remoteId);\n        context.assertSentVoteResponse(Errors.NONE, epoch + 1, OptionalInt.empty(), true);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"},{"authorDate":"2021-04-10 10:15:11","commitOrder":1,"curCode":"    public void testInitializeAsResignedAndBecomeCandidate() throws Exception {\n        int localId = 0;\n        int remoteId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, remoteId);\n        int epoch = 2;\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n                .updateRandom(random -> {\n                    Mockito.doReturn(0).when(random).nextInt(DEFAULT_ELECTION_TIMEOUT_MS);\n                })\n                .withElectedLeader(epoch, localId)\n                .build();\n\n        \r\n        assertTrue(context.client.quorum().isResigned());\n        assertEquals(0L, context.log.endOffset().offset);\n        context.assertElectedLeader(epoch, localId);\n\n        \r\n        context.time.sleep(context.electionTimeoutMs());\n        context.client.poll();\n\n        \r\n        assertTrue(context.client.quorum().isCandidate());\n        context.assertVotedCandidate(epoch + 1, localId);\n    }\n","date":"2021-04-10 10:15:11","endLine":250,"groupId":"19360","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInitializeAsResignedAndBecomeCandidate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/55/d4e16dc86e7fee30970eaeea940fbf03da06d6.src","preCode":"    public void testInitializeAsResignedAndBecomeCandidate() throws Exception {\n        int localId = 0;\n        int remoteId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, remoteId);\n        int epoch = 2;\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n                .updateRandom(random -> {\n                    Mockito.doReturn(0).when(random).nextInt(DEFAULT_ELECTION_TIMEOUT_MS);\n                })\n                .withElectedLeader(epoch, localId)\n                .build();\n\n        \r\n        assertTrue(context.client.quorum().isResigned());\n        assertEquals(0L, context.log.endOffset().offset);\n        context.assertElectedLeader(epoch, localId);\n\n        \r\n        context.time.sleep(context.electionTimeoutMs());\n        context.client.poll();\n\n        \r\n        assertTrue(context.client.quorum().isCandidate());\n        context.assertVotedCandidate(epoch + 1, localId);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"B"}],"commitId":"db688b1a5e5904eed5849fbab4940585e5a3d646","commitMessage":"@@@KAFKA-12607; Test case for resigned state vote granting (#10510)\n\nThis patch adds unit tests to verify vote behavior when in the \"resigned\" state.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2021-04-10 10:15:11","modifiedFileCount":"2","status":"B","submitter":"dengziming"},{"authorTime":"2021-09-06 23:55:52","codes":[{"authorDate":"2021-09-06 23:55:52","commitOrder":2,"curCode":"    public void testGrantVotesFromHigherEpochAfterResigningLeadership() throws Exception {\n        int localId = 0;\n        int remoteId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, remoteId);\n        int epoch = 2;\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .updateRandom(r -> r.mockNextInt(DEFAULT_ELECTION_TIMEOUT_MS, 0))\n            .withElectedLeader(epoch, localId)\n            .build();\n\n        \r\n        assertTrue(context.client.quorum().isResigned());\n        assertEquals(0L, context.log.endOffset().offset);\n        context.assertElectedLeader(epoch, localId);\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, remoteId,\n                context.log.lastFetchedEpoch(), context.log.endOffset().offset));\n        context.client.poll();\n\n        \r\n        assertTrue(context.client.quorum().isVoted());\n        context.assertVotedCandidate(epoch + 1, remoteId);\n        context.assertSentVoteResponse(Errors.NONE, epoch + 1, OptionalInt.empty(), true);\n    }\n","date":"2021-09-06 23:55:52","endLine":168,"groupId":"104415","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testGrantVotesFromHigherEpochAfterResigningLeadership","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9b/2771d2b34e417b059240cf0c0ef734fbcb6b43.src","preCode":"    public void testGrantVotesFromHigherEpochAfterResigningLeadership() throws Exception {\n        int localId = 0;\n        int remoteId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, remoteId);\n        int epoch = 2;\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n                .updateRandom(random -> {\n                    Mockito.doReturn(0).when(random).nextInt(DEFAULT_ELECTION_TIMEOUT_MS);\n                })\n                .withElectedLeader(epoch, localId)\n                .build();\n\n        \r\n        assertTrue(context.client.quorum().isResigned());\n        assertEquals(0L, context.log.endOffset().offset);\n        context.assertElectedLeader(epoch, localId);\n\n        \r\n        context.deliverRequest(context.voteRequest(epoch + 1, remoteId,\n                context.log.lastFetchedEpoch(), context.log.endOffset().offset));\n        context.client.poll();\n\n        \r\n        assertTrue(context.client.quorum().isVoted());\n        context.assertVotedCandidate(epoch + 1, remoteId);\n        context.assertSentVoteResponse(Errors.NONE, epoch + 1, OptionalInt.empty(), true);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"},{"authorDate":"2021-09-06 23:55:52","commitOrder":2,"curCode":"    public void testInitializeAsResignedAndBecomeCandidate() throws Exception {\n        int localId = 0;\n        int remoteId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, remoteId);\n        int epoch = 2;\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n            .updateRandom(r -> r.mockNextInt(DEFAULT_ELECTION_TIMEOUT_MS, 0))\n            .withElectedLeader(epoch, localId)\n            .build();\n\n        \r\n        assertTrue(context.client.quorum().isResigned());\n        assertEquals(0L, context.log.endOffset().offset);\n        context.assertElectedLeader(epoch, localId);\n\n        \r\n        context.time.sleep(context.electionTimeoutMs());\n        context.client.poll();\n\n        \r\n        assertTrue(context.client.quorum().isCandidate());\n        context.assertVotedCandidate(epoch + 1, localId);\n    }\n","date":"2021-09-06 23:55:52","endLine":246,"groupId":"104415","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testInitializeAsResignedAndBecomeCandidate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9b/2771d2b34e417b059240cf0c0ef734fbcb6b43.src","preCode":"    public void testInitializeAsResignedAndBecomeCandidate() throws Exception {\n        int localId = 0;\n        int remoteId = 1;\n        Set<Integer> voters = Utils.mkSet(localId, remoteId);\n        int epoch = 2;\n\n        RaftClientTestContext context = new RaftClientTestContext.Builder(localId, voters)\n                .updateRandom(random -> {\n                    Mockito.doReturn(0).when(random).nextInt(DEFAULT_ELECTION_TIMEOUT_MS);\n                })\n                .withElectedLeader(epoch, localId)\n                .build();\n\n        \r\n        assertTrue(context.client.quorum().isResigned());\n        assertEquals(0L, context.log.endOffset().offset);\n        context.assertElectedLeader(epoch, localId);\n\n        \r\n        context.time.sleep(context.electionTimeoutMs());\n        context.client.poll();\n\n        \r\n        assertTrue(context.client.quorum().isCandidate());\n        context.assertVotedCandidate(epoch + 1, localId);\n    }\n","realPath":"raft/src/test/java/org/apache/kafka/raft/KafkaRaftClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":223,"status":"M"}],"commitId":"0118330103e992253a7875a523de3526cad4a6c5","commitMessage":"@@@KAFKA-13273: Add support for Java 17 (#11296)\n\nJava 17 is at release candidate stage and it will be a LTS release once\nit's out (previous LTS release was Java 11).\n\nDetails:\n* Replace Java 16 with Java 17 in Jenkins and Readme.\n* Replace `--illegal-access=permit` (which was removed from Java 17)\n   with  `--add-opens` for the packages we require internal access to.\n   Filed KAFKA-13275 for updating the tests not to require `--add-opens`\n   (where possible).\n* Update `release.py` to use JDK8. and JDK 17 (instead of JDK 8 and JDK 15).\n* Removed all but one Streams test from `testsToExclude`. The\n   Connect test exclusion list remains the same.\n* Add notable change to upgrade.html\n* Upgrade to Gradle 7.2 as it's required for proper Java 17 support.\n* Upgrade mockito to 3.12.4 for better Java 17 support.\n* Adjusted `KafkaRaftClientTest` and `QuorumStateTest` not to require\n   private access to `jdk.internal.util.random`.\n\nReviewers: Manikumar Reddy <manikumar.reddy@gmail.com>.  Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-09-06 23:55:52","modifiedFileCount":"3","status":"M","submitter":"Ismael Juma"}]
