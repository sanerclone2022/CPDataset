[{"authorTime":"2017-06-06 19:34:39","codes":[{"authorDate":"2017-06-06 19:34:39","commitOrder":1,"curCode":"    public void testValidEndpointIdentificationCN() throws Exception {\n        String node = \"0\";\n        serverCertStores = new CertStores(true, \"localhost\");\n        clientCertStores = new CertStores(false, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n        server = createEchoServer(SecurityProtocol.SSL);\n        sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, \"HTTPS\");\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","date":"2017-06-06 19:34:39","endLine":143,"groupId":"12304","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidEndpointIdentificationCN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bb/5d2a78bec32ce78081ae26b86bb9bdce42b040.src","preCode":"    public void testValidEndpointIdentificationCN() throws Exception {\n        String node = \"0\";\n        serverCertStores = new CertStores(true, \"localhost\");\n        clientCertStores = new CertStores(false, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n        server = createEchoServer(SecurityProtocol.SSL);\n        sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, \"HTTPS\");\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"B"},{"authorDate":"2017-06-06 19:34:39","commitOrder":1,"curCode":"    public void testClientEndpointNotValidated() throws Exception {\n        String node = \"0\";\n\n        \r\n        clientCertStores = new CertStores(false, \"non-existent.com\");\n        serverCertStores = new CertStores(true, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n\n        \r\n        SslChannelBuilder serverChannelBuilder = new SslChannelBuilder(Mode.SERVER) {\n            @Override\n            protected SslTransportLayer buildTransportLayer(SslFactory sslFactory, String id, SelectionKey key, String host) throws IOException {\n                SocketChannel socketChannel = (SocketChannel) key.channel();\n                SSLEngine sslEngine = sslFactory.createSslEngine(host, socketChannel.socket().getPort());\n                SSLParameters sslParams = sslEngine.getSSLParameters();\n                sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n                sslEngine.setSSLParameters(sslParams);\n                TestSslTransportLayer transportLayer = new TestSslTransportLayer(id, key, sslEngine, BUFFER_SIZE, BUFFER_SIZE, BUFFER_SIZE);\n                transportLayer.startHandshake();\n                return transportLayer;\n            }\n        };\n        serverChannelBuilder.configure(sslServerConfigs);\n        server = new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL), SecurityProtocol.SSL,\n                new TestSecurityConfig(sslServerConfigs), \"localhost\", serverChannelBuilder);\n        server.start();\n\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","date":"2017-06-06 19:34:39","endLine":211,"groupId":"18500","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testClientEndpointNotValidated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bb/5d2a78bec32ce78081ae26b86bb9bdce42b040.src","preCode":"    public void testClientEndpointNotValidated() throws Exception {\n        String node = \"0\";\n\n        \r\n        clientCertStores = new CertStores(false, \"non-existent.com\");\n        serverCertStores = new CertStores(true, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n\n        \r\n        SslChannelBuilder serverChannelBuilder = new SslChannelBuilder(Mode.SERVER) {\n            @Override\n            protected SslTransportLayer buildTransportLayer(SslFactory sslFactory, String id, SelectionKey key, String host) throws IOException {\n                SocketChannel socketChannel = (SocketChannel) key.channel();\n                SSLEngine sslEngine = sslFactory.createSslEngine(host, socketChannel.socket().getPort());\n                SSLParameters sslParams = sslEngine.getSSLParameters();\n                sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n                sslEngine.setSSLParameters(sslParams);\n                TestSslTransportLayer transportLayer = new TestSslTransportLayer(id, key, sslEngine, BUFFER_SIZE, BUFFER_SIZE, BUFFER_SIZE);\n                transportLayer.startHandshake();\n                return transportLayer;\n            }\n        };\n        serverChannelBuilder.configure(sslServerConfigs);\n        server = new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL), SecurityProtocol.SSL,\n                new TestSecurityConfig(sslServerConfigs), \"localhost\", serverChannelBuilder);\n        server.start();\n\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"}],"commitId":"17b2bde4be6296dfd47defce85443cbf6e23835b","commitMessage":"@@@KAFKA-5051; Avoid reverse DNS lookup to obtain hostname for TLS\n\nAuthor: Rajini Sivaram <rajinisivaram@googlemail.com>\n\nReviewers: Jun Rao <junrao@gmail.com>.  Ismael Juma <ismael@juma.me.uk>\n\nCloses #2835 from rajinisivaram/KAFKA-5051\n","date":"2017-06-06 19:34:39","modifiedFileCount":"8","status":"B","submitter":"Rajini Sivaram"},{"authorTime":"2017-09-16 00:16:29","codes":[{"authorDate":"2017-06-06 19:34:39","commitOrder":2,"curCode":"    public void testValidEndpointIdentificationCN() throws Exception {\n        String node = \"0\";\n        serverCertStores = new CertStores(true, \"localhost\");\n        clientCertStores = new CertStores(false, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n        server = createEchoServer(SecurityProtocol.SSL);\n        sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, \"HTTPS\");\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","date":"2017-06-06 19:34:39","endLine":143,"groupId":"12304","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidEndpointIdentificationCN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bb/5d2a78bec32ce78081ae26b86bb9bdce42b040.src","preCode":"    public void testValidEndpointIdentificationCN() throws Exception {\n        String node = \"0\";\n        serverCertStores = new CertStores(true, \"localhost\");\n        clientCertStores = new CertStores(false, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n        server = createEchoServer(SecurityProtocol.SSL);\n        sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, \"HTTPS\");\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"N"},{"authorDate":"2017-09-16 00:16:29","commitOrder":2,"curCode":"    public void testClientEndpointNotValidated() throws Exception {\n        String node = \"0\";\n\n        \r\n        clientCertStores = new CertStores(false, \"non-existent.com\");\n        serverCertStores = new CertStores(true, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n\n        \r\n        SslChannelBuilder serverChannelBuilder = new SslChannelBuilder(Mode.SERVER) {\n            @Override\n            protected SslTransportLayer buildTransportLayer(SslFactory sslFactory, String id, SelectionKey key, String host) throws IOException {\n                SocketChannel socketChannel = (SocketChannel) key.channel();\n                SSLEngine sslEngine = sslFactory.createSslEngine(host, socketChannel.socket().getPort());\n                SSLParameters sslParams = sslEngine.getSSLParameters();\n                sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n                sslEngine.setSSLParameters(sslParams);\n                TestSslTransportLayer transportLayer = new TestSslTransportLayer(id, key, sslEngine, BUFFER_SIZE, BUFFER_SIZE, BUFFER_SIZE);\n                transportLayer.startHandshake();\n                return transportLayer;\n            }\n        };\n        serverChannelBuilder.configure(sslServerConfigs);\n        server = new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL), SecurityProtocol.SSL,\n                new TestSecurityConfig(sslServerConfigs), \"localhost\", serverChannelBuilder, null);\n        server.start();\n\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","date":"2017-09-16 00:16:29","endLine":213,"groupId":"18500","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testClientEndpointNotValidated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cf/fcc89d9134e25dfd2027af64502f3f7c8284d1.src","preCode":"    public void testClientEndpointNotValidated() throws Exception {\n        String node = \"0\";\n\n        \r\n        clientCertStores = new CertStores(false, \"non-existent.com\");\n        serverCertStores = new CertStores(true, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n\n        \r\n        SslChannelBuilder serverChannelBuilder = new SslChannelBuilder(Mode.SERVER) {\n            @Override\n            protected SslTransportLayer buildTransportLayer(SslFactory sslFactory, String id, SelectionKey key, String host) throws IOException {\n                SocketChannel socketChannel = (SocketChannel) key.channel();\n                SSLEngine sslEngine = sslFactory.createSslEngine(host, socketChannel.socket().getPort());\n                SSLParameters sslParams = sslEngine.getSSLParameters();\n                sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n                sslEngine.setSSLParameters(sslParams);\n                TestSslTransportLayer transportLayer = new TestSslTransportLayer(id, key, sslEngine, BUFFER_SIZE, BUFFER_SIZE, BUFFER_SIZE);\n                transportLayer.startHandshake();\n                return transportLayer;\n            }\n        };\n        serverChannelBuilder.configure(sslServerConfigs);\n        server = new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL), SecurityProtocol.SSL,\n                new TestSecurityConfig(sslServerConfigs), \"localhost\", serverChannelBuilder);\n        server.start();\n\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":180,"status":"M"}],"commitId":"8fca432223da521b78e60e0cf8fa881ced19589c","commitMessage":"@@@KAFKA-4764; Wrap SASL tokens in Kafka headers to improve diagnostics (KIP-152)\n\nSASL handshake protocol changes from KIP-152.\n\nAuthor: Rajini Sivaram <rajinisivaram@googlemail.com>\n\nReviewers: Jun Rao <junrao@gmail.com>.  Ismael Juma <ismael@juma.me.uk>.  Manikumar Reddy <manikumar.reddy@gmail.com>\n\nCloses #3708 from rajinisivaram/KAFKA-4764-SASL-diagnostics\n","date":"2017-09-16 00:16:29","modifiedFileCount":"22","status":"M","submitter":"Rajini Sivaram"},{"authorTime":"2017-09-23 03:26:46","codes":[{"authorDate":"2017-06-06 19:34:39","commitOrder":3,"curCode":"    public void testValidEndpointIdentificationCN() throws Exception {\n        String node = \"0\";\n        serverCertStores = new CertStores(true, \"localhost\");\n        clientCertStores = new CertStores(false, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n        server = createEchoServer(SecurityProtocol.SSL);\n        sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, \"HTTPS\");\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","date":"2017-06-06 19:34:39","endLine":143,"groupId":"12304","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidEndpointIdentificationCN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bb/5d2a78bec32ce78081ae26b86bb9bdce42b040.src","preCode":"    public void testValidEndpointIdentificationCN() throws Exception {\n        String node = \"0\";\n        serverCertStores = new CertStores(true, \"localhost\");\n        clientCertStores = new CertStores(false, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n        server = createEchoServer(SecurityProtocol.SSL);\n        sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, \"HTTPS\");\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"N"},{"authorDate":"2017-09-23 03:26:46","commitOrder":3,"curCode":"    public void testClientEndpointNotValidated() throws Exception {\n        String node = \"0\";\n\n        \r\n        clientCertStores = new CertStores(false, \"non-existent.com\");\n        serverCertStores = new CertStores(true, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n\n        \r\n        SslChannelBuilder serverChannelBuilder = new TestSslChannelBuilder(Mode.SERVER) {\n            @Override\n            protected TestSslTransportLayer newTransportLayer(String id, SelectionKey key, SSLEngine sslEngine) throws IOException {\n                SSLParameters sslParams = sslEngine.getSSLParameters();\n                sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n                sslEngine.setSSLParameters(sslParams);\n                return super.newTransportLayer(id, key, sslEngine);\n            }\n        };\n        serverChannelBuilder.configure(sslServerConfigs);\n        server = new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL), SecurityProtocol.SSL,\n                new TestSecurityConfig(sslServerConfigs), \"localhost\", serverChannelBuilder, null);\n        server.start();\n\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","date":"2017-09-23 03:29:25","endLine":212,"groupId":"17302","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testClientEndpointNotValidated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/90/c8cd56dda3c7523e733d268b998da61dd5b7fb.src","preCode":"    public void testClientEndpointNotValidated() throws Exception {\n        String node = \"0\";\n\n        \r\n        clientCertStores = new CertStores(false, \"non-existent.com\");\n        serverCertStores = new CertStores(true, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n\n        \r\n        SslChannelBuilder serverChannelBuilder = new SslChannelBuilder(Mode.SERVER) {\n            @Override\n            protected SslTransportLayer buildTransportLayer(SslFactory sslFactory, String id, SelectionKey key, String host) throws IOException {\n                SocketChannel socketChannel = (SocketChannel) key.channel();\n                SSLEngine sslEngine = sslFactory.createSslEngine(host, socketChannel.socket().getPort());\n                SSLParameters sslParams = sslEngine.getSSLParameters();\n                sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n                sslEngine.setSSLParameters(sslParams);\n                TestSslTransportLayer transportLayer = new TestSslTransportLayer(id, key, sslEngine, BUFFER_SIZE, BUFFER_SIZE, BUFFER_SIZE);\n                transportLayer.startHandshake();\n                return transportLayer;\n            }\n        };\n        serverChannelBuilder.configure(sslServerConfigs);\n        server = new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL), SecurityProtocol.SSL,\n                new TestSecurityConfig(sslServerConfigs), \"localhost\", serverChannelBuilder, null);\n        server.start();\n\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"d60f011d77ce80a44b02d43bf0889a50a8797dcd","commitMessage":"@@@KAFKA-5920; Handle SSL handshake failures as authentication exceptions\n\n1. Propagate `SSLException` as `SslAuthenticationException` to enable clients to report these and avoid retries\n2. Updates to `SslTransportLayer` to process bytes received even if end-of-stream\n3. Some tidy up of authentication handling\n4. Report exceptions in SaslClientAuthenticator as AuthenticationExceptions\n\nAuthor: Rajini Sivaram <rajinisivaram@googlemail.com>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>\n\nCloses #3918 from rajinisivaram/KAFKA-5920-SSL-handshake-failure\n","date":"2017-09-23 03:29:25","modifiedFileCount":"12","status":"M","submitter":"Rajini Sivaram"},{"authorTime":"2018-08-31 19:04:33","codes":[{"authorDate":"2017-06-06 19:34:39","commitOrder":4,"curCode":"    public void testValidEndpointIdentificationCN() throws Exception {\n        String node = \"0\";\n        serverCertStores = new CertStores(true, \"localhost\");\n        clientCertStores = new CertStores(false, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n        server = createEchoServer(SecurityProtocol.SSL);\n        sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, \"HTTPS\");\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","date":"2017-06-06 19:34:39","endLine":143,"groupId":"12304","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidEndpointIdentificationCN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bb/5d2a78bec32ce78081ae26b86bb9bdce42b040.src","preCode":"    public void testValidEndpointIdentificationCN() throws Exception {\n        String node = \"0\";\n        serverCertStores = new CertStores(true, \"localhost\");\n        clientCertStores = new CertStores(false, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n        server = createEchoServer(SecurityProtocol.SSL);\n        sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, \"HTTPS\");\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":130,"status":"N"},{"authorDate":"2018-08-31 19:04:33","commitOrder":4,"curCode":"    public void testClientEndpointNotValidated() throws Exception {\n        String node = \"0\";\n\n        \r\n        clientCertStores = new CertStores(false, \"non-existent.com\");\n        serverCertStores = new CertStores(true, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n\n        \r\n        SslChannelBuilder serverChannelBuilder = new TestSslChannelBuilder(Mode.SERVER) {\n            @Override\n            protected TestSslTransportLayer newTransportLayer(String id, SelectionKey key, SSLEngine sslEngine) throws IOException {\n                SSLParameters sslParams = sslEngine.getSSLParameters();\n                sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n                sslEngine.setSSLParameters(sslParams);\n                return super.newTransportLayer(id, key, sslEngine);\n            }\n        };\n        serverChannelBuilder.configure(sslServerConfigs);\n        server = new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL), SecurityProtocol.SSL,\n                new TestSecurityConfig(sslServerConfigs), \"localhost\", serverChannelBuilder, null, time);\n        server.start();\n\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","date":"2018-08-31 19:04:33","endLine":215,"groupId":"17302","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testClientEndpointNotValidated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/67/834381764da1f7344da9c0aa485f9e3d8f0893.src","preCode":"    public void testClientEndpointNotValidated() throws Exception {\n        String node = \"0\";\n\n        \r\n        clientCertStores = new CertStores(false, \"non-existent.com\");\n        serverCertStores = new CertStores(true, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n\n        \r\n        SslChannelBuilder serverChannelBuilder = new TestSslChannelBuilder(Mode.SERVER) {\n            @Override\n            protected TestSslTransportLayer newTransportLayer(String id, SelectionKey key, SSLEngine sslEngine) throws IOException {\n                SSLParameters sslParams = sslEngine.getSSLParameters();\n                sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n                sslEngine.setSSLParameters(sslParams);\n                return super.newTransportLayer(id, key, sslEngine);\n            }\n        };\n        serverChannelBuilder.configure(sslServerConfigs);\n        server = new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL), SecurityProtocol.SSL,\n                new TestSecurityConfig(sslServerConfigs), \"localhost\", serverChannelBuilder, null);\n        server.start();\n\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"5d1bfa0665ce0850ee76cee152e397c23ac329a7","commitMessage":"@@@KAFKA-6950: Delay response to failed client authentication to prevent potential DoS issues (KIP-306) (#5082)\n\nReviewers: Ron Dagostino <rndgstn@gmail.com>.  Ismael Juma <ismael@juma.me.uk>.  Rajini Sivaram <rajinisivaram@googlemail.com>\n","date":"2018-08-31 19:04:33","modifiedFileCount":"10","status":"M","submitter":"Dhruvil Shah"},{"authorTime":"2019-12-19 22:13:03","codes":[{"authorDate":"2019-12-19 22:13:03","commitOrder":5,"curCode":"    public void testValidEndpointIdentificationCN() throws Exception {\n        String node = \"0\";\n        serverCertStores = new CertStores(true, \"localhost\");\n        clientCertStores = new CertStores(false, \"localhost\");\n        sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores);\n        sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores);\n        server = createEchoServer(SecurityProtocol.SSL);\n        sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, \"HTTPS\");\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","date":"2019-12-19 22:13:03","endLine":180,"groupId":"12765","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidEndpointIdentificationCN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/b031ee2fea32e2e96fcc2d833bfa42894299ef.src","preCode":"    public void testValidEndpointIdentificationCN() throws Exception {\n        String node = \"0\";\n        serverCertStores = new CertStores(true, \"localhost\");\n        clientCertStores = new CertStores(false, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n        server = createEchoServer(SecurityProtocol.SSL);\n        sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, \"HTTPS\");\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"},{"authorDate":"2019-12-19 22:13:03","commitOrder":5,"curCode":"    public void testClientEndpointNotValidated() throws Exception {\n        String node = \"0\";\n\n        \r\n        clientCertStores = new CertStores(false, \"non-existent.com\");\n        serverCertStores = new CertStores(true, \"localhost\");\n        sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores);\n        sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores);\n\n        \r\n        SslChannelBuilder serverChannelBuilder = new TestSslChannelBuilder(Mode.SERVER) {\n            @Override\n            protected TestSslTransportLayer newTransportLayer(String id, SelectionKey key, SSLEngine sslEngine) throws IOException {\n                SSLParameters sslParams = sslEngine.getSSLParameters();\n                sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n                sslEngine.setSSLParameters(sslParams);\n                return super.newTransportLayer(id, key, sslEngine);\n            }\n        };\n        serverChannelBuilder.configure(sslServerConfigs);\n        server = new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL), SecurityProtocol.SSL,\n                new TestSecurityConfig(sslServerConfigs), \"localhost\", serverChannelBuilder, null, time);\n        server.start();\n\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","date":"2019-12-19 22:13:03","endLine":244,"groupId":"17302","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testClientEndpointNotValidated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/b031ee2fea32e2e96fcc2d833bfa42894299ef.src","preCode":"    public void testClientEndpointNotValidated() throws Exception {\n        String node = \"0\";\n\n        \r\n        clientCertStores = new CertStores(false, \"non-existent.com\");\n        serverCertStores = new CertStores(true, \"localhost\");\n        sslServerConfigs = serverCertStores.getTrustingConfig(clientCertStores);\n        sslClientConfigs = clientCertStores.getTrustingConfig(serverCertStores);\n\n        \r\n        SslChannelBuilder serverChannelBuilder = new TestSslChannelBuilder(Mode.SERVER) {\n            @Override\n            protected TestSslTransportLayer newTransportLayer(String id, SelectionKey key, SSLEngine sslEngine) throws IOException {\n                SSLParameters sslParams = sslEngine.getSSLParameters();\n                sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n                sslEngine.setSSLParameters(sslParams);\n                return super.newTransportLayer(id, key, sslEngine);\n            }\n        };\n        serverChannelBuilder.configure(sslServerConfigs);\n        server = new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL), SecurityProtocol.SSL,\n                new TestSecurityConfig(sslServerConfigs), \"localhost\", serverChannelBuilder, null, time);\n        server.start();\n\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"e275742f850af4a1b79b0d1bd1ac9a1d2e89c64e","commitMessage":"@@@KAFKA-7251; Add support for TLS 1.3 (#7804)\n\nAdds support for TLSv1.3 in SslTransportLayer. Note that TLSv1.3 is only enabled from Java 11 onwards.  so we test the code only when running with Java11 and above.\n\nTests run on this PR:\n  - SslTransportLayerTest: This covers testing of our SslTransportLayer and all tests are run with TLSv1.3 when running with Java 11. These tests are also run with TLSv1.2 for all Java versions.\n  - SslFactoryTest: Also run with TLSv1.3 on Java 11 onwards in addition to TLSv1.2 for all Java versions.\n  - SslEndToEndAuthorizationTest - Run only with TLSv1.3 on Java 11 onwards and only with TLSv1.2 on earlier Java versions. We have other versions of this test which use SSL that continue to be with TLSv1.2 on Java 11 to avoid reducing test coverage for TLSv1.2\n\nAdditional testing for done for TLSv1.3:\n  - Most tests that use SSL use TestSslUtils.DEFAULT_TLS_PROTOCOL_FOR_TESTS which is set to TLSv1.2. I have run all clients and core tests with DEFAULT_TLS_PROTOCOL_FOR_TESTS=TLSv1.3 with Java 11.\n  - Ran a few system tests locally with TKSv1.3\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Manikumar Reddy <manikumar.reddy@gmail.com>\n","date":"2019-12-19 22:13:03","modifiedFileCount":"10","status":"M","submitter":"Rajini Sivaram"},{"authorTime":"2020-10-07 02:13:43","codes":[{"authorDate":"2020-10-07 02:13:43","commitOrder":6,"curCode":"    public void testValidEndpointIdentificationCN() throws Exception {\n        serverCertStores = certBuilder(true, \"localhost\").build();\n        clientCertStores = certBuilder(false, \"localhost\").build();\n        sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores);\n        sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores);\n        sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, \"HTTPS\");\n        verifySslConfigs();\n    }\n","date":"2020-10-07 02:13:43","endLine":189,"groupId":"20939","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidEndpointIdentificationCN","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cc/fb2a9f599f49cb6370fd7284f2fbf83d22434f.src","preCode":"    public void testValidEndpointIdentificationCN() throws Exception {\n        String node = \"0\";\n        serverCertStores = new CertStores(true, \"localhost\");\n        clientCertStores = new CertStores(false, \"localhost\");\n        sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores);\n        sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores);\n        server = createEchoServer(SecurityProtocol.SSL);\n        sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, \"HTTPS\");\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"},{"authorDate":"2020-10-07 02:13:43","commitOrder":6,"curCode":"    public void testClientEndpointNotValidated() throws Exception {\n        String node = \"0\";\n\n        \r\n        clientCertStores = certBuilder(false, \"non-existent.com\").build();\n        serverCertStores = certBuilder(true, \"localhost\").build();\n        sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores);\n        sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores);\n\n        \r\n        SslChannelBuilder serverChannelBuilder = new TestSslChannelBuilder(Mode.SERVER) {\n            @Override\n            protected TestSslTransportLayer newTransportLayer(String id, SelectionKey key, SSLEngine sslEngine) throws IOException {\n                SSLParameters sslParams = sslEngine.getSSLParameters();\n                sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n                sslEngine.setSSLParameters(sslParams);\n                return super.newTransportLayer(id, key, sslEngine);\n            }\n        };\n        serverChannelBuilder.configure(sslServerConfigs);\n        server = new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL), SecurityProtocol.SSL,\n                new TestSecurityConfig(sslServerConfigs), \"localhost\", serverChannelBuilder, null, time);\n        server.start();\n\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","date":"2020-10-07 02:13:43","endLine":253,"groupId":"17302","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testClientEndpointNotValidated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cc/fb2a9f599f49cb6370fd7284f2fbf83d22434f.src","preCode":"    public void testClientEndpointNotValidated() throws Exception {\n        String node = \"0\";\n\n        \r\n        clientCertStores = new CertStores(false, \"non-existent.com\");\n        serverCertStores = new CertStores(true, \"localhost\");\n        sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores);\n        sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores);\n\n        \r\n        SslChannelBuilder serverChannelBuilder = new TestSslChannelBuilder(Mode.SERVER) {\n            @Override\n            protected TestSslTransportLayer newTransportLayer(String id, SelectionKey key, SSLEngine sslEngine) throws IOException {\n                SSLParameters sslParams = sslEngine.getSSLParameters();\n                sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n                sslEngine.setSSLParameters(sslParams);\n                return super.newTransportLayer(id, key, sslEngine);\n            }\n        };\n        serverChannelBuilder.configure(sslServerConfigs);\n        server = new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL), SecurityProtocol.SSL,\n                new TestSecurityConfig(sslServerConfigs), \"localhost\", serverChannelBuilder, null, time);\n        server.start();\n\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"}],"commitId":"7be8bd8cbfea5cc19f815a142c4689e97728ea4b","commitMessage":"@@@KAFKA-10338; Support PEM format for SSL key and trust stores (KIP-651) (#9345)\n\nAdds support for SSL key and trust stores to be specified in PEM format either as files or directly as configuration values.\n\nReviewers: Manikumar Reddy <manikumar.reddy@gmail.com>","date":"2020-10-07 02:13:43","modifiedFileCount":"7","status":"M","submitter":"Rajini Sivaram"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2021-01-14 08:17:45","commitOrder":7,"curCode":"    public void testValidEndpointIdentificationCN(Args args) throws Exception {\n        args.serverCertStores = certBuilder(true, \"localhost\", args.useInlinePem).build();\n        args.clientCertStores = certBuilder(false, \"localhost\", args.useInlinePem).build();\n        args.sslServerConfigs = args.getTrustingConfig(args.serverCertStores, args.clientCertStores);\n        args.sslClientConfigs = args.getTrustingConfig(args.clientCertStores, args.serverCertStores);\n        args.sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, \"HTTPS\");\n        verifySslConfigs(args);\n    }\n","date":"2021-01-14 08:17:45","endLine":200,"groupId":"103530","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testValidEndpointIdentificationCN","params":"(Argsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2b/3bf566e3fa45592dc528a7c48466f6750bf69c.src","preCode":"    public void testValidEndpointIdentificationCN() throws Exception {\n        serverCertStores = certBuilder(true, \"localhost\").build();\n        clientCertStores = certBuilder(false, \"localhost\").build();\n        sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores);\n        sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores);\n        sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, \"HTTPS\");\n        verifySslConfigs();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"},{"authorDate":"2021-01-14 08:17:45","commitOrder":7,"curCode":"    public void testClientEndpointNotValidated(Args args) throws Exception {\n        String node = \"0\";\n\n        \r\n        args.clientCertStores = certBuilder(false, \"non-existent.com\", args.useInlinePem).build();\n        args.serverCertStores = certBuilder(true, \"localhost\", args.useInlinePem).build();\n        args.sslServerConfigs = args.getTrustingConfig(args.serverCertStores, args.clientCertStores);\n        args.sslClientConfigs = args.getTrustingConfig(args.clientCertStores, args.serverCertStores);\n\n        \r\n        SslChannelBuilder serverChannelBuilder = new TestSslChannelBuilder(Mode.SERVER) {\n            @Override\n            protected TestSslTransportLayer newTransportLayer(String id, SelectionKey key, SSLEngine sslEngine) throws IOException {\n                SSLParameters sslParams = sslEngine.getSSLParameters();\n                sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n                sslEngine.setSSLParameters(sslParams);\n                return super.newTransportLayer(id, key, sslEngine);\n            }\n        };\n        serverChannelBuilder.configure(args.sslServerConfigs);\n        server = new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL), SecurityProtocol.SSL,\n                new TestSecurityConfig(args.sslServerConfigs), \"localhost\", serverChannelBuilder, null, time);\n        server.start();\n\n        createSelector(args.sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","date":"2021-01-14 08:17:45","endLine":266,"groupId":"103530","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testClientEndpointNotValidated","params":"(Argsargs)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2b/3bf566e3fa45592dc528a7c48466f6750bf69c.src","preCode":"    public void testClientEndpointNotValidated() throws Exception {\n        String node = \"0\";\n\n        \r\n        clientCertStores = certBuilder(false, \"non-existent.com\").build();\n        serverCertStores = certBuilder(true, \"localhost\").build();\n        sslServerConfigs = getTrustingConfig(serverCertStores, clientCertStores);\n        sslClientConfigs = getTrustingConfig(clientCertStores, serverCertStores);\n\n        \r\n        SslChannelBuilder serverChannelBuilder = new TestSslChannelBuilder(Mode.SERVER) {\n            @Override\n            protected TestSslTransportLayer newTransportLayer(String id, SelectionKey key, SSLEngine sslEngine) throws IOException {\n                SSLParameters sslParams = sslEngine.getSSLParameters();\n                sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n                sslEngine.setSSLParameters(sslParams);\n                return super.newTransportLayer(id, key, sslEngine);\n            }\n        };\n        serverChannelBuilder.configure(sslServerConfigs);\n        server = new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL), SecurityProtocol.SSL,\n                new TestSecurityConfig(sslServerConfigs), \"localhost\", serverChannelBuilder, null, time);\n        server.start();\n\n        createSelector(sslClientConfigs);\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", server.port());\n        selector.connect(node, addr, BUFFER_SIZE, BUFFER_SIZE);\n\n        NetworkTestUtils.checkClientConnection(selector, node, 100, 10);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/network/SslTransportLayerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"}]
