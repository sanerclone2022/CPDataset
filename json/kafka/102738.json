[{"authorTime":"2018-06-13 02:54:07","codes":[{"authorDate":"2018-06-13 02:54:07","commitOrder":5,"curCode":"    private void produceInitialGlobalTableValues(final boolean enableTransactions) throws Exception {\n        final Properties properties = new Properties();\n        if (enableTransactions) {\n            properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"someid\");\n            properties.put(ProducerConfig.RETRIES_CONFIG, 1);\n        }\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class,\n                        properties),\n                mockTime,\n                enableTransactions);\n    }\n","date":"2018-06-13 02:54:07","endLine":372,"groupId":"20790","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"produceInitialGlobalTableValues","params":"(finalbooleanenableTransactions)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f7/c0e55c05e044c56a41199f6898716f01abb7d9.src","preCode":"    private void produceInitialGlobalTableValues(final boolean enableTransactions) throws Exception {\n        final Properties properties = new Properties();\n        if (enableTransactions) {\n            properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"someid\");\n            properties.put(ProducerConfig.RETRIES_CONFIG, 1);\n        }\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class,\n                        properties),\n                mockTime,\n                enableTransactions);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableEOSIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":351,"status":"B"},{"authorDate":"2018-06-13 02:54:07","commitOrder":5,"curCode":"    private void produceInitialGlobalTableValues() throws Exception {\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class\n                        ),\n                mockTime);\n    }\n","date":"2018-06-13 02:54:07","endLine":268,"groupId":"20790","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"produceInitialGlobalTableValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/90/0e65276ee94e64634c97cf4aa1c2ca1d34e4c6.src","preCode":"    private void produceInitialGlobalTableValues() throws Exception {\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class\n                        ),\n                mockTime);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"MB"}],"commitId":"40f63eb9c1775bd292a5d028412fb784b7854701","commitMessage":"@@@KAFKA-6782: solved the bug of restoration of aborted messages for GlobalStateStore and KGlobalTable (#4900)\n\nReviewer: Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-06-13 02:54:07","modifiedFileCount":"3","status":"M","submitter":"Gitomain"},{"authorTime":"2018-06-13 02:54:07","codes":[{"authorDate":"2020-04-10 01:57:10","commitOrder":6,"curCode":"    private void produceInitialGlobalTableValues() throws Exception {\n        final Properties properties = new Properties();\n        properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"someid\");\n        properties.put(ProducerConfig.RETRIES_CONFIG, 1);\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class,\n                        properties),\n                mockTime,\n                true);\n    }\n","date":"2020-04-10 01:57:10","endLine":355,"groupId":"20790","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"produceInitialGlobalTableValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a8/7bbd3c132e8e0a4b1dc128235886b2dfb7dd07.src","preCode":"    private void produceInitialGlobalTableValues(final boolean enableTransactions) throws Exception {\n        final Properties properties = new Properties();\n        if (enableTransactions) {\n            properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"someid\");\n            properties.put(ProducerConfig.RETRIES_CONFIG, 1);\n        }\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class,\n                        properties),\n                mockTime,\n                enableTransactions);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableEOSIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"},{"authorDate":"2018-06-13 02:54:07","commitOrder":6,"curCode":"    private void produceInitialGlobalTableValues() throws Exception {\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class\n                        ),\n                mockTime);\n    }\n","date":"2018-06-13 02:54:07","endLine":268,"groupId":"20790","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"produceInitialGlobalTableValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/90/0e65276ee94e64634c97cf4aa1c2ca1d34e4c6.src","preCode":"    private void produceInitialGlobalTableValues() throws Exception {\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class\n                        ),\n                mockTime);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"N"}],"commitId":"73ec7304b9e13cf4b9da05f215bd356a84efe0e7","commitMessage":"@@@KAFKA-9748: Extend Streams integration tests for EOS beta (#8441)\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-04-10 01:57:10","modifiedFileCount":"7","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-06-13 02:54:07","codes":[{"authorDate":"2020-04-29 06:04:19","commitOrder":7,"curCode":"    private void produceInitialGlobalTableValues() {\n        final Properties properties = new Properties();\n        properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"someid\");\n        properties.put(ProducerConfig.RETRIES_CONFIG, 1);\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class,\n                        properties),\n                mockTime,\n                true);\n    }\n","date":"2020-04-29 06:04:19","endLine":364,"groupId":"20790","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"produceInitialGlobalTableValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/28/50a5190dc387ea04bcb797784775662fb6959f.src","preCode":"    private void produceInitialGlobalTableValues() throws Exception {\n        final Properties properties = new Properties();\n        properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"someid\");\n        properties.put(ProducerConfig.RETRIES_CONFIG, 1);\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class,\n                        properties),\n                mockTime,\n                true);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableEOSIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"M"},{"authorDate":"2018-06-13 02:54:07","commitOrder":7,"curCode":"    private void produceInitialGlobalTableValues() throws Exception {\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class\n                        ),\n                mockTime);\n    }\n","date":"2018-06-13 02:54:07","endLine":268,"groupId":"20790","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"produceInitialGlobalTableValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/90/0e65276ee94e64634c97cf4aa1c2ca1d34e4c6.src","preCode":"    private void produceInitialGlobalTableValues() throws Exception {\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class\n                        ),\n                mockTime);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"N"}],"commitId":"11fc953c05eb2c8db61c61bc765aa8be0598d638","commitMessage":"@@@KAFKA-9176: Retry on getting local stores from KafkaStreams (#8568)\n\nThis PR fixes and improves two major issues:\n\n1. When calling KafkaStreams#store we can always get an InvalidStateStoreException.  and even waiting for Streams state to become RUNNING is not sufficient (this is also how OptimizedKTableIntegrationTest failed). So I wrapped all the function with a Util wrapper that captures and retries on that exception.\n\n2. While trouble-shooting this issue.  I also realized a potential bug in test-util's produceKeyValuesSynchronously.  which creates a new producer for each of the record to send in that batch --- i.e. if you are sending N records with a single call.  within that call it will create N producers used to send one record each.  which is very slow and costly.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  John Roesler <john@confluent.io>","date":"2020-04-29 06:04:19","modifiedFileCount":"9","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-06-13 02:54:07","codes":[{"authorDate":"2020-05-08 14:01:11","commitOrder":8,"curCode":"    private void produceInitialGlobalTableValues() {\n        final Properties properties = new Properties();\n        properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"someid\");\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n            globalTableTopic,\n            Arrays.asList(\n                new KeyValue<>(1L, \"A\"),\n                new KeyValue<>(2L, \"B\"),\n                new KeyValue<>(3L, \"C\"),\n                new KeyValue<>(4L, \"D\")\n            ),\n            TestUtils.producerConfig(\n                CLUSTER.bootstrapServers(),\n                LongSerializer.class,\n                StringSerializer.class,\n                properties\n            ),\n            mockTime,\n            true\n        );\n    }\n","date":"2020-05-08 14:01:11","endLine":422,"groupId":"20790","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"produceInitialGlobalTableValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/06f67a62115abda2c9650fcb6f9c537f698e64.src","preCode":"    private void produceInitialGlobalTableValues() {\n        final Properties properties = new Properties();\n        properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"someid\");\n        properties.put(ProducerConfig.RETRIES_CONFIG, 1);\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class,\n                        properties),\n                mockTime,\n                true);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableEOSIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"M"},{"authorDate":"2018-06-13 02:54:07","commitOrder":8,"curCode":"    private void produceInitialGlobalTableValues() throws Exception {\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class\n                        ),\n                mockTime);\n    }\n","date":"2018-06-13 02:54:07","endLine":268,"groupId":"20790","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"produceInitialGlobalTableValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/90/0e65276ee94e64634c97cf4aa1c2ca1d34e4c6.src","preCode":"    private void produceInitialGlobalTableValues() throws Exception {\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class\n                        ),\n                mockTime);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"N"}],"commitId":"611831b051080543d94ef5bea9b3aa02b4992140","commitMessage":"@@@KAFKA-9928: Fix flaky GlobalKTableEOSIntegrationTest (#8600)\n\nReviewer: Guozhang Wang <guozhang@confluent.io>","date":"2020-05-08 14:01:11","modifiedFileCount":"7","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-05-12 08:03:34","codes":[{"authorDate":"2020-05-08 14:01:11","commitOrder":9,"curCode":"    private void produceInitialGlobalTableValues() {\n        final Properties properties = new Properties();\n        properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"someid\");\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n            globalTableTopic,\n            Arrays.asList(\n                new KeyValue<>(1L, \"A\"),\n                new KeyValue<>(2L, \"B\"),\n                new KeyValue<>(3L, \"C\"),\n                new KeyValue<>(4L, \"D\")\n            ),\n            TestUtils.producerConfig(\n                CLUSTER.bootstrapServers(),\n                LongSerializer.class,\n                StringSerializer.class,\n                properties\n            ),\n            mockTime,\n            true\n        );\n    }\n","date":"2020-05-08 14:01:11","endLine":422,"groupId":"102738","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"produceInitialGlobalTableValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/57/06f67a62115abda2c9650fcb6f9c537f698e64.src","preCode":"    private void produceInitialGlobalTableValues() {\n        final Properties properties = new Properties();\n        properties.put(ProducerConfig.TRANSACTIONAL_ID_CONFIG, \"someid\");\n\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n            globalTableTopic,\n            Arrays.asList(\n                new KeyValue<>(1L, \"A\"),\n                new KeyValue<>(2L, \"B\"),\n                new KeyValue<>(3L, \"C\"),\n                new KeyValue<>(4L, \"D\")\n            ),\n            TestUtils.producerConfig(\n                CLUSTER.bootstrapServers(),\n                LongSerializer.class,\n                StringSerializer.class,\n                properties\n            ),\n            mockTime,\n            true\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableEOSIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":401,"status":"N"},{"authorDate":"2020-05-12 08:03:34","commitOrder":9,"curCode":"    private void produceInitialGlobalTableValues() {\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class\n                        ),\n                mockTime);\n    }\n","date":"2020-05-12 08:03:34","endLine":375,"groupId":"102738","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"produceInitialGlobalTableValues","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/47/b151dfe5b9b874d8027f5be668124e7e87fa03.src","preCode":"    private void produceInitialGlobalTableValues() throws Exception {\n        IntegrationTestUtils.produceKeyValuesSynchronously(\n                globalTableTopic,\n                Arrays.asList(\n                        new KeyValue<>(1L, \"A\"),\n                        new KeyValue<>(2L, \"B\"),\n                        new KeyValue<>(3L, \"C\"),\n                        new KeyValue<>(4L, \"D\")\n                        ),\n                TestUtils.producerConfig(\n                        CLUSTER.bootstrapServers(),\n                        LongSerializer.class,\n                        StringSerializer.class\n                        ),\n                mockTime);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/integration/GlobalKTableIntegrationTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":360,"status":"M"}],"commitId":"6d0e722f4d14b48030b34418fb538c75fbad69e8","commitMessage":"@@@KAFKA-9949: Fix flaky GlobalKTableIntegrationTest (#8635)\n\nReviewer: Matthias J. Sax <matthias@confluent.io>","date":"2020-05-12 08:03:34","modifiedFileCount":"1","status":"M","submitter":"Guozhang Wang"}]
