[{"authorTime":"2017-01-24 18:04:42","codes":[{"authorDate":"2017-01-24 18:04:42","commitOrder":1,"curCode":"    public void testReadFullyOrFailWithPartialFileChannelReads() throws IOException {\n        FileChannel channelMock = EasyMock.createMock(FileChannel.class);\n        final int bufferSize = 100;\n        ByteBuffer buffer = ByteBuffer.allocate(bufferSize);\n        StringBuilder expectedBufferContent = new StringBuilder();\n        fileChannelMockExpectReadWithRandomBytes(channelMock, expectedBufferContent, bufferSize);\n        EasyMock.replay(channelMock);\n        Utils.readFullyOrFail(channelMock, buffer, 0L, \"test\");\n        assertEquals(\"The buffer should be populated correctly\", expectedBufferContent.toString(),\n                new String(buffer.array()));\n        assertFalse(\"The buffer should be filled\", buffer.hasRemaining());\n        EasyMock.verify(channelMock);\n    }\n","date":"2017-01-24 19:02:20","endLine":222,"groupId":"580","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadFullyOrFailWithPartialFileChannelReads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/4cad68074226cc91d71db864f7acbbdcfcdb88.src","preCode":"    public void testReadFullyOrFailWithPartialFileChannelReads() throws IOException {\n        FileChannel channelMock = EasyMock.createMock(FileChannel.class);\n        final int bufferSize = 100;\n        ByteBuffer buffer = ByteBuffer.allocate(bufferSize);\n        StringBuilder expectedBufferContent = new StringBuilder();\n        fileChannelMockExpectReadWithRandomBytes(channelMock, expectedBufferContent, bufferSize);\n        EasyMock.replay(channelMock);\n        Utils.readFullyOrFail(channelMock, buffer, 0L, \"test\");\n        assertEquals(\"The buffer should be populated correctly\", expectedBufferContent.toString(),\n                new String(buffer.array()));\n        assertFalse(\"The buffer should be filled\", buffer.hasRemaining());\n        EasyMock.verify(channelMock);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"B"},{"authorDate":"2017-01-24 18:04:42","commitOrder":1,"curCode":"    public void testReadFullyWithPartialFileChannelReads() throws IOException {\n        FileChannel channelMock = EasyMock.createMock(FileChannel.class);\n        final int bufferSize = 100;\n        StringBuilder expectedBufferContent = new StringBuilder();\n        fileChannelMockExpectReadWithRandomBytes(channelMock, expectedBufferContent, bufferSize);\n        EasyMock.replay(channelMock);\n        ByteBuffer buffer = ByteBuffer.allocate(bufferSize);\n        Utils.readFully(channelMock, buffer, 0L);\n        assertEquals(\"The buffer should be populated correctly.\", expectedBufferContent.toString(),\n                new String(buffer.array()));\n        assertFalse(\"The buffer should be filled\", buffer.hasRemaining());\n        EasyMock.verify(channelMock);\n    }\n","date":"2017-01-24 19:02:20","endLine":241,"groupId":"581","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadFullyWithPartialFileChannelReads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/4cad68074226cc91d71db864f7acbbdcfcdb88.src","preCode":"    public void testReadFullyWithPartialFileChannelReads() throws IOException {\n        FileChannel channelMock = EasyMock.createMock(FileChannel.class);\n        final int bufferSize = 100;\n        StringBuilder expectedBufferContent = new StringBuilder();\n        fileChannelMockExpectReadWithRandomBytes(channelMock, expectedBufferContent, bufferSize);\n        EasyMock.replay(channelMock);\n        ByteBuffer buffer = ByteBuffer.allocate(bufferSize);\n        Utils.readFully(channelMock, buffer, 0L);\n        assertEquals(\"The buffer should be populated correctly.\", expectedBufferContent.toString(),\n                new String(buffer.array()));\n        assertFalse(\"The buffer should be filled\", buffer.hasRemaining());\n        EasyMock.verify(channelMock);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"B"}],"commitId":"337f576f5979bf8924c5707b338cf4d3c76a53fd","commitMessage":"@@@KAFKA-4576; Log segments close to max size break on fetch\n\n`FileChannel.read` may not fill the destination buffer even if there\nare enough bytes in the channel to do so. Add a couple of utility\nmethods that ensure this and use them from all the relevant places.\n\nAuthor: huxi <huxi@zhenrongbao.com>\nAuthor: amethystic <huxi_2b@hotmail.com>\nAuthor: Ismael Juma <ismael@juma.me.uk>\n\nReviewers: Jun Rao <junrao@gmail.com>.  Jason Gustafson <jason@confluent.io>.  Ismael Juma <ismael@juma.me.uk>\n\nCloses #2304 from amethystic/kafka4576_FileChannel_read\n","date":"2017-01-24 19:02:20","modifiedFileCount":"4","status":"B","submitter":"huxi"},{"authorTime":"2018-10-10 06:55:09","codes":[{"authorDate":"2018-10-10 06:55:09","commitOrder":2,"curCode":"    public void testReadFullyOrFailWithPartialFileChannelReads() throws IOException {\n        FileChannel channelMock = mock(FileChannel.class);\n        final int bufferSize = 100;\n        ByteBuffer buffer = ByteBuffer.allocate(bufferSize);\n        String expectedBufferContent = fileChannelMockExpectReadWithRandomBytes(channelMock, bufferSize);\n        Utils.readFullyOrFail(channelMock, buffer, 0L, \"test\");\n        assertEquals(\"The buffer should be populated correctly\", expectedBufferContent,\n                new String(buffer.array()));\n        assertFalse(\"The buffer should be filled\", buffer.hasRemaining());\n        verify(channelMock, atLeastOnce()).read(any(), anyLong());\n    }\n","date":"2018-10-10 06:55:09","endLine":343,"groupId":"4639","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadFullyOrFailWithPartialFileChannelReads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d5/029b6ed2f68a7c4889bb29e3c5f66d4d362e48.src","preCode":"    public void testReadFullyOrFailWithPartialFileChannelReads() throws IOException {\n        FileChannel channelMock = EasyMock.createMock(FileChannel.class);\n        final int bufferSize = 100;\n        ByteBuffer buffer = ByteBuffer.allocate(bufferSize);\n        StringBuilder expectedBufferContent = new StringBuilder();\n        fileChannelMockExpectReadWithRandomBytes(channelMock, expectedBufferContent, bufferSize);\n        EasyMock.replay(channelMock);\n        Utils.readFullyOrFail(channelMock, buffer, 0L, \"test\");\n        assertEquals(\"The buffer should be populated correctly\", expectedBufferContent.toString(),\n                new String(buffer.array()));\n        assertFalse(\"The buffer should be filled\", buffer.hasRemaining());\n        EasyMock.verify(channelMock);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"},{"authorDate":"2018-10-10 06:55:09","commitOrder":2,"curCode":"    public void testReadFullyWithPartialFileChannelReads() throws IOException {\n        FileChannel channelMock = mock(FileChannel.class);\n        final int bufferSize = 100;\n        String expectedBufferContent = fileChannelMockExpectReadWithRandomBytes(channelMock, bufferSize);\n        ByteBuffer buffer = ByteBuffer.allocate(bufferSize);\n        Utils.readFully(channelMock, buffer, 0L);\n        assertEquals(\"The buffer should be populated correctly.\", expectedBufferContent,\n                new String(buffer.array()));\n        assertFalse(\"The buffer should be filled\", buffer.hasRemaining());\n        verify(channelMock, atLeastOnce()).read(any(), anyLong());\n    }\n","date":"2018-10-10 06:55:09","endLine":360,"groupId":"21057","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadFullyWithPartialFileChannelReads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d5/029b6ed2f68a7c4889bb29e3c5f66d4d362e48.src","preCode":"    public void testReadFullyWithPartialFileChannelReads() throws IOException {\n        FileChannel channelMock = EasyMock.createMock(FileChannel.class);\n        final int bufferSize = 100;\n        StringBuilder expectedBufferContent = new StringBuilder();\n        fileChannelMockExpectReadWithRandomBytes(channelMock, expectedBufferContent, bufferSize);\n        EasyMock.replay(channelMock);\n        ByteBuffer buffer = ByteBuffer.allocate(bufferSize);\n        Utils.readFully(channelMock, buffer, 0L);\n        assertEquals(\"The buffer should be populated correctly.\", expectedBufferContent.toString(),\n                new String(buffer.array()));\n        assertFalse(\"The buffer should be filled\", buffer.hasRemaining());\n        EasyMock.verify(channelMock);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":350,"status":"M"}],"commitId":"578205cadd0bf64d671c6c162229c4975081a9d6","commitMessage":"@@@KAFKA-7439; Replace EasyMock and PowerMock with Mockito in clients module\n\nDevelopment of EasyMock and PowerMock has stagnated while Mockito\ncontinues to be actively developed. With the new Java release cadence. \nit's a problem to depend on libraries that do bytecode manipulation\nand are not actively maintained. In addition.  Mockito is also\neasier to use.\n\nWhile updating the tests.  I attempted to go from failing test to\npassing test. In cases where the updated test passed on the first\nattempt.  I artificially broke it to ensure the test was still doing its\njob.\n\nI included a few improvements that were helpful while making these\nchanges:\n\n1. Better exception if there are no nodes in `leastLoadedNodes`\n2. Always close the producer in `KafkaProducerTest`\n3. requestsInFlight producer metric should not hold a reference to\n`Sender`\n\nFinally.  `Metadata` is no longer final so that we don't need\n`PowerMock` to mock it. It's an internal class.  so it's OK.\n\nAuthor: Ismael Juma <ismael@juma.me.uk>\n\nReviewers: Viktor Somogyi <viktorsomogyi@gmail.com>.  Dong Lin <lindong28@gmail.com>\n\nCloses #5691 from ijuma/kafka-7438-mockito\n","date":"2018-10-10 06:55:09","modifiedFileCount":"19","status":"M","submitter":"Ismael Juma"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2021-01-14 08:17:45","commitOrder":3,"curCode":"    public void testReadFullyOrFailWithPartialFileChannelReads() throws IOException {\n        FileChannel channelMock = mock(FileChannel.class);\n        final int bufferSize = 100;\n        ByteBuffer buffer = ByteBuffer.allocate(bufferSize);\n        String expectedBufferContent = fileChannelMockExpectReadWithRandomBytes(channelMock, bufferSize);\n        Utils.readFullyOrFail(channelMock, buffer, 0L, \"test\");\n        assertEquals(expectedBufferContent, new String(buffer.array()), \"The buffer should be populated correctly\");\n        assertFalse(buffer.hasRemaining(), \"The buffer should be filled\");\n        verify(channelMock, atLeastOnce()).read(any(), anyLong());\n    }\n","date":"2021-01-14 08:17:45","endLine":501,"groupId":"103429","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testReadFullyOrFailWithPartialFileChannelReads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b2/6988b7a1e1a5e8cb24a48504b0e580cc870b4d.src","preCode":"    public void testReadFullyOrFailWithPartialFileChannelReads() throws IOException {\n        FileChannel channelMock = mock(FileChannel.class);\n        final int bufferSize = 100;\n        ByteBuffer buffer = ByteBuffer.allocate(bufferSize);\n        String expectedBufferContent = fileChannelMockExpectReadWithRandomBytes(channelMock, bufferSize);\n        Utils.readFullyOrFail(channelMock, buffer, 0L, \"test\");\n        assertEquals(\"The buffer should be populated correctly\", expectedBufferContent,\n                     new String(buffer.array()));\n        assertFalse(\"The buffer should be filled\", buffer.hasRemaining());\n        verify(channelMock, atLeastOnce()).read(any(), anyLong());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":492,"status":"M"},{"authorDate":"2021-01-14 08:17:45","commitOrder":3,"curCode":"    public void testReadFullyWithPartialFileChannelReads() throws IOException {\n        FileChannel channelMock = mock(FileChannel.class);\n        final int bufferSize = 100;\n        String expectedBufferContent = fileChannelMockExpectReadWithRandomBytes(channelMock, bufferSize);\n        ByteBuffer buffer = ByteBuffer.allocate(bufferSize);\n        Utils.readFully(channelMock, buffer, 0L);\n        assertEquals(expectedBufferContent, new String(buffer.array()), \"The buffer should be populated correctly.\");\n        assertFalse(buffer.hasRemaining(), \"The buffer should be filled\");\n        verify(channelMock, atLeastOnce()).read(any(), anyLong());\n    }\n","date":"2021-01-14 08:17:45","endLine":517,"groupId":"103429","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testReadFullyWithPartialFileChannelReads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b2/6988b7a1e1a5e8cb24a48504b0e580cc870b4d.src","preCode":"    public void testReadFullyWithPartialFileChannelReads() throws IOException {\n        FileChannel channelMock = mock(FileChannel.class);\n        final int bufferSize = 100;\n        String expectedBufferContent = fileChannelMockExpectReadWithRandomBytes(channelMock, bufferSize);\n        ByteBuffer buffer = ByteBuffer.allocate(bufferSize);\n        Utils.readFully(channelMock, buffer, 0L);\n        assertEquals(\"The buffer should be populated correctly.\", expectedBufferContent,\n                     new String(buffer.array()));\n        assertFalse(\"The buffer should be filled\", buffer.hasRemaining());\n        verify(channelMock, atLeastOnce()).read(any(), anyLong());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"}]
