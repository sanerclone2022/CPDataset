[{"authorTime":"2018-04-24 02:41:03","codes":[{"authorDate":"2018-04-24 02:41:03","commitOrder":1,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","date":"2018-04-24 02:41:03","endLine":370,"groupId":"6993","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/16/694d845c19a2002c206e523b87fdd347c8abd5.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"B"},{"authorDate":"2018-04-24 02:41:03","commitOrder":1,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","date":"2018-04-24 02:41:03","endLine":365,"groupId":"6993","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9f/5603bcba645d966e67ef6694dd21675899ad5d.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"B"}],"commitId":"ed51b2cdf5bdac210a6904bead1a2ca6e8411406","commitMessage":"@@@KAFKA-6376; refactor skip metrics in Kafka Streams\n\n* unify skipped records metering\n* log warnings when things get skipped\n* tighten up metrics usage a bit\n\n\n Testing strategy:\nUnit testing of the metrics and the logs should be sufficient.\n\nAuthor: John Roesler <john@confluent.io>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #4812 from vvcephei/kip-274-streams-skip-metrics\n","date":"2018-04-24 02:41:03","modifiedFileCount":"65","status":"B","submitter":"John Roesler"},{"authorTime":"2018-05-23 06:44:37","codes":[{"authorDate":"2018-05-23 06:44:37","commitOrder":2,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","date":"2018-05-23 06:44:37","endLine":377,"groupId":"10401","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/39/95fcf8f938c7842381cb3ffd54536ae5d6fa95.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":359,"status":"M"},{"authorDate":"2018-05-23 06:44:37","commitOrder":2,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","date":"2018-05-23 06:44:37","endLine":372,"groupId":"10401","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/29b50f668d9ef76343e8be74acc11991f68151.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":354,"status":"M"}],"commitId":"133108cdacf7ee1cc4569e797f2cdf9ec60f7fdd","commitMessage":"@@@KAFKA-6850: Add Record Header support to Kafka Streams Processor API (KIP-244) (#4955)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-05-23 06:44:37","modifiedFileCount":"56","status":"M","submitter":"Jorge Quilcate Otoya"},{"authorTime":"2018-11-13 14:18:59","codes":[{"authorDate":"2018-11-13 14:18:59","commitOrder":3,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","date":"2018-11-13 14:18:59","endLine":380,"groupId":"10401","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/00ba37e7694fcd368f8d0040f2f20a44241ca3.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"M"},{"authorDate":"2018-11-13 14:18:59","commitOrder":3,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","date":"2018-11-13 14:18:59","endLine":375,"groupId":"10401","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/cbe83be78f91472b9c05d53f59816b0c309498.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":356,"status":"M"}],"commitId":"12f310d50e7f5b1c18c4f61a119a6cd830da3bc0","commitMessage":"@@@KAFKA-7612: Fix javac warnings and enable warnings as errors (#5900)\n\n- Use Xlint:all with 3 exclusions (filed KAFKA-7613 to remove the exclusions)\n- Use the same javac options when compiling tests (seems accidental that\nwe didn't do this before)\n- Replaced several deprecated method calls with non-deprecated ones:\n  - `KafkaConsumer.poll(long)` and `KafkaConsumer.close(long)`\n  - `Class.newInstance` and `new Integer/Long` (deprecated since Java 9)\n  - `scala.Console` (deprecated in Scala 2.11)\n  - `PartitionData` taking a timestamp (one of them seemingly a bug)\n  - `JsonMappingException` single parameter constructor\n- Fix unnecessary usage of raw types in several places.\n- Add @SuppressWarnings for deprecations.  unchecked and switch fallthrough in\nseveral places.\n- Scala clean-ups (var -> val.  ETA expansion warnings.  avoid reflective calls)\n- Use lambdas to simplify code in a few places\n- Add @SafeVarargs.  fix varargs usage and remove unnecessary `Utils.mkList` method\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Manikumar Reddy <manikumar.reddy@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Stanislav Kozlovski <stanislav_kozlovski@outlook.com>","date":"2018-11-13 14:18:59","modifiedFileCount":"146","status":"M","submitter":"Ismael Juma"},{"authorTime":"2018-12-09 14:49:48","codes":[{"authorDate":"2018-11-13 14:18:59","commitOrder":4,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","date":"2018-11-13 14:18:59","endLine":380,"groupId":"10401","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/00ba37e7694fcd368f8d0040f2f20a44241ca3.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":361,"status":"N"},{"authorDate":"2018-12-09 14:49:48","commitOrder":4,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","date":"2018-12-09 14:49:48","endLine":168,"groupId":"10401","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/ed53f5cf4232f19f2c273022212f43efae1674.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"}],"commitId":"c0353d8ddce88bac6fc04f85dd40cb95b8ca5cf9","commitMessage":"@@@KAFKA-6036: Local Materialization for Source KTable (#5779)\n\nRefactor the materialization for source KTables in the way that:\n\nIf Materialized.as(queryableName) is specified.  materialize;\nIf the downstream operator requires to fetch from this KTable via ValueGetters.  materialize;\nIf the downstream operator requires to send old values.  materialize.\nOtherwise do not materialize the KTable. E.g. builder.table(\"topic\").filter().toStream().to(\"topic\") would not create any state stores.\n\nThere's a couple of minor changes along with PR as well:\n\nKTableImpl's queryableStoreName and isQueryable are merged into queryableStoreName only.  and if it is null it means not queryable. As long as it is not null.  it should be queryable (i.e. internally generated names will not be used any more).\nTo achieve this.  splitted MaterializedInternal.storeName() and MaterializedInternal.queryableName(). The former can be internally generated and will not be exposed to users. QueryableName can be modified to set to the internal store name if we decide to materialize it during the DSL parsing / physical topology generation phase. And only if queryableName is specified the corresponding KTable is determined to be materialized.\n\nFound some overlapping unit tests among KTableImplTest.  and KTableXXTest.  removed them.\n\nThere are a few typing bugs found along the way.  fixed them as well.\n\n-----------------------\n\nThis PR is an illustration of experimenting a poc towards logical materializations.\n\nToday we've logically materialized the KTable for filter / mapValues / transformValues if queryableName is not specified via Materialized.  but whenever users specify queryableName we will still always materialize. My original goal is to also consider logically materialize for queryable stores.  but when implementing it via a wrapped store to apply the transformations on the fly I realized it is tougher than I thought.  because we not only need to support fetch or get.  but also needs to support range queries.  approximateNumEntries.  and isOpen etc as well.  which are not efficient to support. So in the end I'd suggest we still stick with the rule of always materializing if queryableName is specified.  and only consider logical materialization otherwise.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <mjsax@apache.org>","date":"2018-12-09 14:49:48","modifiedFileCount":"32","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-02-15 07:06:47","codes":[{"authorDate":"2019-02-15 07:06:47","commitOrder":5,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","date":"2019-02-15 07:06:47","endLine":334,"groupId":"18170","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/09/2b5a14b8f42a25583ad5337b50a401a60ed343.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":315,"status":"M"},{"authorDate":"2019-02-15 07:06:47","commitOrder":5,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","date":"2019-02-15 07:06:47","endLine":155,"groupId":"18170","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5d/1f5c3d8c8c85450ecfc113f3c83366d85110b2.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(stringSerde, stringSerde)),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(stringSerde, stringSerde)),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"c1918a2b9a9ba282efe92ddb867abef3d6d9b98c","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [part 4] (#5433)\n\nReviewer: John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-02-15 07:06:47","modifiedFileCount":"3","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2019-10-20 04:45:36","codes":[{"authorDate":"2019-10-20 04:45:36","commitOrder":6,"curCode":"    private void shouldLogAndMeterSkippedRecordsDueToNullLeftKey(final String builtInMetricsVersion) {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n                (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n                (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n                null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, builtInMetricsVersion);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertEquals(\n                1.0,\n                getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue()\n            );\n        }\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","date":"2019-10-20 04:45:36","endLine":444,"groupId":"7052","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"(finalStringbuiltInMetricsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/aa003b5d806fbc0a1dec910bc9060ae57ed4c7.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n                (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n                (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n                null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"},{"authorDate":"2019-10-20 04:45:36","commitOrder":6,"curCode":"    private void shouldLogAndMeterSkippedRecordsDueToNullLeftKey(final String builtInMetricsVersion) {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, builtInMetricsVersion);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertEquals(\n                1.0,\n                getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue()\n            );\n        }\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","date":"2019-10-20 04:45:36","endLine":285,"groupId":"7052","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"(finalStringbuiltInMetricsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d5/8ea3e19992b6c0588ba2e10069e4dea9919627.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext();\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        assertEquals(1.0, getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue());\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"2298c7f84fd0e29b304eb11078bfe76ca5b04a97","commitMessage":"@@@KAFKA-8964: Refactor thread-level metrics depending on built-in metrics version (#7474)\n\n* Made commit-over-tasks sensor and skipped-records sensor optional since they are removed in the latest version\n* Refactored methods for sensor creation\n* Adapted unit and integration tests\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2019-10-20 04:45:36","modifiedFileCount":"50","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-04-22 00:25:45","codes":[{"authorDate":"2020-04-22 00:25:45","commitOrder":7,"curCode":"    private void shouldLogAndMeterSkippedRecordsDueToNullLeftKey(final String builtInMetricsVersion) {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n                (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n                (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n                null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, builtInMetricsVersion);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableOuterJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertEquals(\n                1.0,\n                getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue()\n            );\n        }\n    }\n","date":"2020-04-22 00:25:45","endLine":449,"groupId":"7052","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"(finalStringbuiltInMetricsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bc/ebbfe7e1d6e7ee0f38239dda4428d03d5ba8ab.src","preCode":"    private void shouldLogAndMeterSkippedRecordsDueToNullLeftKey(final String builtInMetricsVersion) {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n                (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n                (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n                null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, builtInMetricsVersion);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertEquals(\n                1.0,\n                getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue()\n            );\n        }\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":419,"status":"M"},{"authorDate":"2020-04-22 00:25:45","commitOrder":7,"curCode":"    private void shouldLogAndMeterSkippedRecordsDueToNullLeftKey(final String builtInMetricsVersion) {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, builtInMetricsVersion);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertEquals(\n                1.0,\n                getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue()\n            );\n        }\n    }\n","date":"2020-04-22 00:25:45","endLine":290,"groupId":"7052","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"(finalStringbuiltInMetricsVersion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1d/8a6151d7efdca98a33aaeee36a876b95fa6783.src","preCode":"    private void shouldLogAndMeterSkippedRecordsDueToNullLeftKey(final String builtInMetricsVersion) {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, builtInMetricsVersion);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n        final LogCaptureAppender appender = LogCaptureAppender.createAndRegister();\n        join.process(null, new Change<>(\"new\", \"old\"));\n        LogCaptureAppender.unregister(appender);\n\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertEquals(\n                1.0,\n                getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue()\n            );\n        }\n        assertThat(appender.getMessages(), hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"M"}],"commitId":"11d8ef76ff5348a48eb1c37cddf244e399666d59","commitMessage":"@@@MINOR: Improve usage of LogCaptureAppender (#8508)\n\nReviewers: Ismael Juma <ismael@confluent.io>.  John Roesler <john@confluent.io>","date":"2020-04-22 00:25:45","modifiedFileCount":"40","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":8,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n                (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n                (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n                null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableOuterJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","date":"2021-06-01 20:05:08","endLine":428,"groupId":"19959","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/da184f9cee6bf747f434461767694afe85e729.src","preCode":"    private void shouldLogAndMeterSkippedRecordsDueToNullLeftKey(final String builtInMetricsVersion) {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n                (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n                (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n                null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, builtInMetricsVersion);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableOuterJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertEquals(\n                1.0,\n                getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue()\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":8,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","date":"2021-06-01 20:05:08","endLine":271,"groupId":"19959","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c7/de7f70fcc0554c61958d119fad263f696215e8.src","preCode":"    private void shouldLogAndMeterSkippedRecordsDueToNullLeftKey(final String builtInMetricsVersion) {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, builtInMetricsVersion);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n\n        if (StreamsConfig.METRICS_0100_TO_24.equals(builtInMetricsVersion)) {\n            assertEquals(\n                1.0,\n                getMetricByName(context.metrics().metrics(), \"skipped-records-total\", \"stream-metrics\").metricValue()\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-10 13:51:36","codes":[{"authorDate":"2021-06-10 13:51:36","commitOrder":9,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n                (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n                (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n                null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableOuterJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","date":"2021-06-10 13:51:36","endLine":429,"groupId":"10348","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e4/1d654073642beb3419c565b50579f525c95427.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n                (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n                (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n                null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableOuterJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"M"},{"authorDate":"2021-06-10 13:51:36","commitOrder":9,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","date":"2021-06-10 13:51:36","endLine":272,"groupId":"10348","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/99/1ee5945296dc63ee13fe8ad4c0890c5500ac9e.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"}],"commitId":"953ec9810099d6e5f41541de46c0ceebf4372790","commitMessage":"@@@MINOR: Improve Kafka Streams JavaDocs with regard to record metadata (#10810)\n\nReviewers: Luke Chen <howuon@gmail.com>.  Josep Prat <josep.prat@aiven.io>.  John Roesler <john@confluent.io>","date":"2021-06-10 13:51:36","modifiedFileCount":"28","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-06-22 22:17:11","codes":[{"authorDate":"2021-06-22 22:17:11","commitOrder":10,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final org.apache.kafka.streams.processor.Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n                (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n                (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n                null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableOuterJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","date":"2021-06-22 22:17:11","endLine":429,"groupId":"101565","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/3cf3b746a007e81cd3b2eaf9d89587761a50f3.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableOuterJoin<>(\n                (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n                (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n                null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableOuterJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableOuterJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"M"},{"authorDate":"2021-06-22 22:17:11","commitOrder":10,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final org.apache.kafka.streams.processor.Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","date":"2021-06-22 22:17:11","endLine":272,"groupId":"101565","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/caa9fea44946a664bb2d29f58f5bbb2afcddf7.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"}],"commitId":"c3475081c5e8228e9bd3a45022a93d61e542f72e","commitMessage":"@@@KAFKA-10546: Deprecate old PAPI (#10869)\n\n* Deprecate the old Processor API\n* Suppress warnings on all internal usages of the old API\n  (which will be migrated in other child tickets of KAFKA-8410)\n* Add new KStream#process methods.  since KAFKA-10603 has not seen any action.\n","date":"2021-06-22 22:17:11","modifiedFileCount":"124","status":"M","submitter":"John Roesler"}]
