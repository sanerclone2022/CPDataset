[{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":8,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKeyWithBuiltInMetricsVersionLatest() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableRightJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, StreamsConfig.METRICS_LATEST);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableRightJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","date":"2021-06-01 20:05:08","endLine":62,"groupId":"6560","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKeyWithBuiltInMetricsVersionLatest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c5/e211d0c39c5ca2a8167ed9350cb2ec777f72b8.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKeyWithBuiltInMetricsVersionLatest() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableRightJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, StreamsConfig.METRICS_LATEST);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableRightJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableRightJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"},{"authorDate":"2021-06-01 20:05:08","commitOrder":8,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","date":"2021-06-01 20:05:08","endLine":271,"groupId":"19959","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c7/de7f70fcc0554c61958d119fad263f696215e8.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"MB"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-10 13:51:36","codes":[{"authorDate":"2021-06-10 13:51:36","commitOrder":9,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKeyWithBuiltInMetricsVersionLatest() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableRightJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, StreamsConfig.METRICS_LATEST);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableRightJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","date":"2021-06-10 13:51:36","endLine":63,"groupId":"6560","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKeyWithBuiltInMetricsVersionLatest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/9ab437b3c2a74b6686ce8ac98e64dda6679f18.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKeyWithBuiltInMetricsVersionLatest() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableRightJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, StreamsConfig.METRICS_LATEST);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableRightJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableRightJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2021-06-10 13:51:36","commitOrder":9,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","date":"2021-06-10 13:51:36","endLine":272,"groupId":"10348","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/99/1ee5945296dc63ee13fe8ad4c0890c5500ac9e.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, null, -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"}],"commitId":"953ec9810099d6e5f41541de46c0ceebf4372790","commitMessage":"@@@MINOR: Improve Kafka Streams JavaDocs with regard to record metadata (#10810)\n\nReviewers: Luke Chen <howuon@gmail.com>.  Josep Prat <josep.prat@aiven.io>.  John Roesler <john@confluent.io>","date":"2021-06-10 13:51:36","modifiedFileCount":"28","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-06-22 22:17:11","codes":[{"authorDate":"2021-06-22 22:17:11","commitOrder":10,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKeyWithBuiltInMetricsVersionLatest() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final org.apache.kafka.streams.processor.Processor<String, Change<String>> join = new KTableKTableRightJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, StreamsConfig.METRICS_LATEST);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableRightJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","date":"2021-06-22 22:17:11","endLine":63,"groupId":"6560","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKeyWithBuiltInMetricsVersionLatest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e8/d9c6878b3904daf287d1fca1867c93cc8d0fb9.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKeyWithBuiltInMetricsVersionLatest() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableRightJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, StreamsConfig.METRICS_LATEST);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableRightJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableRightJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2021-06-22 22:17:11","commitOrder":10,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final org.apache.kafka.streams.processor.Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","date":"2021-06-22 22:17:11","endLine":272,"groupId":"10348","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/caa9fea44946a664bb2d29f58f5bbb2afcddf7.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"}],"commitId":"c3475081c5e8228e9bd3a45022a93d61e542f72e","commitMessage":"@@@KAFKA-10546: Deprecate old PAPI (#10869)\n\n* Deprecate the old Processor API\n* Suppress warnings on all internal usages of the old API\n  (which will be migrated in other child tickets of KAFKA-8410)\n* Add new KStream#process methods.  since KAFKA-10603 has not seen any action.\n","date":"2021-06-22 22:17:11","modifiedFileCount":"124","status":"M","submitter":"John Roesler"},{"authorTime":"2021-06-22 22:17:11","codes":[{"authorDate":"2021-06-29 19:00:35","commitOrder":11,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKeyWithBuiltInMetricsVersionLatest() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final org.apache.kafka.streams.processor.Processor<String, Change<String>> join = new KTableKTableRightJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, StreamsConfig.METRICS_LATEST);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableRightJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getEvents().stream()\n                    .filter(e -> e.getLevel().equals(\"WARN\"))\n                    .map(Event::getMessage)\n                    .collect(Collectors.toList()),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","date":"2021-06-29 19:00:35","endLine":68,"groupId":"101567","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKeyWithBuiltInMetricsVersionLatest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/56/d9c9944f58c991f4583c81e60805f3aef625f1.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKeyWithBuiltInMetricsVersionLatest() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final org.apache.kafka.streams.processor.Processor<String, Change<String>> join = new KTableKTableRightJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        props.setProperty(StreamsConfig.BUILT_IN_METRICS_VERSION_CONFIG, StreamsConfig.METRICS_LATEST);\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableRightJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableRightJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"},{"authorDate":"2021-06-22 22:17:11","commitOrder":11,"curCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final org.apache.kafka.streams.processor.Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","date":"2021-06-22 22:17:11","endLine":272,"groupId":"101567","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldLogAndMeterSkippedRecordsDueToNullLeftKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/caa9fea44946a664bb2d29f58f5bbb2afcddf7.src","preCode":"    public void shouldLogAndMeterSkippedRecordsDueToNullLeftKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        @SuppressWarnings(\"unchecked\")\n        final org.apache.kafka.streams.processor.Processor<String, Change<String>> join = new KTableKTableInnerJoin<>(\n            (KTableImpl<String, String, String>) builder.table(\"left\", Consumed.with(Serdes.String(), Serdes.String())),\n            (KTableImpl<String, String, String>) builder.table(\"right\", Consumed.with(Serdes.String(), Serdes.String())),\n            null\n        ).get();\n\n        final MockProcessorContext context = new MockProcessorContext(props);\n        context.setRecordMetadata(\"left\", -1, -2, new RecordHeaders(), -3);\n        join.init(context);\n\n        try (final LogCaptureAppender appender = LogCaptureAppender.createAndRegister(KTableKTableInnerJoin.class)) {\n            join.process(null, new Change<>(\"new\", \"old\"));\n\n            assertThat(\n                appender.getMessages(),\n                hasItem(\"Skipping record due to null key. change=[(new<-old)] topic=[left] partition=[-1] offset=[-2]\")\n            );\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableKTableInnerJoinTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"N"}],"commitId":"dc6805df732532ff4fbc0b2aa92c09cc19604c93","commitMessage":"@@@MINOR: Improve test of log messages for dropped records (#10920)\n\n\nReviewers: Luke Chen <showuon@gmail.com>.   Boyang Chen <boyang@apache.org> ","date":"2021-06-29 19:00:35","modifiedFileCount":"4","status":"M","submitter":"Bruno Cadonna"}]
