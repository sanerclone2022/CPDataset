[{"authorTime":"2021-05-05 18:26:51","codes":[{"authorDate":"2021-05-05 18:26:51","commitOrder":1,"curCode":"    public void shouldSkipEntriesWhereValueHasBeenEvictedFromCacheReverseRange() {\n        final int entrySize = memoryCacheEntrySize(new byte[1], new byte[1], \"\");\n        final ThreadCache cache = setupThreadCache(4, 0, entrySize * 5, true);\n        assertEquals(5, cache.size());\n        \r\n        cache.put(namespace, Bytes.wrap(new byte[]{6}), dirtyEntry(new byte[]{6}));\n        final ThreadCache.MemoryLRUCacheBytesIterator range = cache.reverseRange(namespace, Bytes.wrap(new byte[]{0}), Bytes.wrap(new byte[]{5}));\n        assertEquals(Bytes.wrap(new byte[]{3}), range.peekNextKey());\n    }\n","date":"2021-05-05 18:26:51","endLine":384,"groupId":"16603","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSkipEntriesWhereValueHasBeenEvictedFromCacheReverseRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c4/49de9d5231a43d24199c8406afde01e2df5db4.src","preCode":"    public void shouldSkipEntriesWhereValueHasBeenEvictedFromCacheReverseRange() {\n        final int entrySize = memoryCacheEntrySize(new byte[1], new byte[1], \"\");\n        final ThreadCache cache = setupThreadCache(4, 0, entrySize * 5, true);\n        assertEquals(5, cache.size());\n        \r\n        cache.put(namespace, Bytes.wrap(new byte[]{6}), dirtyEntry(new byte[]{6}));\n        final ThreadCache.MemoryLRUCacheBytesIterator range = cache.reverseRange(namespace, Bytes.wrap(new byte[]{0}), Bytes.wrap(new byte[]{5}));\n        assertEquals(Bytes.wrap(new byte[]{3}), range.peekNextKey());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ThreadCacheTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"B"},{"authorDate":"2021-05-05 18:26:51","commitOrder":1,"curCode":"    public void shouldReturnAllUnevictedValuesFromCache() {\n        final int entrySize = memoryCacheEntrySize(new byte[1], new byte[1], \"\");\n        final ThreadCache cache = setupThreadCache(0, 5, entrySize * 5, false);\n        assertEquals(5, cache.size());\n        \r\n        cache.put(namespace, Bytes.wrap(new byte[]{6}), dirtyEntry(new byte[]{6}));\n        final ThreadCache.MemoryLRUCacheBytesIterator range = cache.all(namespace);\n        assertEquals(Bytes.wrap(new byte[]{1}), range.peekNextKey());\n    }\n","date":"2021-05-05 18:26:51","endLine":425,"groupId":"16603","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldReturnAllUnevictedValuesFromCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c4/49de9d5231a43d24199c8406afde01e2df5db4.src","preCode":"    public void shouldReturnAllUnevictedValuesFromCache() {\n        final int entrySize = memoryCacheEntrySize(new byte[1], new byte[1], \"\");\n        final ThreadCache cache = setupThreadCache(0, 5, entrySize * 5, false);\n        assertEquals(5, cache.size());\n        \r\n        cache.put(namespace, Bytes.wrap(new byte[]{6}), dirtyEntry(new byte[]{6}));\n        final ThreadCache.MemoryLRUCacheBytesIterator range = cache.all(namespace);\n        assertEquals(Bytes.wrap(new byte[]{1}), range.peekNextKey());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ThreadCacheTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"B"}],"commitId":"9a71468cb0e5fc9faeba39b56f36d0c93ca73c59","commitMessage":"@@@KAFKA-10767: Adding test cases for all.  reverseAll and reverseRange for ThreadCache (#9779)\n\nThe test cases for ThreaCache didn't have the corresponding unit tests for all.  reverseAll and reverseRange methods. This PR aims to add the same.\n\nReviewers: Bruno Cadonna <cadonna@apache.org>","date":"2021-05-05 18:26:51","modifiedFileCount":"1","status":"B","submitter":"vamossagar12"},{"authorTime":"2021-06-10 13:51:36","codes":[{"authorDate":"2021-06-10 13:51:36","commitOrder":2,"curCode":"    public void shouldSkipEntriesWhereValueHasBeenEvictedFromCacheReverseRange() {\n        final long entrySize = memoryCacheEntrySize(new byte[1], new byte[1], \"\");\n        final ThreadCache cache = setupThreadCache(4, 0, entrySize * 5L, true);\n        assertEquals(5, cache.size());\n        \r\n        cache.put(namespace, Bytes.wrap(new byte[]{6}), dirtyEntry(new byte[]{6}));\n        final ThreadCache.MemoryLRUCacheBytesIterator range = cache.reverseRange(namespace, Bytes.wrap(new byte[]{0}), Bytes.wrap(new byte[]{5}));\n        assertEquals(Bytes.wrap(new byte[]{3}), range.peekNextKey());\n    }\n","date":"2021-06-10 13:51:36","endLine":385,"groupId":"10818","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldSkipEntriesWhereValueHasBeenEvictedFromCacheReverseRange","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/5d29595bd6837b2fa4e0c66df43d3925da7183.src","preCode":"    public void shouldSkipEntriesWhereValueHasBeenEvictedFromCacheReverseRange() {\n        final int entrySize = memoryCacheEntrySize(new byte[1], new byte[1], \"\");\n        final ThreadCache cache = setupThreadCache(4, 0, entrySize * 5, true);\n        assertEquals(5, cache.size());\n        \r\n        cache.put(namespace, Bytes.wrap(new byte[]{6}), dirtyEntry(new byte[]{6}));\n        final ThreadCache.MemoryLRUCacheBytesIterator range = cache.reverseRange(namespace, Bytes.wrap(new byte[]{0}), Bytes.wrap(new byte[]{5}));\n        assertEquals(Bytes.wrap(new byte[]{3}), range.peekNextKey());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ThreadCacheTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":377,"status":"M"},{"authorDate":"2021-06-10 13:51:36","commitOrder":2,"curCode":"    public void shouldReturnAllUnevictedValuesFromCache() {\n        final long entrySize = memoryCacheEntrySize(new byte[1], new byte[1], \"\");\n        final ThreadCache cache = setupThreadCache(0, 5, entrySize * 5L, false);\n        assertEquals(5, cache.size());\n        \r\n        cache.put(namespace, Bytes.wrap(new byte[]{6}), dirtyEntry(new byte[]{6}));\n        final ThreadCache.MemoryLRUCacheBytesIterator range = cache.all(namespace);\n        assertEquals(Bytes.wrap(new byte[]{1}), range.peekNextKey());\n    }\n","date":"2021-06-10 13:51:36","endLine":426,"groupId":"10818","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldReturnAllUnevictedValuesFromCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/5d29595bd6837b2fa4e0c66df43d3925da7183.src","preCode":"    public void shouldReturnAllUnevictedValuesFromCache() {\n        final int entrySize = memoryCacheEntrySize(new byte[1], new byte[1], \"\");\n        final ThreadCache cache = setupThreadCache(0, 5, entrySize * 5, false);\n        assertEquals(5, cache.size());\n        \r\n        cache.put(namespace, Bytes.wrap(new byte[]{6}), dirtyEntry(new byte[]{6}));\n        final ThreadCache.MemoryLRUCacheBytesIterator range = cache.all(namespace);\n        assertEquals(Bytes.wrap(new byte[]{1}), range.peekNextKey());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ThreadCacheTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"}],"commitId":"953ec9810099d6e5f41541de46c0ceebf4372790","commitMessage":"@@@MINOR: Improve Kafka Streams JavaDocs with regard to record metadata (#10810)\n\nReviewers: Luke Chen <howuon@gmail.com>.  Josep Prat <josep.prat@aiven.io>.  John Roesler <john@confluent.io>","date":"2021-06-10 13:51:36","modifiedFileCount":"28","status":"M","submitter":"Matthias J. Sax"}]
