[{"authorTime":"2018-01-17 02:47:29","codes":[{"authorDate":"2018-01-17 02:47:29","commitOrder":12,"curCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            new ValueTransformerSupplier<Number, Integer>() {\n                public ValueTransformer<Number, Integer> get() {\n                    return new ValueTransformer<Number, Integer>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public Integer transform(Number value) {\n                            total += value.intValue();\n                            return total;\n                        }\n\n                        @Override\n                        public Integer punctuate(long timestamp) {\n                            return null;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transformValues(valueTransformerSupplier).process(processor);\n\n        driver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, expectedKey * 10);\n        }\n        String[] expected = {\"1:10\", \"10:110\", \"100:1110\", \"1000:11110\"};\n\n        assertArrayEquals(expected, processor.processed.toArray());\n    }\n","date":"2018-01-17 02:47:29","endLine":94,"groupId":"14477","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/34fabb12a52f5f2e3285bb10ad8dcf5b66e171.src","preCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            new ValueTransformerSupplier<Number, Integer>() {\n                public ValueTransformer<Number, Integer> get() {\n                    return new ValueTransformer<Number, Integer>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public Integer transform(Number value) {\n                            total += value.intValue();\n                            return total;\n                        }\n\n                        @Override\n                        public Integer punctuate(long timestamp) {\n                            return null;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transformValues(valueTransformerSupplier).process(processor);\n\n        driver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, expectedKey * 10);\n        }\n        String[] expected = {\"1:10\", \"10:110\", \"100:1110\", \"1000:11110\"};\n\n        assertArrayEquals(expected, processor.processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"MB"},{"authorDate":"2018-01-17 02:47:29","commitOrder":12,"curCode":"    public void testTransformWithKey() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n                new ValueTransformerWithKeySupplier<Integer, Number, Integer>() {\n            public ValueTransformerWithKey<Integer, Number, Integer> get() {\n                return new ValueTransformerWithKey<Integer, Number, Integer>() {\n                    private int total = 0;\n                    @Override\n                    public void init(final ProcessorContext context) {\n\n                    }\n                    @Override\n                    public Integer transform(final Integer readOnlyKey, final Number value) {\n                        total += value.intValue() + readOnlyKey;\n                        return total;\n                    }\n\n                    @Override\n                    public void close() {\n\n                    }\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transformValues(valueTransformerSupplier).process(processor);\n\n        driver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, expectedKey * 10);\n        }\n        String[] expected = {\"1:11\", \"10:121\", \"100:1221\", \"1000:12221\"};\n\n        assertArrayEquals(expected, processor.processed.toArray());\n    }\n","date":"2018-01-17 02:47:29","endLine":137,"groupId":"9412","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1b/34fabb12a52f5f2e3285bb10ad8dcf5b66e171.src","preCode":"    public void testTransformWithKey() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n                new ValueTransformerWithKeySupplier<Integer, Number, Integer>() {\n            public ValueTransformerWithKey<Integer, Number, Integer> get() {\n                return new ValueTransformerWithKey<Integer, Number, Integer>() {\n                    private int total = 0;\n                    @Override\n                    public void init(final ProcessorContext context) {\n\n                    }\n                    @Override\n                    public Integer transform(final Integer readOnlyKey, final Number value) {\n                        total += value.intValue() + readOnlyKey;\n                        return total;\n                    }\n\n                    @Override\n                    public void close() {\n\n                    }\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transformValues(valueTransformerSupplier).process(processor);\n\n        driver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, expectedKey * 10);\n        }\n        String[] expected = {\"1:11\", \"10:121\", \"100:1221\", \"1000:12221\"};\n\n        assertArrayEquals(expected, processor.processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"B"}],"commitId":"bcc712b45820da74b44209857ebbf7b9d59e0ed7","commitMessage":"@@@KAFKA-4218: Enable access to key in ValueTransformer and ValueMapper\n\nThis PR is the partial implementation for KIP-149. As the discussion for this KIP is still ongoing.  I made a PR on the \"safe\" portions of the KIP (so that it can be included in the next release) which are 1) `ValueMapperWithKey`.  2) `ValueTransformerWithKeySupplier`.  and 3) `ValueTransformerWithKey`.\n\nAuthor: Jeyhun Karimov <je.karimov@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #4309 from jeyhunkarimov/KIP-149_hope_last\n","date":"2018-01-17 02:47:29","modifiedFileCount":"17","status":"M","submitter":"Jeyhun Karimov"},{"authorTime":"2018-04-27 02:30:42","codes":[{"authorDate":"2018-04-27 02:30:42","commitOrder":13,"curCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            new ValueTransformerSupplier<Number, Integer>() {\n                public ValueTransformer<Number, Integer> get() {\n                    return new ValueTransformer<Number, Integer>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public Integer transform(Number value) {\n                            total += value.intValue();\n                            return total;\n                        }\n\n                        @Override\n                        public Integer punctuate(long timestamp) {\n                            return null;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transformValues(valueTransformerSupplier).process(processor);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n        }\n        String[] expected = {\"1:10\", \"10:110\", \"100:1110\", \"1000:11110\"};\n\n        assertArrayEquals(expected, processor.processed.toArray());\n    }\n","date":"2018-04-27 02:30:42","endLine":122,"groupId":"14477","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/59/a6a212f89459bc1828e38f4ad956598ca228da.src","preCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            new ValueTransformerSupplier<Number, Integer>() {\n                public ValueTransformer<Number, Integer> get() {\n                    return new ValueTransformer<Number, Integer>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public Integer transform(Number value) {\n                            total += value.intValue();\n                            return total;\n                        }\n\n                        @Override\n                        public Integer punctuate(long timestamp) {\n                            return null;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transformValues(valueTransformerSupplier).process(processor);\n\n        driver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, expectedKey * 10);\n        }\n        String[] expected = {\"1:10\", \"10:110\", \"100:1110\", \"1000:11110\"};\n\n        assertArrayEquals(expected, processor.processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2018-04-27 02:30:42","commitOrder":13,"curCode":"    public void testTransformWithKey() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n                new ValueTransformerWithKeySupplier<Integer, Number, Integer>() {\n            public ValueTransformerWithKey<Integer, Number, Integer> get() {\n                return new ValueTransformerWithKey<Integer, Number, Integer>() {\n                    private int total = 0;\n                    @Override\n                    public void init(final ProcessorContext context) {\n\n                    }\n                    @Override\n                    public Integer transform(final Integer readOnlyKey, final Number value) {\n                        total += value.intValue() + readOnlyKey;\n                        return total;\n                    }\n\n                    @Override\n                    public void close() {\n\n                    }\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transformValues(valueTransformerSupplier).process(processor);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n        }\n        String[] expected = {\"1:11\", \"10:121\", \"100:1221\", \"1000:12221\"};\n\n        assertArrayEquals(expected, processor.processed.toArray());\n    }\n","date":"2018-04-27 02:30:42","endLine":166,"groupId":"9412","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/59/a6a212f89459bc1828e38f4ad956598ca228da.src","preCode":"    public void testTransformWithKey() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n                new ValueTransformerWithKeySupplier<Integer, Number, Integer>() {\n            public ValueTransformerWithKey<Integer, Number, Integer> get() {\n                return new ValueTransformerWithKey<Integer, Number, Integer>() {\n                    private int total = 0;\n                    @Override\n                    public void init(final ProcessorContext context) {\n\n                    }\n                    @Override\n                    public Integer transform(final Integer readOnlyKey, final Number value) {\n                        total += value.intValue() + readOnlyKey;\n                        return total;\n                    }\n\n                    @Override\n                    public void close() {\n\n                    }\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transformValues(valueTransformerSupplier).process(processor);\n\n        driver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            driver.process(topicName, expectedKey, expectedKey * 10);\n        }\n        String[] expected = {\"1:11\", \"10:121\", \"100:1221\", \"1000:12221\"};\n\n        assertArrayEquals(expected, processor.processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"885abbfcd40aab57acec278d976956f07be15090","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [partial] (#4832)\n\n* Remove ProcessorTopologyTestDriver from TopologyTest\n* Fix ProcessorTopologyTest\n* Remove ProcessorTopologyTestDriver and InternalTopologyAccessor\n* Partially refactored StreamsBuilderTest but missing one test\n* Refactor KStreamBuilderTest\n* Refactor AbstractStreamTest\n* Further cleanup of AbstractStreamTest\n* Refactor GlobalKTableJoinsTest\n* Refactor InternalStreamsBuilderTest\n* Fix circular dependency in build.gradle\n* Refactor KGroupedStreamImplTest\n* Partial modifications to KGroupedTableImplTest\n* Refactor KGroupedTableImplTest\n* Refactor KStreamBranchTest\n* Refactor KStreamFilterTest\n* Refactor KStreamFlatMapTest KStreamFlatMapValuesTest\n* Refactor KStreamForeachTest\n* Refactor KStreamGlobalKTableJoinTest\n* Refactor KStreamGlobalKTableLeftJoinTest\n* Refactor KStreamImplTest\n* Refactor KStreamImplTest\n* Refactor KStreamKStreamJoinTest\n* Refactor KStreamKStreamLeftJoinTest\n* Refactor KStreamKTableJoinTest\n* Refactor KStreamKTableLeftJoinTest\n* Refactor KStreamMapTest and KStreamMapValuesTest\n* Refactor KStreamPeekTest and KStreamTransformTest\n* Refactor KStreamSelectKeyTest\n* Refactor KStreamTransformValuesTest\n* Refactor KStreamWindowAggregateTest\n* Add Depercation anotation to KStreamTestDriver and rollback failing tests in StreamsBuilderTest and KTableAggregateTest\n* Refactor KTableFilterTest\n* Refactor KTableForeachTest\n* Add getter for ProcessorTopology.  and simplify tests in StreamsBuilderTest\n* Refactor KTableImplTest\n* Remove unused imports\n* Refactor KTableAggregateTest\n* Fix style errors\n* Fix gradle build\n* Address reviewer comments:\n  - Remove properties new instance\n  - Remove extraneous line\n  - Remove unnecessary TopologyTestDriver instances from StreamsBuilderTest\n  - Move props.clear() to @After\n  - Clarify use of timestamp in KStreamFlatMapValuesTest\n  - Keep test using old Punctuator in KStreamTransformTest\n  - Add comment to clarify clock advances in KStreamTransformTest\n  - Add TopologyTestDriverWrapper class to access the protected constructor of TopologyTestDriver\n  - Revert KTableImplTest.testRepartition to KStreamTestDriver to avoid exposing the TopologyTestDriver processor topology\n  - Revert partially migrated classes: KTableAggregateTest.  KTableFilterTest.  and KTableImplTest\n* Rebase on current trunk an fix conflicts\n\nReviewers: Matthias J Sax <matthias@confluentio>.  Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2018-04-27 02:30:42","modifiedFileCount":"33","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-05-04 23:42:01","codes":[{"authorDate":"2018-05-04 23:42:01","commitOrder":14,"curCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            new ValueTransformerSupplier<Number, Integer>() {\n                public ValueTransformer<Number, Integer> get() {\n                    return new ValueTransformer<Number, Integer>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public Integer transform(Number value) {\n                            total += value.intValue();\n                            return total;\n                        }\n\n                        @Override\n                        public Integer punctuate(long timestamp) {\n                            return null;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n        }\n        String[] expected = {\"1:10\", \"10:110\", \"100:1110\", \"1000:11110\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2018-05-04 23:42:01","endLine":123,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/fc813077ef4e67eafe3e5fb32d639b4a0fdea2.src","preCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            new ValueTransformerSupplier<Number, Integer>() {\n                public ValueTransformer<Number, Integer> get() {\n                    return new ValueTransformer<Number, Integer>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public Integer transform(Number value) {\n                            total += value.intValue();\n                            return total;\n                        }\n\n                        @Override\n                        public Integer punctuate(long timestamp) {\n                            return null;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transformValues(valueTransformerSupplier).process(processor);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n        }\n        String[] expected = {\"1:10\", \"10:110\", \"100:1110\", \"1000:11110\"};\n\n        assertArrayEquals(expected, processor.processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2018-05-04 23:42:01","commitOrder":14,"curCode":"    public void testTransformWithKey() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n                new ValueTransformerWithKeySupplier<Integer, Number, Integer>() {\n            public ValueTransformerWithKey<Integer, Number, Integer> get() {\n                return new ValueTransformerWithKey<Integer, Number, Integer>() {\n                    private int total = 0;\n                    @Override\n                    public void init(final ProcessorContext context) {\n\n                    }\n                    @Override\n                    public Integer transform(final Integer readOnlyKey, final Number value) {\n                        total += value.intValue() + readOnlyKey;\n                        return total;\n                    }\n\n                    @Override\n                    public void close() {\n\n                    }\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n        }\n        String[] expected = {\"1:11\", \"10:121\", \"100:1221\", \"1000:12221\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2018-05-04 23:42:01","endLine":166,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/fc813077ef4e67eafe3e5fb32d639b4a0fdea2.src","preCode":"    public void testTransformWithKey() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n                new ValueTransformerWithKeySupplier<Integer, Number, Integer>() {\n            public ValueTransformerWithKey<Integer, Number, Integer> get() {\n                return new ValueTransformerWithKey<Integer, Number, Integer>() {\n                    private int total = 0;\n                    @Override\n                    public void init(final ProcessorContext context) {\n\n                    }\n                    @Override\n                    public Integer transform(final Integer readOnlyKey, final Number value) {\n                        total += value.intValue() + readOnlyKey;\n                        return total;\n                    }\n\n                    @Override\n                    public void close() {\n\n                    }\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transformValues(valueTransformerSupplier).process(processor);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n        }\n        String[] expected = {\"1:11\", \"10:121\", \"100:1221\", \"1000:12221\"};\n\n        assertArrayEquals(expected, processor.processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"af983267be7a2d0f81527f5a348af377f30caee4","commitMessage":"@@@MINOR: Removed deprecated schedule function (#4908)\n\nWhile working on this.  I also refactored the MockProcessor out of the MockProcessorSupplier to cleanup the unit test paths.\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-05-04 23:42:01","modifiedFileCount":"62","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-05-08 00:21:20","codes":[{"authorDate":"2018-05-08 00:21:20","commitOrder":15,"curCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            new ValueTransformerSupplier<Number, Integer>() {\n                public ValueTransformer<Number, Integer> get() {\n                    return new ValueTransformer<Number, Integer>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public Integer transform(Number value) {\n                            total += value.intValue();\n                            return total;\n                        }\n\n                        @Override\n                        public Integer punctuate(long timestamp) {\n                            return null;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        String[] expected = {\"1:10\", \"10:110\", \"100:1110\", \"1000:11110\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2018-05-08 00:21:20","endLine":97,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/9e6f1333f44664c2caaa63e2f1b095f8ccb8c7.src","preCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            new ValueTransformerSupplier<Number, Integer>() {\n                public ValueTransformer<Number, Integer> get() {\n                    return new ValueTransformer<Number, Integer>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public Integer transform(Number value) {\n                            total += value.intValue();\n                            return total;\n                        }\n\n                        @Override\n                        public Integer punctuate(long timestamp) {\n                            return null;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n        }\n        String[] expected = {\"1:10\", \"10:110\", \"100:1110\", \"1000:11110\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2018-05-08 00:21:20","commitOrder":15,"curCode":"    public void testTransformWithKey() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n                new ValueTransformerWithKeySupplier<Integer, Number, Integer>() {\n            public ValueTransformerWithKey<Integer, Number, Integer> get() {\n                return new ValueTransformerWithKey<Integer, Number, Integer>() {\n                    private int total = 0;\n                    @Override\n                    public void init(final ProcessorContext context) {\n\n                    }\n                    @Override\n                    public Integer transform(final Integer readOnlyKey, final Number value) {\n                        total += value.intValue() + readOnlyKey;\n                        return total;\n                    }\n\n                    @Override\n                    public void close() {\n\n                    }\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        String[] expected = {\"1:11\", \"10:121\", \"100:1221\", \"1000:12221\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2018-05-08 00:21:20","endLine":140,"groupId":"22589","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/9e6f1333f44664c2caaa63e2f1b095f8ccb8c7.src","preCode":"    public void testTransformWithKey() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n                new ValueTransformerWithKeySupplier<Integer, Number, Integer>() {\n            public ValueTransformerWithKey<Integer, Number, Integer> get() {\n                return new ValueTransformerWithKey<Integer, Number, Integer>() {\n                    private int total = 0;\n                    @Override\n                    public void init(final ProcessorContext context) {\n\n                    }\n                    @Override\n                    public Integer transform(final Integer readOnlyKey, final Number value) {\n                        total += value.intValue() + readOnlyKey;\n                        return total;\n                    }\n\n                    @Override\n                    public void close() {\n\n                    }\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        driver = new TopologyTestDriver(builder.build(), props);\n\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n        }\n        String[] expected = {\"1:11\", \"10:121\", \"100:1221\", \"1000:12221\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"6f641fef6a88036ab4dacb59ab21bc8b21ef9bcf","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [cleanup] (#4939)\n\n* Add method to create test properties to StreamsTestUtils\n* Make TopologyTestDriver protected constructor package-private\n* Add comment suggesting the use of TopologyTestDriver to KStreamTestDriver\n* Cleanup:\n    - GlobalKTableJoinsTest\n    - KGroupedStreamImplTest\n    - KGroupedTableImplTest\n    - KStreamBranchTest\n    - KStreamFilterTest\n    - KStreamFlatMapTest\n    - KStreamFlatMapValuesTest\n    - KStreamForeachTest\n    - KStreamGlobalKTableJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamImplTest\n    - KStreamKStreamJoinTest\n    - KStreamKStreamLeftJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamKTableJoinTest\n    - KStreamKTableLeftJoinTest\n    - KStreamMapTest\n    - KStreamMapValuesTest\n    - KStreamPeekTest\n    - StreamsBuilderTest\n    - KStreamSelectKeyTest\n    - KStreamTransformTest\n    - KStreamTransformValuesTest\n    - KStreamWindowAggregateTest\n    - KTableForeachTest\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-05-08 00:21:20","modifiedFileCount":"27","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-05-08 00:21:20","codes":[{"authorDate":"2018-05-11 00:50:59","commitOrder":16,"curCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            new ValueTransformerSupplier<Number, Integer>() {\n                public ValueTransformer<Number, Integer> get() {\n                    return new ValueTransformer<Number, Integer>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public Integer transform(Number value) {\n                            total += value.intValue();\n                            return total;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        String[] expected = {\"1:10\", \"10:110\", \"100:1110\", \"1000:11110\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2018-05-11 00:50:59","endLine":92,"groupId":"22588","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/80/7fb1f59b7d9c0a72b15ac755b7a6d83b7210e5.src","preCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            new ValueTransformerSupplier<Number, Integer>() {\n                public ValueTransformer<Number, Integer> get() {\n                    return new ValueTransformer<Number, Integer>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public Integer transform(Number value) {\n                            total += value.intValue();\n                            return total;\n                        }\n\n                        @Override\n                        public Integer punctuate(long timestamp) {\n                            return null;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        String[] expected = {\"1:10\", \"10:110\", \"100:1110\", \"1000:11110\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2018-05-08 00:21:20","commitOrder":16,"curCode":"    public void testTransformWithKey() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n                new ValueTransformerWithKeySupplier<Integer, Number, Integer>() {\n            public ValueTransformerWithKey<Integer, Number, Integer> get() {\n                return new ValueTransformerWithKey<Integer, Number, Integer>() {\n                    private int total = 0;\n                    @Override\n                    public void init(final ProcessorContext context) {\n\n                    }\n                    @Override\n                    public Integer transform(final Integer readOnlyKey, final Number value) {\n                        total += value.intValue() + readOnlyKey;\n                        return total;\n                    }\n\n                    @Override\n                    public void close() {\n\n                    }\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        String[] expected = {\"1:11\", \"10:121\", \"100:1221\", \"1000:12221\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2018-05-08 00:21:20","endLine":140,"groupId":"22589","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/9e6f1333f44664c2caaa63e2f1b095f8ccb8c7.src","preCode":"    public void testTransformWithKey() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n                new ValueTransformerWithKeySupplier<Integer, Number, Integer>() {\n            public ValueTransformerWithKey<Integer, Number, Integer> get() {\n                return new ValueTransformerWithKey<Integer, Number, Integer>() {\n                    private int total = 0;\n                    @Override\n                    public void init(final ProcessorContext context) {\n\n                    }\n                    @Override\n                    public Integer transform(final Integer readOnlyKey, final Number value) {\n                        total += value.intValue() + readOnlyKey;\n                        return total;\n                    }\n\n                    @Override\n                    public void close() {\n\n                    }\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        String[] expected = {\"1:11\", \"10:121\", \"100:1221\", \"1000:12221\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"}],"commitId":"fa1702fece04c5fc50149fc9b05d77a459b7180b","commitMessage":"@@@MINOR: Remove deprecated valueTransformer.punctuate (#4993)\n\nAlso removed the InternalValueTransformerWithKey / Supplier which is used to mock away the deprecated punctuate function.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2018-05-11 00:50:59","modifiedFileCount":"6","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2018-08-04 04:19:46","commitOrder":17,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            new ValueTransformerSupplier<Number, Integer>() {\n                public ValueTransformer<Number, Integer> get() {\n                    return new ValueTransformer<Number, Integer>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(final ProcessorContext context) {\n                        }\n\n                        @Override\n                        public Integer transform(final Number value) {\n                            total += value.intValue();\n                            return total;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        final String[] expected = {\"1:10\", \"10:110\", \"100:1110\", \"1000:11110\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2018-08-04 04:19:46","endLine":100,"groupId":"22588","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/9965070553c2f6af24014e37e6578da24c8ed8.src","preCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            new ValueTransformerSupplier<Number, Integer>() {\n                public ValueTransformer<Number, Integer> get() {\n                    return new ValueTransformer<Number, Integer>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public Integer transform(Number value) {\n                            total += value.intValue();\n                            return total;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        String[] expected = {\"1:10\", \"10:110\", \"100:1110\", \"1000:11110\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2018-08-04 04:19:46","commitOrder":17,"curCode":"    public void testTransformWithKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n                new ValueTransformerWithKeySupplier<Integer, Number, Integer>() {\n            public ValueTransformerWithKey<Integer, Number, Integer> get() {\n                return new ValueTransformerWithKey<Integer, Number, Integer>() {\n                    private int total = 0;\n                    @Override\n                    public void init(final ProcessorContext context) {\n\n                    }\n                    @Override\n                    public Integer transform(final Integer readOnlyKey, final Number value) {\n                        total += value.intValue() + readOnlyKey;\n                        return total;\n                    }\n\n                    @Override\n                    public void close() {\n\n                    }\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        final String[] expected = {\"1:11\", \"10:121\", \"100:1221\", \"1000:12221\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2018-08-04 04:19:46","endLine":143,"groupId":"22589","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c3/9965070553c2f6af24014e37e6578da24c8ed8.src","preCode":"    public void testTransformWithKey() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n                new ValueTransformerWithKeySupplier<Integer, Number, Integer>() {\n            public ValueTransformerWithKey<Integer, Number, Integer> get() {\n                return new ValueTransformerWithKey<Integer, Number, Integer>() {\n                    private int total = 0;\n                    @Override\n                    public void init(final ProcessorContext context) {\n\n                    }\n                    @Override\n                    public Integer transform(final Integer readOnlyKey, final Number value) {\n                        total += value.intValue() + readOnlyKey;\n                        return total;\n                    }\n\n                    @Override\n                    public void close() {\n\n                    }\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        String[] expected = {\"1:11\", \"10:121\", \"100:1221\", \"1000:12221\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"M"}],"commitId":"3637b2c374d48e99e0a7be37605d3c79f2661007","commitMessage":"@@@MINOR: Require final variables in Streams (#5452)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-08-04 04:19:46","modifiedFileCount":"212","status":"M","submitter":"John Roesler"},{"authorTime":"2019-03-20 08:27:32","codes":[{"authorDate":"2019-03-20 08:27:32","commitOrder":18,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformer<Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {}\n\n                @Override\n                public Integer transform(final Number value) {\n                    total += value.intValue();\n                    return total;\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        final String[] expected = {\"1:10 (ts: 0)\", \"10:110 (ts: 0)\", \"100:1110 (ts: 0)\", \"1000:11110 (ts: 0)\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2019-03-20 08:27:32","endLine":93,"groupId":"3164","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a3/ce8303acc1a0830f6dae16cb1f62ffc86c9558.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            new ValueTransformerSupplier<Number, Integer>() {\n                public ValueTransformer<Number, Integer> get() {\n                    return new ValueTransformer<Number, Integer>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(final ProcessorContext context) {\n                        }\n\n                        @Override\n                        public Integer transform(final Number value) {\n                            total += value.intValue();\n                            return total;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        final String[] expected = {\"1:10\", \"10:110\", \"100:1110\", \"1000:11110\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2019-03-20 08:27:32","commitOrder":18,"curCode":"    public void testTransformWithKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformerWithKey<Integer, Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {}\n\n                @Override\n                public Integer transform(final Integer readOnlyKey, final Number value) {\n                    total += value.intValue() + readOnlyKey;\n                    return total;\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        final String[] expected = {\"1:11 (ts: 0)\", \"10:121 (ts: 0)\", \"100:1221 (ts: 0)\", \"1000:12221 (ts: 0)\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2019-03-20 08:27:32","endLine":130,"groupId":"3164","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a3/ce8303acc1a0830f6dae16cb1f62ffc86c9558.src","preCode":"    public void testTransformWithKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n                new ValueTransformerWithKeySupplier<Integer, Number, Integer>() {\n            public ValueTransformerWithKey<Integer, Number, Integer> get() {\n                return new ValueTransformerWithKey<Integer, Number, Integer>() {\n                    private int total = 0;\n                    @Override\n                    public void init(final ProcessorContext context) {\n\n                    }\n                    @Override\n                    public Integer transform(final Integer readOnlyKey, final Number value) {\n                        total += value.intValue() + readOnlyKey;\n                        return total;\n                    }\n\n                    @Override\n                    public void close() {\n\n                    }\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        final String[] expected = {\"1:11\", \"10:121\", \"100:1221\", \"1000:12221\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"b5ce093a24d0fe212b5d1374330fc720b4913bee","commitMessage":"@@@MINOR: capture result timestamps in Kafka Streams DSL tests (#6447)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2019-03-20 08:27:32","modifiedFileCount":"29","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-05-18 07:48:07","codes":[{"authorDate":"2019-05-18 07:48:07","commitOrder":19,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformer<Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {}\n\n                @Override\n                public Integer transform(final Number value) {\n                    total += value.intValue();\n                    return total;\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, expectedKey / 2L));\n            }\n        }\n        final String[] expected = {\"1:10 (ts: 0)\", \"10:110 (ts: 5)\", \"100:1110 (ts: 50)\", \"1000:11110 (ts: 500)\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2019-05-18 07:48:07","endLine":93,"groupId":"3164","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a7/86166712b889d0ad1b395628fe38ea091f0491.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformer<Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {}\n\n                @Override\n                public Integer transform(final Number value) {\n                    total += value.intValue();\n                    return total;\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        final String[] expected = {\"1:10 (ts: 0)\", \"10:110 (ts: 0)\", \"100:1110 (ts: 0)\", \"1000:11110 (ts: 0)\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2019-05-18 07:48:07","commitOrder":19,"curCode":"    public void testTransformWithKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformerWithKey<Integer, Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {}\n\n                @Override\n                public Integer transform(final Integer readOnlyKey, final Number value) {\n                    total += value.intValue() + readOnlyKey;\n                    return total;\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, expectedKey / 2L));\n            }\n        }\n        final String[] expected = {\"1:11 (ts: 0)\", \"10:121 (ts: 5)\", \"100:1221 (ts: 50)\", \"1000:12221 (ts: 500)\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2019-05-18 07:48:07","endLine":130,"groupId":"3164","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a7/86166712b889d0ad1b395628fe38ea091f0491.src","preCode":"    public void testTransformWithKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformerWithKey<Integer, Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {}\n\n                @Override\n                public Integer transform(final Integer readOnlyKey, final Number value) {\n                    total += value.intValue() + readOnlyKey;\n                    return total;\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n        }\n        final String[] expected = {\"1:11 (ts: 0)\", \"10:121 (ts: 0)\", \"100:1221 (ts: 0)\", \"1000:12221 (ts: 0)\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"6a2749faa63397caa93dae7bfdc3f1d0573a2ff4","commitMessage":"@@@KAFKA-6455: Improve DSL operator timestamp semantics (#6725)\n\nBasic idea:\nKTable-KTable join: set max(left-ts. right-ts) for result\n#agg(...) (stream/table windowed/non-windowed): set max(ts1.  ts2.  ts3. ...) of all input records that contribute to the aggregation result\nfor all stateless transformation: input-ts -> output-ts\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   John Roesler <john@confluent.io>.  Andy Coates <andy@confluent.io>.   Bill Bejeck <bbejeck@gmail.com","date":"2019-05-18 07:48:07","modifiedFileCount":"61","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-07-16 22:16:15","codes":[{"authorDate":"2019-07-16 22:16:15","commitOrder":20,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformer<Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) { }\n\n                @Override\n                public Integer transform(final Number value) {\n                    total += value.intValue();\n                    return total;\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, expectedKey / 2L));\n            }\n        }\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(1, 10, 0),\n            new KeyValueTimestamp<>(10, 110, 5),\n            new KeyValueTimestamp<>(100, 1110, 50),\n            new KeyValueTimestamp<>(1000, 11110, 500)};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2019-07-16 22:16:15","endLine":97,"groupId":"3164","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ad/b6d3589cf8b4614ce3892b4598206b8f9e3396.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformer<Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {}\n\n                @Override\n                public Integer transform(final Number value) {\n                    total += value.intValue();\n                    return total;\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, expectedKey / 2L));\n            }\n        }\n        final String[] expected = {\"1:10 (ts: 0)\", \"10:110 (ts: 5)\", \"100:1110 (ts: 50)\", \"1000:11110 (ts: 500)\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"},{"authorDate":"2019-07-16 22:16:15","commitOrder":20,"curCode":"    public void testTransformWithKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformerWithKey<Integer, Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) { }\n\n                @Override\n                public Integer transform(final Integer readOnlyKey, final Number value) {\n                    total += value.intValue() + readOnlyKey;\n                    return total;\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, expectedKey / 2L));\n            }\n        }\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(1, 11, 0),\n            new KeyValueTimestamp<>(10, 121, 5),\n            new KeyValueTimestamp<>(100, 1221, 50),\n            new KeyValueTimestamp<>(1000, 12221, 500)};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2019-07-16 22:16:15","endLine":137,"groupId":"3164","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ad/b6d3589cf8b4614ce3892b4598206b8f9e3396.src","preCode":"    public void testTransformWithKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformerWithKey<Integer, Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {}\n\n                @Override\n                public Integer transform(final Integer readOnlyKey, final Number value) {\n                    total += value.intValue() + readOnlyKey;\n                    return total;\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, expectedKey / 2L));\n            }\n        }\n        final String[] expected = {\"1:11 (ts: 0)\", \"10:121 (ts: 5)\", \"100:1221 (ts: 50)\", \"1000:12221 (ts: 500)\"};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"00757cd99f6d8bf2760c3708d307347f4cde65f6","commitMessage":"@@@KAFKA-8450: Using KeyValueTimeStamp in MockProcessor (#6933)\n\nThis PR is to use KeyValueTimeStamp Object in MockProcessor Test file instead of String and change all the dependency files with broken test cases.\n\nReviewers: Kamal Chandraprakash.  Matthias J. Sax <mjsax@apache.org>.   Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-07-16 22:16:15","modifiedFileCount":"28","status":"M","submitter":"SuryaTeja Duggi"},{"authorTime":"2019-10-07 16:01:58","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":21,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformer<Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) { }\n\n                @Override\n                public Integer transform(final Number value) {\n                    total += value.intValue();\n                    return total;\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                final TestInputTopic<Integer, Integer> inputTopic =\n                        driver.createInputTopic(topicName, new IntegerSerializer(), new IntegerSerializer());\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n        }\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(1, 10, 0),\n            new KeyValueTimestamp<>(10, 110, 5),\n            new KeyValueTimestamp<>(100, 1110, 50),\n            new KeyValueTimestamp<>(1000, 11110, 500)};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2019-10-07 16:01:58","endLine":97,"groupId":"3164","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/6f71c9e0a95202c3357faa1dd9656b28d8ffab.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformer<Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) { }\n\n                @Override\n                public Integer transform(final Number value) {\n                    total += value.intValue();\n                    return total;\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, expectedKey / 2L));\n            }\n        }\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(1, 10, 0),\n            new KeyValueTimestamp<>(10, 110, 5),\n            new KeyValueTimestamp<>(100, 1110, 50),\n            new KeyValueTimestamp<>(1000, 11110, 500)};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2019-10-07 16:01:58","commitOrder":21,"curCode":"    public void testTransformWithKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformerWithKey<Integer, Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) { }\n\n                @Override\n                public Integer transform(final Integer readOnlyKey, final Number value) {\n                    total += value.intValue() + readOnlyKey;\n                    return total;\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(topicName, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n        }\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(1, 11, 0),\n            new KeyValueTimestamp<>(10, 121, 5),\n            new KeyValueTimestamp<>(100, 1221, 50),\n            new KeyValueTimestamp<>(1000, 12221, 500)};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","date":"2019-10-07 16:01:58","endLine":139,"groupId":"942","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/6f71c9e0a95202c3357faa1dd9656b28d8ffab.src","preCode":"    public void testTransformWithKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformerWithKey<Integer, Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) { }\n\n                @Override\n                public Integer transform(final Integer readOnlyKey, final Number value) {\n                    total += value.intValue() + readOnlyKey;\n                    return total;\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, expectedKey / 2L));\n            }\n        }\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(1, 11, 0),\n            new KeyValueTimestamp<>(10, 121, 5),\n            new KeyValueTimestamp<>(100, 1221, 50),\n            new KeyValueTimestamp<>(1000, 12221, 500)};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"a5a6938c69f4310f7ec519036f0df77d8022326a","commitMessage":"@@@KAFKA-8233: TopologyTestDriver test input and output usability improvements (#7378)\n\nImplements KIP-470\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-07 16:01:58","modifiedFileCount":"47","status":"M","submitter":"Jukka Karvanen"},{"authorTime":"2020-08-21 03:06:16","codes":[{"authorDate":"2020-08-21 03:06:16","commitOrder":22,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformer<Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) { }\n\n                @Override\n                public Integer transform(final Number value) {\n                    total += value.intValue();\n                    return total;\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                final TestInputTopic<Integer, Integer> inputTopic =\n                        driver.createInputTopic(topicName, new IntegerSerializer(), new IntegerSerializer());\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n        }\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(1, 10, 0),\n            new KeyValueTimestamp<>(10, 110, 5),\n            new KeyValueTimestamp<>(100, 1110, 50),\n            new KeyValueTimestamp<>(1000, 11110, 500)};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed().toArray());\n    }\n","date":"2020-08-21 03:06:16","endLine":97,"groupId":"101807","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b2/cfe29cce74b89455cbc5b92e2ee551c0a0b977.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerSupplier<Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformer<Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) { }\n\n                @Override\n                public Integer transform(final Number value) {\n                    total += value.intValue();\n                    return total;\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            for (final int expectedKey : expectedKeys) {\n                final TestInputTopic<Integer, Integer> inputTopic =\n                        driver.createInputTopic(topicName, new IntegerSerializer(), new IntegerSerializer());\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n        }\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(1, 10, 0),\n            new KeyValueTimestamp<>(10, 110, 5),\n            new KeyValueTimestamp<>(100, 1110, 50),\n            new KeyValueTimestamp<>(1000, 11110, 500)};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2020-08-21 03:06:16","commitOrder":22,"curCode":"    public void testTransformWithKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformerWithKey<Integer, Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) { }\n\n                @Override\n                public Integer transform(final Integer readOnlyKey, final Number value) {\n                    total += value.intValue() + readOnlyKey;\n                    return total;\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(topicName, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n        }\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(1, 11, 0),\n            new KeyValueTimestamp<>(10, 121, 5),\n            new KeyValueTimestamp<>(100, 1221, 50),\n            new KeyValueTimestamp<>(1000, 12221, 500)};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed().toArray());\n    }\n","date":"2020-08-21 03:06:16","endLine":139,"groupId":"101807","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b2/cfe29cce74b89455cbc5b92e2ee551c0a0b977.src","preCode":"    public void testTransformWithKey() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final ValueTransformerWithKeySupplier<Integer, Number, Integer> valueTransformerSupplier =\n            () -> new ValueTransformerWithKey<Integer, Number, Integer>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) { }\n\n                @Override\n                public Integer transform(final Integer readOnlyKey, final Number value) {\n                    total += value.intValue() + readOnlyKey;\n                    return total;\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final KStream<Integer, Integer> stream;\n        stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transformValues(valueTransformerSupplier).process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(topicName, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n        }\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(1, 11, 0),\n            new KeyValueTimestamp<>(10, 121, 5),\n            new KeyValueTimestamp<>(100, 1221, 50),\n            new KeyValueTimestamp<>(1000, 12221, 500)};\n\n        assertArrayEquals(expected, supplier.theCapturedProcessor().processed.toArray());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformValuesTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"88d4bc4641064d21a481ba3b8562a4c97703d64d","commitMessage":"@@@KAFKA-10379: Implement the KIP-478 StreamBuilder#addGlobalStore() (#9148)\n\nFrom KIP-478.  implement the new StreamBuilder#addGlobalStore() overload\nthat takes a stateUpdateSupplier fully typed Processor<KIn.  VIn.  Void.  Void>.\n\nWhere necessary.  use the adapters to make the old APIs defer to the new ones. \nas well as limiting the scope of this change set.\n\nReviewers: Boyang Chen <boyang@apache.org>","date":"2020-08-21 03:06:16","modifiedFileCount":"41","status":"M","submitter":"John Roesler"}]
