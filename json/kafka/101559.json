[{"authorTime":"2017-09-13 00:20:43","codes":[{"authorDate":"2017-09-18 18:54:14","commitOrder":2,"curCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                                    .withKeySerde(Serdes.String())\n                                    .withValueSerde(Serdes.Long()));\n\n        processData();\n\n        final KeyValueStore<String, Long> count = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n\n        assertThat(count.get(\"1\"), equalTo(3L));\n        assertThat(count.get(\"2\"), equalTo(1L));\n        assertThat(count.get(\"3\"), equalTo(2L));\n    }\n","date":"2017-09-18 18:54:14","endLine":523,"groupId":"9263","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ef/a027ca52c6292393d3cb2dfa2290f5936c9d87.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                                    .withKeySerde(Serdes.String())\n                                    .withValueSerde(Serdes.Long()));\n\n        processData();\n\n        final KeyValueStore<String, Long> count = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n\n        assertThat(count.get(\"1\"), equalTo(3L));\n        assertThat(count.get(\"2\"), equalTo(1L));\n        assertThat(count.get(\"3\"), equalTo(2L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":511,"status":"B"},{"authorDate":"2017-09-13 00:20:43","commitOrder":2,"curCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(Serdes.String(), Serdes.String(), topic, \"store\");\n        table.groupBy(MockKeyValueMapper.<String, String>SelectValueKeyValueMapper(),\n                         Serialized.with(Serdes.String(),\n                                         Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        processData(topic);\n        final KeyValueStore<String, Long> counts = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n        assertThat(counts.get(\"1\"), equalTo(3L));\n        assertThat(counts.get(\"2\"), equalTo(2L));\n    }\n","date":"2017-09-13 00:20:43","endLine":226,"groupId":"12113","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ff/9726e6d3d75d3c51e3a1ed3b0ab085f121baa1.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(Serdes.String(), Serdes.String(), topic, \"store\");\n        table.groupBy(MockKeyValueMapper.<String, String>SelectValueKeyValueMapper(),\n                         Serialized.with(Serdes.String(),\n                                         Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        processData(topic);\n        final KeyValueStore<String, Long> counts = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n        assertThat(counts.get(\"1\"), equalTo(3L));\n        assertThat(counts.get(\"2\"), equalTo(2L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"NB"}],"commitId":"d83252ebaeeca5bf19584908d95b424beb31b12e","commitMessage":"@@@KAFKA-5654; add materialized count.  reduce.  aggregate to KGroupedStream\n\nAdd overloads of `count`.  `reduce`.  and `aggregate` that are `Materialized` to `KGroupedStream`.\nRefactor common parts between `KGroupedStream` and `WindowedKStream`\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3827 from dguy/kafka-5654\n","date":"2017-09-18 18:54:14","modifiedFileCount":"6","status":"M","submitter":"Damian Guy"},{"authorTime":"2017-09-18 22:53:44","codes":[{"authorDate":"2017-09-18 18:54:14","commitOrder":3,"curCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                                    .withKeySerde(Serdes.String())\n                                    .withValueSerde(Serdes.Long()));\n\n        processData();\n\n        final KeyValueStore<String, Long> count = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n\n        assertThat(count.get(\"1\"), equalTo(3L));\n        assertThat(count.get(\"2\"), equalTo(1L));\n        assertThat(count.get(\"3\"), equalTo(2L));\n    }\n","date":"2017-09-18 18:54:14","endLine":523,"groupId":"9263","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ef/a027ca52c6292393d3cb2dfa2290f5936c9d87.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                                    .withKeySerde(Serdes.String())\n                                    .withValueSerde(Serdes.Long()));\n\n        processData();\n\n        final KeyValueStore<String, Long> count = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n\n        assertThat(count.get(\"1\"), equalTo(3L));\n        assertThat(count.get(\"2\"), equalTo(1L));\n        assertThat(count.get(\"3\"), equalTo(2L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":511,"status":"N"},{"authorDate":"2017-09-18 22:53:44","commitOrder":3,"curCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockKeyValueMapper.<String, String>SelectValueKeyValueMapper(),\n                      Serialized.with(Serdes.String(),\n                                      Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        processData(topic);\n        final KeyValueStore<String, Long> counts = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n        assertThat(counts.get(\"1\"), equalTo(3L));\n        assertThat(counts.get(\"2\"), equalTo(2L));\n    }\n","date":"2017-09-18 22:53:44","endLine":235,"groupId":"12113","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/70/5cf62f9a60369086fad7e90d1a3fcc0fd9b93a.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(Serdes.String(), Serdes.String(), topic, \"store\");\n        table.groupBy(MockKeyValueMapper.<String, String>SelectValueKeyValueMapper(),\n                         Serialized.with(Serdes.String(),\n                                         Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        processData(topic);\n        final KeyValueStore<String, Long> counts = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n        assertThat(counts.get(\"1\"), equalTo(3L));\n        assertThat(counts.get(\"2\"), equalTo(2L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"f2b74aa1c36bf2882006c14f7cbd56b493f39d26","commitMessage":"@@@KAFKA-5873; add materialized overloads to StreamsBuilder\n\nAdd overloads for `table` and `globalTable` that use `Materialized`\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3837 from dguy/kafka-5873\n","date":"2017-09-18 22:53:44","modifiedFileCount":"36","status":"M","submitter":"Damian Guy"},{"authorTime":"2017-09-18 22:53:44","codes":[{"authorDate":"2017-09-29 18:06:34","commitOrder":4,"curCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                                    .withKeySerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, Long> count = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n\n        assertThat(count.get(\"1\"), equalTo(3L));\n        assertThat(count.get(\"2\"), equalTo(1L));\n        assertThat(count.get(\"3\"), equalTo(2L));\n    }\n","date":"2017-09-29 18:06:34","endLine":521,"groupId":"9263","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3a/f35d9569a73fcc05198ea8a0362fec13c473aa.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                                    .withKeySerde(Serdes.String())\n                                    .withValueSerde(Serdes.Long()));\n\n        processData();\n\n        final KeyValueStore<String, Long> count = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n\n        assertThat(count.get(\"1\"), equalTo(3L));\n        assertThat(count.get(\"2\"), equalTo(1L));\n        assertThat(count.get(\"3\"), equalTo(2L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"M"},{"authorDate":"2017-09-18 22:53:44","commitOrder":4,"curCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockKeyValueMapper.<String, String>SelectValueKeyValueMapper(),\n                      Serialized.with(Serdes.String(),\n                                      Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        processData(topic);\n        final KeyValueStore<String, Long> counts = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n        assertThat(counts.get(\"1\"), equalTo(3L));\n        assertThat(counts.get(\"2\"), equalTo(2L));\n    }\n","date":"2017-09-18 22:53:44","endLine":235,"groupId":"12113","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/70/5cf62f9a60369086fad7e90d1a3fcc0fd9b93a.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockKeyValueMapper.<String, String>SelectValueKeyValueMapper(),\n                      Serialized.with(Serdes.String(),\n                                      Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        processData(topic);\n        final KeyValueStore<String, Long> counts = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n        assertThat(counts.get(\"1\"), equalTo(3L));\n        assertThat(counts.get(\"2\"), equalTo(2L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"N"}],"commitId":"082def05ca5af4f30e05aa28ba83fa299f30337b","commitMessage":"@@@MINOR: always set Serde.Long on count operations\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Ismael Juma <ismael@juma.me.uk>.  Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>\n\nCloses #3943 from dguy/count-materialized\n","date":"2017-09-29 18:06:34","modifiedFileCount":"8","status":"M","submitter":"Damian Guy"},{"authorTime":"2018-01-11 03:14:20","codes":[{"authorDate":"2017-09-29 18:06:34","commitOrder":5,"curCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                                    .withKeySerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, Long> count = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n\n        assertThat(count.get(\"1\"), equalTo(3L));\n        assertThat(count.get(\"2\"), equalTo(1L));\n        assertThat(count.get(\"3\"), equalTo(2L));\n    }\n","date":"2017-09-29 18:06:34","endLine":521,"groupId":"9263","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3a/f35d9569a73fcc05198ea8a0362fec13c473aa.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                                    .withKeySerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, Long> count = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n\n        assertThat(count.get(\"1\"), equalTo(3L));\n        assertThat(count.get(\"2\"), equalTo(1L));\n        assertThat(count.get(\"3\"), equalTo(2L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":510,"status":"N"},{"authorDate":"2018-01-11 03:14:20","commitOrder":5,"curCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockMapper.<String, String>selectValueKeyValueMapper(),\n                      Serialized.with(Serdes.String(),\n                                      Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        processData(topic);\n        final KeyValueStore<String, Long> counts = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n        assertThat(counts.get(\"1\"), equalTo(3L));\n        assertThat(counts.get(\"2\"), equalTo(2L));\n    }\n","date":"2018-01-11 03:14:20","endLine":235,"groupId":"12113","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3b/bd7e2fa500950bac9058e5064178475c0a3f1a.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockKeyValueMapper.<String, String>SelectValueKeyValueMapper(),\n                      Serialized.with(Serdes.String(),\n                                      Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        processData(topic);\n        final KeyValueStore<String, Long> counts = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n        assertThat(counts.get(\"1\"), equalTo(3L));\n        assertThat(counts.get(\"2\"), equalTo(2L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"fa5ebc8a019f8cb24823dd29ef84d422d93624dc","commitMessage":"@@@KAFKA-6398: fix KTable.filter that does not include its parent's queryable storename\n\n1. Include the parent's queryable store name in KTable.filter if this operator is not materialized.\n2. Augment InternalTopologyBuilder checking on null processor / store names from the enum.\n3. Unit test.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>\n\nCloses #4384 from guozhangwang/K6398-topology-builder-exception\n","date":"2018-01-11 03:14:20","modifiedFileCount":"17","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-01-11 03:14:20","codes":[{"authorDate":"2018-04-18 04:13:15","commitOrder":6,"curCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\").withKeySerde(Serdes.String()));\n\n        processData();\n\n        @SuppressWarnings(\"unchecked\") final KeyValueStore<String, Long> count =\n            (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n\n        assertThat(count.get(\"1\"), equalTo(3L));\n        assertThat(count.get(\"2\"), equalTo(1L));\n        assertThat(count.get(\"3\"), equalTo(2L));\n    }\n","date":"2018-04-18 04:13:15","endLine":559,"groupId":"5188","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2b/87b309e27867c9bce089dbdefb5c9f3ebb8f1a.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                                    .withKeySerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, Long> count = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n\n        assertThat(count.get(\"1\"), equalTo(3L));\n        assertThat(count.get(\"2\"), equalTo(1L));\n        assertThat(count.get(\"3\"), equalTo(2L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":548,"status":"M"},{"authorDate":"2018-01-11 03:14:20","commitOrder":6,"curCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockMapper.<String, String>selectValueKeyValueMapper(),\n                      Serialized.with(Serdes.String(),\n                                      Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        processData(topic);\n        final KeyValueStore<String, Long> counts = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n        assertThat(counts.get(\"1\"), equalTo(3L));\n        assertThat(counts.get(\"2\"), equalTo(2L));\n    }\n","date":"2018-01-11 03:14:20","endLine":235,"groupId":"12113","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3b/bd7e2fa500950bac9058e5064178475c0a3f1a.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockMapper.<String, String>selectValueKeyValueMapper(),\n                      Serialized.with(Serdes.String(),\n                                      Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        processData(topic);\n        final KeyValueStore<String, Long> counts = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n        assertThat(counts.get(\"1\"), equalTo(3L));\n        assertThat(counts.get(\"2\"), equalTo(2L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"N"}],"commitId":"ac9c3ed0b43ee848e6e555a01c55ea2eee78540a","commitMessage":"@@@KAFKA-6376: preliminary cleanup (#4872)\n\nGeneral cleanup of Streams code.  mostly resolving compiler warnings and re-formatting.\n\nThe regular testing suite should be sufficient.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-04-18 04:13:15","modifiedFileCount":"57","status":"M","submitter":"John Roesler"},{"authorTime":"2018-04-27 02:30:42","codes":[{"authorDate":"2018-04-27 02:30:42","commitOrder":7,"curCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\").withKeySerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, Long> count = driver.getKeyValueStore(\"count\");\n\n        assertThat(count.get(\"1\"), equalTo(3L));\n        assertThat(count.get(\"2\"), equalTo(1L));\n        assertThat(count.get(\"3\"), equalTo(2L));\n    }\n","date":"2018-04-27 02:30:42","endLine":564,"groupId":"0","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/ca30f48cc39ae5d081ec634791659b31ada1a9.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\").withKeySerde(Serdes.String()));\n\n        processData();\n\n        @SuppressWarnings(\"unchecked\") final KeyValueStore<String, Long> count =\n            (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n\n        assertThat(count.get(\"1\"), equalTo(3L));\n        assertThat(count.get(\"2\"), equalTo(1L));\n        assertThat(count.get(\"3\"), equalTo(2L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":554,"status":"M"},{"authorDate":"2018-04-27 02:30:42","commitOrder":7,"curCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockMapper.<String, String>selectValueKeyValueMapper(),\n                      Serialized.with(Serdes.String(),\n                                      Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        processData(topic);\n        final KeyValueStore<String, Long> counts = driver.getKeyValueStore(\"count\");\n        assertThat(counts.get(\"1\"), equalTo(3L));\n        assertThat(counts.get(\"2\"), equalTo(2L));\n    }\n","date":"2018-04-27 02:30:42","endLine":253,"groupId":"12113","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/2f3496579805b412a0a5a03c23fe9cc9094b60.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockMapper.<String, String>selectValueKeyValueMapper(),\n                      Serialized.with(Serdes.String(),\n                                      Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        processData(topic);\n        final KeyValueStore<String, Long> counts = (KeyValueStore<String, Long>) driver.allStateStores().get(\"count\");\n        assertThat(counts.get(\"1\"), equalTo(3L));\n        assertThat(counts.get(\"2\"), equalTo(2L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"}],"commitId":"885abbfcd40aab57acec278d976956f07be15090","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [partial] (#4832)\n\n* Remove ProcessorTopologyTestDriver from TopologyTest\n* Fix ProcessorTopologyTest\n* Remove ProcessorTopologyTestDriver and InternalTopologyAccessor\n* Partially refactored StreamsBuilderTest but missing one test\n* Refactor KStreamBuilderTest\n* Refactor AbstractStreamTest\n* Further cleanup of AbstractStreamTest\n* Refactor GlobalKTableJoinsTest\n* Refactor InternalStreamsBuilderTest\n* Fix circular dependency in build.gradle\n* Refactor KGroupedStreamImplTest\n* Partial modifications to KGroupedTableImplTest\n* Refactor KGroupedTableImplTest\n* Refactor KStreamBranchTest\n* Refactor KStreamFilterTest\n* Refactor KStreamFlatMapTest KStreamFlatMapValuesTest\n* Refactor KStreamForeachTest\n* Refactor KStreamGlobalKTableJoinTest\n* Refactor KStreamGlobalKTableLeftJoinTest\n* Refactor KStreamImplTest\n* Refactor KStreamImplTest\n* Refactor KStreamKStreamJoinTest\n* Refactor KStreamKStreamLeftJoinTest\n* Refactor KStreamKTableJoinTest\n* Refactor KStreamKTableLeftJoinTest\n* Refactor KStreamMapTest and KStreamMapValuesTest\n* Refactor KStreamPeekTest and KStreamTransformTest\n* Refactor KStreamSelectKeyTest\n* Refactor KStreamTransformValuesTest\n* Refactor KStreamWindowAggregateTest\n* Add Depercation anotation to KStreamTestDriver and rollback failing tests in StreamsBuilderTest and KTableAggregateTest\n* Refactor KTableFilterTest\n* Refactor KTableForeachTest\n* Add getter for ProcessorTopology.  and simplify tests in StreamsBuilderTest\n* Refactor KTableImplTest\n* Remove unused imports\n* Refactor KTableAggregateTest\n* Fix style errors\n* Fix gradle build\n* Address reviewer comments:\n  - Remove properties new instance\n  - Remove extraneous line\n  - Remove unnecessary TopologyTestDriver instances from StreamsBuilderTest\n  - Move props.clear() to @After\n  - Clarify use of timestamp in KStreamFlatMapValuesTest\n  - Keep test using old Punctuator in KStreamTransformTest\n  - Add comment to clarify clock advances in KStreamTransformTest\n  - Add TopologyTestDriverWrapper class to access the protected constructor of TopologyTestDriver\n  - Revert KTableImplTest.testRepartition to KStreamTestDriver to avoid exposing the TopologyTestDriver processor topology\n  - Revert partially migrated classes: KTableAggregateTest.  KTableFilterTest.  and KTableImplTest\n* Rebase on current trunk an fix conflicts\n\nReviewers: Matthias J Sax <matthias@confluentio>.  Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2018-04-27 02:30:42","modifiedFileCount":"33","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-05-08 00:21:20","codes":[{"authorDate":"2018-05-08 00:21:20","commitOrder":8,"curCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\").withKeySerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            final KeyValueStore<String, Long> count = driver.getKeyValueStore(\"count\");\n\n            assertThat(count.get(\"1\"), equalTo(3L));\n            assertThat(count.get(\"2\"), equalTo(1L));\n            assertThat(count.get(\"3\"), equalTo(2L));\n        }\n    }\n","date":"2018-05-08 00:21:20","endLine":552,"groupId":"2456","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/a9226d89bb717e8cce7b108aa8f69161cdd8b0.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\").withKeySerde(Serdes.String()));\n\n        processData();\n\n        final KeyValueStore<String, Long> count = driver.getKeyValueStore(\"count\");\n\n        assertThat(count.get(\"1\"), equalTo(3L));\n        assertThat(count.get(\"2\"), equalTo(1L));\n        assertThat(count.get(\"3\"), equalTo(2L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"M"},{"authorDate":"2018-05-08 00:21:20","commitOrder":8,"curCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockMapper.<String, String>selectValueKeyValueMapper(),\n                      Serialized.with(Serdes.String(),\n                                      Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(topic, driver);\n            final KeyValueStore<String, Long> counts = driver.getKeyValueStore(\"count\");\n            assertThat(counts.get(\"1\"), equalTo(3L));\n            assertThat(counts.get(\"2\"), equalTo(2L));\n        }\n    }\n","date":"2018-05-08 00:21:20","endLine":247,"groupId":"4870","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/05/d339f9ad96a750b28a1cbfa789ce644cd4f199.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockMapper.<String, String>selectValueKeyValueMapper(),\n                      Serialized.with(Serdes.String(),\n                                      Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        processData(topic);\n        final KeyValueStore<String, Long> counts = driver.getKeyValueStore(\"count\");\n        assertThat(counts.get(\"1\"), equalTo(3L));\n        assertThat(counts.get(\"2\"), equalTo(2L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"M"}],"commitId":"6f641fef6a88036ab4dacb59ab21bc8b21ef9bcf","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [cleanup] (#4939)\n\n* Add method to create test properties to StreamsTestUtils\n* Make TopologyTestDriver protected constructor package-private\n* Add comment suggesting the use of TopologyTestDriver to KStreamTestDriver\n* Cleanup:\n    - GlobalKTableJoinsTest\n    - KGroupedStreamImplTest\n    - KGroupedTableImplTest\n    - KStreamBranchTest\n    - KStreamFilterTest\n    - KStreamFlatMapTest\n    - KStreamFlatMapValuesTest\n    - KStreamForeachTest\n    - KStreamGlobalKTableJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamImplTest\n    - KStreamKStreamJoinTest\n    - KStreamKStreamLeftJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamKTableJoinTest\n    - KStreamKTableLeftJoinTest\n    - KStreamMapTest\n    - KStreamMapValuesTest\n    - KStreamPeekTest\n    - StreamsBuilderTest\n    - KStreamSelectKeyTest\n    - KStreamTransformTest\n    - KStreamTransformValuesTest\n    - KStreamWindowAggregateTest\n    - KTableForeachTest\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-05-08 00:21:20","modifiedFileCount":"27","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-11-13 14:18:59","codes":[{"authorDate":"2018-05-08 00:21:20","commitOrder":9,"curCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\").withKeySerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            final KeyValueStore<String, Long> count = driver.getKeyValueStore(\"count\");\n\n            assertThat(count.get(\"1\"), equalTo(3L));\n            assertThat(count.get(\"2\"), equalTo(1L));\n            assertThat(count.get(\"3\"), equalTo(2L));\n        }\n    }\n","date":"2018-05-08 00:21:20","endLine":552,"groupId":"2456","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/a9226d89bb717e8cce7b108aa8f69161cdd8b0.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\").withKeySerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            final KeyValueStore<String, Long> count = driver.getKeyValueStore(\"count\");\n\n            assertThat(count.get(\"1\"), equalTo(3L));\n            assertThat(count.get(\"2\"), equalTo(1L));\n            assertThat(count.get(\"3\"), equalTo(2L));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"N"},{"authorDate":"2018-11-13 14:18:59","commitOrder":9,"curCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockMapper.selectValueKeyValueMapper(),\n                      org.apache.kafka.streams.kstream.Serialized.with(Serdes.String(),\n                                      Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(topic, driver);\n            final KeyValueStore<String, Long> counts = driver.getKeyValueStore(\"count\");\n            assertThat(counts.get(\"1\"), equalTo(3L));\n            assertThat(counts.get(\"2\"), equalTo(2L));\n        }\n    }\n","date":"2018-11-13 14:18:59","endLine":224,"groupId":"4870","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c0/6cce4c91996cee2e3be9b0bf45ecfc9db525d1.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockMapper.<String, String>selectValueKeyValueMapper(),\n                      Serialized.with(Serdes.String(),\n                                      Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(topic, driver);\n            final KeyValueStore<String, Long> counts = driver.getKeyValueStore(\"count\");\n            assertThat(counts.get(\"1\"), equalTo(3L));\n            assertThat(counts.get(\"2\"), equalTo(2L));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":209,"status":"M"}],"commitId":"12f310d50e7f5b1c18c4f61a119a6cd830da3bc0","commitMessage":"@@@KAFKA-7612: Fix javac warnings and enable warnings as errors (#5900)\n\n- Use Xlint:all with 3 exclusions (filed KAFKA-7613 to remove the exclusions)\n- Use the same javac options when compiling tests (seems accidental that\nwe didn't do this before)\n- Replaced several deprecated method calls with non-deprecated ones:\n  - `KafkaConsumer.poll(long)` and `KafkaConsumer.close(long)`\n  - `Class.newInstance` and `new Integer/Long` (deprecated since Java 9)\n  - `scala.Console` (deprecated in Scala 2.11)\n  - `PartitionData` taking a timestamp (one of them seemingly a bug)\n  - `JsonMappingException` single parameter constructor\n- Fix unnecessary usage of raw types in several places.\n- Add @SuppressWarnings for deprecations.  unchecked and switch fallthrough in\nseveral places.\n- Scala clean-ups (var -> val.  ETA expansion warnings.  avoid reflective calls)\n- Use lambdas to simplify code in a few places\n- Add @SafeVarargs.  fix varargs usage and remove unnecessary `Utils.mkList` method\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Manikumar Reddy <manikumar.reddy@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Stanislav Kozlovski <stanislav_kozlovski@outlook.com>","date":"2018-11-13 14:18:59","modifiedFileCount":"146","status":"M","submitter":"Ismael Juma"},{"authorTime":"2018-11-15 09:29:19","codes":[{"authorDate":"2018-05-08 00:21:20","commitOrder":10,"curCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\").withKeySerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            final KeyValueStore<String, Long> count = driver.getKeyValueStore(\"count\");\n\n            assertThat(count.get(\"1\"), equalTo(3L));\n            assertThat(count.get(\"2\"), equalTo(1L));\n            assertThat(count.get(\"3\"), equalTo(2L));\n        }\n    }\n","date":"2018-05-08 00:21:20","endLine":552,"groupId":"2456","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/a9226d89bb717e8cce7b108aa8f69161cdd8b0.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\").withKeySerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            final KeyValueStore<String, Long> count = driver.getKeyValueStore(\"count\");\n\n            assertThat(count.get(\"1\"), equalTo(3L));\n            assertThat(count.get(\"2\"), equalTo(1L));\n            assertThat(count.get(\"3\"), equalTo(2L));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"N"},{"authorDate":"2018-11-15 09:29:19","commitOrder":10,"curCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockMapper.selectValueKeyValueMapper(), Grouped.with(Serdes.String(), Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(topic, driver);\n            final KeyValueStore<String, Long> counts = driver.getKeyValueStore(\"count\");\n            assertThat(counts.get(\"1\"), equalTo(3L));\n            assertThat(counts.get(\"2\"), equalTo(2L));\n        }\n    }\n","date":"2018-11-15 09:29:19","endLine":223,"groupId":"4870","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/99/f1b815812430915c4f3e4534820bb073a13312.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockMapper.selectValueKeyValueMapper(),\n                      org.apache.kafka.streams.kstream.Serialized.with(Serdes.String(),\n                                      Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(topic, driver);\n            final KeyValueStore<String, Long> counts = driver.getKeyValueStore(\"count\");\n            assertThat(counts.get(\"1\"), equalTo(3L));\n            assertThat(counts.get(\"2\"), equalTo(2L));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":210,"status":"M"}],"commitId":"14d3ead19d250f2f3117af473ff6244c663ef8ca","commitMessage":"@@@MINOR: Remove deprecated callers (#5911)\n\nCallers of 1) Windows#until.  2) Windows#of.  3) Serialized are replaced when possible with the new APIs.\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Bill Bejeck <bill@confluent.io>","date":"2018-11-15 09:29:19","modifiedFileCount":"28","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-01-09 05:32:53","codes":[{"authorDate":"2018-05-08 00:21:20","commitOrder":11,"curCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\").withKeySerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            final KeyValueStore<String, Long> count = driver.getKeyValueStore(\"count\");\n\n            assertThat(count.get(\"1\"), equalTo(3L));\n            assertThat(count.get(\"2\"), equalTo(1L));\n            assertThat(count.get(\"3\"), equalTo(2L));\n        }\n    }\n","date":"2018-05-08 00:21:20","endLine":552,"groupId":"2456","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e7/a9226d89bb717e8cce7b108aa8f69161cdd8b0.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\").withKeySerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            final KeyValueStore<String, Long> count = driver.getKeyValueStore(\"count\");\n\n            assertThat(count.get(\"1\"), equalTo(3L));\n            assertThat(count.get(\"2\"), equalTo(1L));\n            assertThat(count.get(\"3\"), equalTo(2L));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":540,"status":"N"},{"authorDate":"2019-01-09 05:32:53","commitOrder":11,"curCode":"    public void shouldCountAndMaterializeResults() {\n        builder\n            .table(\n                topic,\n                Consumed.with(Serdes.String(), Serdes.String()))\n            .groupBy(\n                MockMapper.selectValueKeyValueMapper(),\n                Grouped.with(Serdes.String(), Serdes.String()))\n            .count(\n                Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Long()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(topic, driver);\n            final KeyValueStore<String, Long> counts = driver.getKeyValueStore(\"count\");\n            assertThat(counts.get(\"1\"), equalTo(3L));\n            assertThat(counts.get(\"2\"), equalTo(2L));\n        }\n    }\n","date":"2019-01-09 05:32:53","endLine":250,"groupId":"4870","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/09/f93e7dfefaeee9f36b69216a086ecde7ea7e5e.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        final KTable<String, String> table = builder.table(topic, Consumed.with(Serdes.String(), Serdes.String()));\n        table.groupBy(MockMapper.selectValueKeyValueMapper(), Grouped.with(Serdes.String(), Serdes.String()))\n                .count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                               .withKeySerde(Serdes.String())\n                               .withValueSerde(Serdes.Long()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(topic, driver);\n            final KeyValueStore<String, Long> counts = driver.getKeyValueStore(\"count\");\n            assertThat(counts.get(\"1\"), equalTo(3L));\n            assertThat(counts.get(\"2\"), equalTo(2L));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"3991d81f6c645bdf36c58e3d56b829ff92dbff3a","commitMessage":"@@@MINOR: code cleanup (#6056)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-01-09 05:32:53","modifiedFileCount":"19","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-05-18 07:48:07","codes":[{"authorDate":"2019-05-18 07:48:07","commitOrder":12,"curCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\").withKeySerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            {\n                final KeyValueStore<String, Long> count = driver.getKeyValueStore(\"count\");\n\n                assertThat(count.get(\"1\"), equalTo(3L));\n                assertThat(count.get(\"2\"), equalTo(1L));\n                assertThat(count.get(\"3\"), equalTo(2L));\n            }\n            {\n                final KeyValueStore<String, ValueAndTimestamp<Long>> count = driver.getTimestampedKeyValueStore(\"count\");\n\n                assertThat(count.get(\"1\"), equalTo(ValueAndTimestamp.make(3L, 10L)));\n                assertThat(count.get(\"2\"), equalTo(ValueAndTimestamp.make(1L, 1L)));\n                assertThat(count.get(\"3\"), equalTo(ValueAndTimestamp.make(2L, 9L)));\n            }\n        }\n    }\n","date":"2019-05-18 07:48:07","endLine":430,"groupId":"101559","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/850e711b26946a1034adbdfb70c78f93d49355.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        groupedStream.count(Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\").withKeySerde(Serdes.String()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n\n            final KeyValueStore<String, Long> count = driver.getKeyValueStore(\"count\");\n\n            assertThat(count.get(\"1\"), equalTo(3L));\n            assertThat(count.get(\"2\"), equalTo(1L));\n            assertThat(count.get(\"3\"), equalTo(2L));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"M"},{"authorDate":"2019-05-18 07:48:07","commitOrder":12,"curCode":"    public void shouldCountAndMaterializeResults() {\n        builder\n            .table(\n                topic,\n                Consumed.with(Serdes.String(), Serdes.String()))\n            .groupBy(\n                MockMapper.selectValueKeyValueMapper(),\n                Grouped.with(Serdes.String(), Serdes.String()))\n            .count(\n                Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Long()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(topic, driver);\n            {\n                final KeyValueStore<String, Long> counts = driver.getKeyValueStore(\"count\");\n                assertThat(counts.get(\"1\"), equalTo(3L));\n                assertThat(counts.get(\"2\"), equalTo(2L));\n            }\n            {\n                final KeyValueStore<String, ValueAndTimestamp<Long>> counts = driver.getTimestampedKeyValueStore(\"count\");\n                assertThat(counts.get(\"1\"), equalTo(ValueAndTimestamp.make(3L, 50L)));\n                assertThat(counts.get(\"2\"), equalTo(ValueAndTimestamp.make(2L, 60L)));\n            }\n        }\n    }\n","date":"2019-05-18 07:48:07","endLine":265,"groupId":"101559","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountAndMaterializeResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a8/fed6756f04d3d114229f96d8bbf0e3e8649523.src","preCode":"    public void shouldCountAndMaterializeResults() {\n        builder\n            .table(\n                topic,\n                Consumed.with(Serdes.String(), Serdes.String()))\n            .groupBy(\n                MockMapper.selectValueKeyValueMapper(),\n                Grouped.with(Serdes.String(), Serdes.String()))\n            .count(\n                Materialized.<String, Long, KeyValueStore<Bytes, byte[]>>as(\"count\")\n                    .withKeySerde(Serdes.String())\n                    .withValueSerde(Serdes.Long()));\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(topic, driver);\n            final KeyValueStore<String, Long> counts = driver.getKeyValueStore(\"count\");\n            assertThat(counts.get(\"1\"), equalTo(3L));\n            assertThat(counts.get(\"2\"), equalTo(2L));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KGroupedTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"}],"commitId":"6a2749faa63397caa93dae7bfdc3f1d0573a2ff4","commitMessage":"@@@KAFKA-6455: Improve DSL operator timestamp semantics (#6725)\n\nBasic idea:\nKTable-KTable join: set max(left-ts. right-ts) for result\n#agg(...) (stream/table windowed/non-windowed): set max(ts1.  ts2.  ts3. ...) of all input records that contribute to the aggregation result\nfor all stateless transformation: input-ts -> output-ts\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   John Roesler <john@confluent.io>.  Andy Coates <andy@confluent.io>.   Bill Bejeck <bbejeck@gmail.com","date":"2019-05-18 07:48:07","modifiedFileCount":"61","status":"M","submitter":"Matthias J. Sax"}]
