[{"authorTime":"2021-02-03 03:33:55","codes":[{"authorDate":"2021-02-03 03:33:55","commitOrder":1,"curCode":"    public void testCreateSnapshots() {\n        SnapshotRegistry registry = new SnapshotRegistry(new LogContext());\n        Snapshot snapshot123 = registry.createSnapshot(123);\n        assertEquals(snapshot123, registry.getSnapshot(123));\n        assertThrows(RuntimeException.class, () -> registry.getSnapshot(456));\n        assertIteratorContains(registry.iterator(), snapshot123);\n        assertEquals(\"Can't create a new snapshot at epoch 1 because there is already \" +\n            \"a snapshot with epoch 123\", assertThrows(RuntimeException.class,\n                () -> registry.createSnapshot(1)).getMessage());\n        Snapshot snapshot456 = registry.createSnapshot(456);\n        assertIteratorContains(registry.iterator(), snapshot123, snapshot456);\n    }\n","date":"2021-02-03 03:33:55","endLine":67,"groupId":"7514","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateSnapshots","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/68/7976d9598ba2316f1f3580b4427c7ab1705c19.src","preCode":"    public void testCreateSnapshots() {\n        SnapshotRegistry registry = new SnapshotRegistry(new LogContext());\n        Snapshot snapshot123 = registry.createSnapshot(123);\n        assertEquals(snapshot123, registry.getSnapshot(123));\n        assertThrows(RuntimeException.class, () -> registry.getSnapshot(456));\n        assertIteratorContains(registry.iterator(), snapshot123);\n        assertEquals(\"Can't create a new snapshot at epoch 1 because there is already \" +\n            \"a snapshot with epoch 123\", assertThrows(RuntimeException.class,\n                () -> registry.createSnapshot(1)).getMessage());\n        Snapshot snapshot456 = registry.createSnapshot(456);\n        assertIteratorContains(registry.iterator(), snapshot123, snapshot456);\n    }\n","realPath":"metadata/src/test/java/org/apache/kafka/timeline/SnapshotRegistryTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"},{"authorDate":"2021-02-03 03:33:55","commitOrder":1,"curCode":"    public void testCreateAndDeleteSnapshots() {\n        SnapshotRegistry registry = new SnapshotRegistry(new LogContext());\n        Snapshot snapshot123 = registry.createSnapshot(123);\n        Snapshot snapshot456 = registry.createSnapshot(456);\n        Snapshot snapshot789 = registry.createSnapshot(789);\n        registry.deleteSnapshot(snapshot456.epoch());\n        assertIteratorContains(registry.iterator(), snapshot123, snapshot789);\n    }\n","date":"2021-02-03 03:33:55","endLine":77,"groupId":"7514","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCreateAndDeleteSnapshots","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/68/7976d9598ba2316f1f3580b4427c7ab1705c19.src","preCode":"    public void testCreateAndDeleteSnapshots() {\n        SnapshotRegistry registry = new SnapshotRegistry(new LogContext());\n        Snapshot snapshot123 = registry.createSnapshot(123);\n        Snapshot snapshot456 = registry.createSnapshot(456);\n        Snapshot snapshot789 = registry.createSnapshot(789);\n        registry.deleteSnapshot(snapshot456.epoch());\n        assertIteratorContains(registry.iterator(), snapshot123, snapshot789);\n    }\n","realPath":"metadata/src/test/java/org/apache/kafka/timeline/SnapshotRegistryTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"}],"commitId":"1711cfa4ebe325b2445d7bf00cf3e8b93377e4b1","commitMessage":"@@@KAFKA-12209: Add the timeline data structures for the KIP-631 controller (#9901)\n\nReviewers: Jun Rao <junrao@gmail.com>","date":"2021-02-03 03:33:55","modifiedFileCount":"0","status":"B","submitter":"Colin Patrick McCabe"},{"authorTime":"2021-07-21 01:13:01","codes":[{"authorDate":"2021-07-21 01:13:01","commitOrder":2,"curCode":"    public void testCreateSnapshots() {\n        SnapshotRegistry registry = new SnapshotRegistry(new LogContext());\n        Snapshot snapshot123 = registry.getOrCreateSnapshot(123);\n        assertEquals(snapshot123, registry.getSnapshot(123));\n        assertThrows(RuntimeException.class, () -> registry.getSnapshot(456));\n        assertIteratorContains(registry.iterator(), snapshot123);\n        assertEquals(\"Can't create a new snapshot at epoch 1 because there is already \" +\n            \"a snapshot with epoch 123\", assertThrows(RuntimeException.class,\n                () -> registry.getOrCreateSnapshot(1)).getMessage());\n        Snapshot snapshot456 = registry.getOrCreateSnapshot(456);\n        assertIteratorContains(registry.iterator(), snapshot123, snapshot456);\n    }\n","date":"2021-07-21 01:13:01","endLine":67,"groupId":"1031","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testCreateSnapshots","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/89/224231898e8114487645fa2f64aa05301712a2.src","preCode":"    public void testCreateSnapshots() {\n        SnapshotRegistry registry = new SnapshotRegistry(new LogContext());\n        Snapshot snapshot123 = registry.createSnapshot(123);\n        assertEquals(snapshot123, registry.getSnapshot(123));\n        assertThrows(RuntimeException.class, () -> registry.getSnapshot(456));\n        assertIteratorContains(registry.iterator(), snapshot123);\n        assertEquals(\"Can't create a new snapshot at epoch 1 because there is already \" +\n            \"a snapshot with epoch 123\", assertThrows(RuntimeException.class,\n                () -> registry.createSnapshot(1)).getMessage());\n        Snapshot snapshot456 = registry.createSnapshot(456);\n        assertIteratorContains(registry.iterator(), snapshot123, snapshot456);\n    }\n","realPath":"metadata/src/test/java/org/apache/kafka/timeline/SnapshotRegistryTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2021-07-21 01:13:01","commitOrder":2,"curCode":"    public void testCreateAndDeleteSnapshots() {\n        SnapshotRegistry registry = new SnapshotRegistry(new LogContext());\n        Snapshot snapshot123 = registry.getOrCreateSnapshot(123);\n        Snapshot snapshot456 = registry.getOrCreateSnapshot(456);\n        Snapshot snapshot789 = registry.getOrCreateSnapshot(789);\n        registry.deleteSnapshot(snapshot456.epoch());\n        assertIteratorContains(registry.iterator(), snapshot123, snapshot789);\n    }\n","date":"2021-07-21 01:13:01","endLine":77,"groupId":"1031","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testCreateAndDeleteSnapshots","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/89/224231898e8114487645fa2f64aa05301712a2.src","preCode":"    public void testCreateAndDeleteSnapshots() {\n        SnapshotRegistry registry = new SnapshotRegistry(new LogContext());\n        Snapshot snapshot123 = registry.createSnapshot(123);\n        Snapshot snapshot456 = registry.createSnapshot(456);\n        Snapshot snapshot789 = registry.createSnapshot(789);\n        registry.deleteSnapshot(snapshot456.epoch());\n        assertIteratorContains(registry.iterator(), snapshot123, snapshot789);\n    }\n","realPath":"metadata/src/test/java/org/apache/kafka/timeline/SnapshotRegistryTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"69a4661d7a7578789f4752928622c010b2264565","commitMessage":"@@@KAFKA-13100: Create KRaft controller snapshot during promotion (#11084)\n\nThe leader assumes that there is always an in-memory snapshot at the last\ncommitted offset. This means that the controller needs to generate an in-memory\nsnapshot when getting promoted from inactive to active.  This PR adds that\ncode. This fixes a bug where sometimes we would try to look for that in-memory\nsnapshot and not find it.\n\nThe controller always starts inactive.  and there is no requirement that there\nexists an in-memory snapshot at the last committed offset when the controller\nis inactive. Therefore we can remove the initial snapshot at offset -1.\n\nWe should also optimize when a snapshot is cancelled or completes.  by deleting\nall in-memory snapshots less that the last committed offset.\n\nSnapshotRegistry's createSnapshot should allow the creating of a snapshot if\nthe last snapshot's offset is the given offset. This allows for simpler client\ncode. Finally.  this PR renames createSnapshot to getOrCreateSnapshot.\n\nReviewers: Colin P. McCabe <cmccabe@apache.org>","date":"2021-07-21 01:13:01","modifiedFileCount":"12","status":"M","submitter":"Jos? Armando Garc?a Sancio"}]
