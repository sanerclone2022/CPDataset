[{"authorTime":"2018-08-02 06:01:18","codes":[{"authorDate":"2018-08-02 06:01:18","commitOrder":1,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName,\n                                     thisProcessorParameters().processorSupplier(),\n                                     thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(otherProcessorName,\n                                     otherProcessorParameters().processorSupplier(),\n                                     otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(mergeProcessorName,\n                                     mergeProcessorParameters().processorSupplier(),\n                                     thisProcessorName,\n                                     otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName,\n                                                       joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName,\n                                                       joinThisStoreNames);\n\n        if (materializedInternal != null) {\n            final StoreBuilder<KeyValueStore<K, VR>> storeBuilder\n                = new KeyValueStoreMaterializer<>(materializedInternal).materialize();\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","date":"2018-08-02 06:01:18","endLine":91,"groupId":"18325","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dd/ebeac7b4334c6f1c9f90643b50bc25506b0acf.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName,\n                                     thisProcessorParameters().processorSupplier(),\n                                     thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(otherProcessorName,\n                                     otherProcessorParameters().processorSupplier(),\n                                     otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(mergeProcessorName,\n                                     mergeProcessorParameters().processorSupplier(),\n                                     thisProcessorName,\n                                     otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName,\n                                                       joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName,\n                                                       joinThisStoreNames);\n\n        if (materializedInternal != null) {\n            final StoreBuilder<KeyValueStore<K, VR>> storeBuilder\n                = new KeyValueStoreMaterializer<>(materializedInternal).materialize();\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/KTableKTableJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"},{"authorDate":"2018-08-02 06:01:18","commitOrder":1,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n    }\n","date":"2018-08-02 06:01:18","endLine":90,"groupId":"17124","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/46/cf3e7752eb3da3a3d2a282339f9a98b70f743f.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/StreamStreamJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"}],"commitId":"c19213ab4139aa1f56f89982448184a5c82f98a4","commitMessage":"@@@KAFKA-6761: Construct Physical Plan using Graph.  Reduce streams footprint part III (#5201)\n\nThe specific changes in this PR from the second PR include:\n\n1. Changed the types of graph nodes to names conveying more context\n2. Build the entire physical plan from the graph.  after StreamsBuilder.build() is called.\n\nOther changes are addressed directly as review comments on the PR.\n\nTesting consists of using all existing streams tests to validate building the physical plan with graph\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <vvcephei@users.noreply.github.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-08-02 06:01:18","modifiedFileCount":"37","status":"B","submitter":"Bill Bejeck"},{"authorTime":"2018-08-02 06:01:18","codes":[{"authorDate":"2019-03-15 09:42:07","commitOrder":2,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName,\n            thisProcessorParameters().processorSupplier(),\n            thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(otherProcessorName,\n            otherProcessorParameters().processorSupplier(),\n            otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(mergeProcessorName,\n            mergeProcessorParameters().processorSupplier(),\n            thisProcessorName,\n            otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName,\n            joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName,\n            joinThisStoreNames);\n\n        if (storeBuilder != null) {\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","date":"2019-03-15 09:42:07","endLine":122,"groupId":"18325","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/03/bdda0b2d84434a8f5c7fa44212a282eb742e7d.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName,\n                                     thisProcessorParameters().processorSupplier(),\n                                     thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(otherProcessorName,\n                                     otherProcessorParameters().processorSupplier(),\n                                     otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(mergeProcessorName,\n                                     mergeProcessorParameters().processorSupplier(),\n                                     thisProcessorName,\n                                     otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName,\n                                                       joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName,\n                                                       joinThisStoreNames);\n\n        if (materializedInternal != null) {\n            final StoreBuilder<KeyValueStore<K, VR>> storeBuilder =\n                new KeyValueStoreMaterializer<>(materializedInternal).materialize();\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/KTableKTableJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"},{"authorDate":"2018-08-02 06:01:18","commitOrder":2,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n    }\n","date":"2018-08-02 06:01:18","endLine":90,"groupId":"17124","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/46/cf3e7752eb3da3a3d2a282339f9a98b70f743f.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/StreamStreamJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"N"}],"commitId":"4ca8e40e2f4ab415657d1e07ee868448802f4565","commitMessage":"@@@KAFKA-7502: Cleanup KTable materialization logic in a single place (#6174)\n\nThis is a draft cleanup for KAFKA-7502. Here is the details:\n\n* Make KTableKTableJoinNode abstract.  and define its child classes ([NonMaterialized. Materialized]KTableKTableJoinNode) instead: now.  all materialization-related routines are separated into the other classes.\n\n* KTableKTableJoinNodeBuilder#build now instantiates [NonMaterialized. Materialized]KTableKTableJoinNode classes instead of KTableKTableJoinNode.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   Bill Bejeck <bbejeck@gmail.com>","date":"2019-03-15 09:42:07","modifiedFileCount":"3","status":"M","submitter":"Lee Dongjin"},{"authorTime":"2021-04-29 08:57:28","codes":[{"authorDate":"2019-03-15 09:42:07","commitOrder":3,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName,\n            thisProcessorParameters().processorSupplier(),\n            thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(otherProcessorName,\n            otherProcessorParameters().processorSupplier(),\n            otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(mergeProcessorName,\n            mergeProcessorParameters().processorSupplier(),\n            thisProcessorName,\n            otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName,\n            joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName,\n            joinThisStoreNames);\n\n        if (storeBuilder != null) {\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","date":"2019-03-15 09:42:07","endLine":122,"groupId":"18325","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/03/bdda0b2d84434a8f5c7fa44212a282eb742e7d.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName,\n            thisProcessorParameters().processorSupplier(),\n            thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(otherProcessorName,\n            otherProcessorParameters().processorSupplier(),\n            otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(mergeProcessorName,\n            mergeProcessorParameters().processorSupplier(),\n            thisProcessorName,\n            otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName,\n            joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName,\n            joinThisStoreNames);\n\n        if (storeBuilder != null) {\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/KTableKTableJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"},{"authorDate":"2021-04-29 08:57:28","commitOrder":3,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n\n        outerJoinWindowStoreBuilder.ifPresent(builder -> topologyBuilder.addStateStore(builder, thisProcessorName, otherProcessorName));\n    }\n","date":"2021-04-29 08:57:28","endLine":99,"groupId":"17124","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ee/ba0c8211a4ccd8850c3eb494a115c1f9b3912d.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/StreamStreamJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"}],"commitId":"bf359f8e2924ee03b34a6f7e7eaf80bef55f9d98","commitMessage":"@@@KAFKA-10847: Fix spurious results on left/outer stream-stream joins (#10462)\n\nFixes the issue with https://issues.apache.org/jira/browse/KAFKA-10847.\n\nTo fix the above problem.  the left/outer stream-stream join processor uses a buffer to hold non-joined records for some time until the window closes.  so they are not processed if a join is found during the join window time. If the window of a record closes and a join was not found.  then this should be emitted and processed by the consequent topology processor.\n\nA new time-ordered window store is used to temporary hold records that do not have a join and keep the records keys ordered by time. The KStreamStreamJoin has a reference to this new store . For every non-joined record seen.  the processor writes it to this new state store without processing it. When a joined record is seen.  the processor deletes the joined record from the new state store to prevent further processing.\n\nRecords that were never joined at the end of the window + grace period are emitted to the next topology processor. I use the stream time to check for the expiry time for determinism results . The KStreamStreamJoin checks for expired records and emit them every time a new record is processed in the join processor.\n\nThe new state store is shared with the left and right join nodes. The new store needs to serialize the record keys using a combined key of <joinSide-recordKey>. This key combination helps to delete the records from the other join if a joined record is found. Two new serdes are created for this.  KeyAndJoinSideSerde which serializes a boolean value that specifies the side where the key is found.  and ValueOrOtherValueSerde that serializes either V1 or V2 based on where the key was found.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-04-29 08:57:28","modifiedFileCount":"11","status":"M","submitter":"Sergio Pe?a"},{"authorTime":"2021-05-04 05:10:05","codes":[{"authorDate":"2019-03-15 09:42:07","commitOrder":4,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName,\n            thisProcessorParameters().processorSupplier(),\n            thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(otherProcessorName,\n            otherProcessorParameters().processorSupplier(),\n            otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(mergeProcessorName,\n            mergeProcessorParameters().processorSupplier(),\n            thisProcessorName,\n            otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName,\n            joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName,\n            joinThisStoreNames);\n\n        if (storeBuilder != null) {\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","date":"2019-03-15 09:42:07","endLine":122,"groupId":"18325","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/03/bdda0b2d84434a8f5c7fa44212a282eb742e7d.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName,\n            thisProcessorParameters().processorSupplier(),\n            thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(otherProcessorName,\n            otherProcessorParameters().processorSupplier(),\n            otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(mergeProcessorName,\n            mergeProcessorParameters().processorSupplier(),\n            thisProcessorName,\n            otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName,\n            joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName,\n            joinThisStoreNames);\n\n        if (storeBuilder != null) {\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/KTableKTableJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"N"},{"authorDate":"2021-05-04 05:10:05","commitOrder":4,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n\n        final StreamsConfig streamsConfig = topologyBuilder.getStreamsConfig();\n        if (streamsConfig == null || StreamsConfig.InternalConfig.getBoolean(streamsConfig.originals(), ENABLE_KSTREAMS_OUTER_JOIN_SPURIOUS_RESULTS_FIX, true)) {\n            outerJoinWindowStoreBuilder.ifPresent(builder -> topologyBuilder.addStateStore(builder, thisProcessorName, otherProcessorName));\n        }\n    }\n","date":"2021-05-04 05:10:05","endLine":105,"groupId":"17124","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/e23781e7b6a191885df3af504e1ae2426e0624.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n\n        outerJoinWindowStoreBuilder.ifPresent(builder -> topologyBuilder.addStateStore(builder, thisProcessorName, otherProcessorName));\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/StreamStreamJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"62221edaff412ca18cf32d81e82fd1f68752eaf6","commitMessage":"@@@KAFKA-10847: Add internal flag to disable KAFKA-10847 fix (#10612)\n\nAdds an internal flag that can be used to disable the fixes in KAFKA-10847. It defaults to true if the flag is not set or has an invalid boolean value.\n\nThe flag is named __enable.kstreams.outer.join.spurious.results.fix__. This flag is considered internal only. It is a temporary flag that will be used to help users to disable the join fixes while they do a transition from the previous semantics of left/outer joins. The flag may be removed in future releases.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2021-05-04 05:10:05","modifiedFileCount":"7","status":"M","submitter":"Sergio Pe?a"},{"authorTime":"2021-05-07 08:27:23","codes":[{"authorDate":"2021-05-07 08:27:23","commitOrder":5,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(\n            thisProcessorName,\n            thisProcessorParameters().processorSupplier(),\n            thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            otherProcessorName,\n            otherProcessorParameters().processorSupplier(),\n            otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            mergeProcessorName,\n            mergeProcessorParameters().processorSupplier(),\n            thisProcessorName,\n            otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName, joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName, joinThisStoreNames);\n\n        if (storeBuilder != null) {\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","date":"2021-05-07 08:27:23","endLine":127,"groupId":"18325","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder@finalPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/a1e35f3b9f98b6504fe4594c9bc27ee0762a25.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(\n            thisProcessorName,\n            thisProcessorParameters().processorSupplier(),\n            thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            otherProcessorName,\n            otherProcessorParameters().processorSupplier(),\n            otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            mergeProcessorName,\n            mergeProcessorParameters().processorSupplier(),\n            thisProcessorName,\n            otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName, joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName, joinThisStoreNames);\n\n        if (storeBuilder != null) {\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/KTableKTableJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2021-05-07 08:27:23","commitOrder":5,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n\n        if (props == null || StreamsConfig.InternalConfig.getBoolean(new HashMap(props), ENABLE_KSTREAMS_OUTER_JOIN_SPURIOUS_RESULTS_FIX, true)) {\n            outerJoinWindowStoreBuilder.ifPresent(builder -> topologyBuilder.addStateStore(builder, thisProcessorName, otherProcessorName));\n        }\n    }\n","date":"2021-05-07 08:27:23","endLine":108,"groupId":"17124","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder@finalPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/40c718f9d1f793ef3f9abb4e6eee0b9adfd580.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n\n        final StreamsConfig streamsConfig = topologyBuilder.getStreamsConfig();\n        if (streamsConfig == null || StreamsConfig.InternalConfig.getBoolean(streamsConfig.originals(), ENABLE_KSTREAMS_OUTER_JOIN_SPURIOUS_RESULTS_FIX, true)) {\n            outerJoinWindowStoreBuilder.ifPresent(builder -> topologyBuilder.addStateStore(builder, thisProcessorName, otherProcessorName));\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/StreamStreamJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"45d7440c1577b838d4584d3860e5c4d691446f3f","commitMessage":"@@@KAFKA-10847: Set StreamsConfig on InternalTopologyDriver before writing topology (#10640)\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2021-05-07 08:27:23","modifiedFileCount":"20","status":"M","submitter":"Sergio Pe?a"},{"authorTime":"2021-06-17 00:25:16","codes":[{"authorDate":"2021-05-07 08:27:23","commitOrder":6,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(\n            thisProcessorName,\n            thisProcessorParameters().processorSupplier(),\n            thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            otherProcessorName,\n            otherProcessorParameters().processorSupplier(),\n            otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            mergeProcessorName,\n            mergeProcessorParameters().processorSupplier(),\n            thisProcessorName,\n            otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName, joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName, joinThisStoreNames);\n\n        if (storeBuilder != null) {\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","date":"2021-05-07 08:27:23","endLine":127,"groupId":"18325","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder@finalPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/a1e35f3b9f98b6504fe4594c9bc27ee0762a25.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(\n            thisProcessorName,\n            thisProcessorParameters().processorSupplier(),\n            thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            otherProcessorName,\n            otherProcessorParameters().processorSupplier(),\n            otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            mergeProcessorName,\n            mergeProcessorParameters().processorSupplier(),\n            thisProcessorName,\n            otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName, joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName, joinThisStoreNames);\n\n        if (storeBuilder != null) {\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/KTableKTableJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"},{"authorDate":"2021-06-17 00:25:16","commitOrder":6,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n\n        if (enableSpuriousResultFix &&\n            (props == null ||\n                StreamsConfig.InternalConfig.getBoolean(\n                    new HashMap(props),\n                    ENABLE_KSTREAMS_OUTER_JOIN_SPURIOUS_RESULTS_FIX,\n                    true\n                )\n            )) {\n            outerJoinWindowStoreBuilder.ifPresent(builder -> topologyBuilder.addStateStore(builder, thisProcessorName, otherProcessorName));\n        }\n    }\n","date":"2021-06-17 00:25:16","endLine":115,"groupId":"17124","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder@finalPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7b/b1e95af6e0380a8eaf7ba06f4ee4102cb359be.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n\n        if (props == null || StreamsConfig.InternalConfig.getBoolean(new HashMap(props), ENABLE_KSTREAMS_OUTER_JOIN_SPURIOUS_RESULTS_FIX, true)) {\n            outerJoinWindowStoreBuilder.ifPresent(builder -> topologyBuilder.addStateStore(builder, thisProcessorName, otherProcessorName));\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/StreamStreamJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"96767a60db4117f257e911871d139572b84be65d","commitMessage":"@@@KAFKA-12909: disable spurious left/outer stream-stream join fix for old JoinWindows API (#10861)\n\nWe changed the behavior of left/outer stream-stream join via KAFKA-10847.\nTo avoid a breaking change during an upgrade.  we need to disable this\nfix by default.\n\nWe only enable the fix if users opt-in expliclity by changing their\ncode. We leverage KIP-633 (KAFKA-8613) that offers a new JoinWindows\nAPI with mandatory grace-period to enable the fix.\n\nReviewers: Sergio Pe?a <sergio@confluent.io>.  Israel Ekpo <israelekpo@gmail.com>.  Guozhang Wang <guozhang@confluent.io>","date":"2021-06-17 00:25:16","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-07-16 01:58:15","codes":[{"authorDate":"2021-05-07 08:27:23","commitOrder":7,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(\n            thisProcessorName,\n            thisProcessorParameters().processorSupplier(),\n            thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            otherProcessorName,\n            otherProcessorParameters().processorSupplier(),\n            otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            mergeProcessorName,\n            mergeProcessorParameters().processorSupplier(),\n            thisProcessorName,\n            otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName, joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName, joinThisStoreNames);\n\n        if (storeBuilder != null) {\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","date":"2021-05-07 08:27:23","endLine":127,"groupId":"18325","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder@finalPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/a1e35f3b9f98b6504fe4594c9bc27ee0762a25.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(\n            thisProcessorName,\n            thisProcessorParameters().processorSupplier(),\n            thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            otherProcessorName,\n            otherProcessorParameters().processorSupplier(),\n            otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            mergeProcessorName,\n            mergeProcessorParameters().processorSupplier(),\n            thisProcessorName,\n            otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName, joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName, joinThisStoreNames);\n\n        if (storeBuilder != null) {\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/KTableKTableJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"},{"authorDate":"2021-07-16 01:58:15","commitOrder":7,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n\n        if (enableSpuriousResultFix) {\n            outerJoinWindowStoreBuilder.ifPresent(builder -> topologyBuilder.addStateStore(builder, thisProcessorName, otherProcessorName));\n        }\n    }\n","date":"2021-07-16 01:58:15","endLine":104,"groupId":"17124","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder@finalPropertiesprops)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7b/0e5aa39bb12e9470f4fdb8960a2d241517cc2b.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n\n        if (enableSpuriousResultFix &&\n            (props == null ||\n                StreamsConfig.InternalConfig.getBoolean(\n                    new HashMap(props),\n                    ENABLE_KSTREAMS_OUTER_JOIN_SPURIOUS_RESULTS_FIX,\n                    true\n                )\n            )) {\n            outerJoinWindowStoreBuilder.ifPresent(builder -> topologyBuilder.addStateStore(builder, thisProcessorName, otherProcessorName));\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/StreamStreamJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"3e3264760ba26e75153c655694c820a531935607","commitMessage":"@@@KAFKA-10847: Remove internal config for enabling the fix (#10941)\n\nAlso update the upgrade guide indicating about the grace period KIP and its indication on the fix with throughput impact.\n\nReviewers: Luke Chen <showuon@gmail.com>.  Matthias J. Sax <mjsax@apache.org>","date":"2021-07-16 01:58:15","modifiedFileCount":"6","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2021-08-27 08:19:03","codes":[{"authorDate":"2021-08-27 08:19:03","commitOrder":8,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(\n            thisProcessorName,\n            thisProcessorParameters().processorSupplier(),\n            thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            otherProcessorName,\n            otherProcessorParameters().processorSupplier(),\n            otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            mergeProcessorName,\n            mergeProcessorParameters().processorSupplier(),\n            thisProcessorName,\n            otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName, joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName, joinThisStoreNames);\n\n        if (storeBuilder != null) {\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","date":"2021-08-27 08:19:03","endLine":126,"groupId":"102988","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e6/bd49d31898977c760bc2f3b99215d690f89869.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String mergeProcessorName = mergeProcessorParameters().processorName();\n\n        topologyBuilder.addProcessor(\n            thisProcessorName,\n            thisProcessorParameters().processorSupplier(),\n            thisJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            otherProcessorName,\n            otherProcessorParameters().processorSupplier(),\n            otherJoinSideNodeName());\n\n        topologyBuilder.addProcessor(\n            mergeProcessorName,\n            mergeProcessorParameters().processorSupplier(),\n            thisProcessorName,\n            otherProcessorName);\n\n        topologyBuilder.connectProcessorAndStateStores(thisProcessorName, joinOtherStoreNames);\n        topologyBuilder.connectProcessorAndStateStores(otherProcessorName, joinThisStoreNames);\n\n        if (storeBuilder != null) {\n            topologyBuilder.addStateStore(storeBuilder, mergeProcessorName);\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/KTableKTableJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2021-08-27 08:19:03","commitOrder":8,"curCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n\n        if (enableSpuriousResultFix) {\n            outerJoinWindowStoreBuilder.ifPresent(builder -> topologyBuilder.addStateStore(builder, thisProcessorName, otherProcessorName));\n        }\n    }\n","date":"2021-08-27 08:19:03","endLine":103,"groupId":"102988","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"writeToTopology","params":"(finalInternalTopologyBuildertopologyBuilder)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/bfff047dc03e0ceaf80eeaec779ce55b68c20d.src","preCode":"    public void writeToTopology(final InternalTopologyBuilder topologyBuilder, final Properties props) {\n\n        final String thisProcessorName = thisProcessorParameters().processorName();\n        final String otherProcessorName = otherProcessorParameters().processorName();\n        final String thisWindowedStreamProcessorName = thisWindowedStreamProcessorParameters.processorName();\n        final String otherWindowedStreamProcessorName = otherWindowedStreamProcessorParameters.processorName();\n\n        topologyBuilder.addProcessor(thisProcessorName, thisProcessorParameters().processorSupplier(), thisWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(otherProcessorName, otherProcessorParameters().processorSupplier(), otherWindowedStreamProcessorName);\n        topologyBuilder.addProcessor(mergeProcessorParameters().processorName(), mergeProcessorParameters().processorSupplier(), thisProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(thisWindowStoreBuilder, thisWindowedStreamProcessorName, otherProcessorName);\n        topologyBuilder.addStateStore(otherWindowStoreBuilder, otherWindowedStreamProcessorName, thisProcessorName);\n\n        if (enableSpuriousResultFix) {\n            outerJoinWindowStoreBuilder.ifPresent(builder -> topologyBuilder.addStateStore(builder, thisProcessorName, otherProcessorName));\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/graph/StreamStreamJoinNode.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"d9bb98895453fa7cdf14eb3184e904fca884f9a1","commitMessage":"@@@MINOR: remove unused Properties from GraphNode#writeToTopology (#11263)\n\nThe GraphNode#writeToTopology method accepts a Properties input parameter.  but never uses it in any of its implementations. We can remove this parameter to clean things up and help make it clear that writing nodes to the topology doesn't involve the app properties.\n\nReviewers: Bruno Cadonna <cadonna@confluent.io>","date":"2021-08-27 08:19:03","modifiedFileCount":"18","status":"M","submitter":"A. Sophie Blee-Goldman"}]
