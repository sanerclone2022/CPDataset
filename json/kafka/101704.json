[{"authorTime":"2016-04-27 02:39:49","codes":[{"authorDate":"2016-04-27 02:39:49","commitOrder":3,"curCode":"    public void testStateStoreLazyEval() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(0, driver.allStateStores().size());\n    }\n","date":"2016-04-27 02:39:49","endLine":272,"groupId":"14698","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateStoreLazyEval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ca/3bbe181baf20ec11110d6dd7e4a67318104225.src","preCode":"    public void testStateStoreLazyEval() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(0, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"B"},{"authorDate":"2016-04-27 02:39:49","commitOrder":3,"curCode":"    public void testStateStore() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","date":"2016-04-27 02:39:49","endLine":313,"groupId":"14698","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ca/3bbe181baf20ec11110d6dd7e4a67318104225.src","preCode":"    public void testStateStore() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"MB"}],"commitId":"1a73629bb43bbc781e5a968a61f6079365bc75b7","commitMessage":"@@@KAFKA-3607: Close KStreamTestDriver upon completing; follow-up fixes to be tracked in KAFKA-3623\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Eno Thereska.  Michael G. Noll.  Ismael Juma\n\nCloses #1258 from guozhangwang/K3607\n","date":"2016-04-27 02:39:49","modifiedFileCount":"30","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2016-07-19 03:12:51","codes":[{"authorDate":"2016-07-19 03:12:51","commitOrder":4,"curCode":"    public void testStateStoreLazyEval() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(0, driver.allStateStores().size());\n    }\n","date":"2016-07-19 03:12:51","endLine":278,"groupId":"1527","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateStoreLazyEval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/67/94bb4f83962fb33f6bc3e3e06cdce09180a90c.src","preCode":"    public void testStateStoreLazyEval() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(0, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2016-07-19 03:12:51","commitOrder":4,"curCode":"    public void testStateStore() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","date":"2016-07-19 03:12:51","endLine":321,"groupId":"1527","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/67/94bb4f83962fb33f6bc3e3e06cdce09180a90c.src","preCode":"    public void testStateStore() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"M"}],"commitId":"fbc5185543fd4895c7c81ff55b3c8b4c25ac7600","commitMessage":"@@@KAFKA-3870: Expose state store names in DSL\n\nAuthor: Eno Thereska <eno.thereska@gmail.com>\n\nReviewers: Damian Guy.  Matthias J. Sax.  Michael G. Noll.  Guozhang Wang\n\nCloses #1526 from enothereska/expose-names-dsl\n","date":"2016-07-19 03:12:51","modifiedFileCount":"39","status":"M","submitter":"Eno Thereska"},{"authorTime":"2016-07-19 03:12:51","codes":[{"authorDate":"2016-07-22 05:44:59","commitOrder":5,"curCode":"    public void testStateStoreLazyEval() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","date":"2016-07-22 05:44:59","endLine":278,"groupId":"1527","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateStoreLazyEval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/61/7a2a1d31b2822b824e357bfececf8067c40bc3.src","preCode":"    public void testStateStoreLazyEval() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(0, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2016-07-19 03:12:51","commitOrder":5,"curCode":"    public void testStateStore() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","date":"2016-07-19 03:12:51","endLine":321,"groupId":"1527","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/67/94bb4f83962fb33f6bc3e3e06cdce09180a90c.src","preCode":"    public void testStateStore() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"N"}],"commitId":"1ccab26a325e6ee23396049a24a5b6eb4b7a1c8e","commitMessage":"@@@KAFKA-3911: KTable source materialization\n\nAuthor: Eno Thereska <eno.thereska@gmail.com>\n\nReviewers: Damian Guy.  Guozhang Wang\n\nCloses #1638 from enothereska/KAFKA-3911-ktable-materialization\n","date":"2016-07-22 05:44:59","modifiedFileCount":"14","status":"M","submitter":"Eno Thereska"},{"authorTime":"2017-08-01 06:28:59","codes":[{"authorDate":"2017-08-01 06:28:59","commitOrder":6,"curCode":"    public void testStateStoreLazyEval() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","date":"2017-08-01 06:28:59","endLine":293,"groupId":"14666","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateStoreLazyEval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/ea763a023a7adab8a1551bfa3668fcdeeb3915.src","preCode":"    public void testStateStoreLazyEval() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"},{"authorDate":"2017-08-01 06:28:59","commitOrder":6,"curCode":"    public void testStateStore() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","date":"2017-08-01 06:28:59","endLine":336,"groupId":"1527","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/ea763a023a7adab8a1551bfa3668fcdeeb3915.src","preCode":"    public void testStateStore() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"}],"commitId":"da2205578be3228ce40eb5e59f6bbcb0c8da0aba","commitMessage":"@@@KAFKA-5671: Add StreamsBuilder and Deprecate KStreamBuilder\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3602 from mjsax/kafka-5671-add-streamsbuilder\n","date":"2017-08-01 06:28:59","modifiedFileCount":"83","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-08-02 07:16:34","codes":[{"authorDate":"2017-08-02 07:16:34","commitOrder":7,"curCode":"    public void testStateStoreLazyEval() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","date":"2017-08-02 07:16:34","endLine":285,"groupId":"14666","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateStoreLazyEval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f7/91012d6c8bce256074740535109299b5e1c92e.src","preCode":"    public void testStateStoreLazyEval() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"M"},{"authorDate":"2017-08-02 07:16:34","commitOrder":7,"curCode":"    public void testStateStore() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","date":"2017-08-02 07:16:34","endLine":328,"groupId":"1527","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f7/91012d6c8bce256074740535109299b5e1c92e.src","preCode":"    public void testStateStore() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":288,"status":"M"}],"commitId":"edcefccfd7bd83110746fa81669e0d69ece5bb4b","commitMessage":"@@@KAFKA-3623: KStreamTestDriver extends ExternalResource\n\nIn the streams project.  there are a number of unit tests that has duplicate\ncode with respect to the tearDown() method.  in which it tries to close the\nKStreamTestDriver connection. The goal of this changeset is to eliminate\nthis duplication by converting the KStreamTestDriver class to an ExternalResource\nclass which is the base class of JUnit Rule.\n\nIn every unit tests that calls KStreamTestDriver.  we annotate the KStreamTestDriver\nusing Rule annotation. In the KStreamTestDriver class.  we override the after()\nmethod. This after() method in turn calls the close() method which was previously\ncalled in the tearDown() method in the unit tests. By annotating the KStreamTestDriver\nas a Rule.  the after() method will be called automatically after every testcase.\n\nAuthor: johnma14 <mariamj@us.ibm.com>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3589 from johnma14/bug/KAFKA-3623\n","date":"2017-08-02 07:16:34","modifiedFileCount":"34","status":"M","submitter":"Mariam John"},{"authorTime":"2017-08-03 06:13:02","codes":[{"authorDate":"2017-08-03 06:13:02","commitOrder":8,"curCode":"    public void testStateStoreLazyEval() {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","date":"2017-08-03 06:13:02","endLine":284,"groupId":"14666","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateStoreLazyEval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f0/6cc63fd2f00fb3994cd4f0243edb0ecec430c2.src","preCode":"    public void testStateStoreLazyEval() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"},{"authorDate":"2017-08-03 06:13:02","commitOrder":8,"curCode":"    public void testStateStore() {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","date":"2017-08-03 06:13:02","endLine":327,"groupId":"1527","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f0/6cc63fd2f00fb3994cd4f0243edb0ecec430c2.src","preCode":"    public void testStateStore() throws IOException {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"}],"commitId":"125d69caee993710bc07523fdd3deb0e06b10636","commitMessage":"@@@KAFKA-5671 Followup: Remove reflections in unit test classes\n\n1. Remove rest deprecation warnings in streams:jar.\n\n2. Consolidate all unit test classes' reflections to access internal topology builder from packages other than `o.a.k.streams`. We need to refactor the hierarchies of StreamTask.  StreamThread and KafkaStreams to remove these hacky reflections.\n\n3. Minor fixes such as reference path.  etc.\n\n4. Minor edits on web docs for the describe function under developer-guide.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Ismael Juma <ismael@juma.me.uk>.  Damian Guy <damian.guy@gmail.com>\n\nCloses #3603 from guozhangwang/K5671-followup-comments\n","date":"2017-08-03 06:13:02","modifiedFileCount":"41","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2017-09-18 22:53:44","codes":[{"authorDate":"2017-09-18 22:53:44","commitOrder":9,"curCode":"    public void testStateStoreLazyEval() {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","date":"2017-09-18 22:53:44","endLine":286,"groupId":"2782","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateStoreLazyEval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/918e27b7c741380ff3b3d9e24e65e743bee5bb.src","preCode":"    public void testStateStoreLazyEval() {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"},{"authorDate":"2017-09-18 22:53:44","commitOrder":9,"curCode":"    public void testStateStore() {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","date":"2017-09-18 22:53:44","endLine":327,"groupId":"1527","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/918e27b7c741380ff3b3d9e24e65e743bee5bb.src","preCode":"    public void testStateStore() {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String storeName1 = \"storeName1\";\n        String storeName2 = \"storeName2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1, storeName1);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic2, storeName2);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"}],"commitId":"f2b74aa1c36bf2882006c14f7cbd56b493f39d26","commitMessage":"@@@KAFKA-5873; add materialized overloads to StreamsBuilder\n\nAdd overloads for `table` and `globalTable` that use `Materialized`\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3837 from dguy/kafka-5873\n","date":"2017-09-18 22:53:44","modifiedFileCount":"36","status":"M","submitter":"Damian Guy"},{"authorTime":"2018-05-08 00:44:45","codes":[{"authorDate":"2018-05-08 00:44:45","commitOrder":10,"curCode":"    public void testStateStoreLazyEval() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","date":"2018-05-08 00:44:45","endLine":289,"groupId":"2782","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateStoreLazyEval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/dd0a70b518d547343b4817c92f7d3caa91a653.src","preCode":"    public void testStateStoreLazyEval() {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"},{"authorDate":"2018-05-08 00:44:45","commitOrder":10,"curCode":"    public void testStateStore() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        final KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        final KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","date":"2018-05-08 00:44:45","endLine":330,"groupId":"1527","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/dd0a70b518d547343b4817c92f7d3caa91a653.src","preCode":"    public void testStateStore() {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"}],"commitId":"42771eb37d6abd0a34220d30773e559680bdf9b0","commitMessage":"@@@MINOR: Remove deprecated KTable#writeAs.  print.  foreach.  to.  through (#4910)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-05-08 00:44:45","modifiedFileCount":"8","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-06-14 01:27:35","codes":[{"authorDate":"2018-06-14 01:27:35","commitOrder":11,"curCode":"    public void testStateStoreLazyEval() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","date":"2018-06-14 01:27:35","endLine":289,"groupId":"2782","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateStoreLazyEval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/01/6cde2f1fba337bdf3af7148479ea3ef6eba927.src","preCode":"    public void testStateStoreLazyEval() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"},{"authorDate":"2018-06-14 01:27:35","commitOrder":11,"curCode":"    public void testStateStore() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        final KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        final KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","date":"2018-06-14 01:27:35","endLine":328,"groupId":"1527","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/01/6cde2f1fba337bdf3af7148479ea3ef6eba927.src","preCode":"    public void testStateStore() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        final KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        final KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        driver.setUp(builder, stateDir, null, null);\n        driver.setTime(0L);\n\n        \r\n        assertEquals(2, driver.allStateStores().size());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"}],"commitId":"de4f4f530a92473edb3665c94ac386d5c53cc893","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [part 2] (#4986)\n\n* KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [part 2]\n\n* Refactor:\n  -KTableFilterTest.java\n  -KTableImplTest.java\n  -KTableMapValuesTest.java\n  -KTableSourceTest.java\n\n* Add access to task.  processorTopology.  and globalTopology in TopologyTestDriver via TopologyTestDriverWrapper\n* Remove unnecessary constructor in TopologyTestDriver\n\n* Change how TopologyTestDriverWrapper#getProcessorContext sets the current node\n\nReviewers: John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-06-14 01:27:35","modifiedFileCount":"5","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2018-08-04 04:19:46","commitOrder":12,"curCode":"    public void testStateStoreLazyEval() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(final String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(final String key, final Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","date":"2018-08-04 04:19:46","endLine":289,"groupId":"2782","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateStoreLazyEval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/60/d7426224fd772cd769f34556c86a2cb58f38cf.src","preCode":"    public void testStateStoreLazyEval() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"},{"authorDate":"2018-08-04 04:19:46","commitOrder":12,"curCode":"    public void testStateStore() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        final KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(final String value) {\n                        return new Integer(value);\n                    }\n                });\n        final KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(final String key, final Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(final String v1, final Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","date":"2018-08-04 04:19:46","endLine":328,"groupId":"1527","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/60/d7426224fd772cd769f34556c86a2cb58f38cf.src","preCode":"    public void testStateStore() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        final KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        final KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(String v1, Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"M"}],"commitId":"3637b2c374d48e99e0a7be37605d3c79f2661007","commitMessage":"@@@MINOR: Require final variables in Streams (#5452)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-08-04 04:19:46","modifiedFileCount":"212","status":"M","submitter":"John Roesler"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2018-12-09 14:49:48","commitOrder":13,"curCode":"    public void testStateStoreLazyEval() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(final String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(final String key, final Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(0, driver.getAllStateStores().size());\n        }\n    }\n","date":"2018-12-09 14:49:48","endLine":233,"groupId":"2782","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateStoreLazyEval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dd/392913c612c4181eae71425b97b3dafd8f93ce.src","preCode":"    public void testStateStoreLazyEval() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(final String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(final String key, final Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":205,"status":"M"},{"authorDate":"2018-08-04 04:19:46","commitOrder":13,"curCode":"    public void testStateStore() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        final KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(final String value) {\n                        return new Integer(value);\n                    }\n                });\n        final KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(final String key, final Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(final String v1, final Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","date":"2018-08-04 04:19:46","endLine":328,"groupId":"1527","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/60/d7426224fd772cd769f34556c86a2cb58f38cf.src","preCode":"    public void testStateStore() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        final KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(final String value) {\n                        return new Integer(value);\n                    }\n                });\n        final KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(final String key, final Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(final String v1, final Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":292,"status":"N"}],"commitId":"c0353d8ddce88bac6fc04f85dd40cb95b8ca5cf9","commitMessage":"@@@KAFKA-6036: Local Materialization for Source KTable (#5779)\n\nRefactor the materialization for source KTables in the way that:\n\nIf Materialized.as(queryableName) is specified.  materialize;\nIf the downstream operator requires to fetch from this KTable via ValueGetters.  materialize;\nIf the downstream operator requires to send old values.  materialize.\nOtherwise do not materialize the KTable. E.g. builder.table(\"topic\").filter().toStream().to(\"topic\") would not create any state stores.\n\nThere's a couple of minor changes along with PR as well:\n\nKTableImpl's queryableStoreName and isQueryable are merged into queryableStoreName only.  and if it is null it means not queryable. As long as it is not null.  it should be queryable (i.e. internally generated names will not be used any more).\nTo achieve this.  splitted MaterializedInternal.storeName() and MaterializedInternal.queryableName(). The former can be internally generated and will not be exposed to users. QueryableName can be modified to set to the internal store name if we decide to materialize it during the DSL parsing / physical topology generation phase. And only if queryableName is specified the corresponding KTable is determined to be materialized.\n\nFound some overlapping unit tests among KTableImplTest.  and KTableXXTest.  removed them.\n\nThere are a few typing bugs found along the way.  fixed them as well.\n\n-----------------------\n\nThis PR is an illustration of experimenting a poc towards logical materializations.\n\nToday we've logically materialized the KTable for filter / mapValues / transformValues if queryableName is not specified via Materialized.  but whenever users specify queryableName we will still always materialize. My original goal is to also consider logically materialize for queryable stores.  but when implementing it via a wrapped store to apply the transformations on the fly I realized it is tougher than I thought.  because we not only need to support fetch or get.  but also needs to support range queries.  approximateNumEntries.  and isOpen etc as well.  which are not efficient to support. So in the end I'd suggest we still stick with the rule of always materializing if queryableName is specified.  and only consider logical materialization otherwise.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <mjsax@apache.org>","date":"2018-12-09 14:49:48","modifiedFileCount":"32","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2019-01-09 05:32:53","codes":[{"authorDate":"2019-01-09 05:32:53","commitOrder":14,"curCode":"    public void testStateStoreLazyEval() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n            (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped =\n            (KTableImpl<String, String, Integer>) table1.mapValues(Integer::new);\n        table1Mapped.filter((key, value) -> (value % 2) == 0);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(0, driver.getAllStateStores().size());\n        }\n    }\n","date":"2019-01-09 05:32:53","endLine":265,"groupId":"11456","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateStoreLazyEval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c8/aef07543ca5ab0751c569c2fd96df0d51984c8.src","preCode":"    public void testStateStoreLazyEval() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(final String value) {\n                        return new Integer(value);\n                    }\n                });\n        table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(final String key, final Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(0, driver.getAllStateStores().size());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"},{"authorDate":"2019-01-09 05:32:53","commitOrder":14,"curCode":"    public void testStateStore() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n            (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        final KTableImpl<String, String, String> table2 =\n            (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped =\n            (KTableImpl<String, String, Integer>) table1.mapValues(Integer::new);\n        final KTableImpl<String, Integer, Integer> table1MappedFiltered =\n            (KTableImpl<String, Integer, Integer>) table1Mapped.filter((key, value) -> (value % 2) == 0);\n        table2.join(table1MappedFiltered, (v1, v2) -> v1 + v2);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","date":"2019-01-09 05:32:53","endLine":288,"groupId":"11457","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c8/aef07543ca5ab0751c569c2fd96df0d51984c8.src","preCode":"    public void testStateStore() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        final KTableImpl<String, String, String> table2 =\n                (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(final String value) {\n                        return new Integer(value);\n                    }\n                });\n        final KTableImpl<String, Integer, Integer> table1MappedFiltered = (KTableImpl<String, Integer, Integer>) table1Mapped.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(final String key, final Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        table2.join(table1MappedFiltered,\n                new ValueJoiner<String, Integer, String>() {\n                    @Override\n                    public String apply(final String v1, final Integer v2) {\n                        return v1 + v2;\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"}],"commitId":"3991d81f6c645bdf36c58e3d56b829ff92dbff3a","commitMessage":"@@@MINOR: code cleanup (#6056)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-01-09 05:32:53","modifiedFileCount":"19","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-03-20 08:27:32","codes":[{"authorDate":"2019-03-20 08:27:32","commitOrder":15,"curCode":"    public void testStateStoreLazyEval() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final KTableImpl<String, String, String> table1 =\n            (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped =\n            (KTableImpl<String, String, Integer>) table1.mapValues(Integer::new);\n        table1Mapped.filter((key, value) -> (value % 2) == 0);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(0, driver.getAllStateStores().size());\n        }\n    }\n","date":"2019-03-20 08:27:32","endLine":260,"groupId":"11456","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateStoreLazyEval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/81/ba31aa6ddcad941f94b04b59880ded6821724a.src","preCode":"    public void testStateStoreLazyEval() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n            (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped =\n            (KTableImpl<String, String, Integer>) table1.mapValues(Integer::new);\n        table1Mapped.filter((key, value) -> (value % 2) == 0);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(0, driver.getAllStateStores().size());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"M"},{"authorDate":"2019-03-20 08:27:32","commitOrder":15,"curCode":"    public void testStateStore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final KTableImpl<String, String, String> table1 =\n            (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        final KTableImpl<String, String, String> table2 =\n            (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped =\n            (KTableImpl<String, String, Integer>) table1.mapValues(Integer::new);\n        final KTableImpl<String, Integer, Integer> table1MappedFiltered =\n            (KTableImpl<String, Integer, Integer>) table1Mapped.filter((key, value) -> (value % 2) == 0);\n        table2.join(table1MappedFiltered, (v1, v2) -> v1 + v2);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","date":"2019-03-20 08:27:32","endLine":282,"groupId":"11457","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/81/ba31aa6ddcad941f94b04b59880ded6821724a.src","preCode":"    public void testStateStore() {\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final KTableImpl<String, String, String> table1 =\n            (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        final KTableImpl<String, String, String> table2 =\n            (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped =\n            (KTableImpl<String, String, Integer>) table1.mapValues(Integer::new);\n        final KTableImpl<String, Integer, Integer> table1MappedFiltered =\n            (KTableImpl<String, Integer, Integer>) table1Mapped.filter((key, value) -> (value % 2) == 0);\n        table2.join(table1MappedFiltered, (v1, v2) -> v1 + v2);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"M"}],"commitId":"b5ce093a24d0fe212b5d1374330fc720b4913bee","commitMessage":"@@@MINOR: capture result timestamps in Kafka Streams DSL tests (#6447)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2019-03-20 08:27:32","modifiedFileCount":"29","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-04-01 21:20:48","codes":[{"authorDate":"2020-04-01 21:20:48","commitOrder":16,"curCode":"    public void testStateStoreLazyEval() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final KTableImpl<String, String, String> table1 =\n            (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped =\n            (KTableImpl<String, String, Integer>) table1.mapValues(s -> Integer.valueOf(s));\n        table1Mapped.filter((key, value) -> (value % 2) == 0);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(0, driver.getAllStateStores().size());\n        }\n    }\n","date":"2020-04-01 21:20:48","endLine":283,"groupId":"101704","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testStateStoreLazyEval","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/096efdc6767e8d1d936a9524b68f0d226cb8a7.src","preCode":"    public void testStateStoreLazyEval() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final KTableImpl<String, String, String> table1 =\n            (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped =\n            (KTableImpl<String, String, Integer>) table1.mapValues(Integer::new);\n        table1Mapped.filter((key, value) -> (value % 2) == 0);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(0, driver.getAllStateStores().size());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"},{"authorDate":"2020-04-01 21:20:48","commitOrder":16,"curCode":"    public void testStateStore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final KTableImpl<String, String, String> table1 =\n            (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        final KTableImpl<String, String, String> table2 =\n            (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped =\n            (KTableImpl<String, String, Integer>) table1.mapValues(s -> Integer.valueOf(s));\n        final KTableImpl<String, Integer, Integer> table1MappedFiltered =\n            (KTableImpl<String, Integer, Integer>) table1Mapped.filter((key, value) -> (value % 2) == 0);\n        table2.join(table1MappedFiltered, (v1, v2) -> v1 + v2);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","date":"2020-04-01 21:20:48","endLine":305,"groupId":"101704","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testStateStore","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/40/096efdc6767e8d1d936a9524b68f0d226cb8a7.src","preCode":"    public void testStateStore() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final String topic1 = \"topic1\";\n        final String topic2 = \"topic2\";\n\n        final KTableImpl<String, String, String> table1 =\n            (KTableImpl<String, String, String>) builder.table(topic1, consumed);\n        final KTableImpl<String, String, String> table2 =\n            (KTableImpl<String, String, String>) builder.table(topic2, consumed);\n\n        final KTableImpl<String, String, Integer> table1Mapped =\n            (KTableImpl<String, String, Integer>) table1.mapValues(Integer::new);\n        final KTableImpl<String, Integer, Integer> table1MappedFiltered =\n            (KTableImpl<String, Integer, Integer>) table1Mapped.filter((key, value) -> (value % 2) == 0);\n        table2.join(table1MappedFiltered, (v1, v2) -> v1 + v2);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            assertEquals(2, driver.getAllStateStores().size());\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"M"}],"commitId":"90bbeedf52f4b6a411e9630dd132583afa4cd428","commitMessage":"@@@MINOR: Fix Scala 2.13 compiler warnings (#8390)\n\nOnce Scala 2.13.2 is officially released.  I will submit a follow up PR\nthat enables `-Xfatal-warnings` with the necessary warning\nexclusions. Compiler warning exclusions were only introduced in 2.13.2\nand hence why we have to wait for that. I used a snapshot build to\ntest it in the meantime.\n\nChanges:\n* Remove Deprecated annotation from internal request classes\n* Class.newInstance is deprecated in favor of\nClass.getConstructor().newInstance\n* Replace deprecated JavaConversions with CollectionConverters\n* Remove unused kafka.cluster.Cluster\n* Don't use Map and Set methods deprecated in 2.13:\n    - collection.Map +.  ++.  -.  --.  mapValues.  filterKeys.  retain\n    - collection.Set +.  ++.  -.  --\n* Add scala-collection-compat dependency to streams-scala and\nupdate version to 2.1.4.\n* Replace usages of deprecated Either.get and Either.right\n* Replace usage of deprecated Integer(String) constructor\n* `import scala.language.implicitConversions` is not needed in Scala 2.13\n* Replace usage of deprecated `toIterator`.  `Traversable`.  `seq`. \n`reverseMap`.  `hasDefiniteSize`\n* Replace usage of deprecated alterConfigs with incrementalAlterConfigs\nwhere possible\n* Fix implicit widening conversions from Long/Int to Double/Float\n* Avoid implicit conversions to String\n* Eliminate usage of deprecated procedure syntax\n* Remove `println`in `LogValidatorTest` instead of fixing the compiler\nwarning since tests should not `println`.\n* Eliminate implicit conversion from Array to Seq\n* Remove unnecessary usage of 3 argument assertEquals\n* Replace `toStream` with `iterator`\n* Do not use deprecated SaslConfigs.DEFAULT_SASL_ENABLED_MECHANISMS\n* Replace StringBuilder.newBuilder with new StringBuilder\n* Rename AclBuffers to AclSeqs and remove usage of `filterKeys`\n* More consistent usage of Set/Map in Controller classes: this also fixes\ndeprecated warnings with Scala 2.13\n* Add spotBugs exclusion for inliner artifact in KafkaApis with Scala 2.12.\n\nReviewers: Manikumar Reddy <manikumar.reddy@gmail.com>.  Chia-Ping Tsai <chia7712@gmail.com>","date":"2020-04-01 21:20:48","modifiedFileCount":"12","status":"M","submitter":"Ismael Juma"}]
