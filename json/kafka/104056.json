[{"authorTime":"2019-05-18 22:28:37","codes":[{"authorDate":"2019-05-18 22:28:37","commitOrder":1,"curCode":"    public void testSyncGroupRequestWithFencedInstanceIdException() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n\n        final String memberId = \"memberId\";\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.NONE));\n        mockClient.prepareResponse(syncGroupResponse(Errors.FENCED_INSTANCE_ID));\n\n        assertThrows(FencedInstanceIdException.class, () -> coordinator.ensureActiveGroup());\n    }\n","date":"2019-05-18 22:28:36","endLine":277,"groupId":"21300","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSyncGroupRequestWithFencedInstanceIdException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/31/328b390ad440214536826111b6485d290f2cd2.src","preCode":"    public void testSyncGroupRequestWithFencedInstanceIdException() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n\n        final String memberId = \"memberId\";\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.NONE));\n        mockClient.prepareResponse(syncGroupResponse(Errors.FENCED_INSTANCE_ID));\n\n        assertThrows(FencedInstanceIdException.class, () -> coordinator.ensureActiveGroup());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":266,"status":"B"},{"authorDate":"2019-05-18 22:28:37","commitOrder":1,"curCode":"    public void testHeartbeatRequestWithFencedInstanceIdException() throws InterruptedException {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n\n        final String memberId = \"memberId\";\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.NONE));\n        mockClient.prepareResponse(syncGroupResponse(Errors.NONE));\n        mockClient.prepareResponse(heartbeatResponse(Errors.FENCED_INSTANCE_ID));\n\n        try {\n            coordinator.ensureActiveGroup();\n            mockTime.sleep(HEARTBEAT_INTERVAL_MS);\n            long startMs = System.currentTimeMillis();\n            while (System.currentTimeMillis() - startMs < 1000) {\n                Thread.sleep(10);\n                coordinator.pollHeartbeat(mockTime.milliseconds());\n            }\n            fail(\"Expected pollHeartbeat to raise fenced instance id exception in 1 second\");\n        } catch (RuntimeException exception) {\n            assertTrue(exception instanceof FencedInstanceIdException);\n        }\n    }\n","date":"2019-05-18 22:28:36","endLine":303,"groupId":"21300","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testHeartbeatRequestWithFencedInstanceIdException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/31/328b390ad440214536826111b6485d290f2cd2.src","preCode":"    public void testHeartbeatRequestWithFencedInstanceIdException() throws InterruptedException {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n\n        final String memberId = \"memberId\";\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.NONE));\n        mockClient.prepareResponse(syncGroupResponse(Errors.NONE));\n        mockClient.prepareResponse(heartbeatResponse(Errors.FENCED_INSTANCE_ID));\n\n        try {\n            coordinator.ensureActiveGroup();\n            mockTime.sleep(HEARTBEAT_INTERVAL_MS);\n            long startMs = System.currentTimeMillis();\n            while (System.currentTimeMillis() - startMs < 1000) {\n                Thread.sleep(10);\n                coordinator.pollHeartbeat(mockTime.milliseconds());\n            }\n            fail(\"Expected pollHeartbeat to raise fenced instance id exception in 1 second\");\n        } catch (RuntimeException exception) {\n            assertTrue(exception instanceof FencedInstanceIdException);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"B"}],"commitId":"9fa331b811d893a0d580e9136c1c7e1fa9774542","commitMessage":"@@@KAFKA-8225 & KIP-345 part-2: fencing static member instances with conflicting group.instance.id (#6650)\n\nFor static members join/rejoin.  we encode the current timestamp in the new member.id. The format looks like group.instance.id-timestamp.\n\nDuring consumer/broker interaction logic (Join.  Sync.  Heartbeat.  Commit).  we shall check the whether group.instance.id is known on group. If yes.  we shall match the member.id stored on static membership map with the request member.id. If mismatching.  this indicates a conflict consumer has used same group.instance.id.  and it will receive a fatal exception to shut down.\n\nRight now the only missing part is the system test. Will work on it offline while getting the major logic changes reviewed.\n\nReviewers: Ryanne Dolan <ryannedolan@gmail.com>.  Jason Gustafson <jason@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-18 22:28:36","modifiedFileCount":"13","status":"B","submitter":"Boyang Chen"},{"authorTime":"2019-07-27 14:13:37","codes":[{"authorDate":"2019-07-27 14:13:37","commitOrder":2,"curCode":"    public void testSyncGroupRequestWithFencedInstanceIdException() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.NONE));\n        mockClient.prepareResponse(syncGroupResponse(Errors.FENCED_INSTANCE_ID));\n\n        assertThrows(FencedInstanceIdException.class, () -> coordinator.ensureActiveGroup());\n    }\n","date":"2019-07-27 14:13:37","endLine":290,"groupId":"21300","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSyncGroupRequestWithFencedInstanceIdException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/264b3f359172e214ecb952d70aaedafbd25378.src","preCode":"    public void testSyncGroupRequestWithFencedInstanceIdException() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n\n        final String memberId = \"memberId\";\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.NONE));\n        mockClient.prepareResponse(syncGroupResponse(Errors.FENCED_INSTANCE_ID));\n\n        assertThrows(FencedInstanceIdException.class, () -> coordinator.ensureActiveGroup());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":280,"status":"M"},{"authorDate":"2019-07-27 14:13:37","commitOrder":2,"curCode":"    public void testHeartbeatRequestWithFencedInstanceIdException() throws InterruptedException {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.NONE));\n        mockClient.prepareResponse(syncGroupResponse(Errors.NONE));\n        mockClient.prepareResponse(heartbeatResponse(Errors.FENCED_INSTANCE_ID));\n\n        try {\n            coordinator.ensureActiveGroup();\n            mockTime.sleep(HEARTBEAT_INTERVAL_MS);\n            long startMs = System.currentTimeMillis();\n            while (System.currentTimeMillis() - startMs < 1000) {\n                Thread.sleep(10);\n                coordinator.pollHeartbeat(mockTime.milliseconds());\n            }\n            fail(\"Expected pollHeartbeat to raise fenced instance id exception in 1 second\");\n        } catch (RuntimeException exception) {\n            assertTrue(exception instanceof FencedInstanceIdException);\n        }\n    }\n","date":"2019-07-27 14:13:37","endLine":315,"groupId":"21300","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testHeartbeatRequestWithFencedInstanceIdException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/264b3f359172e214ecb952d70aaedafbd25378.src","preCode":"    public void testHeartbeatRequestWithFencedInstanceIdException() throws InterruptedException {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n\n        final String memberId = \"memberId\";\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.NONE));\n        mockClient.prepareResponse(syncGroupResponse(Errors.NONE));\n        mockClient.prepareResponse(heartbeatResponse(Errors.FENCED_INSTANCE_ID));\n\n        try {\n            coordinator.ensureActiveGroup();\n            mockTime.sleep(HEARTBEAT_INTERVAL_MS);\n            long startMs = System.currentTimeMillis();\n            while (System.currentTimeMillis() - startMs < 1000) {\n                Thread.sleep(10);\n                coordinator.pollHeartbeat(mockTime.milliseconds());\n            }\n            fail(\"Expected pollHeartbeat to raise fenced instance id exception in 1 second\");\n        } catch (RuntimeException exception) {\n            assertTrue(exception instanceof FencedInstanceIdException);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"}],"commitId":"74c90f46c34727be9484e9826ff543b451ada775","commitMessage":"@@@KAFKA-8221; Add batch leave group request (#6714)\n\nThis patch is part of KIP-345. We are aiming to support batch leave group request issued from admin client. This diff is the first effort to bump leave group request version.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2019-07-27 14:13:37","modifiedFileCount":"10","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-01-15 07:04:18","codes":[{"authorDate":"2020-01-15 07:04:18","commitOrder":3,"curCode":"    public void testSyncGroupRequestWithFencedInstanceIdException() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupRequest.UNKNOWN_MEMBER_ID, Errors.NONE));\n        mockClient.prepareResponse(syncGroupResponse(Errors.FENCED_INSTANCE_ID));\n\n        assertThrows(FencedInstanceIdException.class, () -> coordinator.ensureActiveGroup());\n    }\n","date":"2020-01-15 07:04:18","endLine":374,"groupId":"104056","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSyncGroupRequestWithFencedInstanceIdException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/b6390cc4864829fe9b8303275baffcc637647f.src","preCode":"    public void testSyncGroupRequestWithFencedInstanceIdException() {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.NONE));\n        mockClient.prepareResponse(syncGroupResponse(Errors.FENCED_INSTANCE_ID));\n\n        assertThrows(FencedInstanceIdException.class, () -> coordinator.ensureActiveGroup());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":364,"status":"M"},{"authorDate":"2020-01-15 07:04:18","commitOrder":3,"curCode":"    public void testHeartbeatRequestWithFencedInstanceIdException() throws InterruptedException {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupRequest.UNKNOWN_MEMBER_ID, Errors.NONE));\n        mockClient.prepareResponse(syncGroupResponse(Errors.NONE));\n        mockClient.prepareResponse(heartbeatResponse(Errors.FENCED_INSTANCE_ID));\n\n        try {\n            coordinator.ensureActiveGroup();\n            mockTime.sleep(HEARTBEAT_INTERVAL_MS);\n            long startMs = System.currentTimeMillis();\n            while (System.currentTimeMillis() - startMs < 1000) {\n                Thread.sleep(10);\n                coordinator.pollHeartbeat(mockTime.milliseconds());\n            }\n            fail(\"Expected pollHeartbeat to raise fenced instance id exception in 1 second\");\n        } catch (RuntimeException exception) {\n            assertTrue(exception instanceof FencedInstanceIdException);\n        }\n    }\n","date":"2020-01-15 07:04:18","endLine":399,"groupId":"104056","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testHeartbeatRequestWithFencedInstanceIdException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/b6390cc4864829fe9b8303275baffcc637647f.src","preCode":"    public void testHeartbeatRequestWithFencedInstanceIdException() throws InterruptedException {\n        setupCoordinator();\n        mockClient.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n\n        final int generation = -1;\n\n        mockClient.prepareResponse(joinGroupFollowerResponse(generation, memberId, JoinGroupResponse.UNKNOWN_MEMBER_ID, Errors.NONE));\n        mockClient.prepareResponse(syncGroupResponse(Errors.NONE));\n        mockClient.prepareResponse(heartbeatResponse(Errors.FENCED_INSTANCE_ID));\n\n        try {\n            coordinator.ensureActiveGroup();\n            mockTime.sleep(HEARTBEAT_INTERVAL_MS);\n            long startMs = System.currentTimeMillis();\n            while (System.currentTimeMillis() - startMs < 1000) {\n                Thread.sleep(10);\n                coordinator.pollHeartbeat(mockTime.milliseconds());\n            }\n            fail(\"Expected pollHeartbeat to raise fenced instance id exception in 1 second\");\n        } catch (RuntimeException exception) {\n            assertTrue(exception instanceof FencedInstanceIdException);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/AbstractCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":377,"status":"M"}],"commitId":"ed7c071e07f1f90e4c2895582f61ca090ced3c42","commitMessage":"@@@KAFKA-9365: Add server side change  to include consumer group information within transaction commit (#7897)\n\nTo be able to correctly fence zombie producer txn commit.  we propose to add (member.id.  group.instance.id.  generation) into the transaction commit protocol to raise the same level of correctness guarantee as consumer commit.\n\nMajor changes involve:\n\n1. Upgrade transaction commit protocol with (member.id.  group.instance.id.  generation). The client will fail if the broker is not supporting the new protocol.\n2. Refactor group coordinator logic to handle new txn commit errors such as FENCED_INSTANCE_ID.  UNKNOWN_MEMBER_ID and ILLEGAL_GENERATION. We loose the check on transaction commit when the member.id is set to empty. This is because the member.id check is an add-on safety for producer commit.  and we also need to consider backward compatibility for old producer clients without member.id information. And if producer equips with group.instance.id.  then it must provide a valid member.id (not empty definitely).  the same as a consumer commit.\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-01-15 07:04:18","modifiedFileCount":"10","status":"M","submitter":"Boyang Chen"}]
