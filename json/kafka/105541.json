[{"authorTime":"2017-12-07 03:38:38","codes":[{"authorDate":"2017-12-07 03:38:38","commitOrder":1,"curCode":"    public void resetOffsetsFromResetPlan(Consumer<byte[], byte[]> client, Set<TopicPartition> inputTopicPartitions, Map<TopicPartition, Long> topicPartitionsAndOffset) {\n        final Map<TopicPartition, Long> endOffsets = client.endOffsets(inputTopicPartitions);\n        final Map<TopicPartition, Long> beginningOffsets = client.beginningOffsets(inputTopicPartitions);\n\n        final Map<TopicPartition, Long> validatedTopicPartitionsAndOffset =\n            checkOffsetRange(topicPartitionsAndOffset, beginningOffsets, endOffsets);\n\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            final Long offset = validatedTopicPartitionsAndOffset.get(topicPartition);\n            client.seek(topicPartition, offset);\n        }\n    }\n","date":"2017-12-07 03:38:38","endLine":401,"groupId":"9888","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"resetOffsetsFromResetPlan","params":"(Consumer<byte[]@byte[]>client@Set<TopicPartition>inputTopicPartitions@Map<TopicPartition@Long>topicPartitionsAndOffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/51a948399b9cdef4921d431852e4b4c39dffd9.src","preCode":"    public void resetOffsetsFromResetPlan(Consumer<byte[], byte[]> client, Set<TopicPartition> inputTopicPartitions, Map<TopicPartition, Long> topicPartitionsAndOffset) {\n        final Map<TopicPartition, Long> endOffsets = client.endOffsets(inputTopicPartitions);\n        final Map<TopicPartition, Long> beginningOffsets = client.beginningOffsets(inputTopicPartitions);\n\n        final Map<TopicPartition, Long> validatedTopicPartitionsAndOffset =\n            checkOffsetRange(topicPartitionsAndOffset, beginningOffsets, endOffsets);\n\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            final Long offset = validatedTopicPartitionsAndOffset.get(topicPartition);\n            client.seek(topicPartition, offset);\n        }\n    }\n","realPath":"core/src/main/scala/kafka/tools/StreamsResetter.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"B"},{"authorDate":"2017-12-07 03:38:38","commitOrder":1,"curCode":"    public void shiftOffsetsBy(Consumer<byte[], byte[]> client, Set<TopicPartition> inputTopicPartitions, Long shiftBy) {\n        final Map<TopicPartition, Long> endOffsets = client.endOffsets(inputTopicPartitions);\n        final Map<TopicPartition, Long> beginningOffsets = client.beginningOffsets(inputTopicPartitions);\n\n        final Map<TopicPartition, Long> topicPartitionsAndOffset = new HashMap<>(inputTopicPartitions.size());\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            final Long position = client.position(topicPartition);\n            final Long offset = position + shiftBy;\n            topicPartitionsAndOffset.put(topicPartition, offset);\n        }\n\n        final Map<TopicPartition, Long> validatedTopicPartitionsAndOffset =\n            checkOffsetRange(topicPartitionsAndOffset, beginningOffsets, endOffsets);\n\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            client.seek(topicPartition, validatedTopicPartitionsAndOffset.get(topicPartition));\n        }\n    }\n","date":"2017-12-07 03:38:38","endLine":458,"groupId":"20663","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shiftOffsetsBy","params":"(Consumer<byte[]@byte[]>client@Set<TopicPartition>inputTopicPartitions@LongshiftBy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/51a948399b9cdef4921d431852e4b4c39dffd9.src","preCode":"    public void shiftOffsetsBy(Consumer<byte[], byte[]> client, Set<TopicPartition> inputTopicPartitions, Long shiftBy) {\n        final Map<TopicPartition, Long> endOffsets = client.endOffsets(inputTopicPartitions);\n        final Map<TopicPartition, Long> beginningOffsets = client.beginningOffsets(inputTopicPartitions);\n\n        final Map<TopicPartition, Long> topicPartitionsAndOffset = new HashMap<>(inputTopicPartitions.size());\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            final Long position = client.position(topicPartition);\n            final Long offset = position + shiftBy;\n            topicPartitionsAndOffset.put(topicPartition, offset);\n        }\n\n        final Map<TopicPartition, Long> validatedTopicPartitionsAndOffset =\n            checkOffsetRange(topicPartitionsAndOffset, beginningOffsets, endOffsets);\n\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            client.seek(topicPartition, validatedTopicPartitionsAndOffset.get(topicPartition));\n        }\n    }\n","realPath":"core/src/main/scala/kafka/tools/StreamsResetter.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":441,"status":"B"}],"commitId":"30f08d158a97e0d83b59e5910fbb0a84c5c6d14f","commitMessage":"@@@KAFKA-5520: KIP-171; Extend Consumer Group Reset Offset for Stream Application\n\nKIP: https://cwiki.apache.org/confluence/display/KAFKA/KIP-171+-+Extend+Consumer+Group+Reset+Offset+for+Stream+Application\n\nMerge changes from KIP-198\n\nRef: https://github.com/apache/kafka/pull/3831\n\nAuthor: Jorge Quilcate Otoya <quilcate.jorge@gmail.com>\nAuthor: Ismael Juma <ismael@juma.me.uk>\nAuthor: Matthias J. Sax <matthias@confluent.io>\nAuthor: Manikumar Reddy <manikumar.reddy@gmail.com>\nAuthor: Guozhang Wang <wangguoz@gmail.com>\nAuthor: Apurva Mehta <apurva@confluent.io>\nAuthor: Rajini Sivaram <rajinisivaram@googlemail.com>\nAuthor: Jason Gustafson <jason@confluent.io>\nAuthor: Vahid Hashemian <vahidhashemian@us.ibm.com>\nAuthor: Bill Bejeck <bill@confluent.io>\nAuthor: Dong Lin <lindong28@gmail.com>\nAuthor: Soenke Liebau <soenke.liebau@opencore.com>\nAuthor: Colin P. Mccabe <cmccabe@confluent.io>\nAuthor: Damian Guy <damian.guy@gmail.com>\nAuthor: Xavier L?aut? <xl+github@xvrl.net>\nAuthor: Maytee Chinavanichkit <maytee.chinavanichkit@linecorp.com>\nAuthor: Joel Hamill <git config --global user.email>\nAuthor: Paolo Patierno <ppatierno@live.com>\nAuthor: siva santhalingam <siva.santhalingam@gmail.com>\nAuthor: Tommy Becker <tobecker@tivo.com>\nAuthor: Mickael Maison <mickael.maison@gmail.com>\nAuthor: Onur Karaman <okaraman@linkedin.com>\nAuthor: tedyu <yuzhihong@gmail.com>\nAuthor: Xin Li <Xin.Li@trivago.com>\nAuthor: Magnus Edenhill <magnus@edenhill.se>\nAuthor: Manjula K <manjula@kafka-summit.org>\nAuthor: Hugo Louro <hmclouro@gmail.com>\nAuthor: Jeff Widman <jeff@jeffwidman.com>\nAuthor: bartdevylder <bartdevylder@gmail.com>\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\nAuthor: Jacek Laskowski <jacek@japila.pl>\nAuthor: Tom Bentley <tbentley@redhat.com>\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #4159 from jeqo/feature/kip-171\n","date":"2017-12-07 03:38:38","modifiedFileCount":"4","status":"B","submitter":"Jorge Quilcate Otoya"},{"authorTime":"2018-02-26 04:26:18","codes":[{"authorDate":"2018-02-26 04:26:18","commitOrder":2,"curCode":"    public void resetOffsetsFromResetPlan(Consumer<byte[], byte[]> client, Set<TopicPartition> inputTopicPartitions, Map<TopicPartition, Long> topicPartitionsAndOffset) {\n        final Map<TopicPartition, Long> endOffsets = client.endOffsets(inputTopicPartitions);\n        final Map<TopicPartition, Long> beginningOffsets = client.beginningOffsets(inputTopicPartitions);\n\n        final Map<TopicPartition, Long> validatedTopicPartitionsAndOffset =\n            checkOffsetRange(topicPartitionsAndOffset, beginningOffsets, endOffsets);\n\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            client.seek(topicPartition, validatedTopicPartitionsAndOffset.get(topicPartition));\n        }\n    }\n","date":"2018-02-26 04:26:18","endLine":420,"groupId":"9888","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"resetOffsetsFromResetPlan","params":"(Consumer<byte[]@byte[]>client@Set<TopicPartition>inputTopicPartitions@Map<TopicPartition@Long>topicPartitionsAndOffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/8fce7a25b37e2cea9cbfaa93308f2624b07c14.src","preCode":"    public void resetOffsetsFromResetPlan(Consumer<byte[], byte[]> client, Set<TopicPartition> inputTopicPartitions, Map<TopicPartition, Long> topicPartitionsAndOffset) {\n        final Map<TopicPartition, Long> endOffsets = client.endOffsets(inputTopicPartitions);\n        final Map<TopicPartition, Long> beginningOffsets = client.beginningOffsets(inputTopicPartitions);\n\n        final Map<TopicPartition, Long> validatedTopicPartitionsAndOffset =\n            checkOffsetRange(topicPartitionsAndOffset, beginningOffsets, endOffsets);\n\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            final Long offset = validatedTopicPartitionsAndOffset.get(topicPartition);\n            client.seek(topicPartition, offset);\n        }\n    }\n","realPath":"core/src/main/scala/kafka/tools/StreamsResetter.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":410,"status":"M"},{"authorDate":"2018-02-26 04:26:18","commitOrder":2,"curCode":"    public void shiftOffsetsBy(Consumer<byte[], byte[]> client, Set<TopicPartition> inputTopicPartitions, long shiftBy) {\n        final Map<TopicPartition, Long> endOffsets = client.endOffsets(inputTopicPartitions);\n        final Map<TopicPartition, Long> beginningOffsets = client.beginningOffsets(inputTopicPartitions);\n\n        final Map<TopicPartition, Long> topicPartitionsAndOffset = new HashMap<>(inputTopicPartitions.size());\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            final long position = client.position(topicPartition);\n            final long offset = position + shiftBy;\n            topicPartitionsAndOffset.put(topicPartition, offset);\n        }\n\n        final Map<TopicPartition, Long> validatedTopicPartitionsAndOffset =\n            checkOffsetRange(topicPartitionsAndOffset, beginningOffsets, endOffsets);\n\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            client.seek(topicPartition, validatedTopicPartitionsAndOffset.get(topicPartition));\n        }\n    }\n","date":"2018-02-26 04:26:18","endLine":475,"groupId":"12524","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shiftOffsetsBy","params":"(Consumer<byte[]@byte[]>client@Set<TopicPartition>inputTopicPartitions@longshiftBy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/8fce7a25b37e2cea9cbfaa93308f2624b07c14.src","preCode":"    public void shiftOffsetsBy(Consumer<byte[], byte[]> client, Set<TopicPartition> inputTopicPartitions, Long shiftBy) {\n        final Map<TopicPartition, Long> endOffsets = client.endOffsets(inputTopicPartitions);\n        final Map<TopicPartition, Long> beginningOffsets = client.beginningOffsets(inputTopicPartitions);\n\n        final Map<TopicPartition, Long> topicPartitionsAndOffset = new HashMap<>(inputTopicPartitions.size());\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            final Long position = client.position(topicPartition);\n            final Long offset = position + shiftBy;\n            topicPartitionsAndOffset.put(topicPartition, offset);\n        }\n\n        final Map<TopicPartition, Long> validatedTopicPartitionsAndOffset =\n            checkOffsetRange(topicPartitionsAndOffset, beginningOffsets, endOffsets);\n\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            client.seek(topicPartition, validatedTopicPartitionsAndOffset.get(topicPartition));\n        }\n    }\n","realPath":"core/src/main/scala/kafka/tools/StreamsResetter.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":458,"status":"M"}],"commitId":"5df535e8a349771942050f1e3fd58851f413fa3a","commitMessage":"@@@MINOR: fixes lgtm.com warnings (#4582)\n\nfixes lgmt.com warnings\ncleanup PrintForeachAction and Printed\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Sebastian Bauersfeld <sebastianbauersfeld@gmx.de>.  Damian Guy <damian@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-02-26 04:26:18","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2018-11-16 05:23:39","codes":[{"authorDate":"2018-11-16 05:23:39","commitOrder":3,"curCode":"    public void resetOffsetsFromResetPlan(final Consumer<byte[], byte[]> client,\n                                          final Set<TopicPartition> inputTopicPartitions,\n                                          final Map<TopicPartition, Long> topicPartitionsAndOffset) {\n        final Map<TopicPartition, Long> endOffsets = client.endOffsets(inputTopicPartitions);\n        final Map<TopicPartition, Long> beginningOffsets = client.beginningOffsets(inputTopicPartitions);\n\n        final Map<TopicPartition, Long> validatedTopicPartitionsAndOffset =\n            checkOffsetRange(topicPartitionsAndOffset, beginningOffsets, endOffsets);\n\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            client.seek(topicPartition, validatedTopicPartitionsAndOffset.get(topicPartition));\n        }\n    }\n","date":"2018-11-16 05:23:39","endLine":421,"groupId":"105541","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"resetOffsetsFromResetPlan","params":"(finalConsumer<byte[]@byte[]>client@finalSet<TopicPartition>inputTopicPartitions@finalMap<TopicPartition@Long>topicPartitionsAndOffset)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/7901c693101153fca2ea5d768ab1aad1b3d53a.src","preCode":"    public void resetOffsetsFromResetPlan(Consumer<byte[], byte[]> client, Set<TopicPartition> inputTopicPartitions, Map<TopicPartition, Long> topicPartitionsAndOffset) {\n        final Map<TopicPartition, Long> endOffsets = client.endOffsets(inputTopicPartitions);\n        final Map<TopicPartition, Long> beginningOffsets = client.beginningOffsets(inputTopicPartitions);\n\n        final Map<TopicPartition, Long> validatedTopicPartitionsAndOffset =\n            checkOffsetRange(topicPartitionsAndOffset, beginningOffsets, endOffsets);\n\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            client.seek(topicPartition, validatedTopicPartitionsAndOffset.get(topicPartition));\n        }\n    }\n","realPath":"core/src/main/scala/kafka/tools/StreamsResetter.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":409,"status":"M"},{"authorDate":"2018-11-16 05:23:39","commitOrder":3,"curCode":"    public void shiftOffsetsBy(final Consumer<byte[], byte[]> client,\n                               final Set<TopicPartition> inputTopicPartitions,\n                               final long shiftBy) {\n        final Map<TopicPartition, Long> endOffsets = client.endOffsets(inputTopicPartitions);\n        final Map<TopicPartition, Long> beginningOffsets = client.beginningOffsets(inputTopicPartitions);\n\n        final Map<TopicPartition, Long> topicPartitionsAndOffset = new HashMap<>(inputTopicPartitions.size());\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            final long position = client.position(topicPartition);\n            final long offset = position + shiftBy;\n            topicPartitionsAndOffset.put(topicPartition, offset);\n        }\n\n        final Map<TopicPartition, Long> validatedTopicPartitionsAndOffset =\n            checkOffsetRange(topicPartitionsAndOffset, beginningOffsets, endOffsets);\n\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            client.seek(topicPartition, validatedTopicPartitionsAndOffset.get(topicPartition));\n        }\n    }\n","date":"2018-11-16 05:23:39","endLine":482,"groupId":"105541","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shiftOffsetsBy","params":"(finalConsumer<byte[]@byte[]>client@finalSet<TopicPartition>inputTopicPartitions@finallongshiftBy)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/7901c693101153fca2ea5d768ab1aad1b3d53a.src","preCode":"    public void shiftOffsetsBy(Consumer<byte[], byte[]> client, Set<TopicPartition> inputTopicPartitions, long shiftBy) {\n        final Map<TopicPartition, Long> endOffsets = client.endOffsets(inputTopicPartitions);\n        final Map<TopicPartition, Long> beginningOffsets = client.beginningOffsets(inputTopicPartitions);\n\n        final Map<TopicPartition, Long> topicPartitionsAndOffset = new HashMap<>(inputTopicPartitions.size());\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            final long position = client.position(topicPartition);\n            final long offset = position + shiftBy;\n            topicPartitionsAndOffset.put(topicPartition, offset);\n        }\n\n        final Map<TopicPartition, Long> validatedTopicPartitionsAndOffset =\n            checkOffsetRange(topicPartitionsAndOffset, beginningOffsets, endOffsets);\n\n        for (final TopicPartition topicPartition : inputTopicPartitions) {\n            client.seek(topicPartition, validatedTopicPartitionsAndOffset.get(topicPartition));\n        }\n    }\n","realPath":"core/src/main/scala/kafka/tools/StreamsResetter.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":463,"status":"M"}],"commitId":"93466602d80c0c8dba7544964f48feb49589b0b5","commitMessage":"@@@MINOR: Code cleanup in StreamsResetter (#5891)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-11-16 05:23:39","modifiedFileCount":"1","status":"M","submitter":"Matthias J. Sax"}]
