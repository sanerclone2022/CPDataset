[{"authorTime":"2019-10-24 03:39:12","codes":[{"authorDate":"2019-10-24 03:39:12","commitOrder":2,"curCode":"    public void shouldRoundTripFieldThroughBuffer() {\n        final UUID uuid = UUID.randomUUID();\n        final ByteBuffer buf = ByteBuffer.wrap(new byte[] {1, 2, 3});\n        final SimpleExampleMessageData out = new SimpleExampleMessageData();\n        out.setProcessId(uuid);\n        out.setZeroCopyByteBuffer(buf);\n\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        final ByteBuffer buffer = ByteBuffer.allocate(out.size(cache, (short) 1));\n        out.write(new ByteBufferAccessor(buffer), cache, (short) 1);\n        buffer.rewind();\n\n        final SimpleExampleMessageData in = new SimpleExampleMessageData();\n        in.read(new ByteBufferAccessor(buffer), (short) 1);\n\n        buf.rewind();\n\n        assertEquals(uuid, in.processId());\n        assertEquals(buf, in.zeroCopyByteBuffer());\n        assertEquals(ByteUtils.EMPTY_BUF, in.nullableZeroCopyByteBuffer());\n    }\n","date":"2019-10-24 03:39:12","endLine":123,"groupId":"4648","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRoundTripFieldThroughBuffer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/9e23d834eb75edd05cb1459ecf79ae41208301.src","preCode":"    public void shouldRoundTripFieldThroughBuffer() {\n        final UUID uuid = UUID.randomUUID();\n        final ByteBuffer buf = ByteBuffer.wrap(new byte[] {1, 2, 3});\n        final SimpleExampleMessageData out = new SimpleExampleMessageData();\n        out.setProcessId(uuid);\n        out.setZeroCopyByteBuffer(buf);\n\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        final ByteBuffer buffer = ByteBuffer.allocate(out.size(cache, (short) 1));\n        out.write(new ByteBufferAccessor(buffer), cache, (short) 1);\n        buffer.rewind();\n\n        final SimpleExampleMessageData in = new SimpleExampleMessageData();\n        in.read(new ByteBufferAccessor(buffer), (short) 1);\n\n        buf.rewind();\n\n        assertEquals(uuid, in.processId());\n        assertEquals(buf, in.zeroCopyByteBuffer());\n        assertEquals(ByteUtils.EMPTY_BUF, in.nullableZeroCopyByteBuffer());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/message/SimpleExampleMessageTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"MB"},{"authorDate":"2019-10-24 03:39:12","commitOrder":2,"curCode":"    public void shouldRoundTripFieldThroughBufferWithNullable() {\n        final UUID uuid = UUID.randomUUID();\n        final ByteBuffer buf1 = ByteBuffer.wrap(new byte[] {1, 2, 3});\n        final ByteBuffer buf2 = ByteBuffer.wrap(new byte[] {4, 5, 6});\n        final SimpleExampleMessageData out = new SimpleExampleMessageData();\n        out.setProcessId(uuid);\n        out.setZeroCopyByteBuffer(buf1);\n        out.setNullableZeroCopyByteBuffer(buf2);\n\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        final ByteBuffer buffer = ByteBuffer.allocate(out.size(cache, (short) 1));\n        out.write(new ByteBufferAccessor(buffer), cache, (short) 1);\n        buffer.rewind();\n\n        final SimpleExampleMessageData in = new SimpleExampleMessageData();\n        in.read(new ByteBufferAccessor(buffer), (short) 1);\n\n        buf1.rewind();\n        buf2.rewind();\n\n        assertEquals(uuid, in.processId());\n        assertEquals(buf1, in.zeroCopyByteBuffer());\n        assertEquals(buf2, in.nullableZeroCopyByteBuffer());\n    }\n","date":"2019-10-24 03:39:12","endLine":149,"groupId":"4649","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldRoundTripFieldThroughBufferWithNullable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/9e23d834eb75edd05cb1459ecf79ae41208301.src","preCode":"    public void shouldRoundTripFieldThroughBufferWithNullable() {\n        final UUID uuid = UUID.randomUUID();\n        final ByteBuffer buf1 = ByteBuffer.wrap(new byte[] {1, 2, 3});\n        final ByteBuffer buf2 = ByteBuffer.wrap(new byte[] {4, 5, 6});\n        final SimpleExampleMessageData out = new SimpleExampleMessageData();\n        out.setProcessId(uuid);\n        out.setZeroCopyByteBuffer(buf1);\n        out.setNullableZeroCopyByteBuffer(buf2);\n\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        final ByteBuffer buffer = ByteBuffer.allocate(out.size(cache, (short) 1));\n        out.write(new ByteBufferAccessor(buffer), cache, (short) 1);\n        buffer.rewind();\n\n        final SimpleExampleMessageData in = new SimpleExampleMessageData();\n        in.read(new ByteBufferAccessor(buffer), (short) 1);\n\n        buf1.rewind();\n        buf2.rewind();\n\n        assertEquals(uuid, in.processId());\n        assertEquals(buf1, in.zeroCopyByteBuffer());\n        assertEquals(buf2, in.nullableZeroCopyByteBuffer());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/message/SimpleExampleMessageTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"}],"commitId":"adb2bdb122df0e352a414df4a26158909c25155b","commitMessage":"@@@KAFKA-8584: The RPC code generator should support ByteBuffer. (#7342)\n\nThe RPC code generator should support using the ByteBuffer class in addition to byte arrays. By using the ByteBuffer class.  we can avoid performing a copy in many situations. Also modify TestByteBufferDataTest to test the new feature.\n\nReviewers: Colin P. McCabe <cmccabe@apache.org>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-10-24 03:39:12","modifiedFileCount":"9","status":"M","submitter":"Nikolay"},{"authorTime":"2020-11-18 16:58:20","codes":[{"authorDate":"2020-11-18 16:58:20","commitOrder":3,"curCode":"    public void shouldRoundTripFieldThroughBuffer() {\n        final Uuid uuid = Uuid.randomUuid();\n        final ByteBuffer buf = ByteBuffer.wrap(new byte[] {1, 2, 3});\n        final SimpleExampleMessageData out = new SimpleExampleMessageData();\n        out.setProcessId(uuid);\n        out.setZeroCopyByteBuffer(buf);\n\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        final ByteBuffer buffer = ByteBuffer.allocate(out.size(cache, (short) 1));\n        out.write(new ByteBufferAccessor(buffer), cache, (short) 1);\n        buffer.rewind();\n\n        final SimpleExampleMessageData in = new SimpleExampleMessageData();\n        in.read(new ByteBufferAccessor(buffer), (short) 1);\n\n        buf.rewind();\n\n        assertEquals(uuid, in.processId());\n        assertEquals(buf, in.zeroCopyByteBuffer());\n        assertEquals(ByteUtils.EMPTY_BUF, in.nullableZeroCopyByteBuffer());\n    }\n","date":"2020-11-18 16:58:20","endLine":140,"groupId":"4648","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldRoundTripFieldThroughBuffer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/e45e5a64e09450b588f58a01737732633247f4.src","preCode":"    public void shouldRoundTripFieldThroughBuffer() {\n        final UUID uuid = UUID.randomUUID();\n        final ByteBuffer buf = ByteBuffer.wrap(new byte[] {1, 2, 3});\n        final SimpleExampleMessageData out = new SimpleExampleMessageData();\n        out.setProcessId(uuid);\n        out.setZeroCopyByteBuffer(buf);\n\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        final ByteBuffer buffer = ByteBuffer.allocate(out.size(cache, (short) 1));\n        out.write(new ByteBufferAccessor(buffer), cache, (short) 1);\n        buffer.rewind();\n\n        final SimpleExampleMessageData in = new SimpleExampleMessageData();\n        in.read(new ByteBufferAccessor(buffer), (short) 1);\n\n        buf.rewind();\n\n        assertEquals(uuid, in.processId());\n        assertEquals(buf, in.zeroCopyByteBuffer());\n        assertEquals(ByteUtils.EMPTY_BUF, in.nullableZeroCopyByteBuffer());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/message/SimpleExampleMessageTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2020-11-18 16:58:20","commitOrder":3,"curCode":"    public void shouldRoundTripFieldThroughBufferWithNullable() {\n        final Uuid uuid = Uuid.randomUuid();\n        final ByteBuffer buf1 = ByteBuffer.wrap(new byte[] {1, 2, 3});\n        final ByteBuffer buf2 = ByteBuffer.wrap(new byte[] {4, 5, 6});\n        final SimpleExampleMessageData out = new SimpleExampleMessageData();\n        out.setProcessId(uuid);\n        out.setZeroCopyByteBuffer(buf1);\n        out.setNullableZeroCopyByteBuffer(buf2);\n\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        final ByteBuffer buffer = ByteBuffer.allocate(out.size(cache, (short) 1));\n        out.write(new ByteBufferAccessor(buffer), cache, (short) 1);\n        buffer.rewind();\n\n        final SimpleExampleMessageData in = new SimpleExampleMessageData();\n        in.read(new ByteBufferAccessor(buffer), (short) 1);\n\n        buf1.rewind();\n        buf2.rewind();\n\n        assertEquals(uuid, in.processId());\n        assertEquals(buf1, in.zeroCopyByteBuffer());\n        assertEquals(buf2, in.nullableZeroCopyByteBuffer());\n    }\n","date":"2020-11-18 16:58:20","endLine":166,"groupId":"4649","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldRoundTripFieldThroughBufferWithNullable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/e45e5a64e09450b588f58a01737732633247f4.src","preCode":"    public void shouldRoundTripFieldThroughBufferWithNullable() {\n        final UUID uuid = UUID.randomUUID();\n        final ByteBuffer buf1 = ByteBuffer.wrap(new byte[] {1, 2, 3});\n        final ByteBuffer buf2 = ByteBuffer.wrap(new byte[] {4, 5, 6});\n        final SimpleExampleMessageData out = new SimpleExampleMessageData();\n        out.setProcessId(uuid);\n        out.setZeroCopyByteBuffer(buf1);\n        out.setNullableZeroCopyByteBuffer(buf2);\n\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        final ByteBuffer buffer = ByteBuffer.allocate(out.size(cache, (short) 1));\n        out.write(new ByteBufferAccessor(buffer), cache, (short) 1);\n        buffer.rewind();\n\n        final SimpleExampleMessageData in = new SimpleExampleMessageData();\n        in.read(new ByteBufferAccessor(buffer), (short) 1);\n\n        buf1.rewind();\n        buf2.rewind();\n\n        assertEquals(uuid, in.processId());\n        assertEquals(buf1, in.zeroCopyByteBuffer());\n        assertEquals(buf2, in.nullableZeroCopyByteBuffer());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/message/SimpleExampleMessageTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"28c57b273a3620c18be0bba6d5f74f981d9ef47d","commitMessage":"@@@KAFKA-10618: Rename UUID to Uuid and make it more efficient (#9566)\n\nAs decided in KIP-516.  the UUID class should be named Uuid. Change all instances of\norg.apache.kafka.common.UUID to org.apache.kafka.common.Uuid.\n\nAlso modify Uuid so that it stores two `long` fields instead of wrapping java.util.UUID\nto reduce memory usage.\n\nReviewers: Ismael Juma <ismael@juma.me.uk>","date":"2020-11-18 16:58:20","modifiedFileCount":"12","status":"M","submitter":"Justine Olshan"},{"authorTime":"2021-02-16 23:55:20","codes":[{"authorDate":"2021-02-16 23:55:20","commitOrder":4,"curCode":"    public void shouldRoundTripFieldThroughBuffer() {\n        final Uuid uuid = Uuid.randomUuid();\n        final ByteBuffer buf = ByteBuffer.wrap(new byte[] {1, 2, 3});\n        final SimpleExampleMessageData out = new SimpleExampleMessageData();\n        out.setProcessId(uuid);\n        out.setZeroCopyByteBuffer(buf);\n\n        final ByteBuffer buffer = MessageUtil.toByteBuffer(out, (short) 1);\n\n        final SimpleExampleMessageData in = new SimpleExampleMessageData();\n        in.read(new ByteBufferAccessor(buffer), (short) 1);\n\n        buf.rewind();\n\n        assertEquals(uuid, in.processId());\n        assertEquals(buf, in.zeroCopyByteBuffer());\n        assertEquals(ByteUtils.EMPTY_BUF, in.nullableZeroCopyByteBuffer());\n    }\n","date":"2021-02-16 23:55:20","endLine":93,"groupId":"103555","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldRoundTripFieldThroughBuffer","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1c/dafcd0fdc0e583030cf9fef4076fa4d1ade96b.src","preCode":"    public void shouldRoundTripFieldThroughBuffer() {\n        final Uuid uuid = Uuid.randomUuid();\n        final ByteBuffer buf = ByteBuffer.wrap(new byte[] {1, 2, 3});\n        final SimpleExampleMessageData out = new SimpleExampleMessageData();\n        out.setProcessId(uuid);\n        out.setZeroCopyByteBuffer(buf);\n\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        final ByteBuffer buffer = ByteBuffer.allocate(out.size(cache, (short) 1));\n        out.write(new ByteBufferAccessor(buffer), cache, (short) 1);\n        buffer.rewind();\n\n        final SimpleExampleMessageData in = new SimpleExampleMessageData();\n        in.read(new ByteBufferAccessor(buffer), (short) 1);\n\n        buf.rewind();\n\n        assertEquals(uuid, in.processId());\n        assertEquals(buf, in.zeroCopyByteBuffer());\n        assertEquals(ByteUtils.EMPTY_BUF, in.nullableZeroCopyByteBuffer());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/message/SimpleExampleMessageTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2021-02-16 23:55:20","commitOrder":4,"curCode":"    public void shouldRoundTripFieldThroughBufferWithNullable() {\n        final Uuid uuid = Uuid.randomUuid();\n        final ByteBuffer buf1 = ByteBuffer.wrap(new byte[] {1, 2, 3});\n        final ByteBuffer buf2 = ByteBuffer.wrap(new byte[] {4, 5, 6});\n        final SimpleExampleMessageData out = new SimpleExampleMessageData();\n        out.setProcessId(uuid);\n        out.setZeroCopyByteBuffer(buf1);\n        out.setNullableZeroCopyByteBuffer(buf2);\n\n        final ByteBuffer buffer = MessageUtil.toByteBuffer(out, (short) 1);\n\n        final SimpleExampleMessageData in = new SimpleExampleMessageData();\n        in.read(new ByteBufferAccessor(buffer), (short) 1);\n\n        buf1.rewind();\n        buf2.rewind();\n\n        assertEquals(uuid, in.processId());\n        assertEquals(buf1, in.zeroCopyByteBuffer());\n        assertEquals(buf2, in.nullableZeroCopyByteBuffer());\n    }\n","date":"2021-02-16 23:55:20","endLine":116,"groupId":"103555","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldRoundTripFieldThroughBufferWithNullable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1c/dafcd0fdc0e583030cf9fef4076fa4d1ade96b.src","preCode":"    public void shouldRoundTripFieldThroughBufferWithNullable() {\n        final Uuid uuid = Uuid.randomUuid();\n        final ByteBuffer buf1 = ByteBuffer.wrap(new byte[] {1, 2, 3});\n        final ByteBuffer buf2 = ByteBuffer.wrap(new byte[] {4, 5, 6});\n        final SimpleExampleMessageData out = new SimpleExampleMessageData();\n        out.setProcessId(uuid);\n        out.setZeroCopyByteBuffer(buf1);\n        out.setNullableZeroCopyByteBuffer(buf2);\n\n        ObjectSerializationCache cache = new ObjectSerializationCache();\n        final ByteBuffer buffer = ByteBuffer.allocate(out.size(cache, (short) 1));\n        out.write(new ByteBufferAccessor(buffer), cache, (short) 1);\n        buffer.rewind();\n\n        final SimpleExampleMessageData in = new SimpleExampleMessageData();\n        in.read(new ByteBufferAccessor(buffer), (short) 1);\n\n        buf1.rewind();\n        buf2.rewind();\n\n        assertEquals(uuid, in.processId());\n        assertEquals(buf1, in.zeroCopyByteBuffer());\n        assertEquals(buf2, in.nullableZeroCopyByteBuffer());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/message/SimpleExampleMessageTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"M"}],"commitId":"fe3f2bec8e46b22650a4ee2552379d2abbaa6f40","commitMessage":"@@@MINOR: remove duplicate code of serializing auto-generated data (#10128)\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-02-16 23:55:20","modifiedFileCount":"2","status":"M","submitter":"dengziming"}]
