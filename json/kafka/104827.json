[{"authorTime":"2016-04-19 01:50:58","codes":[{"authorDate":"2016-04-19 01:50:58","commitOrder":1,"curCode":"    public void testRestartConnectorRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(worker.ownsConnector(CONN1)).andReturn(false);\n        EasyMock.expect(member.ownerUrl(CONN1)).andReturn(ownerUrl);\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartConnector(CONN1, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-04-19 01:50:58","endLine":470,"groupId":"8114","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestartConnectorRedirectToOwner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/67fa89296a73a6098b93043572e2f6cc2eee0f.src","preCode":"    public void testRestartConnectorRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(worker.ownsConnector(CONN1)).andReturn(false);\n        EasyMock.expect(member.ownerUrl(CONN1)).andReturn(ownerUrl);\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartConnector(CONN1, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":433,"status":"B"},{"authorDate":"2016-04-19 01:50:58","commitOrder":1,"curCode":"    public void testRestartTaskRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(worker.ownsTask(TASK0)).andReturn(false);\n        EasyMock.expect(member.ownerUrl(TASK0)).andReturn(ownerUrl);\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartTask(TASK0, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-04-19 01:50:58","endLine":616,"groupId":"16221","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartTaskRedirectToOwner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/67fa89296a73a6098b93043572e2f6cc2eee0f.src","preCode":"    public void testRestartTaskRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(worker.ownsTask(TASK0)).andReturn(false);\n        EasyMock.expect(member.ownerUrl(TASK0)).andReturn(ownerUrl);\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartTask(TASK0, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":580,"status":"B"}],"commitId":"89c67727c2793bf56b0b005a7d758beebedb5aed","commitMessage":"@@@KAFKA-3506: Kafka Connect restart APIs\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1189 from hachikuji/KAFKA-3506\n","date":"2016-04-19 01:50:58","modifiedFileCount":"12","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2016-08-27 05:00:16","codes":[{"authorDate":"2016-08-27 05:00:16","commitOrder":2,"curCode":"    public void testRestartConnectorRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(member.ownerUrl(CONN1)).andReturn(ownerUrl);\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartConnector(CONN1, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-08-27 05:00:42","endLine":514,"groupId":"16220","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestartConnectorRedirectToOwner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e4/ebc8982a0af0d78aa5e500c743a59754232d93.src","preCode":"    public void testRestartConnectorRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(worker.ownsConnector(CONN1)).andReturn(false);\n        EasyMock.expect(member.ownerUrl(CONN1)).andReturn(ownerUrl);\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartConnector(CONN1, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":478,"status":"M"},{"authorDate":"2016-08-27 05:00:16","commitOrder":2,"curCode":"    public void testRestartTaskRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(member.ownerUrl(TASK0)).andReturn(ownerUrl);\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartTask(TASK0, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-08-27 05:00:42","endLine":658,"groupId":"16221","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartTaskRedirectToOwner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e4/ebc8982a0af0d78aa5e500c743a59754232d93.src","preCode":"    public void testRestartTaskRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(worker.ownsTask(TASK0)).andReturn(false);\n        EasyMock.expect(member.ownerUrl(TASK0)).andReturn(ownerUrl);\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartTask(TASK0, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"M"}],"commitId":"71f7e7c3a29e8f7339430837065126256907bd2a","commitMessage":"@@@KAFKA-4042: Contain connector & task start/stop failures within the Worker\n\nInvoke the statusListener.onFailure() callback on start failures so that the statusBackingStore is updated. This involved a fix to the putSafe() functionality which prevented any update that was not preceded by a (non-safe) put() from completing.  so here when a connector or task is transitioning directly to FAILED.\n\nWorker start methods can still throw if the same connector name or task ID is already registered with the worker.  as this condition should not happen.\n\nAuthor: Shikhar Bhushan <shikhar@confluent.io>\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1778 from shikhar/distherder-stayup-take4\n","date":"2016-08-27 05:00:42","modifiedFileCount":"11","status":"M","submitter":"Shikhar Bhushan"},{"authorTime":"2016-08-27 05:00:16","codes":[{"authorDate":"2017-10-06 02:23:11","commitOrder":3,"curCode":"    public void testRestartConnectorRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(member.ownerUrl(CONN1)).andReturn(ownerUrl);\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartConnector(CONN1, callback);\n        herder.tick();\n\n        time.sleep(2000L);\n        assertStatistics(3, 1, 100, 3000L);\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":739,"groupId":"4402","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestartConnectorRedirectToOwner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/83261f202bee7477543a59fa8b5b788f10214a.src","preCode":"    public void testRestartConnectorRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(member.ownerUrl(CONN1)).andReturn(ownerUrl);\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartConnector(CONN1, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":697,"status":"M"},{"authorDate":"2016-08-27 05:00:16","commitOrder":3,"curCode":"    public void testRestartTaskRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(member.ownerUrl(TASK0)).andReturn(ownerUrl);\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartTask(TASK0, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2016-08-27 05:00:42","endLine":658,"groupId":"16221","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartTaskRedirectToOwner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e4/ebc8982a0af0d78aa5e500c743a59754232d93.src","preCode":"    public void testRestartTaskRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(member.ownerUrl(TASK0)).andReturn(ownerUrl);\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartTask(TASK0, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"N"}],"commitId":"a47bfbcae050659d32f777ed2f4b26dda5fbdbbd","commitMessage":"@@@KAFKA-5903: Added Connect metrics to the worker and distributed herder (KIP-196)\n\nAdded metrics to the Connect worker and rebalancing metrics to the distributed herder.\n\nThis is built on top of #3987.  and I can rebase this PR once that is merged.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4011 from rhauch/kafka-5903\n","date":"2017-10-06 02:23:11","modifiedFileCount":"13","status":"M","submitter":"Randall Hauch"},{"authorTime":"2019-05-17 11:46:04","codes":[{"authorDate":"2019-05-17 11:46:04","commitOrder":4,"curCode":"    public void testRestartConnectorRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(member.ownerUrl(CONN1)).andReturn(ownerUrl);\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartConnector(CONN1, callback);\n        herder.tick();\n\n        time.sleep(2000L);\n        assertStatistics(3, 1, 100, 3000L);\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-05-17 11:46:03","endLine":931,"groupId":"4402","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestartConnectorRedirectToOwner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/81263718256fc3a9d8e38b33de7dc17b10e8d8.src","preCode":"    public void testRestartConnectorRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(member.ownerUrl(CONN1)).andReturn(ownerUrl);\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartConnector(CONN1, callback);\n        herder.tick();\n\n        time.sleep(2000L);\n        assertStatistics(3, 1, 100, 3000L);\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":888,"status":"M"},{"authorDate":"2019-05-17 11:46:04","commitOrder":4,"curCode":"    public void testRestartTaskRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(member.ownerUrl(TASK0)).andReturn(ownerUrl);\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartTask(TASK0, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-05-17 11:46:03","endLine":1092,"groupId":"16221","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartTaskRedirectToOwner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/81263718256fc3a9d8e38b33de7dc17b10e8d8.src","preCode":"    public void testRestartTaskRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(member.ownerUrl(TASK0)).andReturn(ownerUrl);\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartTask(TASK0, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1056,"status":"M"}],"commitId":"ce584a01fff4e73afa96d38c9a7508fcd67e3e46","commitMessage":"@@@KAFKA-5505: Incremental cooperative rebalancing in Connect (KIP-415) (#6363)\n\nAdded the incremental cooperative rebalancing in Connect to avoid global rebalances on all connectors and tasks with each new/changed/removed connector. This new protocol is backward compatible and will work with heterogeneous clusters that exist during a rolling upgrade.  but once the clusters consist of new workers only some affected connectors and tasks will be rebalanced: connectors and tasks on existing nodes still in the cluster and not added/changed/removed will continue running while the affected connectors and tasks are rebalanced.\n\nThis commit attempted to minimize the changes to the existing V0 protocol logic.  though that was not entirely possible.\n\nThis commit adds extensive unit and integration tests for both the old V0 protocol and the new v1 protocol. Soak testing has been performed multiple times to verify behavior while connectors and added.  changed.  and removed and while workers are added and removed from the cluster.\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <me@ewencp.org>.  Robert Yokota <rayokota@gmail.com>.  David Arthur <mumrah@gmail.com>.  Ryanne Dolan <ryannedolan@gmail.com>","date":"2019-05-17 11:46:03","modifiedFileCount":"9","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2021-02-05 09:08:56","codes":[{"authorDate":"2021-02-05 09:08:56","commitOrder":5,"curCode":"    public void testRestartConnectorRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.emptyList(), Collections.emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(member.ownerUrl(CONN1)).andReturn(ownerUrl);\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartConnector(CONN1, callback);\n        herder.tick();\n\n        time.sleep(2000L);\n        assertStatistics(3, 1, 100, 3000L);\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 09:08:56","endLine":1078,"groupId":"104827","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRestartConnectorRedirectToOwner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5b/ddcf76e3c103ea29beb2cb2dfd21f321ba25e9.src","preCode":"    public void testRestartConnectorRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(member.ownerUrl(CONN1)).andReturn(ownerUrl);\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        time.sleep(1000L);\n        assertStatistics(3, 1, 100, 1000L);\n\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartConnector(CONN1, callback);\n        herder.tick();\n\n        time.sleep(2000L);\n        assertStatistics(3, 1, 100, 3000L);\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1035,"status":"M"},{"authorDate":"2021-02-05 09:08:56","commitOrder":5,"curCode":"    public void testRestartTaskRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.emptyList(), Collections.emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(member.ownerUrl(TASK0)).andReturn(ownerUrl);\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartTask(TASK0, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-05 09:08:56","endLine":1239,"groupId":"104827","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testRestartTaskRedirectToOwner","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5b/ddcf76e3c103ea29beb2cb2dfd21f321ba25e9.src","preCode":"    public void testRestartTaskRedirectToOwner() throws Exception {\n        \r\n        EasyMock.expect(member.memberId()).andStubReturn(\"leader\");\n        EasyMock.expect(member.currentProtocolVersion()).andStubReturn(CONNECT_PROTOCOL_V0);\n        expectRebalance(1, Collections.<String>emptyList(), Collections.<ConnectorTaskId>emptyList());\n        expectPostRebalanceCatchup(SNAPSHOT);\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        \r\n        String ownerUrl = \"ownerUrl\";\n        EasyMock.expect(member.ownerUrl(TASK0)).andReturn(ownerUrl);\n        member.wakeup();\n        PowerMock.expectLastCall();\n        member.ensureActive();\n        PowerMock.expectLastCall();\n        member.poll(EasyMock.anyInt());\n        PowerMock.expectLastCall();\n\n        PowerMock.replayAll();\n\n        herder.tick();\n        FutureCallback<Void> callback = new FutureCallback<>();\n        herder.restartTask(TASK0, callback);\n        herder.tick();\n\n        try {\n            callback.get(1000L, TimeUnit.MILLISECONDS);\n            fail(\"Expected NotLeaderException to be raised\");\n        } catch (ExecutionException e) {\n            assertTrue(e.getCause() instanceof NotAssignedException);\n            NotAssignedException notAssignedException = (NotAssignedException) e.getCause();\n            assertEquals(ownerUrl, notAssignedException.forwardUrl());\n        }\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/distributed/DistributedHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1203,"status":"M"}],"commitId":"07843cfbf4e3e7a2d26d63904bbf0da0fcd07ca2","commitMessage":"@@@KAFKA-10834: Remove redundant type casts in Connect (#10053)\n\nCleanup up to remove redundant type casts in Connect and use the diamond operator when needed \n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 09:08:56","modifiedFileCount":"41","status":"M","submitter":"Lev Zemlyanov"}]
