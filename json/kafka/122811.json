[{"authorTime":"2017-09-18 22:53:44","codes":[{"authorDate":"2017-09-18 22:53:44","commitOrder":1,"curCode":"    public synchronized <K, V> KTable<K, V> table(final String topic,\n                                                  final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        return internalStreamsBuilder.table(topic,\n                                            new ConsumedInternal<>(consumed),\n                                            new MaterializedInternal<>(\n                                                    Materialized.<K, V, KeyValueStore<Bytes, byte[]>>as(\n                                                            internalStreamsBuilder.newStoreName(topic))\n                                                    .withKeySerde(consumed.keySerde)\n                                                    .withValueSerde(consumed.valueSerde),\n                                                    false));\n    }\n","date":"2017-09-18 22:53:44","endLine":281,"groupId":"2780","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"table","params":"(finalStringtopic@finalConsumed<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a2/72ec43c468dea5b39e8dab11f065ac8b0a914d.src","preCode":"    public synchronized <K, V> KTable<K, V> table(final String topic,\n                                                  final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        return internalStreamsBuilder.table(topic,\n                                            new ConsumedInternal<>(consumed),\n                                            new MaterializedInternal<>(\n                                                    Materialized.<K, V, KeyValueStore<Bytes, byte[]>>as(\n                                                            internalStreamsBuilder.newStoreName(topic))\n                                                    .withKeySerde(consumed.keySerde)\n                                                    .withValueSerde(consumed.valueSerde),\n                                                    false));\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"B"},{"authorDate":"2017-09-18 22:53:44","commitOrder":1,"curCode":"    public synchronized <K, V> GlobalKTable<K, V> globalTable(final String topic,\n                                                              final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materialized =\n                new MaterializedInternal<>(Materialized.<K, V, KeyValueStore<Bytes, byte[]>>as(\n                        internalStreamsBuilder.newStoreName(topic))\n                                                   .withKeySerde(consumed.keySerde)\n                                                   .withValueSerde(consumed.valueSerde),\n                                           false);\n        return internalStreamsBuilder.globalTable(topic, new ConsumedInternal<>(consumed), materialized);\n    }\n","date":"2017-09-18 22:53:44","endLine":336,"groupId":"2781","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"globalTable","params":"(finalStringtopic@finalConsumed<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a2/72ec43c468dea5b39e8dab11f065ac8b0a914d.src","preCode":"    public synchronized <K, V> GlobalKTable<K, V> globalTable(final String topic,\n                                                              final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materialized =\n                new MaterializedInternal<>(Materialized.<K, V, KeyValueStore<Bytes, byte[]>>as(\n                        internalStreamsBuilder.newStoreName(topic))\n                                                   .withKeySerde(consumed.keySerde)\n                                                   .withValueSerde(consumed.valueSerde),\n                                           false);\n        return internalStreamsBuilder.globalTable(topic, new ConsumedInternal<>(consumed), materialized);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"B"}],"commitId":"f2b74aa1c36bf2882006c14f7cbd56b493f39d26","commitMessage":"@@@KAFKA-5873; add materialized overloads to StreamsBuilder\n\nAdd overloads for `table` and `globalTable` that use `Materialized`\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3837 from dguy/kafka-5873\n","date":"2017-09-18 22:53:44","modifiedFileCount":"36","status":"B","submitter":"Damian Guy"},{"authorTime":"2017-10-07 06:38:23","codes":[{"authorDate":"2017-10-07 06:38:23","commitOrder":2,"curCode":"    public synchronized <K, V> KTable<K, V> table(final String topic,\n                                                  final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        return internalStreamsBuilder.table(topic,\n                                            new ConsumedInternal<>(consumed),\n                                            new MaterializedInternal<>(\n                                                    Materialized.<K, V, KeyValueStore<Bytes, byte[]>>with(consumed.keySerde, consumed.valueSerde),\n                                                    internalStreamsBuilder,\n                                                    topic));\n    }\n","date":"2017-10-07 06:38:23","endLine":279,"groupId":"2780","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"table","params":"(finalStringtopic@finalConsumed<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/cc6d79c6c48ebede83edaadfc0519c0e5c4ded.src","preCode":"    public synchronized <K, V> KTable<K, V> table(final String topic,\n                                                  final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        return internalStreamsBuilder.table(topic,\n                                            new ConsumedInternal<>(consumed),\n                                            new MaterializedInternal<>(\n                                                    Materialized.<K, V, KeyValueStore<Bytes, byte[]>>as(\n                                                            internalStreamsBuilder.newStoreName(topic))\n                                                    .withKeySerde(consumed.keySerde)\n                                                    .withValueSerde(consumed.valueSerde),\n                                                    false));\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"},{"authorDate":"2017-10-07 06:38:23","commitOrder":2,"curCode":"    public synchronized <K, V> GlobalKTable<K, V> globalTable(final String topic,\n                                                              final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materialized =\n                new MaterializedInternal<>(\n                        Materialized.<K, V, KeyValueStore<Bytes, byte[]>>with(consumed.keySerde, consumed.valueSerde),\n                        internalStreamsBuilder,\n                        topic);\n\n\n        return internalStreamsBuilder.globalTable(topic, new ConsumedInternal<>(consumed), materialized);\n    }\n","date":"2017-10-07 06:38:23","endLine":338,"groupId":"11963","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"globalTable","params":"(finalStringtopic@finalConsumed<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/cc6d79c6c48ebede83edaadfc0519c0e5c4ded.src","preCode":"    public synchronized <K, V> GlobalKTable<K, V> globalTable(final String topic,\n                                                              final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materialized =\n                new MaterializedInternal<>(Materialized.<K, V, KeyValueStore<Bytes, byte[]>>as(\n                        internalStreamsBuilder.newStoreName(topic))\n                                                   .withKeySerde(consumed.keySerde)\n                                                   .withValueSerde(consumed.valueSerde),\n                                           false);\n        return internalStreamsBuilder.globalTable(topic, new ConsumedInternal<>(consumed), materialized);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"23a014052d39521a3af471b3f95809c2164820f7","commitMessage":"@@@KAFKA-5651; Follow-up: add with method to Materialized\n\nAdd a `with(Serde keySerde.  Serde valSerde)` to `Materialized` for cases where people don't care about the state store name.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Ismael Juma <ismael@juma.me.uk>.  Matthias J. Sax <matthias@confluent.io>\n\nCloses #4009 from dguy/materialized\n","date":"2017-10-07 06:38:23","modifiedFileCount":"22","status":"M","submitter":"Damian Guy"},{"authorTime":"2017-11-29 03:08:42","codes":[{"authorDate":"2017-11-29 03:08:42","commitOrder":3,"curCode":"    public synchronized <K, V> KTable<K, V> table(final String topic,\n                                                  final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        return internalStreamsBuilder.table(topic,\n                                            new ConsumedInternal<>(consumed),\n                                            new MaterializedInternal<>(\n                                                    Materialized.<K, V, KeyValueStore<Bytes, byte[]>>with(consumed.keySerde, consumed.valueSerde),\n                                                    internalStreamsBuilder,\n                                                    topic + \"-\"));\n    }\n","date":"2017-11-29 03:08:42","endLine":279,"groupId":"2780","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"table","params":"(finalStringtopic@finalConsumed<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a9/4b0a74622b63ac26f21afc27d39d0a4e9cb45f.src","preCode":"    public synchronized <K, V> KTable<K, V> table(final String topic,\n                                                  final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        return internalStreamsBuilder.table(topic,\n                                            new ConsumedInternal<>(consumed),\n                                            new MaterializedInternal<>(\n                                                    Materialized.<K, V, KeyValueStore<Bytes, byte[]>>with(consumed.keySerde, consumed.valueSerde),\n                                                    internalStreamsBuilder,\n                                                    topic));\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"M"},{"authorDate":"2017-11-29 03:08:42","commitOrder":3,"curCode":"    public synchronized <K, V> GlobalKTable<K, V> globalTable(final String topic,\n                                                              final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materialized =\n                new MaterializedInternal<>(\n                        Materialized.<K, V, KeyValueStore<Bytes, byte[]>>with(consumed.keySerde, consumed.valueSerde),\n                        internalStreamsBuilder,\n                        topic + \"-\");\n\n\n        return internalStreamsBuilder.globalTable(topic, new ConsumedInternal<>(consumed), materialized);\n    }\n","date":"2017-11-29 03:08:42","endLine":338,"groupId":"11963","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"globalTable","params":"(finalStringtopic@finalConsumed<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a9/4b0a74622b63ac26f21afc27d39d0a4e9cb45f.src","preCode":"    public synchronized <K, V> GlobalKTable<K, V> globalTable(final String topic,\n                                                              final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materialized =\n                new MaterializedInternal<>(\n                        Materialized.<K, V, KeyValueStore<Bytes, byte[]>>with(consumed.keySerde, consumed.valueSerde),\n                        internalStreamsBuilder,\n                        topic);\n\n\n        return internalStreamsBuilder.globalTable(topic, new ConsumedInternal<>(consumed), materialized);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"M"}],"commitId":"1a1d923f252e9b1576dad6f7285f237feb064f64","commitMessage":"@@@KAFKA-6274: Use topic plus dash as prefix of auto-generated state store names\n\nUse `topic-` as the prefix of the auto-generated state store name.\n\nAlso add a unit test for this functionality.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Matthias J. Sax <matthias@confluent.io>.  Ted Yu <yuzhihong@gmail.com>\n\nCloses #4268 from guozhangwang/K6274-table-source-store-name\n","date":"2017-11-29 03:08:42","modifiedFileCount":"2","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-05-18 08:20:12","codes":[{"authorDate":"2018-05-18 08:20:12","commitOrder":4,"curCode":"    public synchronized <K, V> KTable<K, V> table(final String topic,\n                                                  final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final ConsumedInternal<K, V> consumedInternal = new ConsumedInternal<>(consumed);\n        return internalStreamsBuilder.table(topic,\n                                            consumedInternal,\n                                            new MaterializedInternal<>(\n                                                    Materialized.<K, V, KeyValueStore<Bytes, byte[]>>with(consumedInternal.keySerde(), consumedInternal.valueSerde()),\n                                                    internalStreamsBuilder,\n                                                    topic + \"-\"));\n    }\n","date":"2018-05-18 08:20:12","endLine":282,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"table","params":"(finalStringtopic@finalConsumed<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ea/d8a7663abf26aa9bee58f8db224b7477b3cc24.src","preCode":"    public synchronized <K, V> KTable<K, V> table(final String topic,\n                                                  final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        return internalStreamsBuilder.table(topic,\n                                            new ConsumedInternal<>(consumed),\n                                            new MaterializedInternal<>(\n                                                    Materialized.<K, V, KeyValueStore<Bytes, byte[]>>with(consumed.keySerde, consumed.valueSerde),\n                                                    internalStreamsBuilder,\n                                                    topic + \"-\"));\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"},{"authorDate":"2018-05-18 08:20:12","commitOrder":4,"curCode":"    public synchronized <K, V> GlobalKTable<K, V> globalTable(final String topic,\n                                                              final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final ConsumedInternal<K, V> consumedInternal = new ConsumedInternal<>(consumed);\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materialized =\n                new MaterializedInternal<>(\n                        Materialized.<K, V, KeyValueStore<Bytes, byte[]>>with(consumedInternal.keySerde(), consumedInternal.valueSerde()),\n                        internalStreamsBuilder,\n                        topic + \"-\");\n\n\n        return internalStreamsBuilder.globalTable(topic, consumedInternal, materialized);\n    }\n","date":"2018-05-18 08:20:12","endLine":342,"groupId":"20934","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"globalTable","params":"(finalStringtopic@finalConsumed<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ea/d8a7663abf26aa9bee58f8db224b7477b3cc24.src","preCode":"    public synchronized <K, V> GlobalKTable<K, V> globalTable(final String topic,\n                                                              final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materialized =\n                new MaterializedInternal<>(\n                        Materialized.<K, V, KeyValueStore<Bytes, byte[]>>with(consumed.keySerde, consumed.valueSerde),\n                        internalStreamsBuilder,\n                        topic + \"-\");\n\n\n        return internalStreamsBuilder.globalTable(topic, new ConsumedInternal<>(consumed), materialized);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":329,"status":"M"}],"commitId":"ba237c5d21abb8b63c5edf53517654a214157582","commitMessage":"@@@HOTFIX: use ConsumedInternal in StreamsBuilder\n","date":"2018-05-18 08:20:12","modifiedFileCount":"1","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-06-05 06:33:53","codes":[{"authorDate":"2018-06-05 06:33:53","commitOrder":5,"curCode":"    public synchronized <K, V> KTable<K, V> table(final String topic,\n                                                  final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final ConsumedInternal<K, V> consumedInternal = new ConsumedInternal<>(consumed);\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materializedInternal =\n            new MaterializedInternal<>(Materialized.with(consumedInternal.keySerde(), consumedInternal.valueSerde()));\n        materializedInternal.generateStoreNameIfNeeded(internalStreamsBuilder, topic + \"-\");\n        return internalStreamsBuilder.table(topic, consumedInternal, materializedInternal);\n    }\n","date":"2018-06-05 06:33:53","endLine":280,"groupId":"20934","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"table","params":"(finalStringtopic@finalConsumed<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/51/7104da323d03d5c7f15dde312d4242aa838eae.src","preCode":"    public synchronized <K, V> KTable<K, V> table(final String topic,\n                                                  final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final ConsumedInternal<K, V> consumedInternal = new ConsumedInternal<>(consumed);\n        return internalStreamsBuilder.table(topic,\n                                            consumedInternal,\n                                            new MaterializedInternal<>(\n                                                    Materialized.<K, V, KeyValueStore<Bytes, byte[]>>with(consumedInternal.keySerde(), consumedInternal.valueSerde()),\n                                                    internalStreamsBuilder,\n                                                    topic + \"-\"));\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"},{"authorDate":"2018-06-05 06:33:53","commitOrder":5,"curCode":"    public synchronized <K, V> GlobalKTable<K, V> globalTable(final String topic,\n                                                              final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final ConsumedInternal<K, V> consumedInternal = new ConsumedInternal<>(consumed);\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materializedInternal =\n                new MaterializedInternal<>(Materialized.<K, V, KeyValueStore<Bytes, byte[]>>with(consumedInternal.keySerde(), consumedInternal.valueSerde()));\n        materializedInternal.generateStoreNameIfNeeded(internalStreamsBuilder, topic + \"-\");\n\n        return internalStreamsBuilder.globalTable(topic, consumedInternal, materializedInternal);\n    }\n","date":"2018-06-05 06:33:53","endLine":338,"groupId":"16106","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"globalTable","params":"(finalStringtopic@finalConsumed<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/51/7104da323d03d5c7f15dde312d4242aa838eae.src","preCode":"    public synchronized <K, V> GlobalKTable<K, V> globalTable(final String topic,\n                                                              final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final ConsumedInternal<K, V> consumedInternal = new ConsumedInternal<>(consumed);\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materialized =\n                new MaterializedInternal<>(\n                        Materialized.<K, V, KeyValueStore<Bytes, byte[]>>with(consumedInternal.keySerde(), consumedInternal.valueSerde()),\n                        internalStreamsBuilder,\n                        topic + \"-\");\n\n\n        return internalStreamsBuilder.globalTable(topic, consumedInternal, materialized);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"M"}],"commitId":"6f9f3655731ea1d46bd1f0ed0957579d831e2692","commitMessage":"@@@KAFKA-6813: return to double-counting for count topology names (#5075)\n\n#4919 unintentionally changed the topology naming scheme. This change returns to the prior scheme.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-06-05 06:33:53","modifiedFileCount":"13","status":"M","submitter":"John Roesler"},{"authorTime":"2018-12-09 14:49:48","codes":[{"authorDate":"2018-12-09 14:49:48","commitOrder":6,"curCode":"    public synchronized <K, V> KTable<K, V> table(final String topic,\n                                                  final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final ConsumedInternal<K, V> consumedInternal = new ConsumedInternal<>(consumed);\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materializedInternal =\n            new MaterializedInternal<>(Materialized.with(consumedInternal.keySerde(), consumedInternal.valueSerde()), internalStreamsBuilder, topic + \"-\");\n        return internalStreamsBuilder.table(topic, consumedInternal, materializedInternal);\n    }\n","date":"2018-12-09 14:49:48","endLine":280,"groupId":"122811","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"table","params":"(finalStringtopic@finalConsumed<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9e/9942123536443f9b08bb08c4c66b4f55838f40.src","preCode":"    public synchronized <K, V> KTable<K, V> table(final String topic,\n                                                  final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final ConsumedInternal<K, V> consumedInternal = new ConsumedInternal<>(consumed);\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materializedInternal =\n            new MaterializedInternal<>(Materialized.with(consumedInternal.keySerde(), consumedInternal.valueSerde()));\n        materializedInternal.generateStoreNameIfNeeded(internalStreamsBuilder, topic + \"-\");\n        return internalStreamsBuilder.table(topic, consumedInternal, materializedInternal);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":272,"status":"M"},{"authorDate":"2018-12-09 14:49:48","commitOrder":6,"curCode":"    public synchronized <K, V> GlobalKTable<K, V> globalTable(final String topic,\n                                                              final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final ConsumedInternal<K, V> consumedInternal = new ConsumedInternal<>(consumed);\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materializedInternal =\n                new MaterializedInternal<>(Materialized.with(consumedInternal.keySerde(), consumedInternal.valueSerde()), internalStreamsBuilder, topic + \"-\");\n\n        return internalStreamsBuilder.globalTable(topic, consumedInternal, materializedInternal);\n    }\n","date":"2018-12-09 14:49:48","endLine":336,"groupId":"122811","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"globalTable","params":"(finalStringtopic@finalConsumed<K@V>consumed)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9e/9942123536443f9b08bb08c4c66b4f55838f40.src","preCode":"    public synchronized <K, V> GlobalKTable<K, V> globalTable(final String topic,\n                                                              final Consumed<K, V> consumed) {\n        Objects.requireNonNull(topic, \"topic can't be null\");\n        Objects.requireNonNull(consumed, \"consumed can't be null\");\n        final ConsumedInternal<K, V> consumedInternal = new ConsumedInternal<>(consumed);\n        final MaterializedInternal<K, V, KeyValueStore<Bytes, byte[]>> materializedInternal =\n                new MaterializedInternal<>(Materialized.<K, V, KeyValueStore<Bytes, byte[]>>with(consumedInternal.keySerde(), consumedInternal.valueSerde()));\n        materializedInternal.generateStoreNameIfNeeded(internalStreamsBuilder, topic + \"-\");\n\n        return internalStreamsBuilder.globalTable(topic, consumedInternal, materializedInternal);\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/StreamsBuilder.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"M"}],"commitId":"c0353d8ddce88bac6fc04f85dd40cb95b8ca5cf9","commitMessage":"@@@KAFKA-6036: Local Materialization for Source KTable (#5779)\n\nRefactor the materialization for source KTables in the way that:\n\nIf Materialized.as(queryableName) is specified.  materialize;\nIf the downstream operator requires to fetch from this KTable via ValueGetters.  materialize;\nIf the downstream operator requires to send old values.  materialize.\nOtherwise do not materialize the KTable. E.g. builder.table(\"topic\").filter().toStream().to(\"topic\") would not create any state stores.\n\nThere's a couple of minor changes along with PR as well:\n\nKTableImpl's queryableStoreName and isQueryable are merged into queryableStoreName only.  and if it is null it means not queryable. As long as it is not null.  it should be queryable (i.e. internally generated names will not be used any more).\nTo achieve this.  splitted MaterializedInternal.storeName() and MaterializedInternal.queryableName(). The former can be internally generated and will not be exposed to users. QueryableName can be modified to set to the internal store name if we decide to materialize it during the DSL parsing / physical topology generation phase. And only if queryableName is specified the corresponding KTable is determined to be materialized.\n\nFound some overlapping unit tests among KTableImplTest.  and KTableXXTest.  removed them.\n\nThere are a few typing bugs found along the way.  fixed them as well.\n\n-----------------------\n\nThis PR is an illustration of experimenting a poc towards logical materializations.\n\nToday we've logically materialized the KTable for filter / mapValues / transformValues if queryableName is not specified via Materialized.  but whenever users specify queryableName we will still always materialize. My original goal is to also consider logically materialize for queryable stores.  but when implementing it via a wrapped store to apply the transformations on the fly I realized it is tougher than I thought.  because we not only need to support fetch or get.  but also needs to support range queries.  approximateNumEntries.  and isOpen etc as well.  which are not efficient to support. So in the end I'd suggest we still stick with the rule of always materializing if queryableName is specified.  and only consider logical materialization otherwise.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <mjsax@apache.org>","date":"2018-12-09 14:49:48","modifiedFileCount":"32","status":"M","submitter":"Guozhang Wang"}]
