[{"authorTime":"2017-07-11 02:58:51","codes":[{"authorDate":"2017-07-11 02:58:51","commitOrder":1,"curCode":"    public void shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler() throws Exception {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(topology, context, stateMgr,\n            new LogAndContinueExceptionHandler());\n        final byte[] key = new LongSerializer().serialize(\"t2\", 1L);\n        final byte[] recordValue = new IntegerSerializer().serialize(\"t2\", 10);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","date":"2017-07-11 02:58:51","endLine":183,"groupId":"1802","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/59a061638ff02e91d5e45c918b005cdfb4afe4.src","preCode":"    public void shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler() throws Exception {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(topology, context, stateMgr,\n            new LogAndContinueExceptionHandler());\n        final byte[] key = new LongSerializer().serialize(\"t2\", 1L);\n        final byte[] recordValue = new IntegerSerializer().serialize(\"t2\", 10);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":176,"status":"B"},{"authorDate":"2017-07-11 02:58:51","commitOrder":1,"curCode":"    public void shouldNotThrowStreamsExceptionWhenValueDeserializationFails() throws Exception {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(topology, context, stateMgr,\n            new LogAndContinueExceptionHandler());\n        final byte[] key = new IntegerSerializer().serialize(\"t2\", 1);\n        final byte[] recordValue = new LongSerializer().serialize(\"t2\", 10L);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","date":"2017-07-11 02:58:51","endLine":193,"groupId":"1802","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotThrowStreamsExceptionWhenValueDeserializationFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/59a061638ff02e91d5e45c918b005cdfb4afe4.src","preCode":"    public void shouldNotThrowStreamsExceptionWhenValueDeserializationFails() throws Exception {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(topology, context, stateMgr,\n            new LogAndContinueExceptionHandler());\n        final byte[] key = new IntegerSerializer().serialize(\"t2\", 1);\n        final byte[] recordValue = new LongSerializer().serialize(\"t2\", 10L);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"B"}],"commitId":"a1f97c8dc4edd49c7a8a2ebb72734728029a85aa","commitMessage":"@@@KAFKA-5157; Options for handling corrupt data during deserialization\n\nThis is the implementation of KIP-161: https://cwiki.apache.org/confluence/display/KAFKA/KIP-161%3A+streams+deserialization+exception+handlers\n\nAuthor: Eno Thereska <eno.thereska@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Matthias J. Sax <matthias@confluent.io>\n\nCloses #3423 from enothereska/KAFKA-5157-deserialization-exceptions\n","date":"2017-07-11 02:58:51","modifiedFileCount":"12","status":"B","submitter":"Eno Thereska"},{"authorTime":"2017-09-28 18:00:31","codes":[{"authorDate":"2017-09-28 18:00:31","commitOrder":2,"curCode":"    public void shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler() throws Exception {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(\n            topology,\n            context,\n            stateMgr,\n            new LogAndContinueExceptionHandler(),\n            logContext);\n        final byte[] key = new LongSerializer().serialize(\"t2\", 1L);\n        final byte[] recordValue = new IntegerSerializer().serialize(\"t2\", 10);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","date":"2017-09-28 18:00:31","endLine":190,"groupId":"1802","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/783a205913928142ab4b08cd8f34ce96d1e571.src","preCode":"    public void shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler() throws Exception {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(topology, context, stateMgr,\n            new LogAndContinueExceptionHandler());\n        final byte[] key = new LongSerializer().serialize(\"t2\", 1L);\n        final byte[] recordValue = new IntegerSerializer().serialize(\"t2\", 10);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":179,"status":"M"},{"authorDate":"2017-09-28 18:00:31","commitOrder":2,"curCode":"    public void shouldNotThrowStreamsExceptionWhenValueDeserializationFails() throws Exception {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(\n            topology,\n            context,\n            stateMgr,\n            new LogAndContinueExceptionHandler(),\n            logContext);\n        final byte[] key = new IntegerSerializer().serialize(\"t2\", 1);\n        final byte[] recordValue = new LongSerializer().serialize(\"t2\", 10L);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","date":"2017-09-28 18:00:31","endLine":204,"groupId":"1802","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotThrowStreamsExceptionWhenValueDeserializationFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/783a205913928142ab4b08cd8f34ce96d1e571.src","preCode":"    public void shouldNotThrowStreamsExceptionWhenValueDeserializationFails() throws Exception {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(topology, context, stateMgr,\n            new LogAndContinueExceptionHandler());\n        final byte[] key = new IntegerSerializer().serialize(\"t2\", 1);\n        final byte[] recordValue = new LongSerializer().serialize(\"t2\", 10L);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"}],"commitId":"e5f2471c548fc490a42dd0321bcf7fcdd4ddc52d","commitMessage":"@@@KAFKA-5949; User Callback Exceptions need to be handled properly\n\n - catch user exception in user callback (TimestampExtractor.  DeserializationHandler.  StateRestoreListener) and wrap with StreamsException\n\nAdditional cleanup:\n - rename globalRestoreListener to userRestoreListener\n - remove unnecessary interface -> collapse SourceNodeRecordDeserializer and RecordDeserializer\n - removed unused parameter loggingEnabled from ProcessorContext#register\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>.  Damian Guy <damian.guy@gmail.com>\n\nCloses #3939 from mjsax/kafka-5949-exceptions-user-callbacks\n","date":"2017-09-28 18:00:31","modifiedFileCount":"46","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-12-05 02:21:42","codes":[{"authorDate":"2017-12-05 02:21:42","commitOrder":3,"curCode":"    public void shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler() throws Exception {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(\n            topology,\n            context,\n            stateMgr,\n            new LogAndContinueExceptionHandler(),\n            logContext);\n        final byte[] key = new LongSerializer().serialize(topic2, 1L);\n        final byte[] recordValue = new IntegerSerializer().serialize(topic2, 10);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","date":"2017-12-05 02:21:42","endLine":182,"groupId":"13632","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/38/a017d40945db027b4d92819239a6d50cc37d2f.src","preCode":"    public void shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler() throws Exception {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(\n            topology,\n            context,\n            stateMgr,\n            new LogAndContinueExceptionHandler(),\n            logContext);\n        final byte[] key = new LongSerializer().serialize(\"t2\", 1L);\n        final byte[] recordValue = new IntegerSerializer().serialize(\"t2\", 10);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"M"},{"authorDate":"2017-12-05 02:21:42","commitOrder":3,"curCode":"    public void shouldNotThrowStreamsExceptionWhenValueDeserializationFails() throws Exception {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(\n            topology,\n            context,\n            stateMgr,\n            new LogAndContinueExceptionHandler(),\n            logContext);\n        final byte[] key = new IntegerSerializer().serialize(topic2, 1);\n        final byte[] recordValue = new LongSerializer().serialize(topic2, 10L);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","date":"2017-12-05 02:21:42","endLine":196,"groupId":"17459","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotThrowStreamsExceptionWhenValueDeserializationFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/38/a017d40945db027b4d92819239a6d50cc37d2f.src","preCode":"    public void shouldNotThrowStreamsExceptionWhenValueDeserializationFails() throws Exception {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(\n            topology,\n            context,\n            stateMgr,\n            new LogAndContinueExceptionHandler(),\n            logContext);\n        final byte[] key = new IntegerSerializer().serialize(\"t2\", 1);\n        final byte[] recordValue = new LongSerializer().serialize(\"t2\", 10L);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"4b8a29f12a142d02be0b64eac71975b6a129d04a","commitMessage":"@@@KAFKA-6150: KIP-204 part III; Purge repartition topics with the admin client\n\n1. Add the repartition topics information into ProcessorTopology: personally I do not like leaking this information into the topology but it seems not other simple way around.\n2. StreamTask: added one more function to expose the consumed offsets from repartition topics only.\n3. TaskManager: use the AdminClient to send the gathered offsets to delete only if a) previous call has completed and client intentionally ignore-and-log any errors.  or b) no requests have ever called before.\n\nNOTE that this code depends on the assumption that purge is only called right after the commit has succeeded.  hence we presume all consumed offsets are committed.\n\n4. MINOR: Added a few more constructor for ProcessorTopology for cleaner unit tests.\n5. MINOR: Extracted MockStateStore out of the deprecated class.\n6. MINOR: Made a pass over some unit test classes for clean ups.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Damian Guy <damian.guy@gmail.com>\n\nCloses #4270 from guozhangwang/K6150-purge-repartition-topics\n","date":"2017-12-05 02:21:42","modifiedFileCount":"20","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-04-18 04:13:15","codes":[{"authorDate":"2018-04-18 04:13:15","commitOrder":4,"curCode":"    public void shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler() {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(\n            topology,\n            context,\n            stateMgr,\n            new LogAndContinueExceptionHandler(),\n            logContext);\n        final byte[] key = new LongSerializer().serialize(topic2, 1L);\n        final byte[] recordValue = new IntegerSerializer().serialize(topic2, 10);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","date":"2018-04-18 04:13:15","endLine":186,"groupId":"13632","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/4bc5293415cc9df9b93542ef8d93310ce88717.src","preCode":"    public void shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler() throws Exception {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(\n            topology,\n            context,\n            stateMgr,\n            new LogAndContinueExceptionHandler(),\n            logContext);\n        final byte[] key = new LongSerializer().serialize(topic2, 1L);\n        final byte[] recordValue = new IntegerSerializer().serialize(topic2, 10);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2018-04-18 04:13:15","commitOrder":4,"curCode":"    public void shouldNotThrowStreamsExceptionWhenValueDeserializationFails() {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(\n            topology,\n            context,\n            stateMgr,\n            new LogAndContinueExceptionHandler(),\n            logContext);\n        final byte[] key = new IntegerSerializer().serialize(topic2, 1);\n        final byte[] recordValue = new LongSerializer().serialize(topic2, 10L);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","date":"2018-04-18 04:13:15","endLine":200,"groupId":"17459","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotThrowStreamsExceptionWhenValueDeserializationFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/4bc5293415cc9df9b93542ef8d93310ce88717.src","preCode":"    public void shouldNotThrowStreamsExceptionWhenValueDeserializationFails() throws Exception {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(\n            topology,\n            context,\n            stateMgr,\n            new LogAndContinueExceptionHandler(),\n            logContext);\n        final byte[] key = new IntegerSerializer().serialize(topic2, 1);\n        final byte[] recordValue = new LongSerializer().serialize(topic2, 10L);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":189,"status":"M"}],"commitId":"ac9c3ed0b43ee848e6e555a01c55ea2eee78540a","commitMessage":"@@@KAFKA-6376: preliminary cleanup (#4872)\n\nGeneral cleanup of Streams code.  mostly resolving compiler warnings and re-formatting.\n\nThe regular testing suite should be sufficient.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-04-18 04:13:15","modifiedFileCount":"57","status":"M","submitter":"John Roesler"},{"authorTime":"2020-07-27 02:58:40","codes":[{"authorDate":"2020-07-27 02:58:40","commitOrder":5,"curCode":"    public void shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler() {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(\n            logContext,\n            topology,\n            context,\n            stateMgr,\n            new LogAndContinueExceptionHandler()\n        );\n        final byte[] key = new LongSerializer().serialize(topic2, 1L);\n        final byte[] recordValue = new IntegerSerializer().serialize(topic2, 10);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","date":"2020-07-27 02:58:40","endLine":194,"groupId":"102222","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/42/d3fc92530db4907ddbe1d9eca09ab56606289d.src","preCode":"    public void shouldNotThrowStreamsExceptionWhenKeyDeserializationFailsWithSkipHandler() {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(\n            topology,\n            context,\n            stateMgr,\n            new LogAndContinueExceptionHandler(),\n            logContext\n        );\n        final byte[] key = new LongSerializer().serialize(topic2, 1L);\n        final byte[] recordValue = new IntegerSerializer().serialize(topic2, 10);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"},{"authorDate":"2020-07-27 02:58:40","commitOrder":5,"curCode":"    public void shouldNotThrowStreamsExceptionWhenValueDeserializationFails() {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(\n            logContext,\n            topology,\n            context,\n            stateMgr,\n            new LogAndContinueExceptionHandler()\n        );\n        final byte[] key = new IntegerSerializer().serialize(topic2, 1);\n        final byte[] recordValue = new LongSerializer().serialize(topic2, 10L);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","date":"2020-07-27 02:58:40","endLine":209,"groupId":"102222","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotThrowStreamsExceptionWhenValueDeserializationFails","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/42/d3fc92530db4907ddbe1d9eca09ab56606289d.src","preCode":"    public void shouldNotThrowStreamsExceptionWhenValueDeserializationFails() {\n        final GlobalStateUpdateTask globalStateTask2 = new GlobalStateUpdateTask(\n            topology,\n            context,\n            stateMgr,\n            new LogAndContinueExceptionHandler(),\n            logContext\n        );\n        final byte[] key = new IntegerSerializer().serialize(topic2, 1);\n        final byte[] recordValue = new LongSerializer().serialize(topic2, 10L);\n\n        maybeDeserialize(globalStateTask2, key, recordValue, false);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/GlobalStateTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"0d47c69a9351ae258ad6165841840a65f0301d86","commitMessage":"@@@KAFKA-10306: GlobalThread should fail on InvalidOffsetException (#9075)\n\n* KAFKA-10306: GlobalThread should fail on InvalidOffsetException\n\n* Update streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateUpdateTask.java\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>\n\n* Update streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStateUpdateTask.java\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>\n\n* Update streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStreamThread.java\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>\n\n* Update streams/src/main/java/org/apache/kafka/streams/processor/internals/GlobalStreamThread.java\n\nCo-authored-by: John Roesler <vvcephei@users.noreply.github.com>","date":"2020-07-27 02:58:40","modifiedFileCount":"10","status":"M","submitter":"Matthias J. Sax"}]
