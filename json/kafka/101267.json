[{"authorTime":"2020-10-08 21:08:24","codes":[{"authorDate":"2020-10-08 21:08:24","commitOrder":1,"curCode":"    public void shouldGetAllFromCache() {\n        cachingStore.put(bytesKey(\"a\"), bytesValue(\"a\"));\n        cachingStore.put(bytesKey(\"b\"), bytesValue(\"b\"));\n        cachingStore.put(bytesKey(\"c\"), bytesValue(\"c\"));\n        cachingStore.put(bytesKey(\"d\"), bytesValue(\"d\"));\n        cachingStore.put(bytesKey(\"e\"), bytesValue(\"e\"));\n        cachingStore.put(bytesKey(\"f\"), bytesValue(\"f\"));\n        cachingStore.put(bytesKey(\"g\"), bytesValue(\"g\"));\n        cachingStore.put(bytesKey(\"h\"), bytesValue(\"h\"));\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.all();\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (final String s : array) {\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(s), new TimeWindow(DEFAULT_TIMESTAMP, DEFAULT_TIMESTAMP + WINDOW_SIZE)),\n                s);\n        }\n        assertFalse(iterator.hasNext());\n    }\n","date":"2020-10-08 21:08:24","endLine":318,"groupId":"15388","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetAllFromCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/86/ee164b07ac9b2d7817d24e9bc69314dd4cc1c9.src","preCode":"    public void shouldGetAllFromCache() {\n        cachingStore.put(bytesKey(\"a\"), bytesValue(\"a\"));\n        cachingStore.put(bytesKey(\"b\"), bytesValue(\"b\"));\n        cachingStore.put(bytesKey(\"c\"), bytesValue(\"c\"));\n        cachingStore.put(bytesKey(\"d\"), bytesValue(\"d\"));\n        cachingStore.put(bytesKey(\"e\"), bytesValue(\"e\"));\n        cachingStore.put(bytesKey(\"f\"), bytesValue(\"f\"));\n        cachingStore.put(bytesKey(\"g\"), bytesValue(\"g\"));\n        cachingStore.put(bytesKey(\"h\"), bytesValue(\"h\"));\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.all();\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (final String s : array) {\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(s), new TimeWindow(DEFAULT_TIMESTAMP, DEFAULT_TIMESTAMP + WINDOW_SIZE)),\n                s);\n        }\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"B"},{"authorDate":"2020-10-08 21:08:24","commitOrder":1,"curCode":"    public void shouldGetAllBackwardFromCache() {\n        cachingStore.put(bytesKey(\"a\"), bytesValue(\"a\"));\n        cachingStore.put(bytesKey(\"b\"), bytesValue(\"b\"));\n        cachingStore.put(bytesKey(\"c\"), bytesValue(\"c\"));\n        cachingStore.put(bytesKey(\"d\"), bytesValue(\"d\"));\n        cachingStore.put(bytesKey(\"e\"), bytesValue(\"e\"));\n        cachingStore.put(bytesKey(\"f\"), bytesValue(\"f\"));\n        cachingStore.put(bytesKey(\"g\"), bytesValue(\"g\"));\n        cachingStore.put(bytesKey(\"h\"), bytesValue(\"h\"));\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.backwardAll();\n        final String[] array = {\"h\", \"g\", \"f\", \"e\", \"d\", \"c\", \"b\", \"a\"};\n        for (final String s : array) {\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(s), new TimeWindow(DEFAULT_TIMESTAMP, DEFAULT_TIMESTAMP + WINDOW_SIZE)),\n                s);\n        }\n        assertFalse(iterator.hasNext());\n    }\n","date":"2020-10-08 21:08:24","endLine":341,"groupId":"13246","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetAllBackwardFromCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/86/ee164b07ac9b2d7817d24e9bc69314dd4cc1c9.src","preCode":"    public void shouldGetAllBackwardFromCache() {\n        cachingStore.put(bytesKey(\"a\"), bytesValue(\"a\"));\n        cachingStore.put(bytesKey(\"b\"), bytesValue(\"b\"));\n        cachingStore.put(bytesKey(\"c\"), bytesValue(\"c\"));\n        cachingStore.put(bytesKey(\"d\"), bytesValue(\"d\"));\n        cachingStore.put(bytesKey(\"e\"), bytesValue(\"e\"));\n        cachingStore.put(bytesKey(\"f\"), bytesValue(\"f\"));\n        cachingStore.put(bytesKey(\"g\"), bytesValue(\"g\"));\n        cachingStore.put(bytesKey(\"h\"), bytesValue(\"h\"));\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.backwardAll();\n        final String[] array = {\"h\", \"g\", \"f\", \"e\", \"d\", \"c\", \"b\", \"a\"};\n        for (final String s : array) {\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(s), new TimeWindow(DEFAULT_TIMESTAMP, DEFAULT_TIMESTAMP + WINDOW_SIZE)),\n                s);\n        }\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"B"}],"commitId":"d0e6943bdd048aa6e0a4dbbdad3c8da460db16dc","commitMessage":"@@@KAFKA-9929: Support backward iterator on SessionStore (#9139)\n\nImplements KIP-617 for `SessionStore`\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-10-08 21:08:24","modifiedFileCount":"14","status":"B","submitter":"Jorge Esteban Quilcate Otoya"},{"authorTime":"2021-04-10 02:49:37","codes":[{"authorDate":"2021-04-10 02:49:37","commitOrder":2,"curCode":"    public void shouldGetAllFromCache() {\n        cachingStore.put(bytesKey(\"a\"), bytesValue(\"a\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"b\"), bytesValue(\"b\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"c\"), bytesValue(\"c\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"d\"), bytesValue(\"d\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"e\"), bytesValue(\"e\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"f\"), bytesValue(\"f\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"g\"), bytesValue(\"g\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"h\"), bytesValue(\"h\"), DEFAULT_TIMESTAMP);\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.all();\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (final String s : array) {\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(s), new TimeWindow(DEFAULT_TIMESTAMP, DEFAULT_TIMESTAMP + WINDOW_SIZE)),\n                s);\n        }\n        assertFalse(iterator.hasNext());\n    }\n","date":"2021-04-10 02:49:37","endLine":315,"groupId":"2098","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetAllFromCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/5101f8158d194f971de8e8e649fb510df2ec15.src","preCode":"    public void shouldGetAllFromCache() {\n        cachingStore.put(bytesKey(\"a\"), bytesValue(\"a\"));\n        cachingStore.put(bytesKey(\"b\"), bytesValue(\"b\"));\n        cachingStore.put(bytesKey(\"c\"), bytesValue(\"c\"));\n        cachingStore.put(bytesKey(\"d\"), bytesValue(\"d\"));\n        cachingStore.put(bytesKey(\"e\"), bytesValue(\"e\"));\n        cachingStore.put(bytesKey(\"f\"), bytesValue(\"f\"));\n        cachingStore.put(bytesKey(\"g\"), bytesValue(\"g\"));\n        cachingStore.put(bytesKey(\"h\"), bytesValue(\"h\"));\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.all();\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (final String s : array) {\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(s), new TimeWindow(DEFAULT_TIMESTAMP, DEFAULT_TIMESTAMP + WINDOW_SIZE)),\n                s);\n        }\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":296,"status":"M"},{"authorDate":"2021-04-10 02:49:37","commitOrder":2,"curCode":"    public void shouldGetAllBackwardFromCache() {\n        cachingStore.put(bytesKey(\"a\"), bytesValue(\"a\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"b\"), bytesValue(\"b\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"c\"), bytesValue(\"c\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"d\"), bytesValue(\"d\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"e\"), bytesValue(\"e\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"f\"), bytesValue(\"f\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"g\"), bytesValue(\"g\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"h\"), bytesValue(\"h\"), DEFAULT_TIMESTAMP);\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.backwardAll();\n        final String[] array = {\"h\", \"g\", \"f\", \"e\", \"d\", \"c\", \"b\", \"a\"};\n        for (final String s : array) {\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(s), new TimeWindow(DEFAULT_TIMESTAMP, DEFAULT_TIMESTAMP + WINDOW_SIZE)),\n                s);\n        }\n        assertFalse(iterator.hasNext());\n    }\n","date":"2021-04-10 02:49:37","endLine":338,"groupId":"2098","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetAllBackwardFromCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/5101f8158d194f971de8e8e649fb510df2ec15.src","preCode":"    public void shouldGetAllBackwardFromCache() {\n        cachingStore.put(bytesKey(\"a\"), bytesValue(\"a\"));\n        cachingStore.put(bytesKey(\"b\"), bytesValue(\"b\"));\n        cachingStore.put(bytesKey(\"c\"), bytesValue(\"c\"));\n        cachingStore.put(bytesKey(\"d\"), bytesValue(\"d\"));\n        cachingStore.put(bytesKey(\"e\"), bytesValue(\"e\"));\n        cachingStore.put(bytesKey(\"f\"), bytesValue(\"f\"));\n        cachingStore.put(bytesKey(\"g\"), bytesValue(\"g\"));\n        cachingStore.put(bytesKey(\"h\"), bytesValue(\"h\"));\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.backwardAll();\n        final String[] array = {\"h\", \"g\", \"f\", \"e\", \"d\", \"c\", \"b\", \"a\"};\n        for (final String s : array) {\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(s), new TimeWindow(DEFAULT_TIMESTAMP, DEFAULT_TIMESTAMP + WINDOW_SIZE)),\n                s);\n        }\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"}],"commitId":"db0323e9ba3f767614415d833a2081a33825a284","commitMessage":"@@@KAFKA-12449: Remove deprecated WindowStore#put (#10293)\n\nRemoves `WindowStore#put(K. V)` that was deprecated via KIP-474.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-04-10 02:49:37","modifiedFileCount":"21","status":"M","submitter":"Jorge Esteban Quilcate Otoya"},{"authorTime":"2021-07-27 07:26:02","codes":[{"authorDate":"2021-07-27 07:26:02","commitOrder":3,"curCode":"    public void shouldGetAllFromCache() {\n        cachingStore.put(bytesKey(\"a\"), bytesValue(\"a\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"b\"), bytesValue(\"b\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"c\"), bytesValue(\"c\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"d\"), bytesValue(\"d\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"e\"), bytesValue(\"e\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"f\"), bytesValue(\"f\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"g\"), bytesValue(\"g\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"h\"), bytesValue(\"h\"), DEFAULT_TIMESTAMP);\n\n        try (final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.all()) {\n            final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n            for (final String s : array) {\n                verifyWindowedKeyValue(\n                    iterator.next(),\n                    new Windowed<>(bytesKey(s), new TimeWindow(DEFAULT_TIMESTAMP, DEFAULT_TIMESTAMP + WINDOW_SIZE)),\n                    s);\n            }\n            assertFalse(iterator.hasNext());\n        }\n    }\n","date":"2021-07-27 07:26:02","endLine":321,"groupId":"101267","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldGetAllFromCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/3d69a6a9f4d4c9cd689931ddd344dd6baa68bc.src","preCode":"    public void shouldGetAllFromCache() {\n        cachingStore.put(bytesKey(\"a\"), bytesValue(\"a\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"b\"), bytesValue(\"b\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"c\"), bytesValue(\"c\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"d\"), bytesValue(\"d\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"e\"), bytesValue(\"e\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"f\"), bytesValue(\"f\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"g\"), bytesValue(\"g\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"h\"), bytesValue(\"h\"), DEFAULT_TIMESTAMP);\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.all();\n        final String[] array = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"};\n        for (final String s : array) {\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(s), new TimeWindow(DEFAULT_TIMESTAMP, DEFAULT_TIMESTAMP + WINDOW_SIZE)),\n                s);\n        }\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"M"},{"authorDate":"2021-07-27 07:26:02","commitOrder":3,"curCode":"    public void shouldGetAllBackwardFromCache() {\n        cachingStore.put(bytesKey(\"a\"), bytesValue(\"a\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"b\"), bytesValue(\"b\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"c\"), bytesValue(\"c\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"d\"), bytesValue(\"d\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"e\"), bytesValue(\"e\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"f\"), bytesValue(\"f\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"g\"), bytesValue(\"g\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"h\"), bytesValue(\"h\"), DEFAULT_TIMESTAMP);\n\n        try (final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.backwardAll()) {\n            final String[] array = {\"h\", \"g\", \"f\", \"e\", \"d\", \"c\", \"b\", \"a\"};\n            for (final String s : array) {\n                verifyWindowedKeyValue(\n                    iterator.next(),\n                    new Windowed<>(bytesKey(s), new TimeWindow(DEFAULT_TIMESTAMP, DEFAULT_TIMESTAMP + WINDOW_SIZE)),\n                    s);\n            }\n            assertFalse(iterator.hasNext());\n        }\n    }\n","date":"2021-07-27 07:26:02","endLine":344,"groupId":"101267","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldGetAllBackwardFromCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/02/3d69a6a9f4d4c9cd689931ddd344dd6baa68bc.src","preCode":"    public void shouldGetAllBackwardFromCache() {\n        cachingStore.put(bytesKey(\"a\"), bytesValue(\"a\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"b\"), bytesValue(\"b\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"c\"), bytesValue(\"c\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"d\"), bytesValue(\"d\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"e\"), bytesValue(\"e\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"f\"), bytesValue(\"f\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"g\"), bytesValue(\"g\"), DEFAULT_TIMESTAMP);\n        cachingStore.put(bytesKey(\"h\"), bytesValue(\"h\"), DEFAULT_TIMESTAMP);\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> iterator = cachingStore.backwardAll();\n        final String[] array = {\"h\", \"g\", \"f\", \"e\", \"d\", \"c\", \"b\", \"a\"};\n        for (final String s : array) {\n            verifyWindowedKeyValue(\n                iterator.next(),\n                new Windowed<>(bytesKey(s), new TimeWindow(DEFAULT_TIMESTAMP, DEFAULT_TIMESTAMP + WINDOW_SIZE)),\n                s);\n        }\n        assertFalse(iterator.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingPersistentWindowStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"}],"commitId":"818cbfba6ddf8252b7da314bbaac74201951dfb3","commitMessage":"@@@KAFKA-13125: close KeyValueIterator instances in internals tests (part 2) (#11107)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-07-27 07:26:02","modifiedFileCount":"8","status":"M","submitter":"Luke Chen"}]
