[{"authorTime":"2020-02-15 05:54:39","codes":[{"authorDate":"2020-02-15 05:54:39","commitOrder":5,"curCode":"    public void shouldGetProcessRateSensor() {\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, \"process-rate\", RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        expect(expectedSensor.add(eq(new MetricName(\n            \"process-rate\",\n            threadLevelGroup,\n            \"The average per-second number of calls to process\",\n            tagMap\n        )), anyObject())).andReturn(true);\n\n        expect(expectedSensor.add(eq(new MetricName(\n            \"process-total\",\n            threadLevelGroup,\n            \"The total number of calls to process\",\n            tagMap\n        )), anyObject())).andReturn(true);\n        replay(StreamsMetricsImpl.class, streamsMetrics, expectedSensor);\n\n        final Sensor sensor = ThreadMetrics.processRateSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2020-02-15 05:54:39","endLine":250,"groupId":"21070","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetProcessRateSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/7965226333b5775fa42562b2d94f302b77eb0c.src","preCode":"    public void shouldGetProcessRateSensor() {\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, \"process-rate\", RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        expect(expectedSensor.add(eq(new MetricName(\n            \"process-rate\",\n            threadLevelGroup,\n            \"The average per-second number of calls to process\",\n            tagMap\n        )), anyObject())).andReturn(true);\n\n        expect(expectedSensor.add(eq(new MetricName(\n            \"process-total\",\n            threadLevelGroup,\n            \"The total number of calls to process\",\n            tagMap\n        )), anyObject())).andReturn(true);\n        replay(StreamsMetricsImpl.class, streamsMetrics, expectedSensor);\n\n        final Sensor sensor = ThreadMetrics.processRateSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"B"},{"authorDate":"2020-02-15 05:54:39","commitOrder":5,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        mockStatic(StreamsMetricsImpl.class);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2020-02-15 05:54:39","endLine":105,"groupId":"21062","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/7965226333b5775fa42562b2d94f302b77eb0c.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        mockStatic(StreamsMetricsImpl.class);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"MB"}],"commitId":"8d0b069b0fbda0826ad447accbf93a19f6e813fe","commitMessage":"@@@KAFKA-9557: correct thread process-rate sensor to measure throughput (#8112)\n\nCorrect the process-rate (and total) sensor to measure throughput (and total record processing count).\n\nReviewers: Guozhang Wang <guozhang@confluent.io>","date":"2020-02-15 05:54:39","modifiedFileCount":"3","status":"M","submitter":"John Roesler"},{"authorTime":"2020-03-03 00:22:01","codes":[{"authorDate":"2020-03-03 00:22:01","commitOrder":6,"curCode":"    public void shouldGetProcessRateSensor() {\n        final String operation = \"process\";\n        final String operationRate = \"process\" + RATE_SUFFIX;\n        final String totalDescription = \"The total number of calls to process\";\n        final String rateDescription = \"The average per-second number of calls to process\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operationRate, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addRateOfSumAndSumMetricsToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics, expectedSensor);\n\n        final Sensor sensor = ThreadMetrics.processRateSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2020-03-03 00:22:01","endLine":241,"groupId":"19118","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetProcessRateSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d7/059a87fd8868d279052c39cd1fc9211836eb22.src","preCode":"    public void shouldGetProcessRateSensor() {\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, \"process-rate\", RecordingLevel.INFO))\n            .andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        expect(expectedSensor.add(eq(new MetricName(\n            \"process-rate\",\n            threadLevelGroup,\n            \"The average per-second number of calls to process\",\n            tagMap\n        )), anyObject())).andReturn(true);\n\n        expect(expectedSensor.add(eq(new MetricName(\n            \"process-total\",\n            threadLevelGroup,\n            \"The total number of calls to process\",\n            tagMap\n        )), anyObject())).andReturn(true);\n        replay(StreamsMetricsImpl.class, streamsMetrics, expectedSensor);\n\n        final Sensor sensor = ThreadMetrics.processRateSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"},{"authorDate":"2020-03-03 00:22:01","commitOrder":6,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2020-03-03 00:22:01","endLine":104,"groupId":"3630","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d7/059a87fd8868d279052c39cd1fc9211836eb22.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        mockStatic(StreamsMetricsImpl.class);\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":84,"status":"M"}],"commitId":"ea0c02753140cacbac5893874f623441073b3837","commitMessage":"@@@MINOR: Clean up process rate and latency metrics test (#8172)\n\nReviewers: John Roesler <vvcephei@apache.org>\n","date":"2020-03-03 00:22:01","modifiedFileCount":"2","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":7,"curCode":"    public void shouldGetProcessRateSensor() {\n        final String operation = \"process\";\n        final String operationRate = \"process\" + RATE_SUFFIX;\n        final String totalDescription = \"The total number of calls to process\";\n        final String rateDescription = \"The average per-second number of calls to process\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operationRate, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addRateOfSumAndSumMetricsToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics, expectedSensor);\n\n        final Sensor sensor = ThreadMetrics.processRateSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-01 20:05:08","endLine":150,"groupId":"19118","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetProcessRateSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7a/9a0945ca9a7370bf3454c94c3c5df88a01c3f5.src","preCode":"    public void shouldGetProcessRateSensor() {\n        final String operation = \"process\";\n        final String operationRate = \"process\" + RATE_SUFFIX;\n        final String totalDescription = \"The total number of calls to process\";\n        final String rateDescription = \"The average per-second number of calls to process\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operationRate, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addRateOfSumAndSumMetricsToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics, expectedSensor);\n\n        final Sensor sensor = ThreadMetrics.processRateSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":7,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-01 20:05:08","endLine":411,"groupId":"3630","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7a/9a0945ca9a7370bf3454c94c3c5df88a01c3f5.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            threadLevelGroup,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":389,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-11 04:21:46","codes":[{"authorDate":"2021-06-11 04:21:46","commitOrder":8,"curCode":"    public void shouldGetProcessRateSensor() {\n        final String operation = \"process\";\n        final String operationRate = \"process\" + RATE_SUFFIX;\n        final String totalDescription = \"The total number of calls to process\";\n        final String rateDescription = \"The average per-second number of calls to process\";\n        when(streamsMetrics.threadLevelSensor(THREAD_ID, operationRate, RecordingLevel.INFO)).thenReturn(expectedSensor);\n        when(streamsMetrics.threadLevelTagMap(THREAD_ID)).thenReturn(tagMap);\n        StreamsMetricsImpl.addRateOfSumAndSumMetricsToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n\n        final Sensor sensor = ThreadMetrics.processRateSensor(THREAD_ID, streamsMetrics);\n\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-11 04:21:46","endLine":126,"groupId":"102328","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetProcessRateSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ae/0eae43f6b36d107e68ddc0587cd4369f1c407c.src","preCode":"    public void shouldGetProcessRateSensor() {\n        final String operation = \"process\";\n        final String operationRate = \"process\" + RATE_SUFFIX;\n        final String totalDescription = \"The total number of calls to process\";\n        final String rateDescription = \"The average per-second number of calls to process\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operationRate, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n        StreamsMetricsImpl.addRateOfSumAndSumMetricsToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n        replay(StreamsMetricsImpl.class, streamsMetrics, expectedSensor);\n\n        final Sensor sensor = ThreadMetrics.processRateSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2021-06-11 04:21:46","commitOrder":8,"curCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        when(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).thenReturn(expectedSensor);\n        when(streamsMetrics.threadLevelTagMap(THREAD_ID)).thenReturn(tagMap);\n\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        assertThat(sensor, is(expectedSensor));\n    }\n","date":"2021-06-11 04:21:46","endLine":367,"groupId":"102328","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetCreateTaskSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ae/0eae43f6b36d107e68ddc0587cd4369f1c407c.src","preCode":"    public void shouldGetCreateTaskSensor() {\n        final String operation = \"task-created\";\n        final String totalDescription = \"The total number of newly created tasks\";\n        final String rateDescription = \"The average per-second number of newly created tasks\";\n        expect(streamsMetrics.threadLevelSensor(THREAD_ID, operation, RecordingLevel.INFO)).andReturn(expectedSensor);\n        expect(streamsMetrics.threadLevelTagMap(THREAD_ID)).andReturn(tagMap);\n\n        StreamsMetricsImpl.addInvocationRateAndCountToSensor(\n            expectedSensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            operation,\n            rateDescription,\n            totalDescription\n        );\n\n        replay(StreamsMetricsImpl.class, streamsMetrics);\n\n        final Sensor sensor = ThreadMetrics.createTaskSensor(THREAD_ID, streamsMetrics);\n\n        verify(StreamsMetricsImpl.class, streamsMetrics);\n        assertThat(sensor, is(expectedSensor));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"}],"commitId":"69d507590efc0588a61214c35e0bb552744aae05","commitMessage":"@@@KAFKA-12924 Replace EasyMock and PowerMock with Mockito in streams metrics tests (#10850)\n\nReviewers: John Roesler <vvcephei@apache.org>.  Ismael Juma <ijuma@apache.org>","date":"2021-06-11 04:21:46","modifiedFileCount":"7","status":"M","submitter":"wycccccc"}]
