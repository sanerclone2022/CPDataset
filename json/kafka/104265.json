[{"authorTime":"2018-02-06 02:09:17","codes":[{"authorDate":"2018-02-06 02:09:17","commitOrder":1,"curCode":"    private String verifyFullFetchResponsePartitions(FetchResponse response) {\n        StringBuilder bld = new StringBuilder();\n        Set<TopicPartition> omitted =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        Set<TopicPartition> extra =\n            findMissing(sessionPartitions.keySet(), response.responseData().keySet());\n        if (!omitted.isEmpty()) {\n            bld.append(\"omitted=(\").append(Utils.join(omitted, \", \")).append(\", \");\n        }\n        if (!extra.isEmpty()) {\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\", \");\n        }\n        if ((!omitted.isEmpty()) || (!extra.isEmpty())) {\n            bld.append(\"response=(\").append(Utils.join(response.responseData().keySet(), \", \"));\n            return bld.toString();\n        }\n        return null;\n    }\n","date":"2018-02-06 02:09:17","endLine":318,"groupId":"8471","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyFullFetchResponsePartitions","params":"(FetchResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/5324e833607e88a09cd0a55b6cc65cbeaa2110.src","preCode":"    private String verifyFullFetchResponsePartitions(FetchResponse response) {\n        StringBuilder bld = new StringBuilder();\n        Set<TopicPartition> omitted =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        Set<TopicPartition> extra =\n            findMissing(sessionPartitions.keySet(), response.responseData().keySet());\n        if (!omitted.isEmpty()) {\n            bld.append(\"omitted=(\").append(Utils.join(omitted, \", \")).append(\", \");\n        }\n        if (!extra.isEmpty()) {\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\", \");\n        }\n        if ((!omitted.isEmpty()) || (!extra.isEmpty())) {\n            bld.append(\"response=(\").append(Utils.join(response.responseData().keySet(), \", \"));\n            return bld.toString();\n        }\n        return null;\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/FetchSessionHandler.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"B"},{"authorDate":"2018-02-06 02:09:17","commitOrder":1,"curCode":"    private String verifyIncrementalFetchResponsePartitions(FetchResponse response) {\n        Set<TopicPartition> extra =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        if (!extra.isEmpty()) {\n            StringBuilder bld = new StringBuilder();\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\"), \");\n            bld.append(\"response=(\").append(\n                Utils.join(response.responseData().keySet(), \", \")).append(\"), \");\n            return bld.toString();\n        }\n        return null;\n    }\n","date":"2018-02-06 02:09:17","endLine":337,"groupId":"1805","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyIncrementalFetchResponsePartitions","params":"(FetchResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/5324e833607e88a09cd0a55b6cc65cbeaa2110.src","preCode":"    private String verifyIncrementalFetchResponsePartitions(FetchResponse response) {\n        Set<TopicPartition> extra =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        if (!extra.isEmpty()) {\n            StringBuilder bld = new StringBuilder();\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\"), \");\n            bld.append(\"response=(\").append(\n                Utils.join(response.responseData().keySet(), \", \")).append(\"), \");\n            return bld.toString();\n        }\n        return null;\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/FetchSessionHandler.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":326,"status":"B"}],"commitId":"7fe1c2b3d3a78ea3ffb9e269563653626861fbd2","commitMessage":"@@@KAFKA-6254; Incremental fetch requests\n\nAuthor: Colin P. Mccabe <cmccabe@confluent.io>\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Ismael Juma <ismael@juma.me.uk>.  Jun Rao <junrao@gmail.com>\n\nCloses #4418 from cmccabe/KAFKA-6254\n","date":"2018-02-06 02:09:17","modifiedFileCount":"8","status":"B","submitter":"Colin P. Mccabe"},{"authorTime":"2018-11-13 14:18:59","codes":[{"authorDate":"2018-11-13 14:18:59","commitOrder":2,"curCode":"    private String verifyFullFetchResponsePartitions(FetchResponse<?> response) {\n        StringBuilder bld = new StringBuilder();\n        Set<TopicPartition> omitted =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        Set<TopicPartition> extra =\n            findMissing(sessionPartitions.keySet(), response.responseData().keySet());\n        if (!omitted.isEmpty()) {\n            bld.append(\"omitted=(\").append(Utils.join(omitted, \", \")).append(\", \");\n        }\n        if (!extra.isEmpty()) {\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\", \");\n        }\n        if ((!omitted.isEmpty()) || (!extra.isEmpty())) {\n            bld.append(\"response=(\").append(Utils.join(response.responseData().keySet(), \", \"));\n            return bld.toString();\n        }\n        return null;\n    }\n","date":"2018-11-13 14:18:59","endLine":316,"groupId":"8471","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyFullFetchResponsePartitions","params":"(FetchResponse<?>response)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/30/ae65f2309c4ccace8d663b6943f5dcf22aac2c.src","preCode":"    private String verifyFullFetchResponsePartitions(FetchResponse response) {\n        StringBuilder bld = new StringBuilder();\n        Set<TopicPartition> omitted =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        Set<TopicPartition> extra =\n            findMissing(sessionPartitions.keySet(), response.responseData().keySet());\n        if (!omitted.isEmpty()) {\n            bld.append(\"omitted=(\").append(Utils.join(omitted, \", \")).append(\", \");\n        }\n        if (!extra.isEmpty()) {\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\", \");\n        }\n        if ((!omitted.isEmpty()) || (!extra.isEmpty())) {\n            bld.append(\"response=(\").append(Utils.join(response.responseData().keySet(), \", \"));\n            return bld.toString();\n        }\n        return null;\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/FetchSessionHandler.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"M"},{"authorDate":"2018-11-13 14:18:59","commitOrder":2,"curCode":"    private String verifyIncrementalFetchResponsePartitions(FetchResponse<?> response) {\n        Set<TopicPartition> extra =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        if (!extra.isEmpty()) {\n            StringBuilder bld = new StringBuilder();\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\"), \");\n            bld.append(\"response=(\").append(\n                Utils.join(response.responseData().keySet(), \", \")).append(\"), \");\n            return bld.toString();\n        }\n        return null;\n    }\n","date":"2018-11-13 14:18:59","endLine":335,"groupId":"1805","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyIncrementalFetchResponsePartitions","params":"(FetchResponse<?>response)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/30/ae65f2309c4ccace8d663b6943f5dcf22aac2c.src","preCode":"    private String verifyIncrementalFetchResponsePartitions(FetchResponse response) {\n        Set<TopicPartition> extra =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        if (!extra.isEmpty()) {\n            StringBuilder bld = new StringBuilder();\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\"), \");\n            bld.append(\"response=(\").append(\n                Utils.join(response.responseData().keySet(), \", \")).append(\"), \");\n            return bld.toString();\n        }\n        return null;\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/FetchSessionHandler.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"}],"commitId":"12f310d50e7f5b1c18c4f61a119a6cd830da3bc0","commitMessage":"@@@KAFKA-7612: Fix javac warnings and enable warnings as errors (#5900)\n\n- Use Xlint:all with 3 exclusions (filed KAFKA-7613 to remove the exclusions)\n- Use the same javac options when compiling tests (seems accidental that\nwe didn't do this before)\n- Replaced several deprecated method calls with non-deprecated ones:\n  - `KafkaConsumer.poll(long)` and `KafkaConsumer.close(long)`\n  - `Class.newInstance` and `new Integer/Long` (deprecated since Java 9)\n  - `scala.Console` (deprecated in Scala 2.11)\n  - `PartitionData` taking a timestamp (one of them seemingly a bug)\n  - `JsonMappingException` single parameter constructor\n- Fix unnecessary usage of raw types in several places.\n- Add @SuppressWarnings for deprecations.  unchecked and switch fallthrough in\nseveral places.\n- Scala clean-ups (var -> val.  ETA expansion warnings.  avoid reflective calls)\n- Use lambdas to simplify code in a few places\n- Add @SafeVarargs.  fix varargs usage and remove unnecessary `Utils.mkList` method\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Manikumar Reddy <manikumar.reddy@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Stanislav Kozlovski <stanislav_kozlovski@outlook.com>","date":"2018-11-13 14:18:59","modifiedFileCount":"146","status":"M","submitter":"Ismael Juma"},{"authorTime":"2020-01-07 02:30:42","codes":[{"authorDate":"2020-01-07 02:30:42","commitOrder":3,"curCode":"    String verifyFullFetchResponsePartitions(FetchResponse<?> response) {\n        StringBuilder bld = new StringBuilder();\n        Set<TopicPartition> extra =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        Set<TopicPartition> omitted =\n            findMissing(sessionPartitions.keySet(), response.responseData().keySet());\n        if (!omitted.isEmpty()) {\n            bld.append(\"omitted=(\").append(Utils.join(omitted, \", \")).append(\", \");\n        }\n        if (!extra.isEmpty()) {\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\", \");\n        }\n        if ((!omitted.isEmpty()) || (!extra.isEmpty())) {\n            bld.append(\"response=(\").append(Utils.join(response.responseData().keySet(), \", \")).append(\")\");\n            return bld.toString();\n        }\n        return null;\n    }\n","date":"2020-01-07 02:30:42","endLine":338,"groupId":"8471","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyFullFetchResponsePartitions","params":"(FetchResponse<?>response)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/16/b346dbee356524f006d324fa9633355ed0ca70.src","preCode":"    private String verifyFullFetchResponsePartitions(FetchResponse<?> response) {\n        StringBuilder bld = new StringBuilder();\n        Set<TopicPartition> omitted =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        Set<TopicPartition> extra =\n            findMissing(sessionPartitions.keySet(), response.responseData().keySet());\n        if (!omitted.isEmpty()) {\n            bld.append(\"omitted=(\").append(Utils.join(omitted, \", \")).append(\", \");\n        }\n        if (!extra.isEmpty()) {\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\", \");\n        }\n        if ((!omitted.isEmpty()) || (!extra.isEmpty())) {\n            bld.append(\"response=(\").append(Utils.join(response.responseData().keySet(), \", \"));\n            return bld.toString();\n        }\n        return null;\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/FetchSessionHandler.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"},{"authorDate":"2020-01-07 02:30:42","commitOrder":3,"curCode":"    String verifyIncrementalFetchResponsePartitions(FetchResponse<?> response) {\n        Set<TopicPartition> extra =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        if (!extra.isEmpty()) {\n            StringBuilder bld = new StringBuilder();\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\"), \");\n            bld.append(\"response=(\").append(\n                Utils.join(response.responseData().keySet(), \", \")).append(\"), \");\n            return bld.toString();\n        }\n        return null;\n    }\n","date":"2020-01-07 02:30:42","endLine":357,"groupId":"1805","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyIncrementalFetchResponsePartitions","params":"(FetchResponse<?>response)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/16/b346dbee356524f006d324fa9633355ed0ca70.src","preCode":"    private String verifyIncrementalFetchResponsePartitions(FetchResponse<?> response) {\n        Set<TopicPartition> extra =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        if (!extra.isEmpty()) {\n            StringBuilder bld = new StringBuilder();\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\"), \");\n            bld.append(\"response=(\").append(\n                Utils.join(response.responseData().keySet(), \", \")).append(\"), \");\n            return bld.toString();\n        }\n        return null;\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/FetchSessionHandler.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"}],"commitId":"42b0971e94651c590865ef163543d91722779f88","commitMessage":"@@@KAFKA-9364: Fix misleading consumer logs on throttling (#7894)\n\nWhen the consumer's fetch request is throttled by the KIP-219 mechanism. \nit receives an empty fetch response.  The consumer should not log this\nas an error.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2020-01-07 02:30:42","modifiedFileCount":"2","status":"M","submitter":"Colin Patrick McCabe"},{"authorTime":"2021-03-04 18:06:50","codes":[{"authorDate":"2021-03-04 18:06:50","commitOrder":4,"curCode":"    String verifyFullFetchResponsePartitions(FetchResponse response) {\n        StringBuilder bld = new StringBuilder();\n        Set<TopicPartition> extra =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        Set<TopicPartition> omitted =\n            findMissing(sessionPartitions.keySet(), response.responseData().keySet());\n        if (!omitted.isEmpty()) {\n            bld.append(\"omitted=(\").append(Utils.join(omitted, \", \")).append(\", \");\n        }\n        if (!extra.isEmpty()) {\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\", \");\n        }\n        if ((!omitted.isEmpty()) || (!extra.isEmpty())) {\n            bld.append(\"response=(\").append(Utils.join(response.responseData().keySet(), \", \")).append(\")\");\n            return bld.toString();\n        }\n        return null;\n    }\n","date":"2021-03-04 18:06:50","endLine":338,"groupId":"8471","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyFullFetchResponsePartitions","params":"(FetchResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/16e01923c5841aff076f9de12699b64acf960e.src","preCode":"    String verifyFullFetchResponsePartitions(FetchResponse<?> response) {\n        StringBuilder bld = new StringBuilder();\n        Set<TopicPartition> extra =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        Set<TopicPartition> omitted =\n            findMissing(sessionPartitions.keySet(), response.responseData().keySet());\n        if (!omitted.isEmpty()) {\n            bld.append(\"omitted=(\").append(Utils.join(omitted, \", \")).append(\", \");\n        }\n        if (!extra.isEmpty()) {\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\", \");\n        }\n        if ((!omitted.isEmpty()) || (!extra.isEmpty())) {\n            bld.append(\"response=(\").append(Utils.join(response.responseData().keySet(), \", \")).append(\")\");\n            return bld.toString();\n        }\n        return null;\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/FetchSessionHandler.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"},{"authorDate":"2021-03-04 18:06:50","commitOrder":4,"curCode":"    String verifyIncrementalFetchResponsePartitions(FetchResponse response) {\n        Set<TopicPartition> extra =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        if (!extra.isEmpty()) {\n            StringBuilder bld = new StringBuilder();\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\"), \");\n            bld.append(\"response=(\").append(\n                Utils.join(response.responseData().keySet(), \", \")).append(\"), \");\n            return bld.toString();\n        }\n        return null;\n    }\n","date":"2021-03-04 18:06:50","endLine":357,"groupId":"1805","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyIncrementalFetchResponsePartitions","params":"(FetchResponseresponse)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/16e01923c5841aff076f9de12699b64acf960e.src","preCode":"    String verifyIncrementalFetchResponsePartitions(FetchResponse<?> response) {\n        Set<TopicPartition> extra =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        if (!extra.isEmpty()) {\n            StringBuilder bld = new StringBuilder();\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\"), \");\n            bld.append(\"response=(\").append(\n                Utils.join(response.responseData().keySet(), \", \")).append(\"), \");\n            return bld.toString();\n        }\n        return null;\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/FetchSessionHandler.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":346,"status":"M"}],"commitId":"8205051e90e3ea16165f8dc1f5c81af744bb1b9a","commitMessage":"@@@MINOR: remove FetchResponse.AbortedTransaction and redundant construc? (#9758)\n\n1. rename INVALID_HIGHWATERMARK to INVALID_HIGH_WATERMARK\n2. replace FetchResponse.AbortedTransaction by FetchResponseData.AbortedTransaction\n3. remove redundant constructors from FetchResponse.PartitionData\n4. rename recordSet to records\n5. add helpers \"recordsOrFail\" and \"recordsSize\" to FetchResponse to process record casting\n\nReviewers: Ismael Juma <ismael@juma.me.uk>","date":"2021-03-04 18:06:50","modifiedFileCount":"15","status":"M","submitter":"Chia-Ping Tsai"},{"authorTime":"2021-07-08 07:02:37","codes":[{"authorDate":"2021-07-08 07:02:37","commitOrder":5,"curCode":"    String verifyFullFetchResponsePartitions(Set<TopicPartition> topicPartitions, Set<Uuid> ids, short version) {\n        StringBuilder bld = new StringBuilder();\n        Set<TopicPartition> extra =\n            findMissing(topicPartitions, sessionPartitions.keySet());\n        Set<TopicPartition> omitted =\n            findMissing(sessionPartitions.keySet(), topicPartitions);\n        Set<Uuid> extraIds = new HashSet<>();\n        if (version >= 13) {\n            extraIds = findMissing(ids, sessionTopicNames.keySet());\n        }\n        if (!omitted.isEmpty()) {\n            bld.append(\"omittedPartitions=(\").append(Utils.join(omitted, \", \")).append(\", \");\n        }\n        if (!extra.isEmpty()) {\n            bld.append(\"extraPartitions=(\").append(Utils.join(extra, \", \")).append(\", \");\n        }\n        if (!extraIds.isEmpty()) {\n            bld.append(\"extraIds=(\").append(Utils.join(extraIds, \", \")).append(\", \");\n        }\n        if ((!omitted.isEmpty()) || (!extra.isEmpty()) || (!extraIds.isEmpty())) {\n            bld.append(\"response=(\").append(Utils.join(topicPartitions, \", \")).append(\")\");\n            return bld.toString();\n        }\n        return null;\n    }\n","date":"2021-07-08 07:02:37","endLine":456,"groupId":"104265","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyFullFetchResponsePartitions","params":"(Set<TopicPartition>topicPartitions@Set<Uuid>ids@shortversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0f/a959292109d09bb3be27cea1dfdecd9b450322.src","preCode":"    String verifyFullFetchResponsePartitions(FetchResponse response) {\n        StringBuilder bld = new StringBuilder();\n        Set<TopicPartition> extra =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        Set<TopicPartition> omitted =\n            findMissing(sessionPartitions.keySet(), response.responseData().keySet());\n        if (!omitted.isEmpty()) {\n            bld.append(\"omitted=(\").append(Utils.join(omitted, \", \")).append(\", \");\n        }\n        if (!extra.isEmpty()) {\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\", \");\n        }\n        if ((!omitted.isEmpty()) || (!extra.isEmpty())) {\n            bld.append(\"response=(\").append(Utils.join(response.responseData().keySet(), \", \")).append(\")\");\n            return bld.toString();\n        }\n        return null;\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/FetchSessionHandler.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":432,"status":"M"},{"authorDate":"2021-07-08 07:02:37","commitOrder":5,"curCode":"    String verifyIncrementalFetchResponsePartitions(Set<TopicPartition> topicPartitions, Set<Uuid> ids, short version) {\n        Set<Uuid> extraIds = new HashSet<>();\n        if (version >= 13) {\n            extraIds = findMissing(ids, sessionTopicNames.keySet());\n        }\n        Set<TopicPartition> extra =\n            findMissing(topicPartitions, sessionPartitions.keySet());\n        StringBuilder bld = new StringBuilder();\n        if (extra.isEmpty())\n            bld.append(\"extraPartitions=(\").append(Utils.join(extra, \", \")).append(\"), \");\n        if (extraIds.isEmpty())\n            bld.append(\"extraIds=(\").append(Utils.join(extraIds, \", \")).append(\"), \");\n        if ((!extra.isEmpty()) || (!extraIds.isEmpty())) {\n            bld.append(\"response=(\").append(Utils.join(topicPartitions, \", \")).append(\")\");\n            return bld.toString();\n        }\n        return null;\n    }\n","date":"2021-07-08 07:02:37","endLine":483,"groupId":"104265","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyIncrementalFetchResponsePartitions","params":"(Set<TopicPartition>topicPartitions@Set<Uuid>ids@shortversion)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0f/a959292109d09bb3be27cea1dfdecd9b450322.src","preCode":"    String verifyIncrementalFetchResponsePartitions(FetchResponse response) {\n        Set<TopicPartition> extra =\n            findMissing(response.responseData().keySet(), sessionPartitions.keySet());\n        if (!extra.isEmpty()) {\n            StringBuilder bld = new StringBuilder();\n            bld.append(\"extra=(\").append(Utils.join(extra, \", \")).append(\"), \");\n            bld.append(\"response=(\").append(\n                Utils.join(response.responseData().keySet(), \", \")).append(\"), \");\n            return bld.toString();\n        }\n        return null;\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/clients/FetchSessionHandler.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":466,"status":"M"}],"commitId":"2b8aff58b575c199ee8372e5689420c9d77357a5","commitMessage":"@@@KAFKA-10580: Add topic ID support to Fetch request (#9944)\n\nUpdated FetchRequest and FetchResponse to use topic IDs rather than topic names.\nSome of the complicated code is found in FetchSession and FetchSessionHandler.\nWe need to be able to store topic IDs and maintain a cache on the broker for IDs that may not have been resolved. On incremental fetch requests.  we will try to resolve them or remove them if in toForget.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>.  Chia-Ping Tsai <chia7712@gmail.com>.  Jun Rao <junrao@gmail.com>","date":"2021-07-08 07:02:37","modifiedFileCount":"23","status":"M","submitter":"Justine Olshan"}]
