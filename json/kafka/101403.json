[{"authorTime":"2018-08-15 08:46:40","codes":[{"authorDate":"2018-08-15 08:46:40","commitOrder":1,"curCode":"    private Topology getTopologyWithChangingValuesAfterChangingKey(final String optimizeConfig) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final Properties properties = new Properties();\n        properties.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, optimizeConfig);\n\n        final KStream<String, String> inputStream = builder.stream(\"input\");\n        final KStream<String, String> mappedKeyStream = inputStream.selectKey((k, v) -> k + v);\n\n        mappedKeyStream.mapValues(v -> v.toUpperCase(Locale.getDefault())).groupByKey().count().toStream().to(\"output\");\n        mappedKeyStream.flatMapValues(v -> Arrays.asList(v.split(\"\\\\s\"))).groupByKey().windowedBy(TimeWindows.of(5000)).count().toStream().to(\"windowed-output\");\n\n        return builder.build(properties);\n\n    }\n","date":"2018-08-15 08:46:40","endLine":109,"groupId":"9566","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getTopologyWithChangingValuesAfterChangingKey","params":"(finalStringoptimizeConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d6/5f27e2b19ba9b8d51d6c5a6b96a4a295d2923c.src","preCode":"    private Topology getTopologyWithChangingValuesAfterChangingKey(final String optimizeConfig) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final Properties properties = new Properties();\n        properties.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, optimizeConfig);\n\n        final KStream<String, String> inputStream = builder.stream(\"input\");\n        final KStream<String, String> mappedKeyStream = inputStream.selectKey((k, v) -> k + v);\n\n        mappedKeyStream.mapValues(v -> v.toUpperCase(Locale.getDefault())).groupByKey().count().toStream().to(\"output\");\n        mappedKeyStream.flatMapValues(v -> Arrays.asList(v.split(\"\\\\s\"))).groupByKey().windowedBy(TimeWindows.of(5000)).count().toStream().to(\"windowed-output\");\n\n        return builder.build(properties);\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/graph/StreamsGraphTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"B"},{"authorDate":"2018-08-15 08:46:40","commitOrder":1,"curCode":"    private Topology getTopologyWithThroughOperation(final String optimizeConfig) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final Properties properties = new Properties();\n        properties.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, optimizeConfig);\n\n        final KStream<String, String> inputStream = builder.stream(\"input\");\n        final KStream<String, String> mappedKeyStream = inputStream.selectKey((k, v) -> k + v).through(\"through-topic\");\n\n        mappedKeyStream.groupByKey().count().toStream().to(\"output\");\n        mappedKeyStream.groupByKey().windowedBy(TimeWindows.of(5000)).count().toStream().to(\"windowed-output\");\n\n        return builder.build(properties);\n\n    }\n","date":"2018-08-15 08:46:40","endLine":125,"groupId":"9566","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getTopologyWithThroughOperation","params":"(finalStringoptimizeConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d6/5f27e2b19ba9b8d51d6c5a6b96a4a295d2923c.src","preCode":"    private Topology getTopologyWithThroughOperation(final String optimizeConfig) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final Properties properties = new Properties();\n        properties.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, optimizeConfig);\n\n        final KStream<String, String> inputStream = builder.stream(\"input\");\n        final KStream<String, String> mappedKeyStream = inputStream.selectKey((k, v) -> k + v).through(\"through-topic\");\n\n        mappedKeyStream.groupByKey().count().toStream().to(\"output\");\n        mappedKeyStream.groupByKey().windowedBy(TimeWindows.of(5000)).count().toStream().to(\"windowed-output\");\n\n        return builder.build(properties);\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/graph/StreamsGraphTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"B"}],"commitId":"3e64e5b9c03f13f58e6a049ff1fed039c6a15d69","commitMessage":"@@@KAFKA-6761: Reduce streams footprint part IV add optimization (#5451)\n\nThis PR adds the optimization of eliminating multiple repartition topics when the KStream resulting from a key-changing operation executes other methods using the new key and reduces the repartition topics to one.\n\nNote that this PR leaves in place the optimization for re-using a source topic as a changelog topic for source KTable instances. I'll have another follow-up PR to move the source topic optimization to a method within InternalStreamsBuilder so it can be performed in the same area of the code.\n\nAdditionally.  the current value of StreamsConfig.OPTIMIZE is all and we'll need to have another KIP to change the value to 2.1.\n\nAn integration test RepartitionOptimizingIntegrationTest which asserts the same results for an optimized topology with one repartition topic as the un-optimized version with four repartition topics.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-08-15 08:46:40","modifiedFileCount":"6","status":"B","submitter":"Bill Bejeck"},{"authorTime":"2018-10-05 04:51:39","codes":[{"authorDate":"2018-10-05 04:51:39","commitOrder":2,"curCode":"    private Topology getTopologyWithChangingValuesAfterChangingKey(final String optimizeConfig) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final Properties properties = new Properties();\n        properties.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, optimizeConfig);\n\n        final KStream<String, String> inputStream = builder.stream(\"input\");\n        final KStream<String, String> mappedKeyStream = inputStream.selectKey((k, v) -> k + v);\n\n        mappedKeyStream.mapValues(v -> v.toUpperCase(Locale.getDefault())).groupByKey().count().toStream().to(\"output\");\n        mappedKeyStream.flatMapValues(v -> Arrays.asList(v.split(\"\\\\s\"))).groupByKey().windowedBy(TimeWindows.of(ofMillis(5000))).count().toStream().to(\"windowed-output\");\n\n        return builder.build(properties);\n\n    }\n","date":"2018-10-05 04:51:39","endLine":108,"groupId":"9566","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getTopologyWithChangingValuesAfterChangingKey","params":"(finalStringoptimizeConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bd/43685a3c5cdd3cb9e3ed1570a95f214afe784f.src","preCode":"    private Topology getTopologyWithChangingValuesAfterChangingKey(final String optimizeConfig) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final Properties properties = new Properties();\n        properties.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, optimizeConfig);\n\n        final KStream<String, String> inputStream = builder.stream(\"input\");\n        final KStream<String, String> mappedKeyStream = inputStream.selectKey((k, v) -> k + v);\n\n        mappedKeyStream.mapValues(v -> v.toUpperCase(Locale.getDefault())).groupByKey().count().toStream().to(\"output\");\n        mappedKeyStream.flatMapValues(v -> Arrays.asList(v.split(\"\\\\s\"))).groupByKey().windowedBy(TimeWindows.of(5000)).count().toStream().to(\"windowed-output\");\n\n        return builder.build(properties);\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/graph/StreamsGraphTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"},{"authorDate":"2018-10-05 04:51:39","commitOrder":2,"curCode":"    private Topology getTopologyWithThroughOperation(final String optimizeConfig) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final Properties properties = new Properties();\n        properties.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, optimizeConfig);\n\n        final KStream<String, String> inputStream = builder.stream(\"input\");\n        final KStream<String, String> mappedKeyStream = inputStream.selectKey((k, v) -> k + v).through(\"through-topic\");\n\n        mappedKeyStream.groupByKey().count().toStream().to(\"output\");\n        mappedKeyStream.groupByKey().windowedBy(TimeWindows.of(ofMillis(5000))).count().toStream().to(\"windowed-output\");\n\n        return builder.build(properties);\n\n    }\n","date":"2018-10-05 04:51:39","endLine":124,"groupId":"9566","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getTopologyWithThroughOperation","params":"(finalStringoptimizeConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bd/43685a3c5cdd3cb9e3ed1570a95f214afe784f.src","preCode":"    private Topology getTopologyWithThroughOperation(final String optimizeConfig) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final Properties properties = new Properties();\n        properties.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, optimizeConfig);\n\n        final KStream<String, String> inputStream = builder.stream(\"input\");\n        final KStream<String, String> mappedKeyStream = inputStream.selectKey((k, v) -> k + v).through(\"through-topic\");\n\n        mappedKeyStream.groupByKey().count().toStream().to(\"output\");\n        mappedKeyStream.groupByKey().windowedBy(TimeWindows.of(5000)).count().toStream().to(\"windowed-output\");\n\n        return builder.build(properties);\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/graph/StreamsGraphTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"ca641b3e2e48c14ff308181c775775408f5f35f7","commitMessage":"@@@KAFKA-7277: Migrate Streams API to Duration instead of longMs times (#5682)\n\nReviewers: Johne Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-10-05 04:51:39","modifiedFileCount":"97","status":"M","submitter":"Nikolay"},{"authorTime":"2020-06-20 08:41:06","codes":[{"authorDate":"2020-06-20 08:41:06","commitOrder":3,"curCode":"    private Topology getTopologyWithChangingValuesAfterChangingKey(final String optimizeConfig) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final Properties properties = new Properties();\n        properties.put(StreamsConfig.TOPOLOGY_OPTIMIZATION_CONFIG, optimizeConfig);\n\n        final KStream<String, String> inputStream = builder.stream(\"input\");\n        final KStream<String, String> mappedKeyStream = inputStream.selectKey((k, v) -> k + v);\n\n        mappedKeyStream.mapValues(v -> v.toUpperCase(Locale.getDefault())).groupByKey().count().toStream().to(\"output\");\n        mappedKeyStream.flatMapValues(v -> Arrays.asList(v.split(\"\\\\s\"))).groupByKey().windowedBy(TimeWindows.of(ofMillis(5000))).count().toStream().to(\"windowed-output\");\n\n        return builder.build(properties);\n\n    }\n","date":"2020-06-20 08:41:06","endLine":255,"groupId":"101403","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getTopologyWithChangingValuesAfterChangingKey","params":"(finalStringoptimizeConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/0160274340dae76b515187c2c7ed7110f19905.src","preCode":"    private Topology getTopologyWithChangingValuesAfterChangingKey(final String optimizeConfig) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final Properties properties = new Properties();\n        properties.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, optimizeConfig);\n\n        final KStream<String, String> inputStream = builder.stream(\"input\");\n        final KStream<String, String> mappedKeyStream = inputStream.selectKey((k, v) -> k + v);\n\n        mappedKeyStream.mapValues(v -> v.toUpperCase(Locale.getDefault())).groupByKey().count().toStream().to(\"output\");\n        mappedKeyStream.flatMapValues(v -> Arrays.asList(v.split(\"\\\\s\"))).groupByKey().windowedBy(TimeWindows.of(ofMillis(5000))).count().toStream().to(\"windowed-output\");\n\n        return builder.build(properties);\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/graph/StreamsGraphTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"},{"authorDate":"2020-06-20 08:41:06","commitOrder":3,"curCode":"    private Topology getTopologyWithThroughOperation(final String optimizeConfig) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final Properties properties = new Properties();\n        properties.put(StreamsConfig.TOPOLOGY_OPTIMIZATION_CONFIG, optimizeConfig);\n\n        final KStream<String, String> inputStream = builder.stream(\"input\");\n        final KStream<String, String> mappedKeyStream = inputStream.selectKey((k, v) -> k + v).through(\"through-topic\");\n\n        mappedKeyStream.groupByKey().count().toStream().to(\"output\");\n        mappedKeyStream.groupByKey().windowedBy(TimeWindows.of(ofMillis(5000))).count().toStream().to(\"windowed-output\");\n\n        return builder.build(properties);\n\n    }\n","date":"2020-06-20 08:41:06","endLine":272,"groupId":"101403","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getTopologyWithThroughOperation","params":"(finalStringoptimizeConfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/96/0160274340dae76b515187c2c7ed7110f19905.src","preCode":"    private Topology getTopologyWithThroughOperation(final String optimizeConfig) {\n\n        final StreamsBuilder builder = new StreamsBuilder();\n        final Properties properties = new Properties();\n        properties.put(StreamsConfig.TOPOLOGY_OPTIMIZATION, optimizeConfig);\n\n        final KStream<String, String> inputStream = builder.stream(\"input\");\n        final KStream<String, String> mappedKeyStream = inputStream.selectKey((k, v) -> k + v).through(\"through-topic\");\n\n        mappedKeyStream.groupByKey().count().toStream().to(\"output\");\n        mappedKeyStream.groupByKey().windowedBy(TimeWindows.of(ofMillis(5000))).count().toStream().to(\"windowed-output\");\n\n        return builder.build(properties);\n\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/graph/StreamsGraphTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":258,"status":"M"}],"commitId":"712cc5d073da7595dab836c95372c13fc61047ee","commitMessage":"@@@KAFKA-10168: fix StreamsConfig parameter name variable (#8865)\n\nImplements KIP-626.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  John Roesler <john@confluent.io>","date":"2020-06-20 08:41:06","modifiedFileCount":"20","status":"M","submitter":"Matthias J. Sax"}]
