[{"authorTime":"2016-04-21 05:09:59","codes":[{"authorDate":"2016-04-21 05:09:59","commitOrder":1,"curCode":"    public void testOnResume() {\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        connector.start(CONFIG);\n        expectLastCall();\n\n        listener.onResume(CONNECTOR);\n        expectLastCall();\n\n        connector.stop();\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, listener);\n\n        workerConnector.initialize(CONNECTOR_CONFIG);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        workerConnector.transitionTo(TargetState.STARTED);\n        workerConnector.shutdown();\n\n        verifyAll();\n    }\n","date":"2016-04-21 05:09:59","endLine":187,"groupId":"11208","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a5/f740908334adf573cf4dc33b4245b42f3d56f1.src","preCode":"    public void testOnResume() {\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        connector.start(CONFIG);\n        expectLastCall();\n\n        listener.onResume(CONNECTOR);\n        expectLastCall();\n\n        connector.stop();\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, listener);\n\n        workerConnector.initialize(CONNECTOR_CONFIG);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        workerConnector.transitionTo(TargetState.STARTED);\n        workerConnector.shutdown();\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConnectorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"B"},{"authorDate":"2016-04-21 05:09:59","commitOrder":1,"curCode":"    public void testStartupPaused() {\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        \r\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, listener);\n\n        workerConnector.initialize(CONNECTOR_CONFIG);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        workerConnector.shutdown();\n\n        verifyAll();\n    }\n","date":"2016-04-21 05:09:59","endLine":211,"groupId":"17705","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartupPaused","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a5/f740908334adf573cf4dc33b4245b42f3d56f1.src","preCode":"    public void testStartupPaused() {\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        \r\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, listener);\n\n        workerConnector.initialize(CONNECTOR_CONFIG);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        workerConnector.shutdown();\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConnectorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"}],"commitId":"c9485b78a6e43747daf1314ae9532839fb7bc810","commitMessage":"@@@KAFKA-2370: kafka connect pause/resume API\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Liquan Pei <liquanpei@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1087 from hachikuji/KAFKA-2370\n","date":"2016-04-21 05:09:59","modifiedFileCount":"29","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2017-05-19 01:39:15","codes":[{"authorDate":"2017-05-19 01:39:15","commitOrder":2,"curCode":"    public void testOnResume() {\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        connector.start(CONFIG);\n        expectLastCall();\n\n        listener.onResume(CONNECTOR);\n        expectLastCall();\n\n        connector.stop();\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, listener);\n\n        workerConnector.initialize(connectorConfig);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        workerConnector.transitionTo(TargetState.STARTED);\n        workerConnector.shutdown();\n\n        verifyAll();\n    }\n","date":"2017-05-19 01:39:15","endLine":195,"groupId":"11208","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/11/b05ee5fb9fe9b5da12a249ed07bb1e891c7a80.src","preCode":"    public void testOnResume() {\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        connector.start(CONFIG);\n        expectLastCall();\n\n        listener.onResume(CONNECTOR);\n        expectLastCall();\n\n        connector.stop();\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, listener);\n\n        workerConnector.initialize(CONNECTOR_CONFIG);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        workerConnector.transitionTo(TargetState.STARTED);\n        workerConnector.shutdown();\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConnectorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2017-05-19 01:39:15","commitOrder":2,"curCode":"    public void testStartupPaused() {\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        \r\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, listener);\n\n        workerConnector.initialize(connectorConfig);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        workerConnector.shutdown();\n\n        verifyAll();\n    }\n","date":"2017-05-19 01:39:15","endLine":219,"groupId":"17705","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartupPaused","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/11/b05ee5fb9fe9b5da12a249ed07bb1e891c7a80.src","preCode":"    public void testStartupPaused() {\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        \r\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, listener);\n\n        workerConnector.initialize(CONNECTOR_CONFIG);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        workerConnector.shutdown();\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConnectorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"}],"commitId":"45f2261763eac5caaebf860daab32ef5337c9293","commitMessage":"@@@KAFKA-3487: Support classloading isolation in Connect (KIP-146)\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3028 from kkonstantine/KAFKA-3487-Support-classloading-isolation-in-Connect\n","date":"2017-05-19 01:39:15","modifiedFileCount":"26","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2017-09-23 04:17:28","codes":[{"authorDate":"2017-09-23 04:17:28","commitOrder":3,"curCode":"    public void testOnResume() {\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        connector.start(CONFIG);\n        expectLastCall();\n\n        listener.onResume(CONNECTOR);\n        expectLastCall();\n\n        connector.stop();\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, metrics, listener);\n\n        workerConnector.initialize(connectorConfig);\n        assertInitializedMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        assertPausedMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.STARTED);\n        assertRunningMetric(workerConnector);\n        workerConnector.shutdown();\n        assertStoppedMetric(workerConnector);\n\n        verifyAll();\n    }\n","date":"2017-09-23 04:17:28","endLine":221,"groupId":"11208","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/21/01a33a2e80d78390a3c76f1d15a3e1ade181a8.src","preCode":"    public void testOnResume() {\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        connector.start(CONFIG);\n        expectLastCall();\n\n        listener.onResume(CONNECTOR);\n        expectLastCall();\n\n        connector.stop();\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, listener);\n\n        workerConnector.initialize(connectorConfig);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        workerConnector.transitionTo(TargetState.STARTED);\n        workerConnector.shutdown();\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConnectorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":188,"status":"M"},{"authorDate":"2017-09-23 04:17:28","commitOrder":3,"curCode":"    public void testStartupPaused() {\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        \r\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, metrics, listener);\n\n        workerConnector.initialize(connectorConfig);\n        assertInitializedMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        assertPausedMetric(workerConnector);\n        workerConnector.shutdown();\n        assertStoppedMetric(workerConnector);\n\n        verifyAll();\n    }\n","date":"2017-09-23 04:17:28","endLine":248,"groupId":"17705","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartupPaused","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/21/01a33a2e80d78390a3c76f1d15a3e1ade181a8.src","preCode":"    public void testStartupPaused() {\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        \r\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, listener);\n\n        workerConnector.initialize(connectorConfig);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        workerConnector.shutdown();\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConnectorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"}],"commitId":"f4a1ca347bd21cacf5906887f56001bce61c4544","commitMessage":"@@@KAFKA-5899: Added Connect metrics for connectors (KIP-196)\n\nThis PR is the first of several subtasks for [KAFKA-2376](https://issues.apache.org/jira/browse/KAFKA-2376) to add metrics to Connect worker processes. See that issue and [KIP-196 for details](https://cwiki.apache.org/confluence/display/KAFKA/KIP-196%3A+Add+metrics+to+Kafka+Connect+framework).\n\nThis PR adds metrics for each connector using Kafka?s existing `Metrics` framework. This is the first of several changes to add several groups of metrics.  this change starts by adding a very simple `ConnectMetrics` object that is owned by each worker and that makes it easy to define multiple groups of metrics.  called `ConnectMetricGroup` objects. Each metric group maps to a JMX MBean.  and each metric within the group maps to an MBean attribute.\n\nFuture PRs will build upon this simple pattern to add metrics for source and sink tasks.  workers.  and worker rebalances.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewencp@confluent.io>\n\nCloses #3864 from rhauch/kafka-5899\n","date":"2017-09-23 04:17:28","modifiedFileCount":"5","status":"M","submitter":"Randall Hauch"},{"authorTime":"2017-10-06 02:23:11","codes":[{"authorDate":"2017-10-06 02:23:11","commitOrder":4,"curCode":"    public void testOnResume() {\n        connector.version();\n        expectLastCall().andReturn(VERSION);\n\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        connector.start(CONFIG);\n        expectLastCall();\n\n        listener.onResume(CONNECTOR);\n        expectLastCall();\n\n        connector.stop();\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, metrics, listener);\n\n        workerConnector.initialize(connectorConfig);\n        assertInitializedMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        assertPausedMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.STARTED);\n        assertRunningMetric(workerConnector);\n        workerConnector.shutdown();\n        assertStoppedMetric(workerConnector);\n\n        verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":240,"groupId":"11208","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/10/c413d23d6009473a055ba4c0f1f2750730a821.src","preCode":"    public void testOnResume() {\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        connector.start(CONFIG);\n        expectLastCall();\n\n        listener.onResume(CONNECTOR);\n        expectLastCall();\n\n        connector.stop();\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, metrics, listener);\n\n        workerConnector.initialize(connectorConfig);\n        assertInitializedMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        assertPausedMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.STARTED);\n        assertRunningMetric(workerConnector);\n        workerConnector.shutdown();\n        assertStoppedMetric(workerConnector);\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConnectorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"},{"authorDate":"2017-10-06 02:23:11","commitOrder":4,"curCode":"    public void testStartupPaused() {\n        connector.version();\n        expectLastCall().andReturn(VERSION);\n\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        \r\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, metrics, listener);\n\n        workerConnector.initialize(connectorConfig);\n        assertInitializedMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        assertPausedMetric(workerConnector);\n        workerConnector.shutdown();\n        assertStoppedMetric(workerConnector);\n\n        verifyAll();\n    }\n","date":"2017-10-06 02:23:11","endLine":270,"groupId":"17705","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartupPaused","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/10/c413d23d6009473a055ba4c0f1f2750730a821.src","preCode":"    public void testStartupPaused() {\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        \r\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, metrics, listener);\n\n        workerConnector.initialize(connectorConfig);\n        assertInitializedMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        assertPausedMetric(workerConnector);\n        workerConnector.shutdown();\n        assertStoppedMetric(workerConnector);\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConnectorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"}],"commitId":"a47bfbcae050659d32f777ed2f4b26dda5fbdbbd","commitMessage":"@@@KAFKA-5903: Added Connect metrics to the worker and distributed herder (KIP-196)\n\nAdded metrics to the Connect worker and rebalancing metrics to the distributed herder.\n\nThis is built on top of #3987.  and I can rebase this PR once that is merged.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4011 from rhauch/kafka-5903\n","date":"2017-10-06 02:23:11","modifiedFileCount":"13","status":"M","submitter":"Randall Hauch"},{"authorTime":"2020-05-25 09:09:54","codes":[{"authorDate":"2020-05-25 09:09:54","commitOrder":5,"curCode":"    public void testOnResume() {\n        connector = sourceConnector;\n        connector.version();\n        expectLastCall().andReturn(VERSION);\n\n        connector.initialize(EasyMock.notNull(SourceConnectorContext.class));\n        expectLastCall();\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        connector.start(CONFIG);\n        expectLastCall();\n\n        listener.onResume(CONNECTOR);\n        expectLastCall();\n\n        connector.stop();\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, metrics, listener, offsetStorageReader);\n\n        workerConnector.initialize(connectorConfig);\n        assertInitializedSourceMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        assertPausedMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.STARTED);\n        assertRunningMetric(workerConnector);\n        workerConnector.shutdown();\n        assertStoppedMetric(workerConnector);\n\n        verifyAll();\n    }\n","date":"2020-05-25 09:09:54","endLine":256,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testOnResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/08/8900b4c5a22f216328ad97a1c68233c868f633.src","preCode":"    public void testOnResume() {\n        connector.version();\n        expectLastCall().andReturn(VERSION);\n\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        connector.start(CONFIG);\n        expectLastCall();\n\n        listener.onResume(CONNECTOR);\n        expectLastCall();\n\n        connector.stop();\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, metrics, listener);\n\n        workerConnector.initialize(connectorConfig);\n        assertInitializedMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        assertPausedMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.STARTED);\n        assertRunningMetric(workerConnector);\n        workerConnector.shutdown();\n        assertStoppedMetric(workerConnector);\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConnectorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2020-05-25 09:09:54","commitOrder":5,"curCode":"    public void testStartupPaused() {\n        connector = sinkConnector;\n        connector.version();\n        expectLastCall().andReturn(VERSION);\n\n        connector.initialize(EasyMock.notNull(SinkConnectorContext.class));\n        expectLastCall();\n\n        \r\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, metrics, listener, offsetStorageReader);\n\n        workerConnector.initialize(connectorConfig);\n        assertInitializedSinkMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        assertPausedMetric(workerConnector);\n        workerConnector.shutdown();\n        assertStoppedMetric(workerConnector);\n\n        verifyAll();\n    }\n","date":"2020-05-25 09:09:54","endLine":287,"groupId":"0","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testStartupPaused","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/08/8900b4c5a22f216328ad97a1c68233c868f633.src","preCode":"    public void testStartupPaused() {\n        connector.version();\n        expectLastCall().andReturn(VERSION);\n\n        connector.initialize(EasyMock.notNull(ConnectorContext.class));\n        expectLastCall();\n\n        \r\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, metrics, listener);\n\n        workerConnector.initialize(connectorConfig);\n        assertInitializedMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        assertPausedMetric(workerConnector);\n        workerConnector.shutdown();\n        assertStoppedMetric(workerConnector);\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConnectorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"M"}],"commitId":"3818770d7fcd6ccdd373cdcd3aa6952ea08c901c","commitMessage":"@@@KAFKA-4794: Add access to OffsetStorageReader from SourceConnector (#2604)\n\nAdded access to OffsetStorageReader from SourceConnector per KIP-131. \n\nAdded two interfaces SinkConnectorContext/SourceConnectContext that extend ConnectorContext in order to expose an OffsetStorageReader instance.\n\nAdded unit tests for Connector.  SinkConnector and SourceConnector default methods\n\nAuthor: Florian Hussonnois <florian.hussonnois@gmail.com>.  Randall Hauch <rhauch@gmail.com>\nReviewers: Randall Hauch <rhauch@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>","date":"2020-05-25 09:09:54","modifiedFileCount":"7","status":"M","submitter":"Florian Hussonnois"},{"authorTime":"2020-06-11 16:29:23","codes":[{"authorDate":"2020-06-11 16:29:23","commitOrder":6,"curCode":"    public void testOnResume() {\n        connector = sourceConnector;\n        connector.version();\n        expectLastCall().andReturn(VERSION);\n\n        connector.initialize(EasyMock.notNull(SourceConnectorContext.class));\n        expectLastCall();\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        connector.start(CONFIG);\n        expectLastCall();\n\n        listener.onResume(CONNECTOR);\n        expectLastCall();\n\n        connector.stop();\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        ctx.close();\n        expectLastCall();\n\n        Callback<TargetState> onStateChange = createStrictMock(Callback.class);\n        onStateChange.onCompletion(EasyMock.isNull(), EasyMock.eq(TargetState.PAUSED));\n        expectLastCall();\n        onStateChange.onCompletion(EasyMock.isNull(), EasyMock.eq(TargetState.STARTED));\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, connectorConfig, ctx, metrics, listener, offsetStorageReader, classLoader);\n\n        workerConnector.initialize();\n        assertInitializedSourceMetric(workerConnector);\n        workerConnector.doTransitionTo(TargetState.PAUSED, onStateChange);\n        assertPausedMetric(workerConnector);\n        workerConnector.doTransitionTo(TargetState.STARTED, onStateChange);\n        assertRunningMetric(workerConnector);\n        workerConnector.shutdown();\n        workerConnector.doShutdown();\n        assertStoppedMetric(workerConnector);\n\n        verifyAll();\n    }\n","date":"2020-06-11 16:29:23","endLine":297,"groupId":"104905","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testOnResume","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f9/9b4c1067aff3899e347cd59c4acf9f1548ab1a.src","preCode":"    public void testOnResume() {\n        connector = sourceConnector;\n        connector.version();\n        expectLastCall().andReturn(VERSION);\n\n        connector.initialize(EasyMock.notNull(SourceConnectorContext.class));\n        expectLastCall();\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        connector.start(CONFIG);\n        expectLastCall();\n\n        listener.onResume(CONNECTOR);\n        expectLastCall();\n\n        connector.stop();\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, metrics, listener, offsetStorageReader);\n\n        workerConnector.initialize(connectorConfig);\n        assertInitializedSourceMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        assertPausedMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.STARTED);\n        assertRunningMetric(workerConnector);\n        workerConnector.shutdown();\n        assertStoppedMetric(workerConnector);\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConnectorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":250,"status":"M"},{"authorDate":"2020-06-11 16:29:23","commitOrder":6,"curCode":"    public void testStartupPaused() {\n        connector = sinkConnector;\n        connector.version();\n        expectLastCall().andReturn(VERSION);\n\n        connector.initialize(EasyMock.notNull(SinkConnectorContext.class));\n        expectLastCall();\n\n        \r\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        ctx.close();\n        expectLastCall();\n\n        Callback<TargetState> onStateChange = createStrictMock(Callback.class);\n        onStateChange.onCompletion(EasyMock.isNull(), EasyMock.eq(TargetState.PAUSED));\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, connectorConfig, ctx, metrics, listener, offsetStorageReader, classLoader);\n\n        workerConnector.initialize();\n        assertInitializedSinkMetric(workerConnector);\n        workerConnector.doTransitionTo(TargetState.PAUSED, onStateChange);\n        assertPausedMetric(workerConnector);\n        workerConnector.shutdown();\n        workerConnector.doShutdown();\n        assertStoppedMetric(workerConnector);\n\n        verifyAll();\n    }\n","date":"2020-06-11 16:29:23","endLine":336,"groupId":"104905","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testStartupPaused","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f9/9b4c1067aff3899e347cd59c4acf9f1548ab1a.src","preCode":"    public void testStartupPaused() {\n        connector = sinkConnector;\n        connector.version();\n        expectLastCall().andReturn(VERSION);\n\n        connector.initialize(EasyMock.notNull(SinkConnectorContext.class));\n        expectLastCall();\n\n        \r\n\n        listener.onPause(CONNECTOR);\n        expectLastCall();\n\n        listener.onShutdown(CONNECTOR);\n        expectLastCall();\n\n        replayAll();\n\n        WorkerConnector workerConnector = new WorkerConnector(CONNECTOR, connector, ctx, metrics, listener, offsetStorageReader);\n\n        workerConnector.initialize(connectorConfig);\n        assertInitializedSinkMetric(workerConnector);\n        workerConnector.transitionTo(TargetState.PAUSED);\n        assertPausedMetric(workerConnector);\n        workerConnector.shutdown();\n        assertStoppedMetric(workerConnector);\n\n        verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConnectorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"}],"commitId":"7f4fc76e968a6b2cf4a73364c93bfdea03f81af3","commitMessage":"@@@KAFKA-9374: Make connector interactions asynchronous (#8069)\n\nThese changes allow herders to continue to function even when a connector they are running hangs in its start.  stop.  initialize.  validate.  and/or config methods.\n\nThe main idea is to make these connector interactions asynchronous and accept a callback that can be invoked upon the completion (successful or otherwise) of these interactions. The distributed herder handles any follow-up logic by adding a new herder request to its queue in that callback.  which helps preserve some synchronization and ordering guarantees provided by the current tick model.\n\nIf any connector refuses to shut down within a graceful timeout period.  the framework will abandon it and potentially start a new connector in its place (in cases such as connector restart or reconfiguration).\n\nExisting unit tests for the distributed herder and worker have been modified to reflect these changes.  and a new integration test named `BlockingConnectorTest` has been added to ensure that they work in practice.\n\nReviewers: Greg Harris <gregh@confluent.io>.  Nigel Liang <nigel@nigelliang.com>.  Randall Hauch <rhauch@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>","date":"2020-06-11 16:29:23","modifiedFileCount":"18","status":"M","submitter":"Chris Egerton"}]
