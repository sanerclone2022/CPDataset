[{"authorTime":"2020-08-12 11:21:41","codes":[{"authorDate":"2020-08-12 11:21:41","commitOrder":1,"curCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(changelogPartition, 10L))\n                .andReturn(Collections.singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(false, \"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n\n        task.prepareCommit();\n        task.postCommit(true);  \r\n\n        task.prepareCommit();\n        task.postCommit(false); \r\n\n        EasyMock.verify(stateManager, recordCollector);\n    }\n","date":"2020-08-12 11:21:41","endLine":1289,"groupId":"3183","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/4fa234888eda5e4dcdafaea518f24786462f03.src","preCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(changelogPartition, 10L))\n                .andReturn(Collections.singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(false, \"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n\n        task.prepareCommit();\n        task.postCommit(true);  \r\n\n        task.prepareCommit();\n        task.postCommit(false); \r\n\n        EasyMock.verify(stateManager, recordCollector);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1265,"status":"B"},{"authorDate":"2020-08-12 11:21:41","commitOrder":1,"curCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(changelogPartition, 0L))\n                .andReturn(Collections.singletonMap(changelogPartition, 10L))\n                .andReturn(Collections.singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(false, \"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n    }\n","date":"2020-08-12 11:21:41","endLine":1318,"groupId":"3184","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/71/4fa234888eda5e4dcdafaea518f24786462f03.src","preCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(changelogPartition, 0L))\n                .andReturn(Collections.singletonMap(changelogPartition, 10L))\n                .andReturn(Collections.singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(false, \"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1292,"status":"B"}],"commitId":"7915d5e5f826a71c11e1c9183c84702410f7209a","commitMessage":"@@@KAFKA-9450: Decouple flushing state from commiting (#8964)\n\nIn Kafka Streams the source-of-truth of a state store is in its changelog.  therefore when committing a state store we only need to make sure its changelog records are all flushed and committed.  but we do not actually need to make sure that the materialized state have to be flushed and persisted since they can always be restored from changelog when necessary.\n\nOn the other hand.  flushing a state store too frequently may have side effects.  e.g. rocksDB flushing would gets the memtable into an L0 sstable.  leaving many small L0 files to be compacted later.  which introduces larger overhead.\n\nTherefore this PR decouples flushing from committing.  such that we do not always flush the state store upon committing.  but only when sufficient data has been written since last time flushed. The checkpoint file would then also be overwritten only along with flushing the state store indicating its current known snapshot. This is okay since: a) if EOS is not enabled.  then it is fine if the local persisted state is actually ahead of the checkpoint.  b) if EOS is enabled.  then we would never write a checkpoint file until close.\n\nHere's a more detailed change list of this PR:\n\n1. Do not always flush state stores when calling pre-commit; move stateMgr.flush into post-commit to couple together with checkpointing.\n\n2. In post-commit.  we checkpoint when: a) The state store's snapshot has progressed much further compared to the previous checkpoint.  b) When the task is being closed.  in which case we enforce checkpointing.\n\n3. There are some tricky obstacles that I'd have to work around in a bit hacky way: for cache / suppression buffer.  we still need to flush them in pre-commit to make sure all records sent via producers.  while the underlying state store should not be flushed. I've decided to introduce a new API in CachingStateStore to be triggered in pre-commit.\n\nI've also made some minor changes piggy-backed in this PR:\n\n4. Do not delete checkpoint file upon loading it.  and as a result simplify the checkpointNeeded logic.  initializing the snapshotLastFlush to the loaded offsets.\n\n5. In closing.  also follow the commit -> suspend -> close ordering as in revocation / assignment.\n\n6. If enforceCheckpoint == true during RUNNING.  still calls maybeCheckpoint even with EOS since that is the case for suspending / closing.\n\nReviewers: John Roesler <john@confluent.io>.  A. Sophie Blee-Goldman <sophie@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-08-12 11:21:41","modifiedFileCount":"24","status":"B","submitter":"Guozhang Wang"},{"authorTime":"2021-01-07 06:01:02","codes":[{"authorDate":"2021-01-07 06:01:02","commitOrder":2,"curCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(changelogPartition, 10L))\n                .andReturn(Collections.singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n\n        task.prepareCommit();\n        task.postCommit(true);   \r\n\n        task.prepareCommit();\n        task.postCommit(false);   \r\n\n        EasyMock.verify(stateManager, recordCollector);\n    }\n","date":"2021-01-07 06:01:02","endLine":1428,"groupId":"3183","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(changelogPartition, 10L))\n                .andReturn(Collections.singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(false, \"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n\n        task.prepareCommit();\n        task.postCommit(true);   \r\n\n        task.prepareCommit();\n        task.postCommit(false);   \r\n\n        EasyMock.verify(stateManager, recordCollector);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1404,"status":"M"},{"authorDate":"2021-01-07 06:01:02","commitOrder":2,"curCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(changelogPartition, 0L))\n                .andReturn(Collections.singletonMap(changelogPartition, 10L))\n                .andReturn(Collections.singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n    }\n","date":"2021-01-07 06:01:02","endLine":1457,"groupId":"3184","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(changelogPartition, 0L))\n                .andReturn(Collections.singletonMap(changelogPartition, 10L))\n                .andReturn(Collections.singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(false, \"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1431,"status":"M"}],"commitId":"22e8e71156762b40ac93e2cbd42eacba00dbfb0c","commitMessage":"@@@KAFKA-9274: Fix commit-TimeoutException handling for EOS (#9800)\n\nIf EOS is enabled and the TX commit fails with a timeout. \nwe should not process more messages (what is ok for non-EOS)\nbecause we don't really know the status of the TX.\nIf the commit was indeed successful.  we won't have an open TX\ncan calling send() would fail with an fatal error.\n\nInstead.  we should retry the (idempotent) commit of the TX. \nand start a new TX afterwards.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  John Roesler <john@confluent.io>","date":"2021-01-07 06:01:02","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-01-28 11:57:20","codes":[{"authorDate":"2021-01-28 11:57:20","commitOrder":3,"curCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n\n        task.prepareCommit();\n        task.postCommit(true);   \r\n\n        task.prepareCommit();\n        task.postCommit(false);   \r\n\n        EasyMock.verify(stateManager, recordCollector);\n    }\n","date":"2021-01-28 11:57:20","endLine":1352,"groupId":"21599","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/d0bdc3e8b56c31b405cebd384297e58af121c3.src","preCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(changelogPartition, 10L))\n                .andReturn(Collections.singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n\n        task.prepareCommit();\n        task.postCommit(true);   \r\n\n        task.prepareCommit();\n        task.postCommit(false);   \r\n\n        EasyMock.verify(stateManager, recordCollector);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1328,"status":"M"},{"authorDate":"2021-01-28 11:57:20","commitOrder":3,"curCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 0L))\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n    }\n","date":"2021-01-28 11:57:20","endLine":1381,"groupId":"11803","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/d0bdc3e8b56c31b405cebd384297e58af121c3.src","preCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n                .andReturn(Collections.singletonMap(changelogPartition, 0L))\n                .andReturn(Collections.singletonMap(changelogPartition, 10L))\n                .andReturn(Collections.singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1355,"status":"M"}],"commitId":"4d28391480fd8c547a63af119bba67fceb5d2ede","commitMessage":"@@@KAFKA-10867: Improved task idling (#9840)\n\nUse the new ConsumerRecords.metadata() API to implement\nimproved task idling as described in KIP-695\n\nReviewers: Guozhang Wang <guozhang@apache.org>","date":"2021-01-28 11:57:20","modifiedFileCount":"18","status":"M","submitter":"John Roesler"},{"authorTime":"2021-02-06 09:25:50","codes":[{"authorDate":"2021-02-06 09:25:50","commitOrder":4,"curCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n\n        task.prepareCommit();\n        task.postCommit(true);   \r\n\n        task.prepareCommit();\n        task.postCommit(false);   \r\n\n        EasyMock.verify(stateManager, recordCollector);\n    }\n","date":"2021-02-06 09:25:50","endLine":1460,"groupId":"21599","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/69b87b850e0381e2b0cf59590175eaa06ff5d8.src","preCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n\n        task.prepareCommit();\n        task.postCommit(true);   \r\n\n        task.prepareCommit();\n        task.postCommit(false);   \r\n\n        EasyMock.verify(stateManager, recordCollector);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1436,"status":"M"},{"authorDate":"2021-02-06 09:25:50","commitOrder":4,"curCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 0L))\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n    }\n","date":"2021-02-06 09:25:50","endLine":1489,"groupId":"11803","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/69b87b850e0381e2b0cf59590175eaa06ff5d8.src","preCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 0L))\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1463,"status":"M"}],"commitId":"0bc394cc1d19f1e41dd6646e9ac0e09b91fb1398","commitMessage":"@@@KAFKA-9274: handle TimeoutException on task reset (#10000)\n\nPart of KIP-572: We move the offset reset for the internal \"main consumer\" when we revive a corrupted task.  from the \"task cleanup\" code path.  to the \"task init\" code path. For this case.  we have already logic in place to handle TimeoutException that might be thrown by consumer#committed() method call.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>\n","date":"2021-02-06 09:25:50","modifiedFileCount":"10","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-02-07 05:04:30","codes":[{"authorDate":"2021-02-07 05:04:30","commitOrder":5,"curCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n\n        task.prepareCommit();\n        task.postCommit(true);   \r\n\n        task.prepareCommit();\n        task.postCommit(false);   \r\n\n        EasyMock.verify(stateManager, recordCollector);\n    }\n","date":"2021-02-07 05:04:30","endLine":1396,"groupId":"21599","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ea/3fbdd91e1cf3f6ab75badba24791183a05fb38.src","preCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n\n        task.prepareCommit();\n        task.postCommit(true);   \r\n\n        task.prepareCommit();\n        task.postCommit(false);   \r\n\n        EasyMock.verify(stateManager, recordCollector);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1372,"status":"M"},{"authorDate":"2021-02-07 05:04:30","commitOrder":5,"curCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 0L))\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n    }\n","date":"2021-02-07 05:04:30","endLine":1425,"groupId":"11803","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ea/3fbdd91e1cf3f6ab75badba24791183a05fb38.src","preCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 0L))\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1399,"status":"M"}],"commitId":"d2cb2dc45d536ae124e3da25d6d5a4e932a23a27","commitMessage":"@@@KAFKA-9751: Forward CreateTopicsRequest for FindCoordinator/Metadata when topic creation is needed (#9579)\n\nConsolidate auto topic creation logic to either forward a CreateTopicRequest or handling the creation directly as AutoTopicCreationManager.  when handling FindCoordinator/Metadata request.\n\nCo-authored-by: Jason Gustafson <jason@confluent.io>\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2021-02-07 05:04:30","modifiedFileCount":"15","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-03-06 03:27:25","codes":[{"authorDate":"2021-03-06 03:27:25","commitOrder":6,"curCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n\n        task.prepareCommit();\n        task.postCommit(true);   \r\n\n        task.prepareCommit();\n        task.postCommit(false);   \r\n\n        EasyMock.verify(stateManager, recordCollector);\n        assertThat(\"Map was not empty\", task.highWaterMark().containsValue(offset));\n    }\n","date":"2021-03-06 03:27:25","endLine":1390,"groupId":"21599","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/b172aaaa959379c06f9d09cb632d93d830e5b3.src","preCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n\n        task.prepareCommit();\n        task.postCommit(true);   \r\n\n        task.prepareCommit();\n        task.postCommit(false);   \r\n\n        EasyMock.verify(stateManager, recordCollector);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1365,"status":"M"},{"authorDate":"2021-03-06 03:27:25","commitOrder":6,"curCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 0L))\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n        assertThat(\"Map was not empty\", task.highWaterMark().containsValue(offset));\n    }\n","date":"2021-03-06 03:27:25","endLine":1420,"groupId":"11803","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/b172aaaa959379c06f9d09cb632d93d830e5b3.src","preCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 0L))\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1393,"status":"M"}],"commitId":"207bb0826be1be91c12ceb30f525f73aa9519463","commitMessage":"@@@KAFKA-12347: updating TaskMetadata (#10211)\n\nadded committed offset.  high watermark and idle duration to the taskMetadata.\n\nReviewers: Boyang Chen <boyang@confluent.io>","date":"2021-03-06 03:27:25","modifiedFileCount":"10","status":"M","submitter":"Walker Carlson"},{"authorTime":"2021-03-23 04:39:29","codes":[{"authorDate":"2021-03-23 04:39:29","commitOrder":7,"curCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n\n        task.prepareCommit();\n        task.postCommit(true);   \r\n\n        task.prepareCommit();\n        task.postCommit(false);   \r\n\n        EasyMock.verify(stateManager, recordCollector);\n        assertThat(\"Map was not empty\", task.highWaterMark().containsValue(offset));\n    }\n","date":"2021-03-23 04:39:29","endLine":1454,"groupId":"21599","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/78cbe1c94d7ade29cd4d7f012769ba68f32ec0.src","preCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n\n        task.prepareCommit();\n        task.postCommit(true);   \r\n\n        task.prepareCommit();\n        task.postCommit(false);   \r\n\n        EasyMock.verify(stateManager, recordCollector);\n        assertThat(\"Map was not empty\", task.highWaterMark().containsValue(offset));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1429,"status":"M"},{"authorDate":"2021-03-23 04:39:29","commitOrder":7,"curCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 0L))\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n        assertThat(\"Map was not empty\", task.highWaterMark().containsValue(offset));\n    }\n","date":"2021-03-23 04:39:29","endLine":1484,"groupId":"11803","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4f/78cbe1c94d7ade29cd4d7f012769ba68f32ec0.src","preCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 0L))\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration();\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n        assertThat(\"Map was not empty\", task.highWaterMark().containsValue(offset));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1457,"status":"M"}],"commitId":"80f373d34f7716a54fa9ec1e37a27c65cbbae0f2","commitMessage":"@@@(Cherry-pick) KAFKA-9274: handle TimeoutException on task reset (#10000) (#10372)\n\nThis PR was removed by accident in trunk and 2.8.  bringing it back.\n\nCo-authored-by: Matthias J. Sax <matthias@confluent.io>\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-03-23 04:39:29","modifiedFileCount":"10","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-05-15 03:17:31","codes":[{"authorDate":"2021-05-15 03:17:31","commitOrder":8,"curCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n\n        task.prepareCommit();\n        task.postCommit(true);   \r\n\n        task.prepareCommit();\n        task.postCommit(false);   \r\n\n        EasyMock.verify(stateManager, recordCollector);\n        assertThat(\"Map was empty\", task.highWaterMark().size() == 2);\n    }\n","date":"2021-05-15 03:17:31","endLine":1477,"groupId":"102060","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/63c4f0d91139679014334fdce168eb605511d5.src","preCode":"    public void shouldNotCheckpointOffsetsAgainOnCommitIfSnapshotNotChangedMuch() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().once();\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 20L));\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n\n        task.prepareCommit();\n        task.postCommit(true);   \r\n\n        task.prepareCommit();\n        task.postCommit(false);   \r\n\n        EasyMock.verify(stateManager, recordCollector);\n        assertThat(\"Map was not empty\", task.highWaterMark().containsValue(offset));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1452,"status":"M"},{"authorDate":"2021-05-15 03:17:31","commitOrder":8,"curCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 0L))\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n        assertThat(\"Map was empty\", task.highWaterMark().size() == 2);\n    }\n","date":"2021-05-15 03:17:31","endLine":1507,"groupId":"102060","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/63c4f0d91139679014334fdce168eb605511d5.src","preCode":"    public void shouldCheckpointOffsetsOnCommitIfSnapshotMuchChanged() {\n        final Long offset = 543L;\n\n        EasyMock.expect(recordCollector.offsets()).andReturn(singletonMap(changelogPartition, offset)).anyTimes();\n        stateManager.checkpoint();\n        EasyMock.expectLastCall().times(2);\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(singleton(changelogPartition));\n        EasyMock.expect(stateManager.changelogOffsets())\n            .andReturn(singletonMap(changelogPartition, 0L))\n            .andReturn(singletonMap(changelogPartition, 10L))\n            .andReturn(singletonMap(changelogPartition, 12000L));\n        stateManager.registerStore(stateStore, stateStore.stateRestoreCallback);\n        EasyMock.expectLastCall();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createStatefulTask(createConfig(\"100\"), true);\n\n        task.initializeIfNeeded();\n        task.completeRestoration(noOpResetter -> { });\n        task.prepareCommit();\n        task.postCommit(true);\n\n        task.prepareCommit();\n        task.postCommit(false);\n\n        EasyMock.verify(recordCollector);\n        assertThat(\"Map was not empty\", task.highWaterMark().containsValue(offset));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1480,"status":"M"}],"commitId":"f2785f3c4f83bbc3caef48993018896bf73224df","commitMessage":"@@@KAFKA-12754: Improve endOffsets for TaskMetadata (#10634)\n\nImprove endOffsets for TaskMetadata by updating immediately after polling a new batch\n\nReviewers: Anna Sophie Blee-Goldman <ableegoldman@apache.org>","date":"2021-05-15 03:17:31","modifiedFileCount":"8","status":"M","submitter":"Walker Carlson"}]
