[{"authorTime":"2016-02-05 10:00:45","codes":[{"authorDate":"2016-02-05 10:00:45","commitOrder":1,"curCode":"    public void standardStartup() {\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(ConnectorTaskId.class)\n                .withArgs(new ConnectorTaskId(\"foo\", 0))\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        workerTask.execute();\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","date":"2016-02-05 10:00:45","endLine":61,"groupId":"17458","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"standardStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f5/213a623a7e0323e150b9c447a1d6ce8e580149.src","preCode":"    public void standardStartup() {\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(ConnectorTaskId.class)\n                .withArgs(new ConnectorTaskId(\"foo\", 0))\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        workerTask.execute();\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"B"},{"authorDate":"2016-02-05 10:00:45","commitOrder":1,"curCode":"    public void stopBeforeStarting() {\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(ConnectorTaskId.class)\n                .withArgs(new ConnectorTaskId(\"foo\", 0))\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","date":"2016-02-05 10:00:45","endLine":89,"groupId":"17458","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"stopBeforeStarting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f5/213a623a7e0323e150b9c447a1d6ce8e580149.src","preCode":"    public void stopBeforeStarting() {\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(ConnectorTaskId.class)\n                .withArgs(new ConnectorTaskId(\"foo\", 0))\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"}],"commitId":"dc662776cde8e980a3f978041adaf961edf0fe7d","commitMessage":"@@@KAFKA-3211: Handle WorkerTask stop before start correctly\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #874 from hachikuji/KAFKA-3211\n","date":"2016-02-05 10:00:45","modifiedFileCount":"1","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2016-02-24 14:47:31","codes":[{"authorDate":"2016-02-24 14:47:31","commitOrder":2,"curCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(ConnectorTaskId.class, TaskStatus.Listener.class)\n                .withArgs(taskId, statusListener)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","date":"2016-02-24 14:47:31","endLine":74,"groupId":"0","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"standardStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/e3fe2809369486ebc958e9cda485a58c54d79c.src","preCode":"    public void standardStartup() {\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(ConnectorTaskId.class)\n                .withArgs(new ConnectorTaskId(\"foo\", 0))\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        workerTask.execute();\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"M"},{"authorDate":"2016-02-24 14:47:31","commitOrder":2,"curCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(ConnectorTaskId.class, TaskStatus.Listener.class)\n                .withArgs(taskId, statusListener)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","date":"2016-02-24 14:47:31","endLine":106,"groupId":"17458","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"stopBeforeStarting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/e3fe2809369486ebc958e9cda485a58c54d79c.src","preCode":"    public void stopBeforeStarting() {\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(ConnectorTaskId.class)\n                .withArgs(new ConnectorTaskId(\"foo\", 0))\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"}],"commitId":"f7d019ed408fa988129be9af3689bfa4878bc627","commitMessage":"@@@KAFKA-3093: Add Connect status tracking API\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #920 from hachikuji/KAFKA-3093\n","date":"2016-02-24 14:47:31","modifiedFileCount":"28","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-04-21 05:09:59","codes":[{"authorDate":"2016-04-21 05:09:59","commitOrder":3,"curCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(ConnectorTaskId.class, TaskStatus.Listener.class, TargetState.class)\n                .withArgs(taskId, statusListener, TargetState.STARTED)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","date":"2016-04-21 05:09:59","endLine":79,"groupId":"6141","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"standardStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/803db2bca4cb834e73ac74e1e04bee439415c0.src","preCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(ConnectorTaskId.class, TaskStatus.Listener.class)\n                .withArgs(taskId, statusListener)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2016-04-21 05:09:59","commitOrder":3,"curCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(ConnectorTaskId.class, TaskStatus.Listener.class, TargetState.class)\n                .withArgs(taskId, statusListener, TargetState.STARTED)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","date":"2016-04-21 05:09:59","endLine":111,"groupId":"6143","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"stopBeforeStarting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/36/803db2bca4cb834e73ac74e1e04bee439415c0.src","preCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(ConnectorTaskId.class, TaskStatus.Listener.class)\n                .withArgs(taskId, statusListener)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(EMPTY_TASK_PROPS);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"c9485b78a6e43747daf1314ae9532839fb7bc810","commitMessage":"@@@KAFKA-2370: kafka connect pause/resume API\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Liquan Pei <liquanpei@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1087 from hachikuji/KAFKA-2370\n","date":"2016-04-21 05:09:59","modifiedFileCount":"29","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2017-05-19 01:39:15","codes":[{"authorDate":"2017-05-19 01:39:15","commitOrder":4,"curCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        ClassLoader loader = EasyMock.createMock(ClassLoader.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","date":"2017-05-19 01:39:15","endLine":85,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"standardStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/87/1c8878a0373079ae8f248ac4ee1c9accfedff6.src","preCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(ConnectorTaskId.class, TaskStatus.Listener.class, TargetState.class)\n                .withArgs(taskId, statusListener, TargetState.STARTED)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2017-05-19 01:39:15","commitOrder":4,"curCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        ClassLoader loader = EasyMock.createMock(ClassLoader.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","date":"2017-05-19 01:39:15","endLine":123,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"stopBeforeStarting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/87/1c8878a0373079ae8f248ac4ee1c9accfedff6.src","preCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(ConnectorTaskId.class, TaskStatus.Listener.class, TargetState.class)\n                .withArgs(taskId, statusListener, TargetState.STARTED)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"}],"commitId":"45f2261763eac5caaebf860daab32ef5337c9293","commitMessage":"@@@KAFKA-3487: Support classloading isolation in Connect (KIP-146)\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3028 from kkonstantine/KAFKA-3487-Support-classloading-isolation-in-Connect\n","date":"2017-05-19 01:39:15","modifiedFileCount":"26","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2017-09-27 13:23:37","codes":[{"authorDate":"2017-09-27 13:23:37","commitOrder":5,"curCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        ClassLoader loader = EasyMock.createMock(ClassLoader.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","date":"2017-09-27 13:23:37","endLine":107,"groupId":"1923","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"standardStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/5c7fabea840665fd6b1a18f8be2c3ec48da13c.src","preCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        ClassLoader loader = EasyMock.createMock(ClassLoader.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2017-09-27 13:23:37","commitOrder":5,"curCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        ClassLoader loader = EasyMock.createMock(ClassLoader.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","date":"2017-09-27 13:23:37","endLine":149,"groupId":"1924","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"stopBeforeStarting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/5c7fabea840665fd6b1a18f8be2c3ec48da13c.src","preCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        ClassLoader loader = EasyMock.createMock(ClassLoader.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"73cc416664dbc8e1442f70cb3c4cd8f4d365ea50","commitMessage":"@@@KAFKA-5900: Add task metrics common to both sink and source tasks\n\nAdded metrics that are common to both sink and source tasks.\n\nMarked as \"**WIP**\" since this PR is built upon #3864.  and will need to be rebased once that has been merged into `trunk`. However.  I would still appreciate initial reviews since this PR is largely additive.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #3911 from rhauch/kafka-5900\n","date":"2017-09-27 13:23:37","modifiedFileCount":"16","status":"M","submitter":"Randall Hauch"},{"authorTime":"2018-02-01 02:40:24","codes":[{"authorDate":"2018-02-01 02:40:24","commitOrder":6,"curCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","date":"2018-02-01 02:40:24","endLine":114,"groupId":"1923","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"standardStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/f2836f42b5a04e11dd0b6f00d84a48b3394caa.src","preCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        ClassLoader loader = EasyMock.createMock(ClassLoader.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2018-02-01 02:40:24","commitOrder":6,"curCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","date":"2018-02-01 02:40:24","endLine":153,"groupId":"1924","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"stopBeforeStarting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/78/f2836f42b5a04e11dd0b6f00d84a48b3394caa.src","preCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        TaskStatus.Listener statusListener = EasyMock.createMock(TaskStatus.Listener.class);\n        ClassLoader loader = EasyMock.createMock(ClassLoader.class);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"4c48942f9d9e1428e21f934746cb7ce22b3df746","commitMessage":"@@@KAFKA-5142: Add Connect support for message headers (KIP-145)\n\n**[KIP-145](https://cwiki.apache.org/confluence/display/KAFKA/KIP-145+-+Expose+Record+Headers+in+Kafka+Connect) has been accepted.  and this PR implements KIP-145 except without the SMTs.**\n\nChanged the Connect API and runtime to support message headers as described in [KIP-145](https://cwiki.apache.org/confluence/display/KAFKA/KIP-145+-+Expose+Record+Headers+in+Kafka+Connect).\n\nThe new `Header` interface defines an immutable representation of a Kafka header (key-value pair) with support for the Connect value types and schemas. This interface provides methods for easily converting between many of the built-in primitive.  structured.  and logical data types.\n\nThe new `Headers` interface defines an ordered collection of headers and is used to track all headers associated with a `ConnectRecord` (and thus `SourceRecord` and `SinkRecord`). This does allow multiple headers with the same key. The `Headers` contains methods for adding.  removing.  finding.  and modifying headers. Convenience methods allow connectors and transforms to easily use and modify the headers for a record.\n\nA new `HeaderConverter` interface is also defined to enable the Connect runtime framework to be able to serialize and deserialize headers between the in-memory representation and Kafka?s byte[] representation. A new `SimpleHeaderConverter` implementation has been added.  and this serializes to strings and deserializes by inferring the schemas (`Struct` header values are serialized without the schemas.  so they can only be deserialized as `Map` instances without a schema.) The `StringConverter`.  `JsonConverter`.  and `ByteArrayConverter` have all been extended to also be `HeaderConverter` implementations. Each connector can be configured with a different header converter.  although by default the `SimpleHeaderConverter` is used to serialize header values as strings without schemas.\n\nUnit and integration tests are added for `ConnectHeader` and `ConnectHeaders`.  the two implementation classes for headers. Additional test methods are added for the methods added to the `Converter` implementations. Finally.  the `ConnectRecord` object is already used heavily.  so only limited tests need to be added while quite a few of the existing tests already cover the changes.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\n\nReviewers: Arjun Satish <arjun@confluent.io>.  Ted Yu <yuzhihong@gmail.com>.  Magesh Nandakumar <magesh.n.kumar@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4319 from rhauch/kafka-5142-b\n","date":"2018-02-01 02:40:24","modifiedFileCount":"21","status":"M","submitter":"Randall Hauch"},{"authorTime":"2018-05-31 02:39:45","codes":[{"authorDate":"2018-05-31 02:39:45","commitOrder":7,"curCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class,\n                        RetryWithToleranceOperator.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics, retryWithToleranceOperator)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","date":"2018-05-31 02:39:45","endLine":118,"groupId":"13013","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"standardStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/0ba8a9ddfc7ea7c3bfbfa7fa75ea91330213de.src","preCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2018-05-31 02:39:45","commitOrder":7,"curCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class,\n                        RetryWithToleranceOperator.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics, retryWithToleranceOperator)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","date":"2018-05-31 02:39:45","endLine":158,"groupId":"13014","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"stopBeforeStarting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/0ba8a9ddfc7ea7c3bfbfa7fa75ea91330213de.src","preCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"f8dfbb067caa797c19494e12da6b4c6786980f73","commitMessage":"@@@KAFKA-6738: Implement error handling for source and sink tasks (KIP-298)\n\nThis PR implements the features described in this KIP: https://cwiki.apache.org/confluence/display/KAFKA/KIP-298%3A+Error+Handling+in+Connect\n\nThis PR changes the Connect framework to allow it to automatically deal with errors encountered while processing records in a Connector. The following behavior changes are introduced here:\n\n**Retry on Failure**: Retry the failed operation a configurable number of times.  with backoff between each retry.\n**Task Tolerance Limits**: Tolerate a configurable number of failures in a task.\n\nWe also add the following ways to report errors.  along with sufficient context to simplify the debugging process:\n\n**Log Error Context**: The error information along with processing context is logged along with standard application logs.\n**Dead Letter Queue**: Produce the original message into a Kafka topic (applicable only to sink connectors).\n\nNew **metrics** which will monitor the number of failures.  and the behavior of the response handler are added.\n\nThe changes proposed here **are backward compatible**. The current behavior in Connect is to kill the task on the first error in any stage. This will remain the default behavior if the connector does not override any of the new configurations which are provided as part of this feature.\n\nTesting: added multiple unit tests to test the retry and tolerance logic.\n\nAuthor: Arjun Satish <arjun@confluent.io>\nAuthor: Ewen Cheslack-Postava <me@ewencp.org>\n\nReviewers: Magesh Nandakumar <magesh.n.kumar@gmail.com>.  Randall Hauch <rhauch@gmail.com>.  Konstantine Karantasis <konstantine@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #5065 from wicknicks/KAFKA-6378\n","date":"2018-05-31 02:39:45","modifiedFileCount":"12","status":"M","submitter":"Arjun Satish"},{"authorTime":"2020-01-30 13:54:21","codes":[{"authorDate":"2020-01-30 13:54:21","commitOrder":8,"curCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class,\n                        RetryWithToleranceOperator.class,\n                        Time.class,\n                        StatusBackingStore.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics,\n                        retryWithToleranceOperator, Time.SYSTEM, statusBackingStore)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","date":"2020-01-30 13:54:21","endLine":126,"groupId":"8300","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"standardStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/c45d5ace06f66837d393777aa487519db35d01.src","preCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class,\n                        RetryWithToleranceOperator.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics, retryWithToleranceOperator)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2020-01-30 13:54:21","commitOrder":8,"curCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class,\n                        RetryWithToleranceOperator.class,\n                        Time.class,\n                        StatusBackingStore.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics,\n                        retryWithToleranceOperator, Time.SYSTEM, statusBackingStore)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","date":"2020-01-30 13:54:21","endLine":169,"groupId":"8304","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"stopBeforeStarting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/44/c45d5ace06f66837d393777aa487519db35d01.src","preCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class,\n                        RetryWithToleranceOperator.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics, retryWithToleranceOperator)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"7746301c2643e0037bff3bcb84c41d512937e4c9","commitMessage":"@@@KAFKA-9422: Track the set of topics a connector is using (KIP-558) (#8017)\n\nThis feature corresponds to KIP-558 and extends how the internal status topic (set via `status.storage.topic` distributed worker config) is used to include information that allows Kafka Connect to keep track which topics a connector is using.\n\nThe set of topics a connector is actively using.  is exposed via a new endpoint that is added to the REST API of Connect workers.\n* A `GET /connectors/{name}/topics` request will return the set of topics that have been recorded as active since a connector started or since the set of topics was reset for this connector.\n\nAn additional endpoints allows users to reset the set of active topics for a connector via the second endpoint that this feature is adding:\n* A `PUT /connectors/{name}/topics/reset` request clears the set of active topics. An operator may enable or disable this feature by setting `topic.tracking.enable` (true by default).\n\nThe `topic.tracking.enable` worker config property (true by default) allows an operator to enable/disable the entire feature. Or if the feature is enabled.  the `topic.tracking.allow.reset` worker config property (true by default) allows an operator to control whether reset requests submitted to the Connect REST API are allowed.\n\nAuthor: Konstantine Karantasis <konstantine@confluent.io>\nReviewer: Randall Hauch <rhauch@gmail.com>","date":"2020-01-30 13:54:21","modifiedFileCount":"17","status":"M","submitter":"Konstantine Karantasis"},{"authorTime":"2020-06-11 11:03:25","codes":[{"authorDate":"2020-06-11 11:03:25","commitOrder":9,"curCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class,\n                        RetryWithToleranceOperator.class,\n                        Time.class,\n                        StatusBackingStore.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics,\n                        retryWithToleranceOperator, Time.SYSTEM, statusBackingStore)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","date":"2020-06-11 11:03:25","endLine":123,"groupId":"8300","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"standardStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/6a88c0a68f01480b1facede4632a71e40d514b.src","preCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class,\n                        RetryWithToleranceOperator.class,\n                        Time.class,\n                        StatusBackingStore.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics,\n                        retryWithToleranceOperator, Time.SYSTEM, statusBackingStore)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2020-06-11 11:03:25","commitOrder":9,"curCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class,\n                        RetryWithToleranceOperator.class,\n                        Time.class,\n                        StatusBackingStore.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics,\n                        retryWithToleranceOperator, Time.SYSTEM, statusBackingStore)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","date":"2020-06-11 11:03:25","endLine":163,"groupId":"8304","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"stopBeforeStarting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/6a88c0a68f01480b1facede4632a71e40d514b.src","preCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class,\n                        RetryWithToleranceOperator.class,\n                        Time.class,\n                        StatusBackingStore.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics,\n                        retryWithToleranceOperator, Time.SYSTEM, statusBackingStore)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        workerTask.releaseResources();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"775f0d484b6fccc3d985a9d53d86d7a3710c0b22","commitMessage":"@@@KAFKA-9066: Retain metrics for failed tasks (#8502)\n\nAuthor: Chris Egerton <chrise@confluent.io>\nReviewers: Nigel Liang <nigel@nigelliang.com>.  Randall Hauch <rhauch@gmail.com>","date":"2020-06-11 11:03:25","modifiedFileCount":"7","status":"M","submitter":"Chris Egerton"},{"authorTime":"2020-06-11 11:03:25","codes":[{"authorDate":"2021-07-21 06:39:26","commitOrder":10,"curCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class,\n                        RetryWithToleranceOperator.class,\n                        Time.class,\n                        StatusBackingStore.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics,\n                        retryWithToleranceOperator, Time.SYSTEM, statusBackingStore)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"initializeAndStart\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.initializeAndStart();\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","date":"2021-07-21 06:39:26","endLine":126,"groupId":"104681","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"standardStartup","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/89/0c0f7399c5a16d3b14bc029e87af2f75f1bb2d.src","preCode":"    public void standardStartup() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class,\n                        RetryWithToleranceOperator.class,\n                        Time.class,\n                        StatusBackingStore.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics,\n                        retryWithToleranceOperator, Time.SYSTEM, statusBackingStore)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        expectLastCall();\n\n        workerTask.execute();\n        expectLastCall();\n\n        statusListener.onStartup(taskId);\n        expectLastCall();\n\n        workerTask.close();\n        expectLastCall();\n\n        statusListener.onShutdown(taskId);\n        expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.run();\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2020-06-11 11:03:25","commitOrder":10,"curCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class,\n                        RetryWithToleranceOperator.class,\n                        Time.class,\n                        StatusBackingStore.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics,\n                        retryWithToleranceOperator, Time.SYSTEM, statusBackingStore)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","date":"2020-06-11 11:03:25","endLine":163,"groupId":"104681","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"stopBeforeStarting","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/6a88c0a68f01480b1facede4632a71e40d514b.src","preCode":"    public void stopBeforeStarting() {\n        ConnectorTaskId taskId = new ConnectorTaskId(\"foo\", 0);\n\n        WorkerTask workerTask = partialMockBuilder(WorkerTask.class)\n                .withConstructor(\n                        ConnectorTaskId.class,\n                        TaskStatus.Listener.class,\n                        TargetState.class,\n                        ClassLoader.class,\n                        ConnectMetrics.class,\n                        RetryWithToleranceOperator.class,\n                        Time.class,\n                        StatusBackingStore.class\n                )\n                .withArgs(taskId, statusListener, TargetState.STARTED, loader, metrics,\n                        retryWithToleranceOperator, Time.SYSTEM, statusBackingStore)\n                .addMockedMethod(\"initialize\")\n                .addMockedMethod(\"execute\")\n                .addMockedMethod(\"close\")\n                .createStrictMock();\n\n        workerTask.initialize(TASK_CONFIG);\n        EasyMock.expectLastCall();\n\n        workerTask.close();\n        EasyMock.expectLastCall();\n\n        replay(workerTask);\n\n        workerTask.initialize(TASK_CONFIG);\n        workerTask.stop();\n        workerTask.awaitStop(1000L);\n\n        \r\n        workerTask.run();\n\n        verify(workerTask);\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"N"}],"commitId":"0314801a8e67a96f8cdea85bf55cb5bed808fc34","commitMessage":"@@@KAFKA-9887 fix failed task or connector count on startup failure (#8844)\n\nMoved the responsibility for recording task and connector startup and failure metrics from the invocation code\ninto the status listener. The reason behind this is that the WorkerTasks (and subclasses) were either not propagating exceptions upwards.  or were unable to do so easily because they were running on completely different threads.\n\nAlso split out WorkerMetricsGroup from being an inner class into being a standard class. This was to make sure\nthe Data Abstraction Count checkStyle rule was not violated.\n\nAuthor: Michael Carter <michael.carter@instaclustr.com>\nReviewers: Chris Egerton <chrise@confluent.io>.  Randall Hauch <rhauch@gmail.com>","date":"2021-07-21 06:39:26","modifiedFileCount":"8","status":"M","submitter":"Michael Carter"}]
