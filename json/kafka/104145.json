[{"authorTime":"2017-09-21 12:06:15","codes":[{"authorDate":"2017-05-18 13:51:02","commitOrder":9,"curCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        Map<String, ApiError> topicErrors = new HashMap<>();\n        for (String topic : topics.keySet()) {\n            topicErrors.put(topic, ApiError.fromThrowable(e));\n        }\n\n        short versionId = version();\n        switch (versionId) {\n            case 0:\n            case 1:\n                return new CreateTopicsResponse(topicErrors);\n            case 2:\n                return new CreateTopicsResponse(throttleTimeMs, topicErrors);\n            default:\n                throw new IllegalArgumentException(String.format(\"Version %d is not valid. Valid versions for %s are 0 to %d\",\n                    versionId, this.getClass().getSimpleName(), ApiKeys.CREATE_TOPICS.latestVersion()));\n        }\n    }\n","date":"2017-05-18 13:51:02","endLine":228,"groupId":"15519","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getErrorResponse","params":"(intthrottleTimeMs@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/f4c858d239be208d761b445f1a9f3fec1e95bc.src","preCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        Map<String, ApiError> topicErrors = new HashMap<>();\n        for (String topic : topics.keySet()) {\n            topicErrors.put(topic, ApiError.fromThrowable(e));\n        }\n\n        short versionId = version();\n        switch (versionId) {\n            case 0:\n            case 1:\n                return new CreateTopicsResponse(topicErrors);\n            case 2:\n                return new CreateTopicsResponse(throttleTimeMs, topicErrors);\n            default:\n                throw new IllegalArgumentException(String.format(\"Version %d is not valid. Valid versions for %s are 0 to %d\",\n                    versionId, this.getClass().getSimpleName(), ApiKeys.CREATE_TOPICS.latestVersion()));\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/common/requests/CreateTopicsRequest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"NB"},{"authorDate":"2017-09-21 12:06:15","commitOrder":9,"curCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        Map<String, ApiError> topicErrors = new HashMap<>();\n        for (String topic : newPartitions.keySet()) {\n            topicErrors.put(topic, ApiError.fromThrowable(e));\n        }\n\n        short versionId = version();\n        switch (versionId) {\n            case 0:\n                return new CreatePartitionsResponse(throttleTimeMs, topicErrors);\n            default:\n                throw new IllegalArgumentException(String.format(\"Version %d is not valid. Valid versions for %s are 0 to %d\",\n                        versionId, this.getClass().getSimpleName(), ApiKeys.CREATE_PARTITIONS.latestVersion()));\n        }\n    }\n","date":"2017-09-21 12:06:36","endLine":208,"groupId":"8425","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getErrorResponse","params":"(intthrottleTimeMs@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/81/d26a0031e7286e94ad4b0006da3abe26a17ab1.src","preCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        Map<String, ApiError> topicErrors = new HashMap<>();\n        for (String topic : newPartitions.keySet()) {\n            topicErrors.put(topic, ApiError.fromThrowable(e));\n        }\n\n        short versionId = version();\n        switch (versionId) {\n            case 0:\n                return new CreatePartitionsResponse(throttleTimeMs, topicErrors);\n            default:\n                throw new IllegalArgumentException(String.format(\"Version %d is not valid. Valid versions for %s are 0 to %d\",\n                        versionId, this.getClass().getSimpleName(), ApiKeys.CREATE_PARTITIONS.latestVersion()));\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/common/requests/CreatePartitionsRequest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"B"}],"commitId":"5f6393f9b17cce17ded7a00e439599dfa77deb2d","commitMessage":"@@@KAFKA-5856; Add AdminClient.createPartitions() (KIP-195)\n\nThe contribution is my original work and I license the work to the project under the project's open source license.\n\nThis patch adds AdminClient.createPartitions() and the network protocol is\nuses. The broker-side algorithm is as follows:\n\n1. KafkaApis makes some initial checks on the request.  then delegates to the\n   new AdminManager.createPartitions() method.\n2. AdminManager.createPartitions() performs some validation then delegates to\n   AdminUtils.addPartitions().\n\nAside: I felt it was safer to add the extra validation in\nAdminManager.createPartitions() than in AdminUtils.addPartitions() since the\nlatter is used on other code paths which might fail differently with the\nintroduction of extra checks.\n\n3. AdminUtils.addPartitions() does its own checks and adds the partitions.\n4. AdminManager then uses the existing topic purgatory to wait for the\n   PartitionInfo available from the metadata cache to become consistent with\n   the new total number of partitions.\n\nThe messages of exceptions thrown in AdminUtils affecting this new API have\nbeen made consistent with initial capital letter and terminating period.\nA few have been reworded for clarity.\n\nAuthor: Tom Bentley <tbentley@redhat.com>\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>.  Ismael Juma <ismael@juma.me.uk>\n\nCloses #3870 from tombentley/KAFKA-5856-AdminClient.createPartitions\n","date":"2017-09-21 12:06:36","modifiedFileCount":"8","status":"M","submitter":"Tom Bentley"},{"authorTime":"2018-04-12 08:03:20","codes":[{"authorDate":"2018-04-12 08:03:20","commitOrder":10,"curCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        Map<String, ApiError> topicErrors = new HashMap<>();\n        for (String topic : topics.keySet()) {\n            topicErrors.put(topic, ApiError.fromThrowable(e));\n        }\n\n        short versionId = version();\n        switch (versionId) {\n            case 0:\n            case 1:\n                return new CreateTopicsResponse(topicErrors);\n            case 2:\n            case 3:\n                return new CreateTopicsResponse(throttleTimeMs, topicErrors);\n            default:\n                throw new IllegalArgumentException(String.format(\"Version %d is not valid. Valid versions for %s are 0 to %d\",\n                    versionId, this.getClass().getSimpleName(), ApiKeys.CREATE_TOPICS.latestVersion()));\n        }\n    }\n","date":"2018-05-31 01:10:33","endLine":285,"groupId":"7347","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getErrorResponse","params":"(intthrottleTimeMs@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/aa/346f5a260ccf48ce03cd752cf872d50b997ef7.src","preCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        Map<String, ApiError> topicErrors = new HashMap<>();\n        for (String topic : topics.keySet()) {\n            topicErrors.put(topic, ApiError.fromThrowable(e));\n        }\n\n        short versionId = version();\n        switch (versionId) {\n            case 0:\n            case 1:\n                return new CreateTopicsResponse(topicErrors);\n            case 2:\n                return new CreateTopicsResponse(throttleTimeMs, topicErrors);\n            default:\n                throw new IllegalArgumentException(String.format(\"Version %d is not valid. Valid versions for %s are 0 to %d\",\n                    versionId, this.getClass().getSimpleName(), ApiKeys.CREATE_TOPICS.latestVersion()));\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/common/requests/CreateTopicsRequest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"},{"authorDate":"2018-04-12 08:03:20","commitOrder":10,"curCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        Map<String, ApiError> topicErrors = new HashMap<>();\n        for (String topic : newPartitions.keySet()) {\n            topicErrors.put(topic, ApiError.fromThrowable(e));\n        }\n\n        short versionId = version();\n        switch (versionId) {\n            case 0:\n            case 1:\n                return new CreatePartitionsResponse(throttleTimeMs, topicErrors);\n            default:\n                throw new IllegalArgumentException(String.format(\"Version %d is not valid. Valid versions for %s are 0 to %d\",\n                        versionId, this.getClass().getSimpleName(), ApiKeys.CREATE_PARTITIONS.latestVersion()));\n        }\n    }\n","date":"2018-05-31 01:10:33","endLine":215,"groupId":"4797","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getErrorResponse","params":"(intthrottleTimeMs@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/776bb4dd37bf357233f19a2a7e79e67bf82ec1.src","preCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        Map<String, ApiError> topicErrors = new HashMap<>();\n        for (String topic : newPartitions.keySet()) {\n            topicErrors.put(topic, ApiError.fromThrowable(e));\n        }\n\n        short versionId = version();\n        switch (versionId) {\n            case 0:\n                return new CreatePartitionsResponse(throttleTimeMs, topicErrors);\n            default:\n                throw new IllegalArgumentException(String.format(\"Version %d is not valid. Valid versions for %s are 0 to %d\",\n                        versionId, this.getClass().getSimpleName(), ApiKeys.CREATE_PARTITIONS.latestVersion()));\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/common/requests/CreatePartitionsRequest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"1facab387f8c2e513c8b7397430251dc44970e35","commitMessage":"@@@KAFKA-6028: Improve the quota throttle communication (KIP-219)\n\nThis implements KIP-219.  where a broker returns a response with throttle time on\nquota violation immediately after processing the corresponding request.  After\nthe response is sent out.  the broker will keep the channel muted until the\nthrottle time is over. Also.  on receiving a response with throttle time.  client\nwill block outgoing communication to the broker for the specified throttle time.\n\nSee PR 4830.  5064 and 5094 for all the review history\n\nAuthor: Jon Lee <jonlee@jonlee-ld1.linkedin.biz>\n\nReviewers: Jun Rao <junrao@gmail.com>.  Rajini Sivaram <rajinisivaram@googlemail.com>.  Ismael Juma <ismael@juma.me.uk>.   Dong Lin <lindong28@gmail.com>\n\nCloses #5064 from jonlee2/kip-219\n","date":"2018-05-31 01:10:33","modifiedFileCount":"96","status":"M","submitter":"Jon Lee"},{"authorTime":"2018-04-12 08:03:20","codes":[{"authorDate":"2019-02-05 02:39:43","commitOrder":11,"curCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        CreateTopicsResponseData response = new CreateTopicsResponseData();\n        if (version() >= 2) {\n            response.setThrottleTimeMs(throttleTimeMs);\n        }\n        ApiError apiError = ApiError.fromThrowable(e);\n        for (CreatableTopic topic : data.topics()) {\n            response.topics().add(new CreatableTopicResult().\n                setName(topic.name()).\n                setErrorCode(apiError.error().code()).\n                setErrorMessage(apiError.message()));\n        }\n        return new CreateTopicsResponse(response);\n    }\n","date":"2019-02-05 02:39:43","endLine":88,"groupId":"3652","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getErrorResponse","params":"(intthrottleTimeMs@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/f7ab269a4baffd618240ef06c77489bfd318e7.src","preCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        Map<String, ApiError> topicErrors = new HashMap<>();\n        for (String topic : topics.keySet()) {\n            topicErrors.put(topic, ApiError.fromThrowable(e));\n        }\n\n        short versionId = version();\n        switch (versionId) {\n            case 0:\n            case 1:\n                return new CreateTopicsResponse(topicErrors);\n            case 2:\n            case 3:\n                return new CreateTopicsResponse(throttleTimeMs, topicErrors);\n            default:\n                throw new IllegalArgumentException(String.format(\"Version %d is not valid. Valid versions for %s are 0 to %d\",\n                    versionId, this.getClass().getSimpleName(), ApiKeys.CREATE_TOPICS.latestVersion()));\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/common/requests/CreateTopicsRequest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2018-04-12 08:03:20","commitOrder":11,"curCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        Map<String, ApiError> topicErrors = new HashMap<>();\n        for (String topic : newPartitions.keySet()) {\n            topicErrors.put(topic, ApiError.fromThrowable(e));\n        }\n\n        short versionId = version();\n        switch (versionId) {\n            case 0:\n            case 1:\n                return new CreatePartitionsResponse(throttleTimeMs, topicErrors);\n            default:\n                throw new IllegalArgumentException(String.format(\"Version %d is not valid. Valid versions for %s are 0 to %d\",\n                        versionId, this.getClass().getSimpleName(), ApiKeys.CREATE_PARTITIONS.latestVersion()));\n        }\n    }\n","date":"2018-05-31 01:10:33","endLine":215,"groupId":"4797","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getErrorResponse","params":"(intthrottleTimeMs@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5e/776bb4dd37bf357233f19a2a7e79e67bf82ec1.src","preCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        Map<String, ApiError> topicErrors = new HashMap<>();\n        for (String topic : newPartitions.keySet()) {\n            topicErrors.put(topic, ApiError.fromThrowable(e));\n        }\n\n        short versionId = version();\n        switch (versionId) {\n            case 0:\n            case 1:\n                return new CreatePartitionsResponse(throttleTimeMs, topicErrors);\n            default:\n                throw new IllegalArgumentException(String.format(\"Version %d is not valid. Valid versions for %s are 0 to %d\",\n                        versionId, this.getClass().getSimpleName(), ApiKeys.CREATE_PARTITIONS.latestVersion()));\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/common/requests/CreatePartitionsRequest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"N"}],"commitId":"e2e8bdbd8cb6ca2ac962c72147d21a9e8b9ba2c0","commitMessage":"@@@KAFKA-7832: Use automatic RPC generation in CreateTopics (#5972)\n\nReviewers: Jun Rao <junrao@gmail.com>.  Tom Bentley <tbentley@redhat.com>.  Boyang Chen <bchen11@outlook.com>","date":"2019-02-05 02:39:43","modifiedFileCount":"11","status":"M","submitter":"Colin Patrick McCabe"},{"authorTime":"2019-11-19 09:32:23","codes":[{"authorDate":"2019-02-05 02:39:43","commitOrder":12,"curCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        CreateTopicsResponseData response = new CreateTopicsResponseData();\n        if (version() >= 2) {\n            response.setThrottleTimeMs(throttleTimeMs);\n        }\n        ApiError apiError = ApiError.fromThrowable(e);\n        for (CreatableTopic topic : data.topics()) {\n            response.topics().add(new CreatableTopicResult().\n                setName(topic.name()).\n                setErrorCode(apiError.error().code()).\n                setErrorMessage(apiError.message()));\n        }\n        return new CreateTopicsResponse(response);\n    }\n","date":"2019-02-05 02:39:43","endLine":88,"groupId":"3652","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getErrorResponse","params":"(intthrottleTimeMs@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/f7ab269a4baffd618240ef06c77489bfd318e7.src","preCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        CreateTopicsResponseData response = new CreateTopicsResponseData();\n        if (version() >= 2) {\n            response.setThrottleTimeMs(throttleTimeMs);\n        }\n        ApiError apiError = ApiError.fromThrowable(e);\n        for (CreatableTopic topic : data.topics()) {\n            response.topics().add(new CreatableTopicResult().\n                setName(topic.name()).\n                setErrorCode(apiError.error().code()).\n                setErrorMessage(apiError.message()));\n        }\n        return new CreateTopicsResponse(response);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/common/requests/CreateTopicsRequest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"},{"authorDate":"2019-11-19 09:32:23","commitOrder":12,"curCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        Map<String, ApiError> topicErrors = new HashMap<>();\n        for (String topic : newPartitions.keySet()) {\n            topicErrors.put(topic, ApiError.fromThrowable(e));\n        }\n        return new CreatePartitionsResponse(throttleTimeMs, topicErrors);\n    }\n","date":"2019-11-19 09:32:23","endLine":235,"groupId":"8425","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getErrorResponse","params":"(intthrottleTimeMs@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bf/2692185899612d5ff2cb7a382d77a37d5537ee.src","preCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        Map<String, ApiError> topicErrors = new HashMap<>();\n        for (String topic : newPartitions.keySet()) {\n            topicErrors.put(topic, ApiError.fromThrowable(e));\n        }\n\n        short versionId = version();\n        switch (versionId) {\n            case 0:\n            case 1:\n                return new CreatePartitionsResponse(throttleTimeMs, topicErrors);\n            default:\n                throw new IllegalArgumentException(String.format(\"Version %d is not valid. Valid versions for %s are 0 to %d\",\n                        versionId, this.getClass().getSimpleName(), ApiKeys.CREATE_PARTITIONS.latestVersion()));\n        }\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/common/requests/CreatePartitionsRequest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"32bf0774e9727e8f92ce168bc568f62d20968386","commitMessage":"@@@MINOR: Remove explicit version checks in getErrorResponse methods (#7708)\n\nThis patch removes the explicit version check pattern we used in `getErrorResponse`.  which is a pain to maintain (as seen by KAFKA-9200). We already check that requests have a valid version range in the `AbstractRequest` constructor.\n\nReviewers: Andrew Choi <andrewchoi5@users.noreply.github.com>.  Ismael Juma <ismael@juma.me.uk>","date":"2019-11-19 09:32:23","modifiedFileCount":"16","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2020-01-09 07:47:27","codes":[{"authorDate":"2019-02-05 02:39:43","commitOrder":13,"curCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        CreateTopicsResponseData response = new CreateTopicsResponseData();\n        if (version() >= 2) {\n            response.setThrottleTimeMs(throttleTimeMs);\n        }\n        ApiError apiError = ApiError.fromThrowable(e);\n        for (CreatableTopic topic : data.topics()) {\n            response.topics().add(new CreatableTopicResult().\n                setName(topic.name()).\n                setErrorCode(apiError.error().code()).\n                setErrorMessage(apiError.message()));\n        }\n        return new CreateTopicsResponse(response);\n    }\n","date":"2019-02-05 02:39:43","endLine":88,"groupId":"104145","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getErrorResponse","params":"(intthrottleTimeMs@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/f7ab269a4baffd618240ef06c77489bfd318e7.src","preCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        CreateTopicsResponseData response = new CreateTopicsResponseData();\n        if (version() >= 2) {\n            response.setThrottleTimeMs(throttleTimeMs);\n        }\n        ApiError apiError = ApiError.fromThrowable(e);\n        for (CreatableTopic topic : data.topics()) {\n            response.topics().add(new CreatableTopicResult().\n                setName(topic.name()).\n                setErrorCode(apiError.error().code()).\n                setErrorMessage(apiError.message()));\n        }\n        return new CreateTopicsResponse(response);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/common/requests/CreateTopicsRequest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"},{"authorDate":"2020-01-09 07:47:27","commitOrder":13,"curCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        CreatePartitionsResponseData response = new CreatePartitionsResponseData();\n        response.setThrottleTimeMs(throttleTimeMs);\n\n        ApiError apiError = ApiError.fromThrowable(e);\n        for (CreatePartitionsTopic topic : data.topics()) {\n            response.results().add(new CreatePartitionsTopicResult()\n                    .setName(topic.name())\n                    .setErrorCode(apiError.error().code())\n                    .setErrorMessage(apiError.message())\n            );\n        }\n        return new CreatePartitionsResponse(response);\n    }\n","date":"2020-01-09 07:47:27","endLine":85,"groupId":"104145","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getErrorResponse","params":"(intthrottleTimeMs@Throwablee)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/77/d4175c339de76aca0813e5435c053f05dfd5a2.src","preCode":"    public AbstractResponse getErrorResponse(int throttleTimeMs, Throwable e) {\n        Map<String, ApiError> topicErrors = new HashMap<>();\n        for (String topic : newPartitions.keySet()) {\n            topicErrors.put(topic, ApiError.fromThrowable(e));\n        }\n        return new CreatePartitionsResponse(throttleTimeMs, topicErrors);\n    }\n","realPath":"clients/src/main/java/org/apache/kafka/common/requests/CreatePartitionsRequest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"e63becb83d68e0d8f33271d9212886e60508c34d","commitMessage":"@@@KAFKA-8988; Replace CreatePartitions Request/Response with automated protocol (#7493)\n\nThis change updates the CreatePartitions request and response api objects\nto use the generated protocol classes.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2020-01-09 07:47:27","modifiedFileCount":"7","status":"M","submitter":"Vikas Singh"}]
