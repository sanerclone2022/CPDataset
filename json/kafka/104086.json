[{"authorTime":"2018-05-27 02:50:51","codes":[{"authorDate":"2018-05-27 02:50:51","commitOrder":11,"curCode":"    public void testSimpleMock() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(Duration.ZERO).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(1));\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        assertEquals(2L, consumer.position(new TopicPartition(\"test\", 0)));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(new TopicPartition(\"test\", 0)).offset());\n    }\n","date":"2018-05-27 02:50:51","endLine":59,"groupId":"1949","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleMock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1d/01eb6d0b261612e95ec9ee63182ef86b65c98a.src","preCode":"    public void testSimpleMock() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(Duration.ZERO).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(1));\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        assertEquals(2L, consumer.position(new TopicPartition(\"test\", 0)));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(new TopicPartition(\"test\", 0)).offset());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/MockConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"MB"},{"authorDate":"2018-05-27 02:50:51","commitOrder":11,"curCode":"    public void testSimpleMockDeprecated() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(1000).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(1);\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        assertEquals(2L, consumer.position(new TopicPartition(\"test\", 0)));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(new TopicPartition(\"test\", 0)).offset());\n    }\n","date":"2018-05-27 02:50:51","endLine":85,"groupId":"1949","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleMockDeprecated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1d/01eb6d0b261612e95ec9ee63182ef86b65c98a.src","preCode":"    public void testSimpleMockDeprecated() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(1000).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(1);\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        assertEquals(2L, consumer.position(new TopicPartition(\"test\", 0)));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(new TopicPartition(\"test\", 0)).offset());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/MockConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"B"}],"commitId":"c470ff70d3e829c8b12f6eb6cc812c4162071a1f","commitMessage":"@@@KAFKA-5697; Implement new consumer poll API from KIP-266 (#4855)\n\nAdd the new stricter-timeout version of `poll` proposed in KIP-266.\n\nThe pre-existing variant `poll(long timeout)` would block indefinitely for metadata\nupdates if they were needed.  then it would issue a fetch and poll for `timeout` ms \nfor new records. The initial indefinite metadata block caused applications to become\nstuck when the brokers became unavailable. The existence of the timeout parameter\nmade the indefinite block especially unintuitive.\n\nThis PR adds `poll(Duration timeout)` with the semantics:\n1. iff a metadata update is needed:\n    1. send (asynchronous) metadata requests\n    2. poll for metadata responses (counts against timeout)\n        - if no response within timeout.  **return an empty collection immediately**\n2. if there is fetch data available.  **return it immediately**\n3. if there is no fetch request in flight.  send fetch requests\n4. poll for fetch responses (counts against timeout)\n    - if no response within timeout.  **return an empty collection** (leaving async fetch request for the next poll)\n    - if we get a response.  **return the response**\n\nThe old method.  `poll(long timeout)` is deprecated.  but we do not change its semantics.  so it remains:\n1. iff a metadata update is needed:\n    1. send (asynchronous) metadata requests\n    2. poll for metadata responses *indefinitely until we get it*\n2. if there is fetch data available.  **return it immediately**\n3. if there is no fetch request in flight.  send fetch requests\n4. poll for fetch responses (counts against timeout)\n    - if no response within timeout.  **return an empty collection** (leaving async fetch request for the next poll)\n    - if we get a response.  **return the response**\n\nOne notable usage is prohibited by the new `poll`: previously.  you could call `poll(0)` to block for metadata updates.  for example to initialize the client.  supposedly without fetching records. Note.  though.  that this behavior is not according to any contract.  and there is no guarantee that `poll(0)` won't return records the first time it's called. Therefore.  it has always been unsafe to ignore the response.","date":"2018-05-27 02:50:51","modifiedFileCount":"20","status":"M","submitter":"John Roesler"},{"authorTime":"2019-09-25 04:23:27","codes":[{"authorDate":"2019-09-25 04:23:27","commitOrder":12,"curCode":"    public void testSimpleMock() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(Duration.ZERO).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(1));\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n    }\n","date":"2019-09-25 04:23:27","endLine":62,"groupId":"1949","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleMock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/012b2cf67a9dfe0418523b26c0631b64662566.src","preCode":"    public void testSimpleMock() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(Duration.ZERO).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(1));\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        assertEquals(2L, consumer.position(new TopicPartition(\"test\", 0)));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(new TopicPartition(\"test\", 0)).offset());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/MockConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2019-09-25 04:23:27","commitOrder":12,"curCode":"    public void testSimpleMockDeprecated() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(1000).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(1);\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n    }\n","date":"2019-09-25 04:23:27","endLine":89,"groupId":"1949","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleMockDeprecated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/012b2cf67a9dfe0418523b26c0631b64662566.src","preCode":"    public void testSimpleMockDeprecated() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(1000).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(1);\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        assertEquals(2L, consumer.position(new TopicPartition(\"test\", 0)));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(new TopicPartition(\"test\", 0)).offset());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/MockConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"bcc023773ff0f5b68f0e808bc7c7aba457a4c472","commitMessage":"@@@KAFKA-8880: Add overloaded function of Consumer.committed (#7304)\n\n1. Add the overloaded functions.\n2. Update the code in Streams to use the batch API for better latency (this applies to both active StreamsTask for initialize the offsets.  as well as the StandbyTasks for updating offset limits).\n3. Also update all unit test to replace the deprecated APIs.\n\nReviewers: Christopher Pettitt <cpettitt@confluent.io>.  Kamal Chandraprakash  <kamal.chandraprakash@gmail.com>.  Bill Bejeck <bill@confluent.io>","date":"2019-09-25 04:23:27","modifiedFileCount":"12","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-01-10 01:34:59","codes":[{"authorDate":"2019-09-25 04:23:27","commitOrder":13,"curCode":"    public void testSimpleMock() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(Duration.ZERO).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(1));\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n    }\n","date":"2019-09-25 04:23:27","endLine":62,"groupId":"1949","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleMock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/012b2cf67a9dfe0418523b26c0631b64662566.src","preCode":"    public void testSimpleMock() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(Duration.ZERO).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(1));\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/MockConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"},{"authorDate":"2020-01-10 01:34:59","commitOrder":13,"curCode":"    public void testSimpleMockDeprecated() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(1000).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(1);\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n        assertNull(consumer.groupMetadata());\n    }\n","date":"2020-01-10 01:34:59","endLine":91,"groupId":"1949","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleMockDeprecated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/12/acf3577e5cff748d58811d9b0b5a6a6d73625f.src","preCode":"    public void testSimpleMockDeprecated() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(1000).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(1);\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/MockConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"e9cde112cd47d88c3e256881a70035c0fd31c022","commitMessage":"@@@KAFKA-9383: Expose consumer group metadata (#7906)\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-01-10 01:34:59","modifiedFileCount":"8","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-03-12 06:22:44","codes":[{"authorDate":"2019-09-25 04:23:27","commitOrder":14,"curCode":"    public void testSimpleMock() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(Duration.ZERO).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(1));\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n    }\n","date":"2019-09-25 04:23:27","endLine":62,"groupId":"1949","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleMock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/012b2cf67a9dfe0418523b26c0631b64662566.src","preCode":"    public void testSimpleMock() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(Duration.ZERO).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(1));\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/MockConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"},{"authorDate":"2020-03-12 06:22:44","commitOrder":14,"curCode":"    public void testSimpleMockDeprecated() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(1000).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(1);\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n        assertThat(consumer.groupMetadata(), equalTo(new ConsumerGroupMetadata(\"dummy.group.id\", 1, \"1\", Optional.empty())));\n    }\n","date":"2020-03-12 06:22:44","endLine":94,"groupId":"1949","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleMockDeprecated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/75/3d6d794c935549d433a79180b25e300adaa082.src","preCode":"    public void testSimpleMockDeprecated() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(1000).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(1);\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n        assertNull(consumer.groupMetadata());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/MockConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"d3c7ef251a1ff9dfa94cd462d736a9f6592106dd","commitMessage":"@@@KAFKA-9451: Update MockConsumer to support ConsumerGroupMetadata\n\nReviewers: Boyang Chan <boyang@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2020-03-12 06:22:44","modifiedFileCount":"7","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2019-09-25 04:23:27","commitOrder":15,"curCode":"    public void testSimpleMock() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(Duration.ZERO).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(1));\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n    }\n","date":"2019-09-25 04:23:27","endLine":62,"groupId":"1949","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleMock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/012b2cf67a9dfe0418523b26c0631b64662566.src","preCode":"    public void testSimpleMock() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(Duration.ZERO).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(1));\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/MockConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"N"},{"authorDate":"2021-01-14 08:17:45","commitOrder":15,"curCode":"    public void testSimpleMockDeprecated() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(1000).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(1);\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n        assertEquals(new ConsumerGroupMetadata(\"dummy.group.id\", 1, \"1\", Optional.empty()),\n            consumer.groupMetadata());\n    }\n","date":"2021-01-14 08:17:45","endLine":92,"groupId":"1949","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testSimpleMockDeprecated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/74b0667cd1baa6ff269925d82e7d72dd95e136.src","preCode":"    public void testSimpleMockDeprecated() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(1000).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(1);\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n        assertThat(consumer.groupMetadata(), equalTo(new ConsumerGroupMetadata(\"dummy.group.id\", 1, \"1\", Optional.empty())));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/MockConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"},{"authorTime":"2021-04-15 05:38:37","codes":[{"authorDate":"2021-04-15 05:38:37","commitOrder":16,"curCode":"    public void testSimpleMock() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(Duration.ZERO).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME,\n            0, 0, \"key1\", \"value1\", new RecordHeaders(), Optional.empty());\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME,\n            0, 0, \"key2\", \"value2\", new RecordHeaders(), Optional.empty());\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(1));\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n    }\n","date":"2021-04-15 05:38:37","endLine":66,"groupId":"104086","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testSimpleMock","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/be/2ea0edf16492f513f13c7ee280d0f0628be00f.src","preCode":"    public void testSimpleMock() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(Duration.ZERO).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(Duration.ofMillis(1));\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/MockConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2021-04-15 05:38:37","commitOrder":16,"curCode":"    public void testSimpleMockDeprecated() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(1000).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME,\n            0, 0, \"key1\", \"value1\", new RecordHeaders(), Optional.empty());\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME,\n            0, 0, \"key2\", \"value2\", new RecordHeaders(), Optional.empty());\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(1);\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n        assertEquals(new ConsumerGroupMetadata(\"dummy.group.id\", 1, \"1\", Optional.empty()),\n            consumer.groupMetadata());\n    }\n","date":"2021-04-15 05:38:37","endLine":97,"groupId":"104086","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testSimpleMockDeprecated","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/be/2ea0edf16492f513f13c7ee280d0f0628be00f.src","preCode":"    public void testSimpleMockDeprecated() {\n        consumer.subscribe(Collections.singleton(\"test\"));\n        assertEquals(0, consumer.poll(1000).count());\n        consumer.rebalance(Arrays.asList(new TopicPartition(\"test\", 0), new TopicPartition(\"test\", 1)));\n        \r\n        HashMap<TopicPartition, Long> beginningOffsets = new HashMap<>();\n        beginningOffsets.put(new TopicPartition(\"test\", 0), 0L);\n        beginningOffsets.put(new TopicPartition(\"test\", 1), 0L);\n        consumer.updateBeginningOffsets(beginningOffsets);\n        consumer.seek(new TopicPartition(\"test\", 0), 0);\n        ConsumerRecord<String, String> rec1 = new ConsumerRecord<>(\"test\", 0, 0, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key1\", \"value1\");\n        ConsumerRecord<String, String> rec2 = new ConsumerRecord<>(\"test\", 0, 1, 0L, TimestampType.CREATE_TIME, 0L, 0, 0, \"key2\", \"value2\");\n        consumer.addRecord(rec1);\n        consumer.addRecord(rec2);\n        ConsumerRecords<String, String> recs = consumer.poll(1);\n        Iterator<ConsumerRecord<String, String>> iter = recs.iterator();\n        assertEquals(rec1, iter.next());\n        assertEquals(rec2, iter.next());\n        assertFalse(iter.hasNext());\n        final TopicPartition tp = new TopicPartition(\"test\", 0);\n        assertEquals(2L, consumer.position(tp));\n        consumer.commitSync();\n        assertEquals(2L, consumer.committed(Collections.singleton(tp)).get(tp).offset());\n        assertEquals(new ConsumerGroupMetadata(\"dummy.group.id\", 1, \"1\", Optional.empty()),\n            consumer.groupMetadata());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/MockConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"89933f21f204abf75336464d3ac24a4fdd254628","commitMessage":"@@@KAFKA-12612: Remove `checksum` from ConsumerRecord/RecordMetadata for 3.0 (#10470)\n\nThe methods have been deprecated since 0.11 without replacement since\nmessage format 2 moved the checksum to the record batch (instead of the\nrecord).\n\nUnfortunately.  we did not deprecate the constructors that take a checksum\n(even though we intended to) so we cannot remove them. I have deprecated\nthem for removal in 4.0 and added a single non deprecated constructor to\n`ConsumerRecord` and `RecordMetadata` that take all remaining parameters.\n`ConsumerRecord` could do with one additional convenience constructor.  but\nthat requires a KIP and hence should be done separately.\n\nAlso:\n* Removed `ChecksumMessageFormatter`.  which is technically not public\nAPI.  but may have been used with the console consumer.\n* Updated all usages of `ConsumerRecord`/`RecordMetadata` constructors\nto use the non deprecated ones.\n* Added tests for deprecated `ConsumerRecord/`RecordMetadata`\nconstructors.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  David Jacot <djacot@confluent.io>","date":"2021-04-15 05:38:37","modifiedFileCount":"47","status":"M","submitter":"Ismael Juma"}]
