[{"authorTime":"2015-10-22 03:13:42","codes":[{"authorDate":"2015-10-22 03:13:42","commitOrder":1,"curCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.GROUP_COORDINATOR_NOT_AVAILABLE.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n        consumerClient.poll(0);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertEquals(Errors.GROUP_COORDINATOR_NOT_AVAILABLE.exception(), cb.exception);\n    }\n","date":"2015-10-22 03:13:42","endLine":520,"groupId":"4518","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitOffsetAsyncCoordinatorNotAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/994d7fbe771c858334fcae51307a9233e108c0.src","preCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.GROUP_COORDINATOR_NOT_AVAILABLE.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n        consumerClient.poll(0);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertEquals(Errors.GROUP_COORDINATOR_NOT_AVAILABLE.exception(), cb.exception);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":507,"status":"B"},{"authorDate":"2015-10-22 03:13:42","commitOrder":1,"curCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.NOT_COORDINATOR_FOR_GROUP.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n        consumerClient.poll(0);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertEquals(Errors.NOT_COORDINATOR_FOR_GROUP.exception(), cb.exception);\n    }\n","date":"2015-10-22 03:13:42","endLine":536,"groupId":"3771","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitOffsetAsyncNotCoordinator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/994d7fbe771c858334fcae51307a9233e108c0.src","preCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.NOT_COORDINATOR_FOR_GROUP.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n        consumerClient.poll(0);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertEquals(Errors.NOT_COORDINATOR_FOR_GROUP.exception(), cb.exception);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":523,"status":"B"}],"commitId":"86eb74d9236c586af5889fe79f4b9e066c9c2af3","commitMessage":"@@@KAFKA-2464: client-side assignment for new consumer\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Jiangjie Qin.  Onur Karaman.  Ewen Cheslack-Postava.  Guozhang Wang\n\nCloses #165 from hachikuji/KAFKA-2464\n","date":"2015-10-22 03:13:42","modifiedFileCount":"24","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2016-03-22 11:47:25","codes":[{"authorDate":"2016-03-22 11:47:25","commitOrder":2,"curCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.GROUP_COORDINATOR_NOT_AVAILABLE.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertEquals(Errors.GROUP_COORDINATOR_NOT_AVAILABLE.exception(), cb.exception);\n    }\n","date":"2016-03-22 11:47:25","endLine":720,"groupId":"4518","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitOffsetAsyncCoordinatorNotAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/88/44adc80b96448e4356296a647f70dbe1e8850d.src","preCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.GROUP_COORDINATOR_NOT_AVAILABLE.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n        consumerClient.poll(0);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertEquals(Errors.GROUP_COORDINATOR_NOT_AVAILABLE.exception(), cb.exception);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":708,"status":"M"},{"authorDate":"2016-03-22 11:47:25","commitOrder":2,"curCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.NOT_COORDINATOR_FOR_GROUP.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertEquals(Errors.NOT_COORDINATOR_FOR_GROUP.exception(), cb.exception);\n    }\n","date":"2016-03-22 11:47:25","endLine":735,"groupId":"3771","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitOffsetAsyncNotCoordinator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/88/44adc80b96448e4356296a647f70dbe1e8850d.src","preCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.NOT_COORDINATOR_FOR_GROUP.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n        consumerClient.poll(0);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertEquals(Errors.NOT_COORDINATOR_FOR_GROUP.exception(), cb.exception);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":723,"status":"M"}],"commitId":"8d8e3aaa6172d314230a8d61e6892e9c09dc45b6","commitMessage":"@@@KAFKA-3412: multiple asynchronous commits causes send failures\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1108 from hachikuji/KAFKA-3412\n","date":"2016-03-22 11:47:25","modifiedFileCount":"4","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-05-05 10:20:54","codes":[{"authorDate":"2016-05-05 10:20:54","commitOrder":3,"curCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.GROUP_COORDINATOR_NOT_AVAILABLE.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2016-05-05 10:20:54","endLine":919,"groupId":"4518","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitOffsetAsyncCoordinatorNotAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bb/31acff539ea5b20666d45ee56a0a019aa20332.src","preCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.GROUP_COORDINATOR_NOT_AVAILABLE.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertEquals(Errors.GROUP_COORDINATOR_NOT_AVAILABLE.exception(), cb.exception);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":907,"status":"M"},{"authorDate":"2016-05-05 10:20:54","commitOrder":3,"curCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.NOT_COORDINATOR_FOR_GROUP.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2016-05-05 10:20:54","endLine":934,"groupId":"3771","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitOffsetAsyncNotCoordinator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bb/31acff539ea5b20666d45ee56a0a019aa20332.src","preCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.NOT_COORDINATOR_FOR_GROUP.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertEquals(Errors.NOT_COORDINATOR_FOR_GROUP.exception(), cb.exception);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":922,"status":"M"}],"commitId":"ad316509787787afeed6e2a24a62fd22cadd09c7","commitMessage":"@@@KAFKA-3527: Consumer commitAsync should not expose internal exceptions\n\nAuthor: Liquan Pei <liquanpei@gmail.com>\n\nReviewers: Grant Henke <granthenke@gmail.com>.  Jason Gustafson <jason@confluent.io>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1300 from Ishiihara/kafka-3527\n","date":"2016-05-05 10:20:54","modifiedFileCount":"4","status":"M","submitter":"Liquan Pei"},{"authorTime":"2016-05-06 03:03:28","codes":[{"authorDate":"2016-05-06 03:03:28","commitOrder":4,"curCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.GROUP_COORDINATOR_NOT_AVAILABLE.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2016-05-06 03:03:28","endLine":919,"groupId":"4518","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitOffsetAsyncCoordinatorNotAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/82/a854afcaf2f6407332c2ad541fc5bb9df02d5a.src","preCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.GROUP_COORDINATOR_NOT_AVAILABLE.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":907,"status":"M"},{"authorDate":"2016-05-06 03:03:28","commitOrder":4,"curCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.NOT_COORDINATOR_FOR_GROUP.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2016-05-06 03:03:28","endLine":934,"groupId":"3771","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitOffsetAsyncNotCoordinator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/82/a854afcaf2f6407332c2ad541fc5bb9df02d5a.src","preCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorKnown();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.NOT_COORDINATOR_FOR_GROUP.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":922,"status":"M"}],"commitId":"32bf83e5a792c5ee9eb88660da71b73aad5bbc02","commitMessage":"@@@KAFKA-3659: Handle coordinator disconnects more gracefully in client\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Grant Henke <granthenke@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #1322 from hachikuji/KAFKA-3659\n","date":"2016-05-06 03:03:28","modifiedFileCount":"7","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2016-08-18 02:50:04","codes":[{"authorDate":"2016-08-18 02:50:04","commitOrder":5,"curCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.GROUP_COORDINATOR_NOT_AVAILABLE.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2016-08-18 02:50:04","endLine":926,"groupId":"4518","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitOffsetAsyncCoordinatorNotAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/c8b7578b9ca5da7442cf9294573c312fdecfc8.src","preCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.GROUP_COORDINATOR_NOT_AVAILABLE.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":913,"status":"M"},{"authorDate":"2016-08-18 02:50:04","commitOrder":5,"curCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.NOT_COORDINATOR_FOR_GROUP.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2016-08-18 02:50:04","endLine":942,"groupId":"3771","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitOffsetAsyncNotCoordinator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8e/c8b7578b9ca5da7442cf9294573c312fdecfc8.src","preCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(consumerMetadataResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.NOT_COORDINATOR_FOR_GROUP.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":929,"status":"M"}],"commitId":"40b1dd3f495a59abef8a0cba5450526994c92c04","commitMessage":"@@@KAFKA-3888: send consumer heartbeats from a background thread (KIP-62)\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Ewen Cheslack-Postava <ewen@confluent.io>.  Ismael Juma <ismael@juma.me.uk>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #1627 from hachikuji/KAFKA-3888\n","date":"2016-08-18 02:50:04","modifiedFileCount":"24","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2017-01-24 02:45:45","codes":[{"authorDate":"2017-01-24 02:45:45","commitOrder":6,"curCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(t1p, Errors.GROUP_COORDINATOR_NOT_AVAILABLE.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2017-01-24 02:45:45","endLine":1086,"groupId":"2299","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitOffsetAsyncCoordinatorNotAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/4dd2dac5debb3b8dc6cdc979760ac1a73de745.src","preCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.GROUP_COORDINATOR_NOT_AVAILABLE.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1073,"status":"M"},{"authorDate":"2017-01-24 02:45:45","commitOrder":6,"curCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(t1p, Errors.NOT_COORDINATOR_FOR_GROUP.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2017-01-24 02:45:45","endLine":1102,"groupId":"15170","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitOffsetAsyncNotCoordinator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3c/4dd2dac5debb3b8dc6cdc979760ac1a73de745.src","preCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(tp, Errors.NOT_COORDINATOR_FOR_GROUP.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(tp, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1089,"status":"M"}],"commitId":"3400d0c3cc07d5d3136bf9a19142b36cca93f92d","commitMessage":"@@@KAFKA-4633; Always using regex pattern subscription in StreamThread\n\n1. In StreamThread.  always use subscribe(Pattern.  ..) function in order to avoid sending MetadataRequest with specific topic names and cause brokers to possibly auto-create subscribed topics; the pattern is generated as \"topic-1|topic-2..|topic-n\".\n\n2. In ConsumerCoordinator.  let the leader to refresh its metadata if the generated assignment contains some topics that is not contained in the subscribed topics; also in SubscriptionState.  modified the verification for regex subscription to against the regex pattern instead of the matched topics since the returned assignment may contain some topics not yet created when joining the group but existed after the rebalance; also modified some unit tests in `KafkaConsumerTest` to accommodate the above changes.\n\n3. Minor cleanup: changed String[] to List<String> to avoid overloaded functions.\n\n4. Minor cleanup: enforced strong typing in SinkNodeFactory and removed unnecessary unchecked tags.\n\n5. Minor cleanup: augmented unit test error message and fixed a potential transient failure in KafkaStreamTest.\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Matthias J. Sax <matthias@confluent.io>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2379 from guozhangwang/K4633-regex-pattern\n","date":"2017-01-24 02:45:45","modifiedFileCount":"19","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2017-02-10 13:03:46","codes":[{"authorDate":"2017-02-10 13:03:46","commitOrder":7,"curCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(t1p, Errors.GROUP_COORDINATOR_NOT_AVAILABLE)));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2017-02-10 13:03:46","endLine":1085,"groupId":"2299","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitOffsetAsyncCoordinatorNotAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/f496b2ca4478933dfcea497d5e67d8d8d2aec8.src","preCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(t1p, Errors.GROUP_COORDINATOR_NOT_AVAILABLE.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1072,"status":"M"},{"authorDate":"2017-02-10 13:03:46","commitOrder":7,"curCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(t1p, Errors.NOT_COORDINATOR_FOR_GROUP)));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2017-02-10 13:03:46","endLine":1101,"groupId":"3160","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitOffsetAsyncNotCoordinator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/33/f496b2ca4478933dfcea497d5e67d8d8d2aec8.src","preCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE.code()));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(t1p, Errors.NOT_COORDINATOR_FOR_GROUP.code())));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1088,"status":"M"}],"commitId":"9898d665d1ab201405d66c70e3ea9710d9dcecd7","commitMessage":"@@@MINOR: Use an explicit `Errors` object when possible instead of a numeric error code\n\nAuthor: Vahid Hashemian <vahidhashemian@us.ibm.com>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Jason Gustafson <jason@confluent.io>\n\nCloses #2475 from vahidhashemian/minor/use_explicit_Errors_type_when_possible\n","date":"2017-02-10 13:03:46","modifiedFileCount":"48","status":"M","submitter":"Vahid Hashemian"},{"authorTime":"2017-04-11 16:05:09","codes":[{"authorDate":"2017-04-11 16:05:09","commitOrder":8,"curCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(t1p, Errors.COORDINATOR_NOT_AVAILABLE)));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2017-04-11 16:11:46","endLine":1145,"groupId":"2299","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitOffsetAsyncCoordinatorNotAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/582ca0fa27452db0f79c2b7cb56f539a17d06c.src","preCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(t1p, Errors.GROUP_COORDINATOR_NOT_AVAILABLE)));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1132,"status":"M"},{"authorDate":"2017-04-11 16:05:09","commitOrder":8,"curCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(t1p, Errors.NOT_COORDINATOR)));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2017-04-11 16:11:46","endLine":1161,"groupId":"3160","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitOffsetAsyncNotCoordinator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8b/582ca0fa27452db0f79c2b7cb56f539a17d06c.src","preCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(t1p, Errors.NOT_COORDINATOR_FOR_GROUP)));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1148,"status":"M"}],"commitId":"d0e7c6b9304b23ced046934c799df0cba39c28e5","commitMessage":"@@@KAFKA-5043; Rename GroupCoordinator to FindCoordinator (KIP-98)\n\nAlso:\n1. FindCoordinator is more general and takes a coordinator_type\nso that it can be used for the group and transaction coordinators.\n2. Include an error message in FindCoordinatorResponse to make the\nerrors at the client side more informative. We have just added the\nfield to the protocol in this PR.  a subsequent PR will update the\ncode to use it.\n3. Rename `Errors` names for FindCoordinator to be more generic. This\nis a compatible change as the ids remain the same.\n4. Since the exception classes for the error codes are in a public\npackage.  we introduce new ones and deprecate the old ones.\nThe classes were not thrown back to the user (KAFKA-5052 aside). \nso this is a compatible change.\n5. Update InitPidRequest for transactions. Since this protocol API\nwas introduced recently and is not used by default.  we did not bump\nits version.\n\nAuthor: Apurva Mehta <apurva@confluent.io>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>\n\nCloses #2825 from apurvam/exactly-once-rpc-stubs\n","date":"2017-04-11 16:11:46","modifiedFileCount":"26","status":"M","submitter":"Apurva Mehta"},{"authorTime":"2018-03-04 05:27:29","codes":[{"authorDate":"2018-03-04 05:27:29","commitOrder":9,"curCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.COORDINATOR_NOT_AVAILABLE);\n        coordinator.commitOffsetsAsync(singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2018-03-04 05:27:29","endLine":1270,"groupId":"1878","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitOffsetAsyncCoordinatorNotAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/3c423a428b27923a82a6f2ab552dbee8996781.src","preCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(t1p, Errors.COORDINATOR_NOT_AVAILABLE)));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1257,"status":"M"},{"authorDate":"2018-03-04 05:27:29","commitOrder":9,"curCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.COORDINATOR_NOT_AVAILABLE);\n        coordinator.commitOffsetsAsync(singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2018-03-04 05:27:29","endLine":1286,"groupId":"1878","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitOffsetAsyncNotCoordinator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/3e/3c423a428b27923a82a6f2ab552dbee8996781.src","preCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        client.prepareResponse(offsetCommitResponse(Collections.singletonMap(t1p, Errors.NOT_COORDINATOR)));\n        coordinator.commitOffsetsAsync(Collections.singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1273,"status":"M"}],"commitId":"604b93cfdee7a8c5c879ef2217d50be88e39ac89","commitMessage":"@@@KAFKA-6606; Ensure consumer awaits auto-commit interval after sending? (#4641)\n\nWe need to reset the auto-commit deadline after sending the offset commit request so that we do not resend it while the request is still inflight. \n\nAdded unit tests ensuring this behavior and proper backoff in the case of a failure.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2018-03-04 05:27:29","modifiedFileCount":"2","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2018-05-27 02:50:51","codes":[{"authorDate":"2018-05-27 02:50:51","commitOrder":10,"curCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.COORDINATOR_NOT_AVAILABLE);\n        coordinator.commitOffsetsAsync(singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2018-05-27 02:50:51","endLine":1270,"groupId":"1878","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitOffsetAsyncCoordinatorNotAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/288735805e36fa380e97c5657212d9d16112d4.src","preCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.COORDINATOR_NOT_AVAILABLE);\n        coordinator.commitOffsetsAsync(singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1257,"status":"M"},{"authorDate":"2018-05-27 02:50:51","commitOrder":10,"curCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.COORDINATOR_NOT_AVAILABLE);\n        coordinator.commitOffsetsAsync(singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2018-05-27 02:50:51","endLine":1286,"groupId":"1878","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitOffsetAsyncNotCoordinator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/288735805e36fa380e97c5657212d9d16112d4.src","preCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady();\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.COORDINATOR_NOT_AVAILABLE);\n        coordinator.commitOffsetsAsync(singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1273,"status":"M"}],"commitId":"c470ff70d3e829c8b12f6eb6cc812c4162071a1f","commitMessage":"@@@KAFKA-5697; Implement new consumer poll API from KIP-266 (#4855)\n\nAdd the new stricter-timeout version of `poll` proposed in KIP-266.\n\nThe pre-existing variant `poll(long timeout)` would block indefinitely for metadata\nupdates if they were needed.  then it would issue a fetch and poll for `timeout` ms \nfor new records. The initial indefinite metadata block caused applications to become\nstuck when the brokers became unavailable. The existence of the timeout parameter\nmade the indefinite block especially unintuitive.\n\nThis PR adds `poll(Duration timeout)` with the semantics:\n1. iff a metadata update is needed:\n    1. send (asynchronous) metadata requests\n    2. poll for metadata responses (counts against timeout)\n        - if no response within timeout.  **return an empty collection immediately**\n2. if there is fetch data available.  **return it immediately**\n3. if there is no fetch request in flight.  send fetch requests\n4. poll for fetch responses (counts against timeout)\n    - if no response within timeout.  **return an empty collection** (leaving async fetch request for the next poll)\n    - if we get a response.  **return the response**\n\nThe old method.  `poll(long timeout)` is deprecated.  but we do not change its semantics.  so it remains:\n1. iff a metadata update is needed:\n    1. send (asynchronous) metadata requests\n    2. poll for metadata responses *indefinitely until we get it*\n2. if there is fetch data available.  **return it immediately**\n3. if there is no fetch request in flight.  send fetch requests\n4. poll for fetch responses (counts against timeout)\n    - if no response within timeout.  **return an empty collection** (leaving async fetch request for the next poll)\n    - if we get a response.  **return the response**\n\nOne notable usage is prohibited by the new `poll`: previously.  you could call `poll(0)` to block for metadata updates.  for example to initialize the client.  supposedly without fetching records. Note.  though.  that this behavior is not according to any contract.  and there is no guarantee that `poll(0)` won't return records the first time it's called. Therefore.  it has always been unsafe to ignore the response.","date":"2018-05-27 02:50:51","modifiedFileCount":"20","status":"M","submitter":"John Roesler"},{"authorTime":"2018-08-04 08:25:07","codes":[{"authorDate":"2018-08-04 08:25:07","commitOrder":11,"curCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.COORDINATOR_NOT_AVAILABLE);\n        coordinator.commitOffsetsAsync(singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2018-08-04 08:25:07","endLine":1398,"groupId":"104024","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testCommitOffsetAsyncCoordinatorNotAvailable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/c70a02686789e2c0be812955fca582a4e0b826.src","preCode":"    public void testCommitOffsetAsyncCoordinatorNotAvailable() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.COORDINATOR_NOT_AVAILABLE);\n        coordinator.commitOffsetsAsync(singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1385,"status":"M"},{"authorDate":"2018-08-04 08:25:07","commitOrder":11,"curCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.COORDINATOR_NOT_AVAILABLE);\n        coordinator.commitOffsetsAsync(singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","date":"2018-08-04 08:25:07","endLine":1414,"groupId":"104024","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testCommitOffsetAsyncNotCoordinator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/c70a02686789e2c0be812955fca582a4e0b826.src","preCode":"    public void testCommitOffsetAsyncNotCoordinator() {\n        client.prepareResponse(groupCoordinatorResponse(node, Errors.NONE));\n        coordinator.ensureCoordinatorReady(Long.MAX_VALUE);\n\n        \r\n        MockCommitCallback cb = new MockCommitCallback();\n        prepareOffsetCommitRequest(singletonMap(t1p, 100L), Errors.COORDINATOR_NOT_AVAILABLE);\n        coordinator.commitOffsetsAsync(singletonMap(t1p, new OffsetAndMetadata(100L)), cb);\n        coordinator.invokeCompletedOffsetCommitCallbacks();\n\n        assertTrue(coordinator.coordinatorUnknown());\n        assertEquals(1, cb.invoked);\n        assertTrue(cb.exception instanceof RetriableCommitFailedException);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerCoordinatorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1401,"status":"M"}],"commitId":"fc5f6b0e46ff81302b3e445fed0cdf454c942792","commitMessage":"@@@MINOR: Add Timer to simplify timeout bookkeeping and use it in the consumer (#5087)\n\nWe currently do a lot of bookkeeping for timeouts which is both error-prone and distracting. This patch adds a new `Timer` class to simplify this logic and control unnecessary calls to system time. In particular.  this helps with nested timeout operations. The consumer has been updated to use the new class.\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-08-04 08:25:07","modifiedFileCount":"17","status":"M","submitter":"Jason Gustafson"}]
