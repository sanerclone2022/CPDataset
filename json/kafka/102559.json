[{"authorTime":"2020-05-22 23:41:28","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":11,"curCode":"    public void shouldProcessViaThroughTopic() {\n        final KStream<String, String> source = builder.stream(\"topic-source\");\n        final KStream<String, String> through = source.through(\"topic-sink\");\n\n        final MockProcessorSupplier<String, String> sourceProcessorSupplier = new MockProcessorSupplier<>();\n        source.process(sourceProcessorSupplier);\n\n        final MockProcessorSupplier<String, String> throughProcessorSupplier = new MockProcessorSupplier<>();\n        through.process(throughProcessorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                    driver.createInputTopic(\"topic-source\", new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"A\", \"aa\");\n        }\n\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), sourceProcessorSupplier.theCapturedProcessor().processed);\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), throughProcessorSupplier.theCapturedProcessor().processed);\n    }\n","date":"2019-10-07 16:01:58","endLine":287,"groupId":"20515","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldProcessViaThroughTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/1829771ef77d4cb3aedb45b870f8a508499d4b.src","preCode":"    public void shouldProcessViaThroughTopic() {\n        final KStream<String, String> source = builder.stream(\"topic-source\");\n        final KStream<String, String> through = source.through(\"topic-sink\");\n\n        final MockProcessorSupplier<String, String> sourceProcessorSupplier = new MockProcessorSupplier<>();\n        source.process(sourceProcessorSupplier);\n\n        final MockProcessorSupplier<String, String> throughProcessorSupplier = new MockProcessorSupplier<>();\n        through.process(throughProcessorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                    driver.createInputTopic(\"topic-source\", new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"A\", \"aa\");\n        }\n\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), sourceProcessorSupplier.theCapturedProcessor().processed);\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), throughProcessorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":269,"status":"NB"},{"authorDate":"2020-05-22 23:41:28","commitOrder":11,"curCode":"    public void shouldProcessViaRepartitionTopic() {\n        final KStream<String, String> source = builder.stream(\"topic-source\");\n        final KStream<String, String> through = source.repartition();\n\n        final MockProcessorSupplier<String, String> sourceProcessorSupplier = new MockProcessorSupplier<>();\n        source.process(sourceProcessorSupplier);\n\n        final MockProcessorSupplier<String, String> throughProcessorSupplier = new MockProcessorSupplier<>();\n        through.process(throughProcessorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(\"topic-source\", new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"A\", \"aa\");\n        }\n\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), sourceProcessorSupplier.theCapturedProcessor().processed);\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), throughProcessorSupplier.theCapturedProcessor().processed);\n    }\n","date":"2020-05-22 23:41:28","endLine":309,"groupId":"20515","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldProcessViaRepartitionTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f7/7b3e586e891fa3214e9c2f9cf87bdb9b2e6925.src","preCode":"    public void shouldProcessViaRepartitionTopic() {\n        final KStream<String, String> source = builder.stream(\"topic-source\");\n        final KStream<String, String> through = source.repartition();\n\n        final MockProcessorSupplier<String, String> sourceProcessorSupplier = new MockProcessorSupplier<>();\n        source.process(sourceProcessorSupplier);\n\n        final MockProcessorSupplier<String, String> throughProcessorSupplier = new MockProcessorSupplier<>();\n        through.process(throughProcessorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(\"topic-source\", new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"A\", \"aa\");\n        }\n\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), sourceProcessorSupplier.theCapturedProcessor().processed);\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), throughProcessorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"B"}],"commitId":"27824baa210b9744074ac1fcdabbf1c8ff1b42ca","commitMessage":"@@@KAFKA-10003: Mark KStream.through() as deprecated and update Scala API (#8679)\n\n - part of KIP-221\n\nCo-authored-by: John Roesler <john@confluent.io>","date":"2020-05-22 23:41:28","modifiedFileCount":"14","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-08-21 03:06:16","codes":[{"authorDate":"2020-08-21 03:06:16","commitOrder":12,"curCode":"    public void shouldProcessViaThroughTopic() {\n        final KStream<String, String> source = builder.stream(\"topic-source\");\n        final KStream<String, String> through = source.through(\"topic-sink\");\n\n        final MockProcessorSupplier<String, String> sourceProcessorSupplier = new MockProcessorSupplier<>();\n        source.process(sourceProcessorSupplier);\n\n        final MockProcessorSupplier<String, String> throughProcessorSupplier = new MockProcessorSupplier<>();\n        through.process(throughProcessorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(\"topic-source\", new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"A\", \"aa\");\n        }\n\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), sourceProcessorSupplier.theCapturedProcessor().processed());\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), throughProcessorSupplier.theCapturedProcessor().processed());\n    }\n","date":"2020-08-21 03:06:16","endLine":332,"groupId":"102559","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldProcessViaThroughTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/12/9a409e8bd4cf40c8064ddf1ee509c9724b2c81.src","preCode":"    public void shouldProcessViaThroughTopic() {\n        final KStream<String, String> source = builder.stream(\"topic-source\");\n        final KStream<String, String> through = source.through(\"topic-sink\");\n\n        final MockProcessorSupplier<String, String> sourceProcessorSupplier = new MockProcessorSupplier<>();\n        source.process(sourceProcessorSupplier);\n\n        final MockProcessorSupplier<String, String> throughProcessorSupplier = new MockProcessorSupplier<>();\n        through.process(throughProcessorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                    driver.createInputTopic(\"topic-source\", new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"A\", \"aa\");\n        }\n\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), sourceProcessorSupplier.theCapturedProcessor().processed);\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), throughProcessorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"},{"authorDate":"2020-08-21 03:06:16","commitOrder":12,"curCode":"    public void shouldProcessViaRepartitionTopic() {\n        final KStream<String, String> source = builder.stream(\"topic-source\");\n        final KStream<String, String> through = source.repartition();\n\n        final MockProcessorSupplier<String, String> sourceProcessorSupplier = new MockProcessorSupplier<>();\n        source.process(sourceProcessorSupplier);\n\n        final MockProcessorSupplier<String, String> throughProcessorSupplier = new MockProcessorSupplier<>();\n        through.process(throughProcessorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(\"topic-source\", new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"A\", \"aa\");\n        }\n\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), sourceProcessorSupplier.theCapturedProcessor().processed());\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), throughProcessorSupplier.theCapturedProcessor().processed());\n    }\n","date":"2020-08-21 03:06:16","endLine":353,"groupId":"102559","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldProcessViaRepartitionTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/12/9a409e8bd4cf40c8064ddf1ee509c9724b2c81.src","preCode":"    public void shouldProcessViaRepartitionTopic() {\n        final KStream<String, String> source = builder.stream(\"topic-source\");\n        final KStream<String, String> through = source.repartition();\n\n        final MockProcessorSupplier<String, String> sourceProcessorSupplier = new MockProcessorSupplier<>();\n        source.process(sourceProcessorSupplier);\n\n        final MockProcessorSupplier<String, String> throughProcessorSupplier = new MockProcessorSupplier<>();\n        through.process(throughProcessorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(\"topic-source\", new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"A\", \"aa\");\n        }\n\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), sourceProcessorSupplier.theCapturedProcessor().processed);\n        assertEquals(Collections.singletonList(new KeyValueTimestamp<>(\"A\", \"aa\", 0)), throughProcessorSupplier.theCapturedProcessor().processed);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"}],"commitId":"88d4bc4641064d21a481ba3b8562a4c97703d64d","commitMessage":"@@@KAFKA-10379: Implement the KIP-478 StreamBuilder#addGlobalStore() (#9148)\n\nFrom KIP-478.  implement the new StreamBuilder#addGlobalStore() overload\nthat takes a stateUpdateSupplier fully typed Processor<KIn.  VIn.  Void.  Void>.\n\nWhere necessary.  use the adapters to make the old APIs defer to the new ones. \nas well as limiting the scope of this change set.\n\nReviewers: Boyang Chen <boyang@apache.org>","date":"2020-08-21 03:06:16","modifiedFileCount":"41","status":"M","submitter":"John Roesler"}]
