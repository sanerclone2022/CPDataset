[{"authorTime":"2018-03-10 03:08:08","codes":[{"authorDate":"2018-03-10 03:08:08","commitOrder":1,"curCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = Serde.class.cast(Utils.newInstance(value, Serde.class)).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","date":"2018-03-10 03:08:08","endLine":59,"groupId":"15789","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalMap<String@?>configs@finalbooleanisKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/754191412021fa010bacefc7cb34707b93a98b.src","preCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = Serde.class.cast(Utils.newInstance(value, Serde.class)).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/TimeWindowedSerializer.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2018-03-10 03:08:08","commitOrder":1,"curCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            String value = (String) configs.get(propertyName);\n            try {\n                inner = Serde.class.cast(Utils.newInstance(value, Serde.class)).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","date":"2018-03-10 03:08:08","endLine":59,"groupId":"15789","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalMap<String@?>configs@finalbooleanisKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/48/4b3afde757bd408e4b441de5ca5a1839771e3d.src","preCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            String value = (String) configs.get(propertyName);\n            try {\n                inner = Serde.class.cast(Utils.newInstance(value, Serde.class)).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/SessionWindowedSerializer.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"b1aa1912f08765d9914e3d036deee6b71ea009dd","commitMessage":"@@@KAFKA-4831: Extract WindowedSerde to public APIs (#3307)\n\nNow that we have augmented WindowSerde with non-arg parameters.  extract it out as part of the public APIs so that users who want to I/O windowed streams can use it. This is originally introduced by @vitaly-pushkar\n\nThis PR grows out to be a much larger one.  as I found a few tech debts and bugs while working on it. Here is a summary of the PR:\n\nPublic API changes (I will propose a KIP after a first round of reviews):\nAdd TimeWindowedSerializer.  TimeWindowedDeserializer.  SessionWindowedSerializer.  SessionWindowedDeserializer into o.a.k.streams.kstream. The serializers would implemented an internal WindowedSerializer interface for the serializeBaseKey function used in 3) below.\n\nAdd WindowedSerdes into o.a.k.streams.kstream. The reason to now add them into o.a.k.clients's Serdes is that it then needs dependency of streams.\n\nAdd \"default.windowed.key.serde.inner\" and \"default.windowed.value.serde.inner\" into StreamsConfig.  used when \"default.key.serde\" is specified to use time or session windowed serde. Note this requires the serde class.  not the type class.\n\nConsolidated serde format from multiple classes.  including SessionKeySerde.java for session.  and WindowStoreUtils for time window.  into SessionKeySchema and WindowKeySchema.\n\nBug fix: WindowedStreamPartitioner needs to consider both time window and session window serdes.\n\nRemoved RocksDBWindowBytesStore etc optimization since after KIP-182 all the serde know happens on metered store.  hence this optimization is not worth.\n\nBug fix: for time window.  the serdes used for store and the serdes used for piping (source and sink node) are different: the former needs to append sequence number but not for the later.\n\nOther minor cleanups: remove unnecessary throws.  etc.\n\nAuthors: Guozhang Wang <wangguoz@gmail.com>.  Vitaly Pushkar <vitaly.pushkar@gmail.com>\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Bill Bejeck <bill@confluent.io>.  Xi Hu","date":"2018-03-10 03:08:08","modifiedFileCount":"37","status":"B","submitter":"Vitaly Pushkar"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2018-03-10 03:08:08","commitOrder":2,"curCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = Serde.class.cast(Utils.newInstance(value, Serde.class)).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","date":"2018-03-10 03:08:08","endLine":59,"groupId":"15789","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalMap<String@?>configs@finalbooleanisKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6b/754191412021fa010bacefc7cb34707b93a98b.src","preCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = Serde.class.cast(Utils.newInstance(value, Serde.class)).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/TimeWindowedSerializer.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2018-08-04 04:19:46","commitOrder":2,"curCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = Serde.class.cast(Utils.newInstance(value, Serde.class)).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","date":"2018-08-04 04:19:46","endLine":59,"groupId":"15789","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalMap<String@?>configs@finalbooleanisKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/43/0fd637b7483faaeec46be741e8d0463a3314d1.src","preCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            String value = (String) configs.get(propertyName);\n            try {\n                inner = Serde.class.cast(Utils.newInstance(value, Serde.class)).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/SessionWindowedSerializer.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"3637b2c374d48e99e0a7be37605d3c79f2661007","commitMessage":"@@@MINOR: Require final variables in Streams (#5452)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-08-04 04:19:46","modifiedFileCount":"212","status":"M","submitter":"John Roesler"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2018-12-11 17:54:41","commitOrder":3,"curCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = Utils.newInstance(value, Serde.class).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","date":"2018-12-11 17:54:41","endLine":60,"groupId":"21854","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalMap<String@?>configs@finalbooleanisKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/72/cdcb1525b02026a785bea4c70a065719f243ef.src","preCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = Serde.class.cast(Utils.newInstance(value, Serde.class)).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/TimeWindowedSerializer.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2018-08-04 04:19:46","commitOrder":3,"curCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = Serde.class.cast(Utils.newInstance(value, Serde.class)).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","date":"2018-08-04 04:19:46","endLine":59,"groupId":"15789","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalMap<String@?>configs@finalbooleanisKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/43/0fd637b7483faaeec46be741e8d0463a3314d1.src","preCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = Serde.class.cast(Utils.newInstance(value, Serde.class)).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/SessionWindowedSerializer.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"046b0087bd76637bbfd813ccef31693fa358ff2d","commitMessage":"@@@MINOR: improve Streams checkstyle and code cleanup (#5954)\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Nikolay Izhikov <nIzhikov@gmail.com>.  Ismael Juma <ismael@confluent.io>.  Bill Bejeck <bill@confluent.io>","date":"2018-12-11 17:54:41","modifiedFileCount":"74","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-03-20 05:29:15","codes":[{"authorDate":"2018-12-11 17:54:41","commitOrder":4,"curCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = Utils.newInstance(value, Serde.class).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","date":"2018-12-11 17:54:41","endLine":60,"groupId":"21854","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"configure","params":"(finalMap<String@?>configs@finalbooleanisKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/72/cdcb1525b02026a785bea4c70a065719f243ef.src","preCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = Utils.newInstance(value, Serde.class).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/TimeWindowedSerializer.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"},{"authorDate":"2020-03-20 05:29:15","commitOrder":4,"curCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = (Utils.newInstance(value, Serde.class)).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","date":"2020-03-20 05:29:15","endLine":59,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"configure","params":"(finalMap<String@?>configs@finalbooleanisKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a1/f48767c265cbfd323ebda6dfb4850608528d61.src","preCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = Serde.class.cast(Utils.newInstance(value, Serde.class)).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/SessionWindowedSerializer.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"21cfd0b453c878780236f623249b3b5ddec52e6e","commitMessage":"@@@MINOR: Fix generic types in StreamsBuilder and Topology (#8273)\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  Guozhang Wang <guozhang@confluent.io>.  John Roesler <john@confluent.io>","date":"2020-03-20 05:29:15","modifiedFileCount":"32","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2021-05-18 01:17:31","codes":[{"authorDate":"2021-05-18 01:17:31","commitOrder":5,"curCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        final String windowedInnerClassSerdeConfig = (String) configs.get(StreamsConfig.WINDOWED_INNER_CLASS_SERDE);\n        Serde<T> windowInnerClassSerde = null;\n        if (windowedInnerClassSerdeConfig != null) {\n            try {\n                windowInnerClassSerde = Utils.newInstance(windowedInnerClassSerdeConfig, Serde.class);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(StreamsConfig.WINDOWED_INNER_CLASS_SERDE, windowedInnerClassSerdeConfig,\n                    \"Serde class \" + windowedInnerClassSerdeConfig + \" could not be found.\");\n            }\n        }\n\n        if (inner != null && windowedInnerClassSerdeConfig != null) {\n            if (!inner.getClass().getName().equals(windowInnerClassSerde.serializer().getClass().getName())) {\n                throw new IllegalArgumentException(\"Inner class serializer set using constructor \"\n                    + \"(\" + inner.getClass().getName() + \")\" +\n                    \" is different from the one set in windowed.inner.class.serde config \" +\n                    \"(\" + windowInnerClassSerde.serializer().getClass().getName() + \").\");\n            }\n        } else if (inner == null && windowedInnerClassSerdeConfig == null) {\n            throw new IllegalArgumentException(\"Inner class serializer should be set either via constructor \" +\n                \"or via the windowed.inner.class.serde config\");\n        } else if (inner == null)\n            inner = windowInnerClassSerde.serializer();\n    }\n","date":"2021-05-18 01:17:31","endLine":67,"groupId":"103038","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"configure","params":"(finalMap<String@?>configs@finalbooleanisKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/bdd6a3b713f6dfc40b62d8acc137c397480fa4.src","preCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = Utils.newInstance(value, Serde.class).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/TimeWindowedSerializer.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"},{"authorDate":"2021-05-18 01:17:31","commitOrder":5,"curCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        final String windowedInnerClassSerdeConfig = (String) configs.get(StreamsConfig.WINDOWED_INNER_CLASS_SERDE);\n        Serde<T> windowInnerClassSerde = null;\n        if (windowedInnerClassSerdeConfig != null) {\n            try {\n                windowInnerClassSerde = Utils.newInstance(windowedInnerClassSerdeConfig, Serde.class);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(StreamsConfig.WINDOWED_INNER_CLASS_SERDE, windowedInnerClassSerdeConfig,\n                    \"Serde class \" + windowedInnerClassSerdeConfig + \" could not be found.\");\n            }\n        }\n\n        if (inner != null && windowedInnerClassSerdeConfig != null) {\n            if (!inner.getClass().getName().equals(windowInnerClassSerde.serializer().getClass().getName())) {\n                throw new IllegalArgumentException(\"Inner class serializer set using constructor \"\n                    + \"(\" + inner.getClass().getName() + \")\" +\n                    \" is different from the one set in windowed.inner.class.serde config \" +\n                    \"(\" + windowInnerClassSerde.serializer().getClass().getName() + \").\");\n            }\n        } else if (inner == null && windowedInnerClassSerdeConfig == null) {\n            throw new IllegalArgumentException(\"Inner class serializer should be set either via constructor \" +\n                \"or via the windowed.inner.class.serde config\");\n        } else if (inner == null)\n            inner = windowInnerClassSerde.serializer();\n    }\n","date":"2021-05-18 01:17:31","endLine":66,"groupId":"103038","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"configure","params":"(finalMap<String@?>configs@finalbooleanisKey)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/6e/c10bf8668597e5871ca04d90977696456d51e6.src","preCode":"    public void configure(final Map<String, ?> configs, final boolean isKey) {\n        if (inner == null) {\n            final String propertyName = isKey ? StreamsConfig.DEFAULT_WINDOWED_KEY_SERDE_INNER_CLASS : StreamsConfig.DEFAULT_WINDOWED_VALUE_SERDE_INNER_CLASS;\n            final String value = (String) configs.get(propertyName);\n            try {\n                inner = (Utils.newInstance(value, Serde.class)).serializer();\n                inner.configure(configs, isKey);\n            } catch (final ClassNotFoundException e) {\n                throw new ConfigException(propertyName, value, \"Serde class \" + value + \" could not be found.\");\n            }\n        }\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/SessionWindowedSerializer.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"M"}],"commitId":"b9acc492a568ba869a8abdee0fa965f5f58c4de6","commitMessage":"@@@KAFKA-12313: KIP-725: Streamlining configs for Windowed Deserialisers (#10542)\n\nThis PR aims to streamline the configurations for WindowedDeserialisers as described in KIP-725. It deprecates default.windowed.key.serde.inner and default.windowed.value.serde.inner configs in StreamConfig and adds windowed.inner.class.serde. \n\nReviewers: Anna Sophie Blee-Goldman<ableegoldman@apache.org>","date":"2021-05-18 01:17:31","modifiedFileCount":"11","status":"M","submitter":"vamossagar12"}]
