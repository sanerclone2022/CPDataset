[{"authorTime":"2020-11-05 06:21:44","codes":[{"authorDate":"2018-10-25 19:40:14","commitOrder":7,"curCode":"    public void testPrincipalBuilderScram() throws Exception {\n        SaslServer server = mock(SaslServer.class);\n\n        when(server.getMechanismName()).thenReturn(ScramMechanism.SCRAM_SHA_256.mechanismName());\n        when(server.getAuthorizationID()).thenReturn(\"foo\");\n\n        DefaultKafkaPrincipalBuilder builder = new DefaultKafkaPrincipalBuilder(null, null);\n\n        KafkaPrincipal principal = builder.build(new SaslAuthenticationContext(server,\n                SecurityProtocol.SASL_PLAINTEXT, InetAddress.getLocalHost(), SecurityProtocol.SASL_PLAINTEXT.name()));\n        assertEquals(KafkaPrincipal.USER_TYPE, principal.getPrincipalType());\n        assertEquals(\"foo\", principal.getName());\n\n        builder.close();\n\n        verify(server, atLeastOnce()).getMechanismName();\n        verify(server, atLeastOnce()).getAuthorizationID();\n    }\n","date":"2018-10-25 19:40:14","endLine":192,"groupId":"6769","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPrincipalBuilderScram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dd/5087a84b38768440f9bef0ce9c70f0b974c235.src","preCode":"    public void testPrincipalBuilderScram() throws Exception {\n        SaslServer server = mock(SaslServer.class);\n\n        when(server.getMechanismName()).thenReturn(ScramMechanism.SCRAM_SHA_256.mechanismName());\n        when(server.getAuthorizationID()).thenReturn(\"foo\");\n\n        DefaultKafkaPrincipalBuilder builder = new DefaultKafkaPrincipalBuilder(null, null);\n\n        KafkaPrincipal principal = builder.build(new SaslAuthenticationContext(server,\n                SecurityProtocol.SASL_PLAINTEXT, InetAddress.getLocalHost(), SecurityProtocol.SASL_PLAINTEXT.name()));\n        assertEquals(KafkaPrincipal.USER_TYPE, principal.getPrincipalType());\n        assertEquals(\"foo\", principal.getName());\n\n        builder.close();\n\n        verify(server, atLeastOnce()).getMechanismName();\n        verify(server, atLeastOnce()).getAuthorizationID();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/auth/DefaultKafkaPrincipalBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"NB"},{"authorDate":"2020-11-05 06:21:44","commitOrder":7,"curCode":"    public void testPrincipalBuilderSerde() throws Exception {\n        SaslServer server = mock(SaslServer.class);\n        KerberosShortNamer kerberosShortNamer = mock(KerberosShortNamer.class);\n\n        when(server.getMechanismName()).thenReturn(SaslConfigs.GSSAPI_MECHANISM);\n        when(server.getAuthorizationID()).thenReturn(\"foo/host@REALM.COM\");\n        when(kerberosShortNamer.shortName(any())).thenReturn(\"foo\");\n\n        DefaultKafkaPrincipalBuilder builder = new DefaultKafkaPrincipalBuilder(kerberosShortNamer, null);\n\n        KafkaPrincipal principal = builder.build(new SaslAuthenticationContext(server,\n            SecurityProtocol.SASL_PLAINTEXT, InetAddress.getLocalHost(), SecurityProtocol.SASL_PLAINTEXT.name()));\n        assertEquals(KafkaPrincipal.USER_TYPE, principal.getPrincipalType());\n        assertEquals(\"foo\", principal.getName());\n\n        byte[] serializedPrincipal = builder.serialize(principal);\n        KafkaPrincipal deserializedPrincipal = builder.deserialize(serializedPrincipal);\n        assertEquals(principal, deserializedPrincipal);\n\n        builder.close();\n\n        verify(server, atLeastOnce()).getMechanismName();\n        verify(server, atLeastOnce()).getAuthorizationID();\n        verify(kerberosShortNamer, atLeastOnce()).shortName(any());\n    }\n","date":"2020-11-05 06:21:44","endLine":240,"groupId":"3279","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPrincipalBuilderSerde","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/ec9a1819c2fdeb379e781a0f987883ffce8ca4.src","preCode":"    public void testPrincipalBuilderSerde() throws Exception {\n        SaslServer server = mock(SaslServer.class);\n        KerberosShortNamer kerberosShortNamer = mock(KerberosShortNamer.class);\n\n        when(server.getMechanismName()).thenReturn(SaslConfigs.GSSAPI_MECHANISM);\n        when(server.getAuthorizationID()).thenReturn(\"foo/host@REALM.COM\");\n        when(kerberosShortNamer.shortName(any())).thenReturn(\"foo\");\n\n        DefaultKafkaPrincipalBuilder builder = new DefaultKafkaPrincipalBuilder(kerberosShortNamer, null);\n\n        KafkaPrincipal principal = builder.build(new SaslAuthenticationContext(server,\n            SecurityProtocol.SASL_PLAINTEXT, InetAddress.getLocalHost(), SecurityProtocol.SASL_PLAINTEXT.name()));\n        assertEquals(KafkaPrincipal.USER_TYPE, principal.getPrincipalType());\n        assertEquals(\"foo\", principal.getName());\n\n        byte[] serializedPrincipal = builder.serialize(principal);\n        KafkaPrincipal deserializedPrincipal = builder.deserialize(serializedPrincipal);\n        assertEquals(principal, deserializedPrincipal);\n\n        builder.close();\n\n        verify(server, atLeastOnce()).getMechanismName();\n        verify(server, atLeastOnce()).getAuthorizationID();\n        verify(kerberosShortNamer, atLeastOnce()).shortName(any());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/auth/DefaultKafkaPrincipalBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"B"}],"commitId":"0814e4f645880a3c63102fc197c8912c63846ad5","commitMessage":"@@@KAFKA-10181: Use Envelope RPC to do redirection for (Incremental)AlterConfig.  AlterClientQuota and CreateTopics (#9103)\n\nThis PR adds support for forwarding of the following RPCs:\n\nAlterConfigs\nIncrementalAlterConfigs\nAlterClientQuotas\nCreateTopics\n\nCo-authored-by: Jason Gustafson <jason@confluent.io>\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2020-11-05 06:21:44","modifiedFileCount":"35","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-03-31 13:02:16","codes":[{"authorDate":"2021-03-31 13:02:16","commitOrder":8,"curCode":"    public void testPrincipalBuilderScram() throws Exception {\n        SaslServer server = mock(SaslServer.class);\n\n        when(server.getMechanismName()).thenReturn(ScramMechanism.SCRAM_SHA_256.mechanismName());\n        when(server.getAuthorizationID()).thenReturn(\"foo\");\n\n        DefaultKafkaPrincipalBuilder builder = new DefaultKafkaPrincipalBuilder(null, null);\n\n        KafkaPrincipal principal = builder.build(new SaslAuthenticationContext(server,\n                SecurityProtocol.SASL_PLAINTEXT, InetAddress.getLocalHost(), SecurityProtocol.SASL_PLAINTEXT.name()));\n        assertEquals(KafkaPrincipal.USER_TYPE, principal.getPrincipalType());\n        assertEquals(\"foo\", principal.getName());\n\n        verify(server, atLeastOnce()).getMechanismName();\n        verify(server, atLeastOnce()).getAuthorizationID();\n    }\n","date":"2021-03-31 13:02:16","endLine":133,"groupId":"103227","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testPrincipalBuilderScram","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/a03ab9075950de57fea4b7ba651d97a252c74b.src","preCode":"    public void testPrincipalBuilderScram() throws Exception {\n        SaslServer server = mock(SaslServer.class);\n\n        when(server.getMechanismName()).thenReturn(ScramMechanism.SCRAM_SHA_256.mechanismName());\n        when(server.getAuthorizationID()).thenReturn(\"foo\");\n\n        DefaultKafkaPrincipalBuilder builder = new DefaultKafkaPrincipalBuilder(null, null);\n\n        KafkaPrincipal principal = builder.build(new SaslAuthenticationContext(server,\n                SecurityProtocol.SASL_PLAINTEXT, InetAddress.getLocalHost(), SecurityProtocol.SASL_PLAINTEXT.name()));\n        assertEquals(KafkaPrincipal.USER_TYPE, principal.getPrincipalType());\n        assertEquals(\"foo\", principal.getName());\n\n        builder.close();\n\n        verify(server, atLeastOnce()).getMechanismName();\n        verify(server, atLeastOnce()).getAuthorizationID();\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/auth/DefaultKafkaPrincipalBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2021-03-31 13:02:16","commitOrder":8,"curCode":"    public void testPrincipalBuilderSerde() throws Exception {\n        SaslServer server = mock(SaslServer.class);\n        KerberosShortNamer kerberosShortNamer = mock(KerberosShortNamer.class);\n\n        when(server.getMechanismName()).thenReturn(SaslConfigs.GSSAPI_MECHANISM);\n        when(server.getAuthorizationID()).thenReturn(\"foo/host@REALM.COM\");\n        when(kerberosShortNamer.shortName(any())).thenReturn(\"foo\");\n\n        DefaultKafkaPrincipalBuilder builder = new DefaultKafkaPrincipalBuilder(kerberosShortNamer, null);\n\n        KafkaPrincipal principal = builder.build(new SaslAuthenticationContext(server,\n            SecurityProtocol.SASL_PLAINTEXT, InetAddress.getLocalHost(), SecurityProtocol.SASL_PLAINTEXT.name()));\n        assertEquals(KafkaPrincipal.USER_TYPE, principal.getPrincipalType());\n        assertEquals(\"foo\", principal.getName());\n\n        byte[] serializedPrincipal = builder.serialize(principal);\n        KafkaPrincipal deserializedPrincipal = builder.deserialize(serializedPrincipal);\n        assertEquals(principal, deserializedPrincipal);\n\n        verify(server, atLeastOnce()).getMechanismName();\n        verify(server, atLeastOnce()).getAuthorizationID();\n        verify(kerberosShortNamer, atLeastOnce()).shortName(any());\n    }\n","date":"2021-03-31 13:02:16","endLine":179,"groupId":"103227","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testPrincipalBuilderSerde","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/a03ab9075950de57fea4b7ba651d97a252c74b.src","preCode":"    public void testPrincipalBuilderSerde() throws Exception {\n        SaslServer server = mock(SaslServer.class);\n        KerberosShortNamer kerberosShortNamer = mock(KerberosShortNamer.class);\n\n        when(server.getMechanismName()).thenReturn(SaslConfigs.GSSAPI_MECHANISM);\n        when(server.getAuthorizationID()).thenReturn(\"foo/host@REALM.COM\");\n        when(kerberosShortNamer.shortName(any())).thenReturn(\"foo\");\n\n        DefaultKafkaPrincipalBuilder builder = new DefaultKafkaPrincipalBuilder(kerberosShortNamer, null);\n\n        KafkaPrincipal principal = builder.build(new SaslAuthenticationContext(server,\n            SecurityProtocol.SASL_PLAINTEXT, InetAddress.getLocalHost(), SecurityProtocol.SASL_PLAINTEXT.name()));\n        assertEquals(KafkaPrincipal.USER_TYPE, principal.getPrincipalType());\n        assertEquals(\"foo\", principal.getName());\n\n        byte[] serializedPrincipal = builder.serialize(principal);\n        KafkaPrincipal deserializedPrincipal = builder.deserialize(serializedPrincipal);\n        assertEquals(principal, deserializedPrincipal);\n\n        builder.close();\n\n        verify(server, atLeastOnce()).getMechanismName();\n        verify(server, atLeastOnce()).getAuthorizationID();\n        verify(kerberosShortNamer, atLeastOnce()).shortName(any());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/common/security/auth/DefaultKafkaPrincipalBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"e8754ba7a01f33ba503ef79de66a5f644cc2ced8","commitMessage":"@@@KAFKA-12578: Remove deprecated security classes/methods for 3.0 (#10435)\n\nMore specifically.  remove deprecated:\n- Constants in SslConfigs\n- Constants in SaslConfigs\n- AclBinding constructor\n- AclBindingFilter constructor\n- PrincipalBuilder and DefaultPrincipalBuilder classes\n- ResourceFilter\n\nAlso simplify tests and code that no longer have to handle the removed `PrincipalBuilder`.\n\nThese removals seem non controversial. There is a straightforward alternative. The\ndeprecations happened in 1.0.0 and 2.0.0.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-03-31 13:02:16","modifiedFileCount":"13","status":"M","submitter":"Ismael Juma"}]
