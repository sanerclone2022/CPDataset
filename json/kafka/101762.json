[{"authorTime":"2021-03-21 10:19:01","codes":[{"authorDate":"2021-03-21 10:19:01","commitOrder":1,"curCode":"    public void shouldIncludeKeyInStreamLeftJoinResults() {\n        leftStream.leftJoin(\n                rightStream,\n                valueJoinerWithKey,\n                joinWindows,\n                streamJoined\n        ).to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n        \r\n        \r\n        \r\n        final List<KeyValue<String, String>> expectedResults = Arrays.asList(KeyValue.pair(\"A\", \"A:3\"), KeyValue.pair(\"A\", \"A:5\"));\n        runJoinTopology(builder,\n                expectedResults,\n                false,\n                rightTopic\n        );\n    }\n","date":"2021-03-21 10:19:01","endLine":117,"groupId":"13149","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldIncludeKeyInStreamLeftJoinResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0d/93cf09d662310a49a18ab9b5aa5517fae12b77.src","preCode":"    public void shouldIncludeKeyInStreamLeftJoinResults() {\n        leftStream.leftJoin(\n                rightStream,\n                valueJoinerWithKey,\n                joinWindows,\n                streamJoined\n        ).to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n        \r\n        \r\n        \r\n        final List<KeyValue<String, String>> expectedResults = Arrays.asList(KeyValue.pair(\"A\", \"A:3\"), KeyValue.pair(\"A\", \"A:5\"));\n        runJoinTopology(builder,\n                expectedResults,\n                false,\n                rightTopic\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplValueJoinerWithKeyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"B"},{"authorDate":"2021-03-21 10:19:01","commitOrder":1,"curCode":"    public void shouldIncludeKeyInStreamOuterJoinResults() {\n        leftStream.outerJoin(\n                rightStream,\n                valueJoinerWithKey,\n                joinWindows,\n                streamJoined\n        ).to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n\n        \r\n        \r\n        \r\n        final List<KeyValue<String, String>> expectedResults = Arrays.asList(KeyValue.pair(\"A\", \"A:3\"), KeyValue.pair(\"A\", \"A:5\"));\n        runJoinTopology(builder,\n                expectedResults,\n                false,\n                rightTopic\n        );\n    }\n","date":"2021-03-21 10:19:01","endLine":137,"groupId":"13149","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldIncludeKeyInStreamOuterJoinResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0d/93cf09d662310a49a18ab9b5aa5517fae12b77.src","preCode":"    public void shouldIncludeKeyInStreamOuterJoinResults() {\n        leftStream.outerJoin(\n                rightStream,\n                valueJoinerWithKey,\n                joinWindows,\n                streamJoined\n        ).to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n\n        \r\n        \r\n        \r\n        final List<KeyValue<String, String>> expectedResults = Arrays.asList(KeyValue.pair(\"A\", \"A:3\"), KeyValue.pair(\"A\", \"A:5\"));\n        runJoinTopology(builder,\n                expectedResults,\n                false,\n                rightTopic\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplValueJoinerWithKeyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"B"}],"commitId":"a290c8e1df371a5605d1eb2ed527f6021f2766b6","commitMessage":"@@@KAFKA-3745: Add access to read-only key in value joiner (#10150)\n\nThis PR implements adding read-only access to the key for KStream.join as described in KIP-149\n\nThis PR as it stands does not affect the Streams Scala API. Updating the Streams Scala API will be done in a follow-up PR.\nAdditionally.  the original KIP did not include the KTable API.  but I don't see any reason why we wouldn't want the same functionality there as well.  this will be done in an additional follow-up PR after updating the existing KIP.\n\nReviewers: Matthias J. Sax <mjsax@apache.org>","date":"2021-03-21 10:19:01","modifiedFileCount":"11","status":"B","submitter":"Bill Bejeck"},{"authorTime":"2021-04-29 08:57:28","codes":[{"authorDate":"2021-04-29 08:57:28","commitOrder":2,"curCode":"    public void shouldIncludeKeyInStreamLeftJoinResults() {\n        leftStream.leftJoin(\n                rightStream,\n                valueJoinerWithKey,\n                joinWindows,\n                streamJoined\n        ).to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n        \r\n        \r\n        final List<KeyValue<String, String>> expectedResults = Arrays.asList(KeyValue.pair(\"A\", \"A:5\"));\n        runJoinTopology(builder,\n                expectedResults,\n                false,\n                rightTopic\n        );\n    }\n","date":"2021-04-29 08:57:28","endLine":116,"groupId":"13149","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldIncludeKeyInStreamLeftJoinResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/00/0faadfdc953ac775a3ffe0d31bdcfe5ebd20ab.src","preCode":"    public void shouldIncludeKeyInStreamLeftJoinResults() {\n        leftStream.leftJoin(\n                rightStream,\n                valueJoinerWithKey,\n                joinWindows,\n                streamJoined\n        ).to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n        \r\n        \r\n        \r\n        final List<KeyValue<String, String>> expectedResults = Arrays.asList(KeyValue.pair(\"A\", \"A:3\"), KeyValue.pair(\"A\", \"A:5\"));\n        runJoinTopology(builder,\n                expectedResults,\n                false,\n                rightTopic\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplValueJoinerWithKeyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2021-04-29 08:57:28","commitOrder":2,"curCode":"    public void shouldIncludeKeyInStreamOuterJoinResults() {\n        leftStream.outerJoin(\n                rightStream,\n                valueJoinerWithKey,\n                joinWindows,\n                streamJoined\n        ).to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n\n        \r\n        \r\n        final List<KeyValue<String, String>> expectedResults = Arrays.asList(KeyValue.pair(\"A\", \"A:5\"));\n        runJoinTopology(builder,\n                expectedResults,\n                false,\n                rightTopic\n        );\n    }\n","date":"2021-04-29 08:57:28","endLine":135,"groupId":"13149","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldIncludeKeyInStreamOuterJoinResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/00/0faadfdc953ac775a3ffe0d31bdcfe5ebd20ab.src","preCode":"    public void shouldIncludeKeyInStreamOuterJoinResults() {\n        leftStream.outerJoin(\n                rightStream,\n                valueJoinerWithKey,\n                joinWindows,\n                streamJoined\n        ).to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n\n        \r\n        \r\n        \r\n        final List<KeyValue<String, String>> expectedResults = Arrays.asList(KeyValue.pair(\"A\", \"A:3\"), KeyValue.pair(\"A\", \"A:5\"));\n        runJoinTopology(builder,\n                expectedResults,\n                false,\n                rightTopic\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplValueJoinerWithKeyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"}],"commitId":"bf359f8e2924ee03b34a6f7e7eaf80bef55f9d98","commitMessage":"@@@KAFKA-10847: Fix spurious results on left/outer stream-stream joins (#10462)\n\nFixes the issue with https://issues.apache.org/jira/browse/KAFKA-10847.\n\nTo fix the above problem.  the left/outer stream-stream join processor uses a buffer to hold non-joined records for some time until the window closes.  so they are not processed if a join is found during the join window time. If the window of a record closes and a join was not found.  then this should be emitted and processed by the consequent topology processor.\n\nA new time-ordered window store is used to temporary hold records that do not have a join and keep the records keys ordered by time. The KStreamStreamJoin has a reference to this new store . For every non-joined record seen.  the processor writes it to this new state store without processing it. When a joined record is seen.  the processor deletes the joined record from the new state store to prevent further processing.\n\nRecords that were never joined at the end of the window + grace period are emitted to the next topology processor. I use the stream time to check for the expiry time for determinism results . The KStreamStreamJoin checks for expired records and emit them every time a new record is processed in the join processor.\n\nThe new state store is shared with the left and right join nodes. The new store needs to serialize the record keys using a combined key of <joinSide-recordKey>. This key combination helps to delete the records from the other join if a joined record is found. Two new serdes are created for this.  KeyAndJoinSideSerde which serializes a boolean value that specifies the side where the key is found.  and ValueOrOtherValueSerde that serializes either V1 or V2 based on where the key was found.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2021-04-29 08:57:28","modifiedFileCount":"11","status":"M","submitter":"Sergio Pe?a"},{"authorTime":"2021-06-17 00:25:16","codes":[{"authorDate":"2021-06-17 00:25:16","commitOrder":3,"curCode":"    public void shouldIncludeKeyInStreamLeftJoinResults() {\n        leftStream.leftJoin(\n            rightStream,\n            valueJoinerWithKey,\n            joinWindows,\n            streamJoined\n        ).to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n        \r\n        \r\n        final List<KeyValue<String, String>> expectedResults = Collections.singletonList(KeyValue.pair(\"A\", \"A:5\"));\n        runJoinTopology(\n            builder,\n            expectedResults,\n            false,\n            rightTopic\n        );\n    }\n","date":"2021-06-17 00:25:16","endLine":118,"groupId":"101762","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldIncludeKeyInStreamLeftJoinResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/5a7b26a2f3190646cac68dd0c428f7dd693ff8.src","preCode":"    public void shouldIncludeKeyInStreamLeftJoinResults() {\n        leftStream.leftJoin(\n                rightStream,\n                valueJoinerWithKey,\n                joinWindows,\n                streamJoined\n        ).to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n        \r\n        \r\n        final List<KeyValue<String, String>> expectedResults = Arrays.asList(KeyValue.pair(\"A\", \"A:5\"));\n        runJoinTopology(builder,\n                expectedResults,\n                false,\n                rightTopic\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplValueJoinerWithKeyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2021-06-17 00:25:16","commitOrder":3,"curCode":"    public void shouldIncludeKeyInStreamOuterJoinResults() {\n        leftStream.outerJoin(\n            rightStream,\n            valueJoinerWithKey,\n            joinWindows,\n            streamJoined\n        ).to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n\n        \r\n        \r\n        final List<KeyValue<String, String>> expectedResults = Collections.singletonList(KeyValue.pair(\"A\", \"A:5\"));\n        runJoinTopology(\n            builder,\n            expectedResults,\n            false,\n            rightTopic\n        );\n    }\n","date":"2021-06-17 00:25:16","endLine":138,"groupId":"101762","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldIncludeKeyInStreamOuterJoinResults","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/5a7b26a2f3190646cac68dd0c428f7dd693ff8.src","preCode":"    public void shouldIncludeKeyInStreamOuterJoinResults() {\n        leftStream.outerJoin(\n                rightStream,\n                valueJoinerWithKey,\n                joinWindows,\n                streamJoined\n        ).to(outputTopic, Produced.with(Serdes.String(), Serdes.String()));\n\n        \r\n        \r\n        final List<KeyValue<String, String>> expectedResults = Arrays.asList(KeyValue.pair(\"A\", \"A:5\"));\n        runJoinTopology(builder,\n                expectedResults,\n                false,\n                rightTopic\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplValueJoinerWithKeyTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"}],"commitId":"96767a60db4117f257e911871d139572b84be65d","commitMessage":"@@@KAFKA-12909: disable spurious left/outer stream-stream join fix for old JoinWindows API (#10861)\n\nWe changed the behavior of left/outer stream-stream join via KAFKA-10847.\nTo avoid a breaking change during an upgrade.  we need to disable this\nfix by default.\n\nWe only enable the fix if users opt-in expliclity by changing their\ncode. We leverage KIP-633 (KAFKA-8613) that offers a new JoinWindows\nAPI with mandatory grace-period to enable the fix.\n\nReviewers: Sergio Pe?a <sergio@confluent.io>.  Israel Ekpo <israelekpo@gmail.com>.  Guozhang Wang <guozhang@confluent.io>","date":"2021-06-17 00:25:16","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"}]
