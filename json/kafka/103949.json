[{"authorTime":"2020-01-14 11:17:08","codes":[{"authorDate":"2020-01-14 11:17:08","commitOrder":4,"curCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially() {\n        buildFetcher();\n\n        subscriptions.assignFromUser(Utils.mkSet(tp0, tp1));\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n\n        client.reset();\n\n        \r\n        MetadataResponse initialMetadata = TestUtils.metadataUpdateWith(3, singletonMap(topicName, 2));\n        client.updateMetadata(initialMetadata);\n\n        \r\n        client.prepareMetadataUpdate(initialMetadata);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L),\n                metadata.fetch().leaderFor(tp0));\n        client.prepareResponseFrom(listOffsetResponse(tp1, Errors.NONE, 1000L, 32L),\n                metadata.fetch().leaderFor(tp1));\n\n        \r\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 2);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = TestUtils.metadataUpdateWith(3, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n        client.prepareResponseFrom(listOffsetResponse(t2p0, Errors.NONE, 1000L, 54L),\n                metadata.fetch().leaderFor(t2p0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(tp1, ListOffsetRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(t2p0, ListOffsetRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n            fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0,\n                      offsetAndTimestampMap.get(tp0));\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp1,\n                      offsetAndTimestampMap.get(tp1));\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + t2p0,\n                      offsetAndTimestampMap.get(t2p0));\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        assertEquals(32L, offsetAndTimestampMap.get(tp1).offset());\n        assertEquals(54L, offsetAndTimestampMap.get(t2p0).offset());\n    }\n","date":"2020-01-14 11:17:08","endLine":2520,"groupId":"15077","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/45935a6a88a3c7041f01f7db8a5569e1b2bb85.src","preCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially() {\n        buildFetcher();\n\n        subscriptions.assignFromUser(Utils.mkSet(tp0, tp1));\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n\n        client.reset();\n\n        \r\n        MetadataResponse initialMetadata = TestUtils.metadataUpdateWith(3, singletonMap(topicName, 2));\n        client.updateMetadata(initialMetadata);\n\n        \r\n        client.prepareMetadataUpdate(initialMetadata);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L),\n                metadata.fetch().leaderFor(tp0));\n        client.prepareResponseFrom(listOffsetResponse(tp1, Errors.NONE, 1000L, 32L),\n                metadata.fetch().leaderFor(tp1));\n\n        \r\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 2);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = TestUtils.metadataUpdateWith(3, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n        client.prepareResponseFrom(listOffsetResponse(t2p0, Errors.NONE, 1000L, 54L),\n                metadata.fetch().leaderFor(t2p0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(tp1, ListOffsetRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(t2p0, ListOffsetRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n            fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0,\n                      offsetAndTimestampMap.get(tp0));\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp1,\n                      offsetAndTimestampMap.get(tp1));\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + t2p0,\n                      offsetAndTimestampMap.get(t2p0));\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        assertEquals(32L, offsetAndTimestampMap.get(tp1).offset());\n        assertEquals(54L, offsetAndTimestampMap.get(t2p0).offset());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2475,"status":"MB"},{"authorDate":"2020-01-14 11:17:08","commitOrder":4,"curCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException() {\n        buildFetcher();\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n        subscriptions.assignFromUser(Utils.mkSet(tp0, t2p0));\n\n        client.reset();\n\n        MetadataResponse initialMetadata = TestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadata);\n\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 1);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = TestUtils.metadataUpdateWith(1, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.LATEST_TIMESTAMP),\n                listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), true);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap = fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0,\n                     offsetAndTimestampMap.get(tp0));\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        Assert.assertNotNull(metadata.fetch().partitionCountForTopic(anotherTopic));\n    }\n","date":"2020-01-14 11:17:08","endLine":2552,"groupId":"1253","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2e/45935a6a88a3c7041f01f7db8a5569e1b2bb85.src","preCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException() {\n        buildFetcher();\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n        subscriptions.assignFromUser(Utils.mkSet(tp0, t2p0));\n\n        client.reset();\n\n        MetadataResponse initialMetadata = TestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadata);\n\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 1);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = TestUtils.metadataUpdateWith(1, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.LATEST_TIMESTAMP),\n                listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), true);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap = fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0,\n                     offsetAndTimestampMap.get(tp0));\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        Assert.assertNotNull(metadata.fetch().partitionCountForTopic(anotherTopic));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2523,"status":"B"}],"commitId":"39278d3089dfab4377051ed1ff47edf75dbf8583","commitMessage":"@@@KAFKA-9159: The caller of sendListOffsetRequest need to handle retriable InvalidMetadata (#7665)\n\nLoop call Consumer.endOffsets Throw TimeoutException: Failed to get offsets by times in 30000ms after a leader change.\n\nReviewers: Steven Lu.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-01-14 11:17:08","modifiedFileCount":"2","status":"M","submitter":"zzccctv"},{"authorTime":"2020-12-10 03:15:58","codes":[{"authorDate":"2020-12-10 03:15:58","commitOrder":5,"curCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially() {\n        buildFetcher();\n\n        subscriptions.assignFromUser(Utils.mkSet(tp0, tp1));\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n\n        client.reset();\n\n        \r\n        MetadataResponse initialMetadata = RequestTestUtils.metadataUpdateWith(3, singletonMap(topicName, 2));\n        client.updateMetadata(initialMetadata);\n\n        \r\n        client.prepareMetadataUpdate(initialMetadata);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L),\n                metadata.fetch().leaderFor(tp0));\n        client.prepareResponseFrom(listOffsetResponse(tp1, Errors.NONE, 1000L, 32L),\n                metadata.fetch().leaderFor(tp1));\n\n        \r\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 2);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = RequestTestUtils.metadataUpdateWith(3, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n        client.prepareResponseFrom(listOffsetResponse(t2p0, Errors.NONE, 1000L, 54L),\n                metadata.fetch().leaderFor(t2p0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(tp1, ListOffsetRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(t2p0, ListOffsetRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n            fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0,\n                      offsetAndTimestampMap.get(tp0));\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp1,\n                      offsetAndTimestampMap.get(tp1));\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + t2p0,\n                      offsetAndTimestampMap.get(t2p0));\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        assertEquals(32L, offsetAndTimestampMap.get(tp1).offset());\n        assertEquals(54L, offsetAndTimestampMap.get(t2p0).offset());\n    }\n","date":"2020-12-10 03:15:58","endLine":2697,"groupId":"15077","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/d65791927f683551833942cc928cadaad2f6b7.src","preCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially() {\n        buildFetcher();\n\n        subscriptions.assignFromUser(Utils.mkSet(tp0, tp1));\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n\n        client.reset();\n\n        \r\n        MetadataResponse initialMetadata = TestUtils.metadataUpdateWith(3, singletonMap(topicName, 2));\n        client.updateMetadata(initialMetadata);\n\n        \r\n        client.prepareMetadataUpdate(initialMetadata);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L),\n                metadata.fetch().leaderFor(tp0));\n        client.prepareResponseFrom(listOffsetResponse(tp1, Errors.NONE, 1000L, 32L),\n                metadata.fetch().leaderFor(tp1));\n\n        \r\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 2);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = TestUtils.metadataUpdateWith(3, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n        client.prepareResponseFrom(listOffsetResponse(t2p0, Errors.NONE, 1000L, 54L),\n                metadata.fetch().leaderFor(t2p0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(tp1, ListOffsetRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(t2p0, ListOffsetRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n            fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0,\n                      offsetAndTimestampMap.get(tp0));\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp1,\n                      offsetAndTimestampMap.get(tp1));\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + t2p0,\n                      offsetAndTimestampMap.get(t2p0));\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        assertEquals(32L, offsetAndTimestampMap.get(tp1).offset());\n        assertEquals(54L, offsetAndTimestampMap.get(t2p0).offset());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2652,"status":"M"},{"authorDate":"2020-12-10 03:15:58","commitOrder":5,"curCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException() {\n        buildFetcher();\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n        subscriptions.assignFromUser(Utils.mkSet(tp0, t2p0));\n\n        client.reset();\n\n        MetadataResponse initialMetadata = RequestTestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadata);\n\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 1);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = RequestTestUtils.metadataUpdateWith(1, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.LATEST_TIMESTAMP),\n                listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), true);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap = fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0,\n                     offsetAndTimestampMap.get(tp0));\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        Assert.assertNotNull(metadata.fetch().partitionCountForTopic(anotherTopic));\n    }\n","date":"2020-12-10 03:15:58","endLine":2729,"groupId":"1253","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5f/d65791927f683551833942cc928cadaad2f6b7.src","preCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException() {\n        buildFetcher();\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n        subscriptions.assignFromUser(Utils.mkSet(tp0, t2p0));\n\n        client.reset();\n\n        MetadataResponse initialMetadata = TestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadata);\n\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 1);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = TestUtils.metadataUpdateWith(1, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.LATEST_TIMESTAMP),\n                listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), true);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap = fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0,\n                     offsetAndTimestampMap.get(tp0));\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        Assert.assertNotNull(metadata.fetch().partitionCountForTopic(anotherTopic));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2700,"status":"M"}],"commitId":"1f98112e993bc4ae098936b1b0661fdb2c4b1880","commitMessage":"@@@MINOR: Remove connection id from Send and consolidate request/message utils (#9714)\n\nConnection id is now only present in `NetworkSend`.  which is now\nthe class used by `Selector`/`NetworkClient`/`KafkaChannel` (which\nworks well since `NetworkReceive` is the class used for\nreceived data).\n\nThe previous `NetworkSend` was also responsible for adding a size\nprefix. This logic is already present in `SendBuilder`.  but for the\nminority of cases where `SendBuilder` is not used (including\na number of tests).  we now have `ByteBufferSend.sizePrefixed()`.\n\nWith regards to the request/message utilities:\n* Renamed `toByteBuffer`/`toBytes` in `MessageUtil` to\n`toVersionPrefixedByteBuffer`/`toVersionPrefixedBytes` for clarity.\n* Introduced new `MessageUtil.toByteBuffer` that does not include\nthe version as the prefix.\n* Renamed `serializeBody` in `AbstractRequest/Response` to\n`serialize` for symmetry with `parse`.\n* Introduced `RequestTestUtils` and moved relevant methods from\n`TestUtils`.\n* Moved `serializeWithHeader` methods that were only used in\ntests to `RequestTestUtils`.\n* Deleted `MessageTestUtil`.\n\nFinally.  a couple of changes to simplify coding patterns:\n* Added `flip()` and `buffer()` to `ByteBufferAccessor`.\n* Added `MessageSizeAccumulator.sizeExcludingZeroCopy`.\n* Used lambdas instead of `TestCondition`.\n* Used `Arrays.copyOf` instead of `System.arraycopy` in `MessageUtil`.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2020-12-10 03:15:58","modifiedFileCount":"80","status":"M","submitter":"Ismael Juma"},{"authorTime":"2020-12-16 22:33:10","codes":[{"authorDate":"2020-12-16 22:33:10","commitOrder":6,"curCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially() {\n        buildFetcher();\n\n        subscriptions.assignFromUser(Utils.mkSet(tp0, tp1));\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n\n        client.reset();\n\n        \r\n        MetadataResponse initialMetadata = RequestTestUtils.metadataUpdateWith(3, singletonMap(topicName, 2));\n        client.updateMetadata(initialMetadata);\n\n        \r\n        client.prepareMetadataUpdate(initialMetadata);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L),\n                metadata.fetch().leaderFor(tp0));\n        client.prepareResponseFrom(listOffsetResponse(tp1, Errors.NONE, 1000L, 32L),\n                metadata.fetch().leaderFor(tp1));\n\n        \r\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 2);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = RequestTestUtils.metadataUpdateWith(3, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n        client.prepareResponseFrom(listOffsetResponse(t2p0, Errors.NONE, 1000L, 54L),\n                metadata.fetch().leaderFor(t2p0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(tp1, ListOffsetsRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(t2p0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n            fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0,\n                      offsetAndTimestampMap.get(tp0));\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp1,\n                      offsetAndTimestampMap.get(tp1));\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + t2p0,\n                      offsetAndTimestampMap.get(t2p0));\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        assertEquals(32L, offsetAndTimestampMap.get(tp1).offset());\n        assertEquals(54L, offsetAndTimestampMap.get(t2p0).offset());\n    }\n","date":"2020-12-16 22:33:10","endLine":2697,"groupId":"15077","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/f9e4cf87edb7a2517bbd01a2d09bd231100dc9.src","preCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially() {\n        buildFetcher();\n\n        subscriptions.assignFromUser(Utils.mkSet(tp0, tp1));\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n\n        client.reset();\n\n        \r\n        MetadataResponse initialMetadata = RequestTestUtils.metadataUpdateWith(3, singletonMap(topicName, 2));\n        client.updateMetadata(initialMetadata);\n\n        \r\n        client.prepareMetadataUpdate(initialMetadata);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L),\n                metadata.fetch().leaderFor(tp0));\n        client.prepareResponseFrom(listOffsetResponse(tp1, Errors.NONE, 1000L, 32L),\n                metadata.fetch().leaderFor(tp1));\n\n        \r\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 2);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = RequestTestUtils.metadataUpdateWith(3, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n        client.prepareResponseFrom(listOffsetResponse(t2p0, Errors.NONE, 1000L, 54L),\n                metadata.fetch().leaderFor(t2p0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(tp1, ListOffsetRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(t2p0, ListOffsetRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n            fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0,\n                      offsetAndTimestampMap.get(tp0));\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp1,\n                      offsetAndTimestampMap.get(tp1));\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + t2p0,\n                      offsetAndTimestampMap.get(t2p0));\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        assertEquals(32L, offsetAndTimestampMap.get(tp1).offset());\n        assertEquals(54L, offsetAndTimestampMap.get(t2p0).offset());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2652,"status":"M"},{"authorDate":"2020-12-16 22:33:10","commitOrder":6,"curCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException() {\n        buildFetcher();\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n        subscriptions.assignFromUser(Utils.mkSet(tp0, t2p0));\n\n        client.reset();\n\n        MetadataResponse initialMetadata = RequestTestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadata);\n\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 1);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = RequestTestUtils.metadataUpdateWith(1, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetsRequest.LATEST_TIMESTAMP),\n                listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), true);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap = fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0,\n                     offsetAndTimestampMap.get(tp0));\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        Assert.assertNotNull(metadata.fetch().partitionCountForTopic(anotherTopic));\n    }\n","date":"2020-12-16 22:33:10","endLine":2729,"groupId":"1253","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/f9e4cf87edb7a2517bbd01a2d09bd231100dc9.src","preCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException() {\n        buildFetcher();\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n        subscriptions.assignFromUser(Utils.mkSet(tp0, t2p0));\n\n        client.reset();\n\n        MetadataResponse initialMetadata = RequestTestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadata);\n\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 1);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = RequestTestUtils.metadataUpdateWith(1, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetRequest.LATEST_TIMESTAMP),\n                listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), true);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap = fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0,\n                     offsetAndTimestampMap.get(tp0));\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        Assert.assertNotNull(metadata.fetch().partitionCountForTopic(anotherTopic));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2700,"status":"M"}],"commitId":"782175dfbc4a6694ae9a3970cd92ebd20647bc7e","commitMessage":"@@@MINOR: Simplify ApiKeys by relying on ApiMessageType (#9748)\n\n* The naming for `ListOffsets` was inconsistent.  in some places it was `ListOffset` and in others\nit was `ListOffsets`. Picked the latter since it was used in metrics and the protocol documentation\nand made it consistent.\n* Removed unused methods in ApiKeys.\n* Deleted `CommonFields`.\n* Added `lowestSupportedVersion` and `highestSupportedVersion` to `ApiMessageType`\n* Removed tests in `MessageTest` that are no longer relevant.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2020-12-16 22:33:10","modifiedFileCount":"20","status":"M","submitter":"Ismael Juma"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2021-01-14 08:17:45","commitOrder":7,"curCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially() {\n        buildFetcher();\n\n        subscriptions.assignFromUser(Utils.mkSet(tp0, tp1));\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n\n        client.reset();\n\n        \r\n        MetadataResponse initialMetadata = RequestTestUtils.metadataUpdateWith(3, singletonMap(topicName, 2));\n        client.updateMetadata(initialMetadata);\n\n        \r\n        client.prepareMetadataUpdate(initialMetadata);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L),\n                metadata.fetch().leaderFor(tp0));\n        client.prepareResponseFrom(listOffsetResponse(tp1, Errors.NONE, 1000L, 32L),\n                metadata.fetch().leaderFor(tp1));\n\n        \r\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 2);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = RequestTestUtils.metadataUpdateWith(3, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n        client.prepareResponseFrom(listOffsetResponse(t2p0, Errors.NONE, 1000L, 54L),\n                metadata.fetch().leaderFor(t2p0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(tp1, ListOffsetsRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(t2p0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n            fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(offsetAndTimestampMap.get(tp0), \"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0);\n        assertNotNull(offsetAndTimestampMap.get(tp1), \"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp1);\n        assertNotNull(offsetAndTimestampMap.get(t2p0), \"Expect Fetcher.offsetsForTimes() to return non-null result for \" + t2p0);\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        assertEquals(32L, offsetAndTimestampMap.get(tp1).offset());\n        assertEquals(54L, offsetAndTimestampMap.get(t2p0).offset());\n    }\n","date":"2021-01-14 08:17:45","endLine":2695,"groupId":"15077","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/ab0f03dbf8326d495fdd9e40a2aec0d6411f1d.src","preCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially() {\n        buildFetcher();\n\n        subscriptions.assignFromUser(Utils.mkSet(tp0, tp1));\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n\n        client.reset();\n\n        \r\n        MetadataResponse initialMetadata = RequestTestUtils.metadataUpdateWith(3, singletonMap(topicName, 2));\n        client.updateMetadata(initialMetadata);\n\n        \r\n        client.prepareMetadataUpdate(initialMetadata);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L),\n                metadata.fetch().leaderFor(tp0));\n        client.prepareResponseFrom(listOffsetResponse(tp1, Errors.NONE, 1000L, 32L),\n                metadata.fetch().leaderFor(tp1));\n\n        \r\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 2);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = RequestTestUtils.metadataUpdateWith(3, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n        client.prepareResponseFrom(listOffsetResponse(t2p0, Errors.NONE, 1000L, 54L),\n                metadata.fetch().leaderFor(t2p0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(tp1, ListOffsetsRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(t2p0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n            fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0,\n                      offsetAndTimestampMap.get(tp0));\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp1,\n                      offsetAndTimestampMap.get(tp1));\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + t2p0,\n                      offsetAndTimestampMap.get(t2p0));\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        assertEquals(32L, offsetAndTimestampMap.get(tp1).offset());\n        assertEquals(54L, offsetAndTimestampMap.get(t2p0).offset());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2653,"status":"M"},{"authorDate":"2021-01-14 08:17:45","commitOrder":7,"curCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException() {\n        buildFetcher();\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n        subscriptions.assignFromUser(Utils.mkSet(tp0, t2p0));\n\n        client.reset();\n\n        MetadataResponse initialMetadata = RequestTestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadata);\n\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 1);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = RequestTestUtils.metadataUpdateWith(1, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetsRequest.LATEST_TIMESTAMP),\n                listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), true);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap = fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(offsetAndTimestampMap.get(tp0), \"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0);\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        assertNotNull(metadata.fetch().partitionCountForTopic(anotherTopic));\n    }\n","date":"2021-01-14 08:17:45","endLine":2726,"groupId":"1253","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/ab0f03dbf8326d495fdd9e40a2aec0d6411f1d.src","preCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException() {\n        buildFetcher();\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n        subscriptions.assignFromUser(Utils.mkSet(tp0, t2p0));\n\n        client.reset();\n\n        MetadataResponse initialMetadata = RequestTestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadata);\n\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 1);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = RequestTestUtils.metadataUpdateWith(1, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetsRequest.LATEST_TIMESTAMP),\n                listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), true);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap = fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(\"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0,\n                     offsetAndTimestampMap.get(tp0));\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        Assert.assertNotNull(metadata.fetch().partitionCountForTopic(anotherTopic));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2698,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"},{"authorTime":"2021-07-08 07:02:37","codes":[{"authorDate":"2021-07-08 07:02:37","commitOrder":8,"curCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially() {\n        buildFetcher();\n\n        subscriptions.assignFromUser(Utils.mkSet(tp0, tp1));\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n\n        client.reset();\n\n        \r\n        MetadataResponse initialMetadata = RequestTestUtils.metadataUpdateWithIds(3, singletonMap(topicName, 2), topicIds);\n        client.updateMetadata(initialMetadata);\n\n        \r\n        client.prepareMetadataUpdate(initialMetadata);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L),\n                metadata.fetch().leaderFor(tp0));\n        client.prepareResponseFrom(listOffsetResponse(tp1, Errors.NONE, 1000L, 32L),\n                metadata.fetch().leaderFor(tp1));\n\n        \r\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 2);\n        partitionNumByTopic.put(anotherTopic, 1);\n        topicIds.put(\"another-topic\", Uuid.randomUuid());\n        MetadataResponse updatedMetadata = RequestTestUtils.metadataUpdateWithIds(3, partitionNumByTopic, topicIds);\n        client.prepareMetadataUpdate(updatedMetadata);\n        client.prepareResponseFrom(listOffsetResponse(t2p0, Errors.NONE, 1000L, 54L),\n                metadata.fetch().leaderFor(t2p0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(tp1, ListOffsetsRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(t2p0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n            fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(offsetAndTimestampMap.get(tp0), \"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0);\n        assertNotNull(offsetAndTimestampMap.get(tp1), \"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp1);\n        assertNotNull(offsetAndTimestampMap.get(t2p0), \"Expect Fetcher.offsetsForTimes() to return non-null result for \" + t2p0);\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        assertEquals(32L, offsetAndTimestampMap.get(tp1).offset());\n        assertEquals(54L, offsetAndTimestampMap.get(t2p0).offset());\n    }\n","date":"2021-07-08 07:02:37","endLine":2827,"groupId":"103949","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/a8d4d0de616ad523f86ea20b0b0f6e6fc16cd5.src","preCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially() {\n        buildFetcher();\n\n        subscriptions.assignFromUser(Utils.mkSet(tp0, tp1));\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n\n        client.reset();\n\n        \r\n        MetadataResponse initialMetadata = RequestTestUtils.metadataUpdateWith(3, singletonMap(topicName, 2));\n        client.updateMetadata(initialMetadata);\n\n        \r\n        client.prepareMetadataUpdate(initialMetadata);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L),\n                metadata.fetch().leaderFor(tp0));\n        client.prepareResponseFrom(listOffsetResponse(tp1, Errors.NONE, 1000L, 32L),\n                metadata.fetch().leaderFor(tp1));\n\n        \r\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 2);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = RequestTestUtils.metadataUpdateWith(3, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n        client.prepareResponseFrom(listOffsetResponse(t2p0, Errors.NONE, 1000L, 54L),\n                metadata.fetch().leaderFor(t2p0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(tp1, ListOffsetsRequest.LATEST_TIMESTAMP);\n        timestampToSearch.put(t2p0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap =\n            fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(offsetAndTimestampMap.get(tp0), \"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0);\n        assertNotNull(offsetAndTimestampMap.get(tp1), \"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp1);\n        assertNotNull(offsetAndTimestampMap.get(t2p0), \"Expect Fetcher.offsetsForTimes() to return non-null result for \" + t2p0);\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        assertEquals(32L, offsetAndTimestampMap.get(tp1).offset());\n        assertEquals(54L, offsetAndTimestampMap.get(t2p0).offset());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2784,"status":"M"},{"authorDate":"2021-07-08 07:02:37","commitOrder":8,"curCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException() {\n        buildFetcher();\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n        subscriptions.assignFromUser(Utils.mkSet(tp0, t2p0));\n\n        client.reset();\n\n        MetadataResponse initialMetadata = RequestTestUtils.metadataUpdateWithIds(1, singletonMap(topicName, 1), topicIds);\n        client.updateMetadata(initialMetadata);\n\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 1);\n        partitionNumByTopic.put(anotherTopic, 1);\n        topicIds.put(\"another-topic\", Uuid.randomUuid());\n        MetadataResponse updatedMetadata = RequestTestUtils.metadataUpdateWithIds(1, partitionNumByTopic, topicIds);\n        client.prepareMetadataUpdate(updatedMetadata);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetsRequest.LATEST_TIMESTAMP),\n                listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), true);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap = fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(offsetAndTimestampMap.get(tp0), \"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0);\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        assertNotNull(metadata.fetch().partitionCountForTopic(anotherTopic));\n    }\n","date":"2021-07-08 07:02:37","endLine":2859,"groupId":"103949","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ec/a8d4d0de616ad523f86ea20b0b0f6e6fc16cd5.src","preCode":"    public void testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException() {\n        buildFetcher();\n        final String anotherTopic = \"another-topic\";\n        final TopicPartition t2p0 = new TopicPartition(anotherTopic, 0);\n        subscriptions.assignFromUser(Utils.mkSet(tp0, t2p0));\n\n        client.reset();\n\n        MetadataResponse initialMetadata = RequestTestUtils.metadataUpdateWith(1, singletonMap(topicName, 1));\n        client.updateMetadata(initialMetadata);\n\n        Map<String, Integer> partitionNumByTopic = new HashMap<>();\n        partitionNumByTopic.put(topicName, 1);\n        partitionNumByTopic.put(anotherTopic, 1);\n        MetadataResponse updatedMetadata = RequestTestUtils.metadataUpdateWith(1, partitionNumByTopic);\n        client.prepareMetadataUpdate(updatedMetadata);\n\n        client.prepareResponse(listOffsetRequestMatcher(ListOffsetsRequest.LATEST_TIMESTAMP),\n                listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), true);\n        client.prepareResponseFrom(listOffsetResponse(tp0, Errors.NONE, 1000L, 11L), metadata.fetch().leaderFor(tp0));\n\n        Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n        timestampToSearch.put(tp0, ListOffsetsRequest.LATEST_TIMESTAMP);\n        Map<TopicPartition, OffsetAndTimestamp> offsetAndTimestampMap = fetcher.offsetsForTimes(timestampToSearch, time.timer(Long.MAX_VALUE));\n\n        assertNotNull(offsetAndTimestampMap.get(tp0), \"Expect Fetcher.offsetsForTimes() to return non-null result for \" + tp0);\n        assertEquals(11L, offsetAndTimestampMap.get(tp0).offset());\n        assertNotNull(metadata.fetch().partitionCountForTopic(anotherTopic));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/internals/FetcherTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2830,"status":"M"}],"commitId":"2b8aff58b575c199ee8372e5689420c9d77357a5","commitMessage":"@@@KAFKA-10580: Add topic ID support to Fetch request (#9944)\n\nUpdated FetchRequest and FetchResponse to use topic IDs rather than topic names.\nSome of the complicated code is found in FetchSession and FetchSessionHandler.\nWe need to be able to store topic IDs and maintain a cache on the broker for IDs that may not have been resolved. On incremental fetch requests.  we will try to resolve them or remove them if in toForget.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>.  Chia-Ping Tsai <chia7712@gmail.com>.  Jun Rao <junrao@gmail.com>","date":"2021-07-08 07:02:37","modifiedFileCount":"23","status":"M","submitter":"Justine Olshan"}]
