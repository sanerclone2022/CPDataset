[{"authorTime":"2019-12-13 02:52:24","codes":[{"authorDate":"2019-05-12 17:50:55","commitOrder":7,"curCode":"    private <VR> StoreBuilder<TimestampedWindowStore<K, VR>> materialize(final MaterializedInternal<K, VR, WindowStore<Bytes, byte[]>> materialized) {\n        WindowBytesStoreSupplier supplier = (WindowBytesStoreSupplier) materialized.storeSupplier();\n        if (supplier == null) {\n            if (materialized.retention() != null) {\n                \r\n                final long retentionPeriod = materialized.retention().toMillis();\n\n                if ((windows.size() + windows.gracePeriodMs()) > retentionPeriod) {\n                    throw new IllegalArgumentException(\"The retention period of the window store \"\n                                                           + name + \" must be no smaller than its window size plus the grace period.\"\n                                                           + \" Got size=[\" + windows.size() + \"],\"\n                                                           + \" grace=[\" + windows.gracePeriodMs() + \"],\"\n                                                           + \" retention=[\" + retentionPeriod + \"]\");\n                }\n\n                supplier = Stores.persistentTimestampedWindowStore(\n                    materialized.storeName(),\n                    Duration.ofMillis(retentionPeriod),\n                    Duration.ofMillis(windows.size()),\n                    false\n                );\n\n            } else {\n                \r\n\n                \r\n                \r\n\n                if ((windows.size() + windows.gracePeriodMs()) > windows.maintainMs()) {\n                    throw new IllegalArgumentException(\"The retention period of the window store \"\n                                                           + name + \" must be no smaller than its window size plus the grace period.\"\n                                                           + \" Got size=[\" + windows.size() + \"],\"\n                                                           + \" grace=[\" + windows.gracePeriodMs() + \"],\"\n                                                           + \" retention=[\" + windows.maintainMs() + \"]\");\n                }\n\n                supplier = new RocksDbWindowBytesStoreSupplier(\n                    materialized.storeName(),\n                    windows.maintainMs(),\n                    Math.max(windows.maintainMs() / (windows.segments - 1), 60_000L),\n                    windows.size(),\n                    false,\n                    true);\n            }\n        }\n        final StoreBuilder<TimestampedWindowStore<K, VR>> builder = Stores.timestampedWindowStoreBuilder(\n            supplier,\n            materialized.keySerde(),\n            materialized.valueSerde()\n        );\n\n        if (materialized.loggingEnabled()) {\n            builder.withLoggingEnabled(materialized.logConfig());\n        } else {\n            builder.withLoggingDisabled();\n        }\n\n        if (materialized.cachingEnabled()) {\n            builder.withCachingEnabled();\n        }\n        return builder;\n    }\n","date":"2019-05-12 17:50:55","endLine":220,"groupId":"22060","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"materialize","params":"(finalMaterializedInternal<K@VR@WindowStore<Bytes@byte[]>>materialized)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a2/57603564bf6740bbb17bb04ae79f13e0eff397.src","preCode":"    private <VR> StoreBuilder<TimestampedWindowStore<K, VR>> materialize(final MaterializedInternal<K, VR, WindowStore<Bytes, byte[]>> materialized) {\n        WindowBytesStoreSupplier supplier = (WindowBytesStoreSupplier) materialized.storeSupplier();\n        if (supplier == null) {\n            if (materialized.retention() != null) {\n                \r\n                final long retentionPeriod = materialized.retention().toMillis();\n\n                if ((windows.size() + windows.gracePeriodMs()) > retentionPeriod) {\n                    throw new IllegalArgumentException(\"The retention period of the window store \"\n                                                           + name + \" must be no smaller than its window size plus the grace period.\"\n                                                           + \" Got size=[\" + windows.size() + \"],\"\n                                                           + \" grace=[\" + windows.gracePeriodMs() + \"],\"\n                                                           + \" retention=[\" + retentionPeriod + \"]\");\n                }\n\n                supplier = Stores.persistentTimestampedWindowStore(\n                    materialized.storeName(),\n                    Duration.ofMillis(retentionPeriod),\n                    Duration.ofMillis(windows.size()),\n                    false\n                );\n\n            } else {\n                \r\n\n                \r\n                \r\n\n                if ((windows.size() + windows.gracePeriodMs()) > windows.maintainMs()) {\n                    throw new IllegalArgumentException(\"The retention period of the window store \"\n                                                           + name + \" must be no smaller than its window size plus the grace period.\"\n                                                           + \" Got size=[\" + windows.size() + \"],\"\n                                                           + \" grace=[\" + windows.gracePeriodMs() + \"],\"\n                                                           + \" retention=[\" + windows.maintainMs() + \"]\");\n                }\n\n                supplier = new RocksDbWindowBytesStoreSupplier(\n                    materialized.storeName(),\n                    windows.maintainMs(),\n                    Math.max(windows.maintainMs() / (windows.segments - 1), 60_000L),\n                    windows.size(),\n                    false,\n                    true);\n            }\n        }\n        final StoreBuilder<TimestampedWindowStore<K, VR>> builder = Stores.timestampedWindowStoreBuilder(\n            supplier,\n            materialized.keySerde(),\n            materialized.valueSerde()\n        );\n\n        if (materialized.loggingEnabled()) {\n            builder.withLoggingEnabled(materialized.logConfig());\n        } else {\n            builder.withLoggingDisabled();\n        }\n\n        if (materialized.cachingEnabled()) {\n            builder.withCachingEnabled();\n        }\n        return builder;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/TimeWindowedKStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"NB"},{"authorDate":"2019-12-13 02:52:24","commitOrder":7,"curCode":"    private StoreBuilder<TimestampedWindowStore<K, V>> materialize(\n            final MaterializedInternal<K, V, WindowStore<Bytes, byte[]>> materialized) {\n        WindowBytesStoreSupplier supplier = (WindowBytesStoreSupplier) materialized.storeSupplier();\n        if (supplier == null) {\n            if (materialized.retention() != null) {\n                \r\n                final long retentionPeriod = materialized.retention().toMillis();\n\n                if ((windows.size() + windows.gracePeriodMs()) > retentionPeriod) {\n                    throw new IllegalArgumentException(\"The retention period of the window store \"\n                                                       + name\n                                                       + \" must be no smaller than its window size plus the grace period.\"\n                                                       + \" Got size=[\" + windows.size() + \"],\"\n                                                       + \" grace=[\" + windows.gracePeriodMs()\n                                                       + \"],\"\n                                                       + \" retention=[\" + retentionPeriod\n                                                       + \"]\");\n                }\n\n                supplier = Stores.persistentTimestampedWindowStore(\n                    materialized.storeName(),\n                    Duration.ofMillis(retentionPeriod),\n                    Duration.ofMillis(windows.size()),\n                    false\n                );\n\n            } else {\n                \r\n\n                \r\n                \r\n\n                if ((windows.size() + windows.gracePeriodMs()) > windows.maintainMs()) {\n                    throw new IllegalArgumentException(\"The retention period of the window store \"\n                                                       + name\n                                                       + \" must be no smaller than its window size plus the grace period.\"\n                                                       + \" Got size=[\" + windows.size() + \"],\"\n                                                       + \" grace=[\" + windows.gracePeriodMs()\n                                                       + \"],\"\n                                                       + \" retention=[\" + windows.maintainMs()\n                                                       + \"]\");\n                }\n\n                supplier = new RocksDbWindowBytesStoreSupplier(\n                    materialized.storeName(),\n                    windows.maintainMs(),\n                    Math.max(windows.maintainMs() / (windows.segments - 1), 60_000L),\n                    windows.size(),\n                    false,\n                    true);\n            }\n        }\n        final StoreBuilder<TimestampedWindowStore<K, V>> builder = Stores\n            .timestampedWindowStoreBuilder(\n                supplier,\n                materialized.keySerde(),\n                materialized.valueSerde()\n            );\n\n        if (materialized.loggingEnabled()) {\n            builder.withLoggingEnabled(materialized.logConfig());\n        } else {\n            builder.withLoggingDisabled();\n        }\n\n        if (materialized.cachingEnabled()) {\n            builder.withCachingEnabled();\n        }\n        return builder;\n    }\n","date":"2019-12-13 02:52:24","endLine":179,"groupId":"22060","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"materialize","params":"(finalMaterializedInternal<K@V@WindowStore<Bytes@byte[]>>materialized)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/07/e564028fbd1f8d69bc65a02697fbc668339036.src","preCode":"    private StoreBuilder<TimestampedWindowStore<K, V>> materialize(\n            final MaterializedInternal<K, V, WindowStore<Bytes, byte[]>> materialized) {\n        WindowBytesStoreSupplier supplier = (WindowBytesStoreSupplier) materialized.storeSupplier();\n        if (supplier == null) {\n            if (materialized.retention() != null) {\n                \r\n                final long retentionPeriod = materialized.retention().toMillis();\n\n                if ((windows.size() + windows.gracePeriodMs()) > retentionPeriod) {\n                    throw new IllegalArgumentException(\"The retention period of the window store \"\n                                                       + name\n                                                       + \" must be no smaller than its window size plus the grace period.\"\n                                                       + \" Got size=[\" + windows.size() + \"],\"\n                                                       + \" grace=[\" + windows.gracePeriodMs()\n                                                       + \"],\"\n                                                       + \" retention=[\" + retentionPeriod\n                                                       + \"]\");\n                }\n\n                supplier = Stores.persistentTimestampedWindowStore(\n                    materialized.storeName(),\n                    Duration.ofMillis(retentionPeriod),\n                    Duration.ofMillis(windows.size()),\n                    false\n                );\n\n            } else {\n                \r\n\n                \r\n                \r\n\n                if ((windows.size() + windows.gracePeriodMs()) > windows.maintainMs()) {\n                    throw new IllegalArgumentException(\"The retention period of the window store \"\n                                                       + name\n                                                       + \" must be no smaller than its window size plus the grace period.\"\n                                                       + \" Got size=[\" + windows.size() + \"],\"\n                                                       + \" grace=[\" + windows.gracePeriodMs()\n                                                       + \"],\"\n                                                       + \" retention=[\" + windows.maintainMs()\n                                                       + \"]\");\n                }\n\n                supplier = new RocksDbWindowBytesStoreSupplier(\n                    materialized.storeName(),\n                    windows.maintainMs(),\n                    Math.max(windows.maintainMs() / (windows.segments - 1), 60_000L),\n                    windows.size(),\n                    false,\n                    true);\n            }\n        }\n        final StoreBuilder<TimestampedWindowStore<K, V>> builder = Stores\n            .timestampedWindowStoreBuilder(\n                supplier,\n                materialized.keySerde(),\n                materialized.valueSerde()\n            );\n\n        if (materialized.loggingEnabled()) {\n            builder.withLoggingEnabled(materialized.logConfig());\n        } else {\n            builder.withLoggingDisabled();\n        }\n\n        if (materialized.cachingEnabled()) {\n            builder.withCachingEnabled();\n        }\n        return builder;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/TimeWindowedCogroupedKStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"B"}],"commitId":"d1161bf1060efc2d58b9c72997500dae2b59f169","commitMessage":"@@@KAFKA-6049: Add time window support for cogroup (#7774)\n\nFollow up to PR #7538 (KIP-150)\n\nReviewer: Matthias J. Sax <matthias@confluent.io>\n","date":"2019-12-13 02:52:24","modifiedFileCount":"3","status":"M","submitter":"wcarlson5"},{"authorTime":"2021-03-29 03:33:40","codes":[{"authorDate":"2021-03-29 03:33:40","commitOrder":8,"curCode":"    private <VR> StoreBuilder<TimestampedWindowStore<K, VR>> materialize(final MaterializedInternal<K, VR, WindowStore<Bytes, byte[]>> materialized) {\n        WindowBytesStoreSupplier supplier = (WindowBytesStoreSupplier) materialized.storeSupplier();\n        if (supplier == null) {\n            final long retentionPeriod = materialized.retention() != null ?\n                materialized.retention().toMillis() : windows.size() + windows.gracePeriodMs();\n\n            if ((windows.size() + windows.gracePeriodMs()) > retentionPeriod) {\n                throw new IllegalArgumentException(\"The retention period of the window store \"\n                        + name + \" must be no smaller than its window size plus the grace period.\"\n                        + \" Got size=[\" + windows.size() + \"],\"\n                        + \" grace=[\" + windows.gracePeriodMs() + \"],\"\n                        + \" retention=[\" + retentionPeriod + \"]\");\n            }\n\n            supplier = Stores.persistentTimestampedWindowStore(\n                    materialized.storeName(),\n                    Duration.ofMillis(retentionPeriod),\n                    Duration.ofMillis(windows.size()),\n                    false\n            );\n        }\n\n        final StoreBuilder<TimestampedWindowStore<K, VR>> builder = Stores.timestampedWindowStoreBuilder(\n            supplier,\n            materialized.keySerde(),\n            materialized.valueSerde()\n        );\n\n        if (materialized.loggingEnabled()) {\n            builder.withLoggingEnabled(materialized.logConfig());\n        } else {\n            builder.withLoggingDisabled();\n        }\n\n        if (materialized.cachingEnabled()) {\n            builder.withCachingEnabled();\n        }\n        return builder;\n    }\n","date":"2021-03-29 03:33:40","endLine":251,"groupId":"102999","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"materialize","params":"(finalMaterializedInternal<K@VR@WindowStore<Bytes@byte[]>>materialized)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/22/82672a136511333cdbef38aacd58154637f1cf.src","preCode":"    private <VR> StoreBuilder<TimestampedWindowStore<K, VR>> materialize(final MaterializedInternal<K, VR, WindowStore<Bytes, byte[]>> materialized) {\n        WindowBytesStoreSupplier supplier = (WindowBytesStoreSupplier) materialized.storeSupplier();\n        if (supplier == null) {\n            if (materialized.retention() != null) {\n                \r\n                final long retentionPeriod = materialized.retention().toMillis();\n\n                if ((windows.size() + windows.gracePeriodMs()) > retentionPeriod) {\n                    throw new IllegalArgumentException(\"The retention period of the window store \"\n                                                           + name + \" must be no smaller than its window size plus the grace period.\"\n                                                           + \" Got size=[\" + windows.size() + \"],\"\n                                                           + \" grace=[\" + windows.gracePeriodMs() + \"],\"\n                                                           + \" retention=[\" + retentionPeriod + \"]\");\n                }\n\n                supplier = Stores.persistentTimestampedWindowStore(\n                    materialized.storeName(),\n                    Duration.ofMillis(retentionPeriod),\n                    Duration.ofMillis(windows.size()),\n                    false\n                );\n\n            } else {\n                \r\n\n                \r\n                \r\n\n                if ((windows.size() + windows.gracePeriodMs()) > windows.maintainMs()) {\n                    throw new IllegalArgumentException(\"The retention period of the window store \"\n                                                           + name + \" must be no smaller than its window size plus the grace period.\"\n                                                           + \" Got size=[\" + windows.size() + \"],\"\n                                                           + \" grace=[\" + windows.gracePeriodMs() + \"],\"\n                                                           + \" retention=[\" + windows.maintainMs() + \"]\");\n                }\n\n                supplier = new RocksDbWindowBytesStoreSupplier(\n                    materialized.storeName(),\n                    windows.maintainMs(),\n                    Math.max(windows.maintainMs() / (windows.segments - 1), 60_000L),\n                    windows.size(),\n                    false,\n                    true);\n            }\n        }\n        final StoreBuilder<TimestampedWindowStore<K, VR>> builder = Stores.timestampedWindowStoreBuilder(\n            supplier,\n            materialized.keySerde(),\n            materialized.valueSerde()\n        );\n\n        if (materialized.loggingEnabled()) {\n            builder.withLoggingEnabled(materialized.logConfig());\n        } else {\n            builder.withLoggingDisabled();\n        }\n\n        if (materialized.cachingEnabled()) {\n            builder.withCachingEnabled();\n        }\n        return builder;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/TimeWindowedKStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":213,"status":"M"},{"authorDate":"2021-03-29 03:33:40","commitOrder":8,"curCode":"    private StoreBuilder<TimestampedWindowStore<K, V>> materialize(\n        final MaterializedInternal<K, V, WindowStore<Bytes, byte[]>> materialized) {\n        WindowBytesStoreSupplier supplier = (WindowBytesStoreSupplier) materialized.storeSupplier();\n        if (supplier == null) {\n            final long retentionPeriod = materialized.retention() != null ?\n                materialized.retention().toMillis() : windows.size() + windows.gracePeriodMs();\n\n            if ((windows.size() + windows.gracePeriodMs()) > retentionPeriod) {\n                throw new IllegalArgumentException(\"The retention period of the window store \"\n                        + name\n                        + \" must be no smaller than its window size plus the grace period.\"\n                        + \" Got size=[\" + windows.size() + \"],\"\n                        + \" grace=[\" + windows.gracePeriodMs()\n                        + \"],\"\n                        + \" retention=[\" + retentionPeriod\n                        + \"]\");\n            }\n\n            supplier = Stores.persistentTimestampedWindowStore(\n                    materialized.storeName(),\n                    Duration.ofMillis(retentionPeriod),\n                    Duration.ofMillis(windows.size()),\n                    false\n            );\n        }\n\n        final StoreBuilder<TimestampedWindowStore<K, V>> builder = Stores\n            .timestampedWindowStoreBuilder(\n                supplier,\n                materialized.keySerde(),\n                materialized.valueSerde()\n            );\n\n        if (materialized.loggingEnabled()) {\n            builder.withLoggingEnabled(materialized.logConfig());\n        } else {\n            builder.withLoggingDisabled();\n        }\n\n        if (materialized.cachingEnabled()) {\n            builder.withCachingEnabled();\n        }\n        return builder;\n    }\n","date":"2021-03-29 03:33:40","endLine":148,"groupId":"102999","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"materialize","params":"(finalMaterializedInternal<K@V@WindowStore<Bytes@byte[]>>materialized)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8c/ef89f6197e1087b9e1dafdcc82f1aaca0b4f1f.src","preCode":"    private StoreBuilder<TimestampedWindowStore<K, V>> materialize(\n        final MaterializedInternal<K, V, WindowStore<Bytes, byte[]>> materialized) {\n        WindowBytesStoreSupplier supplier = (WindowBytesStoreSupplier) materialized.storeSupplier();\n        if (supplier == null) {\n            if (materialized.retention() != null) {\n                \r\n                final long retentionPeriod = materialized.retention().toMillis();\n\n                if ((windows.size() + windows.gracePeriodMs()) > retentionPeriod) {\n                    throw new IllegalArgumentException(\"The retention period of the window store \"\n                        + name\n                        + \" must be no smaller than its window size plus the grace period.\"\n                        + \" Got size=[\" + windows.size() + \"],\"\n                        + \" grace=[\" + windows.gracePeriodMs()\n                        + \"],\"\n                        + \" retention=[\" + retentionPeriod\n                        + \"]\");\n                }\n\n                supplier = Stores.persistentTimestampedWindowStore(\n                    materialized.storeName(),\n                    Duration.ofMillis(retentionPeriod),\n                    Duration.ofMillis(windows.size()),\n                    false\n                );\n\n            } else {\n                \r\n\n                \r\n                \r\n\n                if ((windows.size() + windows.gracePeriodMs()) > windows.maintainMs()) {\n                    throw new IllegalArgumentException(\"The retention period of the window store \"\n                        + name\n                        + \" must be no smaller than its window size plus the grace period.\"\n                        + \" Got size=[\" + windows.size() + \"],\"\n                        + \" grace=[\" + windows.gracePeriodMs()\n                        + \"],\"\n                        + \" retention=[\" + windows.maintainMs()\n                        + \"]\");\n                }\n\n                supplier = new RocksDbWindowBytesStoreSupplier(\n                    materialized.storeName(),\n                    windows.maintainMs(),\n                    Math.max(windows.maintainMs() / (windows.segments - 1), 60_000L),\n                    windows.size(),\n                    false,\n                    true);\n            }\n        }\n        final StoreBuilder<TimestampedWindowStore<K, V>> builder = Stores\n            .timestampedWindowStoreBuilder(\n                supplier,\n                materialized.keySerde(),\n                materialized.valueSerde()\n            );\n\n        if (materialized.loggingEnabled()) {\n            builder.withLoggingEnabled(materialized.logConfig());\n        } else {\n            builder.withLoggingDisabled();\n        }\n\n        if (materialized.cachingEnabled()) {\n            builder.withCachingEnabled();\n        }\n        return builder;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/kstream/internals/TimeWindowedCogroupedKStreamImpl.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"d5fd491bf7e92e4b07a0a371dfa766161ac301d2","commitMessage":"@@@KAFKA-7106: remove deprecated Windows APIs (#10378)\n\n1. Remove all deprecated APIs in KIP-328.\n2. Remove deprecated APIs in Windows in KIP-358.\n\nReviewers: John Roesler <vvcephei@apache.org>","date":"2021-03-29 03:33:40","modifiedFileCount":"16","status":"M","submitter":"Guozhang Wang"}]
