[{"authorTime":"2019-01-24 08:00:26","codes":[{"authorDate":"2018-08-18 00:35:38","commitOrder":9,"curCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        rocksDBStore = new RocksDBStore(\"test\");\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n    }\n","date":"2018-08-18 00:35:38","endLine":74,"groupId":"8707","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/5a/e32eb4effbbe83b1cabe1a04444cb0d4401df1.src","preCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        rocksDBStore = new RocksDBStore(\"test\");\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"NB"},{"authorDate":"2019-01-24 08:00:26","commitOrder":9,"curCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        rocksDBStore = new RocksDBStore(\"test\");\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        enableBloomFilters = true;\n        expectedIndex = 0;\n\n        \r\n        \r\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","date":"2019-01-24 08:00:26","endLine":467,"groupId":"8707","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldHandleToggleOfEnablingBloomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b9/8f72f58e87b265b119f0cdd00082b1b63afc30.src","preCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        rocksDBStore = new RocksDBStore(\"test\");\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        enableBloomFilters = true;\n        expectedIndex = 0;\n\n        \r\n        \r\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":423,"status":"B"}],"commitId":"0efed12f50f683131b31d33d787e2141122a5c11","commitMessage":"@@@KAFKA-4850: Enable bloomfilters (#6012)\n\nThis PR enables BloomFilters for RocksDB to speed up point lookups.\nThe request for this has been around for some time - https://issues.apache.org/jira/browse/KAFKA-4850\n\nFor testing.  I've done the following\n\nRan the standard streams suite of unit and integration tests\nKicked off the simple benchmark test with bloom filters enabled\nKicked off the simple benchmark test with bloom filters not enabled\nKicked off streams system tests\n\nMatthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>.  John Roesler <john@confluent.io>","date":"2019-01-24 08:00:26","modifiedFileCount":"3","status":"M","submitter":"Bill Bejeck"},{"authorTime":"2019-01-31 08:13:19","codes":[{"authorDate":"2019-01-31 08:13:19","commitOrder":10,"curCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n    }\n","date":"2019-01-31 08:13:19","endLine":81,"groupId":"4348","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/47/85673a1503c6f46c47178f8abe320d246a9e58.src","preCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        rocksDBStore = new RocksDBStore(\"test\");\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2019-01-31 08:13:19","commitOrder":10,"curCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","date":"2019-01-31 08:13:19","endLine":474,"groupId":"4348","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldHandleToggleOfEnablingBloomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/47/85673a1503c6f46c47178f8abe320d246a9e58.src","preCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        rocksDBStore = new RocksDBStore(\"test\");\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        enableBloomFilters = true;\n        expectedIndex = 0;\n\n        \r\n        \r\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"M"}],"commitId":"73565b7f679c281f83a5df11e662b0f27cb1e55d","commitMessage":"@@@KAFKA-3522: Add RocksDBTimestampedStore (#6149)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-01-31 08:13:19","modifiedFileCount":"5","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-01-31 08:13:19","codes":[{"authorDate":"2019-05-04 22:52:53","commitOrder":11,"curCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        filter = new BloomFilter();\n    }\n","date":"2019-05-04 22:52:53","endLine":83,"groupId":"4348","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c9/dde7799576e2fb12a8434077ae291eede5f9ef.src","preCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2019-01-31 08:13:19","commitOrder":11,"curCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","date":"2019-01-31 08:13:19","endLine":474,"groupId":"4348","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldHandleToggleOfEnablingBloomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/47/85673a1503c6f46c47178f8abe320d246a9e58.src","preCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"N"}],"commitId":"c85152f5b96a0904b7b503f8edb1485e41daca05","commitMessage":"@@@Should close filter in RocksDBStoreTest as well (#6676)\n\nForgot to also close the filter in RocksDBStoreTest in time.\n\nReviewers: Bill Bejeck <bbejeck@gmail.com>","date":"2019-05-04 22:52:53","modifiedFileCount":"1","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2019-01-31 08:13:19","codes":[{"authorDate":"2019-05-15 10:36:05","commitOrder":12,"curCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n    }\n","date":"2019-05-15 10:36:05","endLine":82,"groupId":"4348","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bf/b1ecd7c8e4489a9d01a44bd4e26a3e900a0c63.src","preCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        filter = new BloomFilter();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2019-01-31 08:13:19","commitOrder":12,"curCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","date":"2019-01-31 08:13:19","endLine":474,"groupId":"4348","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldHandleToggleOfEnablingBloomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/47/85673a1503c6f46c47178f8abe320d246a9e58.src","preCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":429,"status":"N"}],"commitId":"47fdf228605534302811287f77553d3c5303284e","commitMessage":"@@@Leverage new ConfigSetter#close method to properly open/close filter (#6730)\n\nUses the close method added in KIP-453 to properly init & close RocksObjects in RocksDBStoreTest\n\nReviewers: Bill Bejeck <bbejeck@gmail.com>","date":"2019-05-15 10:36:05","modifiedFileCount":"1","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2019-09-25 04:29:08","codes":[{"authorDate":"2019-09-25 04:29:08","commitOrder":13,"curCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger());\n    }\n","date":"2019-09-25 04:29:08","endLine":105,"groupId":"4348","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e3/b7274df1d4b11ab1e6787f617b28cdfa5d851e.src","preCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2019-09-25 04:29:08","commitOrder":13,"curCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger());\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","date":"2019-09-25 04:29:08","endLine":620,"groupId":"4348","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldHandleToggleOfEnablingBloomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e3/b7274df1d4b11ab1e6787f617b28cdfa5d851e.src","preCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"M"}],"commitId":"ad3b8437fd9ecc18fcfa8204e43be9bccb1a6548","commitMessage":"@@@KAFKA-8580: Compute RocksDB metrics (#7263)\n\nA metric recorder runs in it own thread and regularly records RocksDB metrics from\nRocksDB's statistics. For segmented state stores the metrics are aggregated over the\nsegments.\n\nReviewers: John Roesler <vvcephei@users.noreply.github.com>.  A. Sophie Blee-Goldman <sophie@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-09-25 04:29:08","modifiedFileCount":"18","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-09-25 04:29:08","codes":[{"authorDate":"2020-02-12 09:31:13","commitOrder":14,"curCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        rocksDBStore = getRocksDBStore();\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger());\n    }\n","date":"2020-02-12 09:31:13","endLine":105,"groupId":"16311","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/f1c9ebe2e1040cbb1cff9a51c4b2ed61622a81.src","preCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2019-09-25 04:29:08","commitOrder":14,"curCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger());\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","date":"2019-09-25 04:29:08","endLine":620,"groupId":"4348","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldHandleToggleOfEnablingBloomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e3/b7274df1d4b11ab1e6787f617b28cdfa5d851e.src","preCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger());\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":574,"status":"N"}],"commitId":"cde6d18983b5d58199f8857d8d61d7efcbe6e54a","commitMessage":"@@@KAFKA-9355: Fix bug that removed RocksDB metrics after failure in EOS (#7996)\n\n* Added init() method to RocksDBMetricsRecorder\n* Added call to init() of RocksDBMetricsRecorder to init() of RocksDB store\n* Added call to init() of RocksDBMetricsRecorder to openExisting() of segmented state stores\n* Adapted unit tests\n* Added integration test that reproduces the situation in which the bug occurred\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-02-12 09:31:13","modifiedFileCount":"10","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-04-19 04:01:16","codes":[{"authorDate":"2020-02-12 09:31:13","commitOrder":15,"curCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        rocksDBStore = getRocksDBStore();\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger());\n    }\n","date":"2020-02-12 09:31:13","endLine":105,"groupId":"16311","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/f1c9ebe2e1040cbb1cff9a51c4b2ed61622a81.src","preCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        rocksDBStore = getRocksDBStore();\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"N"},{"authorDate":"2020-04-19 04:01:16","commitOrder":15,"curCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger());\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","date":"2020-04-19 04:01:16","endLine":589,"groupId":"4348","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldHandleToggleOfEnablingBloomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b1/ee48f52dec6c4a63b759a15f368abd87684040.src","preCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        rocksDBStore = getRocksDBStore();\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger());\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":545,"status":"M"}],"commitId":"6ea3eedfd8c74d40157d6e489408d871e172ba34","commitMessage":"@@@MINOR: cleanup RocksDBStore tests  (#8510)\n\nOne of the new rocksdb unit tests creates a non-temporary rocksdb directory wherever the test is run from.  with some rocksdb files left behind after the test(s) are done. We should use the tempDirectory dir for this testing\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-04-19 04:01:16","modifiedFileCount":"2","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-05-02 08:11:26","codes":[{"authorDate":"2020-05-02 08:11:26","commitOrder":16,"curCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        rocksDBStore = getRocksDBStore();\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger(time));\n    }\n","date":"2020-05-02 08:11:26","endLine":109,"groupId":"16311","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f6/1b9c6143217a28eae601f37c92dbddadf39779.src","preCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        rocksDBStore = getRocksDBStore();\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2020-05-02 08:11:26","commitOrder":16,"curCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger(time));\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","date":"2020-05-02 08:11:26","endLine":596,"groupId":"4348","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldHandleToggleOfEnablingBloomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f6/1b9c6143217a28eae601f37c92dbddadf39779.src","preCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger());\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":552,"status":"M"}],"commitId":"945356724147549421727eb52a4ac33efa920b2e","commitMessage":"@@@MINOR: Improve Sensor recording efficiency (#8593)\n\n1. Added a recordInternal function to let all other public functions trigger.  so that shouldRecord would only be checked once.\n\n2. In Streams.  pass along the current wall-clock time inside InternalProcessorContext when process / punctuate which can be passed in to the record function to reduce the calling frequency of SystemTime.milliseconds().\n\nReviewers: John Roesler <vvcephei@apache.org>","date":"2020-05-02 08:11:26","modifiedFileCount":"32","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-08-14 03:40:40","codes":[{"authorDate":"2020-08-14 03:40:40","commitOrder":17,"curCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props)\n        );\n        rocksDBStore = getRocksDBStore();\n    }\n","date":"2020-08-14 03:40:40","endLine":110,"groupId":"16311","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a8/e278f03071a951a08098a2a430c1d38b41076c.src","preCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        rocksDBStore = getRocksDBStore();\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger(time));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2020-08-14 03:40:40","commitOrder":17,"curCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","date":"2020-08-14 03:40:40","endLine":578,"groupId":"4348","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldHandleToggleOfEnablingBloomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a8/e278f03071a951a08098a2a430c1d38b41076c.src","preCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n        context.metrics().setRocksDBMetricsRecordingTrigger(new RocksDBMetricsRecordingTrigger(time));\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":535,"status":"M"}],"commitId":"5645d906fa319206a9270c080926a21dfddc852a","commitMessage":"@@@KAFKA-9924: Prepare RocksDB and metrics for RocksDB properties recording (#9098)\n\nRefactor the RocksDB store and the metrics infrastructure in Streams\nin preparation of the recordings of the RocksDB properties specified in KIP-607.\n\nThe refactoring includes:\n* wrapper around BlockedBasedTableConfig to make the cache accessible to the\n  RocksDB metrics recorder\n* RocksDB metrics recorder now takes also the DB instance and the cache in addition\n  to the statistics\n* The value providers for the metrics are added to the RockDB metrics recorder also if\n  the recording level is INFO.\n* The creation of the RocksDB metrics recording trigger is moved to StreamsMetricsImpl\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  John Roesler <vvcephei@apache.org>\n","date":"2020-08-14 03:40:40","modifiedFileCount":"27","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2020-10-03 07:49:12","codes":[{"authorDate":"2020-08-14 03:40:40","commitOrder":18,"curCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props)\n        );\n        rocksDBStore = getRocksDBStore();\n    }\n","date":"2020-08-14 03:40:40","endLine":110,"groupId":"16311","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a8/e278f03071a951a08098a2a430c1d38b41076c.src","preCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props)\n        );\n        rocksDBStore = getRocksDBStore();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"N"},{"authorDate":"2020-10-03 07:49:12","commitOrder":18,"curCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n\n        enableBloomFilters = false;\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","date":"2020-10-03 07:49:12","endLine":582,"groupId":"16311","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldHandleToggleOfEnablingBloomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/ad979d0ddf835cbf47352392024e135584ff88.src","preCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n\n        enableBloomFilters = false;\n        rocksDBStore.init(context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init(context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"M"}],"commitId":"69790a1463bafc1f63e3c288a6636b3f4586c1b4","commitMessage":"@@@KAFKA-10535: Split ProcessorContext into Processor/StateStore/Record Contexts (#9361)\n\nMigrate different components of the old ProcessorContext interface\ninto separate interfaces that are more appropriate for their usages.\nSee KIP-478 for the details.\n\nReviewers: Guozhang Wang <guozhang@apache.org>.  Paul Whalen <pgwhalen@gmail.com>","date":"2020-10-03 07:49:12","modifiedFileCount":"71","status":"M","submitter":"John Roesler"},{"authorTime":"2020-10-03 07:49:12","codes":[{"authorDate":"2021-05-29 03:59:35","commitOrder":19,"curCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext<>(\n            dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props)\n        );\n        rocksDBStore = getRocksDBStore();\n    }\n","date":"2021-05-29 03:59:35","endLine":118,"groupId":"101283","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"setUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/14/166beed65dd79c4f358b4b22788a6696bd5714.src","preCode":"    public void setUp() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, MockRocksDbConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props)\n        );\n        rocksDBStore = getRocksDBStore();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"},{"authorDate":"2020-10-03 07:49:12","commitOrder":19,"curCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n\n        enableBloomFilters = false;\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","date":"2020-10-03 07:49:12","endLine":582,"groupId":"101283","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldHandleToggleOfEnablingBloomFilters","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/ad979d0ddf835cbf47352392024e135584ff88.src","preCode":"    public void shouldHandleToggleOfEnablingBloomFilters() {\n        final Properties props = StreamsTestUtils.getStreamsConfig();\n        props.put(StreamsConfig.ROCKSDB_CONFIG_SETTER_CLASS_CONFIG, TestingBloomFilterRocksDBConfigSetter.class);\n        dir = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(dir,\n            Serdes.String(),\n            Serdes.String(),\n            new StreamsConfig(props));\n\n        enableBloomFilters = false;\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n\n        final List<String> expectedValues = new ArrayList<>();\n        expectedValues.add(\"a\");\n        expectedValues.add(\"b\");\n        expectedValues.add(\"c\");\n\n        final List<KeyValue<byte[], byte[]>> keyValues = getKeyValueEntries();\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            rocksDBStore.put(new Bytes(keyValue.key), keyValue.value);\n        }\n\n        int expectedIndex = 0;\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n        assertFalse(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n\n        rocksDBStore.close();\n        expectedIndex = 0;\n\n        \r\n        \r\n        enableBloomFilters = true;\n        rocksDBStore.init((StateStoreContext) context, rocksDBStore);\n\n        for (final KeyValue<byte[], byte[]> keyValue : keyValues) {\n            final byte[] valBytes = rocksDBStore.get(new Bytes(keyValue.key));\n            assertThat(new String(valBytes, UTF_8), is(expectedValues.get(expectedIndex++)));\n        }\n\n        assertTrue(TestingBloomFilterRocksDBConfigSetter.bloomFiltersSet);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/RocksDBStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":539,"status":"N"}],"commitId":"f207bac20cf19e841d3ee8dbcba03b1c30d88836","commitMessage":"@@@KAFKA-8410: KTableProcessor migration groundwork (#10744)\n\n* Lay the groundwork for migrating KTable Processors to the new PAPI.\n* Migrate the KTableFilter processor to prove that the groundwork works.\n\nThis is an effort to help break up #10507 into multiple PRs.\n\nReviewers: Boyang Chen <boyang@apache.org>","date":"2021-05-29 03:59:35","modifiedFileCount":"69","status":"M","submitter":"John Roesler"}]
