[{"authorTime":"2019-07-26 04:02:09","codes":[{"authorDate":"2019-07-26 04:02:09","commitOrder":1,"curCode":"    private Node prepareRebalance(MockClient client, Node node, final Set<String> subscribedTopics, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n                Iterator<JoinGroupRequestData.JoinGroupRequestProtocol> protocolIterator =\n                        joinGroupRequest.data().protocols().iterator();\n                assertTrue(protocolIterator.hasNext());\n\n                ByteBuffer protocolMetadata = ByteBuffer.wrap(protocolIterator.next().metadata());\n                ConsumerPartitionAssignor.Subscription subscription = ConsumerProtocol.deserializeSubscription(protocolMetadata);\n                return subscribedTopics.equals(new HashSet<>(subscription.topics()));\n            }\n        }, joinGroupFollowerResponse(assignor, 1, \"memberId\", \"leaderId\", Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","date":"2019-07-26 04:02:09","endLine":1703,"groupId":"12835","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareRebalance","params":"(MockClientclient@Nodenode@finalSet<String>subscribedTopics@ConsumerPartitionAssignorassignor@List<TopicPartition>partitions@Nodecoordinator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/12/27c27ad60357abfe313f941c14f0e3a8b33c26.src","preCode":"    private Node prepareRebalance(MockClient client, Node node, final Set<String> subscribedTopics, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n                Iterator<JoinGroupRequestData.JoinGroupRequestProtocol> protocolIterator =\n                        joinGroupRequest.data().protocols().iterator();\n                assertTrue(protocolIterator.hasNext());\n\n                ByteBuffer protocolMetadata = ByteBuffer.wrap(protocolIterator.next().metadata());\n                ConsumerPartitionAssignor.Subscription subscription = ConsumerProtocol.deserializeSubscription(protocolMetadata);\n                return subscribedTopics.equals(new HashSet<>(subscription.topics()));\n            }\n        }, joinGroupFollowerResponse(assignor, 1, \"memberId\", \"leaderId\", Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1677,"status":"B"},{"authorDate":"2019-07-26 04:02:09","commitOrder":1,"curCode":"    private Node prepareRebalance(MockClient client, Node node, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(joinGroupFollowerResponse(assignor, 1, \"memberId\", \"leaderId\", Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","date":"2019-07-26 04:02:09","endLine":1719,"groupId":"9942","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareRebalance","params":"(MockClientclient@Nodenode@ConsumerPartitionAssignorassignor@List<TopicPartition>partitions@Nodecoordinator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/12/27c27ad60357abfe313f941c14f0e3a8b33c26.src","preCode":"    private Node prepareRebalance(MockClient client, Node node, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(joinGroupFollowerResponse(assignor, 1, \"memberId\", \"leaderId\", Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1705,"status":"B"}],"commitId":"69d86a197f86ad4c6f1636b5ab4678907e30a4c0","commitMessage":"@@@KAFKA-8179: add public ConsumerPartitionAssignor interface (#7108)\n\nMain changes of this PR:\n\n* Deprecate old consumer.internal.PartitionAssignor and add public consumer.ConsumerPartitionAssignor with all OOTB assignors migrated to new interface\n* Refactor assignor's assignment/subscription related classes for easier to evolve API\n* Removed version number from classes as it is only needed for serialization/deserialization\n* Other previously-discussed cleanup included in this PR:\n\n* Remove Assignment.error added in pt 1\n* Remove ConsumerCoordinator#adjustAssignment added in pt 2\n\nReviewers: Boyang Chen <boyang@confluent.io>.  Jason Gustafson <jason@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-07-26 04:02:09","modifiedFileCount":"19","status":"B","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-01-10 01:34:59","codes":[{"authorDate":"2020-01-10 01:34:59","commitOrder":2,"curCode":"    private Node prepareRebalance(MockClient client, Node node, final Set<String> subscribedTopics, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n                Iterator<JoinGroupRequestData.JoinGroupRequestProtocol> protocolIterator =\n                        joinGroupRequest.data().protocols().iterator();\n                assertTrue(protocolIterator.hasNext());\n\n                ByteBuffer protocolMetadata = ByteBuffer.wrap(protocolIterator.next().metadata());\n                ConsumerPartitionAssignor.Subscription subscription = ConsumerProtocol.deserializeSubscription(protocolMetadata);\n                return subscribedTopics.equals(new HashSet<>(subscription.topics()));\n            }\n        }, joinGroupFollowerResponse(assignor, 1, memberId, leaderId, Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","date":"2020-01-10 01:34:59","endLine":1890,"groupId":"12835","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareRebalance","params":"(MockClientclient@Nodenode@finalSet<String>subscribedTopics@ConsumerPartitionAssignorassignor@List<TopicPartition>partitions@Nodecoordinator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/87/9eaa17432d9b30fe9fb4f2c5c20f7c7bae9ed0.src","preCode":"    private Node prepareRebalance(MockClient client, Node node, final Set<String> subscribedTopics, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n                Iterator<JoinGroupRequestData.JoinGroupRequestProtocol> protocolIterator =\n                        joinGroupRequest.data().protocols().iterator();\n                assertTrue(protocolIterator.hasNext());\n\n                ByteBuffer protocolMetadata = ByteBuffer.wrap(protocolIterator.next().metadata());\n                ConsumerPartitionAssignor.Subscription subscription = ConsumerProtocol.deserializeSubscription(protocolMetadata);\n                return subscribedTopics.equals(new HashSet<>(subscription.topics()));\n            }\n        }, joinGroupFollowerResponse(assignor, 1, \"memberId\", \"leaderId\", Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1864,"status":"M"},{"authorDate":"2020-01-10 01:34:59","commitOrder":2,"curCode":"    private Node prepareRebalance(MockClient client, Node node, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(joinGroupFollowerResponse(assignor, 1, memberId, leaderId, Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","date":"2020-01-10 01:34:59","endLine":1906,"groupId":"10503","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareRebalance","params":"(MockClientclient@Nodenode@ConsumerPartitionAssignorassignor@List<TopicPartition>partitions@Nodecoordinator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/87/9eaa17432d9b30fe9fb4f2c5c20f7c7bae9ed0.src","preCode":"    private Node prepareRebalance(MockClient client, Node node, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(joinGroupFollowerResponse(assignor, 1, \"memberId\", \"leaderId\", Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1892,"status":"M"}],"commitId":"e9cde112cd47d88c3e256881a70035c0fd31c022","commitMessage":"@@@KAFKA-9383: Expose consumer group metadata (#7906)\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-01-10 01:34:59","modifiedFileCount":"8","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-01-10 01:34:59","codes":[{"authorDate":"2020-03-13 13:28:52","commitOrder":3,"curCode":"    private Node prepareRebalance(MockClient client, Node node, final Set<String> subscribedTopics, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(body -> {\n            JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n            Iterator<JoinGroupRequestData.JoinGroupRequestProtocol> protocolIterator =\n                    joinGroupRequest.data().protocols().iterator();\n            assertTrue(protocolIterator.hasNext());\n\n            ByteBuffer protocolMetadata = ByteBuffer.wrap(protocolIterator.next().metadata());\n            ConsumerPartitionAssignor.Subscription subscription = ConsumerProtocol.deserializeSubscription(protocolMetadata);\n            return subscribedTopics.equals(new HashSet<>(subscription.topics()));\n        }, joinGroupFollowerResponse(assignor, 1, memberId, leaderId, Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","date":"2020-03-13 13:28:52","endLine":2036,"groupId":"12768","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareRebalance","params":"(MockClientclient@Nodenode@finalSet<String>subscribedTopics@ConsumerPartitionAssignorassignor@List<TopicPartition>partitions@Nodecoordinator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/41/0eec37570edf80f1394a8b230857fd68f4a836.src","preCode":"    private Node prepareRebalance(MockClient client, Node node, final Set<String> subscribedTopics, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(new MockClient.RequestMatcher() {\n            @Override\n            public boolean matches(AbstractRequest body) {\n                JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n                Iterator<JoinGroupRequestData.JoinGroupRequestProtocol> protocolIterator =\n                        joinGroupRequest.data().protocols().iterator();\n                assertTrue(protocolIterator.hasNext());\n\n                ByteBuffer protocolMetadata = ByteBuffer.wrap(protocolIterator.next().metadata());\n                ConsumerPartitionAssignor.Subscription subscription = ConsumerProtocol.deserializeSubscription(protocolMetadata);\n                return subscribedTopics.equals(new HashSet<>(subscription.topics()));\n            }\n        }, joinGroupFollowerResponse(assignor, 1, memberId, leaderId, Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2013,"status":"M"},{"authorDate":"2020-01-10 01:34:59","commitOrder":3,"curCode":"    private Node prepareRebalance(MockClient client, Node node, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(joinGroupFollowerResponse(assignor, 1, memberId, leaderId, Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","date":"2020-01-10 01:34:59","endLine":1906,"groupId":"10503","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareRebalance","params":"(MockClientclient@Nodenode@ConsumerPartitionAssignorassignor@List<TopicPartition>partitions@Nodecoordinator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/87/9eaa17432d9b30fe9fb4f2c5c20f7c7bae9ed0.src","preCode":"    private Node prepareRebalance(MockClient client, Node node, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(joinGroupFollowerResponse(assignor, 1, memberId, leaderId, Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1892,"status":"N"}],"commitId":"2d2311d75c081745c7a24f7da7c8ec14feddd259","commitMessage":"@@@KAFKA-9657: Throw upon offset fetch unsupported stable flag protocol  (#8265)\n\nThis PR tries to add an internal flag to throw if we hit an unexpected protocol version for offset fetch. It could be used together with EOS_BETA flag so that if server side downgrades unexpectedly.  we shall fail the application ASAP.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-03-13 13:28:52","modifiedFileCount":"10","status":"M","submitter":"Boyang Chen"},{"authorTime":"2021-07-02 05:05:03","codes":[{"authorDate":"2021-07-02 05:05:03","commitOrder":4,"curCode":"    private Node prepareRebalance(MockClient client, Node node, final Set<String> subscribedTopics, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, groupId, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(body -> {\n            JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n            Iterator<JoinGroupRequestData.JoinGroupRequestProtocol> protocolIterator =\n                    joinGroupRequest.data().protocols().iterator();\n            assertTrue(protocolIterator.hasNext());\n\n            ByteBuffer protocolMetadata = ByteBuffer.wrap(protocolIterator.next().metadata());\n            ConsumerPartitionAssignor.Subscription subscription = ConsumerProtocol.deserializeSubscription(protocolMetadata);\n            return subscribedTopics.equals(new HashSet<>(subscription.topics()));\n        }, joinGroupFollowerResponse(assignor, 1, memberId, leaderId, Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","date":"2021-07-02 05:05:03","endLine":2257,"groupId":"113903","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareRebalance","params":"(MockClientclient@Nodenode@finalSet<String>subscribedTopics@ConsumerPartitionAssignorassignor@List<TopicPartition>partitions@Nodecoordinator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ab/8a9503b39de9c4b863c95cf7f92946c5bf9e24.src","preCode":"    private Node prepareRebalance(MockClient client, Node node, final Set<String> subscribedTopics, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(body -> {\n            JoinGroupRequest joinGroupRequest = (JoinGroupRequest) body;\n            Iterator<JoinGroupRequestData.JoinGroupRequestProtocol> protocolIterator =\n                    joinGroupRequest.data().protocols().iterator();\n            assertTrue(protocolIterator.hasNext());\n\n            ByteBuffer protocolMetadata = ByteBuffer.wrap(protocolIterator.next().metadata());\n            ConsumerPartitionAssignor.Subscription subscription = ConsumerProtocol.deserializeSubscription(protocolMetadata);\n            return subscribedTopics.equals(new HashSet<>(subscription.topics()));\n        }, joinGroupFollowerResponse(assignor, 1, memberId, leaderId, Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2234,"status":"M"},{"authorDate":"2021-07-02 05:05:03","commitOrder":4,"curCode":"    private Node prepareRebalance(MockClient client, Node node, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, groupId, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(joinGroupFollowerResponse(assignor, 1, memberId, leaderId, Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","date":"2021-07-02 05:05:03","endLine":2273,"groupId":"113903","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareRebalance","params":"(MockClientclient@Nodenode@ConsumerPartitionAssignorassignor@List<TopicPartition>partitions@Nodecoordinator)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ab/8a9503b39de9c4b863c95cf7f92946c5bf9e24.src","preCode":"    private Node prepareRebalance(MockClient client, Node node, ConsumerPartitionAssignor assignor, List<TopicPartition> partitions, Node coordinator) {\n        if (coordinator == null) {\n            \r\n            client.prepareResponseFrom(FindCoordinatorResponse.prepareResponse(Errors.NONE, node), node);\n            coordinator = new Node(Integer.MAX_VALUE - node.id(), node.host(), node.port());\n        }\n\n        \r\n        client.prepareResponseFrom(joinGroupFollowerResponse(assignor, 1, memberId, leaderId, Errors.NONE), coordinator);\n\n        \r\n        client.prepareResponseFrom(syncGroupResponse(partitions, Errors.NONE), coordinator);\n\n        return coordinator;\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/KafkaConsumerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2259,"status":"M"}],"commitId":"f5d5f654db359af077088685e29fbe5ea69616cf","commitMessage":"@@@KAFKA-12663: Update FindCoordinator to support batch lookups (KIP-699) (#10743)\n\nThis implements KIP-699: https://cwiki.apache.org/confluence/display/KAFKA/KIP-699%3A+Update+FindCoordinator+to+resolve+multiple+Coordinators+at+a+time\n\nIt updates FindCoordinator request and response to support resolving multiple coordinators at a time. If a broker does not support the new FindCoordinator version.  clients can revert to the previous behaviour and use a request for each coordinator.\n\nReviewers: David Jacot <djacot@confluent.io>.  Tom Bentley <tbentley@redhat.com>.  Sanjana Kaundinya <skaundinya@gmail.com>","date":"2021-07-02 05:05:03","modifiedFileCount":"33","status":"M","submitter":"Mickael Maison"}]
