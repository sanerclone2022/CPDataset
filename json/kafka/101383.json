[{"authorTime":"2018-04-27 02:30:42","codes":[{"authorDate":"2018-04-27 02:30:42","commitOrder":11,"curCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n                public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                    return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public KeyValue<Integer, Integer> transform(Number key, Number value) {\n                            total += value.intValue();\n                            return KeyValue.pair(key.intValue() * 2, total);\n                        }\n\n                        @Override\n                        public KeyValue<Integer, Integer> punctuate(long timestamp) {\n                            return KeyValue.pair(-1, (int) timestamp);\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        kstreamDriver.punctuate(2);\n        kstreamDriver.punctuate(3);\n\n        assertEquals(6, processor.processed.size());\n\n        String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\", \"-1:2\", \"-1:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.processed.get(i));\n        }\n    }\n","date":"2018-04-27 02:30:42","endLine":130,"groupId":"9853","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/aa/0cf7ee7a5c66079e5dbb055b5fb32ec0b60c09.src","preCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n                public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                    return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public KeyValue<Integer, Integer> transform(Number key, Number value) {\n                            total += value.intValue();\n                            return KeyValue.pair(key.intValue() * 2, total);\n                        }\n\n                        @Override\n                        public KeyValue<Integer, Integer> punctuate(long timestamp) {\n                            return KeyValue.pair(-1, (int) timestamp);\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        kstreamDriver.punctuate(2);\n        kstreamDriver.punctuate(3);\n\n        assertEquals(6, processor.processed.size());\n\n        String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\", \"-1:2\", \"-1:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"MB"},{"authorDate":"2018-04-27 02:30:42","commitOrder":11,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n                public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                    return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(final ProcessorContext context) {\n                            context.schedule(1, PunctuationType.WALL_CLOCK_TIME, new Punctuator() {\n                                @Override\n                                public void punctuate(long timestamp) {\n                                    context.forward(-1, (int) timestamp);\n                                }\n                            });\n                        }\n\n                        @Override\n                        public KeyValue<Integer, Integer> transform(Number key, Number value) {\n                            total += value.intValue();\n                            return KeyValue.pair(key.intValue() * 2, total);\n                        }\n\n                        @Override\n                        public KeyValue<Integer, Integer> punctuate(long timestamp) {\n                            return null;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transform(transformerSupplier).process(processor);\n\n        driver = new TopologyTestDriver(builder.build(), props, 0L);\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n        }\n\n        \r\n        driver.advanceWallClockTime(2);\n        \r\n        driver.advanceWallClockTime(1);\n\n        assertEquals(6, processor.processed.size());\n\n        String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\", \"-1:2\", \"-1:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.processed.get(i));\n        }\n    }\n","date":"2018-04-27 02:30:42","endLine":194,"groupId":"13917","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/aa/0cf7ee7a5c66079e5dbb055b5fb32ec0b60c09.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n                public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                    return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(final ProcessorContext context) {\n                            context.schedule(1, PunctuationType.WALL_CLOCK_TIME, new Punctuator() {\n                                @Override\n                                public void punctuate(long timestamp) {\n                                    context.forward(-1, (int) timestamp);\n                                }\n                            });\n                        }\n\n                        @Override\n                        public KeyValue<Integer, Integer> transform(Number key, Number value) {\n                            total += value.intValue();\n                            return KeyValue.pair(key.intValue() * 2, total);\n                        }\n\n                        @Override\n                        public KeyValue<Integer, Integer> punctuate(long timestamp) {\n                            return null;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transform(transformerSupplier).process(processor);\n\n        driver = new TopologyTestDriver(builder.build(), props, 0L);\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n        }\n\n        \r\n        driver.advanceWallClockTime(2);\n        \r\n        driver.advanceWallClockTime(1);\n\n        assertEquals(6, processor.processed.size());\n\n        String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\", \"-1:2\", \"-1:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"}],"commitId":"885abbfcd40aab57acec278d976956f07be15090","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [partial] (#4832)\n\n* Remove ProcessorTopologyTestDriver from TopologyTest\n* Fix ProcessorTopologyTest\n* Remove ProcessorTopologyTestDriver and InternalTopologyAccessor\n* Partially refactored StreamsBuilderTest but missing one test\n* Refactor KStreamBuilderTest\n* Refactor AbstractStreamTest\n* Further cleanup of AbstractStreamTest\n* Refactor GlobalKTableJoinsTest\n* Refactor InternalStreamsBuilderTest\n* Fix circular dependency in build.gradle\n* Refactor KGroupedStreamImplTest\n* Partial modifications to KGroupedTableImplTest\n* Refactor KGroupedTableImplTest\n* Refactor KStreamBranchTest\n* Refactor KStreamFilterTest\n* Refactor KStreamFlatMapTest KStreamFlatMapValuesTest\n* Refactor KStreamForeachTest\n* Refactor KStreamGlobalKTableJoinTest\n* Refactor KStreamGlobalKTableLeftJoinTest\n* Refactor KStreamImplTest\n* Refactor KStreamImplTest\n* Refactor KStreamKStreamJoinTest\n* Refactor KStreamKStreamLeftJoinTest\n* Refactor KStreamKTableJoinTest\n* Refactor KStreamKTableLeftJoinTest\n* Refactor KStreamMapTest and KStreamMapValuesTest\n* Refactor KStreamPeekTest and KStreamTransformTest\n* Refactor KStreamSelectKeyTest\n* Refactor KStreamTransformValuesTest\n* Refactor KStreamWindowAggregateTest\n* Add Depercation anotation to KStreamTestDriver and rollback failing tests in StreamsBuilderTest and KTableAggregateTest\n* Refactor KTableFilterTest\n* Refactor KTableForeachTest\n* Add getter for ProcessorTopology.  and simplify tests in StreamsBuilderTest\n* Refactor KTableImplTest\n* Remove unused imports\n* Refactor KTableAggregateTest\n* Fix style errors\n* Fix gradle build\n* Address reviewer comments:\n  - Remove properties new instance\n  - Remove extraneous line\n  - Remove unnecessary TopologyTestDriver instances from StreamsBuilderTest\n  - Move props.clear() to @After\n  - Clarify use of timestamp in KStreamFlatMapValuesTest\n  - Keep test using old Punctuator in KStreamTransformTest\n  - Add comment to clarify clock advances in KStreamTransformTest\n  - Add TopologyTestDriverWrapper class to access the protected constructor of TopologyTestDriver\n  - Revert KTableImplTest.testRepartition to KStreamTestDriver to avoid exposing the TopologyTestDriver processor topology\n  - Revert partially migrated classes: KTableAggregateTest.  KTableFilterTest.  and KTableImplTest\n* Rebase on current trunk an fix conflicts\n\nReviewers: Matthias J Sax <matthias@confluentio>.  Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>","date":"2018-04-27 02:30:42","modifiedFileCount":"33","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-05-04 23:42:01","codes":[{"authorDate":"2018-05-04 23:42:01","commitOrder":12,"curCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {}\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n\n        \r\n\n        String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2018-05-04 23:42:01","endLine":126,"groupId":"13512","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/67fe1657c84963142a6319e53cc2828eb9ef10.src","preCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n                public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                    return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(ProcessorContext context) {\n                        }\n\n                        @Override\n                        public KeyValue<Integer, Integer> transform(Number key, Number value) {\n                            total += value.intValue();\n                            return KeyValue.pair(key.intValue() * 2, total);\n                        }\n\n                        @Override\n                        public KeyValue<Integer, Integer> punctuate(long timestamp) {\n                            return KeyValue.pair(-1, (int) timestamp);\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        kstreamDriver.punctuate(2);\n        kstreamDriver.punctuate(3);\n\n        assertEquals(6, processor.processed.size());\n\n        String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\", \"-1:2\", \"-1:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2018-05-04 23:42:01","commitOrder":12,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {\n                        context.schedule(1, PunctuationType.WALL_CLOCK_TIME, new Punctuator() {\n                            @Override\n                            public void punctuate(long timestamp) {\n                                context.forward(-1, (int) timestamp);\n                            }\n                        });\n                    }\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transform(transformerSupplier).process(processor);\n\n        driver = new TopologyTestDriver(builder.build(), props, 0L);\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n        }\n\n        \r\n        driver.advanceWallClockTime(2);\n        \r\n        driver.advanceWallClockTime(1);\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\", \"-1:2\", \"-1:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2018-05-04 23:42:01","endLine":184,"groupId":"13917","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/15/67fe1657c84963142a6319e53cc2828eb9ef10.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n                public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                    return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                        private int total = 0;\n\n                        @Override\n                        public void init(final ProcessorContext context) {\n                            context.schedule(1, PunctuationType.WALL_CLOCK_TIME, new Punctuator() {\n                                @Override\n                                public void punctuate(long timestamp) {\n                                    context.forward(-1, (int) timestamp);\n                                }\n                            });\n                        }\n\n                        @Override\n                        public KeyValue<Integer, Integer> transform(Number key, Number value) {\n                            total += value.intValue();\n                            return KeyValue.pair(key.intValue() * 2, total);\n                        }\n\n                        @Override\n                        public KeyValue<Integer, Integer> punctuate(long timestamp) {\n                            return null;\n                        }\n\n                        @Override\n                        public void close() {\n                        }\n                    };\n                }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transform(transformerSupplier).process(processor);\n\n        driver = new TopologyTestDriver(builder.build(), props, 0L);\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n        }\n\n        \r\n        driver.advanceWallClockTime(2);\n        \r\n        driver.advanceWallClockTime(1);\n\n        assertEquals(6, processor.processed.size());\n\n        String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\", \"-1:2\", \"-1:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"M"}],"commitId":"af983267be7a2d0f81527f5a348af377f30caee4","commitMessage":"@@@MINOR: Removed deprecated schedule function (#4908)\n\nWhile working on this.  I also refactored the MockProcessor out of the MockProcessorSupplier to cleanup the unit test paths.\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-05-04 23:42:01","modifiedFileCount":"62","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2018-05-08 00:21:20","codes":[{"authorDate":"2018-05-08 00:21:20","commitOrder":13,"curCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {}\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n\n        \r\n\n        String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2018-05-08 00:21:20","endLine":101,"groupId":"13512","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8a/05aac7fa9fd9eb2c504b8300b81a08178ef90b.src","preCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {}\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n\n        \r\n\n        String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2018-05-08 00:21:20","commitOrder":13,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {\n                        context.schedule(1, PunctuationType.WALL_CLOCK_TIME, new Punctuator() {\n                            @Override\n                            public void punctuate(long timestamp) {\n                                context.forward(-1, (int) timestamp);\n                            }\n                        });\n                    }\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n\n            \r\n            driver.advanceWallClockTime(2);\n            \r\n            driver.advanceWallClockTime(1);\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\", \"-1:2\", \"-1:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2018-05-08 00:21:20","endLine":160,"groupId":"13513","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8a/05aac7fa9fd9eb2c504b8300b81a08178ef90b.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {\n                        context.schedule(1, PunctuationType.WALL_CLOCK_TIME, new Punctuator() {\n                            @Override\n                            public void punctuate(long timestamp) {\n                                context.forward(-1, (int) timestamp);\n                            }\n                        });\n                    }\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(intSerde, intSerde));\n        stream.transform(transformerSupplier).process(processor);\n\n        driver = new TopologyTestDriver(builder.build(), props, 0L);\n        for (int expectedKey : expectedKeys) {\n            driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n        }\n\n        \r\n        driver.advanceWallClockTime(2);\n        \r\n        driver.advanceWallClockTime(1);\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\", \"-1:2\", \"-1:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"6f641fef6a88036ab4dacb59ab21bc8b21ef9bcf","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [cleanup] (#4939)\n\n* Add method to create test properties to StreamsTestUtils\n* Make TopologyTestDriver protected constructor package-private\n* Add comment suggesting the use of TopologyTestDriver to KStreamTestDriver\n* Cleanup:\n    - GlobalKTableJoinsTest\n    - KGroupedStreamImplTest\n    - KGroupedTableImplTest\n    - KStreamBranchTest\n    - KStreamFilterTest\n    - KStreamFlatMapTest\n    - KStreamFlatMapValuesTest\n    - KStreamForeachTest\n    - KStreamGlobalKTableJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamImplTest\n    - KStreamKStreamJoinTest\n    - KStreamKStreamLeftJoinTest\n    - KStreamGlobalKTableLeftJoinTest\n    - KStreamKTableJoinTest\n    - KStreamKTableLeftJoinTest\n    - KStreamMapTest\n    - KStreamMapValuesTest\n    - KStreamPeekTest\n    - StreamsBuilderTest\n    - KStreamSelectKeyTest\n    - KStreamTransformTest\n    - KStreamTransformValuesTest\n    - KStreamWindowAggregateTest\n    - KTableForeachTest\n\nReviewers: John Roesler <john@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-05-08 00:21:20","modifiedFileCount":"27","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2018-08-04 04:19:46","codes":[{"authorDate":"2018-08-04 04:19:46","commitOrder":14,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {}\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (final int expectedKey : expectedKeys) {\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n\n        \r\n\n        final String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2018-08-04 04:19:46","endLine":101,"groupId":"13512","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/61874abbe6e872cfaac1e3cc65165d68a5e0ae.src","preCode":"    public void testTransform() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {}\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (int expectedKey : expectedKeys) {\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n\n        \r\n\n        String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2018-08-04 04:19:46","commitOrder":14,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {\n                        context.schedule(1, PunctuationType.WALL_CLOCK_TIME, new Punctuator() {\n                            @Override\n                            public void punctuate(final long timestamp) {\n                                context.forward(-1, (int) timestamp);\n                            }\n                        });\n                    }\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n\n            \r\n            driver.advanceWallClockTime(2);\n            \r\n            driver.advanceWallClockTime(1);\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\", \"-1:2\", \"-1:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2018-08-04 04:19:46","endLine":160,"groupId":"13513","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/61874abbe6e872cfaac1e3cc65165d68a5e0ae.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        StreamsBuilder builder = new StreamsBuilder();\n\n        TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {\n                        context.schedule(1, PunctuationType.WALL_CLOCK_TIME, new Punctuator() {\n                            @Override\n                            public void punctuate(long timestamp) {\n                                context.forward(-1, (int) timestamp);\n                            }\n                        });\n                    }\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n\n            \r\n            driver.advanceWallClockTime(2);\n            \r\n            driver.advanceWallClockTime(1);\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\", \"-1:2\", \"-1:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"3637b2c374d48e99e0a7be37605d3c79f2661007","commitMessage":"@@@MINOR: Require final variables in Streams (#5452)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2018-08-04 04:19:46","modifiedFileCount":"212","status":"M","submitter":"John Roesler"},{"authorTime":"2018-10-05 04:51:39","codes":[{"authorDate":"2018-08-04 04:19:46","commitOrder":15,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {}\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (final int expectedKey : expectedKeys) {\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n\n        \r\n\n        final String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2018-08-04 04:19:46","endLine":101,"groupId":"13512","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9a/61874abbe6e872cfaac1e3cc65165d68a5e0ae.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {}\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (final int expectedKey : expectedKeys) {\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n\n        \r\n\n        final String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"N"},{"authorDate":"2018-10-05 04:51:39","commitOrder":15,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {\n                        context.schedule(Duration.ofMillis(1), PunctuationType.WALL_CLOCK_TIME, new Punctuator() {\n                            @Override\n                            public void punctuate(final long timestamp) {\n                                context.forward(-1, (int) timestamp);\n                            }\n                        });\n                    }\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n\n            \r\n            driver.advanceWallClockTime(2);\n            \r\n            driver.advanceWallClockTime(1);\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\", \"-1:2\", \"-1:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2018-10-05 04:51:39","endLine":161,"groupId":"13513","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/ad19cb2d5add175ebb2de132c88d0a3baeed6b.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {\n                        context.schedule(1, PunctuationType.WALL_CLOCK_TIME, new Punctuator() {\n                            @Override\n                            public void punctuate(final long timestamp) {\n                                context.forward(-1, (int) timestamp);\n                            }\n                        });\n                    }\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n\n            \r\n            driver.advanceWallClockTime(2);\n            \r\n            driver.advanceWallClockTime(1);\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\", \"-1:2\", \"-1:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"ca641b3e2e48c14ff308181c775775408f5f35f7","commitMessage":"@@@KAFKA-7277: Migrate Streams API to Duration instead of longMs times (#5682)\n\nReviewers: Johne Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2018-10-05 04:51:39","modifiedFileCount":"97","status":"M","submitter":"Nikolay"},{"authorTime":"2019-03-20 08:27:32","codes":[{"authorDate":"2019-03-20 08:27:32","commitOrder":16,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {}\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (final int expectedKey : expectedKeys) {\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n\n        \r\n\n        final String[] expected = {\"2:10 (ts: 0)\", \"20:110 (ts: 0)\", \"200:1110 (ts: 0)\", \"2000:11110 (ts: 0)\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2019-03-20 08:27:32","endLine":96,"groupId":"12719","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/60fb902f747a1f23badd2025aa6e5018f3c4ab.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {}\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (final int expectedKey : expectedKeys) {\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n\n        \r\n\n        final String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2019-03-20 08:27:32","commitOrder":16,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n\n            \r\n            driver.advanceWallClockTime(2);\n            \r\n            driver.advanceWallClockTime(1);\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final String[] expected = {\"2:10 (ts: 0)\", \"20:110 (ts: 0)\", \"200:1110 (ts: 0)\", \"2000:11110 (ts: 0)\", \"-1:2 (ts: 2)\", \"-1:3 (ts: 3)\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2019-03-20 08:27:32","endLine":148,"groupId":"13832","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/60fb902f747a1f23badd2025aa6e5018f3c4ab.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier = new TransformerSupplier<Number, Number, KeyValue<Integer, Integer>>() {\n            public Transformer<Number, Number, KeyValue<Integer, Integer>> get() {\n                return new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n\n                    private int total = 0;\n\n                    @Override\n                    public void init(final ProcessorContext context) {\n                        context.schedule(Duration.ofMillis(1), PunctuationType.WALL_CLOCK_TIME, new Punctuator() {\n                            @Override\n                            public void punctuate(final long timestamp) {\n                                context.forward(-1, (int) timestamp);\n                            }\n                        });\n                    }\n\n                    @Override\n                    public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                        total += value.intValue();\n                        return KeyValue.pair(key.intValue() * 2, total);\n                    }\n\n                    @Override\n                    public void close() {}\n                };\n            }\n        };\n\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n\n            \r\n            driver.advanceWallClockTime(2);\n            \r\n            driver.advanceWallClockTime(1);\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final String[] expected = {\"2:10\", \"20:110\", \"200:1110\", \"2000:11110\", \"-1:2\", \"-1:3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"}],"commitId":"b5ce093a24d0fe212b5d1374330fc720b4913bee","commitMessage":"@@@MINOR: capture result timestamps in Kafka Streams DSL tests (#6447)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2019-03-20 08:27:32","modifiedFileCount":"29","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-03-20 08:27:32","codes":[{"authorDate":"2019-05-18 07:48:07","commitOrder":17,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {}\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (final int expectedKey : expectedKeys) {\n            kstreamDriver.setTime(expectedKey / 2L);\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n\n        \r\n\n        final String[] expected = {\"2:10 (ts: 0)\", \"20:110 (ts: 5)\", \"200:1110 (ts: 50)\", \"2000:11110 (ts: 500)\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2019-05-18 07:48:07","endLine":97,"groupId":"12719","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8f/87d409a9dc96a970b4409c45d35464a0acefae.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {}\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (final int expectedKey : expectedKeys) {\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n\n        \r\n\n        final String[] expected = {\"2:10 (ts: 0)\", \"20:110 (ts: 0)\", \"200:1110 (ts: 0)\", \"2000:11110 (ts: 0)\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2019-03-20 08:27:32","commitOrder":17,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n\n            \r\n            driver.advanceWallClockTime(2);\n            \r\n            driver.advanceWallClockTime(1);\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final String[] expected = {\"2:10 (ts: 0)\", \"20:110 (ts: 0)\", \"200:1110 (ts: 0)\", \"2000:11110 (ts: 0)\", \"-1:2 (ts: 2)\", \"-1:3 (ts: 3)\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2019-03-20 08:27:32","endLine":148,"groupId":"13832","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/60fb902f747a1f23badd2025aa6e5018f3c4ab.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n\n            \r\n            driver.advanceWallClockTime(2);\n            \r\n            driver.advanceWallClockTime(1);\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final String[] expected = {\"2:10 (ts: 0)\", \"20:110 (ts: 0)\", \"200:1110 (ts: 0)\", \"2000:11110 (ts: 0)\", \"-1:2 (ts: 2)\", \"-1:3 (ts: 3)\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"N"}],"commitId":"6a2749faa63397caa93dae7bfdc3f1d0573a2ff4","commitMessage":"@@@KAFKA-6455: Improve DSL operator timestamp semantics (#6725)\n\nBasic idea:\nKTable-KTable join: set max(left-ts. right-ts) for result\n#agg(...) (stream/table windowed/non-windowed): set max(ts1.  ts2.  ts3. ...) of all input records that contribute to the aggregation result\nfor all stateless transformation: input-ts -> output-ts\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   John Roesler <john@confluent.io>.  Andy Coates <andy@confluent.io>.   Bill Bejeck <bbejeck@gmail.com","date":"2019-05-18 07:48:07","modifiedFileCount":"61","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-05-19 10:18:14","codes":[{"authorDate":"2019-05-19 10:18:14","commitOrder":18,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp)\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            mkProperties(mkMap(\n                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\")\n            )),\n            0L)) {\n            final ConsumerRecordFactory<Integer, Integer> recordFactory =\n                new ConsumerRecordFactory<>(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(expectedKey, expectedKey * 10, expectedKey / 2L));\n            }\n\n            driver.advanceWallClockTime(2);\n            driver.advanceWallClockTime(1);\n\n            final String[] expected = {\n                \"2:10 (ts: 0)\",\n                \"20:110 (ts: 5)\",\n                \"200:1110 (ts: 50)\",\n                \"2000:11110 (ts: 500)\",\n                \"-1:2 (ts: 2)\",\n                \"-1:3 (ts: 3)\"\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed.size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n            }\n        }\n    }\n","date":"2019-05-19 10:18:14","endLine":114,"groupId":"21184","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/f6aea7e9c6302be5de7a853b987b7dcc5eef59.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {}\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        kstreamDriver.setUp(builder);\n        for (final int expectedKey : expectedKeys) {\n            kstreamDriver.setTime(expectedKey / 2L);\n            kstreamDriver.process(topicName, expectedKey, expectedKey * 10);\n        }\n\n        \r\n        \r\n        \r\n\n        \r\n\n        \r\n\n        final String[] expected = {\"2:10 (ts: 0)\", \"20:110 (ts: 5)\", \"200:1110 (ts: 50)\", \"2000:11110 (ts: 500)\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2019-05-19 10:18:14","commitOrder":18,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(TOPIC_NAME, expectedKey, expectedKey * 10, 0L));\n            }\n\n            \r\n            driver.advanceWallClockTime(2);\n            \r\n            driver.advanceWallClockTime(1);\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final String[] expected = {\"2:10 (ts: 0)\", \"20:110 (ts: 0)\", \"200:1110 (ts: 0)\", \"2000:11110 (ts: 0)\", \"-1:2 (ts: 2)\", \"-1:3 (ts: 3)\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2019-05-19 10:18:14","endLine":166,"groupId":"13832","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/f6aea7e9c6302be5de7a853b987b7dcc5eef59.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(topicName, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(topicName, expectedKey, expectedKey * 10, 0L));\n            }\n\n            \r\n            driver.advanceWallClockTime(2);\n            \r\n            driver.advanceWallClockTime(1);\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final String[] expected = {\"2:10 (ts: 0)\", \"20:110 (ts: 0)\", \"200:1110 (ts: 0)\", \"2000:11110 (ts: 0)\", \"-1:2 (ts: 2)\", \"-1:3 (ts: 3)\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"c140f09406b119d86d43bba6248d17fe0120a4dd","commitMessage":"@@@KAFKA-6474: remove KStreamTestDriver (#6732)\n\nThe implementation of KIP-258 broke the state store methods in KStreamTestDriver.\nThese methods were unused in this project.  so the breakage was not detected.\nSince this is an internal testing utility.  and it was deprecated and partially removed in\nfavor of TopologyTestDriver.  I opted to just complete the removal of the class.\n\nReviewers: A. Sophie Blee-Goldman <ableegoldman@gmail.com>.  Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-19 10:18:14","modifiedFileCount":"3","status":"M","submitter":"John Roesler"},{"authorTime":"2019-07-16 22:16:15","codes":[{"authorDate":"2019-07-16 22:16:15","commitOrder":19,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp)\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            mkProperties(mkMap(\n                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\")\n            )),\n            0L)) {\n            final ConsumerRecordFactory<Integer, Integer> recordFactory =\n                new ConsumerRecordFactory<>(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(expectedKey, expectedKey * 10, expectedKey / 2L));\n            }\n\n            driver.advanceWallClockTime(2);\n            driver.advanceWallClockTime(1);\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed.size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n            }\n        }\n    }\n","date":"2019-07-16 22:16:15","endLine":115,"groupId":"21184","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f7/ba7bf4a7cf63e833cba7adc8f860c620e0ade8.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp)\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            mkProperties(mkMap(\n                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\")\n            )),\n            0L)) {\n            final ConsumerRecordFactory<Integer, Integer> recordFactory =\n                new ConsumerRecordFactory<>(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(expectedKey, expectedKey * 10, expectedKey / 2L));\n            }\n\n            driver.advanceWallClockTime(2);\n            driver.advanceWallClockTime(1);\n\n            final String[] expected = {\n                \"2:10 (ts: 0)\",\n                \"20:110 (ts: 5)\",\n                \"200:1110 (ts: 50)\",\n                \"2000:11110 (ts: 500)\",\n                \"-1:2 (ts: 2)\",\n                \"-1:3 (ts: 3)\"\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed.size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n            }\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2019-07-16 22:16:15","commitOrder":19,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(TOPIC_NAME, expectedKey, expectedKey * 10, 0L));\n            }\n\n            \r\n            driver.advanceWallClockTime(2);\n            \r\n            driver.advanceWallClockTime(1);\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2019-07-16 22:16:15","endLine":172,"groupId":"13832","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f7/ba7bf4a7cf63e833cba7adc8f860c620e0ade8.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() {}\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(TOPIC_NAME, expectedKey, expectedKey * 10, 0L));\n            }\n\n            \r\n            driver.advanceWallClockTime(2);\n            \r\n            driver.advanceWallClockTime(1);\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final String[] expected = {\"2:10 (ts: 0)\", \"20:110 (ts: 0)\", \"200:1110 (ts: 0)\", \"2000:11110 (ts: 0)\", \"-1:2 (ts: 2)\", \"-1:3 (ts: 3)\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"00757cd99f6d8bf2760c3708d307347f4cde65f6","commitMessage":"@@@KAFKA-8450: Using KeyValueTimeStamp in MockProcessor (#6933)\n\nThis PR is to use KeyValueTimeStamp Object in MockProcessor Test file instead of String and change all the dependency files with broken test cases.\n\nReviewers: Kamal Chandraprakash.  Matthias J. Sax <mjsax@apache.org>.   Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-07-16 22:16:15","modifiedFileCount":"28","status":"M","submitter":"SuryaTeja Duggi"},{"authorTime":"2019-10-07 16:01:58","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":20,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp)\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            mkProperties(mkMap(\n                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\")\n            )),\n            Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed.size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n            }\n        }\n    }\n","date":"2019-10-07 16:01:58","endLine":114,"groupId":"20467","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/37b3c6ca25cedbc5d8ea2ccd41127d7c61b2e0.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp)\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            mkProperties(mkMap(\n                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\")\n            )),\n            0L)) {\n            final ConsumerRecordFactory<Integer, Integer> recordFactory =\n                new ConsumerRecordFactory<>(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(expectedKey, expectedKey * 10, expectedKey / 2L));\n            }\n\n            driver.advanceWallClockTime(2);\n            driver.advanceWallClockTime(1);\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed.size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n            }\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2019-10-07 16:01:58","commitOrder":20,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, 0L);\n            }\n\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2019-10-07 16:01:58","endLine":173,"groupId":"13832","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/37b3c6ca25cedbc5d8ea2ccd41127d7c61b2e0.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            for (final int expectedKey : expectedKeys) {\n                driver.pipeInput(recordFactory.create(TOPIC_NAME, expectedKey, expectedKey * 10, 0L));\n            }\n\n            \r\n            driver.advanceWallClockTime(2);\n            \r\n            driver.advanceWallClockTime(1);\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"a5a6938c69f4310f7ec519036f0df77d8022326a","commitMessage":"@@@KAFKA-8233: TopologyTestDriver test input and output usability improvements (#7378)\n\nImplements KIP-470\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2019-10-07 16:01:58","modifiedFileCount":"47","status":"M","submitter":"Jukka Karvanen"},{"authorTime":"2020-04-08 02:11:02","codes":[{"authorDate":"2020-04-08 02:11:02","commitOrder":21,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext<Object, Object> context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp)\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            mkProperties(mkMap(\n                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\")\n            )),\n            Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed.size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n            }\n        }\n    }\n","date":"2020-04-08 02:11:02","endLine":114,"groupId":"20467","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/1ad5ee679d0e9676d41da8dac921f40fb60d37.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp)\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            mkProperties(mkMap(\n                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\")\n            )),\n            Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed.size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n            }\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-04-08 02:11:02","commitOrder":21,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext<Object, Object> context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, 0L);\n            }\n\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2020-04-08 02:11:02","endLine":173,"groupId":"13832","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/1ad5ee679d0e9676d41da8dac921f40fb60d37.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, 0L);\n            }\n\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"29e08fd2c2d3349ba5cbd8fe5a9d35a0cea02b85","commitMessage":"@@@KAFKA-8410: Part 1: processor context bounds (#8414)\n\nAdd type bounds to the ProcessorContext.  which bounds the types that can be forwarded to child nodes.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2020-04-08 02:11:02","modifiedFileCount":"66","status":"M","submitter":"John Roesler"},{"authorTime":"2020-05-02 03:26:36","codes":[{"authorDate":"2020-05-02 03:26:36","commitOrder":22,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp)\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            mkProperties(mkMap(\n                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\")\n            )),\n            Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed.size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n            }\n        }\n    }\n","date":"2020-05-02 03:26:36","endLine":114,"groupId":"20467","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/37b3c6ca25cedbc5d8ea2ccd41127d7c61b2e0.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext<Object, Object> context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp)\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            mkProperties(mkMap(\n                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\")\n            )),\n            Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed.size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n            }\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-05-02 03:26:36","commitOrder":22,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, 0L);\n            }\n\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","date":"2020-05-02 03:26:36","endLine":173,"groupId":"13832","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/37b3c6ca25cedbc5d8ea2ccd41127d7c61b2e0.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext<Object, Object> context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, 0L);\n            }\n\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"fd095aaafdd207162cddf293b17f249875b9a532","commitMessage":"@@@KAFKA-8410: Revert Part 1: processor context bounds (#8414) (#8595)\n\nThis reverts commit 29e08fd2c2d3349ba5cbd8fe5a9d35a0cea02b85.\nThere turned out to be more than expected problems with adding the generic parameters.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2020-05-02 03:26:36","modifiedFileCount":"74","status":"M","submitter":"John Roesler"},{"authorTime":"2020-08-21 03:06:16","codes":[{"authorDate":"2020-08-21 03:06:16","commitOrder":23,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp)\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            mkProperties(mkMap(\n                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\")\n            )),\n            Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed().size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed().get(i));\n            }\n        }\n    }\n","date":"2020-08-21 03:06:16","endLine":114,"groupId":"20467","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/eb1d2cdf1d656adf262248804bf2e3ada2b7e4.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp)\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            mkProperties(mkMap(\n                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\")\n            )),\n            Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed.size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n            }\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-08-21 03:06:16","commitOrder":23,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, 0L);\n            }\n\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed().size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed().get(i));\n        }\n    }\n","date":"2020-08-21 03:06:16","endLine":173,"groupId":"13832","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/19/eb1d2cdf1d656adf262248804bf2e3ada2b7e4.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, 0L);\n            }\n\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed.size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed.get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":117,"status":"M"}],"commitId":"88d4bc4641064d21a481ba3b8562a4c97703d64d","commitMessage":"@@@KAFKA-10379: Implement the KIP-478 StreamBuilder#addGlobalStore() (#9148)\n\nFrom KIP-478.  implement the new StreamBuilder#addGlobalStore() overload\nthat takes a stateUpdateSupplier fully typed Processor<KIn.  VIn.  Void.  Void>.\n\nWhere necessary.  use the adapters to make the old APIs defer to the new ones. \nas well as limiting the scope of this change set.\n\nReviewers: Boyang Chen <boyang@apache.org>","date":"2020-08-21 03:06:16","modifiedFileCount":"41","status":"M","submitter":"John Roesler"},{"authorTime":"2020-10-03 07:49:12","codes":[{"authorDate":"2020-10-03 07:49:12","commitOrder":24,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp, To.all().withTimestamp(timestamp))\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            mkProperties(mkMap(\n                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\")\n            )),\n            Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed().size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed().get(i));\n            }\n        }\n    }\n","date":"2020-10-03 07:49:12","endLine":115,"groupId":"20467","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/08/bd5e80f74baddc613e454fbf7742c42f7bb33e.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp)\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            mkProperties(mkMap(\n                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\")\n            )),\n            Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed().size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed().get(i));\n            }\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2020-10-03 07:49:12","commitOrder":24,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp, To.all().withTimestamp(timestamp)));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, 0L);\n            }\n\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed().size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed().get(i));\n        }\n    }\n","date":"2020-10-03 07:49:12","endLine":174,"groupId":"13832","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/08/bd5e80f74baddc613e454fbf7742c42f7bb33e.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, 0L);\n            }\n\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed().size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed().get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"}],"commitId":"69790a1463bafc1f63e3c288a6636b3f4586c1b4","commitMessage":"@@@KAFKA-10535: Split ProcessorContext into Processor/StateStore/Record Contexts (#9361)\n\nMigrate different components of the old ProcessorContext interface\ninto separate interfaces that are more appropriate for their usages.\nSee KIP-478 for the details.\n\nReviewers: Guozhang Wang <guozhang@apache.org>.  Paul Whalen <pgwhalen@gmail.com>","date":"2020-10-03 07:49:12","modifiedFileCount":"71","status":"M","submitter":"John Roesler"},{"authorTime":"2020-10-03 07:49:12","codes":[{"authorDate":"2020-10-22 21:19:01","commitOrder":25,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp, To.all().withTimestamp(timestamp))\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            new Properties(),\n            Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed().size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed().get(i));\n            }\n        }\n    }\n","date":"2020-10-22 21:19:01","endLine":108,"groupId":"0","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2b/2b9ba947153c248e9d97277584fcfad503b1d4.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp, To.all().withTimestamp(timestamp))\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            mkProperties(mkMap(\n                mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy\"),\n                mkEntry(StreamsConfig.APPLICATION_ID_CONFIG, \"test\")\n            )),\n            Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed().size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed().get(i));\n            }\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-10-03 07:49:12","commitOrder":25,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp, To.all().withTimestamp(timestamp)));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, 0L);\n            }\n\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed().size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed().get(i));\n        }\n    }\n","date":"2020-10-03 07:49:12","endLine":174,"groupId":"13832","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/08/bd5e80f74baddc613e454fbf7742c42f7bb33e.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp, To.all().withTimestamp(timestamp)));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, 0L);\n            }\n\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed().size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed().get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"}],"commitId":"58bd0a6ee383b54ad8f1f9c7213d0978108150b8","commitMessage":"@@@MINOR: TopologyTestDriver should not require dummy parameters (#9477)\n\nTopologyTestDriver comes with a paper cut that it passes through a\nconfig requirement that application.id and bootstrap.servers must be\nconfigured. But these configs are not required in the context of\nTopologyTestDriver specifically. This change relaxes the requirement.\n\nReviewers: Boyang Chen <boyang@apache.org>.  Matthias J. Sax <mjsax@apache.org>","date":"2020-10-22 21:19:01","modifiedFileCount":"14","status":"M","submitter":"John Roesler"},{"authorTime":"2020-10-03 07:49:12","codes":[{"authorDate":"2020-12-05 02:51:12","commitOrder":26,"curCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp, To.all().withTimestamp(timestamp))\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed().size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed().get(i));\n            }\n        }\n    }\n","date":"2020-12-05 02:51:12","endLine":107,"groupId":"101383","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"testTransform","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/b1d3a8966766b7ae907c06747ce567d33beebf.src","preCode":"    public void testTransform() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp, To.all().withTimestamp(timestamp))\n                    );\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(\n            builder.build(),\n            new Properties(),\n            Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, expectedKey / 2L);\n            }\n\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n\n            final KeyValueTimestamp[] expected = {\n                new KeyValueTimestamp<>(2, 10, 0),\n                new KeyValueTimestamp<>(20, 110, 5),\n                new KeyValueTimestamp<>(200, 1110, 50),\n                new KeyValueTimestamp<>(2000, 11110, 500),\n                new KeyValueTimestamp<>(-1, 2, 2),\n                new KeyValueTimestamp<>(-1, 3, 3)\n            };\n\n            assertEquals(expected.length, processor.theCapturedProcessor().processed().size());\n            for (int i = 0; i < expected.length; i++) {\n                assertEquals(expected[i], processor.theCapturedProcessor().processed().get(i));\n            }\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2020-10-03 07:49:12","commitOrder":26,"curCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp, To.all().withTimestamp(timestamp)));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, 0L);\n            }\n\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed().size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed().get(i));\n        }\n    }\n","date":"2020-10-03 07:49:12","endLine":174,"groupId":"101383","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"testTransformWithNewDriverAndPunctuator","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/08/bd5e80f74baddc613e454fbf7742c42f7bb33e.src","preCode":"    public void testTransformWithNewDriverAndPunctuator() {\n        final StreamsBuilder builder = new StreamsBuilder();\n\n        final TransformerSupplier<Number, Number, KeyValue<Integer, Integer>> transformerSupplier =\n            () -> new Transformer<Number, Number, KeyValue<Integer, Integer>>() {\n                private int total = 0;\n\n                @Override\n                public void init(final ProcessorContext context) {\n                    context.schedule(\n                        Duration.ofMillis(1),\n                        PunctuationType.WALL_CLOCK_TIME,\n                        timestamp -> context.forward(-1, (int) timestamp, To.all().withTimestamp(timestamp)));\n                }\n\n                @Override\n                public KeyValue<Integer, Integer> transform(final Number key, final Number value) {\n                    total += value.intValue();\n                    return KeyValue.pair(key.intValue() * 2, total);\n                }\n\n                @Override\n                public void close() { }\n            };\n\n        final int[] expectedKeys = {1, 10, 100, 1000};\n\n        final MockProcessorSupplier<Integer, Integer> processor = new MockProcessorSupplier<>();\n        final KStream<Integer, Integer> stream = builder.stream(TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()));\n        stream.transform(transformerSupplier).process(processor);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, Instant.ofEpochMilli(0L))) {\n            final TestInputTopic<Integer, Integer> inputTopic =\n                    driver.createInputTopic(TOPIC_NAME, new IntegerSerializer(), new IntegerSerializer());\n            for (final int expectedKey : expectedKeys) {\n                inputTopic.pipeInput(expectedKey, expectedKey * 10, 0L);\n            }\n\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(2));\n            \r\n            driver.advanceWallClockTime(Duration.ofMillis(1));\n        }\n\n        assertEquals(6, processor.theCapturedProcessor().processed().size());\n\n        final KeyValueTimestamp[] expected = {new KeyValueTimestamp<>(2, 10, 0),\n            new KeyValueTimestamp<>(20, 110, 0),\n            new KeyValueTimestamp<>(200, 1110, 0),\n            new KeyValueTimestamp<>(2000, 11110, 0),\n            new KeyValueTimestamp<>(-1, 2, 2),\n            new KeyValueTimestamp<>(-1, 3, 3)};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.theCapturedProcessor().processed().get(i));\n        }\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamTransformTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"N"}],"commitId":"4e9c7fc8a5db6e59e43a67586867c3b1c9fbe567","commitMessage":"@@@KAFKA-10629: TopologyTestDriver should not require a Properties argument (#9660)\n\nImplements KIP-680.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  Matthias J. Sax <matthias@confluent.io>","date":"2020-12-05 02:51:12","modifiedFileCount":"8","status":"M","submitter":"Rohit Deshpande"}]
