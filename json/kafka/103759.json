[{"authorTime":"2019-10-05 00:19:18","codes":[{"authorDate":"2019-10-05 00:19:18","commitOrder":1,"curCode":"    public void testApiVersionsRequest() {\n        \r\n        client.ready(node, time.milliseconds());\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        delayedApiVersionsResponse(0, ApiKeys.API_VERSIONS.latestVersion(),\n            ApiVersionsResponse.DEFAULT_API_VERSIONS_RESPONSE);\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertFalse(client.hasInFlightRequests(node.idString()));\n\n        \r\n        assertTrue(client.isReady(node, time.milliseconds()));\n    }\n","date":"2019-10-05 00:19:18","endLine":267,"groupId":"10559","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testApiVersionsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/ecbc74c52acfa7b21be8363c0e7283882b09e0.src","preCode":"    public void testApiVersionsRequest() {\n        \r\n        client.ready(node, time.milliseconds());\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        delayedApiVersionsResponse(0, ApiKeys.API_VERSIONS.latestVersion(),\n            ApiVersionsResponse.DEFAULT_API_VERSIONS_RESPONSE);\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertFalse(client.hasInFlightRequests(node.idString()));\n\n        \r\n        assertTrue(client.isReady(node, time.milliseconds()));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"B"},{"authorDate":"2019-10-05 00:19:18","commitOrder":1,"curCode":"    public void testUnsupportedApiVersionsRequestWithVersionProvidedByTheBroker() {\n        \r\n        client.ready(node, time.milliseconds());\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        client.poll(0, time.milliseconds());\n        assertEquals(1, selector.completedSends().size());\n\n        ByteBuffer buffer = selector.completedSendBuffers().get(0).buffer();\n        RequestHeader header = parseHeader(buffer);\n        assertEquals(ApiKeys.API_VERSIONS, header.apiKey());\n        assertEquals(3, header.apiVersion());\n\n        \r\n        ApiVersionsResponseKeyCollection apiKeys = new ApiVersionsResponseKeyCollection();\n        apiKeys.add(new ApiVersionsResponseKey()\n            .setApiKey(ApiKeys.API_VERSIONS.id)\n            .setMinVersion((short) 0)\n            .setMaxVersion((short) 2));\n        delayedApiVersionsResponse(0, (short) 0,\n            new ApiVersionsResponse(\n                new ApiVersionsResponseData()\n                    .setErrorCode(Errors.UNSUPPORTED_VERSION.code())\n                    .setApiKeys(apiKeys)\n            ));\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        assertEquals(1, selector.completedReceives().size());\n\n        \r\n        selector.completedSends().clear();\n        selector.completedSendBuffers().clear();\n        selector.completedReceives().clear();\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertEquals(1, selector.completedSends().size());\n\n        buffer = selector.completedSendBuffers().get(0).buffer();\n        header = parseHeader(buffer);\n        assertEquals(ApiKeys.API_VERSIONS, header.apiKey());\n        assertEquals(2, header.apiVersion());\n\n        \r\n        delayedApiVersionsResponse(1, (short) 0,\n            ApiVersionsResponse.DEFAULT_API_VERSIONS_RESPONSE);\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertFalse(client.hasInFlightRequests(node.idString()));\n        assertEquals(1, selector.completedReceives().size());\n\n        \r\n        assertTrue(client.isReady(node, time.milliseconds()));\n    }\n","date":"2019-10-05 00:19:18","endLine":340,"groupId":"16279","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnsupportedApiVersionsRequestWithVersionProvidedByTheBroker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/ecbc74c52acfa7b21be8363c0e7283882b09e0.src","preCode":"    public void testUnsupportedApiVersionsRequestWithVersionProvidedByTheBroker() {\n        \r\n        client.ready(node, time.milliseconds());\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        client.poll(0, time.milliseconds());\n        assertEquals(1, selector.completedSends().size());\n\n        ByteBuffer buffer = selector.completedSendBuffers().get(0).buffer();\n        RequestHeader header = parseHeader(buffer);\n        assertEquals(ApiKeys.API_VERSIONS, header.apiKey());\n        assertEquals(3, header.apiVersion());\n\n        \r\n        ApiVersionsResponseKeyCollection apiKeys = new ApiVersionsResponseKeyCollection();\n        apiKeys.add(new ApiVersionsResponseKey()\n            .setApiKey(ApiKeys.API_VERSIONS.id)\n            .setMinVersion((short) 0)\n            .setMaxVersion((short) 2));\n        delayedApiVersionsResponse(0, (short) 0,\n            new ApiVersionsResponse(\n                new ApiVersionsResponseData()\n                    .setErrorCode(Errors.UNSUPPORTED_VERSION.code())\n                    .setApiKeys(apiKeys)\n            ));\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        assertEquals(1, selector.completedReceives().size());\n\n        \r\n        selector.completedSends().clear();\n        selector.completedSendBuffers().clear();\n        selector.completedReceives().clear();\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertEquals(1, selector.completedSends().size());\n\n        buffer = selector.completedSendBuffers().get(0).buffer();\n        header = parseHeader(buffer);\n        assertEquals(ApiKeys.API_VERSIONS, header.apiKey());\n        assertEquals(2, header.apiVersion());\n\n        \r\n        delayedApiVersionsResponse(1, (short) 0,\n            ApiVersionsResponse.DEFAULT_API_VERSIONS_RESPONSE);\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertFalse(client.hasInFlightRequests(node.idString()));\n        assertEquals(1, selector.completedReceives().size());\n\n        \r\n        assertTrue(client.isReady(node, time.milliseconds()));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"B"}],"commitId":"f98013cc501ab30c43ca707a1fbf46c4e9dc1215","commitMessage":"@@@Part 1 of KIP-511: Collect and Expose Client's Name and Version in the Brokers #7381\n\nReviewers: Stanislav Kozlovski <stanislav_kozlovski@outlook.com>.  David Arthur <mumrah@gmail.com>.  Colin P. McCabe <cmccabe@apache.org>","date":"2019-10-05 00:19:18","modifiedFileCount":"22","status":"B","submitter":"David Jacot"},{"authorTime":"2021-01-20 00:37:45","codes":[{"authorDate":"2019-10-05 00:19:18","commitOrder":2,"curCode":"    public void testApiVersionsRequest() {\n        \r\n        client.ready(node, time.milliseconds());\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        delayedApiVersionsResponse(0, ApiKeys.API_VERSIONS.latestVersion(),\n            ApiVersionsResponse.DEFAULT_API_VERSIONS_RESPONSE);\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertFalse(client.hasInFlightRequests(node.idString()));\n\n        \r\n        assertTrue(client.isReady(node, time.milliseconds()));\n    }\n","date":"2019-10-05 00:19:18","endLine":267,"groupId":"10559","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testApiVersionsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b5/ecbc74c52acfa7b21be8363c0e7283882b09e0.src","preCode":"    public void testApiVersionsRequest() {\n        \r\n        client.ready(node, time.milliseconds());\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        delayedApiVersionsResponse(0, ApiKeys.API_VERSIONS.latestVersion(),\n            ApiVersionsResponse.DEFAULT_API_VERSIONS_RESPONSE);\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertFalse(client.hasInFlightRequests(node.idString()));\n\n        \r\n        assertTrue(client.isReady(node, time.milliseconds()));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"N"},{"authorDate":"2021-01-20 00:37:45","commitOrder":2,"curCode":"    public void testUnsupportedApiVersionsRequestWithVersionProvidedByTheBroker() {\n        \r\n        client.ready(node, time.milliseconds());\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        client.poll(0, time.milliseconds());\n        assertEquals(1, selector.completedSends().size());\n\n        ByteBuffer buffer = selector.completedSendBuffers().get(0).buffer();\n        RequestHeader header = parseHeader(buffer);\n        assertEquals(ApiKeys.API_VERSIONS, header.apiKey());\n        assertEquals(3, header.apiVersion());\n\n        \r\n        ApiVersionCollection apiKeys = new ApiVersionCollection();\n        apiKeys.add(new ApiVersion()\n            .setApiKey(ApiKeys.API_VERSIONS.id)\n            .setMinVersion((short) 0)\n            .setMaxVersion((short) 2));\n        delayedApiVersionsResponse(0, (short) 0,\n            new ApiVersionsResponse(\n                new ApiVersionsResponseData()\n                    .setErrorCode(Errors.UNSUPPORTED_VERSION.code())\n                    .setApiKeys(apiKeys)\n            ));\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        assertEquals(1, selector.completedReceives().size());\n\n        \r\n        selector.completedSends().clear();\n        selector.completedSendBuffers().clear();\n        selector.completedReceives().clear();\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertEquals(1, selector.completedSends().size());\n\n        buffer = selector.completedSendBuffers().get(0).buffer();\n        header = parseHeader(buffer);\n        assertEquals(ApiKeys.API_VERSIONS, header.apiKey());\n        assertEquals(2, header.apiVersion());\n\n        \r\n        delayedApiVersionsResponse(1, (short) 0,\n            ApiVersionsResponse.DEFAULT_API_VERSIONS_RESPONSE);\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertFalse(client.hasInFlightRequests(node.idString()));\n        assertEquals(1, selector.completedReceives().size());\n\n        \r\n        assertTrue(client.isReady(node, time.milliseconds()));\n    }\n","date":"2021-01-20 00:37:45","endLine":357,"groupId":"16279","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnsupportedApiVersionsRequestWithVersionProvidedByTheBroker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/52/e74d4b86b80c0105b558c6014e931842db0698.src","preCode":"    public void testUnsupportedApiVersionsRequestWithVersionProvidedByTheBroker() {\n        \r\n        client.ready(node, time.milliseconds());\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        client.poll(0, time.milliseconds());\n        assertEquals(1, selector.completedSends().size());\n\n        ByteBuffer buffer = selector.completedSendBuffers().get(0).buffer();\n        RequestHeader header = parseHeader(buffer);\n        assertEquals(ApiKeys.API_VERSIONS, header.apiKey());\n        assertEquals(3, header.apiVersion());\n\n        \r\n        ApiVersionsResponseKeyCollection apiKeys = new ApiVersionsResponseKeyCollection();\n        apiKeys.add(new ApiVersionsResponseKey()\n            .setApiKey(ApiKeys.API_VERSIONS.id)\n            .setMinVersion((short) 0)\n            .setMaxVersion((short) 2));\n        delayedApiVersionsResponse(0, (short) 0,\n            new ApiVersionsResponse(\n                new ApiVersionsResponseData()\n                    .setErrorCode(Errors.UNSUPPORTED_VERSION.code())\n                    .setApiKeys(apiKeys)\n            ));\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        assertEquals(1, selector.completedReceives().size());\n\n        \r\n        selector.completedSends().clear();\n        selector.completedSendBuffers().clear();\n        selector.completedReceives().clear();\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertEquals(1, selector.completedSends().size());\n\n        buffer = selector.completedSendBuffers().get(0).buffer();\n        header = parseHeader(buffer);\n        assertEquals(ApiKeys.API_VERSIONS, header.apiKey());\n        assertEquals(2, header.apiVersion());\n\n        \r\n        delayedApiVersionsResponse(1, (short) 0,\n            ApiVersionsResponse.DEFAULT_API_VERSIONS_RESPONSE);\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertFalse(client.hasInFlightRequests(node.idString()));\n        assertEquals(1, selector.completedReceives().size());\n\n        \r\n        assertTrue(client.isReady(node, time.milliseconds()));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":287,"status":"M"}],"commitId":"f7c0b0d1728c0d5ccac90776be86d2c4740633cc","commitMessage":"@@@MINOR: Replace ApiVersion by auto-generated protocol (#9746)\n\nReviewers: Ismael Juma <ismael@juma.me.uk>","date":"2021-01-20 00:37:45","modifiedFileCount":"15","status":"M","submitter":"Chia-Ping Tsai"},{"authorTime":"2021-02-05 02:04:17","codes":[{"authorDate":"2021-02-05 02:04:17","commitOrder":3,"curCode":"    public void testApiVersionsRequest() {\n        \r\n        client.ready(node, time.milliseconds());\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        delayedApiVersionsResponse(0, ApiKeys.API_VERSIONS.latestVersion(), defaultApiVersionsResponse());\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertFalse(client.hasInFlightRequests(node.idString()));\n\n        \r\n        assertTrue(client.isReady(node, time.milliseconds()));\n    }\n","date":"2021-02-19 08:25:51","endLine":310,"groupId":"103759","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testApiVersionsRequest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b1/3f85422b6db455e8345f36e5ae13627d024a45.src","preCode":"    public void testApiVersionsRequest() {\n        \r\n        client.ready(node, time.milliseconds());\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        delayedApiVersionsResponse(0, ApiKeys.API_VERSIONS.latestVersion(),\n            ApiVersionsResponse.DEFAULT_API_VERSIONS_RESPONSE);\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertFalse(client.hasInFlightRequests(node.idString()));\n\n        \r\n        assertTrue(client.isReady(node, time.milliseconds()));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":289,"status":"M"},{"authorDate":"2021-02-05 02:04:17","commitOrder":3,"curCode":"    public void testUnsupportedApiVersionsRequestWithVersionProvidedByTheBroker() {\n        \r\n        client.ready(node, time.milliseconds());\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        client.poll(0, time.milliseconds());\n        assertEquals(1, selector.completedSends().size());\n\n        ByteBuffer buffer = selector.completedSendBuffers().get(0).buffer();\n        RequestHeader header = parseHeader(buffer);\n        assertEquals(ApiKeys.API_VERSIONS, header.apiKey());\n        assertEquals(3, header.apiVersion());\n\n        \r\n        ApiVersionCollection apiKeys = new ApiVersionCollection();\n        apiKeys.add(new ApiVersion()\n            .setApiKey(ApiKeys.API_VERSIONS.id)\n            .setMinVersion((short) 0)\n            .setMaxVersion((short) 2));\n        delayedApiVersionsResponse(0, (short) 0,\n            new ApiVersionsResponse(\n                new ApiVersionsResponseData()\n                    .setErrorCode(Errors.UNSUPPORTED_VERSION.code())\n                    .setApiKeys(apiKeys)\n            ));\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        assertEquals(1, selector.completedReceives().size());\n\n        \r\n        selector.completedSends().clear();\n        selector.completedSendBuffers().clear();\n        selector.completedReceives().clear();\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertEquals(1, selector.completedSends().size());\n\n        buffer = selector.completedSendBuffers().get(0).buffer();\n        header = parseHeader(buffer);\n        assertEquals(ApiKeys.API_VERSIONS, header.apiKey());\n        assertEquals(2, header.apiVersion());\n\n        \r\n        delayedApiVersionsResponse(1, (short) 0, defaultApiVersionsResponse());\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertFalse(client.hasInFlightRequests(node.idString()));\n        assertEquals(1, selector.completedReceives().size());\n\n        \r\n        assertTrue(client.isReady(node, time.milliseconds()));\n    }\n","date":"2021-02-19 08:25:51","endLine":382,"groupId":"103759","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testUnsupportedApiVersionsRequestWithVersionProvidedByTheBroker","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b1/3f85422b6db455e8345f36e5ae13627d024a45.src","preCode":"    public void testUnsupportedApiVersionsRequestWithVersionProvidedByTheBroker() {\n        \r\n        client.ready(node, time.milliseconds());\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        client.poll(0, time.milliseconds());\n        assertEquals(1, selector.completedSends().size());\n\n        ByteBuffer buffer = selector.completedSendBuffers().get(0).buffer();\n        RequestHeader header = parseHeader(buffer);\n        assertEquals(ApiKeys.API_VERSIONS, header.apiKey());\n        assertEquals(3, header.apiVersion());\n\n        \r\n        ApiVersionCollection apiKeys = new ApiVersionCollection();\n        apiKeys.add(new ApiVersion()\n            .setApiKey(ApiKeys.API_VERSIONS.id)\n            .setMinVersion((short) 0)\n            .setMaxVersion((short) 2));\n        delayedApiVersionsResponse(0, (short) 0,\n            new ApiVersionsResponse(\n                new ApiVersionsResponseData()\n                    .setErrorCode(Errors.UNSUPPORTED_VERSION.code())\n                    .setApiKeys(apiKeys)\n            ));\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertTrue(client.hasInFlightRequests(node.idString()));\n\n        \r\n        assertEquals(1, selector.completedReceives().size());\n\n        \r\n        selector.completedSends().clear();\n        selector.completedSendBuffers().clear();\n        selector.completedReceives().clear();\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertEquals(1, selector.completedSends().size());\n\n        buffer = selector.completedSendBuffers().get(0).buffer();\n        header = parseHeader(buffer);\n        assertEquals(ApiKeys.API_VERSIONS, header.apiKey());\n        assertEquals(2, header.apiVersion());\n\n        \r\n        delayedApiVersionsResponse(1, (short) 0,\n            ApiVersionsResponse.DEFAULT_API_VERSIONS_RESPONSE);\n\n        \r\n        client.poll(0, time.milliseconds());\n\n        \r\n        assertFalse(client.hasInFlightRequests(node.idString()));\n        assertEquals(1, selector.completedReceives().size());\n\n        \r\n        assertTrue(client.isReady(node, time.milliseconds()));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/NetworkClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"M"}],"commitId":"698319b8e2c1f6cb574f339eede6f2a5b1919b55","commitMessage":"@@@KAFKA-12278; Ensure exposed api versions are consistent within listener (#10666)\n\nPreviously all APIs were accessible on every listener exposed by the broker.  but\nwith KIP-500.  that is no longer true.  We now have more complex requirements for\nAPI accessibility.\n\nFor example.  the KIP-500 controller exposes some APIs which are not exposed by\nbrokers.  such as BrokerHeartbeatRequest.  and does not expose most client APIs. \nsuch as JoinGroupRequest.  etc.  Similarly.  the KIP-500 broker does not implement\nsome APIs that the ZK-based broker does.  such as LeaderAndIsrRequest and\nUpdateFeaturesRequest.\n\nAll of this means that we need more sophistication in how we expose APIs and\nkeep them consistent with the ApiVersions API. Up until now.  we have been\nworking around this using the controllerOnly flag inside ApiKeys.  but this is\nnot rich enough to support all of the cases listed above.  This PR introduces a\nnew \"listeners\" field to the request schema definitions.  This field is an array\nof strings which indicate the listener types in which the API should be exposed.\nWe currently support \"zkBroker\".  \"broker\".  and \"controller\".  (\"broker\"\nindicates the KIP-500 broker.  whereas zkBroker indicates the old broker).\n\nThis PR also creates ApiVersionManager to encapsulate the creation of the\nApiVersionsResponse based on the listener type.  Additionally.  it modifies\nSocketServer to check the listener type of received requests before forwarding\nthem to the request handler.\n\nFinally.  this PR also fixes a bug in the handling of the ApiVersionsResponse\nprior to authentication. Previously a static response was sent.  which means that\nchanges to features would not get reflected. This also meant that the logic to\nensure that only the intersection of version ranges supported by the controller\nwould get exposed did not work. I think this is important because some clients\nrely on the initial pre-authenticated ApiVersions response rather than doing a\nsecond round after authentication as the Java client does.\n\nOne final cleanup note: I have removed the expectation that envelope requests\nare only allowed on \"privileged\" listeners.  This made sense initially because\nwe expected to use forwarding before the KIP-500 controller was available. That\nis not the case anymore and we expect the Envelope API to only be exposed on the\ncontroller listener. I have nevertheless preserved the existing workarounds to\nallow verification of the forwarding behavior in integration testing.\n\nReviewers: Colin P. McCabe <cmccabe@apache.org>.  Ismael Juma <ismael@juma.me.uk>\n","date":"2021-02-19 08:25:51","modifiedFileCount":"24","status":"M","submitter":"Jason Gustafson"}]
