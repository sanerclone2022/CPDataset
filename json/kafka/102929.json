[{"authorTime":"2021-04-30 10:47:26","codes":[{"authorDate":"2021-04-30 10:47:26","commitOrder":1,"curCode":"    public KeyValueIterator<K, V> range(final K from,\n                                        final K to) {\n        Objects.requireNonNull(from, \"keyFrom cannot be null\");\n        Objects.requireNonNull(to, \"keyTo cannot be null\");\n        return new MeteredKeyValueIterator(\n            wrapped().range(Bytes.wrap(serdes.rawKey(from)), Bytes.wrap(serdes.rawKey(to))),\n            rangeSensor\n        );\n    }\n","date":"2021-04-30 10:47:26","endLine":257,"groupId":"19916","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"range","params":"(finalKfrom@finalKto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/c44e8a49faa69be6f5d7070a4271e2e58d3a2b.src","preCode":"    public KeyValueIterator<K, V> range(final K from,\n                                        final K to) {\n        Objects.requireNonNull(from, \"keyFrom cannot be null\");\n        Objects.requireNonNull(to, \"keyTo cannot be null\");\n        return new MeteredKeyValueIterator(\n            wrapped().range(Bytes.wrap(serdes.rawKey(from)), Bytes.wrap(serdes.rawKey(to))),\n            rangeSensor\n        );\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":249,"status":"B"},{"authorDate":"2021-04-30 10:47:26","commitOrder":1,"curCode":"    public KeyValueIterator<K, V> reverseRange(final K from,\n                                               final K to) {\n        Objects.requireNonNull(from, \"keyFrom cannot be null\");\n        Objects.requireNonNull(to, \"keyTo cannot be null\");\n        return new MeteredKeyValueIterator(\n            wrapped().reverseRange(Bytes.wrap(serdes.rawKey(from)), Bytes.wrap(serdes.rawKey(to))),\n            rangeSensor\n        );\n    }\n","date":"2021-04-30 10:47:26","endLine":268,"groupId":"19916","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"reverseRange","params":"(finalKfrom@finalKto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/18/c44e8a49faa69be6f5d7070a4271e2e58d3a2b.src","preCode":"    public KeyValueIterator<K, V> reverseRange(final K from,\n                                               final K to) {\n        Objects.requireNonNull(from, \"keyFrom cannot be null\");\n        Objects.requireNonNull(to, \"keyTo cannot be null\");\n        return new MeteredKeyValueIterator(\n            wrapped().reverseRange(Bytes.wrap(serdes.rawKey(from)), Bytes.wrap(serdes.rawKey(to))),\n            rangeSensor\n        );\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":260,"status":"B"}],"commitId":"e454becb33faac0851b7d145452992f183cbff76","commitMessage":"@@@KAFKA-12396: added null check for state stores key (#10548)\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  Matthias J. Sax <matthias@confluent.io>","date":"2021-04-30 10:47:26","modifiedFileCount":"9","status":"B","submitter":"Valery Kokorev"},{"authorTime":"2021-07-30 10:52:16","codes":[{"authorDate":"2021-07-30 10:52:16","commitOrder":2,"curCode":"    public KeyValueIterator<K, V> range(final K from,\n                                        final K to) {\n        final byte[] serFrom = from == null ? null : serdes.rawKey(from);\n        final byte[] serTo = to == null ? null : serdes.rawKey(to);\n        return new MeteredKeyValueIterator(\n            wrapped().range(Bytes.wrap(serFrom), Bytes.wrap(serTo)),\n            rangeSensor\n        );\n    }\n","date":"2021-07-30 10:52:16","endLine":275,"groupId":"102929","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"range","params":"(finalKfrom@finalKto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/70/9c844890f970e537ebc421a3a8e91b071bf876.src","preCode":"    public KeyValueIterator<K, V> range(final K from,\n                                        final K to) {\n        Objects.requireNonNull(from, \"keyFrom cannot be null\");\n        Objects.requireNonNull(to, \"keyTo cannot be null\");\n        return new MeteredKeyValueIterator(\n            wrapped().range(Bytes.wrap(serdes.rawKey(from)), Bytes.wrap(serdes.rawKey(to))),\n            rangeSensor\n        );\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":267,"status":"M"},{"authorDate":"2021-07-30 10:52:16","commitOrder":2,"curCode":"    public KeyValueIterator<K, V> reverseRange(final K from,\n                                               final K to) {\n        final byte[] serFrom = from == null ? null : serdes.rawKey(from);\n        final byte[] serTo = to == null ? null : serdes.rawKey(to);\n        return new MeteredKeyValueIterator(\n            wrapped().reverseRange(Bytes.wrap(serFrom), Bytes.wrap(serTo)),\n            rangeSensor\n        );\n    }\n","date":"2021-07-30 10:52:16","endLine":286,"groupId":"102929","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"reverseRange","params":"(finalKfrom@finalKto)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/70/9c844890f970e537ebc421a3a8e91b071bf876.src","preCode":"    public KeyValueIterator<K, V> reverseRange(final K from,\n                                               final K to) {\n        Objects.requireNonNull(from, \"keyFrom cannot be null\");\n        Objects.requireNonNull(to, \"keyTo cannot be null\");\n        return new MeteredKeyValueIterator(\n            wrapped().reverseRange(Bytes.wrap(serdes.rawKey(from)), Bytes.wrap(serdes.rawKey(to))),\n            rangeSensor\n        );\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/state/internals/MeteredKeyValueStore.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"}],"commitId":"22541361b7c62913bc848fb03e5f807e152a1023","commitMessage":"@@@Add support for infinite endpoints for range queries (#11120)\n\nAdd support to open endpoint range queries in key-value stores\n\nImplements: KIP-763\n\nReviewers: Almog Gavra <almog@confluent.io>.  Luke Chen <showuon@gmail.com>.  John Roesler <vvcephei@apache.org>","date":"2021-07-30 10:52:16","modifiedFileCount":"14","status":"M","submitter":"Patrick Stuedi"}]
