[{"authorTime":"2020-06-11 08:53:43","codes":[{"authorDate":"2020-06-17 22:24:07","commitOrder":4,"curCode":"    public void shouldUnregisterMetricsInCloseDirty() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(false, \"100\"), consumer);\n\n        task.suspend();\n        assertThat(getTaskMetrics(), not(empty()));\n        task.closeDirty();\n        assertThat(getTaskMetrics(), empty());\n    }\n","date":"2020-06-17 22:24:07","endLine":1752,"groupId":"3196","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUnregisterMetricsInCloseDirty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/59/e96d40d4c1c6e748f59ac86fc2126574a8f2cb.src","preCode":"    public void shouldUnregisterMetricsInCloseDirty() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(false, \"100\"), consumer);\n\n        task.suspend();\n        assertThat(getTaskMetrics(), not(empty()));\n        task.closeDirty();\n        assertThat(getTaskMetrics(), empty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1741,"status":"B"},{"authorDate":"2020-06-11 08:53:43","commitOrder":4,"curCode":"    public void closeShouldBeIdempotent() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(false, \"100\"), consumer);\n\n        task.suspend();\n        task.closeClean();\n\n        \r\n        task.closeClean();\n        task.closeDirty();\n\n        EasyMock.reset(stateManager);\n        EasyMock.replay(stateManager);\n    }\n","date":"2020-06-11 08:53:43","endLine":1772,"groupId":"3196","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"closeShouldBeIdempotent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8f/8bb54c53d79f47100dd471f7ae456f741c5173.src","preCode":"    public void closeShouldBeIdempotent() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(false, \"100\"), consumer);\n\n        task.suspend();\n        task.closeClean();\n\n        \r\n        task.closeClean();\n        task.closeDirty();\n\n        EasyMock.reset(stateManager);\n        EasyMock.replay(stateManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1756,"status":"NB"}],"commitId":"147ffb9a968d62ef78ac6b330a20023ed49ddbb8","commitMessage":"@@@KAFKA-10165: Remove Percentiles from e2e metrics (#8882)\n\n* Remove problematic Percentiles measurements until the implementation is fixed\n* Fix leaking e2e metrics when task is closed\n* Fix leaking metrics when tasks are recycled\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>","date":"2020-06-17 22:24:07","modifiedFileCount":"12","status":"M","submitter":"John Roesler"},{"authorTime":"2021-01-07 06:01:02","codes":[{"authorDate":"2021-01-07 06:01:02","commitOrder":5,"curCode":"    public void shouldUnregisterMetricsInCloseDirty() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(\"100\"), consumer);\n\n        task.suspend();\n        assertThat(getTaskMetrics(), not(empty()));\n        task.closeDirty();\n        assertThat(getTaskMetrics(), empty());\n    }\n","date":"2021-01-07 06:01:02","endLine":1989,"groupId":"102068","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldUnregisterMetricsInCloseDirty","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void shouldUnregisterMetricsInCloseDirty() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(false, \"100\"), consumer);\n\n        task.suspend();\n        assertThat(getTaskMetrics(), not(empty()));\n        task.closeDirty();\n        assertThat(getTaskMetrics(), empty());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1978,"status":"M"},{"authorDate":"2021-01-07 06:01:02","commitOrder":5,"curCode":"    public void closeShouldBeIdempotent() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(\"100\"), consumer);\n\n        task.suspend();\n        task.closeClean();\n\n        \r\n        task.closeClean();\n        task.closeDirty();\n\n        EasyMock.reset(stateManager);\n        EasyMock.replay(stateManager);\n    }\n","date":"2021-01-07 06:01:02","endLine":2022,"groupId":"102068","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"closeShouldBeIdempotent","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c1/b67d9f5e37d8b8b82948e5ddba15ceacb74034.src","preCode":"    public void closeShouldBeIdempotent() {\n        EasyMock.expect(stateManager.changelogPartitions()).andReturn(Collections.emptySet()).anyTimes();\n        EasyMock.expect(recordCollector.offsets()).andReturn(Collections.emptyMap()).anyTimes();\n        EasyMock.replay(stateManager, recordCollector);\n\n        task = createOptimizedStatefulTask(createConfig(false, \"100\"), consumer);\n\n        task.suspend();\n        task.closeClean();\n\n        \r\n        task.closeClean();\n        task.closeDirty();\n\n        EasyMock.reset(stateManager);\n        EasyMock.replay(stateManager);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamTaskTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2006,"status":"M"}],"commitId":"22e8e71156762b40ac93e2cbd42eacba00dbfb0c","commitMessage":"@@@KAFKA-9274: Fix commit-TimeoutException handling for EOS (#9800)\n\nIf EOS is enabled and the TX commit fails with a timeout. \nwe should not process more messages (what is ok for non-EOS)\nbecause we don't really know the status of the TX.\nIf the commit was indeed successful.  we won't have an open TX\ncan calling send() would fail with an fatal error.\n\nInstead.  we should retry the (idempotent) commit of the TX. \nand start a new TX afterwards.\n\nReviewers: Boyang Chen <boyang@confluent.io>.  John Roesler <john@confluent.io>","date":"2021-01-07 06:01:02","modifiedFileCount":"2","status":"M","submitter":"Matthias J. Sax"}]
