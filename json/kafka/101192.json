[{"authorTime":"2019-08-14 22:58:28","codes":[{"authorDate":"2019-01-26 15:56:39","commitOrder":2,"curCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new NoOpRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new KeyValueSegments(storeName, RETENTION_PERIOD, SEGMENT_INTERVAL);\n    }\n","date":"2019-01-26 15:56:39","endLine":65,"groupId":"8871","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7c/851343fba1be087f08bc512581add7a32b2529.src","preCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new NoOpRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new KeyValueSegments(storeName, RETENTION_PERIOD, SEGMENT_INTERVAL);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueSegmentsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"NB"},{"authorDate":"2019-08-14 22:58:28","commitOrder":2,"curCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new NoOpRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new TimestampedSegments(storeName, RETENTION_PERIOD, SEGMENT_INTERVAL);\n    }\n","date":"2019-08-14 22:58:28","endLine":65,"groupId":"8871","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cc/c88d0c31f5384985128200103690916f11f84b.src","preCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new NoOpRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new TimestampedSegments(storeName, RETENTION_PERIOD, SEGMENT_INTERVAL);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/TimestampedSegmentsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"}],"commitId":"e6fe4c13deb9ca814513a8c12d79dd76af658762","commitMessage":"@@@MINOR: Correct typo in test name `TimetampedSegmentsTest` (#7210)\n\nReviewers: Sophie Blee-Goldman <sophie@confluent.io>.  Stanislav Kozlovski <stanislav@confluent.io>.  Bill Bejeck <bbejeck@gmail.com>","date":"2019-08-14 22:58:28","modifiedFileCount":"0","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-08-27 07:28:22","codes":[{"authorDate":"2019-08-27 07:28:22","commitOrder":3,"curCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new NoOpRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new KeyValueSegments(storeName, METRICS_SCOPE, RETENTION_PERIOD, SEGMENT_INTERVAL);\n    }\n","date":"2019-08-27 07:28:22","endLine":66,"groupId":"8871","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/dd/f617596c4176106b63b6fdbcc1f3fcbccacc67.src","preCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new NoOpRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new KeyValueSegments(storeName, RETENTION_PERIOD, SEGMENT_INTERVAL);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueSegmentsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2019-08-27 07:28:22","commitOrder":3,"curCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new NoOpRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new TimestampedSegments(storeName, METRICS_SCOPE, RETENTION_PERIOD, SEGMENT_INTERVAL);\n    }\n","date":"2019-08-27 07:28:22","endLine":66,"groupId":"8871","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/8d/294ce33ee864eb82594ae073632aa412af07b6.src","preCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new NoOpRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new TimestampedSegments(storeName, RETENTION_PERIOD, SEGMENT_INTERVAL);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/TimestampedSegmentsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"24547b810ce9aae4389dad7f41cc47caba73046c","commitMessage":"@@@KAFKA-8579: Expose RocksDB metrics (#7209)\n\nRocksDB metrics are added to the Kafka metrics. For each segmented state store only\none set of metrics is exposed rather than one set of metrics for each segment.\n\nThe metrics are not computed yet.\n\nReviewers: John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-08-27 07:28:22","modifiedFileCount":"25","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2019-12-17 08:37:40","codes":[{"authorDate":"2019-12-17 08:37:40","commitOrder":4,"curCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new MockRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new KeyValueSegments(storeName, METRICS_SCOPE, RETENTION_PERIOD, SEGMENT_INTERVAL);\n    }\n","date":"2019-12-17 08:37:40","endLine":66,"groupId":"8871","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/86/9dd5ce0502f1ff7c1f57d97c3c142d2da05d0d.src","preCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new NoOpRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new KeyValueSegments(storeName, METRICS_SCOPE, RETENTION_PERIOD, SEGMENT_INTERVAL);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueSegmentsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2019-12-17 08:37:40","commitOrder":4,"curCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new MockRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new TimestampedSegments(storeName, METRICS_SCOPE, RETENTION_PERIOD, SEGMENT_INTERVAL);\n    }\n","date":"2019-12-17 08:37:40","endLine":66,"groupId":"8871","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f4/718d8dbebe2194c5691b0e33623e8dc892bd5b.src","preCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new NoOpRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new TimestampedSegments(storeName, METRICS_SCOPE, RETENTION_PERIOD, SEGMENT_INTERVAL);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/TimestampedSegmentsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"a87decb9e4df5bfa092c26ae4346f65c426f1321","commitMessage":"@@@KAFKA-9113: Extract clients from tasks to record collectors (#7833)\n\nThis is part1 of a series of PRs for task management cleanup:\n\n1. Primarily cleanup MockRecordCollectors: remove unnecessary anonymous inheritance but just consolidate on the NoOpRecordCollector -> renamed to MockRecordCollector. Most relevant changes are unit tests that would be relying on this MockRecordCollector.\n\n2. Let StandbyContextImpl#recordCollector() to return null instead of returning a no-op collector.  since in standby tasks we should ALWAYS bypass the logging logic and only use the inner store for restoreBatch. Returning null helps us to realize this assertion failed as NPE as early as possible whereas a no-op collector just hides the bug.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2019-12-17 08:37:40","modifiedFileCount":"25","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2020-02-12 09:31:13","codes":[{"authorDate":"2020-02-12 09:31:13","commitOrder":5,"curCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new MockRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new KeyValueSegments(storeName, METRICS_SCOPE, RETENTION_PERIOD, SEGMENT_INTERVAL);\n        segments.openExisting(context, -1L);\n    }\n","date":"2020-02-12 09:31:13","endLine":67,"groupId":"8871","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/ff/67b78478c9d5cdc590027df1c6d902456685d3.src","preCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new MockRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new KeyValueSegments(storeName, METRICS_SCOPE, RETENTION_PERIOD, SEGMENT_INTERVAL);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueSegmentsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2020-02-12 09:31:13","commitOrder":5,"curCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new MockRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new TimestampedSegments(storeName, METRICS_SCOPE, RETENTION_PERIOD, SEGMENT_INTERVAL);\n        segments.openExisting(context, -1L);\n    }\n","date":"2020-02-12 09:31:13","endLine":67,"groupId":"8871","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2a/e671769909bb3a5a0ca61503c4558616132691.src","preCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new MockRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new TimestampedSegments(storeName, METRICS_SCOPE, RETENTION_PERIOD, SEGMENT_INTERVAL);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/TimestampedSegmentsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"cde6d18983b5d58199f8857d8d61d7efcbe6e54a","commitMessage":"@@@KAFKA-9355: Fix bug that removed RocksDB metrics after failure in EOS (#7996)\n\n* Added init() method to RocksDBMetricsRecorder\n* Added call to init() of RocksDBMetricsRecorder to init() of RocksDB store\n* Added call to init() of RocksDBMetricsRecorder to openExisting() of segmented state stores\n* Adapted unit tests\n* Added integration test that reproduces the situation in which the bug occurred\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2020-02-12 09:31:13","modifiedFileCount":"10","status":"M","submitter":"Bruno Cadonna"},{"authorTime":"2021-05-29 03:59:35","codes":[{"authorDate":"2021-05-29 03:59:35","commitOrder":6,"curCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext<>(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new MockRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new KeyValueSegments(storeName, METRICS_SCOPE, RETENTION_PERIOD, SEGMENT_INTERVAL);\n        segments.openExisting(context, -1L);\n    }\n","date":"2021-05-29 03:59:35","endLine":67,"groupId":"101192","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"createContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c8/f1a0e061883e8598d6972d1da249482edcad3b.src","preCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new MockRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new KeyValueSegments(storeName, METRICS_SCOPE, RETENTION_PERIOD, SEGMENT_INTERVAL);\n        segments.openExisting(context, -1L);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/KeyValueSegmentsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2021-05-29 03:59:35","commitOrder":6,"curCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext<>(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new MockRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new TimestampedSegments(storeName, METRICS_SCOPE, RETENTION_PERIOD, SEGMENT_INTERVAL);\n        segments.openExisting(context, -1L);\n    }\n","date":"2021-05-29 03:59:35","endLine":67,"groupId":"101192","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"createContext","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/72/2cb69fd13f3cd0be4d3fc58a96fb034de8e6f5.src","preCode":"    public void createContext() {\n        stateDirectory = TestUtils.tempDirectory();\n        context = new InternalMockProcessorContext(\n            stateDirectory,\n            Serdes.String(),\n            Serdes.Long(),\n            new MockRecordCollector(),\n            new ThreadCache(new LogContext(\"testCache \"), 0, new MockStreamsMetrics(new Metrics()))\n        );\n        segments = new TimestampedSegments(storeName, METRICS_SCOPE, RETENTION_PERIOD, SEGMENT_INTERVAL);\n        segments.openExisting(context, -1L);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/TimestampedSegmentsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"f207bac20cf19e841d3ee8dbcba03b1c30d88836","commitMessage":"@@@KAFKA-8410: KTableProcessor migration groundwork (#10744)\n\n* Lay the groundwork for migrating KTable Processors to the new PAPI.\n* Migrate the KTableFilter processor to prove that the groundwork works.\n\nThis is an effort to help break up #10507 into multiple PRs.\n\nReviewers: Boyang Chen <boyang@apache.org>","date":"2021-05-29 03:59:35","modifiedFileCount":"69","status":"M","submitter":"John Roesler"}]
