[{"authorTime":"2015-10-22 03:13:42","codes":[{"authorDate":"2015-10-22 03:13:42","commitOrder":1,"curCode":"    public void testOneConsumerNoTopic() {\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, Collections.<String>emptyList()));\n\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","date":"2015-10-22 03:13:42","endLine":48,"groupId":"14712","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneConsumerNoTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/cce1381743c0f40cee74cc084bed8e3c9ddbae.src","preCode":"    public void testOneConsumerNoTopic() {\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, Collections.<String>emptyList()));\n\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/RangeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"B"},{"authorDate":"2015-10-22 03:13:42","commitOrder":1,"curCode":"    public void testOneConsumerNonexistentTopic() {\n        String topic = \"topic\";\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 0);\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, Arrays.asList(topic)));\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","date":"2015-10-22 03:13:42","endLine":62,"groupId":"4765","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testOneConsumerNonexistentTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/cce1381743c0f40cee74cc084bed8e3c9ddbae.src","preCode":"    public void testOneConsumerNonexistentTopic() {\n        String topic = \"topic\";\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 0);\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, Arrays.asList(topic)));\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/RangeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"}],"commitId":"86eb74d9236c586af5889fe79f4b9e066c9c2af3","commitMessage":"@@@KAFKA-2464: client-side assignment for new consumer\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Jiangjie Qin.  Onur Karaman.  Ewen Cheslack-Postava.  Guozhang Wang\n\nCloses #165 from hachikuji/KAFKA-2464\n","date":"2015-10-22 03:13:42","modifiedFileCount":"24","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2016-05-06 06:25:03","codes":[{"authorDate":"2015-10-22 03:13:42","commitOrder":2,"curCode":"    public void testOneConsumerNoTopic() {\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, Collections.<String>emptyList()));\n\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","date":"2015-10-22 03:13:42","endLine":48,"groupId":"14712","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneConsumerNoTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/13/cce1381743c0f40cee74cc084bed8e3c9ddbae.src","preCode":"    public void testOneConsumerNoTopic() {\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, Collections.<String>emptyList()));\n\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/RangeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":38,"status":"N"},{"authorDate":"2016-05-06 06:25:03","commitOrder":2,"curCode":"    public void testOneConsumerNonexistentTopic() {\n        String topic = \"topic\";\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, Arrays.asList(topic)));\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","date":"2016-05-06 06:25:03","endLine":60,"groupId":"4765","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testOneConsumerNonexistentTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/72/febb02ca6efad00d7fe5fc9d8d49638af540d1.src","preCode":"    public void testOneConsumerNonexistentTopic() {\n        String topic = \"topic\";\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic, 0);\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, Arrays.asList(topic)));\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/RangeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"8429db937e2134d9935d9dccd2ed0febc474fd66","commitMessage":"@@@KAFKA-3661; fix NPE in o.a.k.c.c.RoundRobinAssignor when topic metadata not found\n\nAbstractPartitionAssignor.assign has an ambiguous line in its documentation:\n> param partitionsPerTopic The number of partitions for each subscribed topic (may be empty for some topics)\n\nDoes empty mean the topic has an entry with value zero.  or that the entry is excluded from the map altogether? The current implementation in AbstractPartitionAssignor excludes the entry from partitionsPerTopic if the topic isn't in the metadata.\n\nRoundRobinAssignorTest.testOneConsumerNonexistentTopic interprets emptiness as providing the topic with a zero value.\nRangeAssignor interprets emptiness as excluding the entry from the map.\nRangeAssignorTest.testOneConsumerNonexistentTopic interprets emptiness as providing the topic with a zero value.\n\nThis implementation chooses to solve the NPE by deciding to exclude topics from partitionsPerTopic when the topic is not in the metadata.\n\nAuthor: Onur Karaman <okaraman@linkedin.com>\n\nReviewers: Jason Gustafson <jason@confluent.io>.  Ismael Juma <ismael@juma.me.uk>\n\nCloses #1326 from onurkaraman/KAFKA-3661\n","date":"2016-05-06 06:25:03","modifiedFileCount":"5","status":"M","submitter":"Onur Karaman"},{"authorTime":"2017-05-23 01:59:38","codes":[{"authorDate":"2017-05-23 01:59:38","commitOrder":3,"curCode":"    public void testOneConsumerNoTopic() {\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, new Subscription(Collections.<String>emptyList())));\n\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","date":"2017-05-23 01:59:38","endLine":49,"groupId":"5051","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneConsumerNoTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/81/58f54a10e4e165fa91118d9f656bd53e505873.src","preCode":"    public void testOneConsumerNoTopic() {\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, Collections.<String>emptyList()));\n\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/RangeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2017-05-23 01:59:38","commitOrder":3,"curCode":"    public void testOneConsumerNonexistentTopic() {\n        String topic = \"topic\";\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, new Subscription(topics(topic))));\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","date":"2017-05-23 01:59:38","endLine":61,"groupId":"4765","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testOneConsumerNonexistentTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/81/58f54a10e4e165fa91118d9f656bd53e505873.src","preCode":"    public void testOneConsumerNonexistentTopic() {\n        String topic = \"topic\";\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, Arrays.asList(topic)));\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/RangeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"65861a712ddf67eb071a00218730926fdeef7084","commitMessage":"@@@KAFKA-5277; Sticky Assignor should not cache previous assignment (KIP-54 follow-up)\n\n... plus some minor cleanup\n\nAuthor: Vahid Hashemian <vahidhashemian@us.ibm.com>\n\nReviewers: Jason Gustafson <jason@confluent.io>\n\nCloses #3092 from vahidhashemian/KAFKA-5277\n","date":"2017-05-23 01:59:38","modifiedFileCount":"8","status":"M","submitter":"Vahid Hashemian"},{"authorTime":"2019-06-28 12:12:39","codes":[{"authorDate":"2019-06-28 12:12:39","commitOrder":4,"curCode":"    public void testOneConsumerNoTopic() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, new Subscription(Collections.emptyList())));\n\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","date":"2019-06-28 12:12:39","endLine":48,"groupId":"5051","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneConsumerNoTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f0/8ca144bf65f23c75cdcfeb22e45deb9fc4c27e.src","preCode":"    public void testOneConsumerNoTopic() {\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, new Subscription(Collections.<String>emptyList())));\n\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/RangeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2019-06-28 12:12:39","commitOrder":4,"curCode":"    public void testOneConsumerNonexistentTopic() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, new Subscription(topics(topic))));\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","date":"2019-06-28 12:12:39","endLine":57,"groupId":"4765","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testOneConsumerNonexistentTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f0/8ca144bf65f23c75cdcfeb22e45deb9fc4c27e.src","preCode":"    public void testOneConsumerNonexistentTopic() {\n        String topic = \"topic\";\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, new Subscription(topics(topic))));\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/RangeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"fbf6a76fc40fc5fecd679ef6484a0b92a4ab3971","commitMessage":"@@@KAFKA-8356: add static membership info to round robin assignor (#6815)\n\nThe purpose here is to leverage static membership information during round robin consumer assignment.  because persistent member id could help make the assignment remain the same during rebalance.\nThe comparison logic is changed to:\n\n1. If member A and member B both have group.instance.id.  then compare their group.instance.id\n2. If member A has group.instance.id.  while member B doesn't.  then A < B\n3. If both member A and B don't have group.instance.id.  compare their member.id\n\nIn round robin assignor.  we use ephemeral member.id to sort the members in order for assignment. This semantic is not stable and could trigger unnecessary shuffle of tasks. By leveraging group.instance.id the static member assignment shall be persist when satisfying following conditions:\n\n1. number of members remain the same across generation\n2. static members' identities persist across generation\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-06-28 12:12:39","modifiedFileCount":"7","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-09-13 00:57:22","codes":[{"authorDate":"2019-09-13 00:57:22","commitOrder":5,"curCode":"    public void testOneConsumerNoTopic() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumer1, new Subscription(Collections.emptyList())));\n\n        assertEquals(Collections.singleton(consumer1), assignment.keySet());\n        assertTrue(assignment.get(consumer1).isEmpty());\n    }\n","date":"2019-09-13 00:57:22","endLine":71,"groupId":"103904","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testOneConsumerNoTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/c5073afee00b43928e02fbd30fa869287602c5.src","preCode":"    public void testOneConsumerNoTopic() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, new Subscription(Collections.emptyList())));\n\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/RangeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"},{"authorDate":"2019-09-13 00:57:22","commitOrder":5,"curCode":"    public void testOneConsumerNonexistentTopic() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumer1, new Subscription(topics(topic1))));\n        assertEquals(Collections.singleton(consumer1), assignment.keySet());\n        assertTrue(assignment.get(consumer1).isEmpty());\n    }\n","date":"2019-09-13 00:57:22","endLine":80,"groupId":"103904","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testOneConsumerNonexistentTopic","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/c5073afee00b43928e02fbd30fa869287602c5.src","preCode":"    public void testOneConsumerNonexistentTopic() {\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, new Subscription(topics(topic))));\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertTrue(assignment.get(consumerId).isEmpty());\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/consumer/RangeAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"23708b77db110bdb20bf4a01b656d1b0ccc0f864","commitMessage":"@@@KAFKA-8355: add static membership to range assignor (#7014)\n\nThe purpose of this PR is to add static membership support for range assignor. More details for the motivation in here.\n\nSimilar to round robin assignor.  if we are capable of persisting member identity across generations.  we will reach a much more stable assignment.\n\nReviewers: John Roesler <vvcephei@users.noreply.github.com>.  Guozhang Wang <wangguoz@gmail.com>.  Bruno Cadonna <bruno@confluent.io>","date":"2019-09-13 00:57:22","modifiedFileCount":"4","status":"M","submitter":"Boyang Chen"}]
