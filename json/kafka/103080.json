[{"authorTime":"2020-04-07 06:30:29","codes":[{"authorDate":"2020-02-15 05:54:39","commitOrder":2,"curCode":"    public static Sensor processLatencySensor(final String threadId,\n                                              final StreamsMetricsImpl streamsMetrics) {\n        final Sensor sensor = streamsMetrics.threadLevelSensor(threadId,\n                                                               PROCESS + LATENCY_SUFFIX,\n                                                               RecordingLevel.INFO);\n        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n        final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n        addAvgAndMaxToSensor(\n            sensor,\n            threadLevelGroup,\n            tagMap,\n            PROCESS + LATENCY_SUFFIX,\n            PROCESS_AVG_LATENCY_DESCRIPTION,\n            PROCESS_MAX_LATENCY_DESCRIPTION\n        );\n        return sensor;\n    }\n","date":"2020-02-15 05:54:39","endLine":167,"groupId":"9666","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"processLatencySensor","params":"(finalStringthreadId@finalStreamsMetricsImplstreamsMetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/be/813bed2de1bacf187825f60d03c1033a874317.src","preCode":"    public static Sensor processLatencySensor(final String threadId,\n                                              final StreamsMetricsImpl streamsMetrics) {\n        final Sensor sensor = streamsMetrics.threadLevelSensor(threadId,\n                                                               PROCESS + LATENCY_SUFFIX,\n                                                               RecordingLevel.INFO);\n        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n        final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n        addAvgAndMaxToSensor(\n            sensor,\n            threadLevelGroup,\n            tagMap,\n            PROCESS + LATENCY_SUFFIX,\n            PROCESS_AVG_LATENCY_DESCRIPTION,\n            PROCESS_MAX_LATENCY_DESCRIPTION\n        );\n        return sensor;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"NB"},{"authorDate":"2020-04-07 06:30:29","commitOrder":2,"curCode":"    public static Sensor pollRecordsSensor(final String threadId,\n                                           final StreamsMetricsImpl streamsMetrics) {\n        final Sensor sensor =\n            streamsMetrics.threadLevelSensor(threadId, POLL + RECORDS_SUFFIX, RecordingLevel.INFO);\n        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n        final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n        addAvgAndMaxToSensor(\n            sensor,\n            threadLevelGroup,\n            tagMap,\n            POLL + RECORDS_SUFFIX,\n            POLL_AVG_RECORDS_DESCRIPTION,\n            POLL_MAX_RECORDS_DESCRIPTION\n        );\n        return sensor;\n    }\n","date":"2020-04-07 06:30:29","endLine":193,"groupId":"2957","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"pollRecordsSensor","params":"(finalStringthreadId@finalStreamsMetricsImplstreamsMetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d3/2c3014c9f7043ab7945d9c6d7d1ca6a491c4a7.src","preCode":"    public static Sensor pollRecordsSensor(final String threadId,\n                                           final StreamsMetricsImpl streamsMetrics) {\n        final Sensor sensor =\n            streamsMetrics.threadLevelSensor(threadId, POLL + RECORDS_SUFFIX, RecordingLevel.INFO);\n        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n        final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n        addAvgAndMaxToSensor(\n            sensor,\n            threadLevelGroup,\n            tagMap,\n            POLL + RECORDS_SUFFIX,\n            POLL_AVG_RECORDS_DESCRIPTION,\n            POLL_MAX_RECORDS_DESCRIPTION\n        );\n        return sensor;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"}],"commitId":"82dff1db5486647b27e5297e4c839bd2a905c1d9","commitMessage":"@@@KAFKA-9753: A few more metrics to add (#8371)\n\nInstance-level:\n* number of alive stream threads\n\nThread-level:\n* avg / max number of records polled from the consumer per runOnce.  INFO\n* avg / max number of records processed by the task manager (i.e. across all tasks) per runOnce.  INFO\n\nTask-level:\n* number of current buffered records at the moment (i.e. it is just a dynamic gauge).  DEBUG.\n\nReviewers: Bruno Cadonna <bruno@confluent.io>.  John Roesler <john@confluent.io>","date":"2020-04-07 06:30:29","modifiedFileCount":"16","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":3,"curCode":"    public static Sensor processLatencySensor(final String threadId,\n                                              final StreamsMetricsImpl streamsMetrics) {\n        final Sensor sensor =\n            streamsMetrics.threadLevelSensor(threadId, PROCESS + LATENCY_SUFFIX, RecordingLevel.INFO);\n        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n        addAvgAndMaxToSensor(\n            sensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            PROCESS + LATENCY_SUFFIX,\n            PROCESS_AVG_LATENCY_DESCRIPTION,\n            PROCESS_MAX_LATENCY_DESCRIPTION\n        );\n        return sensor;\n    }\n","date":"2021-06-01 20:05:08","endLine":173,"groupId":"103080","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"processLatencySensor","params":"(finalStringthreadId@finalStreamsMetricsImplstreamsMetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/28/cb10f09f59305a8d92b999a10b94c9472d9ce5.src","preCode":"    public static Sensor processLatencySensor(final String threadId,\n                                              final StreamsMetricsImpl streamsMetrics) {\n        final Sensor sensor =\n            streamsMetrics.threadLevelSensor(threadId, PROCESS + LATENCY_SUFFIX, RecordingLevel.INFO);\n        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n        final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n        addAvgAndMaxToSensor(\n            sensor,\n            threadLevelGroup,\n            tagMap,\n            PROCESS + LATENCY_SUFFIX,\n            PROCESS_AVG_LATENCY_DESCRIPTION,\n            PROCESS_MAX_LATENCY_DESCRIPTION\n        );\n        return sensor;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":3,"curCode":"    public static Sensor pollRecordsSensor(final String threadId,\n                                           final StreamsMetricsImpl streamsMetrics) {\n        final Sensor sensor =\n            streamsMetrics.threadLevelSensor(threadId, POLL + RECORDS_SUFFIX, RecordingLevel.INFO);\n        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n        addAvgAndMaxToSensor(\n            sensor,\n            THREAD_LEVEL_GROUP,\n            tagMap,\n            POLL + RECORDS_SUFFIX,\n            POLL_AVG_RECORDS_DESCRIPTION,\n            POLL_MAX_RECORDS_DESCRIPTION\n        );\n        return sensor;\n    }\n","date":"2021-06-01 20:05:08","endLine":189,"groupId":"103080","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"pollRecordsSensor","params":"(finalStringthreadId@finalStreamsMetricsImplstreamsMetrics)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/28/cb10f09f59305a8d92b999a10b94c9472d9ce5.src","preCode":"    public static Sensor pollRecordsSensor(final String threadId,\n                                           final StreamsMetricsImpl streamsMetrics) {\n        final Sensor sensor =\n            streamsMetrics.threadLevelSensor(threadId, POLL + RECORDS_SUFFIX, RecordingLevel.INFO);\n        final Map<String, String> tagMap = streamsMetrics.threadLevelTagMap(threadId);\n        final String threadLevelGroup = threadLevelGroup(streamsMetrics);\n        addAvgAndMaxToSensor(\n            sensor,\n            threadLevelGroup,\n            tagMap,\n            POLL + RECORDS_SUFFIX,\n            POLL_AVG_RECORDS_DESCRIPTION,\n            POLL_MAX_RECORDS_DESCRIPTION\n        );\n        return sensor;\n    }\n","realPath":"streams/src/main/java/org/apache/kafka/streams/processor/internals/metrics/ThreadMetrics.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"}]
