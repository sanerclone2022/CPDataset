[{"authorTime":"2018-05-10 05:27:28","codes":[{"authorDate":"2018-05-10 05:27:28","commitOrder":6,"curCode":"    public void testTimeoutWithoutMetadata() throws Exception {\n        Cluster cluster = mockCluster(0);\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient,\n                Time.SYSTEM,\n                cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setNode(new Node(0, \"localhost\", 8121));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(Integer.valueOf(0), asList(new Integer[]{0, 1, 2})))),\n                    new CreateTopicsOptions().timeoutMs(1000)).all();\n            assertFutureError(future, TimeoutException.class);\n        }\n    }\n","date":"2018-05-10 05:27:28","endLine":230,"groupId":"4231","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeoutWithoutMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/d9a282a3d4b0d4482dc4dfc8bfe9b51600edf9.src","preCode":"    public void testTimeoutWithoutMetadata() throws Exception {\n        Cluster cluster = mockCluster(0);\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient,\n                Time.SYSTEM,\n                cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setNode(new Node(0, \"localhost\", 8121));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(Integer.valueOf(0), asList(new Integer[]{0, 1, 2})))),\n                    new CreateTopicsOptions().timeoutMs(1000)).all();\n            assertFutureError(future, TimeoutException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"MB"},{"authorDate":"2018-05-10 05:27:28","commitOrder":6,"curCode":"    public void testPropagatedMetadataFetchException() throws Exception {\n        Cluster cluster = mockCluster(0);\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        mockClient.createPendingAuthenticationError(cluster.nodeById(0),\n            TimeUnit.DAYS.toMillis(1));\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient,\n                Time.SYSTEM,\n                cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setNode(env.cluster().nodeById(0));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(Integer.valueOf(0), asList(new Integer[]{0, 1, 2})))),\n                new CreateTopicsOptions().timeoutMs(1000)).all();\n            assertFutureError(future, SaslAuthenticationException.class);\n        }\n    }\n","date":"2018-05-10 05:27:28","endLine":254,"groupId":"4231","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPropagatedMetadataFetchException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/d9a282a3d4b0d4482dc4dfc8bfe9b51600edf9.src","preCode":"    public void testPropagatedMetadataFetchException() throws Exception {\n        Cluster cluster = mockCluster(0);\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        mockClient.createPendingAuthenticationError(cluster.nodeById(0),\n            TimeUnit.DAYS.toMillis(1));\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient,\n                Time.SYSTEM,\n                cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setNode(env.cluster().nodeById(0));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(Integer.valueOf(0), asList(new Integer[]{0, 1, 2})))),\n                new CreateTopicsOptions().timeoutMs(1000)).all();\n            assertFutureError(future, SaslAuthenticationException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":236,"status":"B"}],"commitId":"abbd53da4ad98c3a95118c9770a9d247e54b0eef","commitMessage":"@@@KAFKA-6299; Fix AdminClient error handling when metadata changes (#4295)\n\nWhen AdminClient gets a NOT_CONTROLLER error.  it should refresh its metadata and retry the request.  rather than making the end-user deal with NotControllerException.\n\nMove AdminClient's metadata management outside of NetworkClient and into AdminMetadataManager. This will make it easier to do more sophisticated metadata management in the future.  such as implementing a NodeProvider which fetches the leaders for topics.\n\nRather than manipulating newCalls directly.  the AdminClient service thread now drains it directly into pendingCalls. This minimizes the amount of locking we have to do.  since pendingCalls is only accessed from the service thread.","date":"2018-05-10 05:27:28","modifiedFileCount":"7","status":"M","submitter":"Colin Patrick McCabe"},{"authorTime":"2018-05-23 01:11:48","codes":[{"authorDate":"2018-05-23 01:11:48","commitOrder":7,"curCode":"    public void testTimeoutWithoutMetadata() throws Exception {\n        Cluster cluster = mockCluster(0);\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient,\n                Time.SYSTEM,\n                cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setNode(new Node(0, \"localhost\", 8121));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(1000)).all();\n            assertFutureError(future, TimeoutException.class);\n        }\n    }\n","date":"2018-05-23 01:12:18","endLine":231,"groupId":"4231","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeoutWithoutMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/cda40a651646d880b754f4f48a5c3a01a59a6f.src","preCode":"    public void testTimeoutWithoutMetadata() throws Exception {\n        Cluster cluster = mockCluster(0);\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient,\n                Time.SYSTEM,\n                cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setNode(new Node(0, \"localhost\", 8121));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(Integer.valueOf(0), asList(new Integer[]{0, 1, 2})))),\n                    new CreateTopicsOptions().timeoutMs(1000)).all();\n            assertFutureError(future, TimeoutException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2018-05-23 01:11:48","commitOrder":7,"curCode":"    public void testPropagatedMetadataFetchException() throws Exception {\n        Cluster cluster = mockCluster(0);\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        mockClient.createPendingAuthenticationError(cluster.nodeById(0),\n            TimeUnit.DAYS.toMillis(1));\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient,\n                Time.SYSTEM,\n                cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setNode(env.cluster().nodeById(0));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                new CreateTopicsOptions().timeoutMs(1000)).all();\n            assertFutureError(future, SaslAuthenticationException.class);\n        }\n    }\n","date":"2018-05-23 01:12:18","endLine":255,"groupId":"4231","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPropagatedMetadataFetchException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/92/cda40a651646d880b754f4f48a5c3a01a59a6f.src","preCode":"    public void testPropagatedMetadataFetchException() throws Exception {\n        Cluster cluster = mockCluster(0);\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        mockClient.createPendingAuthenticationError(cluster.nodeById(0),\n            TimeUnit.DAYS.toMillis(1));\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient,\n                Time.SYSTEM,\n                cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setNode(env.cluster().nodeById(0));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(Integer.valueOf(0), asList(new Integer[]{0, 1, 2})))),\n                new CreateTopicsOptions().timeoutMs(1000)).all();\n            assertFutureError(future, SaslAuthenticationException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"}],"commitId":"c1b30a12b1a01ca0d1e39783884e8180f79ed8b1","commitMessage":"@@@MINOR: AdminClient metadata manager should reset state on failure\n\nIf the internal metadata request fails.  we must reset the state inside `AdminClientMetadataManager` or we will be stuck indefinitely in the `UPDATE_PENDING` state and have no way to fetch new metadata.\n\nAuthor: Jason Gustafson <jason@confluent.io>\n\nReviewers: Dong Lin <lindong28@gmail.com>\n\nCloses #5057 from hachikuji/fix-admin-client-metadata-update-failure\n","date":"2018-05-23 01:12:18","modifiedFileCount":"4","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2018-07-18 06:45:29","codes":[{"authorDate":"2018-07-18 06:45:29","commitOrder":8,"curCode":"    public void testTimeoutWithoutMetadata() throws Exception {\n        Cluster cluster = mockCluster(0);\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient,\n                Time.SYSTEM,\n                cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setNode(new Node(0, \"localhost\", 8121));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, TimeoutException.class);\n        }\n    }\n","date":"2018-07-18 06:45:29","endLine":219,"groupId":"4231","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeoutWithoutMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/70/79471402663e31dd8957b940b4b8d4ec5b9930.src","preCode":"    public void testTimeoutWithoutMetadata() throws Exception {\n        Cluster cluster = mockCluster(0);\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient,\n                Time.SYSTEM,\n                cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setNode(new Node(0, \"localhost\", 8121));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(1000)).all();\n            assertFutureError(future, TimeoutException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2018-07-18 06:45:29","commitOrder":8,"curCode":"    public void testPropagatedMetadataFetchException() throws Exception {\n        Cluster cluster = mockCluster(0);\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        mockClient.createPendingAuthenticationError(cluster.nodeById(0),\n            TimeUnit.DAYS.toMillis(1));\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient,\n                Time.SYSTEM,\n                cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setNode(env.cluster().nodeById(0));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, SaslAuthenticationException.class);\n        }\n    }\n","date":"2018-07-18 06:45:29","endLine":297,"groupId":"4231","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPropagatedMetadataFetchException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/70/79471402663e31dd8957b940b4b8d4ec5b9930.src","preCode":"    public void testPropagatedMetadataFetchException() throws Exception {\n        Cluster cluster = mockCluster(0);\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        mockClient.createPendingAuthenticationError(cluster.nodeById(0),\n            TimeUnit.DAYS.toMillis(1));\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient,\n                Time.SYSTEM,\n                cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setNode(env.cluster().nodeById(0));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                new CreateTopicsOptions().timeoutMs(1000)).all();\n            assertFutureError(future, SaslAuthenticationException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"8c47a3e52f3d6871a708b1d2c8b5a7e30a2a5b99","commitMessage":"@@@KAFKA-5098; KafkaProducer should reject sends to invalid topics\n\n?egal char and generates InvalidTopicException\n\nIf config parameter max.block.ms config parameter is set to a non-zero value. \nKafkaProducer.send() blocks for the max.block.ms time if topic name has illegal\nchar or is invalid.\n\nWrote a unit test that verifies the appropriate exception is returned when\nperforming a get on the returned future by KafkaProducer.send().\n\nAuthor: Ahmed Al Mehdi <aalmehdi@aalmehdi-ld1.linkedin.biz>\n\nReviewers: Ismael Juma <ismael@juma.me.uk>.  Joel Koshy <jjkoshy@gmail.com>.  Manikumar Reddy O <manikumar.reddy@gmail.com>\n\nCloses #5247 from ahmedha/KAFKA-5098\n","date":"2018-07-18 06:45:29","modifiedFileCount":"11","status":"M","submitter":"Ahmed Al Mehdi"},{"authorTime":"2018-10-31 04:20:13","codes":[{"authorDate":"2018-10-31 04:20:13","commitOrder":9,"curCode":"    public void testTimeoutWithoutMetadata() throws Exception {\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, mockBootstrapCluster(),\n                newStrMap(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, TimeoutException.class);\n        }\n    }\n","date":"2018-10-31 04:20:13","endLine":225,"groupId":"4231","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeoutWithoutMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/62d39a9633195bdb334503a671756008a437c1.src","preCode":"    public void testTimeoutWithoutMetadata() throws Exception {\n        Cluster cluster = mockCluster(0);\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient,\n                Time.SYSTEM,\n                cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setNode(new Node(0, \"localhost\", 8121));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, TimeoutException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"},{"authorDate":"2018-10-31 04:20:13","commitOrder":9,"curCode":"    public void testPropagatedMetadataFetchException() throws Exception {\n        Cluster cluster = mockCluster(0);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().createPendingAuthenticationError(cluster.nodeById(0),\n                    TimeUnit.DAYS.toMillis(1));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, SaslAuthenticationException.class);\n        }\n    }\n","date":"2018-10-31 04:20:13","endLine":293,"groupId":"4229","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPropagatedMetadataFetchException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1f/62d39a9633195bdb334503a671756008a437c1.src","preCode":"    public void testPropagatedMetadataFetchException() throws Exception {\n        Cluster cluster = mockCluster(0);\n        MockClient mockClient = new MockClient(Time.SYSTEM);\n        mockClient.createPendingAuthenticationError(cluster.nodeById(0),\n            TimeUnit.DAYS.toMillis(1));\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(mockClient,\n                Time.SYSTEM,\n                cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().setNode(env.cluster().nodeById(0));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, SaslAuthenticationException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"}],"commitId":"d71cb54672e63d2f0f4b999668336642a9a63a1d","commitMessage":"@@@KAFKA-7567; Clean up internal metadata usage for consistency and extensibility (#5813)\n\nThis patch makes two improvements to internal metadata handling logic and testing:\n\n1. It reduce dependence on the public object `Cluster` for internal metadata propagation since it is not easy to evolve. As an example.  we need to propagate leader epochs from the metadata response to `Metadata`.  but it is not straightforward to do this without exposing it in `PartitionInfo` since that is what `Cluster` uses internally. By doing this change.  we are able to remove some redundant `Cluster` building logic. \n2. We want to make the metadata handling in `MockClient` simpler and more consistent. Currently we have mix of metadata update mechanisms which are internally inconsistent with each other and do not match the implementation in `NetworkClient`.\n\nReviewers: Rajini Sivaram <rajinisivaram@googlemail.com>","date":"2018-10-31 04:20:13","modifiedFileCount":"29","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2019-02-05 02:39:43","codes":[{"authorDate":"2019-02-05 02:39:43","commitOrder":10,"curCode":"    public void testTimeoutWithoutMetadata() throws Exception {\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, mockBootstrapCluster(),\n                newStrMap(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, TimeoutException.class);\n        }\n    }\n","date":"2019-02-05 02:39:43","endLine":239,"groupId":"10751","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeoutWithoutMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/bb3a8bca4c4d7448f788aedc6a48be0f5aed78.src","preCode":"    public void testTimeoutWithoutMetadata() throws Exception {\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, mockBootstrapCluster(),\n                newStrMap(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, TimeoutException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"},{"authorDate":"2019-02-05 02:39:43","commitOrder":10,"curCode":"    public void testPropagatedMetadataFetchException() throws Exception {\n        Cluster cluster = mockCluster(0);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().createPendingAuthenticationError(cluster.nodeById(0),\n                    TimeUnit.DAYS.toMillis(1));\n            env.kafkaClient().prepareResponse(prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, SaslAuthenticationException.class);\n        }\n    }\n","date":"2019-02-05 02:39:43","endLine":307,"groupId":"18840","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testPropagatedMetadataFetchException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/bb3a8bca4c4d7448f788aedc6a48be0f5aed78.src","preCode":"    public void testPropagatedMetadataFetchException() throws Exception {\n        Cluster cluster = mockCluster(0);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().createPendingAuthenticationError(cluster.nodeById(0),\n                    TimeUnit.DAYS.toMillis(1));\n            env.kafkaClient().prepareResponse(new CreateTopicsResponse(Collections.singletonMap(\"myTopic\", new ApiError(Errors.NONE, \"\"))));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, SaslAuthenticationException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"M"}],"commitId":"e2e8bdbd8cb6ca2ac962c72147d21a9e8b9ba2c0","commitMessage":"@@@KAFKA-7832: Use automatic RPC generation in CreateTopics (#5972)\n\nReviewers: Jun Rao <junrao@gmail.com>.  Tom Bentley <tbentley@redhat.com>.  Boyang Chen <bchen11@outlook.com>","date":"2019-02-05 02:39:43","modifiedFileCount":"11","status":"M","submitter":"Colin Patrick McCabe"},{"authorTime":"2019-12-18 14:08:53","codes":[{"authorDate":"2019-02-05 02:39:43","commitOrder":11,"curCode":"    public void testTimeoutWithoutMetadata() throws Exception {\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, mockBootstrapCluster(),\n                newStrMap(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, TimeoutException.class);\n        }\n    }\n","date":"2019-02-05 02:39:43","endLine":239,"groupId":"10751","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeoutWithoutMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/de/bb3a8bca4c4d7448f788aedc6a48be0f5aed78.src","preCode":"    public void testTimeoutWithoutMetadata() throws Exception {\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, mockBootstrapCluster(),\n                newStrMap(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, TimeoutException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"N"},{"authorDate":"2019-12-18 14:08:53","commitOrder":11,"curCode":"    public void testPropagatedMetadataFetchException() throws Exception {\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM,\n                mockCluster(3, 0),\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().createPendingAuthenticationError(env.cluster().nodeById(0),\n                    TimeUnit.DAYS.toMillis(1));\n            env.kafkaClient().prepareResponse(prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, SaslAuthenticationException.class);\n        }\n    }\n","date":"2019-12-18 14:08:53","endLine":419,"groupId":"19943","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testPropagatedMetadataFetchException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/4c717102730e3e5f8e9150482fe11941af0b75.src","preCode":"    public void testPropagatedMetadataFetchException() throws Exception {\n        Cluster cluster = mockCluster(0);\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, cluster,\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                    AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().createPendingAuthenticationError(cluster.nodeById(0),\n                    TimeUnit.DAYS.toMillis(1));\n            env.kafkaClient().prepareResponse(prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, SaslAuthenticationException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":405,"status":"M"}],"commitId":"75a68341da423d8b041ac8824fbebe99f9bd15ff","commitMessage":"@@@MINOR; Refactor KafkaAdminClientTest to reduce the boilerplate code (#7842)\n\n`KafkaAdminClientTest` contains many code repetitions which could be removed. This PR removes most of the boiler plate code.\n\nReviewers: Jason Gustafson <jason@confluent.io>","date":"2019-12-18 14:08:53","modifiedFileCount":"1","status":"M","submitter":"David Jacot"},{"authorTime":"2021-01-14 08:17:45","codes":[{"authorDate":"2021-01-14 08:17:45","commitOrder":12,"curCode":"    public void testTimeoutWithoutMetadata() throws Exception {\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, mockBootstrapCluster(),\n                newStrMap(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, TimeoutException.class);\n        }\n    }\n","date":"2021-01-14 08:17:45","endLine":551,"groupId":"103818","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testTimeoutWithoutMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/cc9f1cd04326662520255628602b4fd114e430.src","preCode":"    public void testTimeoutWithoutMetadata() throws Exception {\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM, mockBootstrapCluster(),\n                newStrMap(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().prepareResponse(prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                    Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                    new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, TimeoutException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":541,"status":"M"},{"authorDate":"2021-01-14 08:17:45","commitOrder":12,"curCode":"    public void testPropagatedMetadataFetchException() throws Exception {\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM,\n                mockCluster(3, 0),\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().createPendingAuthenticationError(env.cluster().nodeById(0),\n                    TimeUnit.DAYS.toMillis(1));\n            env.kafkaClient().prepareResponse(prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, SaslAuthenticationException.class);\n        }\n    }\n","date":"2021-01-14 08:17:45","endLine":620,"groupId":"103818","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testPropagatedMetadataFetchException","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/cc9f1cd04326662520255628602b4fd114e430.src","preCode":"    public void testPropagatedMetadataFetchException() throws Exception {\n        try (final AdminClientUnitTestEnv env = new AdminClientUnitTestEnv(Time.SYSTEM,\n                mockCluster(3, 0),\n                newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:8121\",\n                AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"10\"))) {\n            env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());\n            env.kafkaClient().createPendingAuthenticationError(env.cluster().nodeById(0),\n                    TimeUnit.DAYS.toMillis(1));\n            env.kafkaClient().prepareResponse(prepareCreateTopicsResponse(\"myTopic\", Errors.NONE));\n            KafkaFuture<Void> future = env.adminClient().createTopics(\n                Collections.singleton(new NewTopic(\"myTopic\", Collections.singletonMap(0, asList(0, 1, 2)))),\n                new CreateTopicsOptions().timeoutMs(1000)).all();\n            TestUtils.assertFutureError(future, SaslAuthenticationException.class);\n        }\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/KafkaAdminClientTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"M"}],"commitId":"52b8aa0fdce1872b5b525b62dc3ac2241cfaa379","commitMessage":"@@@KAFKA-7340: Migrate clients module to JUnit 5 (#9874)\n\n* Use the packages/classes from JUnit 5\n* Move description in `assert` methods to last parameter\n* Convert parameterized tests so that they work with JUnit 5\n* Remove `hamcrest`.  it didn't seem to add much value\n* Fix `Utils.mkEntry` to have correct `equals` implementation\n* Add a missing `@Test` annotation in `SslSelectorTest` override\n* Adjust regex in `SaslAuthenticatorTest` due to small change in the\nassert failure string in JUnit 5\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>","date":"2021-01-14 08:17:45","modifiedFileCount":"254","status":"M","submitter":"Ismael Juma"}]
