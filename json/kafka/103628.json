[{"authorTime":"2018-12-03 13:32:05","codes":[{"authorDate":"2020-01-23 05:48:36","commitOrder":4,"curCode":"    public void testFencedInstanceIdInTxnOffsetCommitByGroupMetadata() {\n        final String consumerGroupId = \"consumer\";\n        final long pid = 13131L;\n        final short epoch = 1;\n        final TopicPartition tp = new TopicPartition(\"foo\", 0);\n        final String memberId = \"member\";\n        final String fencedMemberId = \"fenced_member\";\n        final String instanceId = \"instance\";\n\n        doInitTransactions(pid, epoch);\n\n        transactionManager.beginTransaction();\n\n        TransactionalRequestResult sendOffsetsResult = transactionManager.sendOffsetsToTransaction(\n            singletonMap(tp, new OffsetAndMetadata(39L)),\n            new ConsumerGroupMetadata(consumerGroupId, 5, fencedMemberId, Optional.of(instanceId)));\n\n        prepareAddOffsetsToTxnResponse(Errors.NONE, consumerGroupId, pid, epoch);\n        sender.runOnce();  \r\n        sender.runOnce();  \r\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.GROUP, consumerGroupId);\n        sender.runOnce();  \r\n\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(pid, txnOffsetCommitRequest.data.producerId());\n            assertEquals(epoch, txnOffsetCommitRequest.data.producerEpoch());\n            return txnOffsetCommitRequest.data.groupInstanceId().equals(instanceId)\n                && !txnOffsetCommitRequest.data.memberId().equals(memberId);\n        }, new TxnOffsetCommitResponse(0, singletonMap(tp, Errors.FENCED_INSTANCE_ID)));\n\n        sender.runOnce();  \r\n\n        assertTrue(transactionManager.hasError());\n        assertTrue(transactionManager.lastError() instanceof FencedInstanceIdException);\n        assertTrue(sendOffsetsResult.isCompleted());\n        assertFalse(sendOffsetsResult.isSuccessful());\n        assertTrue(sendOffsetsResult.error() instanceof FencedInstanceIdException);\n        assertAbortableError(FencedInstanceIdException.class);\n    }\n","date":"2020-01-23 05:48:36","endLine":991,"groupId":"845","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFencedInstanceIdInTxnOffsetCommitByGroupMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4e/b882b9779e89d712fbe0ef34bde7b7e712a2f9.src","preCode":"    public void testFencedInstanceIdInTxnOffsetCommitByGroupMetadata() {\n        final String consumerGroupId = \"consumer\";\n        final long pid = 13131L;\n        final short epoch = 1;\n        final TopicPartition tp = new TopicPartition(\"foo\", 0);\n        final String memberId = \"member\";\n        final String fencedMemberId = \"fenced_member\";\n        final String instanceId = \"instance\";\n\n        doInitTransactions(pid, epoch);\n\n        transactionManager.beginTransaction();\n\n        TransactionalRequestResult sendOffsetsResult = transactionManager.sendOffsetsToTransaction(\n            singletonMap(tp, new OffsetAndMetadata(39L)),\n            new ConsumerGroupMetadata(consumerGroupId, 5, fencedMemberId, Optional.of(instanceId)));\n\n        prepareAddOffsetsToTxnResponse(Errors.NONE, consumerGroupId, pid, epoch);\n        sender.runOnce();  \r\n        sender.runOnce();  \r\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.GROUP, consumerGroupId);\n        sender.runOnce();  \r\n\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(pid, txnOffsetCommitRequest.data.producerId());\n            assertEquals(epoch, txnOffsetCommitRequest.data.producerEpoch());\n            return txnOffsetCommitRequest.data.groupInstanceId().equals(instanceId)\n                && !txnOffsetCommitRequest.data.memberId().equals(memberId);\n        }, new TxnOffsetCommitResponse(0, singletonMap(tp, Errors.FENCED_INSTANCE_ID)));\n\n        sender.runOnce();  \r\n\n        assertTrue(transactionManager.hasError());\n        assertTrue(transactionManager.lastError() instanceof FencedInstanceIdException);\n        assertTrue(sendOffsetsResult.isCompleted());\n        assertFalse(sendOffsetsResult.isSuccessful());\n        assertTrue(sendOffsetsResult.error() instanceof FencedInstanceIdException);\n        assertAbortableError(FencedInstanceIdException.class);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":950,"status":"B"},{"authorDate":"2018-12-03 13:32:05","commitOrder":4,"curCode":"    private void prepareAddOffsetsToTxnResponse(final Errors error,\n                                                final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch) {\n        client.prepareResponse(body -> {\n            AddOffsetsToTxnRequest addOffsetsToTxnRequest = (AddOffsetsToTxnRequest) body;\n            assertEquals(consumerGroupId, addOffsetsToTxnRequest.consumerGroupId());\n            assertEquals(transactionalId, addOffsetsToTxnRequest.transactionalId());\n            assertEquals(producerId, addOffsetsToTxnRequest.producerId());\n            assertEquals(producerEpoch, addOffsetsToTxnRequest.producerEpoch());\n            return true;\n        }, new AddOffsetsToTxnResponse(0, error));\n    }\n","date":"2018-12-03 13:32:05","endLine":2401,"groupId":"11798","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareAddOffsetsToTxnResponse","params":"(finalErrorserror@finalStringconsumerGroupId@finallongproducerId@finalshortproducerEpoch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/f5caedcb243a11d42eccbf12847674a14e07fd.src","preCode":"    private void prepareAddOffsetsToTxnResponse(final Errors error,\n                                                final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch) {\n        client.prepareResponse(body -> {\n            AddOffsetsToTxnRequest addOffsetsToTxnRequest = (AddOffsetsToTxnRequest) body;\n            assertEquals(consumerGroupId, addOffsetsToTxnRequest.consumerGroupId());\n            assertEquals(transactionalId, addOffsetsToTxnRequest.transactionalId());\n            assertEquals(producerId, addOffsetsToTxnRequest.producerId());\n            assertEquals(producerEpoch, addOffsetsToTxnRequest.producerEpoch());\n            return true;\n        }, new AddOffsetsToTxnResponse(0, error));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2389,"status":"NB"}],"commitId":"de90175fc24357e20306c5a4de4f0f8ec8675ad2","commitMessage":"@@@KAFKA-9418; Add new sendOffsetsToTransaction API to KafkaProducer (#7952)\n\nThis patch adds a new API to the producer to implement transactional offset commit fencing through the group coordinator as proposed in KIP-447. This PR mainly changes on the Producer end for compatible paths to old `sendOffsetsToTxn(offsets.  groupId)` vs new `sendOffsetsToTxn(offsets.  groupMetadata)`.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>.  Jason Gustafson <jason@confluent.io>","date":"2020-01-23 05:48:36","modifiedFileCount":"15","status":"M","submitter":"Boyang Chen"},{"authorTime":"2018-12-03 13:32:05","codes":[{"authorDate":"2020-01-24 00:14:31","commitOrder":5,"curCode":"    public void testFencedInstanceIdInTxnOffsetCommitByGroupMetadata() {\n        final String consumerGroupId = \"consumer\";\n        final long pid = 13131L;\n        final short epoch = 1;\n        final TopicPartition tp = new TopicPartition(\"foo\", 0);\n        final String memberId = \"member\";\n        final String fencedMemberId = \"fenced_member\";\n        final String instanceId = \"instance\";\n\n        doInitTransactions(pid, epoch);\n\n        transactionManager.beginTransaction();\n\n        TransactionalRequestResult sendOffsetsResult = transactionManager.sendOffsetsToTransaction(\n            singletonMap(tp, new OffsetAndMetadata(39L)),\n            new ConsumerGroupMetadata(consumerGroupId, 5, fencedMemberId, Optional.of(instanceId)));\n\n        prepareAddOffsetsToTxnResponse(Errors.NONE, consumerGroupId, pid, epoch);\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.GROUP, consumerGroupId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.GROUP) != null);\n\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(pid, txnOffsetCommitRequest.data.producerId());\n            assertEquals(epoch, txnOffsetCommitRequest.data.producerEpoch());\n            return txnOffsetCommitRequest.data.groupInstanceId().equals(instanceId)\n                && !txnOffsetCommitRequest.data.memberId().equals(memberId);\n        }, new TxnOffsetCommitResponse(0, singletonMap(tp, Errors.FENCED_INSTANCE_ID)));\n\n        runUntil(transactionManager::hasError);\n        assertTrue(transactionManager.lastError() instanceof FencedInstanceIdException);\n        assertTrue(sendOffsetsResult.isCompleted());\n        assertFalse(sendOffsetsResult.isSuccessful());\n        assertTrue(sendOffsetsResult.error() instanceof FencedInstanceIdException);\n        assertAbortableError(FencedInstanceIdException.class);\n    }\n","date":"2020-01-24 00:14:31","endLine":967,"groupId":"5632","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFencedInstanceIdInTxnOffsetCommitByGroupMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a3/4f50d3d2f8f17311f972c1c07372c89ad77d90.src","preCode":"    public void testFencedInstanceIdInTxnOffsetCommitByGroupMetadata() {\n        final String consumerGroupId = \"consumer\";\n        final long pid = 13131L;\n        final short epoch = 1;\n        final TopicPartition tp = new TopicPartition(\"foo\", 0);\n        final String memberId = \"member\";\n        final String fencedMemberId = \"fenced_member\";\n        final String instanceId = \"instance\";\n\n        doInitTransactions(pid, epoch);\n\n        transactionManager.beginTransaction();\n\n        TransactionalRequestResult sendOffsetsResult = transactionManager.sendOffsetsToTransaction(\n            singletonMap(tp, new OffsetAndMetadata(39L)),\n            new ConsumerGroupMetadata(consumerGroupId, 5, fencedMemberId, Optional.of(instanceId)));\n\n        prepareAddOffsetsToTxnResponse(Errors.NONE, consumerGroupId, pid, epoch);\n        sender.runOnce();  \r\n        sender.runOnce();  \r\n\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.GROUP, consumerGroupId);\n        sender.runOnce();  \r\n\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(pid, txnOffsetCommitRequest.data.producerId());\n            assertEquals(epoch, txnOffsetCommitRequest.data.producerEpoch());\n            return txnOffsetCommitRequest.data.groupInstanceId().equals(instanceId)\n                && !txnOffsetCommitRequest.data.memberId().equals(memberId);\n        }, new TxnOffsetCommitResponse(0, singletonMap(tp, Errors.FENCED_INSTANCE_ID)));\n\n        sender.runOnce();  \r\n\n        assertTrue(transactionManager.hasError());\n        assertTrue(transactionManager.lastError() instanceof FencedInstanceIdException);\n        assertTrue(sendOffsetsResult.isCompleted());\n        assertFalse(sendOffsetsResult.isSuccessful());\n        assertTrue(sendOffsetsResult.error() instanceof FencedInstanceIdException);\n        assertAbortableError(FencedInstanceIdException.class);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":931,"status":"M"},{"authorDate":"2018-12-03 13:32:05","commitOrder":5,"curCode":"    private void prepareAddOffsetsToTxnResponse(final Errors error,\n                                                final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch) {\n        client.prepareResponse(body -> {\n            AddOffsetsToTxnRequest addOffsetsToTxnRequest = (AddOffsetsToTxnRequest) body;\n            assertEquals(consumerGroupId, addOffsetsToTxnRequest.consumerGroupId());\n            assertEquals(transactionalId, addOffsetsToTxnRequest.transactionalId());\n            assertEquals(producerId, addOffsetsToTxnRequest.producerId());\n            assertEquals(producerEpoch, addOffsetsToTxnRequest.producerEpoch());\n            return true;\n        }, new AddOffsetsToTxnResponse(0, error));\n    }\n","date":"2018-12-03 13:32:05","endLine":2401,"groupId":"11798","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareAddOffsetsToTxnResponse","params":"(finalErrorserror@finalStringconsumerGroupId@finallongproducerId@finalshortproducerEpoch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/f5caedcb243a11d42eccbf12847674a14e07fd.src","preCode":"    private void prepareAddOffsetsToTxnResponse(final Errors error,\n                                                final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch) {\n        client.prepareResponse(body -> {\n            AddOffsetsToTxnRequest addOffsetsToTxnRequest = (AddOffsetsToTxnRequest) body;\n            assertEquals(consumerGroupId, addOffsetsToTxnRequest.consumerGroupId());\n            assertEquals(transactionalId, addOffsetsToTxnRequest.transactionalId());\n            assertEquals(producerId, addOffsetsToTxnRequest.producerId());\n            assertEquals(producerEpoch, addOffsetsToTxnRequest.producerEpoch());\n            return true;\n        }, new AddOffsetsToTxnResponse(0, error));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2389,"status":"N"}],"commitId":"df13fc93d0aebfe0ecc40dd4af3c5fb19b35f710","commitMessage":"@@@KAFKA-7737; Use single path in producer for initializing the producerId (#7920)\n\nPreviously the idempotent producer and transactional producer use separate logic when initializing the producerId. This patch consolidates the two paths. We also do some cleanup in `TransactionManagerTest` to eliminate brittle expectations on `Sender`.\n\nReviewers: Bob Barrett <bob.barrett@confluent.io>.  Viktor Somogyi <viktorsomogyi@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-01-24 00:14:31","modifiedFileCount":"6","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2018-12-03 13:32:05","codes":[{"authorDate":"2020-04-03 12:48:37","commitOrder":6,"curCode":"    public void testFencedInstanceIdInTxnOffsetCommitByGroupMetadata() {\n        final TopicPartition tp = new TopicPartition(\"foo\", 0);\n        final String fencedMemberId = \"fenced_member\";\n\n        doInitTransactions();\n\n        transactionManager.beginTransaction();\n\n        TransactionalRequestResult sendOffsetsResult = transactionManager.sendOffsetsToTransaction(\n            singletonMap(tp, new OffsetAndMetadata(39L)),\n            new ConsumerGroupMetadata(consumerGroupId, 5, fencedMemberId, Optional.of(groupInstanceId)));\n\n        prepareAddOffsetsToTxnResponse(Errors.NONE, consumerGroupId, producerId, epoch);\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.GROUP, consumerGroupId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.GROUP) != null);\n\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(producerId, txnOffsetCommitRequest.data.producerId());\n            assertEquals(epoch, txnOffsetCommitRequest.data.producerEpoch());\n            return txnOffsetCommitRequest.data.groupInstanceId().equals(groupInstanceId)\n                && !txnOffsetCommitRequest.data.memberId().equals(memberId);\n        }, new TxnOffsetCommitResponse(0, singletonMap(tp, Errors.FENCED_INSTANCE_ID)));\n\n        runUntil(transactionManager::hasError);\n        assertTrue(transactionManager.lastError() instanceof FencedInstanceIdException);\n        assertTrue(sendOffsetsResult.isCompleted());\n        assertFalse(sendOffsetsResult.isSuccessful());\n        assertTrue(sendOffsetsResult.error() instanceof FencedInstanceIdException);\n        assertAbortableError(FencedInstanceIdException.class);\n    }\n","date":"2020-04-03 12:48:37","endLine":901,"groupId":"5632","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFencedInstanceIdInTxnOffsetCommitByGroupMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c7/00605a5989bf08c894080ea48908bf7e6337c5.src","preCode":"    public void testFencedInstanceIdInTxnOffsetCommitByGroupMetadata() {\n        final String consumerGroupId = \"consumer\";\n        final long pid = 13131L;\n        final short epoch = 1;\n        final TopicPartition tp = new TopicPartition(\"foo\", 0);\n        final String memberId = \"member\";\n        final String fencedMemberId = \"fenced_member\";\n        final String instanceId = \"instance\";\n\n        doInitTransactions(pid, epoch);\n\n        transactionManager.beginTransaction();\n\n        TransactionalRequestResult sendOffsetsResult = transactionManager.sendOffsetsToTransaction(\n            singletonMap(tp, new OffsetAndMetadata(39L)),\n            new ConsumerGroupMetadata(consumerGroupId, 5, fencedMemberId, Optional.of(instanceId)));\n\n        prepareAddOffsetsToTxnResponse(Errors.NONE, consumerGroupId, pid, epoch);\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.GROUP, consumerGroupId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.GROUP) != null);\n\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(pid, txnOffsetCommitRequest.data.producerId());\n            assertEquals(epoch, txnOffsetCommitRequest.data.producerEpoch());\n            return txnOffsetCommitRequest.data.groupInstanceId().equals(instanceId)\n                && !txnOffsetCommitRequest.data.memberId().equals(memberId);\n        }, new TxnOffsetCommitResponse(0, singletonMap(tp, Errors.FENCED_INSTANCE_ID)));\n\n        runUntil(transactionManager::hasError);\n        assertTrue(transactionManager.lastError() instanceof FencedInstanceIdException);\n        assertTrue(sendOffsetsResult.isCompleted());\n        assertFalse(sendOffsetsResult.isSuccessful());\n        assertTrue(sendOffsetsResult.error() instanceof FencedInstanceIdException);\n        assertAbortableError(FencedInstanceIdException.class);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":870,"status":"M"},{"authorDate":"2018-12-03 13:32:05","commitOrder":6,"curCode":"    private void prepareAddOffsetsToTxnResponse(final Errors error,\n                                                final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch) {\n        client.prepareResponse(body -> {\n            AddOffsetsToTxnRequest addOffsetsToTxnRequest = (AddOffsetsToTxnRequest) body;\n            assertEquals(consumerGroupId, addOffsetsToTxnRequest.consumerGroupId());\n            assertEquals(transactionalId, addOffsetsToTxnRequest.transactionalId());\n            assertEquals(producerId, addOffsetsToTxnRequest.producerId());\n            assertEquals(producerEpoch, addOffsetsToTxnRequest.producerEpoch());\n            return true;\n        }, new AddOffsetsToTxnResponse(0, error));\n    }\n","date":"2018-12-03 13:32:05","endLine":2401,"groupId":"11798","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareAddOffsetsToTxnResponse","params":"(finalErrorserror@finalStringconsumerGroupId@finallongproducerId@finalshortproducerEpoch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b8/f5caedcb243a11d42eccbf12847674a14e07fd.src","preCode":"    private void prepareAddOffsetsToTxnResponse(final Errors error,\n                                                final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch) {\n        client.prepareResponse(body -> {\n            AddOffsetsToTxnRequest addOffsetsToTxnRequest = (AddOffsetsToTxnRequest) body;\n            assertEquals(consumerGroupId, addOffsetsToTxnRequest.consumerGroupId());\n            assertEquals(transactionalId, addOffsetsToTxnRequest.transactionalId());\n            assertEquals(producerId, addOffsetsToTxnRequest.producerId());\n            assertEquals(producerEpoch, addOffsetsToTxnRequest.producerEpoch());\n            return true;\n        }, new AddOffsetsToTxnResponse(0, error));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":2389,"status":"N"}],"commitId":"7f640f13b4d486477035c3edb28466734f053beb","commitMessage":"@@@KAFKA-9776: Downgrade TxnCommit API v3 when broker doesn't support (#8375)\n\nRevert the decision for the sendOffsetsToTransaction(groupMetadata) API to fail with old version of brokers for the sake of making the application easier to adapt between versions. This PR silently downgrade the TxnOffsetCommit API when the build version is small than 3.\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-04-03 12:48:37","modifiedFileCount":"12","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-04-11 19:54:53","codes":[{"authorDate":"2020-04-03 12:48:37","commitOrder":7,"curCode":"    public void testFencedInstanceIdInTxnOffsetCommitByGroupMetadata() {\n        final TopicPartition tp = new TopicPartition(\"foo\", 0);\n        final String fencedMemberId = \"fenced_member\";\n\n        doInitTransactions();\n\n        transactionManager.beginTransaction();\n\n        TransactionalRequestResult sendOffsetsResult = transactionManager.sendOffsetsToTransaction(\n            singletonMap(tp, new OffsetAndMetadata(39L)),\n            new ConsumerGroupMetadata(consumerGroupId, 5, fencedMemberId, Optional.of(groupInstanceId)));\n\n        prepareAddOffsetsToTxnResponse(Errors.NONE, consumerGroupId, producerId, epoch);\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.GROUP, consumerGroupId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.GROUP) != null);\n\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(producerId, txnOffsetCommitRequest.data.producerId());\n            assertEquals(epoch, txnOffsetCommitRequest.data.producerEpoch());\n            return txnOffsetCommitRequest.data.groupInstanceId().equals(groupInstanceId)\n                && !txnOffsetCommitRequest.data.memberId().equals(memberId);\n        }, new TxnOffsetCommitResponse(0, singletonMap(tp, Errors.FENCED_INSTANCE_ID)));\n\n        runUntil(transactionManager::hasError);\n        assertTrue(transactionManager.lastError() instanceof FencedInstanceIdException);\n        assertTrue(sendOffsetsResult.isCompleted());\n        assertFalse(sendOffsetsResult.isSuccessful());\n        assertTrue(sendOffsetsResult.error() instanceof FencedInstanceIdException);\n        assertAbortableError(FencedInstanceIdException.class);\n    }\n","date":"2020-04-03 12:48:37","endLine":901,"groupId":"5632","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFencedInstanceIdInTxnOffsetCommitByGroupMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c7/00605a5989bf08c894080ea48908bf7e6337c5.src","preCode":"    public void testFencedInstanceIdInTxnOffsetCommitByGroupMetadata() {\n        final TopicPartition tp = new TopicPartition(\"foo\", 0);\n        final String fencedMemberId = \"fenced_member\";\n\n        doInitTransactions();\n\n        transactionManager.beginTransaction();\n\n        TransactionalRequestResult sendOffsetsResult = transactionManager.sendOffsetsToTransaction(\n            singletonMap(tp, new OffsetAndMetadata(39L)),\n            new ConsumerGroupMetadata(consumerGroupId, 5, fencedMemberId, Optional.of(groupInstanceId)));\n\n        prepareAddOffsetsToTxnResponse(Errors.NONE, consumerGroupId, producerId, epoch);\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.GROUP, consumerGroupId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.GROUP) != null);\n\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(producerId, txnOffsetCommitRequest.data.producerId());\n            assertEquals(epoch, txnOffsetCommitRequest.data.producerEpoch());\n            return txnOffsetCommitRequest.data.groupInstanceId().equals(groupInstanceId)\n                && !txnOffsetCommitRequest.data.memberId().equals(memberId);\n        }, new TxnOffsetCommitResponse(0, singletonMap(tp, Errors.FENCED_INSTANCE_ID)));\n\n        runUntil(transactionManager::hasError);\n        assertTrue(transactionManager.lastError() instanceof FencedInstanceIdException);\n        assertTrue(sendOffsetsResult.isCompleted());\n        assertFalse(sendOffsetsResult.isSuccessful());\n        assertTrue(sendOffsetsResult.error() instanceof FencedInstanceIdException);\n        assertAbortableError(FencedInstanceIdException.class);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":870,"status":"N"},{"authorDate":"2020-04-11 19:54:53","commitOrder":7,"curCode":"    private void prepareAddOffsetsToTxnResponse(final Errors error,\n                                                final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch) {\n        client.prepareResponse(body -> {\n            AddOffsetsToTxnRequest addOffsetsToTxnRequest = (AddOffsetsToTxnRequest) body;\n            assertEquals(consumerGroupId, addOffsetsToTxnRequest.data.groupId());\n            assertEquals(transactionalId, addOffsetsToTxnRequest.data.transactionalId());\n            assertEquals(producerId, addOffsetsToTxnRequest.data.producerId());\n            assertEquals(producerEpoch, addOffsetsToTxnRequest.data.producerEpoch());\n            return true;\n        }, new AddOffsetsToTxnResponse(\n            new AddOffsetsToTxnResponseData()\n                .setErrorCode(error.code()))\n        );\n    }\n","date":"2020-04-11 19:54:53","endLine":3271,"groupId":"22614","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareAddOffsetsToTxnResponse","params":"(finalErrorserror@finalStringconsumerGroupId@finallongproducerId@finalshortproducerEpoch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/56/50110f1668799780cfd181ac413e702fdc11fa.src","preCode":"    private void prepareAddOffsetsToTxnResponse(final Errors error,\n                                                final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch) {\n        client.prepareResponse(body -> {\n            AddOffsetsToTxnRequest addOffsetsToTxnRequest = (AddOffsetsToTxnRequest) body;\n            assertEquals(consumerGroupId, addOffsetsToTxnRequest.consumerGroupId());\n            assertEquals(transactionalId, addOffsetsToTxnRequest.transactionalId());\n            assertEquals(producerId, addOffsetsToTxnRequest.producerId());\n            assertEquals(producerEpoch, addOffsetsToTxnRequest.producerEpoch());\n            return true;\n        }, new AddOffsetsToTxnResponse(0, error));\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3256,"status":"M"}],"commitId":"430e00ea95da959d6d8308dd49c4ed1cdffa7914","commitMessage":"@@@KAFKA-8436: use automated protocol for AddOffsetsToTxn  (#7015)\n\n\nReviewers: Mickael Maison <mickael.maison@gmail.com>","date":"2020-04-11 19:54:53","modifiedFileCount":"8","status":"M","submitter":"Boyang Chen"},{"authorTime":"2020-12-15 21:33:36","codes":[{"authorDate":"2020-12-15 21:33:36","commitOrder":8,"curCode":"    public void testFencedInstanceIdInTxnOffsetCommitByGroupMetadata() {\n        final TopicPartition tp = new TopicPartition(\"foo\", 0);\n        final String fencedMemberId = \"fenced_member\";\n\n        doInitTransactions();\n\n        transactionManager.beginTransaction();\n\n        TransactionalRequestResult sendOffsetsResult = transactionManager.sendOffsetsToTransaction(\n            singletonMap(tp, new OffsetAndMetadata(39L)),\n            new ConsumerGroupMetadata(consumerGroupId, 5, fencedMemberId, Optional.of(groupInstanceId)));\n\n        prepareAddOffsetsToTxnResponse(Errors.NONE, consumerGroupId, producerId, epoch);\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.GROUP, consumerGroupId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.GROUP) != null);\n\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data().groupId());\n            assertEquals(producerId, txnOffsetCommitRequest.data().producerId());\n            assertEquals(epoch, txnOffsetCommitRequest.data().producerEpoch());\n            return txnOffsetCommitRequest.data().groupInstanceId().equals(groupInstanceId)\n                && !txnOffsetCommitRequest.data().memberId().equals(memberId);\n        }, new TxnOffsetCommitResponse(0, singletonMap(tp, Errors.FENCED_INSTANCE_ID)));\n\n        runUntil(transactionManager::hasError);\n        assertTrue(transactionManager.lastError() instanceof FencedInstanceIdException);\n        assertTrue(sendOffsetsResult.isCompleted());\n        assertFalse(sendOffsetsResult.isSuccessful());\n        assertTrue(sendOffsetsResult.error() instanceof FencedInstanceIdException);\n        assertAbortableError(FencedInstanceIdException.class);\n    }\n","date":"2020-12-15 21:33:36","endLine":906,"groupId":"103628","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFencedInstanceIdInTxnOffsetCommitByGroupMetadata","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/977ea9f66d10a83c4bd8800a036e7e6968a0cd.src","preCode":"    public void testFencedInstanceIdInTxnOffsetCommitByGroupMetadata() {\n        final TopicPartition tp = new TopicPartition(\"foo\", 0);\n        final String fencedMemberId = \"fenced_member\";\n\n        doInitTransactions();\n\n        transactionManager.beginTransaction();\n\n        TransactionalRequestResult sendOffsetsResult = transactionManager.sendOffsetsToTransaction(\n            singletonMap(tp, new OffsetAndMetadata(39L)),\n            new ConsumerGroupMetadata(consumerGroupId, 5, fencedMemberId, Optional.of(groupInstanceId)));\n\n        prepareAddOffsetsToTxnResponse(Errors.NONE, consumerGroupId, producerId, epoch);\n        prepareFindCoordinatorResponse(Errors.NONE, false, CoordinatorType.GROUP, consumerGroupId);\n        runUntil(() -> transactionManager.coordinator(CoordinatorType.GROUP) != null);\n\n        client.prepareResponse(request -> {\n            TxnOffsetCommitRequest txnOffsetCommitRequest = (TxnOffsetCommitRequest) request;\n            assertEquals(consumerGroupId, txnOffsetCommitRequest.data.groupId());\n            assertEquals(producerId, txnOffsetCommitRequest.data.producerId());\n            assertEquals(epoch, txnOffsetCommitRequest.data.producerEpoch());\n            return txnOffsetCommitRequest.data.groupInstanceId().equals(groupInstanceId)\n                && !txnOffsetCommitRequest.data.memberId().equals(memberId);\n        }, new TxnOffsetCommitResponse(0, singletonMap(tp, Errors.FENCED_INSTANCE_ID)));\n\n        runUntil(transactionManager::hasError);\n        assertTrue(transactionManager.lastError() instanceof FencedInstanceIdException);\n        assertTrue(sendOffsetsResult.isCompleted());\n        assertFalse(sendOffsetsResult.isSuccessful());\n        assertTrue(sendOffsetsResult.error() instanceof FencedInstanceIdException);\n        assertAbortableError(FencedInstanceIdException.class);\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":875,"status":"M"},{"authorDate":"2020-12-15 21:33:36","commitOrder":8,"curCode":"    private void prepareAddOffsetsToTxnResponse(final Errors error,\n                                                final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch) {\n        client.prepareResponse(body -> {\n            AddOffsetsToTxnRequest addOffsetsToTxnRequest = (AddOffsetsToTxnRequest) body;\n            assertEquals(consumerGroupId, addOffsetsToTxnRequest.data().groupId());\n            assertEquals(transactionalId, addOffsetsToTxnRequest.data().transactionalId());\n            assertEquals(producerId, addOffsetsToTxnRequest.data().producerId());\n            assertEquals(producerEpoch, addOffsetsToTxnRequest.data().producerEpoch());\n            return true;\n        }, new AddOffsetsToTxnResponse(\n            new AddOffsetsToTxnResponseData()\n                .setErrorCode(error.code()))\n        );\n    }\n","date":"2020-12-15 21:33:36","endLine":3456,"groupId":"103628","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"prepareAddOffsetsToTxnResponse","params":"(finalErrorserror@finalStringconsumerGroupId@finallongproducerId@finalshortproducerEpoch)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/977ea9f66d10a83c4bd8800a036e7e6968a0cd.src","preCode":"    private void prepareAddOffsetsToTxnResponse(final Errors error,\n                                                final String consumerGroupId,\n                                                final long producerId,\n                                                final short producerEpoch) {\n        client.prepareResponse(body -> {\n            AddOffsetsToTxnRequest addOffsetsToTxnRequest = (AddOffsetsToTxnRequest) body;\n            assertEquals(consumerGroupId, addOffsetsToTxnRequest.data.groupId());\n            assertEquals(transactionalId, addOffsetsToTxnRequest.data.transactionalId());\n            assertEquals(producerId, addOffsetsToTxnRequest.data.producerId());\n            assertEquals(producerEpoch, addOffsetsToTxnRequest.data.producerEpoch());\n            return true;\n        }, new AddOffsetsToTxnResponse(\n            new AddOffsetsToTxnResponseData()\n                .setErrorCode(error.code()))\n        );\n    }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/producer/internals/TransactionManagerTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":3441,"status":"M"}],"commitId":"1a10c3445e157da1d2fd670c043f19c385465eb0","commitMessage":"@@@KAFKA-10525: Emit JSONs with new auto-generated schema (KIP-673) (#9526)\n\nThis patch updates the request logger to output request and response payloads in JSON. Payloads are converted to JSON based on their auto-generated schema.\n\nReviewers:  Lucas Bradstreet <lucas@confluent.io>.  David Mao <dmao@confluent.io>.  David Jacot <djacot@confluent.io>\n","date":"2020-12-15 21:33:36","modifiedFileCount":"124","status":"M","submitter":"Anastasia Vela"}]
