[{"authorTime":"2017-05-13 06:27:03","codes":[{"authorDate":"2017-05-13 06:27:03","commitOrder":1,"curCode":"    public void shouldPeekNextStoreKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(10L, \"a\".getBytes()));\n        cache.put(namespace, WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, fromBytes, toBytes);\n        final MergedSortedCacheWindowStoreIterator<byte[]> iterator = new MergedSortedCacheWindowStoreIterator<>(cacheIterator, storeIterator, new StateSerdes<>(\"name\", Serdes.Long(), Serdes.ByteArray()));\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n    }\n","date":"2017-05-13 06:27:03","endLine":86,"groupId":"21503","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPeekNextStoreKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/4868859b7c2c025fa342dd4f0ae30df7c3986f.src","preCode":"    public void shouldPeekNextStoreKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(10L, \"a\".getBytes()));\n        cache.put(namespace, WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, fromBytes, toBytes);\n        final MergedSortedCacheWindowStoreIterator<byte[]> iterator = new MergedSortedCacheWindowStoreIterator<>(cacheIterator, storeIterator, new StateSerdes<>(\"name\", Serdes.Long(), Serdes.ByteArray()));\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MergedSortedCacheWrappedWindowStoreIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2017-05-13 06:27:03","commitOrder":1,"curCode":"    public void shouldPeekNextCacheKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(0L, \"a\".getBytes()));\n        cache.put(namespace, WindowStoreUtils.toBinaryKey(\"a\", 10L, 0, stateSerdes), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, fromBytes, toBytes);\n        final MergedSortedCacheWindowStoreIterator<byte[]> iterator = new MergedSortedCacheWindowStoreIterator<>(cacheIterator, storeIterator, new StateSerdes<>(\"name\", Serdes.Long(), Serdes.ByteArray()));\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n    }\n","date":"2017-05-13 06:27:03","endLine":100,"groupId":"21503","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPeekNextCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/4868859b7c2c025fa342dd4f0ae30df7c3986f.src","preCode":"    public void shouldPeekNextCacheKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(0L, \"a\".getBytes()));\n        cache.put(namespace, WindowStoreUtils.toBinaryKey(\"a\", 10L, 0, stateSerdes), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, fromBytes, toBytes);\n        final MergedSortedCacheWindowStoreIterator<byte[]> iterator = new MergedSortedCacheWindowStoreIterator<>(cacheIterator, storeIterator, new StateSerdes<>(\"name\", Serdes.Long(), Serdes.ByteArray()));\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MergedSortedCacheWrappedWindowStoreIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"}],"commitId":"da0b5b8596fa20836b8c80c473b3f37af96c9b96","commitMessage":"@@@KAFKA-5216: Fix peekNextKey in cached window/session store iterators\n\nguozhangwang mjsax dguy\n\nAuthor: Xavier L?aut? <xavier@confluent.io>\n\nReviewers: Damian Guy.  Matthias J. Sax.  Guozhang Wang\n\nCloses #3016 from xvrl/kafka-5216\n","date":"2017-05-13 06:27:03","modifiedFileCount":"2","status":"B","submitter":"Xavier L?aut?"},{"authorTime":"2017-05-19 08:02:51","codes":[{"authorDate":"2017-05-19 08:02:51","commitOrder":2,"curCode":"    public void shouldPeekNextStoreKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(10L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(\n            namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes)\n        );\n        final MergedSortedCacheWindowStoreIterator<byte[]> iterator = new MergedSortedCacheWindowStoreIterator<>(\n            cacheIterator, storeIterator, new StateSerdes<>(\"name\", Serdes.Long(), Serdes.ByteArray())\n        );\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n    }\n","date":"2017-05-19 08:02:51","endLine":101,"groupId":"10755","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPeekNextStoreKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fe/d39b76274630ae8f182da40bf9c5ce6912edb1.src","preCode":"    public void shouldPeekNextStoreKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(10L, \"a\".getBytes()));\n        cache.put(namespace, WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, fromBytes, toBytes);\n        final MergedSortedCacheWindowStoreIterator<byte[]> iterator = new MergedSortedCacheWindowStoreIterator<>(cacheIterator, storeIterator, new StateSerdes<>(\"name\", Serdes.Long(), Serdes.ByteArray()));\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MergedSortedCacheWrappedWindowStoreIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2017-05-19 08:02:51","commitOrder":2,"curCode":"    public void shouldPeekNextCacheKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(0L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 10L, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes));\n        final MergedSortedCacheWindowStoreIterator<byte[]> iterator = new MergedSortedCacheWindowStoreIterator<>(cacheIterator, storeIterator, new StateSerdes<>(\"name\", Serdes.Long(), Serdes.ByteArray()));\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n    }\n","date":"2017-05-19 08:02:51","endLine":115,"groupId":"10755","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPeekNextCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fe/d39b76274630ae8f182da40bf9c5ce6912edb1.src","preCode":"    public void shouldPeekNextCacheKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(0L, \"a\".getBytes()));\n        cache.put(namespace, WindowStoreUtils.toBinaryKey(\"a\", 10L, 0, stateSerdes), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, fromBytes, toBytes);\n        final MergedSortedCacheWindowStoreIterator<byte[]> iterator = new MergedSortedCacheWindowStoreIterator<>(cacheIterator, storeIterator, new StateSerdes<>(\"name\", Serdes.Long(), Serdes.ByteArray()));\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MergedSortedCacheWrappedWindowStoreIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":104,"status":"M"}],"commitId":"e28752357705568219315375c666f8e500db9c12","commitMessage":"@@@KAFKA-5192: add WindowStore range scan (KIP-155)\n\nImplements range scan for keys in windowed and session stores\n\nModifies caching session and windowed stores to use segmented cache keys.\nCache keys are internally prefixed with their segment id to ensure key ordering in the cache matches the ordering in the underlying store for keys spread across multiple segments.\nThis should also result in fewer cache keys getting scanned for queries spanning only some segments.\n\nAuthor: Xavier L?aut? <xavier@confluent.io>\n\nReviewers: Damian Guy.  Guozhang Wang\n\nCloses #3027 from xvrl/windowstore-range-scan\n","date":"2017-05-19 08:02:51","modifiedFileCount":"40","status":"M","submitter":"Xavier L?aut?"},{"authorTime":"2017-07-20 01:51:28","codes":[{"authorDate":"2017-07-20 01:51:28","commitOrder":3,"curCode":"    public void shouldPeekNextStoreKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(10L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(\n            namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes)\n        );\n        final MergedSortedCacheWindowStoreIterator<byte[]> iterator = new MergedSortedCacheWindowStoreIterator<>(\n            cacheIterator, storeIterator, new StateSerdes<>(\"name\", Serdes.Long(), Serdes.ByteArray())\n        );\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","date":"2017-07-20 01:51:28","endLine":103,"groupId":"10755","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPeekNextStoreKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/88fbe8df1ed7f497cc643856b2b686c4352c1f.src","preCode":"    public void shouldPeekNextStoreKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(10L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(\n            namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes)\n        );\n        final MergedSortedCacheWindowStoreIterator<byte[]> iterator = new MergedSortedCacheWindowStoreIterator<>(\n            cacheIterator, storeIterator, new StateSerdes<>(\"name\", Serdes.Long(), Serdes.ByteArray())\n        );\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MergedSortedCacheWrappedWindowStoreIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2017-07-20 01:51:28","commitOrder":3,"curCode":"    public void shouldPeekNextCacheKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(0L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 10L, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes));\n        final MergedSortedCacheWindowStoreIterator<byte[]> iterator = new MergedSortedCacheWindowStoreIterator<>(cacheIterator, storeIterator, new StateSerdes<>(\"name\", Serdes.Long(), Serdes.ByteArray()));\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","date":"2017-07-20 01:51:28","endLine":118,"groupId":"10755","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPeekNextCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/20/88fbe8df1ed7f497cc643856b2b686c4352c1f.src","preCode":"    public void shouldPeekNextCacheKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(0L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 10L, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes));\n        final MergedSortedCacheWindowStoreIterator<byte[]> iterator = new MergedSortedCacheWindowStoreIterator<>(cacheIterator, storeIterator, new StateSerdes<>(\"name\", Serdes.Long(), Serdes.ByteArray()));\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MergedSortedCacheWrappedWindowStoreIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"f87d58b796977fdaefb089d17cb30b2071cd4485","commitMessage":"@@@MINOR: Code Cleanup\n\nClean up includes:\n\n- Switching try-catch-finally blocks to try-with-resources when possible\n- Removing some seemingly unnecessary `SuppressWarnings` annotations\n- Resolving some Java warnings\n- Closing unclosed Closable objects\n- Removing unused code\n\nAuthor: Vahid Hashemian <vahidhashemian@us.ibm.com>\n\nReviewers: Balint Molnar <balintmolnar91@gmail.com>.  Guozhang Wang <wangguoz@gmail.com>.  Matthias J. Sax <matthias@confluent.io>.  Ismael Juma <ismael@juma.me.uk>.  Jason Gustafson <jason@confluent.io>\n\nCloses #3222 from vahidhashemian/minor/code_cleanup_1706\n","date":"2017-07-20 01:51:28","modifiedFileCount":"62","status":"M","submitter":"Vahid Hashemian"},{"authorTime":"2017-08-22 18:21:32","codes":[{"authorDate":"2017-08-22 18:21:32","commitOrder":4,"curCode":"    public void shouldPeekNextStoreKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(10L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(\n            namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes)\n        );\n        final MergedSortedCacheWindowStoreIterator iterator = new MergedSortedCacheWindowStoreIterator(\n            cacheIterator, storeIterator\n        );\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","date":"2017-08-22 18:21:32","endLine":103,"groupId":"10755","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPeekNextStoreKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4c/fe89d0729097ca430eabe4bdec4987accfd811.src","preCode":"    public void shouldPeekNextStoreKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(10L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(\n            namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes)\n        );\n        final MergedSortedCacheWindowStoreIterator<byte[]> iterator = new MergedSortedCacheWindowStoreIterator<>(\n            cacheIterator, storeIterator, new StateSerdes<>(\"name\", Serdes.Long(), Serdes.ByteArray())\n        );\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MergedSortedCacheWrappedWindowStoreIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2017-08-22 18:21:32","commitOrder":4,"curCode":"    public void shouldPeekNextCacheKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(0L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 10L, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes));\n        final MergedSortedCacheWindowStoreIterator iterator = new MergedSortedCacheWindowStoreIterator(cacheIterator, storeIterator);\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","date":"2017-08-22 18:21:32","endLine":118,"groupId":"10755","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPeekNextCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/4c/fe89d0729097ca430eabe4bdec4987accfd811.src","preCode":"    public void shouldPeekNextCacheKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(0L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 10L, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes));\n        final MergedSortedCacheWindowStoreIterator<byte[]> iterator = new MergedSortedCacheWindowStoreIterator<>(cacheIterator, storeIterator, new StateSerdes<>(\"name\", Serdes.Long(), Serdes.ByteArray()));\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MergedSortedCacheWrappedWindowStoreIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"ee8e9349b22277ec69bf831dda66cfc6e767df14","commitMessage":"@@@KAFKA-5689; Add MeteredWindowStore and refactor store hierarchy\n\nAdd MeteredWindowStore and ChangeLoggingWindowBytesStore.\nRefactor Store hierarchy such that Metered is always the outermost store\nDo serialization in MeteredWindowStore\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3692 from dguy/kafka-5689\n","date":"2017-08-22 18:21:32","modifiedFileCount":"9","status":"M","submitter":"Damian Guy"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2017-09-11 16:42:10","commitOrder":5,"curCode":"    public void shouldPeekNextStoreKey() {\n        windowStoreKvPairs.add(KeyValue.pair(10L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(\n            namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes)\n        );\n        final MergedSortedCacheWindowStoreIterator iterator = new MergedSortedCacheWindowStoreIterator(\n            cacheIterator, storeIterator\n        );\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","date":"2017-09-11 16:42:10","endLine":103,"groupId":"10755","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPeekNextStoreKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/61d8f31d6c6b5eb8468ca321d3d8302e27b706.src","preCode":"    public void shouldPeekNextStoreKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(10L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(\n            namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes)\n        );\n        final MergedSortedCacheWindowStoreIterator iterator = new MergedSortedCacheWindowStoreIterator(\n            cacheIterator, storeIterator\n        );\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MergedSortedCacheWrappedWindowStoreIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":5,"curCode":"    public void shouldPeekNextCacheKey() {\n        windowStoreKvPairs.add(KeyValue.pair(0L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 10L, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes));\n        final MergedSortedCacheWindowStoreIterator iterator = new MergedSortedCacheWindowStoreIterator(cacheIterator, storeIterator);\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","date":"2017-09-11 16:42:10","endLine":118,"groupId":"10755","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPeekNextCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/61d8f31d6c6b5eb8468ca321d3d8302e27b706.src","preCode":"    public void shouldPeekNextCacheKey() throws Exception {\n        windowStoreKvPairs.add(KeyValue.pair(0L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 10L, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes));\n        final MergedSortedCacheWindowStoreIterator iterator = new MergedSortedCacheWindowStoreIterator(cacheIterator, storeIterator);\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MergedSortedCacheWrappedWindowStoreIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"c5464edbb7a6821e0a91a3712b1fe2fd92a22d68","commitMessage":"@@@KAFKA-5531; throw concrete exceptions in streams tests\n\n1. Now instead of just generic `Exception` methods declare more concrete\nexceptions throwing or don't declare any throwing at all.  if not needed.\n2. `SimpleBenchmark.run()` throws `RuntimeException`\n3. `SimpleBenchmark.produce()` throws `IllegalArgumentException`\n4. Expect `ProcessorStateException` in\n`StandbyTaskTest.testUpdateNonPersistentStore()`\n\n/cc enothereska\n\nAuthor: Evgeny Veretennikov <evg.veretennikov@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>\n\nCloses #3485 from evis/5531-throw-concrete-exceptions\n","date":"2017-09-11 16:42:10","modifiedFileCount":"106","status":"M","submitter":"Evgeny Veretennikov"},{"authorTime":"2018-03-10 03:08:08","codes":[{"authorDate":"2018-03-10 03:08:08","commitOrder":6,"curCode":"    public void shouldPeekNextStoreKey() {\n        windowStoreKvPairs.add(KeyValue.pair(10L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowKeySchema.toStoreKeyBinary(\"a\", 0, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        final Bytes fromBytes = WindowKeySchema.toStoreKeyBinary(\"a\", 0, 0, stateSerdes);\n        final Bytes toBytes = WindowKeySchema.toStoreKeyBinary(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(\n            namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes)\n        );\n        final MergedSortedCacheWindowStoreIterator iterator = new MergedSortedCacheWindowStoreIterator(\n            cacheIterator, storeIterator\n        );\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","date":"2018-03-10 03:08:08","endLine":104,"groupId":"10929","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPeekNextStoreKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/351365c12e158d7cd693a2f93ce7caa4fb16f8.src","preCode":"    public void shouldPeekNextStoreKey() {\n        windowStoreKvPairs.add(KeyValue.pair(10L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(\n            namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes)\n        );\n        final MergedSortedCacheWindowStoreIterator iterator = new MergedSortedCacheWindowStoreIterator(\n            cacheIterator, storeIterator\n        );\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MergedSortedCacheWrappedWindowStoreIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"M"},{"authorDate":"2018-03-10 03:08:08","commitOrder":6,"curCode":"    public void shouldPeekNextCacheKey() {\n        windowStoreKvPairs.add(KeyValue.pair(0L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowKeySchema.toStoreKeyBinary(\"a\", 10L, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        final Bytes fromBytes = WindowKeySchema.toStoreKeyBinary(\"a\", 0, 0, stateSerdes);\n        final Bytes toBytes = WindowKeySchema.toStoreKeyBinary(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes));\n        final MergedSortedCacheWindowStoreIterator iterator = new MergedSortedCacheWindowStoreIterator(cacheIterator, storeIterator);\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","date":"2018-03-10 03:08:08","endLine":119,"groupId":"10929","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPeekNextCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/91/351365c12e158d7cd693a2f93ce7caa4fb16f8.src","preCode":"    public void shouldPeekNextCacheKey() {\n        windowStoreKvPairs.add(KeyValue.pair(0L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowStoreUtils.toBinaryKey(\"a\", 10L, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        Bytes fromBytes = WindowStoreUtils.toBinaryKey(\"a\", 0, 0, stateSerdes);\n        Bytes toBytes = WindowStoreUtils.toBinaryKey(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes));\n        final MergedSortedCacheWindowStoreIterator iterator = new MergedSortedCacheWindowStoreIterator(cacheIterator, storeIterator);\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MergedSortedCacheWrappedWindowStoreIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":107,"status":"M"}],"commitId":"b1aa1912f08765d9914e3d036deee6b71ea009dd","commitMessage":"@@@KAFKA-4831: Extract WindowedSerde to public APIs (#3307)\n\nNow that we have augmented WindowSerde with non-arg parameters.  extract it out as part of the public APIs so that users who want to I/O windowed streams can use it. This is originally introduced by @vitaly-pushkar\n\nThis PR grows out to be a much larger one.  as I found a few tech debts and bugs while working on it. Here is a summary of the PR:\n\nPublic API changes (I will propose a KIP after a first round of reviews):\nAdd TimeWindowedSerializer.  TimeWindowedDeserializer.  SessionWindowedSerializer.  SessionWindowedDeserializer into o.a.k.streams.kstream. The serializers would implemented an internal WindowedSerializer interface for the serializeBaseKey function used in 3) below.\n\nAdd WindowedSerdes into o.a.k.streams.kstream. The reason to now add them into o.a.k.clients's Serdes is that it then needs dependency of streams.\n\nAdd \"default.windowed.key.serde.inner\" and \"default.windowed.value.serde.inner\" into StreamsConfig.  used when \"default.key.serde\" is specified to use time or session windowed serde. Note this requires the serde class.  not the type class.\n\nConsolidated serde format from multiple classes.  including SessionKeySerde.java for session.  and WindowStoreUtils for time window.  into SessionKeySchema and WindowKeySchema.\n\nBug fix: WindowedStreamPartitioner needs to consider both time window and session window serdes.\n\nRemoved RocksDBWindowBytesStore etc optimization since after KIP-182 all the serde know happens on metered store.  hence this optimization is not worth.\n\nBug fix: for time window.  the serdes used for store and the serdes used for piping (source and sink node) are different: the former needs to append sequence number but not for the later.\n\nOther minor cleanups: remove unnecessary throws.  etc.\n\nAuthors: Guozhang Wang <wangguoz@gmail.com>.  Vitaly Pushkar <vitaly.pushkar@gmail.com>\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.  Bill Bejeck <bill@confluent.io>.  Xi Hu","date":"2018-03-10 03:08:08","modifiedFileCount":"37","status":"M","submitter":"Vitaly Pushkar"},{"authorTime":"2020-09-03 06:17:07","codes":[{"authorDate":"2020-09-03 06:17:07","commitOrder":7,"curCode":"    public void shouldPeekNextStoreKey() {\n        windowStoreKvPairs.add(KeyValue.pair(10L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowKeySchema.toStoreKeyBinary(\"a\", 0, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        final Bytes fromBytes = WindowKeySchema.toStoreKeyBinary(\"a\", 0, 0, stateSerdes);\n        final Bytes toBytes = WindowKeySchema.toStoreKeyBinary(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(\n            namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes)\n        );\n        final MergedSortedCacheWindowStoreIterator iterator = new MergedSortedCacheWindowStoreIterator(\n            cacheIterator, storeIterator, true\n        );\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","date":"2020-09-03 06:17:07","endLine":144,"groupId":"10854","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldPeekNextStoreKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0d/69d933cf9f65dcc155ae91983d9b26d382bea6.src","preCode":"    public void shouldPeekNextStoreKey() {\n        windowStoreKvPairs.add(KeyValue.pair(10L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowKeySchema.toStoreKeyBinary(\"a\", 0, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        final Bytes fromBytes = WindowKeySchema.toStoreKeyBinary(\"a\", 0, 0, stateSerdes);\n        final Bytes toBytes = WindowKeySchema.toStoreKeyBinary(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(\n            namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes)\n        );\n        final MergedSortedCacheWindowStoreIterator iterator = new MergedSortedCacheWindowStoreIterator(\n            cacheIterator, storeIterator\n        );\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MergedSortedCacheWrappedWindowStoreIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2020-09-03 06:17:07","commitOrder":7,"curCode":"    public void shouldPeekNextCacheKey() {\n        windowStoreKvPairs.add(KeyValue.pair(0L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowKeySchema.toStoreKeyBinary(\"a\", 10L, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        final Bytes fromBytes = WindowKeySchema.toStoreKeyBinary(\"a\", 0, 0, stateSerdes);\n        final Bytes toBytes = WindowKeySchema.toStoreKeyBinary(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator =\n            new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(\n            namespace,\n            SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes),\n            SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes)\n        );\n        final MergedSortedCacheWindowStoreIterator iterator = new MergedSortedCacheWindowStoreIterator(\n            cacheIterator,\n            storeIterator,\n            true\n        );\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","date":"2020-09-03 06:17:07","endLine":189,"groupId":"10854","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldPeekNextCacheKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0d/69d933cf9f65dcc155ae91983d9b26d382bea6.src","preCode":"    public void shouldPeekNextCacheKey() {\n        windowStoreKvPairs.add(KeyValue.pair(0L, \"a\".getBytes()));\n        cache.put(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(WindowKeySchema.toStoreKeyBinary(\"a\", 10L, 0, stateSerdes)), new LRUCacheEntry(\"b\".getBytes()));\n        final Bytes fromBytes = WindowKeySchema.toStoreKeyBinary(\"a\", 0, 0, stateSerdes);\n        final Bytes toBytes = WindowKeySchema.toStoreKeyBinary(\"a\", 100, 0, stateSerdes);\n        final KeyValueIterator<Long, byte[]> storeIterator = new DelegatingPeekingKeyValueIterator<>(\"store\", new KeyValueIteratorStub<>(windowStoreKvPairs.iterator()));\n        final ThreadCache.MemoryLRUCacheBytesIterator cacheIterator = cache.range(namespace, SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(fromBytes), SINGLE_SEGMENT_CACHE_FUNCTION.cacheKey(toBytes));\n        final MergedSortedCacheWindowStoreIterator iterator = new MergedSortedCacheWindowStoreIterator(cacheIterator, storeIterator);\n        assertThat(iterator.peekNextKey(), equalTo(0L));\n        iterator.next();\n        assertThat(iterator.peekNextKey(), equalTo(10L));\n        iterator.close();\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/MergedSortedCacheWrappedWindowStoreIteratorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":168,"status":"M"}],"commitId":"4f06d9e7d083c30912c810f9deadea809fd74edf","commitMessage":"@@@KAFKA-9929: Support backward iterator on WindowStore (#9138)\n\nImplements KIP-617 on WindowStore that depends on #9137.\n\nTesting strategy: extend existing tests to validate reverse operations are supported.\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2020-09-03 06:17:07","modifiedFileCount":"47","status":"M","submitter":"Jorge Esteban Quilcate Otoya"}]
