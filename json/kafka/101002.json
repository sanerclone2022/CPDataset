[{"authorTime":"2020-10-08 21:08:24","codes":[{"authorDate":"2020-10-08 21:08:24","commitOrder":1,"curCode":"    public void shouldPutFetchRangeFromCache() {\n        cachingStore.put(new Windowed<>(keyA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\".getBytes());\n\n        assertEquals(3, cache.size());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> some = cachingStore.findSessions(keyAA, keyB, 0, 0);\n        verifyWindowedKeyValue(some.next(), new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\");\n        verifyWindowedKeyValue(some.next(), new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\");\n        assertFalse(some.hasNext());\n    }\n","date":"2020-10-08 21:08:24","endLine":243,"groupId":"3034","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPutFetchRangeFromCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/84e2ca706b69fb6c55f307ac1b6f2ba88a3321.src","preCode":"    public void shouldPutFetchRangeFromCache() {\n        cachingStore.put(new Windowed<>(keyA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\".getBytes());\n\n        assertEquals(3, cache.size());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> some = cachingStore.findSessions(keyAA, keyB, 0, 0);\n        verifyWindowedKeyValue(some.next(), new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\");\n        verifyWindowedKeyValue(some.next(), new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\");\n        assertFalse(some.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingInMemorySessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":232,"status":"B"},{"authorDate":"2020-10-08 21:08:24","commitOrder":1,"curCode":"    public void shouldPutBackwardFetchRangeFromCache() {\n        cachingStore.put(new Windowed<>(keyA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\".getBytes());\n\n        assertEquals(3, cache.size());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> some = cachingStore.backwardFindSessions(keyAA, keyB, 0, 0);\n        verifyWindowedKeyValue(some.next(), new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\");\n        verifyWindowedKeyValue(some.next(), new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\");\n        assertFalse(some.hasNext());\n    }\n","date":"2020-10-08 21:08:24","endLine":257,"groupId":"3034","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPutBackwardFetchRangeFromCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e5/84e2ca706b69fb6c55f307ac1b6f2ba88a3321.src","preCode":"    public void shouldPutBackwardFetchRangeFromCache() {\n        cachingStore.put(new Windowed<>(keyA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\".getBytes());\n\n        assertEquals(3, cache.size());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> some = cachingStore.backwardFindSessions(keyAA, keyB, 0, 0);\n        verifyWindowedKeyValue(some.next(), new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\");\n        verifyWindowedKeyValue(some.next(), new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\");\n        assertFalse(some.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingInMemorySessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"B"}],"commitId":"d0e6943bdd048aa6e0a4dbbdad3c8da460db16dc","commitMessage":"@@@KAFKA-9929: Support backward iterator on SessionStore (#9139)\n\nImplements KIP-617 for `SessionStore`\n\nReviewers: A. Sophie Blee-Goldman <sophie@confluent.io>.  John Roesler <vvcephei@apache.org>","date":"2020-10-08 21:08:24","modifiedFileCount":"14","status":"B","submitter":"Jorge Esteban Quilcate Otoya"},{"authorTime":"2021-07-27 07:25:22","codes":[{"authorDate":"2021-07-27 07:25:22","commitOrder":2,"curCode":"    public void shouldPutFetchRangeFromCache() {\n        cachingStore.put(new Windowed<>(keyA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\".getBytes());\n\n        assertEquals(3, cache.size());\n\n        try (final KeyValueIterator<Windowed<Bytes>, byte[]> some = cachingStore.findSessions(keyAA, keyB, 0, 0)) {\n            verifyWindowedKeyValue(some.next(), new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\");\n            verifyWindowedKeyValue(some.next(), new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\");\n            assertFalse(some.hasNext());\n        }\n    }\n","date":"2021-07-27 07:25:22","endLine":249,"groupId":"101002","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldPutFetchRangeFromCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/7504628762f94bca97d60b6a7746659fdd9cfd.src","preCode":"    public void shouldPutFetchRangeFromCache() {\n        cachingStore.put(new Windowed<>(keyA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\".getBytes());\n\n        assertEquals(3, cache.size());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> some = cachingStore.findSessions(keyAA, keyB, 0, 0);\n        verifyWindowedKeyValue(some.next(), new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\");\n        verifyWindowedKeyValue(some.next(), new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\");\n        assertFalse(some.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingInMemorySessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2021-07-27 07:25:22","commitOrder":2,"curCode":"    public void shouldPutBackwardFetchRangeFromCache() {\n        cachingStore.put(new Windowed<>(keyA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\".getBytes());\n\n        assertEquals(3, cache.size());\n\n        try (final KeyValueIterator<Windowed<Bytes>, byte[]> some = cachingStore.backwardFindSessions(keyAA, keyB, 0, 0)) {\n            verifyWindowedKeyValue(some.next(), new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\");\n            verifyWindowedKeyValue(some.next(), new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\");\n            assertFalse(some.hasNext());\n        }\n    }\n","date":"2021-07-27 07:25:22","endLine":264,"groupId":"101002","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldPutBackwardFetchRangeFromCache","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/97/7504628762f94bca97d60b6a7746659fdd9cfd.src","preCode":"    public void shouldPutBackwardFetchRangeFromCache() {\n        cachingStore.put(new Windowed<>(keyA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\".getBytes());\n        cachingStore.put(new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\".getBytes());\n\n        assertEquals(3, cache.size());\n\n        final KeyValueIterator<Windowed<Bytes>, byte[]> some = cachingStore.backwardFindSessions(keyAA, keyB, 0, 0);\n        verifyWindowedKeyValue(some.next(), new Windowed<>(keyB, new SessionWindow(0, 0)), \"1\");\n        verifyWindowedKeyValue(some.next(), new Windowed<>(keyAA, new SessionWindow(0, 0)), \"1\");\n        assertFalse(some.hasNext());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/CachingInMemorySessionStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"ded66d92a4e0fd5810311b727f76058386d92c25","commitMessage":"@@@KAFKA-13124: close KeyValueIterator instance in internals tests (part 1) (#11106)\n\nReviewers: Matthias J. Sax <matthias@confluent.io>","date":"2021-07-27 07:25:22","modifiedFileCount":"7","status":"M","submitter":"Luke Chen"}]
