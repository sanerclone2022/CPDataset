[{"authorTime":"2017-08-30 20:52:44","codes":[{"authorDate":"2017-08-26 16:08:46","commitOrder":2,"curCode":"    private void init() {\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(context.recordCollector()).andReturn(collector);\n        inner.init(context, store);\n        EasyMock.expectLastCall();\n        EasyMock.replay(inner, context);\n\n        store.init(context, store);\n    }\n","date":"2017-08-26 16:08:46","endLine":85,"groupId":"14755","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c8/aec6babfbffa13c1df5b9a5fd3c5b680c96cde.src","preCode":"    private void init() {\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(context.recordCollector()).andReturn(collector);\n        inner.init(context, store);\n        EasyMock.expectLastCall();\n        EasyMock.replay(inner, context);\n\n        store.init(context, store);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ChangeLoggingSessionBytesStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"NB"},{"authorDate":"2017-08-30 20:52:44","commitOrder":2,"curCode":"    private void init() {\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(context.recordCollector()).andReturn(collector);\n        inner.init(context, store);\n        EasyMock.expectLastCall();\n        EasyMock.replay(inner, context);\n\n        store.init(context, store);\n    }\n","date":"2017-08-30 20:52:44","endLine":81,"groupId":"14755","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cd/859a31e022a0f4ee88fa601780012d0000bc2f.src","preCode":"    private void init() {\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(context.recordCollector()).andReturn(collector);\n        inner.init(context, store);\n        EasyMock.expectLastCall();\n        EasyMock.replay(inner, context);\n\n        store.init(context, store);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ChangeLoggingWindowBytesStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"}],"commitId":"76c9a6dcbc1fa92d1a7c2e913ad42b5f1a72fe62","commitMessage":"@@@KAFKA-5804; retain duplicates in ChangeLoggingWindowBytesStore\n\n`ChangeLoggingWindowBytesStore` needs to have the same `retainDuplicates` functionality as `RocksDBWindowStore` else data could be lost upon failover/restoration.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3754 from dguy/hotfix-changelog-window-store\n","date":"2017-08-30 20:52:44","modifiedFileCount":"2","status":"M","submitter":"Damian Guy"},{"authorTime":"2020-10-03 07:49:12","codes":[{"authorDate":"2020-10-03 07:49:12","commitOrder":3,"curCode":"    private void init() {\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(context.recordCollector()).andReturn(collector);\n        inner.init((ProcessorContext) context, store);\n        EasyMock.expectLastCall();\n        EasyMock.replay(inner, context);\n\n        store.init((StateStoreContext) context, store);\n    }\n","date":"2020-10-03 07:49:12","endLine":65,"groupId":"14755","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/42/6a33484fb56c33a42dbb18900f20d526504a18.src","preCode":"    private void init() {\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(context.recordCollector()).andReturn(collector);\n        inner.init(context, store);\n        EasyMock.expectLastCall();\n        EasyMock.replay(inner, context);\n\n        store.init(context, store);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ChangeLoggingSessionBytesStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2020-10-03 07:49:12","commitOrder":3,"curCode":"    private void init() {\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(context.recordCollector()).andReturn(collector);\n        inner.init((ProcessorContext) context, store);\n        EasyMock.expectLastCall();\n        EasyMock.replay(inner, context);\n\n        store.init((StateStoreContext) context, store);\n    }\n","date":"2020-10-03 07:49:12","endLine":65,"groupId":"14755","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c8/77ac64f5ab184850566f9e8d63b634460321b7.src","preCode":"    private void init() {\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(context.recordCollector()).andReturn(collector);\n        inner.init(context, store);\n        EasyMock.expectLastCall();\n        EasyMock.replay(inner, context);\n\n        store.init(context, store);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ChangeLoggingWindowBytesStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"69790a1463bafc1f63e3c288a6636b3f4586c1b4","commitMessage":"@@@KAFKA-10535: Split ProcessorContext into Processor/StateStore/Record Contexts (#9361)\n\nMigrate different components of the old ProcessorContext interface\ninto separate interfaces that are more appropriate for their usages.\nSee KIP-478 for the details.\n\nReviewers: Guozhang Wang <guozhang@apache.org>.  Paul Whalen <pgwhalen@gmail.com>","date":"2020-10-03 07:49:12","modifiedFileCount":"71","status":"M","submitter":"John Roesler"},{"authorTime":"2020-10-08 12:06:53","codes":[{"authorDate":"2020-10-08 12:06:53","commitOrder":4,"curCode":"    private void init() {\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(context.recordCollector()).andReturn(collector);\n        inner.init((StateStoreContext) context, store);\n        EasyMock.expectLastCall();\n        EasyMock.replay(inner, context);\n\n        store.init((StateStoreContext) context, store);\n    }\n","date":"2020-10-08 12:06:53","endLine":65,"groupId":"101122","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c5/5c4e159c81d4b8b542f79474d9a7a7467f72c5.src","preCode":"    private void init() {\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(context.recordCollector()).andReturn(collector);\n        inner.init((ProcessorContext) context, store);\n        EasyMock.expectLastCall();\n        EasyMock.replay(inner, context);\n\n        store.init((StateStoreContext) context, store);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ChangeLoggingSessionBytesStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2020-10-08 12:06:53","commitOrder":4,"curCode":"    private void init() {\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(context.recordCollector()).andReturn(collector);\n        inner.init((StateStoreContext) context, store);\n        EasyMock.expectLastCall();\n        EasyMock.replay(inner, context);\n\n        store.init((StateStoreContext) context, store);\n    }\n","date":"2020-10-08 12:06:53","endLine":65,"groupId":"101122","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/c31e0729880c03076927a514ec346b845f8453.src","preCode":"    private void init() {\n        EasyMock.expect(context.taskId()).andReturn(taskId);\n        EasyMock.expect(context.recordCollector()).andReturn(collector);\n        inner.init((ProcessorContext) context, store);\n        EasyMock.expectLastCall();\n        EasyMock.replay(inner, context);\n\n        store.init((StateStoreContext) context, store);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/ChangeLoggingWindowBytesStoreTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"2804257fe221f37e5098bd3f633a5d76ca890634","commitMessage":"@@@KAFKA-10562: Properly invoke new StateStoreContext init (#9388)\n\n* all wrapping stores should pass StateStoreContext init through to the same\n  method on the wrapped store and not translate it to ProcessorContext init\n* base-level stores should handle StateStoreContext init so that callers passing\n  a non-InternalProcessorContext implementation will be able to initialize the store\n* extra tests are added to verify the desired behavior\n\nReviewers: Guozhang Wang <guozhang@apache.org>","date":"2020-10-08 12:06:53","modifiedFileCount":"71","status":"M","submitter":"John Roesler"}]
