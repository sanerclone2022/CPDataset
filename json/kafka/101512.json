[{"authorTime":"2017-09-21 16:10:17","codes":[{"authorDate":"2017-09-21 16:10:17","commitOrder":1,"curCode":"    public void shouldCountSessionWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        stream.count()\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.put(key, value);\n                    }\n                });\n\n        processData();\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(10, 15))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new SessionWindow(600, 600))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(600, 600))), equalTo(1L));\n    }\n","date":"2017-09-21 16:10:17","endLine":90,"groupId":"16732","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountSessionWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/04/2f0f1e492c4aaa0e6beecb0bee198a42832b3e.src","preCode":"    public void shouldCountSessionWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        stream.count()\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.put(key, value);\n                    }\n                });\n\n        processData();\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(10, 15))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new SessionWindow(600, 600))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(600, 600))), equalTo(1L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/SessionWindowedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"},{"authorDate":"2017-09-21 16:10:17","commitOrder":1,"curCode":"    public void shouldCountWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        windowedStream.count()\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.put(key, value);\n                    }\n                });\n\n        processData();\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(0, 500))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new TimeWindow(500, 1000))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(500, 1000))), equalTo(1L));\n    }\n","date":"2017-09-21 16:10:17","endLine":83,"groupId":"16732","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/bcf33f3122e7d10249890d22fcd2f751da3a47.src","preCode":"    public void shouldCountWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        windowedStream.count()\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.put(key, value);\n                    }\n                });\n\n        processData();\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(0, 500))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new TimeWindow(500, 1000))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(500, 1000))), equalTo(1L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/TimeWindowedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"B"}],"commitId":"a2da064cbf01558d0af64adc9d6fc9444cd744ec","commitMessage":"@@@KAFKA-5922: Add SessionWindowedKStream\n\nAdd `SessionWindowedKStream` and implementation. Deprecate existing `SessionWindow` `aggregate` methods on `KGroupedStream`\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3902 from dguy/kafka-5922\n","date":"2017-09-21 16:10:17","modifiedFileCount":"4","status":"B","submitter":"Damian Guy"},{"authorTime":"2018-05-22 23:48:54","codes":[{"authorDate":"2018-05-22 23:48:54","commitOrder":2,"curCode":"    public void shouldCountSessionWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        stream.count()\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.put(key, value);\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            processData(driver);\n        }\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(10, 15))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new SessionWindow(600, 600))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(600, 600))), equalTo(1L));\n    }\n","date":"2018-05-22 23:48:54","endLine":93,"groupId":"16732","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountSessionWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/82/5edb3eb3786d79726413e3ca6d62ff3344100d.src","preCode":"    public void shouldCountSessionWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        stream.count()\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.put(key, value);\n                    }\n                });\n\n        processData();\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(10, 15))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new SessionWindow(600, 600))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(600, 600))), equalTo(1L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/SessionWindowedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2018-05-22 23:48:54","commitOrder":2,"curCode":"    public void shouldCountWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        windowedStream.count()\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.put(key, value);\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            processData(driver);\n        }\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(0, 500))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new TimeWindow(500, 1000))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(500, 1000))), equalTo(1L));\n    }\n","date":"2018-05-22 23:48:54","endLine":85,"groupId":"16732","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/7b/885b23bf2863ea3ced8e95d6fe57674b8c0063.src","preCode":"    public void shouldCountWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        windowedStream.count()\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.put(key, value);\n                    }\n                });\n\n        processData();\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(0, 500))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new TimeWindow(500, 1000))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(500, 1000))), equalTo(1L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/TimeWindowedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"6281fbcb6ad3c1f7172af0ba590fa1e2605093de","commitMessage":"@@@KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [part 3] (#5052)\n\n* KAFKA-6474: Rewrite tests to use new public TopologyTestDriver [part 3]\n\n* Refactor:\n  - KStreamWindowReduceTest\n  - KTableMapKeysTest\n  - SessionWindowedKStreamImplTest\n  - TimeWindowedKStreamImplTest\n\n* Remove unnecessary @SuppressWarnings(unchecked)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-05-22 23:48:54","modifiedFileCount":"4","status":"M","submitter":"Filipe Agapito"},{"authorTime":"2019-01-09 05:32:53","codes":[{"authorDate":"2018-05-22 23:48:54","commitOrder":3,"curCode":"    public void shouldCountSessionWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        stream.count()\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.put(key, value);\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            processData(driver);\n        }\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(10, 15))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new SessionWindow(600, 600))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(600, 600))), equalTo(1L));\n    }\n","date":"2018-05-22 23:48:54","endLine":93,"groupId":"16732","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountSessionWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/82/5edb3eb3786d79726413e3ca6d62ff3344100d.src","preCode":"    public void shouldCountSessionWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        stream.count()\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.put(key, value);\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            processData(driver);\n        }\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(10, 15))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new SessionWindow(600, 600))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(600, 600))), equalTo(1L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/SessionWindowedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"},{"authorDate":"2019-01-09 05:32:53","commitOrder":3,"curCode":"    public void shouldCountWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        windowedStream\n            .count()\n            .toStream()\n            .foreach(results::put);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            processData(driver);\n        }\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(0, 500))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new TimeWindow(500, 1000))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(500, 1000))), equalTo(1L));\n    }\n","date":"2019-01-09 05:32:53","endLine":84,"groupId":"16732","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e0/707ced8be2ff68b2ab54fd028dbd48b9deb3e4.src","preCode":"    public void shouldCountWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        windowedStream.count()\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.put(key, value);\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            processData(driver);\n        }\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(0, 500))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new TimeWindow(500, 1000))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(500, 1000))), equalTo(1L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/TimeWindowedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"}],"commitId":"3991d81f6c645bdf36c58e3d56b829ff92dbff3a","commitMessage":"@@@MINOR: code cleanup (#6056)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  John Roesler <john@confluent.io>.  Guozhang Wang <guozhang@confluent.io>","date":"2019-01-09 05:32:53","modifiedFileCount":"19","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-03-20 08:27:32","codes":[{"authorDate":"2019-03-20 08:27:32","commitOrder":4,"curCode":"    public void shouldCountSessionWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        stream.count()\n                .toStream()\n                .foreach(results::put);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n        }\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(10, 15))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new SessionWindow(600, 600))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(600, 600))), equalTo(1L));\n    }\n","date":"2019-03-20 08:27:32","endLine":82,"groupId":"16732","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountSessionWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b2/c4ec88bf29bc95c823aaa352c7ae610acda0f2.src","preCode":"    public void shouldCountSessionWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        stream.count()\n                .toStream()\n                .foreach(new ForeachAction<Windowed<String>, Long>() {\n                    @Override\n                    public void apply(final Windowed<String> key, final Long value) {\n                        results.put(key, value);\n                    }\n                });\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            processData(driver);\n        }\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(10, 15))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new SessionWindow(600, 600))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(600, 600))), equalTo(1L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/SessionWindowedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2019-03-20 08:27:32","commitOrder":4,"curCode":"    public void shouldCountWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        windowedStream\n            .count()\n            .toStream()\n            .foreach(results::put);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n        }\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(0, 500))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new TimeWindow(500, 1000))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(500, 1000))), equalTo(1L));\n    }\n","date":"2019-03-20 08:27:32","endLine":83,"groupId":"16732","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/3d710093445dc6df0e10365dc1db30a99e3824.src","preCode":"    public void shouldCountWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        windowedStream\n            .count()\n            .toStream()\n            .foreach(results::put);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props, 0L)) {\n            processData(driver);\n        }\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(0, 500))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new TimeWindow(500, 1000))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(500, 1000))), equalTo(1L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/TimeWindowedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"b5ce093a24d0fe212b5d1374330fc720b4913bee","commitMessage":"@@@MINOR: capture result timestamps in Kafka Streams DSL tests (#6447)\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Guozhang Wang <guozhang@confluent.io>\n","date":"2019-03-20 08:27:32","modifiedFileCount":"29","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-03-20 08:27:32","codes":[{"authorDate":"2019-05-13 06:31:44","commitOrder":5,"curCode":"    private void shouldCountSessionWindowed() {\n        final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n        stream.count()\n            .toStream()\n            .process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n        }\n\n        final Map<Windowed<String>, ValueAndTimestamp<Long>> result =\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey;\n\n        assertThat(result.size(), equalTo(3));\n        assertThat(\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 15L))),\n            equalTo(ValueAndTimestamp.make(2L, 15L)));\n        assertThat(\n            result.get(new Windowed<>(\"2\", new SessionWindow(599L, 600L))),\n            equalTo(ValueAndTimestamp.make(2L, 600L)));\n        assertThat(\n            result.get(new Windowed<>(\"1\", new SessionWindow(600L, 600L))),\n            equalTo(ValueAndTimestamp.make(1L, 600L)));\n    }\n","date":"2019-05-13 06:31:44","endLine":105,"groupId":"5847","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountSessionWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d1/e5448fad06900d97c4f1edd44e20d6cdf79979.src","preCode":"    public void shouldCountSessionWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        stream.count()\n                .toStream()\n                .foreach(results::put);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n        }\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(10, 15))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new SessionWindow(600, 600))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new SessionWindow(600, 600))), equalTo(1L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/SessionWindowedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"},{"authorDate":"2019-03-20 08:27:32","commitOrder":5,"curCode":"    public void shouldCountWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        windowedStream\n            .count()\n            .toStream()\n            .foreach(results::put);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n        }\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(0, 500))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new TimeWindow(500, 1000))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(500, 1000))), equalTo(1L));\n    }\n","date":"2019-03-20 08:27:32","endLine":83,"groupId":"16732","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/74/3d710093445dc6df0e10365dc1db30a99e3824.src","preCode":"    public void shouldCountWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        windowedStream\n            .count()\n            .toStream()\n            .foreach(results::put);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n        }\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(0, 500))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new TimeWindow(500, 1000))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(500, 1000))), equalTo(1L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/TimeWindowedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"}],"commitId":"8a237f599afa539868a138b5a2534dbf884cb4ec","commitMessage":"@@@KAFKA-6455: Session Aggregation should use window-end-time as record timestamp (#6645)\n\nFor session-windows.  the result record should have the window-end timestamp as record timestamp.\n\nRebased to resolve merge conflicts. Removed unused classes TupleForwarder and ForwardingCacheFlushListener (replace with TimestampedTupleForwarder.  SessionTupleForwarder.  TimestampedCacheFlushListerner.  and SessionCacheFlushListener)\n\nReviewers: John Roesler <john@confluent.io>.  Bruno Cadonna <bruno@confluent.io>.  Boyang Chen <boyang@confluent.io>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-13 06:31:44","modifiedFileCount":"14","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2019-05-18 07:48:07","codes":[{"authorDate":"2019-05-13 06:31:44","commitOrder":6,"curCode":"    private void shouldCountSessionWindowed() {\n        final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n        stream.count()\n            .toStream()\n            .process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n        }\n\n        final Map<Windowed<String>, ValueAndTimestamp<Long>> result =\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey;\n\n        assertThat(result.size(), equalTo(3));\n        assertThat(\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 15L))),\n            equalTo(ValueAndTimestamp.make(2L, 15L)));\n        assertThat(\n            result.get(new Windowed<>(\"2\", new SessionWindow(599L, 600L))),\n            equalTo(ValueAndTimestamp.make(2L, 600L)));\n        assertThat(\n            result.get(new Windowed<>(\"1\", new SessionWindow(600L, 600L))),\n            equalTo(ValueAndTimestamp.make(1L, 600L)));\n    }\n","date":"2019-05-13 06:31:44","endLine":105,"groupId":"5847","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountSessionWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d1/e5448fad06900d97c4f1edd44e20d6cdf79979.src","preCode":"    private void shouldCountSessionWindowed() {\n        final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n        stream.count()\n            .toStream()\n            .process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n        }\n\n        final Map<Windowed<String>, ValueAndTimestamp<Long>> result =\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey;\n\n        assertThat(result.size(), equalTo(3));\n        assertThat(\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 15L))),\n            equalTo(ValueAndTimestamp.make(2L, 15L)));\n        assertThat(\n            result.get(new Windowed<>(\"2\", new SessionWindow(599L, 600L))),\n            equalTo(ValueAndTimestamp.make(2L, 600L)));\n        assertThat(\n            result.get(new Windowed<>(\"1\", new SessionWindow(600L, 600L))),\n            equalTo(ValueAndTimestamp.make(1L, 600L)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/SessionWindowedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"N"},{"authorDate":"2019-05-18 07:48:07","commitOrder":6,"curCode":"    public void shouldCountWindowed() {\n        final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n        windowedStream\n            .count()\n            .toStream()\n            .process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n        }\n        assertThat(\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey\n                .get(new Windowed<>(\"1\", new TimeWindow(0L, 500L))),\n            equalTo(ValueAndTimestamp.make(2L, 15L)));\n        assertThat(\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey\n                .get(new Windowed<>(\"2\", new TimeWindow(500L, 1000L))),\n            equalTo(ValueAndTimestamp.make(2L, 550L)));\n        assertThat(\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey\n                .get(new Windowed<>(\"1\", new TimeWindow(500L, 1000L))),\n            equalTo(ValueAndTimestamp.make(1L, 500L)));\n    }\n","date":"2019-05-18 07:48:07","endLine":92,"groupId":"21149","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/0c/4685a45e3a4198e3d2bfec154fc50c380a6298.src","preCode":"    public void shouldCountWindowed() {\n        final Map<Windowed<String>, Long> results = new HashMap<>();\n        windowedStream\n            .count()\n            .toStream()\n            .foreach(results::put);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n        }\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(0, 500))), equalTo(2L));\n        assertThat(results.get(new Windowed<>(\"2\", new TimeWindow(500, 1000))), equalTo(1L));\n        assertThat(results.get(new Windowed<>(\"1\", new TimeWindow(500, 1000))), equalTo(1L));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/TimeWindowedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"6a2749faa63397caa93dae7bfdc3f1d0573a2ff4","commitMessage":"@@@KAFKA-6455: Improve DSL operator timestamp semantics (#6725)\n\nBasic idea:\nKTable-KTable join: set max(left-ts. right-ts) for result\n#agg(...) (stream/table windowed/non-windowed): set max(ts1.  ts2.  ts3. ...) of all input records that contribute to the aggregation result\nfor all stateless transformation: input-ts -> output-ts\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   John Roesler <john@confluent.io>.  Andy Coates <andy@confluent.io>.   Bill Bejeck <bbejeck@gmail.com","date":"2019-05-18 07:48:07","modifiedFileCount":"61","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-08-21 03:06:16","codes":[{"authorDate":"2020-08-21 03:06:16","commitOrder":7,"curCode":"    private void shouldCountSessionWindowed() {\n        final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n        stream.count()\n            .toStream()\n            .process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n        }\n\n        final Map<Windowed<String>, ValueAndTimestamp<Long>> result =\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey();\n\n        assertThat(result.size(), equalTo(3));\n        assertThat(\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 15L))),\n            equalTo(ValueAndTimestamp.make(2L, 15L)));\n        assertThat(\n            result.get(new Windowed<>(\"2\", new SessionWindow(599L, 600L))),\n            equalTo(ValueAndTimestamp.make(2L, 600L)));\n        assertThat(\n            result.get(new Windowed<>(\"1\", new SessionWindow(600L, 600L))),\n            equalTo(ValueAndTimestamp.make(1L, 600L)));\n    }\n","date":"2020-08-21 03:06:16","endLine":104,"groupId":"101512","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldCountSessionWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e4/b7b3cfa472b49a840d712797c643d7382b4856.src","preCode":"    private void shouldCountSessionWindowed() {\n        final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n        stream.count()\n            .toStream()\n            .process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n        }\n\n        final Map<Windowed<String>, ValueAndTimestamp<Long>> result =\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey;\n\n        assertThat(result.size(), equalTo(3));\n        assertThat(\n            result.get(new Windowed<>(\"1\", new SessionWindow(10L, 15L))),\n            equalTo(ValueAndTimestamp.make(2L, 15L)));\n        assertThat(\n            result.get(new Windowed<>(\"2\", new SessionWindow(599L, 600L))),\n            equalTo(ValueAndTimestamp.make(2L, 600L)));\n        assertThat(\n            result.get(new Windowed<>(\"1\", new SessionWindow(600L, 600L))),\n            equalTo(ValueAndTimestamp.make(1L, 600L)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/SessionWindowedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2020-08-21 03:06:16","commitOrder":7,"curCode":"    public void shouldCountWindowed() {\n        final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n        windowedStream\n            .count()\n            .toStream()\n            .process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n        }\n        assertThat(\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey()\n                .get(new Windowed<>(\"1\", new TimeWindow(0L, 500L))),\n            equalTo(ValueAndTimestamp.make(2L, 15L)));\n        assertThat(\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey()\n                .get(new Windowed<>(\"2\", new TimeWindow(500L, 1000L))),\n            equalTo(ValueAndTimestamp.make(2L, 550L)));\n        assertThat(\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey()\n                .get(new Windowed<>(\"1\", new TimeWindow(500L, 1000L))),\n            equalTo(ValueAndTimestamp.make(1L, 500L)));\n    }\n","date":"2020-08-21 03:06:16","endLine":91,"groupId":"101512","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldCountWindowed","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/bb/5080a4eeac63b3d465935f5012c63b7b44c36a.src","preCode":"    public void shouldCountWindowed() {\n        final MockProcessorSupplier<Windowed<String>, Long> supplier = new MockProcessorSupplier<>();\n        windowedStream\n            .count()\n            .toStream()\n            .process(supplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            processData(driver);\n        }\n        assertThat(\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey\n                .get(new Windowed<>(\"1\", new TimeWindow(0L, 500L))),\n            equalTo(ValueAndTimestamp.make(2L, 15L)));\n        assertThat(\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey\n                .get(new Windowed<>(\"2\", new TimeWindow(500L, 1000L))),\n            equalTo(ValueAndTimestamp.make(2L, 550L)));\n        assertThat(\n            supplier.theCapturedProcessor().lastValueAndTimestampPerKey\n                .get(new Windowed<>(\"1\", new TimeWindow(500L, 1000L))),\n            equalTo(ValueAndTimestamp.make(1L, 500L)));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/TimeWindowedKStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"M"}],"commitId":"88d4bc4641064d21a481ba3b8562a4c97703d64d","commitMessage":"@@@KAFKA-10379: Implement the KIP-478 StreamBuilder#addGlobalStore() (#9148)\n\nFrom KIP-478.  implement the new StreamBuilder#addGlobalStore() overload\nthat takes a stateUpdateSupplier fully typed Processor<KIn.  VIn.  Void.  Void>.\n\nWhere necessary.  use the adapters to make the old APIs defer to the new ones. \nas well as limiting the scope of this change set.\n\nReviewers: Boyang Chen <boyang@apache.org>","date":"2020-08-21 03:06:16","modifiedFileCount":"41","status":"M","submitter":"John Roesler"}]
