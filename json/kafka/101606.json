[{"authorTime":"2020-01-15 05:50:36","codes":[{"authorDate":"2020-01-15 05:50:36","commitOrder":1,"curCode":"    public void shouldNotAllowNullValueJoinerOnLeftJoinWithStreamJoined() {\n        final NullPointerException exception = assertThrows(\n            NullPointerException.class,\n            () -> testStream.leftJoin(\n                testStream,\n                null,\n                JoinWindows.of(ofMillis(10)),\n                StreamJoined.as(\"name\")));\n        assertThat(exception.getMessage(), equalTo(\"joiner can't be null\"));\n    }\n","date":"2020-01-15 05:50:36","endLine":862,"groupId":"991","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotAllowNullValueJoinerOnLeftJoinWithStreamJoined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/61c7aa07868d93073c38eb650dd627be897f7f.src","preCode":"    public void shouldNotAllowNullValueJoinerOnLeftJoinWithStreamJoined() {\n        final NullPointerException exception = assertThrows(\n            NullPointerException.class,\n            () -> testStream.leftJoin(\n                testStream,\n                null,\n                JoinWindows.of(ofMillis(10)),\n                StreamJoined.as(\"name\")));\n        assertThat(exception.getMessage(), equalTo(\"joiner can't be null\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":853,"status":"B"},{"authorDate":"2020-01-15 05:50:36","commitOrder":1,"curCode":"    public void shouldNotAllowNullValueJoinerOnOuterJoinWithStreamJoined() {\n        final NullPointerException exception = assertThrows(\n            NullPointerException.class,\n            () -> testStream.outerJoin(\n                testStream,\n                null,\n                JoinWindows.of(ofMillis(10)),\n                StreamJoined.as(\"name\")));\n        assertThat(exception.getMessage(), equalTo(\"joiner can't be null\"));\n    }\n","date":"2020-01-15 05:50:36","endLine":986,"groupId":"991","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotAllowNullValueJoinerOnOuterJoinWithStreamJoined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/63/61c7aa07868d93073c38eb650dd627be897f7f.src","preCode":"    public void shouldNotAllowNullValueJoinerOnOuterJoinWithStreamJoined() {\n        final NullPointerException exception = assertThrows(\n            NullPointerException.class,\n            () -> testStream.outerJoin(\n                testStream,\n                null,\n                JoinWindows.of(ofMillis(10)),\n                StreamJoined.as(\"name\")));\n        assertThat(exception.getMessage(), equalTo(\"joiner can't be null\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":977,"status":"B"}],"commitId":"81fcb809249e9f7152232ec8aa66a79155327e6f","commitMessage":"@@@KAFKA-9294: Add tests for Named parameter (#7927)\n\nPart 2 -- tests for stateful KStream operators\n\nReviewers: Bill Bejeck <bill@confluent.io>","date":"2020-01-15 05:50:36","modifiedFileCount":"3","status":"B","submitter":"Matthias J. Sax"},{"authorTime":"2021-03-21 10:19:01","codes":[{"authorDate":"2021-03-21 10:19:01","commitOrder":2,"curCode":"    public void shouldNotAllowNullValueJoinerOnLeftJoinWithStreamJoined() {\n        final NullPointerException exception = assertThrows(\n            NullPointerException.class,\n            () -> testStream.leftJoin(\n                testStream,\n                (ValueJoiner<? super String, ? super String, ?>) null,\n                JoinWindows.of(ofMillis(10)),\n                StreamJoined.as(\"name\")));\n        assertThat(exception.getMessage(), equalTo(\"joiner can't be null\"));\n    }\n","date":"2021-03-21 10:19:01","endLine":953,"groupId":"101606","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldNotAllowNullValueJoinerOnLeftJoinWithStreamJoined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e1/84f6d364154043fc0be54fd73410d1f4354884.src","preCode":"    public void shouldNotAllowNullValueJoinerOnLeftJoinWithStreamJoined() {\n        final NullPointerException exception = assertThrows(\n            NullPointerException.class,\n            () -> testStream.leftJoin(\n                testStream,\n                null,\n                JoinWindows.of(ofMillis(10)),\n                StreamJoined.as(\"name\")));\n        assertThat(exception.getMessage(), equalTo(\"joiner can't be null\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":944,"status":"M"},{"authorDate":"2021-03-21 10:19:01","commitOrder":2,"curCode":"    public void shouldNotAllowNullValueJoinerOnOuterJoinWithStreamJoined() {\n        final NullPointerException exception = assertThrows(\n            NullPointerException.class,\n            () -> testStream.outerJoin(\n                testStream,\n                (ValueJoiner<? super String, ? super String, ?>) null,\n                JoinWindows.of(ofMillis(10)),\n                StreamJoined.as(\"name\")));\n        assertThat(exception.getMessage(), equalTo(\"joiner can't be null\"));\n    }\n","date":"2021-03-21 10:19:01","endLine":1098,"groupId":"101606","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldNotAllowNullValueJoinerOnOuterJoinWithStreamJoined","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e1/84f6d364154043fc0be54fd73410d1f4354884.src","preCode":"    public void shouldNotAllowNullValueJoinerOnOuterJoinWithStreamJoined() {\n        final NullPointerException exception = assertThrows(\n            NullPointerException.class,\n            () -> testStream.outerJoin(\n                testStream,\n                null,\n                JoinWindows.of(ofMillis(10)),\n                StreamJoined.as(\"name\")));\n        assertThat(exception.getMessage(), equalTo(\"joiner can't be null\"));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1089,"status":"M"}],"commitId":"a290c8e1df371a5605d1eb2ed527f6021f2766b6","commitMessage":"@@@KAFKA-3745: Add access to read-only key in value joiner (#10150)\n\nThis PR implements adding read-only access to the key for KStream.join as described in KIP-149\n\nThis PR as it stands does not affect the Streams Scala API. Updating the Streams Scala API will be done in a follow-up PR.\nAdditionally.  the original KIP did not include the KTable API.  but I don't see any reason why we wouldn't want the same functionality there as well.  this will be done in an additional follow-up PR after updating the existing KIP.\n\nReviewers: Matthias J. Sax <mjsax@apache.org>","date":"2021-03-21 10:19:01","modifiedFileCount":"11","status":"M","submitter":"Bill Bejeck"}]
