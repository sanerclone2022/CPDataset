[{"authorTime":"2016-08-03 05:14:52","codes":[{"authorDate":"2016-08-03 05:14:52","commitOrder":1,"curCode":"    public void shouldSupportPrefixedConsumerConfigs() throws Exception {\n        props.put(consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), \"earliest\");\n        props.put(consumerPrefix(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG), 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(null, \"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2016-08-03 05:14:52","endLine":121,"groupId":"12898","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSupportPrefixedConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/30/306f0e8a87ae18e14ca0ec9678ac9745809b19.src","preCode":"    public void shouldSupportPrefixedConsumerConfigs() throws Exception {\n        props.put(consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), \"earliest\");\n        props.put(consumerPrefix(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG), 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(null, \"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"B"},{"authorDate":"2016-08-03 05:14:52","commitOrder":1,"curCode":"    public void shouldSupportNonPrefixedProducerConfigs() throws Exception {\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 10);\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> configs = streamsConfig.getProducerConfigs(\"client\");\n        assertEquals(10, configs.get(ProducerConfig.BUFFER_MEMORY_CONFIG));\n        assertEquals(1, configs.get(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2016-08-03 05:14:52","endLine":172,"groupId":"540","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSupportNonPrefixedProducerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/30/306f0e8a87ae18e14ca0ec9678ac9745809b19.src","preCode":"    public void shouldSupportNonPrefixedProducerConfigs() throws Exception {\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 10);\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> configs = streamsConfig.getProducerConfigs(\"client\");\n        assertEquals(10, configs.get(ProducerConfig.BUFFER_MEMORY_CONFIG));\n        assertEquals(1, configs.get(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"B"}],"commitId":"bb629f2243c4462db2a863793c190d734f11f3c6","commitMessage":"@@@KAFKA-3929: Add prefix for underlying clients configs in StreamConfig\n\nAdd prefixes for consumer and producer configs to StreamsConfig.  but be backward compatible.\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Eno Thereska.  Guozhang Wang\n\nCloses #1649 from dguy/kafka-3929\n","date":"2016-08-03 05:14:52","modifiedFileCount":"2","status":"B","submitter":"Damian Guy"},{"authorTime":"2017-05-17 08:23:11","codes":[{"authorDate":"2016-08-03 05:14:52","commitOrder":2,"curCode":"    public void shouldSupportPrefixedConsumerConfigs() throws Exception {\n        props.put(consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), \"earliest\");\n        props.put(consumerPrefix(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG), 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(null, \"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2016-08-03 05:14:52","endLine":121,"groupId":"12898","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSupportPrefixedConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/30/306f0e8a87ae18e14ca0ec9678ac9745809b19.src","preCode":"    public void shouldSupportPrefixedConsumerConfigs() throws Exception {\n        props.put(consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), \"earliest\");\n        props.put(consumerPrefix(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG), 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(null, \"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"N"},{"authorDate":"2017-05-17 08:23:11","commitOrder":2,"curCode":"    public void shouldSupportNonPrefixedProducerConfigs() throws Exception {\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 10);\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> configs = streamsConfig.getProducerConfigs(\"clientId\");\n        assertEquals(10, configs.get(ProducerConfig.BUFFER_MEMORY_CONFIG));\n        assertEquals(1, configs.get(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2017-05-17 08:23:11","endLine":223,"groupId":"7122","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSupportNonPrefixedProducerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/2d/d4553ce041c96289adb83b9212328cbf0cdd0e.src","preCode":"    public void shouldSupportNonPrefixedProducerConfigs() throws Exception {\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 10);\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> configs = streamsConfig.getProducerConfigs(\"client\");\n        assertEquals(10, configs.get(ProducerConfig.BUFFER_MEMORY_CONFIG));\n        assertEquals(1, configs.get(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":216,"status":"M"}],"commitId":"ebc7f7caaeb47c9588d79a2f3ed496daa0bd39e5","commitMessage":"@@@KAFKA-4923: Add Exactly-Once Semantics to Streams\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Apurva Metha.  Ismael Juma.  Damian Guy.  Eno Thereska.  Guozhang Wang\n\nCloses #2945 from mjsax/kafka-4923-add-eos-to-streams\n","date":"2017-05-17 08:23:11","modifiedFileCount":"25","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2017-09-11 16:42:10","commitOrder":3,"curCode":"    public void shouldSupportPrefixedConsumerConfigs() {\n        props.put(consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), \"earliest\");\n        props.put(consumerPrefix(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG), 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(null, \"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2017-09-11 16:42:10","endLine":153,"groupId":"12898","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSupportPrefixedConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/37/74a8e3b72ae942bbd3b5b445e2b41c7244af12.src","preCode":"    public void shouldSupportPrefixedConsumerConfigs() throws Exception {\n        props.put(consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), \"earliest\");\n        props.put(consumerPrefix(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG), 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(null, \"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":3,"curCode":"    public void shouldSupportNonPrefixedProducerConfigs() {\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 10);\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> configs = streamsConfig.getProducerConfigs(\"clientId\");\n        assertEquals(10, configs.get(ProducerConfig.BUFFER_MEMORY_CONFIG));\n        assertEquals(1, configs.get(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2017-09-11 16:42:10","endLine":228,"groupId":"7122","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSupportNonPrefixedProducerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/37/74a8e3b72ae942bbd3b5b445e2b41c7244af12.src","preCode":"    public void shouldSupportNonPrefixedProducerConfigs() throws Exception {\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 10);\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> configs = streamsConfig.getProducerConfigs(\"clientId\");\n        assertEquals(10, configs.get(ProducerConfig.BUFFER_MEMORY_CONFIG));\n        assertEquals(1, configs.get(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"}],"commitId":"c5464edbb7a6821e0a91a3712b1fe2fd92a22d68","commitMessage":"@@@KAFKA-5531; throw concrete exceptions in streams tests\n\n1. Now instead of just generic `Exception` methods declare more concrete\nexceptions throwing or don't declare any throwing at all.  if not needed.\n2. `SimpleBenchmark.run()` throws `RuntimeException`\n3. `SimpleBenchmark.produce()` throws `IllegalArgumentException`\n4. Expect `ProcessorStateException` in\n`StandbyTaskTest.testUpdateNonPersistentStore()`\n\n/cc enothereska\n\nAuthor: Evgeny Veretennikov <evg.veretennikov@gmail.com>\n\nReviewers: Damian Guy <damian.guy@gmail.com>\n\nCloses #3485 from evis/5531-throw-concrete-exceptions\n","date":"2017-09-11 16:42:10","modifiedFileCount":"106","status":"M","submitter":"Evgeny Veretennikov"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2017-11-29 01:37:27","commitOrder":4,"curCode":"    public void shouldSupportPrefixedConsumerConfigs() {\n        props.put(consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), \"earliest\");\n        props.put(consumerPrefix(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG), 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2017-11-29 01:37:27","endLine":153,"groupId":"4308","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSupportPrefixedConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1a/4cfb1d48156e273c7f4c78bf9235d02aed5c8b.src","preCode":"    public void shouldSupportPrefixedConsumerConfigs() {\n        props.put(consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), \"earliest\");\n        props.put(consumerPrefix(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG), 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(null, \"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":4,"curCode":"    public void shouldSupportNonPrefixedProducerConfigs() {\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 10);\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> configs = streamsConfig.getProducerConfigs(\"clientId\");\n        assertEquals(10, configs.get(ProducerConfig.BUFFER_MEMORY_CONFIG));\n        assertEquals(1, configs.get(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2017-09-11 16:42:10","endLine":228,"groupId":"7122","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSupportNonPrefixedProducerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/37/74a8e3b72ae942bbd3b5b445e2b41c7244af12.src","preCode":"    public void shouldSupportNonPrefixedProducerConfigs() {\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 10);\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> configs = streamsConfig.getProducerConfigs(\"clientId\");\n        assertEquals(10, configs.get(ProducerConfig.BUFFER_MEMORY_CONFIG));\n        assertEquals(1, configs.get(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"}],"commitId":"5df1eee7d689e18ac2f7b74410e7a30159d3afdc","commitMessage":"@@@KAFKA-6170; KIP-220 Part 2: Break dependency of Assignor on StreamThread\n\nThis refactoring is discussed in https://github.com/apache/kafka/pull/3624#discussion_r132614639. More specifically:\n\n1. Moved the access of `StreamThread` in `StreamPartitionAssignor` to `TaskManager`.  removed any fields stored in `StreamThread` such as `processId` and `clientId` that are only to be used in `StreamPartitionAssignor`.  and pass them to `TaskManager` if necessary.\n2. Moved any in-memory states.  `metadataWithInternalTopics`.  `partitionsByHostState`.  `standbyTasks`.  `activeTasks` to `TaskManager` so that `StreamPartitionAssignor` becomes a stateless thin layer that access TaskManager directly.\n3. Remove the reference of `StreamPartitionAssignor` in `StreamThread`.  instead consolidate all related functionalities such as `cachedTasksIds ` in `TaskManager` which could be retrieved by the `StreamThread` and the `StreamPartitionAssignor` directly.\n4. Finally.  removed the two interfaces used for `StreamThread` and `StreamPartitionAssignor`.\n\n5. Some minor fixes on logPrefixes.  etc.\n\nFuture work: when replacing the StreamsKafkaClient.  we would let `StreamPartitionAssignor` to retrieve it from `TaskManager` directly.  and also its closing call do not need to be called (`KafkaStreams` will be responsible for closing it).\n\nAuthor: Guozhang Wang <wangguoz@gmail.com>\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Damian Guy <damian.guy@gmail.com>.  Matthias J. Sax <matthias@confluent.io>\n\nCloses #4224 from guozhangwang/K6170-refactor-assignor\n","date":"2017-11-29 01:37:27","modifiedFileCount":"23","status":"M","submitter":"Guozhang Wang"},{"authorTime":"2017-09-11 16:42:10","codes":[{"authorDate":"2018-05-03 04:24:15","commitOrder":5,"curCode":"    public void shouldSupportPrefixedConsumerConfigs() {\n        props.put(consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), \"earliest\");\n        props.put(consumerPrefix(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG), 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2018-05-03 04:24:15","endLine":201,"groupId":"4308","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSupportPrefixedConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/e9/91b6ff89e5496eeeac5606076dd3563fee03e7.src","preCode":"    public void shouldSupportPrefixedConsumerConfigs() {\n        props.put(consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), \"earliest\");\n        props.put(consumerPrefix(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG), 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2017-09-11 16:42:10","commitOrder":5,"curCode":"    public void shouldSupportNonPrefixedProducerConfigs() {\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 10);\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> configs = streamsConfig.getProducerConfigs(\"clientId\");\n        assertEquals(10, configs.get(ProducerConfig.BUFFER_MEMORY_CONFIG));\n        assertEquals(1, configs.get(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2017-09-11 16:42:10","endLine":228,"groupId":"7122","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSupportNonPrefixedProducerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/37/74a8e3b72ae942bbd3b5b445e2b41c7244af12.src","preCode":"    public void shouldSupportNonPrefixedProducerConfigs() {\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 10);\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> configs = streamsConfig.getProducerConfigs(\"clientId\");\n        assertEquals(10, configs.get(ProducerConfig.BUFFER_MEMORY_CONFIG));\n        assertEquals(1, configs.get(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"}],"commitId":"1b170df31c7304f6d4c938b5e0c2a09ae1e9189d","commitMessage":"@@@KAFKA-6657: Add StreamsConfig prefix for different consumers (#4805)\n\nThis pull request is for JIRA 6657.  for KIP-276.\n\nAdded unit tests for new getGlobalConsumerConfigs API and make sure existing restore consumer tests are passing.\n\nReviewers: Bill Bejeck <bill@confluent.io>.  Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-05-03 04:24:15","modifiedFileCount":"7","status":"M","submitter":"Boyang Chen"},{"authorTime":"2019-05-08 08:43:13","codes":[{"authorDate":"2019-05-08 08:43:13","commitOrder":6,"curCode":"    public void shouldSupportPrefixedConsumerConfigs() {\n        props.put(consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), \"earliest\");\n        props.put(consumerPrefix(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG), 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(groupId, clientId, threadIdx);\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2019-05-08 08:43:13","endLine":205,"groupId":"102777","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSupportPrefixedConsumerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/02c93cec776a0a5aeacc6ff5debabb169bd528.src","preCode":"    public void shouldSupportPrefixedConsumerConfigs() {\n        props.put(consumerPrefix(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG), \"earliest\");\n        props.put(consumerPrefix(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG), 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> consumerConfigs = streamsConfig.getMainConsumerConfigs(\"groupId\", \"clientId\");\n        assertEquals(\"earliest\", consumerConfigs.get(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG));\n        assertEquals(1, consumerConfigs.get(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":198,"status":"M"},{"authorDate":"2019-05-08 08:43:13","commitOrder":6,"curCode":"    public void shouldSupportNonPrefixedProducerConfigs() {\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 10);\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> configs = streamsConfig.getProducerConfigs(clientId);\n        assertEquals(10, configs.get(ProducerConfig.BUFFER_MEMORY_CONFIG));\n        assertEquals(1, configs.get(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","date":"2019-05-08 08:43:13","endLine":275,"groupId":"102777","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSupportNonPrefixedProducerConfigs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c2/02c93cec776a0a5aeacc6ff5debabb169bd528.src","preCode":"    public void shouldSupportNonPrefixedProducerConfigs() {\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 10);\n        props.put(ConsumerConfig.METRICS_NUM_SAMPLES_CONFIG, 1);\n        final StreamsConfig streamsConfig = new StreamsConfig(props);\n        final Map<String, Object> configs = streamsConfig.getProducerConfigs(\"clientId\");\n        assertEquals(10, configs.get(ProducerConfig.BUFFER_MEMORY_CONFIG));\n        assertEquals(1, configs.get(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/StreamsConfigTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"}],"commitId":"b0e82a68b34512d23a5a60a9b5da0db86eb880b2","commitMessage":"@@@KAFKA-8284: enable static membership on KStream (#6673)\n\nPart of KIP-345 effort. The strategy is to extract user passed in group.instance.id config and pass it in with given thread-id (because consumer is currently per-thread level).\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>","date":"2019-05-08 08:43:13","modifiedFileCount":"31","status":"M","submitter":"Boyang Chen"}]
