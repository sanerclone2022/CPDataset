[{"authorTime":"2020-05-22 23:41:28","codes":[{"authorDate":"2019-10-07 16:01:58","commitOrder":9,"curCode":"    public void shouldSendDataThroughTopicUsingProduced() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final String input = \"topic\";\n        final KStream<String, String> stream = builder.stream(input, stringConsumed);\n        stream.through(\"through-topic\", Produced.with(Serdes.String(), Serdes.String())).process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                    driver.createInputTopic(input, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"a\", \"b\");\n        }\n        assertThat(processorSupplier.theCapturedProcessor().processed, equalTo(Collections.singletonList(new KeyValueTimestamp<>(\"a\", \"b\", 0))));\n    }\n","date":"2019-10-07 16:01:58","endLine":298,"groupId":"6867","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSendDataThroughTopicUsingProduced","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/62/7584268087c8db0dc1562a73693780387f6820.src","preCode":"    public void shouldSendDataThroughTopicUsingProduced() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final String input = \"topic\";\n        final KStream<String, String> stream = builder.stream(input, stringConsumed);\n        stream.through(\"through-topic\", Produced.with(Serdes.String(), Serdes.String())).process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                    driver.createInputTopic(input, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"a\", \"b\");\n        }\n        assertThat(processorSupplier.theCapturedProcessor().processed, equalTo(Collections.singletonList(new KeyValueTimestamp<>(\"a\", \"b\", 0))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"NB"},{"authorDate":"2020-05-22 23:41:28","commitOrder":9,"curCode":"    public void shouldSendDataThroughRepartitionTopicUsingRepartitioned() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final String input = \"topic\";\n        final KStream<String, String> stream = builder.stream(input, stringConsumed);\n        stream.repartition(Repartitioned.with(Serdes.String(), Serdes.String())).process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(input, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"a\", \"b\");\n        }\n        assertThat(processorSupplier.theCapturedProcessor().processed, equalTo(Collections.singletonList(new KeyValueTimestamp<>(\"a\", \"b\", 0))));\n    }\n","date":"2020-05-22 23:41:28","endLine":1523,"groupId":"6867","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSendDataThroughRepartitionTopicUsingRepartitioned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/17/047a11d68d016b2ef5d3ec2f4a1cd43af43c7b.src","preCode":"    public void shouldSendDataThroughRepartitionTopicUsingRepartitioned() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final String input = \"topic\";\n        final KStream<String, String> stream = builder.stream(input, stringConsumed);\n        stream.repartition(Repartitioned.with(Serdes.String(), Serdes.String())).process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(input, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"a\", \"b\");\n        }\n        assertThat(processorSupplier.theCapturedProcessor().processed, equalTo(Collections.singletonList(new KeyValueTimestamp<>(\"a\", \"b\", 0))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1511,"status":"B"}],"commitId":"27824baa210b9744074ac1fcdabbf1c8ff1b42ca","commitMessage":"@@@KAFKA-10003: Mark KStream.through() as deprecated and update Scala API (#8679)\n\n - part of KIP-221\n\nCo-authored-by: John Roesler <john@confluent.io>","date":"2020-05-22 23:41:28","modifiedFileCount":"14","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-08-21 03:06:16","codes":[{"authorDate":"2020-08-21 03:06:16","commitOrder":10,"curCode":"    public void shouldSendDataThroughTopicUsingProduced() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final String input = \"topic\";\n        final KStream<String, String> stream = builder.stream(input, stringConsumed);\n        stream.through(\"through-topic\", Produced.with(Serdes.String(), Serdes.String())).process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(input, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"a\", \"b\");\n        }\n        assertThat(processorSupplier.theCapturedProcessor().processed(), equalTo(Collections.singletonList(new KeyValueTimestamp<>(\"a\", \"b\", 0))));\n    }\n","date":"2020-08-21 03:06:16","endLine":1508,"groupId":"101618","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSendDataThroughTopicUsingProduced","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/5f7fc463f20a7c0613e59f500c68a589e9615a.src","preCode":"    public void shouldSendDataThroughTopicUsingProduced() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final String input = \"topic\";\n        final KStream<String, String> stream = builder.stream(input, stringConsumed);\n        stream.through(\"through-topic\", Produced.with(Serdes.String(), Serdes.String())).process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(input, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"a\", \"b\");\n        }\n        assertThat(processorSupplier.theCapturedProcessor().processed, equalTo(Collections.singletonList(new KeyValueTimestamp<>(\"a\", \"b\", 0))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1496,"status":"M"},{"authorDate":"2020-08-21 03:06:16","commitOrder":10,"curCode":"    public void shouldSendDataThroughRepartitionTopicUsingRepartitioned() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final String input = \"topic\";\n        final KStream<String, String> stream = builder.stream(input, stringConsumed);\n        stream.repartition(Repartitioned.with(Serdes.String(), Serdes.String())).process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(input, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"a\", \"b\");\n        }\n        assertThat(processorSupplier.theCapturedProcessor().processed(), equalTo(Collections.singletonList(new KeyValueTimestamp<>(\"a\", \"b\", 0))));\n    }\n","date":"2020-08-21 03:06:16","endLine":1523,"groupId":"101618","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldSendDataThroughRepartitionTopicUsingRepartitioned","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/9d/5f7fc463f20a7c0613e59f500c68a589e9615a.src","preCode":"    public void shouldSendDataThroughRepartitionTopicUsingRepartitioned() {\n        final StreamsBuilder builder = new StreamsBuilder();\n        final String input = \"topic\";\n        final KStream<String, String> stream = builder.stream(input, stringConsumed);\n        stream.repartition(Repartitioned.with(Serdes.String(), Serdes.String())).process(processorSupplier);\n\n        try (final TopologyTestDriver driver = new TopologyTestDriver(builder.build(), props)) {\n            final TestInputTopic<String, String> inputTopic =\n                driver.createInputTopic(input, new StringSerializer(), new StringSerializer(), Instant.ofEpochMilli(0L), Duration.ZERO);\n            inputTopic.pipeInput(\"a\", \"b\");\n        }\n        assertThat(processorSupplier.theCapturedProcessor().processed, equalTo(Collections.singletonList(new KeyValueTimestamp<>(\"a\", \"b\", 0))));\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamImplTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1511,"status":"M"}],"commitId":"88d4bc4641064d21a481ba3b8562a4c97703d64d","commitMessage":"@@@KAFKA-10379: Implement the KIP-478 StreamBuilder#addGlobalStore() (#9148)\n\nFrom KIP-478.  implement the new StreamBuilder#addGlobalStore() overload\nthat takes a stateUpdateSupplier fully typed Processor<KIn.  VIn.  Void.  Void>.\n\nWhere necessary.  use the adapters to make the old APIs defer to the new ones. \nas well as limiting the scope of this change set.\n\nReviewers: Boyang Chen <boyang@apache.org>","date":"2020-08-21 03:06:16","modifiedFileCount":"41","status":"M","submitter":"John Roesler"}]
