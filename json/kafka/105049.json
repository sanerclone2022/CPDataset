[{"authorTime":"2020-06-11 11:39:52","codes":[{"authorDate":"2020-06-11 11:39:52","commitOrder":1,"curCode":"    public void verifyingTopicCleanupPolicyShouldFailWhenTopicHasDeletePolicy() {\n        String topicName = \"myTopic\";\n        Map<String, String> topicConfigs = Collections.singletonMap(\"cleanup.policy\", \"delete\");\n        Cluster cluster = createCluster(1);\n        try (MockAdminClient mockAdminClient = new MockAdminClient(cluster.nodes(), cluster.nodeById(0))) {\n            TopicPartitionInfo topicPartitionInfo = new TopicPartitionInfo(0, cluster.nodeById(0), cluster.nodes(), Collections.<Node>emptyList());\n            mockAdminClient.addTopic(false, topicName, Collections.singletonList(topicPartitionInfo), topicConfigs);\n            TopicAdmin admin = new TopicAdmin(null, mockAdminClient);\n            ConfigException e = assertThrows(ConfigException.class, () -> {\n                admin.verifyTopicCleanupPolicyOnlyCompact(\"myTopic\", \"worker.topic\", \"purpose\");\n            });\n            assertTrue(e.getMessage().contains(\"to guarantee consistency and durability\"));\n        }\n    }\n","date":"2020-06-11 11:39:52","endLine":421,"groupId":"20284","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyingTopicCleanupPolicyShouldFailWhenTopicHasDeletePolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/55664c4b18115db740d20c4d4c68e45d2d8c2e.src","preCode":"    public void verifyingTopicCleanupPolicyShouldFailWhenTopicHasDeletePolicy() {\n        String topicName = \"myTopic\";\n        Map<String, String> topicConfigs = Collections.singletonMap(\"cleanup.policy\", \"delete\");\n        Cluster cluster = createCluster(1);\n        try (MockAdminClient mockAdminClient = new MockAdminClient(cluster.nodes(), cluster.nodeById(0))) {\n            TopicPartitionInfo topicPartitionInfo = new TopicPartitionInfo(0, cluster.nodeById(0), cluster.nodes(), Collections.<Node>emptyList());\n            mockAdminClient.addTopic(false, topicName, Collections.singletonList(topicPartitionInfo), topicConfigs);\n            TopicAdmin admin = new TopicAdmin(null, mockAdminClient);\n            ConfigException e = assertThrows(ConfigException.class, () -> {\n                admin.verifyTopicCleanupPolicyOnlyCompact(\"myTopic\", \"worker.topic\", \"purpose\");\n            });\n            assertTrue(e.getMessage().contains(\"to guarantee consistency and durability\"));\n        }\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/util/TopicAdminTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"B"},{"authorDate":"2020-06-11 11:39:52","commitOrder":1,"curCode":"    public void verifyingGettingTopicCleanupPolicies() {\n        String topicName = \"myTopic\";\n        Map<String, String> topicConfigs = Collections.singletonMap(\"cleanup.policy\", \"compact\");\n        Cluster cluster = createCluster(1);\n        try (MockAdminClient mockAdminClient = new MockAdminClient(cluster.nodes(), cluster.nodeById(0))) {\n            TopicPartitionInfo topicPartitionInfo = new TopicPartitionInfo(0, cluster.nodeById(0), cluster.nodes(), Collections.<Node>emptyList());\n            mockAdminClient.addTopic(false, topicName, Collections.singletonList(topicPartitionInfo), topicConfigs);\n            TopicAdmin admin = new TopicAdmin(null, mockAdminClient);\n            Set<String> policies = admin.topicCleanupPolicy(\"myTopic\");\n            assertEquals(1, policies.size());\n            assertEquals(TopicConfig.CLEANUP_POLICY_COMPACT, policies.iterator().next());\n        }\n    }\n","date":"2020-06-11 11:39:52","endLine":452,"groupId":"20284","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyingGettingTopicCleanupPolicies","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/55664c4b18115db740d20c4d4c68e45d2d8c2e.src","preCode":"    public void verifyingGettingTopicCleanupPolicies() {\n        String topicName = \"myTopic\";\n        Map<String, String> topicConfigs = Collections.singletonMap(\"cleanup.policy\", \"compact\");\n        Cluster cluster = createCluster(1);\n        try (MockAdminClient mockAdminClient = new MockAdminClient(cluster.nodes(), cluster.nodeById(0))) {\n            TopicPartitionInfo topicPartitionInfo = new TopicPartitionInfo(0, cluster.nodeById(0), cluster.nodes(), Collections.<Node>emptyList());\n            mockAdminClient.addTopic(false, topicName, Collections.singletonList(topicPartitionInfo), topicConfigs);\n            TopicAdmin admin = new TopicAdmin(null, mockAdminClient);\n            Set<String> policies = admin.topicCleanupPolicy(\"myTopic\");\n            assertEquals(1, policies.size());\n            assertEquals(TopicConfig.CLEANUP_POLICY_COMPACT, policies.iterator().next());\n        }\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/util/TopicAdminTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"B"}],"commitId":"48b56e533b3ff22ae0e2cf7fcc649e7df19f2b06","commitMessage":"@@@KAFKA-9216: Enforce that Connect?s internal topics use `compact` cleanup policy (#8828)\n\nThis change adds a check to the KafkaConfigBackingStore.  KafkaOffsetBackingStore.  and KafkaStatusBackingStore to use the admin client to verify that the internal topics are compacted and do not use the `delete` cleanup policy.\n\nConnect already will create the internal topics with `cleanup.policy=compact` if the topics do not yet exist when the Connect workers are started; the new topics are created always as compacted.  overwriting any user-specified `cleanup.policy`. However.  if the topics already exist the worker did not previously verify the internal topics were compacted.  such as when a user manually creates the internal topics before starting Connect or manually changes the topic settings after the fact.\n\nThe current change helps guard against users running Connect with topics that have delete cleanup policy enabled.  which will remove all connector configurations.  source offsets.  and connector & task statuses that are older than the retention time. This means that.  for example.  the configuration for a long-running connector could be deleted by the broker.  and this will cause restart issues upon a subsequent rebalance or restarting of Connect worker(s).\n\nConnect behavior requires that its internal topics are compacted and not deleted after some retention time. Therefore.  this additional check is simply enforcing the existing expectations.  and therefore does not need a KIP.\n\nAuthor: Randall Hauch <rhauch@gmail.com>\nReviewer: Konstantine Karantasis <konstantine@confluent.io>.  Chris Egerton <chrise@confluent.io>","date":"2020-06-11 11:39:52","modifiedFileCount":"15","status":"B","submitter":"Randall Hauch"},{"authorTime":"2020-06-11 11:39:52","codes":[{"authorDate":"2021-02-05 01:15:49","commitOrder":2,"curCode":"    public void verifyingTopicCleanupPolicyShouldFailWhenTopicHasDeletePolicy() {\n        String topicName = \"myTopic\";\n        Map<String, String> topicConfigs = Collections.singletonMap(\"cleanup.policy\", \"delete\");\n        Cluster cluster = createCluster(1);\n        try (MockAdminClient mockAdminClient = new MockAdminClient(cluster.nodes(), cluster.nodeById(0))) {\n            TopicPartitionInfo topicPartitionInfo = new TopicPartitionInfo(0, cluster.nodeById(0), cluster.nodes(), Collections.<Node>emptyList());\n            mockAdminClient.addTopic(false, topicName, Collections.singletonList(topicPartitionInfo), topicConfigs);\n            TopicAdmin admin = new TopicAdmin(null, mockAdminClient);\n            ConfigException e = assertThrows(ConfigException.class, () -> admin.verifyTopicCleanupPolicyOnlyCompact(\"myTopic\", \"worker.topic\", \"purpose\"));\n            assertTrue(e.getMessage().contains(\"to guarantee consistency and durability\"));\n        }\n    }\n","date":"2021-02-05 01:15:49","endLine":429,"groupId":"20284","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyingTopicCleanupPolicyShouldFailWhenTopicHasDeletePolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b7/737bb031eb4a64c67a481de56cc4b2dcdd9339.src","preCode":"    public void verifyingTopicCleanupPolicyShouldFailWhenTopicHasDeletePolicy() {\n        String topicName = \"myTopic\";\n        Map<String, String> topicConfigs = Collections.singletonMap(\"cleanup.policy\", \"delete\");\n        Cluster cluster = createCluster(1);\n        try (MockAdminClient mockAdminClient = new MockAdminClient(cluster.nodes(), cluster.nodeById(0))) {\n            TopicPartitionInfo topicPartitionInfo = new TopicPartitionInfo(0, cluster.nodeById(0), cluster.nodes(), Collections.<Node>emptyList());\n            mockAdminClient.addTopic(false, topicName, Collections.singletonList(topicPartitionInfo), topicConfigs);\n            TopicAdmin admin = new TopicAdmin(null, mockAdminClient);\n            ConfigException e = assertThrows(ConfigException.class, () -> {\n                admin.verifyTopicCleanupPolicyOnlyCompact(\"myTopic\", \"worker.topic\", \"purpose\");\n            });\n            assertTrue(e.getMessage().contains(\"to guarantee consistency and durability\"));\n        }\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/util/TopicAdminTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":418,"status":"M"},{"authorDate":"2020-06-11 11:39:52","commitOrder":2,"curCode":"    public void verifyingGettingTopicCleanupPolicies() {\n        String topicName = \"myTopic\";\n        Map<String, String> topicConfigs = Collections.singletonMap(\"cleanup.policy\", \"compact\");\n        Cluster cluster = createCluster(1);\n        try (MockAdminClient mockAdminClient = new MockAdminClient(cluster.nodes(), cluster.nodeById(0))) {\n            TopicPartitionInfo topicPartitionInfo = new TopicPartitionInfo(0, cluster.nodeById(0), cluster.nodes(), Collections.<Node>emptyList());\n            mockAdminClient.addTopic(false, topicName, Collections.singletonList(topicPartitionInfo), topicConfigs);\n            TopicAdmin admin = new TopicAdmin(null, mockAdminClient);\n            Set<String> policies = admin.topicCleanupPolicy(\"myTopic\");\n            assertEquals(1, policies.size());\n            assertEquals(TopicConfig.CLEANUP_POLICY_COMPACT, policies.iterator().next());\n        }\n    }\n","date":"2020-06-11 11:39:52","endLine":452,"groupId":"20284","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyingGettingTopicCleanupPolicies","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b6/55664c4b18115db740d20c4d4c68e45d2d8c2e.src","preCode":"    public void verifyingGettingTopicCleanupPolicies() {\n        String topicName = \"myTopic\";\n        Map<String, String> topicConfigs = Collections.singletonMap(\"cleanup.policy\", \"compact\");\n        Cluster cluster = createCluster(1);\n        try (MockAdminClient mockAdminClient = new MockAdminClient(cluster.nodes(), cluster.nodeById(0))) {\n            TopicPartitionInfo topicPartitionInfo = new TopicPartitionInfo(0, cluster.nodeById(0), cluster.nodes(), Collections.<Node>emptyList());\n            mockAdminClient.addTopic(false, topicName, Collections.singletonList(topicPartitionInfo), topicConfigs);\n            TopicAdmin admin = new TopicAdmin(null, mockAdminClient);\n            Set<String> policies = admin.topicCleanupPolicy(\"myTopic\");\n            assertEquals(1, policies.size());\n            assertEquals(TopicConfig.CLEANUP_POLICY_COMPACT, policies.iterator().next());\n        }\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/util/TopicAdminTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":440,"status":"N"}],"commitId":"c19a35d1b740c85559a7ff4e882fc95b4737808d","commitMessage":"@@@KAFKA-10835: Replace Runnable and Callable overrides with lambdas in Connect (#9867)\n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 01:15:49","modifiedFileCount":"50","status":"M","submitter":"Lev Zemlyanov"},{"authorTime":"2021-02-05 09:08:56","codes":[{"authorDate":"2021-02-05 09:08:56","commitOrder":3,"curCode":"    public void verifyingTopicCleanupPolicyShouldFailWhenTopicHasDeletePolicy() {\n        String topicName = \"myTopic\";\n        Map<String, String> topicConfigs = Collections.singletonMap(\"cleanup.policy\", \"delete\");\n        Cluster cluster = createCluster(1);\n        try (MockAdminClient mockAdminClient = new MockAdminClient(cluster.nodes(), cluster.nodeById(0))) {\n            TopicPartitionInfo topicPartitionInfo = new TopicPartitionInfo(0, cluster.nodeById(0), cluster.nodes(), Collections.emptyList());\n            mockAdminClient.addTopic(false, topicName, Collections.singletonList(topicPartitionInfo), topicConfigs);\n            TopicAdmin admin = new TopicAdmin(null, mockAdminClient);\n            ConfigException e = assertThrows(ConfigException.class, () -> admin.verifyTopicCleanupPolicyOnlyCompact(\"myTopic\", \"worker.topic\", \"purpose\"));\n            assertTrue(e.getMessage().contains(\"to guarantee consistency and durability\"));\n        }\n    }\n","date":"2021-02-05 09:08:56","endLine":428,"groupId":"105049","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"verifyingTopicCleanupPolicyShouldFailWhenTopicHasDeletePolicy","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/64/6da7135543f861abca2e3edb8806840b47426f.src","preCode":"    public void verifyingTopicCleanupPolicyShouldFailWhenTopicHasDeletePolicy() {\n        String topicName = \"myTopic\";\n        Map<String, String> topicConfigs = Collections.singletonMap(\"cleanup.policy\", \"delete\");\n        Cluster cluster = createCluster(1);\n        try (MockAdminClient mockAdminClient = new MockAdminClient(cluster.nodes(), cluster.nodeById(0))) {\n            TopicPartitionInfo topicPartitionInfo = new TopicPartitionInfo(0, cluster.nodeById(0), cluster.nodes(), Collections.<Node>emptyList());\n            mockAdminClient.addTopic(false, topicName, Collections.singletonList(topicPartitionInfo), topicConfigs);\n            TopicAdmin admin = new TopicAdmin(null, mockAdminClient);\n            ConfigException e = assertThrows(ConfigException.class, () -> admin.verifyTopicCleanupPolicyOnlyCompact(\"myTopic\", \"worker.topic\", \"purpose\"));\n            assertTrue(e.getMessage().contains(\"to guarantee consistency and durability\"));\n        }\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/util/TopicAdminTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":417,"status":"M"},{"authorDate":"2021-02-05 09:08:56","commitOrder":3,"curCode":"    public void verifyingGettingTopicCleanupPolicies() {\n        String topicName = \"myTopic\";\n        Map<String, String> topicConfigs = Collections.singletonMap(\"cleanup.policy\", \"compact\");\n        Cluster cluster = createCluster(1);\n        try (MockAdminClient mockAdminClient = new MockAdminClient(cluster.nodes(), cluster.nodeById(0))) {\n            TopicPartitionInfo topicPartitionInfo = new TopicPartitionInfo(0, cluster.nodeById(0), cluster.nodes(), Collections.emptyList());\n            mockAdminClient.addTopic(false, topicName, Collections.singletonList(topicPartitionInfo), topicConfigs);\n            TopicAdmin admin = new TopicAdmin(null, mockAdminClient);\n            Set<String> policies = admin.topicCleanupPolicy(\"myTopic\");\n            assertEquals(1, policies.size());\n            assertEquals(TopicConfig.CLEANUP_POLICY_COMPACT, policies.iterator().next());\n        }\n    }\n","date":"2021-02-05 09:08:56","endLine":457,"groupId":"105049","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"verifyingGettingTopicCleanupPolicies","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/64/6da7135543f861abca2e3edb8806840b47426f.src","preCode":"    public void verifyingGettingTopicCleanupPolicies() {\n        String topicName = \"myTopic\";\n        Map<String, String> topicConfigs = Collections.singletonMap(\"cleanup.policy\", \"compact\");\n        Cluster cluster = createCluster(1);\n        try (MockAdminClient mockAdminClient = new MockAdminClient(cluster.nodes(), cluster.nodeById(0))) {\n            TopicPartitionInfo topicPartitionInfo = new TopicPartitionInfo(0, cluster.nodeById(0), cluster.nodes(), Collections.<Node>emptyList());\n            mockAdminClient.addTopic(false, topicName, Collections.singletonList(topicPartitionInfo), topicConfigs);\n            TopicAdmin admin = new TopicAdmin(null, mockAdminClient);\n            Set<String> policies = admin.topicCleanupPolicy(\"myTopic\");\n            assertEquals(1, policies.size());\n            assertEquals(TopicConfig.CLEANUP_POLICY_COMPACT, policies.iterator().next());\n        }\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/util/TopicAdminTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"M"}],"commitId":"07843cfbf4e3e7a2d26d63904bbf0da0fcd07ca2","commitMessage":"@@@KAFKA-10834: Remove redundant type casts in Connect (#10053)\n\nCleanup up to remove redundant type casts in Connect and use the diamond operator when needed \n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com>","date":"2021-02-05 09:08:56","modifiedFileCount":"41","status":"M","submitter":"Lev Zemlyanov"}]
