[{"authorTime":"2020-06-11 22:47:48","codes":[{"authorDate":"2020-05-15 04:53:28","commitOrder":2,"curCode":"    public void shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics() {\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(emptyMap());\n\n        expect(adminClient.listOffsets(emptyMap())).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              singletonList(\"topic1\"),\n                              defaultSubscriptionInfo.encode()\n                          ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(true);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n    }\n","date":"2020-05-15 04:53:28","endLine":1897,"groupId":"21588","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/82/edeb053a124f47aba01de9d8be0d9d81ba3988.src","preCode":"    public void shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics() {\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(emptyMap());\n\n        expect(adminClient.listOffsets(emptyMap())).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              singletonList(\"topic1\"),\n                              defaultSubscriptionInfo.encode()\n                          ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(true);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1871,"status":"NB"},{"authorDate":"2020-06-11 22:47:48","commitOrder":2,"curCode":"    public void shouldRequestEndOffsetsForPreexistingChangelogs() {\n        final Set<TopicPartition> changelogs = mkSet(\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 0),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 1),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 2)\n        );\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(changelogs.stream().collect(Collectors.toMap(\n            tp -> tp,\n            tp -> {\n                final ListOffsetsResultInfo info = EasyMock.createNiceMock(ListOffsetsResultInfo.class);\n                expect(info.offset()).andStubReturn(Long.MAX_VALUE);\n                EasyMock.replay(info);\n                return info;\n            }))\n        );\n        final Capture<Map<TopicPartition, OffsetSpec>> capturedChangelogs = EasyMock.newCapture();\n\n        expect(adminClient.listOffsets(EasyMock.capture(capturedChangelogs))).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                singletonList(\"topic1\"),\n                defaultSubscriptionInfo.encode()\n            ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(false);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n        assertThat(\n            capturedChangelogs.getValue().keySet(),\n            equalTo(changelogs)\n        );\n    }\n","date":"2020-06-11 22:47:48","endLine":1921,"groupId":"4815","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldRequestEndOffsetsForPreexistingChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/d4169cd9fb264319b0e0566c76d6b2abce77cb.src","preCode":"    public void shouldRequestEndOffsetsForPreexistingChangelogs() {\n        final Set<TopicPartition> changelogs = mkSet(\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 0),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 1),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 2)\n        );\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(changelogs.stream().collect(Collectors.toMap(\n            tp -> tp,\n            tp -> {\n                final ListOffsetsResultInfo info = EasyMock.createNiceMock(ListOffsetsResultInfo.class);\n                expect(info.offset()).andStubReturn(Long.MAX_VALUE);\n                EasyMock.replay(info);\n                return info;\n            }))\n        );\n        final Capture<Map<TopicPartition, OffsetSpec>> capturedChangelogs = EasyMock.newCapture();\n\n        expect(adminClient.listOffsets(EasyMock.capture(capturedChangelogs))).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                singletonList(\"topic1\"),\n                defaultSubscriptionInfo.encode()\n            ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(false);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n        assertThat(\n            capturedChangelogs.getValue().keySet(),\n            equalTo(changelogs)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1877,"status":"B"}],"commitId":"42f46abb34a2b29993b1a8e6333a400a00227e30","commitMessage":"@@@KAFKA-10085: correctly compute lag for optimized source changelogs (#8787)\n\nSplit out the optimized source changelogs and fetch the committed offsets rather than the end offset for task lag computation\n\nReviewers: John Roesler <vvcephei@apache.org>","date":"2020-06-11 22:47:48","modifiedFileCount":"8","status":"M","submitter":"A. Sophie Blee-Goldman"},{"authorTime":"2020-08-07 02:28:07","codes":[{"authorDate":"2020-08-07 02:28:07","commitOrder":3,"curCode":"    public void shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics() {\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(emptyMap());\n\n        expect(adminClient.listOffsets(emptyMap())).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier<>(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              singletonList(\"topic1\"),\n                              defaultSubscriptionInfo.encode()\n                          ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(true);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n    }\n","date":"2020-08-07 02:28:07","endLine":1966,"groupId":"9431","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/a865bdca5247690999077274c34f0fe34dba3b.src","preCode":"    public void shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics() {\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(emptyMap());\n\n        expect(adminClient.listOffsets(emptyMap())).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              singletonList(\"topic1\"),\n                              defaultSubscriptionInfo.encode()\n                          ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(true);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1940,"status":"M"},{"authorDate":"2020-08-07 02:28:07","commitOrder":3,"curCode":"    public void shouldRequestEndOffsetsForPreexistingChangelogs() {\n        final Set<TopicPartition> changelogs = mkSet(\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 0),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 1),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 2)\n        );\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(changelogs.stream().collect(Collectors.toMap(\n            tp -> tp,\n            tp -> {\n                final ListOffsetsResultInfo info = EasyMock.createNiceMock(ListOffsetsResultInfo.class);\n                expect(info.offset()).andStubReturn(Long.MAX_VALUE);\n                EasyMock.replay(info);\n                return info;\n            }))\n        );\n        final Capture<Map<TopicPartition, OffsetSpec>> capturedChangelogs = EasyMock.newCapture();\n\n        expect(adminClient.listOffsets(EasyMock.capture(capturedChangelogs))).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier<>(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                singletonList(\"topic1\"),\n                defaultSubscriptionInfo.encode()\n            ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(false);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n        assertThat(\n            capturedChangelogs.getValue().keySet(),\n            equalTo(changelogs)\n        );\n    }\n","date":"2020-08-07 02:28:07","endLine":2013,"groupId":"11619","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldRequestEndOffsetsForPreexistingChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/b3/a865bdca5247690999077274c34f0fe34dba3b.src","preCode":"    public void shouldRequestEndOffsetsForPreexistingChangelogs() {\n        final Set<TopicPartition> changelogs = mkSet(\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 0),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 1),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 2)\n        );\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(changelogs.stream().collect(Collectors.toMap(\n            tp -> tp,\n            tp -> {\n                final ListOffsetsResultInfo info = EasyMock.createNiceMock(ListOffsetsResultInfo.class);\n                expect(info.offset()).andStubReturn(Long.MAX_VALUE);\n                EasyMock.replay(info);\n                return info;\n            }))\n        );\n        final Capture<Map<TopicPartition, OffsetSpec>> capturedChangelogs = EasyMock.newCapture();\n\n        expect(adminClient.listOffsets(EasyMock.capture(capturedChangelogs))).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                singletonList(\"topic1\"),\n                defaultSubscriptionInfo.encode()\n            ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(false);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n        assertThat(\n            capturedChangelogs.getValue().keySet(),\n            equalTo(changelogs)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1969,"status":"M"}],"commitId":"990301323cc5a774e17b0a5d373aff8439cda489","commitMessage":"@@@KAFKA-9274: Remove `retries` from InternalTopicManager (#9060)\n\n - part of KIP-572\n - replace `retries` in InternalTopicManager with infinite retires plus a new timeout.  based on consumer config MAX_POLL_INTERVAL_MS\n\nReviewers: David Jacot <djacot@confluent.io>.  Boyang Chen <boyang@confluent.io>","date":"2020-08-07 02:28:07","modifiedFileCount":"11","status":"M","submitter":"Matthias J. Sax"},{"authorTime":"2020-09-10 01:37:21","codes":[{"authorDate":"2020-09-10 01:37:21","commitOrder":4,"curCode":"    public void shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics() {\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(emptyMap());\n\n        expect(adminClient.listOffsets(emptyMap())).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockApiProcessorSupplier<>(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              singletonList(\"topic1\"),\n                              defaultSubscriptionInfo.encode()\n                          ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(true);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n    }\n","date":"2020-09-10 01:37:21","endLine":1966,"groupId":"9431","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/eb563d9120f1bfd01ba273531233c0a330923c.src","preCode":"    public void shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics() {\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(emptyMap());\n\n        expect(adminClient.listOffsets(emptyMap())).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier<>(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              singletonList(\"topic1\"),\n                              defaultSubscriptionInfo.encode()\n                          ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(true);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1940,"status":"M"},{"authorDate":"2020-09-10 01:37:21","commitOrder":4,"curCode":"    public void shouldRequestEndOffsetsForPreexistingChangelogs() {\n        final Set<TopicPartition> changelogs = mkSet(\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 0),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 1),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 2)\n        );\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(changelogs.stream().collect(Collectors.toMap(\n            tp -> tp,\n            tp -> {\n                final ListOffsetsResultInfo info = EasyMock.createNiceMock(ListOffsetsResultInfo.class);\n                expect(info.offset()).andStubReturn(Long.MAX_VALUE);\n                EasyMock.replay(info);\n                return info;\n            }))\n        );\n        final Capture<Map<TopicPartition, OffsetSpec>> capturedChangelogs = EasyMock.newCapture();\n\n        expect(adminClient.listOffsets(EasyMock.capture(capturedChangelogs))).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockApiProcessorSupplier<>(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                singletonList(\"topic1\"),\n                defaultSubscriptionInfo.encode()\n            ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(false);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n        assertThat(\n            capturedChangelogs.getValue().keySet(),\n            equalTo(changelogs)\n        );\n    }\n","date":"2020-09-10 01:37:21","endLine":2013,"groupId":"11619","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldRequestEndOffsetsForPreexistingChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/eb563d9120f1bfd01ba273531233c0a330923c.src","preCode":"    public void shouldRequestEndOffsetsForPreexistingChangelogs() {\n        final Set<TopicPartition> changelogs = mkSet(\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 0),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 1),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 2)\n        );\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(changelogs.stream().collect(Collectors.toMap(\n            tp -> tp,\n            tp -> {\n                final ListOffsetsResultInfo info = EasyMock.createNiceMock(ListOffsetsResultInfo.class);\n                expect(info.offset()).andStubReturn(Long.MAX_VALUE);\n                EasyMock.replay(info);\n                return info;\n            }))\n        );\n        final Capture<Map<TopicPartition, OffsetSpec>> capturedChangelogs = EasyMock.newCapture();\n\n        expect(adminClient.listOffsets(EasyMock.capture(capturedChangelogs))).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockProcessorSupplier<>(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                singletonList(\"topic1\"),\n                defaultSubscriptionInfo.encode()\n            ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(false);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n        assertThat(\n            capturedChangelogs.getValue().keySet(),\n            equalTo(changelogs)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1969,"status":"M"}],"commitId":"09d1498e3065eccc26a2d396ea13e7c8b553b974","commitMessage":"@@@KAFKA-10436: Implement KIP-478 Topology changes (#9221)\n\nConvert Topology#addProcessor and #addGlobalStore\nAlso.  convert some of the internals in support of addProcessor\n\nReviewers: Bill Bejeck <bbejeck@apache.org>","date":"2020-09-10 01:37:21","modifiedFileCount":"45","status":"M","submitter":"John Roesler"},{"authorTime":"2020-10-22 00:06:25","codes":[{"authorDate":"2020-09-10 01:37:21","commitOrder":5,"curCode":"    public void shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics() {\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(emptyMap());\n\n        expect(adminClient.listOffsets(emptyMap())).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockApiProcessorSupplier<>(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              singletonList(\"topic1\"),\n                              defaultSubscriptionInfo.encode()\n                          ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(true);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n    }\n","date":"2020-09-10 01:37:21","endLine":1966,"groupId":"102505","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f8/eb563d9120f1bfd01ba273531233c0a330923c.src","preCode":"    public void shouldSkipListOffsetsRequestForNewlyCreatedChangelogTopics() {\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(emptyMap());\n\n        expect(adminClient.listOffsets(emptyMap())).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockApiProcessorSupplier<>(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store1\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n                          new Subscription(\n                              singletonList(\"topic1\"),\n                              defaultSubscriptionInfo.encode()\n                          ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(true);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1940,"status":"N"},{"authorDate":"2020-10-22 00:06:25","commitOrder":5,"curCode":"    public void shouldRequestEndOffsetsForPreexistingChangelogs() {\n        final Set<TopicPartition> changelogs = mkSet(\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 0),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 1),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 2)\n        );\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(changelogs.stream().collect(Collectors.toMap(\n            tp -> tp,\n            tp -> {\n                final ListOffsetsResultInfo info = EasyMock.createNiceMock(ListOffsetsResultInfo.class);\n                expect(info.offset()).andStubReturn(Long.MAX_VALUE);\n                EasyMock.replay(info);\n                return info;\n            }))\n        );\n        final Capture<Map<TopicPartition, OffsetSpec>> capturedChangelogs = EasyMock.newCapture();\n\n        expect(adminClient.listOffsets(EasyMock.capture(capturedChangelogs))).andReturn(result).once();\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockApiProcessorSupplier<>(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                singletonList(\"topic1\"),\n                defaultSubscriptionInfo.encode()\n            ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(false);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n        assertThat(\n            capturedChangelogs.getValue().keySet(),\n            equalTo(changelogs)\n        );\n    }\n","date":"2020-10-22 00:06:25","endLine":1931,"groupId":"102505","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldRequestEndOffsetsForPreexistingChangelogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/c4/a5780fd1592ebf045021590cce24ebfb5d2350.src","preCode":"    public void shouldRequestEndOffsetsForPreexistingChangelogs() {\n        final Set<TopicPartition> changelogs = mkSet(\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 0),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 1),\n            new TopicPartition(APPLICATION_ID + \"-store-changelog\", 2)\n        );\n        adminClient = EasyMock.createMock(AdminClient.class);\n        final ListOffsetsResult result = EasyMock.createNiceMock(ListOffsetsResult.class);\n        final KafkaFutureImpl<Map<TopicPartition, ListOffsetsResultInfo>> allFuture = new KafkaFutureImpl<>();\n        allFuture.complete(changelogs.stream().collect(Collectors.toMap(\n            tp -> tp,\n            tp -> {\n                final ListOffsetsResultInfo info = EasyMock.createNiceMock(ListOffsetsResultInfo.class);\n                expect(info.offset()).andStubReturn(Long.MAX_VALUE);\n                EasyMock.replay(info);\n                return info;\n            }))\n        );\n        final Capture<Map<TopicPartition, OffsetSpec>> capturedChangelogs = EasyMock.newCapture();\n\n        expect(adminClient.listOffsets(EasyMock.capture(capturedChangelogs))).andStubReturn(result);\n        expect(result.all()).andReturn(allFuture);\n\n        builder.addSource(null, \"source1\", null, null, null, \"topic1\");\n        builder.addProcessor(\"processor1\", new MockApiProcessorSupplier<>(), \"source1\");\n        builder.addStateStore(new MockKeyValueStoreBuilder(\"store\", false), \"processor1\");\n\n        subscriptions.put(\"consumer10\",\n            new Subscription(\n                singletonList(\"topic1\"),\n                defaultSubscriptionInfo.encode()\n            ));\n\n        EasyMock.replay(result);\n        configureDefault();\n        overwriteInternalTopicManagerWithMock(false);\n\n        partitionAssignor.assign(metadata, new GroupSubscription(subscriptions));\n\n        EasyMock.verify(adminClient);\n        assertThat(\n            capturedChangelogs.getValue().keySet(),\n            equalTo(changelogs)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/processor/internals/StreamsPartitionAssignorTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":1887,"status":"M"}],"commitId":"5dc94b1ff4fc580c240def5bd65daef3840041e0","commitMessage":"@@@MINOR: distinguish between missing source topics and internal assignment errors (#9446)\n\nIntroduce an ASSIGNMENT_ERROR code to distinguish from INCOMPLETE_SOURCE_TOPIC_METADATA and shut down all members in case of an unexpected exception during task assignment.\n\nReviewers: Matthias J. Sax <mjsax@apache.org>.   John Roesler <vvcephei@apache.org>","date":"2020-10-22 00:06:25","modifiedFileCount":"5","status":"M","submitter":"A. Sophie Blee-Goldman"}]
