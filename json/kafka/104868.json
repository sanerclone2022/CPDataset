[{"authorTime":"2018-02-01 02:40:24","codes":[{"authorDate":"2019-05-17 05:29:30","commitOrder":8,"curCode":"    public void testConnectorStatus() {\n        ConnectorTaskId taskId = new ConnectorTaskId(connector, 0);\n        AbstractHerder herder = partialMockBuilder(AbstractHerder.class)\n            .withConstructor(\n                Worker.class,\n                String.class,\n                String.class,\n                StatusBackingStore.class,\n                ConfigBackingStore.class\n            )\n            .withArgs(worker, workerId, kafkaClusterId, statusStore, configStore)\n            .addMockedMethod(\"generation\")\n            .createMock();\n\n        EasyMock.expect(herder.generation()).andStubReturn(generation);\n        EasyMock.expect(herder.config(connector)).andReturn(null);\n        EasyMock.expect(statusStore.get(connector))\n            .andReturn(new ConnectorStatus(connector, AbstractStatus.State.RUNNING, workerId, generation));\n        EasyMock.expect(statusStore.getAll(connector))\n            .andReturn(Collections.singletonList(\n                new TaskStatus(taskId, AbstractStatus.State.UNASSIGNED, workerId, generation)));\n\n        replayAll();\n        ConnectorStateInfo csi = herder.connectorStatus(connector);\n        PowerMock.verifyAll();\n    }\n","date":"2019-05-17 05:29:29","endLine":175,"groupId":"18151","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectorStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/f7/ee8a68e311c1bdbca3a1d33dc679bce152e9a8.src","preCode":"    public void testConnectorStatus() {\n        ConnectorTaskId taskId = new ConnectorTaskId(connector, 0);\n        AbstractHerder herder = partialMockBuilder(AbstractHerder.class)\n            .withConstructor(\n                Worker.class,\n                String.class,\n                String.class,\n                StatusBackingStore.class,\n                ConfigBackingStore.class\n            )\n            .withArgs(worker, workerId, kafkaClusterId, statusStore, configStore)\n            .addMockedMethod(\"generation\")\n            .createMock();\n\n        EasyMock.expect(herder.generation()).andStubReturn(generation);\n        EasyMock.expect(herder.config(connector)).andReturn(null);\n        EasyMock.expect(statusStore.get(connector))\n            .andReturn(new ConnectorStatus(connector, AbstractStatus.State.RUNNING, workerId, generation));\n        EasyMock.expect(statusStore.getAll(connector))\n            .andReturn(Collections.singletonList(\n                new TaskStatus(taskId, AbstractStatus.State.UNASSIGNED, workerId, generation)));\n\n        replayAll();\n        ConnectorStateInfo csi = herder.connectorStatus(connector);\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"B"},{"authorDate":"2018-02-01 02:40:24","commitOrder":8,"curCode":"    public void connectorStatus() {\n        ConnectorTaskId taskId = new ConnectorTaskId(connector, 0);\n\n        AbstractHerder herder = partialMockBuilder(AbstractHerder.class)\n                .withConstructor(Worker.class, String.class, String.class, StatusBackingStore.class, ConfigBackingStore.class)\n                .withArgs(worker, workerId, kafkaClusterId, statusStore, configStore)\n                .addMockedMethod(\"generation\")\n                .createMock();\n\n        EasyMock.expect(herder.generation()).andStubReturn(generation);\n        EasyMock.expect(herder.config(connector)).andReturn(null);\n\n        EasyMock.expect(statusStore.get(connector))\n                .andReturn(new ConnectorStatus(connector, AbstractStatus.State.RUNNING, workerId, generation));\n\n        EasyMock.expect(statusStore.getAll(connector))\n                .andReturn(Collections.singletonList(\n                        new TaskStatus(taskId, AbstractStatus.State.UNASSIGNED, workerId, generation)));\n        EasyMock.expect(worker.getPlugins()).andStubReturn(plugins);\n\n        replayAll();\n\n\n        ConnectorStateInfo state = herder.connectorStatus(connector);\n\n        assertEquals(connector, state.name());\n        assertEquals(\"RUNNING\", state.connector().state());\n        assertEquals(1, state.tasks().size());\n        assertEquals(workerId, state.connector().workerId());\n\n        ConnectorStateInfo.TaskState taskState = state.tasks().get(0);\n        assertEquals(0, taskState.id());\n        assertEquals(\"UNASSIGNED\", taskState.state());\n        assertEquals(workerId, taskState.workerId());\n\n        PowerMock.verifyAll();\n    }\n","date":"2018-02-01 02:40:24","endLine":111,"groupId":"18151","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"connectorStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/da/c1392ec7779e4fffa424c46fcfdc3483d4ea88.src","preCode":"    public void connectorStatus() {\n        ConnectorTaskId taskId = new ConnectorTaskId(connector, 0);\n\n        AbstractHerder herder = partialMockBuilder(AbstractHerder.class)\n                .withConstructor(Worker.class, String.class, String.class, StatusBackingStore.class, ConfigBackingStore.class)\n                .withArgs(worker, workerId, kafkaClusterId, statusStore, configStore)\n                .addMockedMethod(\"generation\")\n                .createMock();\n\n        EasyMock.expect(herder.generation()).andStubReturn(generation);\n        EasyMock.expect(herder.config(connector)).andReturn(null);\n\n        EasyMock.expect(statusStore.get(connector))\n                .andReturn(new ConnectorStatus(connector, AbstractStatus.State.RUNNING, workerId, generation));\n\n        EasyMock.expect(statusStore.getAll(connector))\n                .andReturn(Collections.singletonList(\n                        new TaskStatus(taskId, AbstractStatus.State.UNASSIGNED, workerId, generation)));\n        EasyMock.expect(worker.getPlugins()).andStubReturn(plugins);\n\n        replayAll();\n\n\n        ConnectorStateInfo state = herder.connectorStatus(connector);\n\n        assertEquals(connector, state.name());\n        assertEquals(\"RUNNING\", state.connector().state());\n        assertEquals(1, state.tasks().size());\n        assertEquals(workerId, state.connector().workerId());\n\n        ConnectorStateInfo.TaskState taskState = state.tasks().get(0);\n        assertEquals(0, taskState.id());\n        assertEquals(\"UNASSIGNED\", taskState.state());\n        assertEquals(workerId, taskState.workerId());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"NB"}],"commitId":"5a95c2e1cd555d5f3ec148cc7c765d1bb7d716f9","commitMessage":"@@@Add '?expand' query param for additional info on '/connectors'. (#6658)\n\nPer KIP-465.  kept existing behavior of `/connectors` resource in the Connect's REST API.  but added the ability to specify `?expand` query parameter to get list of connectors with status details on each connector. Added unit tests.  and verified passing existing system tests (which use the older list form).\n\nSee https://cwiki.apache.org/confluence/display/KAFKA/KIP-465%3A+Add+Consolidated+Connector+Endpoint+to+Connect+REST+API.\n\nAuthor: Dan Norwood <norwood@confluent.io>\nReviewer: Randall Hauch <rhauch@gmail.com>","date":"2019-05-17 05:29:29","modifiedFileCount":"9","status":"M","submitter":"dan norwood"},{"authorTime":"2019-05-17 16:37:32","codes":[{"authorDate":"2019-05-17 16:37:32","commitOrder":9,"curCode":"    public void testConnectorStatus() {\n        ConnectorTaskId taskId = new ConnectorTaskId(connector, 0);\n        AbstractHerder herder = partialMockBuilder(AbstractHerder.class)\n            .withConstructor(\n                Worker.class,\n                String.class,\n                String.class,\n                StatusBackingStore.class,\n                ConfigBackingStore.class,\n                ConnectorClientConfigOverridePolicy.class\n            )\n            .withArgs(worker, workerId, kafkaClusterId, statusStore, configStore, noneConnectorClientConfigOverridePolicy)\n            .addMockedMethod(\"generation\")\n            .createMock();\n\n        EasyMock.expect(herder.generation()).andStubReturn(generation);\n        EasyMock.expect(herder.config(connector)).andReturn(null);\n        EasyMock.expect(statusStore.get(connector))\n            .andReturn(new ConnectorStatus(connector, AbstractStatus.State.RUNNING, workerId, generation));\n        EasyMock.expect(statusStore.getAll(connector))\n            .andReturn(Collections.singletonList(\n                new TaskStatus(taskId, AbstractStatus.State.UNASSIGNED, workerId, generation)));\n\n        replayAll();\n        ConnectorStateInfo csi = herder.connectorStatus(connector);\n        PowerMock.verifyAll();\n    }\n","date":"2019-05-17 16:37:32","endLine":183,"groupId":"18151","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectorStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/35/c0dd2e131e13024f20ff6339e8e8f7f3bd6ce5.src","preCode":"    public void testConnectorStatus() {\n        ConnectorTaskId taskId = new ConnectorTaskId(connector, 0);\n        AbstractHerder herder = partialMockBuilder(AbstractHerder.class)\n            .withConstructor(\n                Worker.class,\n                String.class,\n                String.class,\n                StatusBackingStore.class,\n                ConfigBackingStore.class\n            )\n            .withArgs(worker, workerId, kafkaClusterId, statusStore, configStore)\n            .addMockedMethod(\"generation\")\n            .createMock();\n\n        EasyMock.expect(herder.generation()).andStubReturn(generation);\n        EasyMock.expect(herder.config(connector)).andReturn(null);\n        EasyMock.expect(statusStore.get(connector))\n            .andReturn(new ConnectorStatus(connector, AbstractStatus.State.RUNNING, workerId, generation));\n        EasyMock.expect(statusStore.getAll(connector))\n            .andReturn(Collections.singletonList(\n                new TaskStatus(taskId, AbstractStatus.State.UNASSIGNED, workerId, generation)));\n\n        replayAll();\n        ConnectorStateInfo csi = herder.connectorStatus(connector);\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"},{"authorDate":"2019-05-17 16:37:32","commitOrder":9,"curCode":"    public void connectorStatus() {\n        ConnectorTaskId taskId = new ConnectorTaskId(connector, 0);\n\n        AbstractHerder herder = partialMockBuilder(AbstractHerder.class)\n                .withConstructor(Worker.class, String.class, String.class, StatusBackingStore.class, ConfigBackingStore.class,\n                                 ConnectorClientConfigOverridePolicy.class)\n                .withArgs(worker, workerId, kafkaClusterId, statusStore, configStore, noneConnectorClientConfigOverridePolicy)\n                .addMockedMethod(\"generation\")\n                .createMock();\n\n        EasyMock.expect(herder.generation()).andStubReturn(generation);\n        EasyMock.expect(herder.config(connector)).andReturn(null);\n\n        EasyMock.expect(statusStore.get(connector))\n                .andReturn(new ConnectorStatus(connector, AbstractStatus.State.RUNNING, workerId, generation));\n\n        EasyMock.expect(statusStore.getAll(connector))\n                .andReturn(Collections.singletonList(\n                        new TaskStatus(taskId, AbstractStatus.State.UNASSIGNED, workerId, generation)));\n        EasyMock.expect(worker.getPlugins()).andStubReturn(plugins);\n\n        replayAll();\n\n\n        ConnectorStateInfo state = herder.connectorStatus(connector);\n\n        assertEquals(connector, state.name());\n        assertEquals(\"RUNNING\", state.connector().state());\n        assertEquals(1, state.tasks().size());\n        assertEquals(workerId, state.connector().workerId());\n\n        ConnectorStateInfo.TaskState taskState = state.tasks().get(0);\n        assertEquals(0, taskState.id());\n        assertEquals(\"UNASSIGNED\", taskState.state());\n        assertEquals(workerId, taskState.workerId());\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-05-17 16:37:32","endLine":223,"groupId":"18151","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"connectorStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/35/c0dd2e131e13024f20ff6339e8e8f7f3bd6ce5.src","preCode":"    public void connectorStatus() {\n        ConnectorTaskId taskId = new ConnectorTaskId(connector, 0);\n\n        AbstractHerder herder = partialMockBuilder(AbstractHerder.class)\n                .withConstructor(Worker.class, String.class, String.class, StatusBackingStore.class, ConfigBackingStore.class)\n                .withArgs(worker, workerId, kafkaClusterId, statusStore, configStore)\n                .addMockedMethod(\"generation\")\n                .createMock();\n\n        EasyMock.expect(herder.generation()).andStubReturn(generation);\n        EasyMock.expect(herder.config(connector)).andReturn(null);\n\n        EasyMock.expect(statusStore.get(connector))\n                .andReturn(new ConnectorStatus(connector, AbstractStatus.State.RUNNING, workerId, generation));\n\n        EasyMock.expect(statusStore.getAll(connector))\n                .andReturn(Collections.singletonList(\n                        new TaskStatus(taskId, AbstractStatus.State.UNASSIGNED, workerId, generation)));\n        EasyMock.expect(worker.getPlugins()).andStubReturn(plugins);\n\n        replayAll();\n\n\n        ConnectorStateInfo state = herder.connectorStatus(connector);\n\n        assertEquals(connector, state.name());\n        assertEquals(\"RUNNING\", state.connector().state());\n        assertEquals(1, state.tasks().size());\n        assertEquals(workerId, state.connector().workerId());\n\n        ConnectorStateInfo.TaskState taskState = state.tasks().get(0);\n        assertEquals(0, taskState.id());\n        assertEquals(\"UNASSIGNED\", taskState.state());\n        assertEquals(workerId, taskState.workerId());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"}],"commitId":"2e91a310d7bf9e7d4d46b0bc0ca0c11cb4531e10","commitMessage":"@@@KAFKA-8265: Initial implementation for ConnectorClientConfigPolicy to enable overrides (KIP-458) (#6624)\n\nImplementation to enable policy for Connector Client config overrides. This is\nimplemented per the KIP-458.\n\nReviewers: Randall Hauch <rhauch@gmail.com>","date":"2019-05-17 16:37:32","modifiedFileCount":"22","status":"M","submitter":"Magesh Nandakumar"},{"authorTime":"2021-02-04 07:39:32","codes":[{"authorDate":"2021-02-04 07:39:32","commitOrder":10,"curCode":"    public void testConnectorStatus() {\n        ConnectorTaskId taskId = new ConnectorTaskId(connector, 0);\n        AbstractHerder herder = partialMockBuilder(AbstractHerder.class)\n            .withConstructor(\n                Worker.class,\n                String.class,\n                String.class,\n                StatusBackingStore.class,\n                ConfigBackingStore.class,\n                ConnectorClientConfigOverridePolicy.class\n            )\n            .withArgs(worker, workerId, kafkaClusterId, statusStore, configStore, noneConnectorClientConfigOverridePolicy)\n            .addMockedMethod(\"generation\")\n            .createMock();\n\n        EasyMock.expect(herder.generation()).andStubReturn(generation);\n        EasyMock.expect(herder.rawConfig(connector)).andReturn(null);\n        EasyMock.expect(statusStore.get(connector))\n            .andReturn(new ConnectorStatus(connector, AbstractStatus.State.RUNNING, workerId, generation));\n        EasyMock.expect(statusStore.getAll(connector))\n            .andReturn(Collections.singletonList(\n                new TaskStatus(taskId, AbstractStatus.State.UNASSIGNED, workerId, generation)));\n\n        replayAll();\n        ConnectorStateInfo csi = herder.connectorStatus(connector);\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-04 07:39:32","endLine":196,"groupId":"104868","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testConnectorStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d2/b7913731fa932437ef5182eb7bb30db8986b6f.src","preCode":"    public void testConnectorStatus() {\n        ConnectorTaskId taskId = new ConnectorTaskId(connector, 0);\n        AbstractHerder herder = partialMockBuilder(AbstractHerder.class)\n            .withConstructor(\n                Worker.class,\n                String.class,\n                String.class,\n                StatusBackingStore.class,\n                ConfigBackingStore.class,\n                ConnectorClientConfigOverridePolicy.class\n            )\n            .withArgs(worker, workerId, kafkaClusterId, statusStore, configStore, noneConnectorClientConfigOverridePolicy)\n            .addMockedMethod(\"generation\")\n            .createMock();\n\n        EasyMock.expect(herder.generation()).andStubReturn(generation);\n        EasyMock.expect(herder.config(connector)).andReturn(null);\n        EasyMock.expect(statusStore.get(connector))\n            .andReturn(new ConnectorStatus(connector, AbstractStatus.State.RUNNING, workerId, generation));\n        EasyMock.expect(statusStore.getAll(connector))\n            .andReturn(Collections.singletonList(\n                new TaskStatus(taskId, AbstractStatus.State.UNASSIGNED, workerId, generation)));\n\n        replayAll();\n        ConnectorStateInfo csi = herder.connectorStatus(connector);\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"},{"authorDate":"2021-02-04 07:39:32","commitOrder":10,"curCode":"    public void connectorStatus() {\n        ConnectorTaskId taskId = new ConnectorTaskId(connector, 0);\n\n        AbstractHerder herder = partialMockBuilder(AbstractHerder.class)\n                .withConstructor(Worker.class, String.class, String.class, StatusBackingStore.class, ConfigBackingStore.class,\n                                 ConnectorClientConfigOverridePolicy.class)\n                .withArgs(worker, workerId, kafkaClusterId, statusStore, configStore, noneConnectorClientConfigOverridePolicy)\n                .addMockedMethod(\"generation\")\n                .createMock();\n\n        EasyMock.expect(herder.generation()).andStubReturn(generation);\n        EasyMock.expect(herder.rawConfig(connector)).andReturn(null);\n\n        EasyMock.expect(statusStore.get(connector))\n                .andReturn(new ConnectorStatus(connector, AbstractStatus.State.RUNNING, workerId, generation));\n\n        EasyMock.expect(statusStore.getAll(connector))\n                .andReturn(Collections.singletonList(\n                        new TaskStatus(taskId, AbstractStatus.State.UNASSIGNED, workerId, generation)));\n        EasyMock.expect(worker.getPlugins()).andStubReturn(plugins);\n\n        replayAll();\n\n\n        ConnectorStateInfo state = herder.connectorStatus(connector);\n\n        assertEquals(connector, state.name());\n        assertEquals(\"RUNNING\", state.connector().state());\n        assertEquals(1, state.tasks().size());\n        assertEquals(workerId, state.connector().workerId());\n\n        ConnectorStateInfo.TaskState taskState = state.tasks().get(0);\n        assertEquals(0, taskState.id());\n        assertEquals(\"UNASSIGNED\", taskState.state());\n        assertEquals(workerId, taskState.workerId());\n\n        PowerMock.verifyAll();\n    }\n","date":"2021-02-04 07:39:32","endLine":236,"groupId":"104868","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"connectorStatus","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d2/b7913731fa932437ef5182eb7bb30db8986b6f.src","preCode":"    public void connectorStatus() {\n        ConnectorTaskId taskId = new ConnectorTaskId(connector, 0);\n\n        AbstractHerder herder = partialMockBuilder(AbstractHerder.class)\n                .withConstructor(Worker.class, String.class, String.class, StatusBackingStore.class, ConfigBackingStore.class,\n                                 ConnectorClientConfigOverridePolicy.class)\n                .withArgs(worker, workerId, kafkaClusterId, statusStore, configStore, noneConnectorClientConfigOverridePolicy)\n                .addMockedMethod(\"generation\")\n                .createMock();\n\n        EasyMock.expect(herder.generation()).andStubReturn(generation);\n        EasyMock.expect(herder.config(connector)).andReturn(null);\n\n        EasyMock.expect(statusStore.get(connector))\n                .andReturn(new ConnectorStatus(connector, AbstractStatus.State.RUNNING, workerId, generation));\n\n        EasyMock.expect(statusStore.getAll(connector))\n                .andReturn(Collections.singletonList(\n                        new TaskStatus(taskId, AbstractStatus.State.UNASSIGNED, workerId, generation)));\n        EasyMock.expect(worker.getPlugins()).andStubReturn(plugins);\n\n        replayAll();\n\n\n        ConnectorStateInfo state = herder.connectorStatus(connector);\n\n        assertEquals(connector, state.name());\n        assertEquals(\"RUNNING\", state.connector().state());\n        assertEquals(1, state.tasks().size());\n        assertEquals(workerId, state.connector().workerId());\n\n        ConnectorStateInfo.TaskState taskState = state.tasks().get(0);\n        assertEquals(0, taskState.id());\n        assertEquals(\"UNASSIGNED\", taskState.state());\n        assertEquals(workerId, taskState.workerId());\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/AbstractHerderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":199,"status":"M"}],"commitId":"c64241f9c2b066f68ddbab2a21650daa856838dc","commitMessage":"@@@KAFKA-12259: Use raw config to infer the connector type when returning a connector status response (#10040)\n\nProblem: when calling the connect status endpoint.  a 500 error is returned.  e.g.\n```\n{\n  \"error_code\": 500. \n  \"message\": \"Could not read properties from file /tmp/somefile.properties\"\n}\n```\nwhen any of the connectors has an exception from the config provider. This is because the `AbstractHerder` is trying to use the resolved config to infer the type of the connector. However.  only the `connector.class` is needed from the config to infer if a specific connector is of source or sink type. The endpoint should still return the status of the connector instead of a 500 error.\n\nThis change uses the raw config from the config backing store to retrieve the connector class to avoid any variable resolution.\n\nUnit tests have been updated to reflect this change.\n\nReviewers: Konstantine Karantasis <k.karantasis@gmail.com> ","date":"2021-02-04 07:39:32","modifiedFileCount":"4","status":"M","submitter":"Yilong Chang"}]
