[{"authorTime":"2017-08-01 06:28:59","codes":[{"authorDate":"2017-08-01 06:28:59","commitOrder":1,"curCode":"    public void shouldAddRegexTopicToEarliestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-500000\";\n\n        builder.stream(AutoOffsetReset.EARLIEST, null, null, null,  topicPattern);\n\n        assertTrue(builder.internalTopologyBuilder.earliestResetTopicsPattern().matcher(topicTwo).matches());\n        assertFalse(builder.internalTopologyBuilder.latestResetTopicsPattern().matcher(topicTwo).matches());\n    }\n","date":"2017-08-01 06:28:59","endLine":330,"groupId":"21540","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAddRegexTopicToEarliestAutoOffsetResetList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a2/9d4af0bf54c2fbe62a40fce69e07a6a9e0939b.src","preCode":"    public void shouldAddRegexTopicToEarliestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-500000\";\n\n        builder.stream(AutoOffsetReset.EARLIEST, null, null, null,  topicPattern);\n\n        assertTrue(builder.internalTopologyBuilder.earliestResetTopicsPattern().matcher(topicTwo).matches());\n        assertFalse(builder.internalTopologyBuilder.latestResetTopicsPattern().matcher(topicTwo).matches());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"B"},{"authorDate":"2017-08-01 06:28:59","commitOrder":1,"curCode":"    public void shouldAddRegexTopicToLatestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-1000000\";\n\n        builder.stream(AutoOffsetReset.LATEST, null, null, null, topicPattern);\n\n        assertTrue(builder.internalTopologyBuilder.latestResetTopicsPattern().matcher(topicTwo).matches());\n        assertFalse(builder.internalTopologyBuilder.earliestResetTopicsPattern().matcher(topicTwo).matches());\n    }\n","date":"2017-08-01 06:28:59","endLine":341,"groupId":"21540","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAddRegexTopicToLatestAutoOffsetResetList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a2/9d4af0bf54c2fbe62a40fce69e07a6a9e0939b.src","preCode":"    public void shouldAddRegexTopicToLatestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-1000000\";\n\n        builder.stream(AutoOffsetReset.LATEST, null, null, null, topicPattern);\n\n        assertTrue(builder.internalTopologyBuilder.latestResetTopicsPattern().matcher(topicTwo).matches());\n        assertFalse(builder.internalTopologyBuilder.earliestResetTopicsPattern().matcher(topicTwo).matches());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"B"}],"commitId":"da2205578be3228ce40eb5e59f6bbcb0c8da0aba","commitMessage":"@@@KAFKA-5671: Add StreamsBuilder and Deprecate KStreamBuilder\n\nAuthor: Matthias J. Sax <matthias@confluent.io>\n\nReviewers: Damian Guy <damian.guy@gmail.com>.  Bill Bejeck <bill@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3602 from mjsax/kafka-5671-add-streamsbuilder\n","date":"2017-08-01 06:28:59","modifiedFileCount":"83","status":"B","submitter":"Matthias J. Sax"},{"authorTime":"2017-09-08 15:21:48","codes":[{"authorDate":"2017-09-08 15:21:48","commitOrder":2,"curCode":"    public void shouldAddRegexTopicToEarliestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-500000\";\n\n        builder.stream(topicPattern, new ConsumedInternal<>(Consumed.with(AutoOffsetReset.EARLIEST)));\n\n        assertTrue(builder.internalTopologyBuilder.earliestResetTopicsPattern().matcher(topicTwo).matches());\n        assertFalse(builder.internalTopologyBuilder.latestResetTopicsPattern().matcher(topicTwo).matches());\n    }\n","date":"2017-09-08 15:21:48","endLine":313,"groupId":"3672","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAddRegexTopicToEarliestAutoOffsetResetList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1a/2dc136fb242735098b3b981bc9d3fe91a94ace.src","preCode":"    public void shouldAddRegexTopicToEarliestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-500000\";\n\n        builder.stream(AutoOffsetReset.EARLIEST, null, null, null,  topicPattern);\n\n        assertTrue(builder.internalTopologyBuilder.earliestResetTopicsPattern().matcher(topicTwo).matches());\n        assertFalse(builder.internalTopologyBuilder.latestResetTopicsPattern().matcher(topicTwo).matches());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"},{"authorDate":"2017-09-08 15:21:48","commitOrder":2,"curCode":"    public void shouldAddRegexTopicToLatestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-1000000\";\n\n        builder.stream(topicPattern, new ConsumedInternal<>(Consumed.with(AutoOffsetReset.LATEST)));\n\n        assertTrue(builder.internalTopologyBuilder.latestResetTopicsPattern().matcher(topicTwo).matches());\n        assertFalse(builder.internalTopologyBuilder.earliestResetTopicsPattern().matcher(topicTwo).matches());\n    }\n","date":"2017-09-08 15:21:48","endLine":324,"groupId":"3672","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAddRegexTopicToLatestAutoOffsetResetList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/1a/2dc136fb242735098b3b981bc9d3fe91a94ace.src","preCode":"    public void shouldAddRegexTopicToLatestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-1000000\";\n\n        builder.stream(AutoOffsetReset.LATEST, null, null, null, topicPattern);\n\n        assertTrue(builder.internalTopologyBuilder.latestResetTopicsPattern().matcher(topicTwo).matches());\n        assertFalse(builder.internalTopologyBuilder.earliestResetTopicsPattern().matcher(topicTwo).matches());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"}],"commitId":"d0ee6ed36baf702fa24dac8ae31f45fc27324d89","commitMessage":"@@@KAFKA-5832; add Consumed and change StreamBuilder to use it\n\nAdded `Consumed` class.\nUpdated `StreamBuilder#stream`.  `StreamBuilder#table`.  `StreamBuilder#globalTable`\n\nAuthor: Damian Guy <damian.guy@gmail.com>\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  Guozhang Wang <wangguoz@gmail.com>\n\nCloses #3784 from dguy/kip-182-stream-builder\n","date":"2017-09-08 15:21:48","modifiedFileCount":"44","status":"M","submitter":"Damian Guy"},{"authorTime":"2018-08-02 06:01:18","codes":[{"authorDate":"2018-08-02 06:01:18","commitOrder":3,"curCode":"    public void shouldAddRegexTopicToEarliestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-500000\";\n\n        builder.stream(topicPattern, new ConsumedInternal<>(Consumed.with(AutoOffsetReset.EARLIEST)));\n        builder.buildAndOptimizeTopology();\n\n        assertTrue(builder.internalTopologyBuilder.earliestResetTopicsPattern().matcher(topicTwo).matches());\n        assertFalse(builder.internalTopologyBuilder.latestResetTopicsPattern().matcher(topicTwo).matches());\n    }\n","date":"2018-08-02 06:01:18","endLine":344,"groupId":"2902","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldAddRegexTopicToEarliestAutoOffsetResetList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/26/9c2f64bd1f88f5a297b06e3edf8feb1485e4a8.src","preCode":"    public void shouldAddRegexTopicToEarliestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-500000\";\n\n        builder.stream(topicPattern, new ConsumedInternal<>(Consumed.with(AutoOffsetReset.EARLIEST)));\n\n        assertTrue(builder.internalTopologyBuilder.earliestResetTopicsPattern().matcher(topicTwo).matches());\n        assertFalse(builder.internalTopologyBuilder.latestResetTopicsPattern().matcher(topicTwo).matches());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":335,"status":"M"},{"authorDate":"2018-08-02 06:01:18","commitOrder":3,"curCode":"    public void shouldAddRegexTopicToLatestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-1000000\";\n\n        builder.stream(topicPattern, new ConsumedInternal<>(Consumed.with(AutoOffsetReset.LATEST)));\n        builder.buildAndOptimizeTopology();\n\n        assertTrue(builder.internalTopologyBuilder.latestResetTopicsPattern().matcher(topicTwo).matches());\n        assertFalse(builder.internalTopologyBuilder.earliestResetTopicsPattern().matcher(topicTwo).matches());\n    }\n","date":"2018-08-02 06:01:18","endLine":356,"groupId":"2902","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldAddRegexTopicToLatestAutoOffsetResetList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/26/9c2f64bd1f88f5a297b06e3edf8feb1485e4a8.src","preCode":"    public void shouldAddRegexTopicToLatestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-1000000\";\n\n        builder.stream(topicPattern, new ConsumedInternal<>(Consumed.with(AutoOffsetReset.LATEST)));\n\n        assertTrue(builder.internalTopologyBuilder.latestResetTopicsPattern().matcher(topicTwo).matches());\n        assertFalse(builder.internalTopologyBuilder.earliestResetTopicsPattern().matcher(topicTwo).matches());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":347,"status":"M"}],"commitId":"c19213ab4139aa1f56f89982448184a5c82f98a4","commitMessage":"@@@KAFKA-6761: Construct Physical Plan using Graph.  Reduce streams footprint part III (#5201)\n\nThe specific changes in this PR from the second PR include:\n\n1. Changed the types of graph nodes to names conveying more context\n2. Build the entire physical plan from the graph.  after StreamsBuilder.build() is called.\n\nOther changes are addressed directly as review comments on the PR.\n\nTesting consists of using all existing streams tests to validate building the physical plan with graph\n\nReviewers: Matthias J. Sax <matthias@confluent.io>.  John Roesler <vvcephei@users.noreply.github.com>.  Guozhang Wang <wangguoz@gmail.com>","date":"2018-08-02 06:01:18","modifiedFileCount":"37","status":"M","submitter":"Bill Bejeck"},{"authorTime":"2021-07-29 02:18:56","codes":[{"authorDate":"2021-07-29 02:18:56","commitOrder":4,"curCode":"    public void shouldAddRegexTopicToEarliestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-500000\";\n\n        builder.stream(topicPattern, new ConsumedInternal<>(Consumed.with(AutoOffsetReset.EARLIEST)));\n        builder.buildAndOptimizeTopology();\n\n        assertThat(builder.internalTopologyBuilder.offsetResetStrategy(topicTwo), equalTo(OffsetResetStrategy.EARLIEST));\n    }\n","date":"2021-07-29 02:18:56","endLine":311,"groupId":"101803","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"shouldAddRegexTopicToEarliestAutoOffsetResetList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/155da114092c521f2068d1bbe1230371e5b2df.src","preCode":"    public void shouldAddRegexTopicToEarliestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-500000\";\n\n        builder.stream(topicPattern, new ConsumedInternal<>(Consumed.with(AutoOffsetReset.EARLIEST)));\n        builder.buildAndOptimizeTopology();\n\n        assertTrue(builder.internalTopologyBuilder.earliestResetTopicsPattern().matcher(topicTwo).matches());\n        assertFalse(builder.internalTopologyBuilder.latestResetTopicsPattern().matcher(topicTwo).matches());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"},{"authorDate":"2021-07-29 02:18:56","commitOrder":4,"curCode":"    public void shouldAddRegexTopicToLatestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-1000000\";\n\n        builder.stream(topicPattern, new ConsumedInternal<>(Consumed.with(AutoOffsetReset.LATEST)));\n        builder.buildAndOptimizeTopology();\n\n        assertThat(builder.internalTopologyBuilder.offsetResetStrategy(topicTwo), equalTo(OffsetResetStrategy.LATEST));\n    }\n","date":"2021-07-29 02:18:56","endLine":322,"groupId":"101803","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"shouldAddRegexTopicToLatestAutoOffsetResetList","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/73/155da114092c521f2068d1bbe1230371e5b2df.src","preCode":"    public void shouldAddRegexTopicToLatestAutoOffsetResetList() {\n        final Pattern topicPattern = Pattern.compile(\"topic-\\\\d+\");\n        final String topicTwo = \"topic-1000000\";\n\n        builder.stream(topicPattern, new ConsumedInternal<>(Consumed.with(AutoOffsetReset.LATEST)));\n        builder.buildAndOptimizeTopology();\n\n        assertTrue(builder.internalTopologyBuilder.latestResetTopicsPattern().matcher(topicTwo).matches());\n        assertFalse(builder.internalTopologyBuilder.earliestResetTopicsPattern().matcher(topicTwo).matches());\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilderTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":314,"status":"M"}],"commitId":"4710a491463a91ec12c670ea50c139fc14134e80","commitMessage":"@@@KAFKA-12648: Pt. 2 - Introduce TopologyMetadata to wrap InternalTopologyBuilders of named topologies (#10683)\n\nPt. 1: #10609\nPt. 2: #10683\nPt. 3: #10788\n\nThe TopologyMetadata is next up after Pt. 1 #10609. This PR sets up the basic architecture for running an app with multiple NamedTopologies.  though the APIs to add/remove them dynamically are not implemented until Pt. 3\n\nReviewers: Guozhang Wang <guozhang@confluent.io>.  Walker Carlson <wcarlson@confluent.io>","date":"2021-07-29 02:18:56","modifiedFileCount":"56","status":"M","submitter":"A. Sophie Blee-Goldman"}]
