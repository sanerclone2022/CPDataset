[{"authorTime":"2021-03-25 11:15:58","codes":[{"authorDate":"2021-03-25 11:15:58","commitOrder":1,"curCode":"        private void assertLookupResponse(\n            RequestSpec<String> requestSpec,\n            LookupResult<String> result\n        ) {\n            requestSpec.keys.forEach(key -> {\n                assertUnmappedKey(driver, key);\n            });\n\n            \r\n            MetadataResponse response = new MetadataResponse(new MetadataResponseData(),\n                ApiKeys.METADATA.latestVersion());\n            driver.onResponse(time.milliseconds(), requestSpec, response);\n\n            result.mappedKeys.forEach((key, brokerId) -> {\n                assertMappedKey(driver, key, brokerId);\n            });\n\n            result.failedKeys.forEach((key, exception) -> {\n                assertFailedKey(driver, key, exception);\n            });\n        }\n","date":"2021-03-25 11:15:58","endLine":551,"groupId":"5622","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertLookupResponse","params":"(RequestSpec<String>requestSpec@LookupResult<String>result)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d2/4123238c06b0766ec32ace3b26daa6184f7efb.src","preCode":"        private void assertLookupResponse(\n            RequestSpec<String> requestSpec,\n            LookupResult<String> result\n        ) {\n            requestSpec.keys.forEach(key -> {\n                assertUnmappedKey(driver, key);\n            });\n\n            \r\n            MetadataResponse response = new MetadataResponse(new MetadataResponseData(),\n                ApiKeys.METADATA.latestVersion());\n            driver.onResponse(time.milliseconds(), requestSpec, response);\n\n            result.mappedKeys.forEach((key, brokerId) -> {\n                assertMappedKey(driver, key, brokerId);\n            });\n\n            result.failedKeys.forEach((key, exception) -> {\n                assertFailedKey(driver, key, exception);\n            });\n        }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/internals/AdminApiDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":531,"status":"B"},{"authorDate":"2021-03-25 11:15:58","commitOrder":1,"curCode":"        private void assertResponse(\n            RequestSpec<String> requestSpec,\n            ApiResult<String, Long> result\n        ) {\n            int brokerId = requestSpec.scope.destinationBrokerId().orElseThrow(() ->\n                new AssertionError(\"Fulfillment requests must specify a target brokerId\"));\n\n            requestSpec.keys.forEach(key -> {\n                assertMappedKey(driver, key, brokerId);\n            });\n\n            \r\n            MetadataResponse response = new MetadataResponse(new MetadataResponseData(),\n                ApiKeys.METADATA.latestVersion());\n\n            driver.onResponse(time.milliseconds(), requestSpec, response);\n\n            result.unmappedKeys.forEach(key -> {\n                assertUnmappedKey(driver, key);\n            });\n\n            result.failedKeys.forEach((key, exception) -> {\n                assertFailedKey(driver, key, exception);\n            });\n\n            result.completedKeys.forEach((key, value) -> {\n                assertCompletedKey(driver, key, value);\n            });\n        }\n","date":"2021-03-25 11:15:58","endLine":581,"groupId":"5621","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertResponse","params":"(RequestSpec<String>requestSpec@ApiResult<String@Long>result)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/d2/4123238c06b0766ec32ace3b26daa6184f7efb.src","preCode":"        private void assertResponse(\n            RequestSpec<String> requestSpec,\n            ApiResult<String, Long> result\n        ) {\n            int brokerId = requestSpec.scope.destinationBrokerId().orElseThrow(() ->\n                new AssertionError(\"Fulfillment requests must specify a target brokerId\"));\n\n            requestSpec.keys.forEach(key -> {\n                assertMappedKey(driver, key, brokerId);\n            });\n\n            \r\n            MetadataResponse response = new MetadataResponse(new MetadataResponseData(),\n                ApiKeys.METADATA.latestVersion());\n\n            driver.onResponse(time.milliseconds(), requestSpec, response);\n\n            result.unmappedKeys.forEach(key -> {\n                assertUnmappedKey(driver, key);\n            });\n\n            result.failedKeys.forEach((key, exception) -> {\n                assertFailedKey(driver, key, exception);\n            });\n\n            result.completedKeys.forEach((key, value) -> {\n                assertCompletedKey(driver, key, value);\n            });\n        }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/internals/AdminApiDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"B"}],"commitId":"3ab9ab6b6ffea700753309d5b9074b45f97b0aa7","commitMessage":"@@@KAFKA-12434; Admin support for `DescribeProducers` API (#10275)\n\nThis patch adds the new `Admin` API to describe producer state as described by KIP-664: https://cwiki.apache.org/confluence/display/KAFKA/KIP-664%3A+Provide+tooling+to+detect+and+abort+hanging+transactions.\n\nThe three new APIs added by KIP-664 require different lookup and request patterns:\n\n- DescribeProducers: send to partition leaders\n- DescribeTransactions: send to coordinators\n- ListTransactions: send to all brokers\n\nOur method of handling complex workflows such as these in `KafkaAdminClient` by chaining together `Call` instances has been clumsy and error-prone at best. I have attempted to introduce a new pattern which separates the lookup stage (e.g. finding partition leaders) from the fulfillment stage (e.g. sending `DescribeProducers`). The lookup stage is implemented by `AdminApiLookupStrategy` and the fulfillment stage is implemented by `AdminApiHandler`. There is a new class `AdminApiDriver` which manages the bookkeeping for these two stages. See the corresponding javadocs for more detail. \n\nThis PR provides an example of usage through `DescribeProducersHandler`.  which is an implementation of `AdminApiHandler`. It relies on `PartitionLeaderStrategy` which implements `AdminApiLookupStrategy`. In addition to allowing for easier reuse of lookup strategies.  this approach provides a more convenient way for testing since all of the logic is not crammed into `KafkaAdminClient`. Follow-up PRs for the rest of KIP-664 will flesh out additional lookup strategies such as for coordinator APIs.\n\nReviewers: Chia-Ping Tsai <chia7712@gmail.com>.  David Jacot <djacot@confluent.io>","date":"2021-03-25 11:15:58","modifiedFileCount":"9","status":"B","submitter":"Jason Gustafson"},{"authorTime":"2021-06-02 08:58:47","codes":[{"authorDate":"2021-06-02 08:58:47","commitOrder":2,"curCode":"        private void assertLookupResponse(\n            RequestSpec<String> requestSpec,\n            LookupResult<String> result\n        ) {\n            requestSpec.keys.forEach(key -> {\n                assertUnmappedKey(this, key);\n            });\n\n            \r\n            MetadataResponse response = new MetadataResponse(new MetadataResponseData(),\n                ApiKeys.METADATA.latestVersion());\n            driver.onResponse(time.milliseconds(), requestSpec, response);\n\n            result.mappedKeys.forEach((key, brokerId) -> {\n                assertMappedKey(this, key, brokerId);\n            });\n\n            result.failedKeys.forEach((key, exception) -> {\n                assertFailedKey(this, key, exception);\n            });\n        }\n","date":"2021-06-02 08:58:47","endLine":592,"groupId":"22265","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertLookupResponse","params":"(RequestSpec<String>requestSpec@LookupResult<String>result)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a7/8b73a0fb645672fa856502b96b58d82f6c5db9.src","preCode":"        private void assertLookupResponse(\n            RequestSpec<String> requestSpec,\n            LookupResult<String> result\n        ) {\n            requestSpec.keys.forEach(key -> {\n                assertUnmappedKey(driver, key);\n            });\n\n            \r\n            MetadataResponse response = new MetadataResponse(new MetadataResponseData(),\n                ApiKeys.METADATA.latestVersion());\n            driver.onResponse(time.milliseconds(), requestSpec, response);\n\n            result.mappedKeys.forEach((key, brokerId) -> {\n                assertMappedKey(driver, key, brokerId);\n            });\n\n            result.failedKeys.forEach((key, exception) -> {\n                assertFailedKey(driver, key, exception);\n            });\n        }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/internals/AdminApiDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":572,"status":"M"},{"authorDate":"2021-06-02 08:58:47","commitOrder":2,"curCode":"        private void assertResponse(\n            RequestSpec<String> requestSpec,\n            ApiResult<String, Long> result\n        ) {\n            int brokerId = requestSpec.scope.destinationBrokerId().orElseThrow(() ->\n                new AssertionError(\"Fulfillment requests must specify a target brokerId\"));\n\n            requestSpec.keys.forEach(key -> {\n                assertMappedKey(this, key, brokerId);\n            });\n\n            \r\n            MetadataResponse response = new MetadataResponse(new MetadataResponseData(),\n                ApiKeys.METADATA.latestVersion());\n\n            driver.onResponse(time.milliseconds(), requestSpec, response);\n\n            result.unmappedKeys.forEach(key -> {\n                assertUnmappedKey(this, key);\n            });\n\n            result.failedKeys.forEach((key, exception) -> {\n                assertFailedKey(this, key, exception);\n            });\n\n            result.completedKeys.forEach((key, value) -> {\n                assertCompletedKey(this, key, value);\n            });\n        }\n","date":"2021-06-02 08:58:47","endLine":622,"groupId":"22264","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"assertResponse","params":"(RequestSpec<String>requestSpec@ApiResult<String@Long>result)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/a7/8b73a0fb645672fa856502b96b58d82f6c5db9.src","preCode":"        private void assertResponse(\n            RequestSpec<String> requestSpec,\n            ApiResult<String, Long> result\n        ) {\n            int brokerId = requestSpec.scope.destinationBrokerId().orElseThrow(() ->\n                new AssertionError(\"Fulfillment requests must specify a target brokerId\"));\n\n            requestSpec.keys.forEach(key -> {\n                assertMappedKey(driver, key, brokerId);\n            });\n\n            \r\n            MetadataResponse response = new MetadataResponse(new MetadataResponseData(),\n                ApiKeys.METADATA.latestVersion());\n\n            driver.onResponse(time.milliseconds(), requestSpec, response);\n\n            result.unmappedKeys.forEach(key -> {\n                assertUnmappedKey(driver, key);\n            });\n\n            result.failedKeys.forEach((key, exception) -> {\n                assertFailedKey(driver, key, exception);\n            });\n\n            result.completedKeys.forEach((key, value) -> {\n                assertCompletedKey(driver, key, value);\n            });\n        }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/internals/AdminApiDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":594,"status":"M"}],"commitId":"2d7a4ed3352a927d7d2a13662b585eaef6efdf1c","commitMessage":"@@@KAFKA-12709; Add Admin API for `ListTransactions` (#10616)\n\nThis patch adds `Admin` support for the `listTransactions` API.  which was added by [KIP-664](https://cwiki.apache.org/confluence/display/KAFKA/KIP-664%3A+Provide+tooling+to+detect+and+abort+hanging+transactions). Similar to `listConsumerGroups`.  the new `listTransactions` API is intended to be sent to all brokers. \n\nReviewers: David Jacot <djacot@confluent.io>","date":"2021-06-02 08:58:47","modifiedFileCount":"18","status":"M","submitter":"Jason Gustafson"},{"authorTime":"2021-07-02 05:05:03","codes":[{"authorDate":"2021-07-02 05:05:03","commitOrder":3,"curCode":"        private void assertLookupResponse(\n            RequestSpec<String> requestSpec,\n            LookupResult<String> result\n        ) {\n            requestSpec.keys.forEach(key -> {\n                assertUnmappedKey(this, key);\n            });\n\n            \r\n            MetadataResponse response = new MetadataResponse(new MetadataResponseData(),\n                ApiKeys.METADATA.latestVersion());\n            driver.onResponse(time.milliseconds(), requestSpec, response, Node.noNode());\n\n            result.mappedKeys.forEach((key, brokerId) -> {\n                assertMappedKey(this, key, brokerId);\n            });\n\n            result.failedKeys.forEach((key, exception) -> {\n                assertFailedKey(this, key, exception);\n            });\n        }\n","date":"2021-07-02 05:05:03","endLine":632,"groupId":"103788","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"assertLookupResponse","params":"(RequestSpec<String>requestSpec@LookupResult<String>result)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/a4fa84bea3f446c4abc112f075fd36c0892747.src","preCode":"        private void assertLookupResponse(\n            RequestSpec<String> requestSpec,\n            LookupResult<String> result\n        ) {\n            requestSpec.keys.forEach(key -> {\n                assertUnmappedKey(this, key);\n            });\n\n            \r\n            MetadataResponse response = new MetadataResponse(new MetadataResponseData(),\n                ApiKeys.METADATA.latestVersion());\n            driver.onResponse(time.milliseconds(), requestSpec, response);\n\n            result.mappedKeys.forEach((key, brokerId) -> {\n                assertMappedKey(this, key, brokerId);\n            });\n\n            result.failedKeys.forEach((key, exception) -> {\n                assertFailedKey(this, key, exception);\n            });\n        }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/internals/AdminApiDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":612,"status":"M"},{"authorDate":"2021-07-02 05:05:03","commitOrder":3,"curCode":"        private void assertResponse(\n            RequestSpec<String> requestSpec,\n            ApiResult<String, Long> result,\n            Node node\n        ) {\n            int brokerId = requestSpec.scope.destinationBrokerId().orElseThrow(() ->\n                new AssertionError(\"Fulfillment requests must specify a target brokerId\"));\n\n            requestSpec.keys.forEach(key -> {\n                assertMappedKey(this, key, brokerId);\n            });\n\n            \r\n            MetadataResponse response = new MetadataResponse(new MetadataResponseData(),\n                ApiKeys.METADATA.latestVersion());\n\n            driver.onResponse(time.milliseconds(), requestSpec, response, node);\n\n            result.unmappedKeys.forEach(key -> {\n                assertUnmappedKey(this, key);\n            });\n\n            result.failedKeys.forEach((key, exception) -> {\n                assertFailedKey(this, key, exception);\n            });\n\n            result.completedKeys.forEach((key, value) -> {\n                assertCompletedKey(this, key, value);\n            });\n        }\n","date":"2021-07-02 05:05:03","endLine":663,"groupId":"103788","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"assertResponse","params":"(RequestSpec<String>requestSpec@ApiResult<String@Long>result@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/93/a4fa84bea3f446c4abc112f075fd36c0892747.src","preCode":"        private void assertResponse(\n            RequestSpec<String> requestSpec,\n            ApiResult<String, Long> result\n        ) {\n            int brokerId = requestSpec.scope.destinationBrokerId().orElseThrow(() ->\n                new AssertionError(\"Fulfillment requests must specify a target brokerId\"));\n\n            requestSpec.keys.forEach(key -> {\n                assertMappedKey(this, key, brokerId);\n            });\n\n            \r\n            MetadataResponse response = new MetadataResponse(new MetadataResponseData(),\n                ApiKeys.METADATA.latestVersion());\n\n            driver.onResponse(time.milliseconds(), requestSpec, response);\n\n            result.unmappedKeys.forEach(key -> {\n                assertUnmappedKey(this, key);\n            });\n\n            result.failedKeys.forEach((key, exception) -> {\n                assertFailedKey(this, key, exception);\n            });\n\n            result.completedKeys.forEach((key, value) -> {\n                assertCompletedKey(this, key, value);\n            });\n        }\n","realPath":"clients/src/test/java/org/apache/kafka/clients/admin/internals/AdminApiDriverTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":634,"status":"M"}],"commitId":"f5d5f654db359af077088685e29fbe5ea69616cf","commitMessage":"@@@KAFKA-12663: Update FindCoordinator to support batch lookups (KIP-699) (#10743)\n\nThis implements KIP-699: https://cwiki.apache.org/confluence/display/KAFKA/KIP-699%3A+Update+FindCoordinator+to+resolve+multiple+Coordinators+at+a+time\n\nIt updates FindCoordinator request and response to support resolving multiple coordinators at a time. If a broker does not support the new FindCoordinator version.  clients can revert to the previous behaviour and use a request for each coordinator.\n\nReviewers: David Jacot <djacot@confluent.io>.  Tom Bentley <tbentley@redhat.com>.  Sanjana Kaundinya <skaundinya@gmail.com>","date":"2021-07-02 05:05:03","modifiedFileCount":"33","status":"M","submitter":"Mickael Maison"}]
