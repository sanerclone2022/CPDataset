[{"authorTime":"2019-10-31 00:24:59","codes":[{"authorDate":"2019-10-31 00:24:59","commitOrder":1,"curCode":"    public void shouldGetPutIfAbsentSensor() {\n        final String metricName = \"put-if-absent\";\n        final String descriptionOfRate = \"The average number of calls to put-if-absent per second\";\n        final String descriptionOfCount = \"The total number of calls to put-if-absent\";\n        final String descriptionOfAvg = \"The average latency of calls to put-if-absent\";\n        final String descriptionOfMax = \"The maximum latency of calls to put-if-absent\";\n        shouldGetSensor(\n            metricName,\n            descriptionOfRate,\n            descriptionOfCount,\n            descriptionOfAvg,\n            descriptionOfMax,\n            () -> StateStoreMetrics.putIfAbsentSensor(THREAD_ID, TASK_ID, STORE_TYPE, STORE_NAME, streamsMetrics)\n        );\n    }\n","date":"2019-10-31 00:24:59","endLine":120,"groupId":"1315","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetPutIfAbsentSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/66/fd4e9fabce18fcd639e61c1e7f6d3b23abdb77.src","preCode":"    public void shouldGetPutIfAbsentSensor() {\n        final String metricName = \"put-if-absent\";\n        final String descriptionOfRate = \"The average number of calls to put-if-absent per second\";\n        final String descriptionOfCount = \"The total number of calls to put-if-absent\";\n        final String descriptionOfAvg = \"The average latency of calls to put-if-absent\";\n        final String descriptionOfMax = \"The maximum latency of calls to put-if-absent\";\n        shouldGetSensor(\n            metricName,\n            descriptionOfRate,\n            descriptionOfCount,\n            descriptionOfAvg,\n            descriptionOfMax,\n            () -> StateStoreMetrics.putIfAbsentSensor(THREAD_ID, TASK_ID, STORE_TYPE, STORE_NAME, streamsMetrics)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/metrics/StateStoreMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"B"},{"authorDate":"2019-10-31 00:24:59","commitOrder":1,"curCode":"    public void shouldGetGetSensor() {\n        final String metricName = \"get\";\n        final String descriptionOfRate = \"The average number of calls to get per second\";\n        final String descriptionOfCount = \"The total number of calls to get\";\n        final String descriptionOfAvg = \"The average latency of calls to get\";\n        final String descriptionOfMax = \"The maximum latency of calls to get\";\n        shouldGetSensor(\n            metricName,\n            descriptionOfRate,\n            descriptionOfCount,\n            descriptionOfAvg,\n            descriptionOfMax,\n            () -> StateStoreMetrics.getSensor(THREAD_ID, TASK_ID, STORE_TYPE, STORE_NAME, streamsMetrics)\n        );\n    }\n","date":"2019-10-31 00:24:59","endLine":171,"groupId":"1315","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetGetSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/66/fd4e9fabce18fcd639e61c1e7f6d3b23abdb77.src","preCode":"    public void shouldGetGetSensor() {\n        final String metricName = \"get\";\n        final String descriptionOfRate = \"The average number of calls to get per second\";\n        final String descriptionOfCount = \"The total number of calls to get\";\n        final String descriptionOfAvg = \"The average latency of calls to get\";\n        final String descriptionOfMax = \"The maximum latency of calls to get\";\n        shouldGetSensor(\n            metricName,\n            descriptionOfRate,\n            descriptionOfCount,\n            descriptionOfAvg,\n            descriptionOfMax,\n            () -> StateStoreMetrics.getSensor(THREAD_ID, TASK_ID, STORE_TYPE, STORE_NAME, streamsMetrics)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/metrics/StateStoreMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"B"}],"commitId":"fc0f82372e1e456cbd43490b9eba957c4a0d3eb5","commitMessage":"@@@KAFKA-8980: Refactor state-store-level streams metrics (#7584)\n\nRefactors metrics according to KIP-444\nIntroduces StateStoreMetrics as a central provider for state store metrics\nAdds metric scope (a.k.a. store type) to the in-memory suppression buffer\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.   Bill Bejeck <bbejeck@gmail.com>","date":"2019-10-31 00:24:59","modifiedFileCount":"26","status":"B","submitter":"Bruno Cadonna"},{"authorTime":"2021-06-01 20:05:08","codes":[{"authorDate":"2021-06-01 20:05:08","commitOrder":2,"curCode":"    public void shouldGetPutIfAbsentSensor() {\n        final String metricName = \"put-if-absent\";\n        final String descriptionOfRate = \"The average number of calls to put-if-absent per second\";\n        final String descriptionOfAvg = \"The average latency of calls to put-if-absent\";\n        final String descriptionOfMax = \"The maximum latency of calls to put-if-absent\";\n        shouldGetSensor(\n            metricName,\n            descriptionOfRate,\n            descriptionOfAvg,\n            descriptionOfMax,\n            () -> StateStoreMetrics.putIfAbsentSensor(TASK_ID, STORE_TYPE, STORE_NAME, streamsMetrics)\n        );\n    }\n","date":"2021-06-01 20:05:08","endLine":89,"groupId":"101237","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"shouldGetPutIfAbsentSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/bc06abd0b418b6d2593b4cc487d0c1ecf0957c.src","preCode":"    public void shouldGetPutIfAbsentSensor() {\n        final String metricName = \"put-if-absent\";\n        final String descriptionOfRate = \"The average number of calls to put-if-absent per second\";\n        final String descriptionOfCount = \"The total number of calls to put-if-absent\";\n        final String descriptionOfAvg = \"The average latency of calls to put-if-absent\";\n        final String descriptionOfMax = \"The maximum latency of calls to put-if-absent\";\n        shouldGetSensor(\n            metricName,\n            descriptionOfRate,\n            descriptionOfCount,\n            descriptionOfAvg,\n            descriptionOfMax,\n            () -> StateStoreMetrics.putIfAbsentSensor(THREAD_ID, TASK_ID, STORE_TYPE, STORE_NAME, streamsMetrics)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/metrics/StateStoreMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2021-06-01 20:05:08","commitOrder":2,"curCode":"    public void shouldGetGetSensor() {\n        final String metricName = \"get\";\n        final String descriptionOfRate = \"The average number of calls to get per second\";\n        final String descriptionOfAvg = \"The average latency of calls to get\";\n        final String descriptionOfMax = \"The maximum latency of calls to get\";\n        shouldGetSensor(\n            metricName,\n            descriptionOfRate,\n            descriptionOfAvg,\n            descriptionOfMax,\n            () -> StateStoreMetrics.getSensor(TASK_ID, STORE_TYPE, STORE_NAME, streamsMetrics)\n        );\n    }\n","date":"2021-06-01 20:05:08","endLine":134,"groupId":"101237","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"shouldGetGetSensor","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/fc/bc06abd0b418b6d2593b4cc487d0c1ecf0957c.src","preCode":"    public void shouldGetGetSensor() {\n        final String metricName = \"get\";\n        final String descriptionOfRate = \"The average number of calls to get per second\";\n        final String descriptionOfCount = \"The total number of calls to get\";\n        final String descriptionOfAvg = \"The average latency of calls to get\";\n        final String descriptionOfMax = \"The maximum latency of calls to get\";\n        shouldGetSensor(\n            metricName,\n            descriptionOfRate,\n            descriptionOfCount,\n            descriptionOfAvg,\n            descriptionOfMax,\n            () -> StateStoreMetrics.getSensor(THREAD_ID, TASK_ID, STORE_TYPE, STORE_NAME, streamsMetrics)\n        );\n    }\n","realPath":"streams/src/test/java/org/apache/kafka/streams/state/internals/metrics/StateStoreMetricsTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"}],"commitId":"cfe642edee80977173279f4a41e23aa822b9d19f","commitMessage":"@@@KAFKA-12519: Remove built-in Streams metrics for versions 0.10.0-2.4 (#10765)\n\nAs specified in KIP-743.  this PR removes the built-in metrics\nin Streams that are superseded by the refactoring proposed in KIP-444.\n\nReviewers: Guozhang Wang <wangguoz@gmail.com>.  Luke Chen <showuon@gmail.com>","date":"2021-06-01 20:05:08","modifiedFileCount":"73","status":"M","submitter":"Bruno Cadonna"}]
