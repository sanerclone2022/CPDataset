[{"authorTime":"2017-11-23 01:54:06","codes":[{"authorDate":"2017-11-23 01:54:06","commitOrder":1,"curCode":"    public void testCreateConnectorWithSpecialCharsInName() throws Throwable {\n        CreateConnectorRequest body = new CreateConnectorRequest(CONNECTOR_NAME_SPECIAL_CHARS, Collections.singletonMap(ConnectorConfig.NAME_CONFIG, CONNECTOR_NAME_SPECIAL_CHARS));\n\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_SPECIAL_CHARS), EasyMock.eq(body.config()), EasyMock.eq(false), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_SPECIAL_CHARS, CONNECTOR_CONFIG,\n                CONNECTOR_TASK_NAMES, ConnectorType.SOURCE)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.createConnector(FORWARD, body).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_SPECIAL_CHARS, decoded);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-11-23 01:54:06","endLine":342,"groupId":"22308","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnectorWithSpecialCharsInName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cb/86143c207a7c13f200c9f6a6a11bdd3ab2dc42.src","preCode":"    public void testCreateConnectorWithSpecialCharsInName() throws Throwable {\n        CreateConnectorRequest body = new CreateConnectorRequest(CONNECTOR_NAME_SPECIAL_CHARS, Collections.singletonMap(ConnectorConfig.NAME_CONFIG, CONNECTOR_NAME_SPECIAL_CHARS));\n\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_SPECIAL_CHARS), EasyMock.eq(body.config()), EasyMock.eq(false), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_SPECIAL_CHARS, CONNECTOR_CONFIG,\n                CONNECTOR_TASK_NAMES, ConnectorType.SOURCE)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.createConnector(FORWARD, body).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_SPECIAL_CHARS, decoded);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":327,"status":"B"},{"authorDate":"2017-11-23 01:54:06","commitOrder":1,"curCode":"    public void testPutConnectorConfigWithSpecialCharsInName() throws Throwable {\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_SPECIAL_CHARS), EasyMock.eq(CONNECTOR_CONFIG_SPECIAL_CHARS), EasyMock.eq(true), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_SPECIAL_CHARS, CONNECTOR_CONFIG_SPECIAL_CHARS, CONNECTOR_TASK_NAMES,\n                ConnectorType.SINK)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.putConnectorConfig(CONNECTOR_NAME_SPECIAL_CHARS, FORWARD, CONNECTOR_CONFIG_SPECIAL_CHARS).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_SPECIAL_CHARS, decoded);\n\n        PowerMock.verifyAll();\n    }\n","date":"2017-11-23 01:54:06","endLine":359,"groupId":"22311","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPutConnectorConfigWithSpecialCharsInName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/cb/86143c207a7c13f200c9f6a6a11bdd3ab2dc42.src","preCode":"    public void testPutConnectorConfigWithSpecialCharsInName() throws Throwable {\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_SPECIAL_CHARS), EasyMock.eq(CONNECTOR_CONFIG_SPECIAL_CHARS), EasyMock.eq(true), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_SPECIAL_CHARS, CONNECTOR_CONFIG_SPECIAL_CHARS, CONNECTOR_TASK_NAMES,\n                ConnectorType.SINK)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.putConnectorConfig(CONNECTOR_NAME_SPECIAL_CHARS, FORWARD, CONNECTOR_CONFIG_SPECIAL_CHARS).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_SPECIAL_CHARS, decoded);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":345,"status":"B"}],"commitId":"c5f31fe3840e87fbdda63444ef285ede840744cf","commitMessage":"@@@KAFKA-4827: Correctly encode special chars while creating URI objects\n\nSigned-off-by: Arjun Satish <arjunconfluent.io>\n\nAuthor: Arjun Satish <arjun@confluent.io>\n\nReviewers: Randall Hauch <rhauch@gmail.com>.  Ewen Cheslack-Postava <ewen@confluent.io>\n\nCloses #4205 from wicknicks/KAFKA-4827\n","date":"2017-11-23 01:54:06","modifiedFileCount":"2","status":"B","submitter":"Arjun Satish"},{"authorTime":"2019-06-04 10:06:00","codes":[{"authorDate":"2019-06-04 10:06:00","commitOrder":2,"curCode":"    public void testCreateConnectorWithSpecialCharsInName() throws Throwable {\n        CreateConnectorRequest body = new CreateConnectorRequest(CONNECTOR_NAME_SPECIAL_CHARS, Collections.singletonMap(ConnectorConfig.NAME_CONFIG, CONNECTOR_NAME_SPECIAL_CHARS));\n\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_SPECIAL_CHARS), EasyMock.eq(body.config()), EasyMock.eq(false), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_SPECIAL_CHARS, CONNECTOR_CONFIG,\n                CONNECTOR_TASK_NAMES, ConnectorType.SOURCE)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.createConnector(FORWARD, NULL_HEADERS, body).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_SPECIAL_CHARS, decoded);\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-06-04 10:06:00","endLine":528,"groupId":"104966","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCreateConnectorWithSpecialCharsInName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/90df03afb6d6b896a49f72d47a6b70d82ca8f9.src","preCode":"    public void testCreateConnectorWithSpecialCharsInName() throws Throwable {\n        CreateConnectorRequest body = new CreateConnectorRequest(CONNECTOR_NAME_SPECIAL_CHARS, Collections.singletonMap(ConnectorConfig.NAME_CONFIG, CONNECTOR_NAME_SPECIAL_CHARS));\n\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_SPECIAL_CHARS), EasyMock.eq(body.config()), EasyMock.eq(false), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_SPECIAL_CHARS, CONNECTOR_CONFIG,\n                CONNECTOR_TASK_NAMES, ConnectorType.SOURCE)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.createConnector(FORWARD, body).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_SPECIAL_CHARS, decoded);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":513,"status":"M"},{"authorDate":"2019-06-04 10:06:00","commitOrder":2,"curCode":"    public void testPutConnectorConfigWithSpecialCharsInName() throws Throwable {\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_SPECIAL_CHARS), EasyMock.eq(CONNECTOR_CONFIG_SPECIAL_CHARS), EasyMock.eq(true), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_SPECIAL_CHARS, CONNECTOR_CONFIG_SPECIAL_CHARS, CONNECTOR_TASK_NAMES,\n                ConnectorType.SINK)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.putConnectorConfig(CONNECTOR_NAME_SPECIAL_CHARS, NULL_HEADERS, FORWARD, CONNECTOR_CONFIG_SPECIAL_CHARS).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_SPECIAL_CHARS, decoded);\n\n        PowerMock.verifyAll();\n    }\n","date":"2019-06-04 10:06:00","endLine":563,"groupId":"104966","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPutConnectorConfigWithSpecialCharsInName","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-kafka-10-0.7/blobInfo/CC_OUT/blobs/54/90df03afb6d6b896a49f72d47a6b70d82ca8f9.src","preCode":"    public void testPutConnectorConfigWithSpecialCharsInName() throws Throwable {\n        final Capture<Callback<Herder.Created<ConnectorInfo>>> cb = Capture.newInstance();\n\n        herder.putConnectorConfig(EasyMock.eq(CONNECTOR_NAME_SPECIAL_CHARS), EasyMock.eq(CONNECTOR_CONFIG_SPECIAL_CHARS), EasyMock.eq(true), EasyMock.capture(cb));\n        expectAndCallbackResult(cb, new Herder.Created<>(true, new ConnectorInfo(CONNECTOR_NAME_SPECIAL_CHARS, CONNECTOR_CONFIG_SPECIAL_CHARS, CONNECTOR_TASK_NAMES,\n                ConnectorType.SINK)));\n\n        PowerMock.replayAll();\n\n        String rspLocation = connectorsResource.putConnectorConfig(CONNECTOR_NAME_SPECIAL_CHARS, FORWARD, CONNECTOR_CONFIG_SPECIAL_CHARS).getLocation().toString();\n        String decoded = new URI(rspLocation).getPath();\n        Assert.assertEquals(\"/connectors/\" + CONNECTOR_NAME_SPECIAL_CHARS, decoded);\n\n        PowerMock.verifyAll();\n    }\n","realPath":"connect/runtime/src/test/java/org/apache/kafka/connect/runtime/rest/resources/ConnectorsResourceTest.java","repoName":"kafka","snippetEndLine":0,"snippetStartLine":0,"startLine":549,"status":"M"}],"commitId":"1a3fe9aa52555eb24ce692963e4461d6f05b771d","commitMessage":"@@@KAFKA-8404: Add HttpHeader to RestClient HTTP Request and Connector REST API (#6791)\n\nWhen Connect forwards a REST request from one worker to another.  the Authorization header was not forwarded. This commit changes the Connect framework to add include the authorization header when forwarding requests to other workers.\n\nAuthor: Hai-Dang Dam <damquanghaidang@gmail.com>\nReviewers: Robert Yokota <rayokota@gmail.com>.  Randall Hauch <rhauch@gmail.com>\n","date":"2019-06-04 10:06:00","modifiedFileCount":"7","status":"M","submitter":"Hai-Dang Dam"}]
